<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FShiryaev1D.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FShiryaev1D_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FShiryaev1D.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FShiryaev1D_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// example function object class to use with MRSampler class</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">using namespace </span>std;
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>cxsc;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="FShiryaev1D_8hpp.shtml">FShiryaev1D.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">// implementation of FShiryaev1D class -- the stretched oscilating exponential</span>
<a name="l00045"></a>00045 
<a name="l00046"></a><a class="code" href="classFShiryaev1D.shtml#a777dc6438cdc40a0c93dedfc491900f3">00046</a> <a class="code" href="classFShiryaev1D.shtml#a777dc6438cdc40a0c93dedfc491900f3">FShiryaev1D::FShiryaev1D</a> (real A, real E, 
<a name="l00047"></a>00047                           real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>, <span class="keywordtype">bool</span> LogPi, <span class="keywordtype">int</span> Prior)
<a name="l00048"></a>00048 :
<a name="l00049"></a>00049 aa (A),
<a name="l00050"></a>00050 cc(E)
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00053"></a>00053   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;
<a name="l00054"></a>00054   <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>!=0)
<a name="l00055"></a>00055   {
<a name="l00056"></a>00056     cerr &lt;&lt; <span class="stringliteral">&quot;Only uniform prior defined here... Reset to Uniform Prior\n&quot;</span>;
<a name="l00057"></a>00057     <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>=0;
<a name="l00058"></a>00058   }
<a name="l00059"></a>00059   <a class="code" href="classFShiryaev1D.shtml#a66f8360cc03dd1361ceb124fc15c0d91">AA</a> = _interval (<a class="code" href="classFShiryaev1D.shtml#a6ad03231ef56eaa821a14088c28e5301">aa</a>);
<a name="l00060"></a>00060   <a class="code" href="classFShiryaev1D.shtml#a4da3224ab754db6253a91b2f50c48bd7">CC</a> = _interval(<a class="code" href="classFShiryaev1D.shtml#a60d3bffaae43ec10e8204ba1bed5f708">cc</a>);
<a name="l00061"></a>00061   ivector domain (1, 1);
<a name="l00062"></a>00062   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
<a name="l00063"></a>00063   domain[1] = interval (0.0000000000001, DomainLimit);
<a name="l00064"></a>00064   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00065"></a>00065   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00066"></a>00066   <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 interval
<a name="l00070"></a><a class="code" href="classFShiryaev1D.shtml#a8e4ea007da7c37a1491f56fe663b7437">00070</a> <a class="code" href="classFShiryaev1D.shtml#a8e4ea007da7c37a1491f56fe663b7437" title="a pure virtual function for interval image of boxes under Fobj">FShiryaev1D::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp; X)<span class="keyword"></span>
<a name="l00071"></a>00071 <span class="keyword">const</span>
<a name="l00072"></a>00072 <span class="keyword"></span>{
<a name="l00073"></a>00073   <a class="code" href="classFShiryaev1D.shtml#a883a026ce025e27ad577d7119aec3d5b" title="Track number of interval function calls.">n_interval_calls</a>++;
<a name="l00074"></a>00074   ivector Box = X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00075"></a>00075                     <span class="comment">//, z=Ub(Box);</span>
<a name="l00076"></a>00076   <span class="keywordtype">size_t</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (Box);
<a name="l00077"></a>00077   <span class="comment">//interval Nc = pow(AA, 1.0/BB) / GAMMA1PLUS1OVERBB;</span>
<a name="l00078"></a>00078   interval aXtoL = <a class="code" href="classFShiryaev1D.shtml#a66f8360cc03dd1361ceb124fc15c0d91">AA</a> * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (Box[a], <a class="code" href="FShiryaev1D_8hpp.shtml#ad91fa5bb7926a489c6e63eb6f6ca4a19">BB</a>);
<a name="l00079"></a>00079   <span class="comment">//interval result = </span>
<a name="l00080"></a>00080   <span class="comment">// Nc * exp(- aXtoL) * (1.0 + (CC * sin( aXtoL * tan( BB * PI) )));</span>
<a name="l00081"></a>00081   interval result =
<a name="l00082"></a>00082     <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-aXtoL) * (1.0 + (<a class="code" href="classFShiryaev1D.shtml#a4da3224ab754db6253a91b2f50c48bd7">CC</a> * <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> (aXtoL * <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a> (<a class="code" href="FShiryaev1D_8hpp.shtml#ad91fa5bb7926a489c6e63eb6f6ca4a19">BB</a> * <a class="code" href="FShiryaev1D_8hpp.shtml#a598a3330b3c21701223ee0ca14316eca">PI</a>))));
<a name="l00083"></a>00083   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 real
<a name="l00087"></a><a class="code" href="classFShiryaev1D.shtml#af6742131d4d7acf6327d757a112b35ee">00087</a> <a class="code" href="classFShiryaev1D.shtml#a8e4ea007da7c37a1491f56fe663b7437" title="a pure virtual function for interval image of boxes under Fobj">FShiryaev1D::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp; X)<span class="keyword"> const</span>
<a name="l00088"></a>00088 <span class="keyword"></span>{
<a name="l00089"></a>00089   <a class="code" href="classFShiryaev1D.shtml#a509bc24aebc78394aeb8181620fa6c72" title="Track number of real function calls.">n_real_calls</a>++;
<a name="l00090"></a>00090   rvector Pnt = X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>;
<a name="l00091"></a>00091                     <span class="comment">//, z=Ub(Pnt);</span>
<a name="l00092"></a>00092   <span class="keywordtype">size_t</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (Pnt);
<a name="l00093"></a>00093   <span class="comment">//real Nc = pow(aa, 1.0/bb) / Gamma1plus1overbb;</span>
<a name="l00094"></a>00094   real aXtoL = <a class="code" href="classFShiryaev1D.shtml#a6ad03231ef56eaa821a14088c28e5301">aa</a> * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (Pnt[a], <a class="code" href="FShiryaev1D_8hpp.shtml#afe4fb267f5fd876bc5f069b0a76054e4">bb</a>);
<a name="l00095"></a>00095   <span class="comment">//real result = Nc * exp(- aXtoL) * </span>
<a name="l00096"></a>00096   <span class="comment">//              (1.0 + (cc * sin( aXtoL * tan( bb * Pi) )));</span>
<a name="l00097"></a>00097   real result =
<a name="l00098"></a>00098     <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-aXtoL) * (1.0 + (<a class="code" href="classFShiryaev1D.shtml#a60d3bffaae43ec10e8204ba1bed5f708">cc</a> * <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> (aXtoL * <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a> (<a class="code" href="FShiryaev1D_8hpp.shtml#afe4fb267f5fd876bc5f069b0a76054e4">bb</a> * <a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>))));
<a name="l00099"></a>00099   <span class="comment">//assert( result &lt; 1.0 );</span>
<a name="l00100"></a>00100   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aef5ea1fbdc387780a35129766d3ffeb1">FShiryaev1D_Lkl_aa_fromData::</a>
<a name="l00104"></a><a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aef5ea1fbdc387780a35129766d3ffeb1">00104</a> <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aef5ea1fbdc387780a35129766d3ffeb1">FShiryaev1D_Lkl_aa_fromData</a> (<a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> &amp; d, real E, interval DomainInterval, 
<a name="l00105"></a>00105                              <span class="keywordtype">bool</span> LogPi, <span class="keywordtype">int</span> Prior)
<a name="l00106"></a>00106 :
<a name="l00107"></a>00107 Data (d), 
<a name="l00108"></a>00108 cc(E)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00111"></a>00111   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;
<a name="l00112"></a>00112   <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>!=0)
<a name="l00113"></a>00113   {
<a name="l00114"></a>00114     cerr &lt;&lt; <span class="stringliteral">&quot;Only uniform prior defined here... Reset to Uniform Prior\n&quot;</span>;
<a name="l00115"></a>00115     <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>=0;
<a name="l00116"></a>00116   }
<a name="l00117"></a>00117   <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a306213ac1c465cf9d2bd6d1e502fcce2">CC</a> = _interval(<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a1790f5e4dfc6d207371994c04e154c21" title="cc is assumed to be known">cc</a>);
<a name="l00118"></a>00118                     <span class="comment">//domain for the alpha parameter in the likelihood</span>
<a name="l00119"></a>00119   ivector domain (1, 1);
<a name="l00120"></a>00120   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
<a name="l00121"></a>00121   domain[1] = DomainInterval;
<a name="l00122"></a>00122   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00123"></a>00123   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00124"></a>00124   <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 interval
<a name="l00128"></a><a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ac3ef0d8ca7ece7015c1c79af2a85e261">00128</a> <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ac3ef0d8ca7ece7015c1c79af2a85e261" title="a pure virtual function for interval image of boxes under Fobj">FShiryaev1D_Lkl_aa_fromData::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp; X)<span class="keyword"> const</span>
<a name="l00129"></a>00129 <span class="keyword"></span>{
<a name="l00130"></a>00130   <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a7c759aeef9b7dbe5223ea3a564c60124" title="Track number of interval function calls.">n_interval_calls</a>++;
<a name="l00131"></a>00131                     <span class="comment">//, z=Ub(Box);</span>
<a name="l00132"></a>00132   <span class="keywordtype">size_t</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00133"></a>00133   <span class="comment">// the logarithm of data-independent term in the product likelihood</span>
<a name="l00134"></a>00134   interval lnNc = _real(<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size()) * 
<a name="l00135"></a>00135                   <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[a], 1.0 / <a class="code" href="FShiryaev1D_8hpp.shtml#ad91fa5bb7926a489c6e63eb6f6ca4a19">BB</a>) / <a class="code" href="FShiryaev1D_8hpp.shtml#abca812365443438840de4561c84b2c49">GAMMA1PLUS1OVERBB</a> );
<a name="l00136"></a>00136   
<a name="l00137"></a>00137   interval result = lnNc;
<a name="l00138"></a>00138   vector&lt;LabPnt&gt;::const_iterator it = <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin();
<a name="l00139"></a>00139   <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i0=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Pnt); it!=<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); it++)
<a name="l00140"></a>00140   {
<a name="l00141"></a>00141     interval aXtoL = X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[a] * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (_interval(it-&gt;Pnt[i0]), <a class="code" href="FShiryaev1D_8hpp.shtml#ad91fa5bb7926a489c6e63eb6f6ca4a19">BB</a>);
<a name="l00143"></a>00143     result += ( (-aXtoL) + <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 + (<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a306213ac1c465cf9d2bd6d1e502fcce2">CC</a> * <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> (aXtoL * <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a> (<a class="code" href="FShiryaev1D_8hpp.shtml#ad91fa5bb7926a489c6e63eb6f6ca4a19">BB</a> * <a class="code" href="FShiryaev1D_8hpp.shtml#a598a3330b3c21701223ee0ca14316eca">PI</a>)))) );
<a name="l00144"></a>00144   }
<a name="l00145"></a>00145   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? (result) : <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(result);
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a><a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aa14358629387c248e96ccc8183fa9353">00148</a> real <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ac3ef0d8ca7ece7015c1c79af2a85e261" title="a pure virtual function for interval image of boxes under Fobj">FShiryaev1D_Lkl_aa_fromData::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp; X)<span class="keyword"> const</span>
<a name="l00149"></a>00149 <span class="keyword"></span>{
<a name="l00150"></a>00150   <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a1a371cc6b90e1b0a1975d1ddbcdac4eb" title="Track number of real function calls.">n_real_calls</a>++;
<a name="l00151"></a>00151   <span class="keywordtype">size_t</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>);
<a name="l00152"></a>00152   <span class="comment">// the logarithm of data-independent term in the product likelihood</span>
<a name="l00153"></a>00153   real lnNc = _real(<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size()) * 
<a name="l00154"></a>00154               <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[a], 1.0 / <a class="code" href="FShiryaev1D_8hpp.shtml#afe4fb267f5fd876bc5f069b0a76054e4">bb</a>) / <a class="code" href="FShiryaev1D_8hpp.shtml#a69136b13d995adc5cbd3e951eaa6da60">Gamma1plus1overbb</a> );
<a name="l00155"></a>00155   real result = lnNc;
<a name="l00156"></a>00156   vector&lt;LabPnt&gt;::const_iterator it = <a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin();
<a name="l00157"></a>00157   <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i0=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Pnt); it!=<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a63bdd5ba904fa6775561cdd28176b337" title="Store the data to estimate parameter aa.">Data</a>.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); it++)
<a name="l00158"></a>00158   {
<a name="l00159"></a>00159     real aXtoL = X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[a] * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (it-&gt;Pnt[i0], <a class="code" href="FShiryaev1D_8hpp.shtml#afe4fb267f5fd876bc5f069b0a76054e4">bb</a>);
<a name="l00161"></a>00161     result += ( (-aXtoL) + <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 + (<a class="code" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a1790f5e4dfc6d207371994c04e154c21" title="cc is assumed to be known">cc</a> * <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> (aXtoL * <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a> (<a class="code" href="FShiryaev1D_8hpp.shtml#afe4fb267f5fd876bc5f069b0a76054e4">bb</a> * <a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>)))) );
<a name="l00162"></a>00162   }
<a name="l00163"></a>00163   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? (result) : <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(result);
<a name="l00164"></a>00164 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FShiryaev1D_8cpp.shtml">FShiryaev1D.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
