<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MRSampler Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classMRSampler.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">MRSampler Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="MRSampler" -->
<p>The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces.  
 <a href="classMRSampler.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for MRSampler:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classMRSampler__coll__graph.png" border="0" usemap="#MRSampler_coll__map" alt="Collaboration graph"/></div>
<map name="MRSampler_coll__map" id="MRSampler_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classMRSampler-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a6fc8464ae6da9a1721ff3f437e03d8ef">MRSampler</a> (<a class="el" href="classFobj.shtml">Fobj</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, int max_n_boxes, double Alb, unsigned seed=gsl_rng_default_seed, bool use_f_scale=true)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialised constructor.  <a href="#a6fc8464ae6da9a1721ff3f437e03d8ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab7fdfefd1123153f759ae4ceb775a10a">~MRSampler</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ab7fdfefd1123153f759ae4ceb775a10a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d">getPALB</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return lower bound on the acceptance prob.  <a href="#addd59ad1e400adae3c46b562c7ceb80d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23">Refine</a> (double Alb)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf.  <a href="#a975802b28786372a0b1ee461184d3b23"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab6456ed49e2b5a903035ae7ef32cc5f2">RefineUntil</a> (unsigned int Desired_N_boxes)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Refine partition by bisections until Desired_N_boxes many boxes is reached, then setup pdf.  <a href="#ab6456ed49e2b5a903035ae7ef32cc5f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ae72be9880b00d25266c10d2f13365abf">Refine</a> (int Nbisect)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Refine partition by doing Nbisect many bisections.  <a href="#ae72be9880b00d25266c10d2f13365abf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321">get_n_boxes</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of boxes in RangeDomainSet.  <a href="#a30f5c5489a08545226b462ace92dc321"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a92103320447370feb1f9452915534a91">Print_Domain_Partition</a> (std::ostream &amp;out)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print labeled boxes in domain partition DomainParts [C-XSC output format].  <a href="#a92103320447370feb1f9452915534a91"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a7c1905d15eef55fd405cf6e03550f6c1">Output_Domain_Partition</a> (std::ostream &amp;out)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print labeled boxes in domain partition DomainParts [naive TAB-delimited numeric only format].  <a href="#a7c1905d15eef55fd405cf6e03550f6c1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78">MRSoutput</a> (std::ostream &amp;os, const double eps=0) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the RangeDomainSet in tab-delimited numeric only format.  <a href="#a7142c1478e259ec85354407fccfbfa78"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classLabPnt.shtml">LabPnt</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a3ab6aa3b0bb466c67c69db97e2dad5f2">RejectionSampleOnce</a> (int &amp;tries)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return one sample of labeled point via rejection sampling, if possible.  <a href="#a3ab6aa3b0bb466c67c69db97e2dad5f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12">RejectionSampleMany</a> (int nRS, <a class="el" href="classRSSample.shtml">RSSample</a> &amp;theSample)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw nRS many samples of labeled points via rejection sampling, if possible.  <a href="#aac7c2e726a813ad155151c99cbdb7f12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a1e1e42a57421caa0b13b194372d0b067">ImportanceSampleManyQuasi</a> (int NSamples, bool residual, <a class="el" href="classISSample.shtml">ISSample</a> &amp;theSample)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Importance sampling with Quasi random numbers -- [Ignore: experimental].  <a href="#a1e1e42a57421caa0b13b194372d0b067"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d">ImportanceSampleMany</a> (int NSamples, bool residual, bool pseudoRNG, <a class="el" href="classISSample.shtml">ISSample</a> &amp;theSample)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Importance sampling with Pseudo/Quasi random numbers.  <a href="#a4fc816422109d41053f1171346463b7d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a73999a2d6df8b33ddd459b6bcf9696f9">ImportanceSampleManyPseudo</a> (int NSamples, bool residual, <a class="el" href="classISSample.shtml">ISSample</a> &amp;theSample)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Importance sampling with Pseudo random numbers.  <a href="#a73999a2d6df8b33ddd459b6bcf9696f9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a25d99bdee1a715fb2a8e2a8068b890db">PrintBoxes</a> (int Nprint)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">getIL</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a8a056b8e90fb8f72ff3923dca3257384">get_unscaled_IU</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a6d1a6fd3218a62ac5e77abe2a00ac84a">getIUminusL</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab663935171c58ac98f0eeee73c02cbc6">getUmax</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">getPAest</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a37146ff923183a8563e57191d3e6bfa4">get_wsum</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a281cb5fb693559dcbd4f90e7d5f37d3e">get_nsum</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a85b66f54b156a0a742b48afcf2997379">get_wmax</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aa2d8b962208940151e182e6b3ccb3874">get_wmin</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da">updateIntegral</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">update Integral using present partition  <a href="#a973099a9a64b6e447b196e8fecc121da"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e">updateUmax</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Updating the upper and lower bounds for the global maximum of target F.  <a href="#a7e98b9c2e972668a7df1b1b4853bef6e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a0302488b026965e8e6c401037a0c9240">get_n_topologies</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab5bb18ce86dcf3e6835084e12ad3caff">get_nonresidual_samples</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classRangedLabBox.shtml">RangedLabBox</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">getBoxREInfo</a> (<a class="el" href="classLabBox.shtml">LabBox</a> LBox)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc">InitRNG</a> (unsigned seed)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize pseudo and Quasi Random Number Generators in GSL.  <a href="#acea6f64c0aba88187122af49c5949ddc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">FirstBox</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489">Bisect</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bisect the box at top of priority queue.  <a href="#ae665da26800e35c295359e0d2dffb489"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419">AdaptPartition</a> (double Alb)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Adaptively partition domain by bisecting the most prioritised labeled box.  <a href="#a68198444d2875642e8ee2cb3f3120419"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">SetupWalker</a> (unsigned int number_of_samples)</td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classFobj.shtml">Fobj</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d">DomainLabelSet</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The set of unique integer labels in LabDomainList.  <a href="#a8497e118c2d180ff59884897ff97ff4d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">topologies</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#adf95f77ac86c63eef71474204ac28efc">Max_n_boxes</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">rvector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">rvector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">wmin</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">wmax</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a64134c93ecebc9f1a53b32c07bc18858">UseFScale</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">gsl_rng *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">gsl_qrng *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">gsl_ran_discrete_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="SmallClasses_8hpp.shtml#a620bc30fe4c7a65c0a4cdbaf724bd9e9">RangedLabBoxSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces. </p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000005">Todo:</a></b></dt><dd>In <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> everything is inline for now -- we need to make this truly object oriented, add a default constructor, add mrs namespace, get rid of #defines, etc. Needs about 20 hours for complete documentation... </dd></dl>

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00036">36</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a6fc8464ae6da9a1721ff3f437e03d8ef"></a><!-- doxytag: member="MRSampler::MRSampler" ref="a6fc8464ae6da9a1721ff3f437e03d8ef" args="(Fobj &amp;f, int max_n_boxes, double Alb, unsigned seed=gsl_rng_default_seed, bool use_f_scale=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMRSampler.shtml#a6fc8464ae6da9a1721ff3f437e03d8ef">MRSampler::MRSampler</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFobj.shtml">Fobj</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>max_n_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>Alb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>seed</em> = <code>gsl_rng_default_seed</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_f_scale</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialised constructor. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00080">80</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00075">BIGNEGATIVE</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00163">Domain</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00165">DomainLabelSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00196">Fobj::getUsingLogDensity()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00802">InitRNG()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00167">n_dim_max</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00173">nonresidual_samples</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00181">nsum</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00196">proposalpmf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00171">Refine()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00170">topologies</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Umax</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wmax</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wmin</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wsum</a>.</p>
<div class="fragment"><pre class="fragment">:
<span class="comment">// target density or shape</span>
<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (f),
<span class="comment">// should be vector of LabBox</span>
<a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a> (f.<a class="code" href="classFobj.shtml#a69285b7966b3711d04dadf874ae6332a" title="Get the list of labeled domains.">get_domain</a> ()),
<span class="comment">// should be corresponding labels</span>
<a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a> (f.<a class="code" href="classFobj.shtml#aab479dd3bf44fa338cbab0991b783189" title="Get the set of unique integer labels in LabDomainList.">get_labelset</a> ()),
<a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>(0),
<a class="code" href="classMRSampler.shtml#adf95f77ac86c63eef71474204ac28efc">Max_n_boxes</a> (max_n_boxes),
<a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>(0),
<a class="code" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a>(<span class="keyword">false</span>),
<a class="code" href="classMRSampler.shtml#a64134c93ecebc9f1a53b32c07bc18858">UseFScale</a>(use_f_scale),
<a class="code" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a> (<span class="keyword">false</span>),
<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> (NULL),
<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> (NULL),
<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> (NULL),
<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a> (NULL),
<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a> (<a class="code" href="classSortBox.shtml" title="A Function Object class for a sorting criterion between one RangedLabBox and another.">SortBox</a> (<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92" title="get the target scale being used">getUsingLogDensity</a> ()))
{                   <span class="comment">// constructor</span>

  <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = <a class="code" href="MRSampler_8cpp.shtml#ae1758ec128ca919e83bfb56f65d5d9f5">BIGNEGATIVE</a>;
  <a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a> = 0.0;
  <a class="code" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">wmax</a> = -1.0;
  <a class="code" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">wmin</a> = 1.0e100;
  <a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a> = 0;

  vector &lt; LabBox &gt;::const_iterator it = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.begin();
  <span class="comment">//n_dimensions = 1 + Ub (it-&gt;Box) - Lb (it-&gt;Box);</span>

  <span class="keywordflow">for</span>(it = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.begin(); it != <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.end(); it++)
  {
    <span class="comment">//int label = it-&gt;L;</span>
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_dimensions = 1 + <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (it-&gt;Box) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (it-&gt;Box);
    <span class="comment">//   cout &lt;&lt; &quot;label, n_dimensions[label]: &quot; &lt;&lt; label &lt;&lt; &quot; &quot; </span>
    <span class="comment">//          &lt;&lt;  n_dimensions[label] &lt;&lt; endl;</span>
    <span class="keywordflow">if</span>(n_dimensions &gt; <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>){ <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a> = n_dimensions; }
  }

                    <span class="comment">// Domain.size()</span>
  <a class="code" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">topologies</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size());
  <span class="comment">//cout &lt;&lt; &quot;number of topologies = &quot; &lt;&lt; topologies &lt;&lt; endl;</span>
  <a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92" title="get the target scale being used">getUsingLogDensity</a> ();
  <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> = 0;

  <span class="comment">//  cout &lt;&lt; &quot;#x, f(x) &quot; &lt;&lt; endl;</span>
  <span class="comment">//   ofstream outx (&quot;fout&quot;);</span>
  <span class="comment">//   for(int i=1; i&lt;1000; i++){</span>
  <span class="comment">//       LabPnt P;</span>
  <span class="comment">//       rvector x (1, n_dimensions);</span>
  <span class="comment">//       x[1] = i*0.001;</span>
  <span class="comment">//       P.Pnt = x;</span>
  <span class="comment">//       P.L = 0;</span>
  <span class="comment">//       outx &lt;&lt; P.Pnt[1] &lt;&lt; &quot;  &quot; &lt;&lt; F(P) &lt;&lt; &quot;   &quot; &lt;&lt; exp(F(P)) &lt;&lt; endl;</span>
  <span class="comment">//   }</span>
  <span class="comment">//   cout &lt;&lt; &quot;after printing fout&quot; &lt;&lt; endl;</span>
  <a class="code" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc" title="Initialize pseudo and Quasi Random Number Generators in GSL.">InitRNG</a> (seed);   <span class="comment">// initialize the random number generator</span>
  <a class="code" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">FirstBox</a> ();
  cout &lt;&lt; <span class="stringliteral">&quot;after FirstBox, before Refine &quot;</span> &lt;&lt; endl;
  <a class="code" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23" title="Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf.">Refine</a> (Alb);
  cout &lt;&lt; <span class="stringliteral">&quot;after Refine &quot;</span> &lt;&lt; endl;
  <span class="comment">//cout &lt;&lt; &quot;making pdf structure&quot; &lt;&lt; endl;</span>
  <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> =
    gsl_ran_discrete_preproc ((<span class="keywordtype">size_t</span>) <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (), <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab7fdfefd1123153f759ae4ceb775a10a"></a><!-- doxytag: member="MRSampler::~MRSampler" ref="ab7fdfefd1123153f759ae4ceb775a10a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMRSampler.shtml#ab7fdfefd1123153f759ae4ceb775a10a">MRSampler::~MRSampler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00148">148</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00192">own_rng</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00198">proposalpdf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00196">proposalpmf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00194">qrgsl</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00197">residual_proposalpmf</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>.</p>
<div class="fragment"><pre class="fragment">{                   
  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a>)
    gsl_rng_free (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
  gsl_qrng_free (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>);
  gsl_ran_discrete_free (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>);
  free (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> != NULL)
  {
    free (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
  }
  free (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>);
}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a68198444d2875642e8ee2cb3f3120419"></a><!-- doxytag: member="MRSampler::AdaptPartition" ref="a68198444d2875642e8ee2cb3f3120419" args="(double Alb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419">MRSampler::AdaptPartition</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>Alb</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Adaptively partition domain by bisecting the most prioritised labeled box. </p>
<p>The labeled box in the current partition of the domain with largest (prior_integral*diam(range enclosure)) is bisected </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00916">916</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00188">f_scaleDone</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00646">getIL()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00640">getIU()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00164">getPALB()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00171">Max_n_boxes</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00695">updateIntegral()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00171">Refine()</a>.</p>
<div class="fragment"><pre class="fragment">{                  
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> next_updateUmax = 32;
  <span class="comment">//  cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
  <span class="keywordflow">while</span> ((<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () &lt; <a class="code" href="classMRSampler.shtml#adf95f77ac86c63eef71474204ac28efc">Max_n_boxes</a>) &amp;&amp; (<a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt; Alb))
  {
    <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
    <span class="comment">//cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
    <span class="comment">//cout &lt;&lt; &quot;in AdaptPartition. &quot;  &lt;&lt; RangeDomainSet.size() &lt;&lt; endl;</span>
    <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a> &amp;&amp; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () == next_updateUmax)
    {
      cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition before updateUmax. \n&quot;</span>;
      <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
      cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition after updateUmax. \n&quot;</span>;
      <a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da" title="update Integral using present partition">updateIntegral</a> ();
      next_updateUmax *= 2;
    }
  }

  <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
  cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition after updateUmax2 \n&quot;</span>;
  <a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da" title="update Integral using present partition">updateIntegral</a> ();
  <span class="comment">//   cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
  cout &lt;&lt; <span class="stringliteral">&quot;# Adaptive partitioning complete. Boxes: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.
    size () &lt;&lt; <span class="stringliteral">&quot;  Lower bound on Acceptance Prob.: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt;&lt;
    <span class="stringliteral">&quot; IL, IU: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">getIL</a> () &lt;&lt; <span class="stringliteral">&quot;   &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> () &lt;&lt; endl;
  <span class="comment">//  getchar();</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae665da26800e35c295359e0d2dffb489"></a><!-- doxytag: member="MRSampler::Bisect" ref="ae665da26800e35c295359e0d2dffb489" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489">MRSampler::Bisect</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Bisect the box at top of priority queue. </p>
<p>Bisect the box at the beginning of the RangeDomainSet and push two resulting boxes onto set. Always bisect along the first dimension with the longest side. RangeDomainSet is STL set -- sorted associative container. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00848">848</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00161">Fobj::BisectPt()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00140">RangedLabBox::BoxIntegral()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00128">RangedLabBox::BoxRE</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00186">f_scale</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00202">get_n_boxes()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00781">getBoxREInfo()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00164">getPALB()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Lmax</a>, <a class="el" href="toolz_8cpp_source.shtml#l00159">MaxDiamComp()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00191">Refine()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00180">RefineUntil()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//cout &lt;&lt; &quot;bisecting\n&quot;; getchar();</span>
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox (*(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ()));
  <span class="comment">//   cout &lt;&lt; &quot;top two boxes: &quot; &lt;&lt; endl;</span>
  <span class="comment">//   theBox.Print(cout);</span>
                    <span class="comment">// remove from the set the box to be bisected.</span>
  <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.erase (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ());

  <span class="comment">//   theBox = (*(RangeDomainSet.begin ()));</span>
  <span class="comment">//   theBox.Print(cout);</span>
  <span class="comment">//  (RangeDomainSet.begin())-&gt;Print(cout);</span>

  ivector B (theBox.LBox.Box);
  <span class="keywordtype">int</span> BoxDimensions = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(B) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(B) + 1;
                    <span class="comment">// midpoint of box</span>
  rvector c (mid (B));
                    <span class="comment">// Subboxes of Y</span>
  imatrix U (0, 1, 1, BoxDimensions);

  real IBisectedBoxIntegral =  
    Inf (theBox.BoxIntegral (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>));
  
  real SBisectedBoxIntegral = 
    Sup (theBox.BoxIntegral (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>));
  <span class="comment">// index of longest dimension of box</span>
  <span class="keywordtype">int</span> k = <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a> (B);
  real cc = (0)? c[k]: <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3" title="return the point at which to bisect a labeled box along dimension k">BisectPt</a>(theBox.LBox, k);
  <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox;
  LBox.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = theBox.LBox.L;
  U[0] = U[1] = B;
  SetSup (U[0][k], cc);
  SetInf (U[1][k], cc);
  <span class="comment">//  cout &lt;&lt; &quot;the 2 new boxes &quot; &lt;&lt; endl;</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; j++)
  {
    LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = U[j];
    <span class="comment">//cout &lt;&lt;&quot;getting rangeinfo for\n&quot; &lt;&lt; LBox.L &lt;&lt; &#39;\n&#39; &lt;&lt; LBox.Box; getchar();</span>
    theBox = <a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">getBoxREInfo</a> (LBox);
    <span class="comment">//  cout &lt;&lt; &quot;j: &quot; &lt;&lt; j &lt;&lt; endl; theBox.Print(cout);</span>
    <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.insert (theBox).second)
    {
      cout &lt;&lt; <span class="stringliteral">&quot;in Bisect. failed to insert theBox into RangeDomainSet &quot;</span> &lt;&lt;
        endl;
    }
    real newBoxL = Inf (theBox.BoxRE);
    <span class="comment">//cout &lt;&lt; &quot;newBoxL = &quot; &lt;&lt; newBoxL; getchar();</span>
    <span class="keywordflow">if</span> (newBoxL &gt; <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a>)
    {
      <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> = newBoxL;
    }               <span class="comment">// update Lmax</span>
    <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> += theBox.BoxIntegral (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
  }

  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () % 100000 == 0)
    cout &lt;&lt; <span class="stringliteral">&quot;# boxes: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321" title="Return the number of boxes in RangeDomainSet.">get_n_boxes</a> () &lt;&lt; <span class="stringliteral">&quot;  Acceptance Prob. &gt;= &quot;</span> &lt;&lt;
      <a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt;&lt; <span class="stringliteral">&quot;\r&quot;</span>;
  <span class="comment">// cout &lt;&lt; &quot;end of bisect\n&quot;; //getchar();</span>

  <span class="comment">// RangedLabBoxSet::const_iterator rdsit = RangeDomainSet.begin ();</span>
  <span class="comment">//  for( ; rdsit!= RangeDomainSet.end ();rdsit++){</span>
  <span class="comment">//      rdsit-&gt;Print(cout);</span>
  <span class="comment">//  }</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0de2c0d6196f77662bb11304e3bec13d"></a><!-- doxytag: member="MRSampler::FirstBox" ref="a0de2c0d6196f77662bb11304e3bec13d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">MRSampler::FirstBox</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00820">820</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00140">RangedLabBox::BoxIntegral()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00128">RangedLabBox::BoxRE</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00163">Domain</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00186">f_scale</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00781">getBoxREInfo()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Lmax</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00082">LabBox::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00153">RangedLabBox::Print()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00170">topologies</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>
<div class="fragment"><pre class="fragment">{ <span class="comment">// setup the initial box (whole domain)</span>
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> k = 0; k &lt; <a class="code" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">topologies</a>; k++)
  {
    cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, before getBoxREInfo. k: &quot;</span> &lt;&lt; k &lt;&lt; endl;
    theBox = <a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">getBoxREInfo</a> (<a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>[k]);
    theBox.<a class="code" href="classRangedLabBox.shtml#a9e8b6e359342c3273f655507a7b9c6b9" title="print the label, components of the box, range enclosure and integral.">Print</a>(cout);
    cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, after getBoxREInfo &quot;</span> &lt;&lt; endl;
    theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a93f97cf6932b8caf8911a0cf440807e6" title="Output formatted with brackets etc, suitable for human reading.">Print</a>(cout);
    <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.insert (theBox).second)
    {
      cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, failed to insert theBox. &quot;</span> &lt;&lt; endl;
    }
  }
  <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> = Inf (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
  <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
  cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, after updateUmax \n&quot;</span>;
  <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> = theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
  cout &lt;&lt; <span class="stringliteral">&quot;bottom of FirstBox. \n&quot;</span>;
  <span class="comment">// exit(1);</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a30f5c5489a08545226b462ace92dc321"></a><!-- doxytag: member="MRSampler::get_n_boxes" ref="a30f5c5489a08545226b462ace92dc321" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321">MRSampler::get_n_boxes</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the number of boxes in RangeDomainSet. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00202">202</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0302488b026965e8e6c401037a0c9240"></a><!-- doxytag: member="MRSampler::get_n_topologies" ref="a0302488b026965e8e6c401037a0c9240" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#a0302488b026965e8e6c401037a0c9240">MRSampler::get_n_topologies</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00127">127</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00165">DomainLabelSet</a>.</p>

<p>Referenced by <a class="el" href="CesaroBellNo_8cpp_source.shtml#l00063">main()</a>.</p>
<div class="fragment"><pre class="fragment">{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size()); }
</pre></div>
</div>
</div>
<a class="anchor" id="ab5bb18ce86dcf3e6835084e12ad3caff"></a><!-- doxytag: member="MRSampler::get_nonresidual_samples" ref="ab5bb18ce86dcf3e6835084e12ad3caff" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#ab5bb18ce86dcf3e6835084e12ad3caff">MRSampler::get_nonresidual_samples</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00129">129</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00173">nonresidual_samples</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a281cb5fb693559dcbd4f90e7d5f37d3e"></a><!-- doxytag: member="MRSampler::get_nsum" ref="a281cb5fb693559dcbd4f90e7d5f37d3e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#a281cb5fb693559dcbd4f90e7d5f37d3e">MRSampler::get_nsum</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00676">676</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00181">nsum</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a056b8e90fb8f72ff3923dca3257384"></a><!-- doxytag: member="MRSampler::get_unscaled_IU" ref="a8a056b8e90fb8f72ff3923dca3257384" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a8a056b8e90fb8f72ff3923dca3257384">MRSampler::get_unscaled_IU</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00113">113</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> _double (Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a85b66f54b156a0a742b48afcf2997379"></a><!-- doxytag: member="MRSampler::get_wmax" ref="a85b66f54b156a0a742b48afcf2997379" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a85b66f54b156a0a742b48afcf2997379">MRSampler::get_wmax</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00682">682</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wmax</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">wmax</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa2d8b962208940151e182e6b3ccb3874"></a><!-- doxytag: member="MRSampler::get_wmin" ref="aa2d8b962208940151e182e6b3ccb3874" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#aa2d8b962208940151e182e6b3ccb3874">MRSampler::get_wmin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00688">688</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wmin</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">wmin</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a37146ff923183a8563e57191d3e6bfa4"></a><!-- doxytag: member="MRSampler::get_wsum" ref="a37146ff923183a8563e57191d3e6bfa4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a37146ff923183a8563e57191d3e6bfa4">MRSampler::get_wsum</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00670">670</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wsum</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a727ae6c7bafcf46f34c320e902cf43fe"></a><!-- doxytag: member="MRSampler::getBoxREInfo" ref="a727ae6c7bafcf46f34c320e902cf43fe" args="(LabBox LBox)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classRangedLabBox.shtml">RangedLabBox</a> <a class="el" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">MRSampler::getBoxREInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classLabBox.shtml">LabBox</a>&#160;</td>
          <td class="paramname"><em>LBox</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00781">781</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00132">RangedLabBox::BoxPriorIntegral</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00128">RangedLabBox::BoxRE</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00130">RangedLabBox::BoxVol</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00263">Fobj::LabBoxPriorIntegral()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00251">Fobj::LabBoxVolume()</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>.</p>
<div class="fragment"><pre class="fragment">{ <span class="comment">// return the RangedLabBox with information about Labelled Box LBox</span>
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> result;
  ivector Box = LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;

  <span class="comment">//  cout &lt;&lt; &quot;in getBoxREInfo. before F(LBox) &quot; &lt;&lt; endl;</span>
  interval RangeEnclosure = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (LBox);
  <span class="comment">//  cout &lt;&lt; &quot;in getBoxREInfo. after F(LBox). RE: &quot; &lt;&lt; RangeEnclosure &lt;&lt; endl;</span>
  <span class="comment">//cout &lt;&lt; &quot;RangeEnclosure = &quot; &lt;&lt; RangeEnclosure &lt;&lt; &#39;\n&#39;; getchar();</span>

  <span class="comment">// this is the RE of the function supplied, could be either pi or log(pi)</span>
  result.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a> = RangeEnclosure;
  result.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a> = LBox;
  result.<a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03" title="Product of diams of intervals in labeled box, ie volume of labeled box.">BoxVol</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5" title="a defined pure virtual function for default Lebesgue measure (volume) of a labelled box...">LabBoxVolume</a>(LBox);
  result.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">LabBoxPriorIntegral</a>(LBox);

  <span class="keywordflow">return</span> result;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaf6497221623367c28cd9054eb52cbba"></a><!-- doxytag: member="MRSampler::getIL" ref="aaf6497221623367c28cd9054eb52cbba" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">MRSampler::getIL</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00646">646</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92b7d631e838539d7c9dcd047bd2936c"></a><!-- doxytag: member="MRSampler::getIU" ref="a92b7d631e838539d7c9dcd047bd2936c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">MRSampler::getIU</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00640">640</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6d1a6fd3218a62ac5e77abe2a00ac84a"></a><!-- doxytag: member="MRSampler::getIUminusL" ref="a6d1a6fd3218a62ac5e77abe2a00ac84a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a6d1a6fd3218a62ac5e77abe2a00ac84a">MRSampler::getIUminusL</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00652">652</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (diam (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a71c9e4432504b5dcb9591265c4cfba50"></a><!-- doxytag: member="MRSampler::getPAest" ref="a71c9e4432504b5dcb9591265c4cfba50" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">MRSampler::getPAest</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00664">664</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00181">nsum</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00180">wsum</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a> / _double (<a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="addd59ad1e400adae3c46b562c7ceb80d"></a><!-- doxytag: member="MRSampler::getPALB" ref="addd59ad1e400adae3c46b562c7ceb80d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d">MRSampler::getPALB</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return lower bound on the acceptance prob. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00164">164</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) / Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab663935171c58ac98f0eeee73c02cbc6"></a><!-- doxytag: member="MRSampler::getUmax" ref="ab663935171c58ac98f0eeee73c02cbc6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classMRSampler.shtml#ab663935171c58ac98f0eeee73c02cbc6">MRSampler::getUmax</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00658">658</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Umax</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4fc816422109d41053f1171346463b7d"></a><!-- doxytag: member="MRSampler::ImportanceSampleMany" ref="a4fc816422109d41053f1171346463b7d" args="(int NSamples, bool residual, bool pseudoRNG, ISSample &amp;theSample)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d">MRSampler::ImportanceSampleMany</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>NSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>pseudoRNG</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classISSample.shtml">ISSample</a> &amp;&#160;</td>
          <td class="paramname"><em>theSample</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Importance sampling with Pseudo/Quasi random numbers. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00423">423</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00165">DomainLabelSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00112">Fobj::DrawFromBoxPrior()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00147">DrawQZUnifBoxV()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00105">DrawUnifUnitBox()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00375">ISSample::EnvelopeIntegral</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00056">WLabPnt::fPnt</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00640">getIU()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00372">ISSample::LabelSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00178">LoBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00167">n_dim_max</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00173">nonresidual_samples</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00369">ISSample::Ntopologies</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00133">Fobj::PriorDensity()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00198">proposalpdf</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00055">WLabPnt::qPnt</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00194">qrgsl</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00378">ISSample::Samples</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00072">WEIGHTED_SQUEEZE</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00057">WLabPnt::Wt</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8hpp_source.shtml#l00097">ImportanceSampleManyPseudo()</a>, and <a class="el" href="CesaroBellNo_8cpp_source.shtml#l00063">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classWLabPnt.shtml" title="A weighted labeled point class for a labeled point-valued particle.">WLabPnt</a> Sample;
                    <span class="comment">// n_dimensions); </span>
  <span class="comment">// can we do this, and have dimensionality automatically increased </span>
  <span class="comment">// as necessary by assignment?</span>
  rvector proposed_point (1, 1);
  <span class="comment">//double v[n_dimensions];</span>
  cout &lt;&lt; <span class="stringliteral">&quot;n_dim_max: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a> &lt;&lt; endl;
                    <span class="comment">// n_dimensions[0]);</span>
  vector&lt;double&gt; v(<a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);
  cout &lt;&lt; <span class="stringliteral">&quot;after alloc v &quot;</span> &lt;&lt; endl;
  <span class="keywordtype">int</span> NBoxes = int (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());

  <span class="keywordflow">if</span> (residual)
  {
    <a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">SetupWalker</a> (NSamples);
  }                 <span class="comment">// will this work ok here?</span>
  <span class="keywordflow">else</span>
  {
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
    {
      <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo = 0;
    }
  }                 <span class="comment">//initialize</span>

                    <span class="comment">// N is number of residual samples</span>
  <span class="keywordtype">int</span> Nresidual = (NSamples - <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a>);
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Nresidual; i++)
  {                 <span class="comment">// randomly choose the boxes for the residual samples</span>
    <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>))].SamplesToDo++;
  }
  <span class="comment">// now the number of samples to be drawn from each box is set, </span>
  <span class="comment">// and stored in DomainParts[index].SamplesToDo</span>
  <span class="keywordtype">size_t</span> sample_num = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
  {
    <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo &gt; 0)
    {               <span class="comment">//until all samples from Box i are exhausted</span>
                    <span class="comment">//decrement the sample that&#39;s about to be taken care of</span>
      <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo--;
      sample_num++; <span class="comment">//increment sample_num</span>
      <span class="keywordflow">if</span>(1)
      {
        <span class="keywordflow">if</span> (pseudoRNG)
        {
          proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
        }
        <span class="keywordflow">else</span>
        {           <span class="comment">// quasi RNG</span>
                    <span class="comment">// the quasi-random state is v at current sweep</span>
          gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
          <span class="comment">// Note: QR vector v may have more dimensions than box; </span>
          <span class="comment">// in this case don&#39;t use the extra elements.</span>
          proposed_point = <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a> ((&amp;v[0]), <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
        }
      }
      <span class="keywordflow">else</span>          <span class="comment">//</span>
      {
        <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i];
        <span class="comment">//  rvector proposed_point;</span>
        <span class="keywordflow">if</span> (pseudoRNG)
        {
          proposed_point = 
            <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a>(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>)));
          <span class="comment">//  proposed_point = DrawUnifBox (rgsl, DomainParts[i].Box);</span>
        }
        <span class="keywordflow">else</span>
        {           <span class="comment">// quasi RNG</span>
                    <span class="comment">// the quasi-random state is v at current sweep</span>
          gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
          <span class="comment">// Note: QR vector v may have more dimensions than box; </span>
          <span class="comment">// in this case don&#39;t use the extra elements.</span>
          <span class="comment">// get a rvector from a double* ???</span>
          <span class="keywordtype">int</span> ndim = VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
          rvector rand_vector(1, ndim);
          <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ii=1; ii&lt;=ndim; ii++){ rand_vector[ii] = v[ii-1]; }

          proposed_point = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, rand_vector);
          <span class="comment">// proposed_point = DrawQZUnifBoxV ((&amp;v[0]), DomainParts[i].Box);</span>
        }
      }
      Sample.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
      Sample.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].L;
      <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
      {
        cerr &lt;&lt;
          <span class="stringliteral">&quot;UsingLogDensity=true is not defined for MRSampler::ImpPDSampleOnce()&quot;</span>
          &lt;&lt; endl;
        exit(1);
      }
      <span class="keywordflow">else</span>
      {
        Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (Sample));
        <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
        {
          Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> -= _double (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[i]);
        }           <span class="comment">// FIXME scaling??</span>
                    <span class="comment">//proposalpdf has been MODIFIED after pdfstruct was made</span>
        Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[i] * <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b" title="prior density of a labeled real point">PriorDensity</a>(Sample));
        Sample.<a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a> = Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> / Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a>;
      }
      theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.push_back (Sample);
    }               <span class="comment">//end while(DomainParts[i].SamplesToDo &gt; 0)</span>
  }                 <span class="comment">// end i-loop</span>
  <span class="comment">//  Offset = (WEIGHTED_SQUEEZE)? _double(Inf(Integral)): 0.0;</span>
  assert (sample_num == theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size ());
  theSample.<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size ();
  theSample.<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>;
  theSample.<a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd" title="The integral of the envelope function.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
}                   <span class="comment">// end ImportanceSampleMany</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a73999a2d6df8b33ddd459b6bcf9696f9"></a><!-- doxytag: member="MRSampler::ImportanceSampleManyPseudo" ref="a73999a2d6df8b33ddd459b6bcf9696f9" args="(int NSamples, bool residual, ISSample &amp;theSample)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a73999a2d6df8b33ddd459b6bcf9696f9">MRSampler::ImportanceSampleManyPseudo</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>NSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classISSample.shtml">ISSample</a> &amp;&#160;</td>
          <td class="paramname"><em>theSample</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Importance sampling with Pseudo random numbers. </p>

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00097">97</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <a class="code" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d" title="Importance sampling with Pseudo/Quasi random numbers.">ImportanceSampleMany</a> (NSamples, residual, <span class="keyword">true</span>, theSample);
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a1e1e42a57421caa0b13b194372d0b067"></a><!-- doxytag: member="MRSampler::ImportanceSampleManyQuasi" ref="a1e1e42a57421caa0b13b194372d0b067" args="(int NSamples, bool residual, ISSample &amp;theSample)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a1e1e42a57421caa0b13b194372d0b067">MRSampler::ImportanceSampleManyQuasi</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>NSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>residual</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classISSample.shtml">ISSample</a> &amp;&#160;</td>
          <td class="paramname"><em>theSample</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Importance sampling with Quasi random numbers -- [Ignore: experimental]. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00537">537</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00163">Domain</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="toolz_8cpp_source.shtml#l00147">DrawQZUnifBoxV()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00375">ISSample::EnvelopeIntegral</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00056">WLabPnt::fPnt</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00640">getIU()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00178">LoBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00167">n_dim_max</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00173">nonresidual_samples</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00369">ISSample::Ntopologies</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00133">Fobj::PriorDensity()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00198">proposalpdf</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00055">WLabPnt::qPnt</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00194">qrgsl</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00378">ISSample::Samples</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00072">WEIGHTED_SQUEEZE</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00057">WLabPnt::Wt</a>.</p>

<p>Referenced by <a class="el" href="CesaroBellNo_8cpp_source.shtml#l00063">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classWLabPnt.shtml" title="A weighted labeled point class for a labeled point-valued particle.">WLabPnt</a> Sample;
  rvector proposed_point (1, 1);
  <span class="comment">// the double vector to store the quasi-random state vector</span>
  vector&lt;double&gt; v(<a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);

  <span class="keywordtype">int</span> NBoxes = int (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());

  <span class="keywordflow">if</span> (residual)
  {
    <a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">SetupWalker</a> (NSamples);
  }                 <span class="comment">// will this work ok here?</span>
  <span class="keywordflow">else</span>
  {
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
    {
      <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo = 0;
    }               <span class="comment">//initialize</span>
  }

                    <span class="comment">// N is number of residual samples</span>
  <span class="keywordtype">int</span> Nresidual = (NSamples - <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a>);
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Nresidual; i++)
  {                 <span class="comment">// randomly choose the boxes for the residual samples</span>
    <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>))].SamplesToDo++;
  }
  <span class="comment">// now the number of samples to be drawn from each box is set, </span>
  <span class="comment">// and stored in DomainParts[index].SamplesToDo</span>
  <span class="keywordtype">size_t</span> sample_num = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
  {
    <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo &gt; 0)
    {               <span class="comment">//until all samples from Box i are exhausted</span>
                    <span class="comment">//decrement the sample that&#39;s about to be taken care of</span>
      <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo--;
      sample_num++; <span class="comment">//increment sample_num</span>
      <span class="keywordflow">if</span> (0)
      {
        proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
      }
      <span class="keywordflow">else</span>
      {
                    <span class="comment">// the quasi-random state is v at current sweep</span>
        gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
        proposed_point = <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a> ((&amp;v[0]), <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
      }

      Sample.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
      Sample.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].L;
      <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
      {
        cerr &lt;&lt;
          <span class="stringliteral">&quot;UsingLogDensity=true is not defined for MRSampler::ImpPDSampleOnce()&quot;</span>
          &lt;&lt; endl;
        exit (1);
      }
      <span class="keywordflow">else</span>
      {
        Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (Sample));
        <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
        {
          Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> -= _double (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[i]);
        }           <span class="comment">// FIXME scaling??</span>
                    <span class="comment">//proposalpdf has been MODIFIED after pdfstruct was made</span>
        Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[i] * <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b" title="prior density of a labeled real point">PriorDensity</a>(Sample));
        Sample.<a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a> = Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> / Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a>;
      }
      theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.push_back (Sample);
    }               <span class="comment">//end while(DomainParts[i].SamplesToDo &gt; 0)</span>
  }                 <span class="comment">// end i-loop</span>
  <span class="comment">//  Offset = (WEIGHTED_SQUEEZE)? _double(Inf(Integral)): 0.0;</span>
  <span class="comment">//  theSample.N = sample_num;</span>
  assert (sample_num == theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size ());
  theSample.<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.size ();
  theSample.<a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd" title="The integral of the envelope function.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="acea6f64c0aba88187122af49c5949ddc"></a><!-- doxytag: member="MRSampler::InitRNG" ref="acea6f64c0aba88187122af49c5949ddc" args="(unsigned seed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc">MRSampler::InitRNG</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>seed</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize pseudo and Quasi Random Number Generators in GSL. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00802">802</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00167">n_dim_max</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00192">own_rng</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00194">qrgsl</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>
<div class="fragment"><pre class="fragment">{                   
  <span class="keyword">const</span> gsl_rng_type *Tgsl;
  gsl_rng_env_setup ();
  Tgsl = gsl_rng_default;
  <a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a> = gsl_rng_alloc (Tgsl);
  gsl_rng_set (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, seed);
  <span class="comment">/* Note Regarding Quasi RNG: </span>
<span class="comment">    For now we will just use one quasi rng, with dimension equal to dmax, </span>
<span class="comment">    the max. dimension of all the labeled subdomains. Then when getting a </span>
<span class="comment">    point in a d dimension box (d&lt;dmax), just use the first d elements, </span>
<span class="comment">    ignoring the rest. Not really sure whether this is legit.</span>
<span class="comment">  */</span>
  <a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a> = gsl_qrng_alloc (gsl_qrng_sobol, <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);
  <a class="code" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a> = <span class="keyword">true</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7142c1478e259ec85354407fccfbfa78"></a><!-- doxytag: member="MRSampler::MRSoutput" ref="a7142c1478e259ec85354407fccfbfa78" args="(std::ostream &amp;os, const double eps=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; <a class="el" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78">MRSampler::MRSoutput</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>eps</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print the RangeDomainSet in tab-delimited numeric only format. </p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000004">Todo:</a></b></dt><dd>may want the output to be padded with TABS for easy dlmread in MATLAB for the trans-diminsional case: same for Output_Domain_Partition </dd></dl>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00235">235</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00077">Volume()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l01103">operator&lt;&lt;()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// do nothing if there is nothing in the set</span>
  <span class="keywordflow">if</span>(!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.empty())
  {
    
    RangedLabBoxSet::const_iterator it;
    
    it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin();
    
    <span class="keywordtype">double</span> vol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>((it-&gt;LBox).Box);
    
    <span class="keywordflow">while</span> (vol&gt;eps  &amp;&amp; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end())
    {               <span class="comment">// pull em out from top of pq</span>
      <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox = *it;
      ivector x = it-&gt;<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
      
      <span class="comment">// label</span>
      os &lt;&lt; (it-&gt;LBox.L);
      
      <span class="comment">// range enclosure</span>
      os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(it-&gt;BoxRE) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(it-&gt;BoxRE);
      
      <span class="comment">//then the box</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) ; i++)
      {
        os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(x[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(x[i]);
      }
      
      os&lt;&lt;endl;
      
      vol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>((it-&gt;LBox).Box);
      
      it++;
      
    }               <span class="comment">// end iteration through the set</span>
    
  }                 <span class="comment">// end if set not empty</span>
  
  <span class="keywordflow">return</span> os;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c1905d15eef55fd405cf6e03550f6c1"></a><!-- doxytag: member="MRSampler::Output_Domain_Partition" ref="a7c1905d15eef55fd405cf6e03550f6c1" args="(std::ostream &amp;out)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a7c1905d15eef55fd405cf6e03550f6c1">MRSampler::Output_Domain_Partition</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print labeled boxes in domain partition DomainParts [naive TAB-delimited numeric only format]. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00217">217</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (); ui++)
  {
    out &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].L;
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box); i++)
    {
      out &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box[i]) 
          &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box[i]);
    }
    out &lt;&lt; endl;
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92103320447370feb1f9452915534a91"></a><!-- doxytag: member="MRSampler::Print_Domain_Partition" ref="a92103320447370feb1f9452915534a91" args="(std::ostream &amp;out)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a92103320447370feb1f9452915534a91">MRSampler::Print_Domain_Partition</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print labeled boxes in domain partition DomainParts [C-XSC output format]. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00209">209</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (); ui++)
    out &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].L &lt;&lt; endl &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].Box &lt;&lt; endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a25d99bdee1a715fb2a8e2a8068b890db"></a><!-- doxytag: member="MRSampler::PrintBoxes" ref="a25d99bdee1a715fb2a8e2a8068b890db" args="(int Nprint)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a25d99bdee1a715fb2a8e2a8068b890db">MRSampler::PrintBoxes</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Nprint</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Print boxes with MATLAB.</p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000006">Todo:</a></b></dt><dd>Needs standardization of rendering format(s) for ease of making low-dimensional pictures -- MATLAB/POVRAY/MATPLOTLIB. </dd></dl>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00617">617</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//this is quick and dirty Matlab code generator for visualising range enclosure in 1D cases</span>
  Nprint = 0;       <span class="comment">//output through cout</span>
  <span class="keywordtype">int</span> NBoxesToPrint=1000;
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
  RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end () &amp;&amp; i &lt; NBoxesToPrint; it++, i++)
  {                 <span class="comment">// pull em out from top of pq</span>
    theBox = *it;
    ivector x = it-&gt;<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
    <span class="comment">//cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot;  Box: &quot; &lt;&lt; it-&gt;LBox.Box &lt;&lt; &quot; RE: :&quot; </span>
    <span class="comment">//     &lt;&lt; it-&gt;BoxRE &lt;&lt; &quot;  Vol: &quot; &lt;&lt; it-&gt;BoxVol;</span>
    <span class="comment">//cout &lt;&lt; &quot; IntDiam: &quot; &lt;&lt; it-&gt;BoxIntegral (UsingLogDensity) &lt;&lt; endl;</span>
    cout &lt;&lt; <span class="stringliteral">&quot;rectangle(&#39;Position&#39;,[&quot;</span>
      &lt;&lt; Inf(x[1]) &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Inf(it-&gt;BoxRE) &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Sup(x[1])-Inf(x[1]) 
      &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Sup(it-&gt;BoxRE)-Inf(it-&gt;BoxRE)
      &lt;&lt; <span class="stringliteral">&quot;], &#39;FaceColor&#39;,&#39;b&#39;)&quot;</span> &lt;&lt; endl;
  } cout &lt;&lt; endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a975802b28786372a0b1ee461184d3b23"></a><!-- doxytag: member="MRSampler::Refine" ref="a975802b28786372a0b1ee461184d3b23" args="(double Alb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23">MRSampler::Refine</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>Alb</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00171">171</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419" title="Adaptively partition domain by bisecting the most prioritised labeled box.">AdaptPartition</a> (Alb);
  <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae72be9880b00d25266c10d2f13365abf"></a><!-- doxytag: member="MRSampler::Refine" ref="ae72be9880b00d25266c10d2f13365abf" args="(int Nbisect)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23">MRSampler::Refine</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Nbisect</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Refine partition by doing Nbisect many bisections. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00191">191</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; Nbisect; j++)
  {
    <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
  }
  <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab6456ed49e2b5a903035ae7ef32cc5f2"></a><!-- doxytag: member="MRSampler::RefineUntil" ref="ab6456ed49e2b5a903035ae7ef32cc5f2" args="(unsigned int Desired_N_boxes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#ab6456ed49e2b5a903035ae7ef32cc5f2">MRSampler::RefineUntil</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Desired_N_boxes</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Refine partition by bisections until Desired_N_boxes many boxes is reached, then setup pdf. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00180">180</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () &lt; Desired_N_boxes)
  {
    <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
  }
  <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aac7c2e726a813ad155151c99cbdb7f12"></a><!-- doxytag: member="MRSampler::RejectionSampleMany" ref="aac7c2e726a813ad155151c99cbdb7f12" args="(int nRS, RSSample &amp;theSample)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12">MRSampler::RejectionSampleMany</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nRS</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classRSSample.shtml">RSSample</a> &amp;&#160;</td>
          <td class="paramname"><em>theSample</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Draw nRS many samples of labeled points via rejection sampling, if possible. </p>
<p>RejectionSampleMany stores the samples in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object theSample.</p>
<p>Draw nRS many rejection samples, if possible, and store in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object theSample </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00354">354</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00165">DomainLabelSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00112">Fobj::DrawFromBoxPrior()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00105">DrawUnifUnitBox()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00238">RSSample::EnvelopeIntegral</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00640">getIU()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00232">RSSample::LabelSet</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00178">LoBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00167">n_dim_max</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00235">RSSample::n_Dim_Max</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00226">RSSample::Nprop</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00229">RSSample::Ntopologies</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00069">RS_SQUEEZE</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00177">UBox</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="LevyTest_8cpp_source.shtml#l00044">main()</a>, and <a class="el" href="MooreImpSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">ProduceMRSamples()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> proposed_LPnt;
  <span class="keywordtype">int</span> total_tries = 0;
  <span class="keywordflow">for</span> (; theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size () &lt; unsigned(nRS);)
  {
    <span class="keywordtype">int</span> proposed_index = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(gsl_ran_discrete 
                                          (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>));
    <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index];
    rvector proposed_point = 
              <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a>(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>)));

    proposed_LPnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
    proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].L;

    real rand = gsl_rng_uniform (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
    real Fprop;
    <span class="keywordflow">if</span> (rand &gt; 1.0)
    {
      printf
        (<span class="stringliteral">&quot;#proposed_index, UBox[proposed_index], height: %i %g %g \n&quot;</span>,
        proposed_index, _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]), _double (rand));
      getchar ();
    }

    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
    {
      <span class="comment">// real rany = rand * UBox[proposed_index];</span>
      <span class="comment">// cout &lt;&lt; &quot;RSmany. rany: &quot; &lt;&lt; rany &lt;&lt; &quot;  Ubox: &quot; </span>
      <span class="comment">//      &lt;&lt; UBox[proposed_index] &lt;&lt; endl;</span>
      <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; 
           (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index] - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
        || <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (rand) &lt;= <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>(proposed_LPnt) - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index])
      {
        <span class="comment">//  proposed_LPnt.Print(cout);</span>
        theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back (proposed_LPnt);
      }
    }
    <span class="keywordflow">else</span>
    {
      real rany = rand * <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index];
                    <span class="comment">// less than lower bound, don&#39;t need to eval. function</span>
      <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; (rany &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index]))
        || (rany &lt;= (Fprop = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (proposed_LPnt))))
      {
        <span class="comment">// proposed_LPnt.Print(cout);</span>
        theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back (proposed_LPnt);
      }
    }
    <span class="comment">// } // loop over tries</span>
    <span class="comment">// if(tries == MAXNTRIES){ cout &lt;&lt; &quot;No RS accepted in &quot; </span>
    <span class="comment">//                    &lt;&lt; MAXNTRIES &lt;&lt; &quot; tries. Refine partition?&quot; &lt;&lt; endl; }</span>
    total_tries++;  <span class="comment">// += tries;</span>
    <span class="comment">// cout &lt;&lt; &quot;RS accepted, tries: &quot; &lt;&lt; theSample.Samples.size() </span>
    <span class="comment">//      &lt;&lt; &quot;  &quot; &lt;&lt; total_tries &lt;&lt; endl;</span>
  }                 <span class="comment">// loop over samples</span>
  theSample.<a class="code" href="classRSSample.shtml#ada252846a5f08bfad0ceb6debd2054b8" title="Number of draws from proposal distribution.">Nprop</a> = total_tries;
  theSample.<a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4" title="Number of labels or topologies.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size ();
  theSample.<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>;
  theSample.<a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894" title="The maximum dimension of the labeled boxes in LabDomainList.">n_Dim_Max</a> = <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>;
  theSample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
  <span class="comment">// cerr &lt;&lt; &quot;In MRSample.SampleOnce. After &quot; &lt;&lt; MAXNTRIES</span>
  <span class="comment">//      &lt;&lt; &quot; proposals, none accepted. Acceptance prob. very low. &quot; &lt;&lt; endl;</span>
  <span class="comment">//  return proposed_LPnt;</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ab6aa3b0bb466c67c69db97e2dad5f2"></a><!-- doxytag: member="MRSampler::RejectionSampleOnce" ref="a3ab6aa3b0bb466c67c69db97e2dad5f2" args="(int &amp;tries)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classLabPnt.shtml">LabPnt</a> <a class="el" href="classMRSampler.shtml#a3ab6aa3b0bb466c67c69db97e2dad5f2">MRSampler::RejectionSampleOnce</a> </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>tries</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return one sample of labeled point via rejection sampling, if possible. </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00279">279</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00112">Fobj::DrawFromBoxPrior()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00664">getPAest()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00178">LoBox</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00062">MAXNTRIES</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00037">LabPnt::Print()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00193">rgsl</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00069">RS_SQUEEZE</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00177">UBox</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>
<div class="fragment"><pre class="fragment">{

  <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> proposed_LPnt;
  <span class="keywordflow">for</span> (tries = 1; tries &lt;= <a class="code" href="MRSampler_8cpp.shtml#ad122025112f01afde28a624bd67fecd0">MAXNTRIES</a>; tries++)
  {                 <span class="comment">// try a bunch of times</span>
    <span class="keywordtype">int</span> proposed_index = 
                        <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>));
    <span class="comment">//  int ndim = VecLen(DomainParts[proposed_index].Box);</span>
    rvector proposed_point;
    <span class="keywordflow">if</span>(0)           <span class="comment">// old way in mrs-0.1; uniform prior -- left for recall!!!</span>
    {
      <span class="comment">//Different boxes can be different dimensionalities.</span>
      proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].Box);
    }
    <span class="keywordflow">else</span>
    {
      <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index];
      <span class="keywordtype">int</span> BoxDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) + 1;
      rvector rand_vector(1,BoxDim);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=BoxDim; k++)
      {
        rand_vector[k] = gsl_rng_uniform(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
      }

      proposed_point = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index], 
                                          rand_vector);
    }
    proposed_LPnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
    proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].L;
    proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac3062583331b0ca4591047cc79a0c3af" title="print Pnt of the labeled point LabPnt to an output file stream out">Print</a>(cout);

    real rand = gsl_rng_uniform (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
    real Fprop;
    <span class="keywordflow">if</span> (rand &gt; 1.0)
    {
      printf
        (<span class="stringliteral">&quot;#proposed_index, UBox[proposed_index], height: %i %g %g \n&quot;</span>,
        proposed_index, _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]), _double (rand));
      getchar ();
    }

    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
    {
      <span class="comment">// Ah but Ubox is now the log</span>
      <span class="comment">//   cout &lt;&lt; &quot;RSonce: rany: &quot; &lt;&lt; rany &lt;&lt; &quot;  Ubox: &quot; </span>
      <span class="comment">//        &lt;&lt; UBox[proposed_index] &lt;&lt;endl;</span>
      <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; 
           (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index] - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
        || (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>(proposed_LPnt) - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
      {
        <span class="keywordflow">return</span> proposed_LPnt;
      }
    }
    <span class="keywordflow">else</span>
    {
      real rany = rand * <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index];
                    <span class="comment">// &lt; lower bound, don&#39;t need to eval. function</span>
      <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; (rany &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index]))
        || (rany &lt;= (Fprop = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (proposed_LPnt))))
      {
        <span class="keywordflow">return</span> proposed_LPnt;
      }
    }
  }                 <span class="comment">// loop over tries</span>
  cerr &lt;&lt; <span class="stringliteral">&quot;In MRSample.SampleOnce. After &quot;</span> &lt;&lt; <a class="code" href="MRSampler_8cpp.shtml#ad122025112f01afde28a624bd67fecd0">MAXNTRIES</a>
    &lt;&lt; <span class="stringliteral">&quot; proposals, none accepted. Acceptance prob. very low. &quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;estimated acceptance prob: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">getPAest</a> () &lt;&lt; endl;
  getchar ();
  <span class="keywordflow">return</span> proposed_LPnt;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91a20bb1df74b36668d4ea206685246f"></a><!-- doxytag: member="MRSampler::SetupPDF" ref="a91a20bb1df74b36668d4ea206685246f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">MRSampler::SetupPDF</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00946">946</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00132">RangedLabBox::BoxPriorIntegral</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00128">RangedLabBox::BoxRE</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00130">RangedLabBox::BoxVol</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00186">f_scale</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00178">LoBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00198">proposalpdf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00196">proposalpmf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00177">UBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Umax</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00072">WEIGHTED_SQUEEZE</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00171">Refine()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00180">RefineUntil()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//cout &lt;&lt; &quot;inside SetupPDF \n&quot;;</span>
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NBoxes = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
  rvector VolBox(0, NBoxes-1);
  rvector PriorIntegralBox(0, NBoxes-1);
  Resize (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>, 0, NBoxes - 1);
  Resize (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>, 0, NBoxes - 1);

  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> != NULL)
    free (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
  <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));
  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a> != NULL)
    free (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>);
  <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));

  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
  <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = Sup (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ()-&gt;BoxRE);
  RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++, ui++)
  {                 <span class="comment">// pull em out from top of pq</span>
    theBox = *it;
    <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>.push_back (theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>);
    <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] = Sup (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
    <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui] = Inf (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
    VolBox[ui] = theBox.<a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03" title="Product of diams of intervals in labeled box, ie volume of labeled box.">BoxVol</a>;
    PriorIntegralBox[ui] = theBox.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] &gt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a>)
      <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui];
  }

                    <span class="comment">//getchar();</span>
  cout &lt;&lt; <span class="stringliteral">&quot;#Using log(pi)? &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a> &lt;&lt; endl;
  <span class="keywordtype">double</span> pTotal = 0.0;

                    <span class="comment">// reset proposalpmf</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
  {
    real BoxI = (0)? VolBox[ui]: PriorIntegralBox[ui];
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
    {
      <span class="comment">//  UBox[ui] = exp (UBox[ui] - f_scale); </span>
      <span class="comment">// leave Ubox as just Sup RE of logdensity</span>
      <span class="comment">//  LoBox[ui] = exp (LoBox[ui] - f_scale);</span>
      <span class="comment">// could we use BoxIntegral here?</span>
      <span class="keywordflow">if</span>(<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
      {
        <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double((<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>) - 
                                   <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>)) * BoxI);
      }
      <span class="keywordflow">else</span>
      {
        <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>) * BoxI);
      }
    }
    <span class="keywordflow">else</span>
    {
                    <span class="comment">//</span>
      <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
      {
        <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double ((<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui]) * BoxI);
      }
      <span class="keywordflow">else</span>
      {
        <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] * BoxI);
      }
    }

                    <span class="comment">//initialize</span>
    <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].SamplesToDo = 0;
  }
  <span class="comment">//make pmf a probability mass function -- normalize</span>
  pTotal =
    std::accumulate (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> + NBoxes, 0.0,
    <a class="code" href="structkahan__sum.shtml" title="Stable Summation Routine of Kahan&#39;s.">kahan_sum &lt; double &gt;</a>());

  <span class="comment">//   UBIntegral = pTotal;</span>
  std::transform (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> + NBoxes, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>,
    bind2nd (divides &lt; double &gt;(), pTotal));

  <span class="comment">//Now we will use proposalpdf to keep track of </span>
  <span class="comment">// the DENSITY (normalized simple fnctn) of a proposed point</span>
  <span class="keywordtype">int</span> count0probBoxes16 = 0, count0probBoxes10 = 0, count0probBoxes6 =
    0, count0probBoxes3 = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
  {
    <span class="keywordflow">if</span>(0)
    {
                    <span class="comment">// (BoxI); // ????</span>
      <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[ui] = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] / _double (VolBox[ui]);
    }
    <span class="keywordflow">else</span>
    {
      <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[ui] = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] / _double (PriorIntegralBox[ui]);
    }
    <span class="comment">// do we need proposalpdf??? </span>
    <span class="comment">// it will not be const over box, if prior is not const.</span>
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &gt;= 1e-3)
      count0probBoxes3++;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &gt;= 1e-6)
      count0probBoxes6++;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &lt;= 1e-16)
      count0probBoxes16++;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &lt;= 1e-10)
      count0probBoxes10++;
  }
  <span class="comment">// sometimes 20% of the boxes have mass &lt;= 1e-16 !!!  this unnecessarily </span>
  <span class="comment">// enlarges our priority queue and the SetupWalker</span>
  <span class="comment">// need regular sub-paving to make this efficient </span>
  <span class="comment">// perhaps have &gt; 1 list of boxes</span>
  cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &lt;= 1e-16 &quot;</span> &lt;&lt;
    count0probBoxes16 &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &lt;= 1e-10 &quot;</span> &lt;&lt;
    count0probBoxes10 &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &gt;= 1e-6 &quot;</span> &lt;&lt;
    count0probBoxes6 &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &gt;= 1e-3 &quot;</span> &lt;&lt;
    count0probBoxes3 &lt;&lt; endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4898e0225312caca6bdc53d034b8cd2a"></a><!-- doxytag: member="MRSampler::SetupWalker" ref="a4898e0225312caca6bdc53d034b8cd2a" args="(unsigned int number_of_samples)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">MRSampler::SetupWalker</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>number_of_samples</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l01067">1067</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8hpp_source.shtml#l00176">DomainParts</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00195">gslpdfstruct</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00173">nonresidual_samples</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00196">proposalpmf</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00197">residual_proposalpmf</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>.</p>
<div class="fragment"><pre class="fragment">{                   <span class="comment">// Setup residual_proposalpmf</span>
  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NBoxes = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());

  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> != NULL)
                    <span class="comment">// start over again</span>
    free (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
  <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));

  <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> = 0;
  <span class="comment">// preprocess proposalpmf to get gslpdfstruct, used by gsl_ran_discrete</span>
  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> != NULL)
    gsl_ran_discrete_free (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>);
  <span class="keywordflow">if</span> (samples != 0)
  {                 <span class="comment">// modify pmf for residual sampling to minimizing variance</span>
    <span class="keywordtype">double</span> blowup, intpart;
    <span class="keywordtype">double</span> dsamples = double (samples);
    <span class="keywordtype">double</span> count_residuals = 0;
    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
    {
      blowup = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] * dsamples;
                    <span class="comment">// save the residue in the revided residual pmf</span>
      count_residuals += (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>[ui] = modf (blowup, &amp;intpart));
      <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> += (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].SamplesToDo =
        int (intpart));
    }
    std::transform (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>, <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> + NBoxes,
      <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>, bind2nd (divides &lt; double &gt;(),
      count_residuals));
  }
                    <span class="comment">// this is residual part now</span>
  <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> = gsl_ran_discrete_preproc ((<span class="keywordtype">size_t</span>) NBoxes, 
                                           <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a973099a9a64b6e447b196e8fecc121da"></a><!-- doxytag: member="MRSampler::updateIntegral" ref="a973099a9a64b6e447b196e8fecc121da" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da">MRSampler::updateIntegral</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>update Integral using present partition </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00695">695</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00140">RangedLabBox::BoxIntegral()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00186">f_scale</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00174">Integral</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
  interval localIntegral (0.0, 0.0);
  RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
  <span class="keywordflow">for</span> (; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++)
  {
    theBox = *it;
    <span class="comment">//    localIntegral += theBox.BoxIntegral (UsingLogDensity);</span>
    localIntegral += theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
  }
  cout &lt;&lt; <span class="stringliteral">&quot;in updateIntegral. IL, IU: &quot;</span> &lt;&lt; Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt;
    Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) &lt;&lt; endl;
  <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> = localIntegral;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7e98b9c2e972668a7df1b1b4853bef6e"></a><!-- doxytag: member="MRSampler::updateUmax" ref="a7e98b9c2e972668a7df1b1b4853bef6e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e">MRSampler::updateUmax</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Updating the upper and lower bounds for the global maximum of target F. </p>
<p>For each box, first get upper bound U = Sup(range enclosure), and then Umax is the max over boxes of this and already have found during bisection Lmax, i.e. max of over boxes of Inf(range enclosure) Lmax, Umax are rigorous lower and upper bounds for global maximum of f each time U is eval'd for a box and found to be &gt; current Umax, eval f at midpoint of box. Then max of these is fmid_max </p>

<p>Definition at line <a class="el" href="MRSampler_8cpp_source.shtml#l00713">713</a> of file <a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a>.</p>

<p>References <a class="el" href="MRSampler_8cpp_source.shtml#l00075">BIGNEGATIVE</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00128">RangedLabBox::BoxRE</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00161">F</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00186">f_scale</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00188">f_scaleDone</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">fMaxLB</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00126">RangedLabBox::LBox</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Lmax</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00066">LOGDIAMFMAX</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00200">RangeDomainSet</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00184">Umax</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00068">UmaxMAX</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00189">UseFScale</a>, and <a class="el" href="MRSampler_8hpp_source.shtml#l00190">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
  real fmid_max = <a class="code" href="MRSampler_8cpp.shtml#ae1758ec128ca919e83bfb56f65d5d9f5">BIGNEGATIVE</a>;
  real f_scale_local;
  <span class="keywordtype">bool</span> f_scaleDone_local = <span class="keyword">false</span>;

  RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
  <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;
  <span class="keywordflow">for</span> (; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++)
  {
    theBox = *it;
    real U = Sup (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
    <span class="keywordflow">if</span> (U &gt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> || first)
    {
      <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = U;
      cout &lt;&lt; <span class="stringliteral">&quot;Umax: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt;&lt; endl;
      <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> lab_midpnt;
      lab_midpnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = mid (theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
      lab_midpnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
      real fmid = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (lab_midpnt);
      <span class="keywordflow">if</span> (fmid &gt; fmid_max)
                    <span class="comment">// f eval&#39;d in middle of box with greatest U.</span>
        fmid_max = fmid;
      first = <span class="keyword">false</span>;
    }
  }
  <span class="comment">//   Umax rigorous upper bound on f</span>
                    <span class="comment">// fMaxLB is lower bound on maximum of f</span>
  <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a> = (<a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> &gt; fmid_max) ? <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> : fmid_max;

  <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
  {
    <span class="comment">// could use F - scale</span>

    f_scale_local = <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (<a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a>);
    cout &lt;&lt; <span class="stringliteral">&quot;UmaxMAX, Umax, f_scale_local: &quot;</span> &lt;&lt; <a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
         &lt;&lt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; f_scale_local &lt;&lt; endl;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> - <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a> &lt; <a class="code" href="MRSampler_8cpp.shtml#a3d8d8a3b843d32eb688d5b3bf6fa4b8f">LOGDIAMFMAX</a>)
    {
      f_scaleDone_local = <span class="keyword">true</span>;
    }
  }
  <span class="keywordflow">else</span>
  {
    <span class="comment">// could use F/f_scale</span>
    f_scale_local = <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> / <a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a>;
    <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt; <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="MRSampler_8cpp.shtml#a3d8d8a3b843d32eb688d5b3bf6fa4b8f">LOGDIAMFMAX</a>) * <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a>)
    {
      f_scaleDone_local = <span class="keyword">true</span>;
    }
  }

  <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a> = (<a class="code" href="classMRSampler.shtml#a64134c93ecebc9f1a53b32c07bc18858">UseFScale</a>)? f_scale_local: (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)? 0: 1.0;
  cout &lt;&lt; <span class="stringliteral">&quot;f_scale: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a> &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; f_scale_local &lt;&lt; endl;
  <a class="code" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a> = f_scaleDone_local;
  cout &lt;&lt; <span class="stringliteral">&quot;bottom of updateUmax \n&quot;</span>;
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ab3c9a0e232b8145574c28989b9d25791"></a><!-- doxytag: member="MRSampler::Domain" ref="ab3c9a0e232b8145574c28989b9d25791" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt; <a class="el" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">MRSampler::Domain</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00163">163</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="a8497e118c2d180ff59884897ff97ff4d"></a><!-- doxytag: member="MRSampler::DomainLabelSet" ref="a8497e118c2d180ff59884897ff97ff4d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;int&gt; <a class="el" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d">MRSampler::DomainLabelSet</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The set of unique integer labels in LabDomainList. </p>

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00165">165</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8hpp_source.shtml#l00127">get_n_topologies()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>.</p>

</div>
</div>
<a class="anchor" id="aea43aaf9d80cae23dc971ab12d706ef8"></a><!-- doxytag: member="MRSampler::DomainParts" ref="aea43aaf9d80cae23dc971ab12d706ef8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt; <a class="el" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">MRSampler::DomainParts</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00176">176</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00217">Output_Domain_Partition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00209">Print_Domain_Partition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>.</p>

</div>
</div>
<a class="anchor" id="ab836cfbff1570a96b8af9c384226edfc"></a><!-- doxytag: member="MRSampler::F" ref="ab836cfbff1570a96b8af9c384226edfc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classFobj.shtml">Fobj</a>&amp; <a class="el" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">MRSampler::F</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00161">161</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00781">getBoxREInfo()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="a9c85b485d8d4ed429e23af0e0427cbe8"></a><!-- doxytag: member="MRSampler::f_scale" ref="a9c85b485d8d4ed429e23af0e0427cbe8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">MRSampler::f_scale</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00186">186</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00695">updateIntegral()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="aa677251ac24e0083e75a9ba5f4aa02ca"></a><!-- doxytag: member="MRSampler::f_scaleDone" ref="aa677251ac24e0083e75a9ba5f4aa02ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">MRSampler::f_scaleDone</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00188">188</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="a5980112acaced10adc29397c200fa798"></a><!-- doxytag: member="MRSampler::fMaxLB" ref="a5980112acaced10adc29397c200fa798" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">MRSampler::fMaxLB</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00184">184</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="aeb2b7cd2e8b2459ed444a38b327897fd"></a><!-- doxytag: member="MRSampler::gslpdfstruct" ref="aeb2b7cd2e8b2459ed444a38b327897fd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gsl_ran_discrete_t* <a class="el" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">MRSampler::gslpdfstruct</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00195">195</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="ada8a56adf645018f986090ca485049f5"></a><!-- doxytag: member="MRSampler::Integral" ref="ada8a56adf645018f986090ca485049f5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval <a class="el" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">MRSampler::Integral</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00174">174</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00113">get_unscaled_IU()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00646">getIL()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00640">getIU()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00652">getIUminusL()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00164">getPALB()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00695">updateIntegral()</a>.</p>

</div>
</div>
<a class="anchor" id="a977efd8e3ab58d4e88bc647e68460071"></a><!-- doxytag: member="MRSampler::Lmax" ref="a977efd8e3ab58d4e88bc647e68460071" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">MRSampler::Lmax</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00184">184</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="a541ae11d9bfc46da67065796901740a4"></a><!-- doxytag: member="MRSampler::LoBox" ref="a541ae11d9bfc46da67065796901740a4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">rvector <a class="el" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">MRSampler::LoBox</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00178">178</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>.</p>

</div>
</div>
<a class="anchor" id="adf95f77ac86c63eef71474204ac28efc"></a><!-- doxytag: member="MRSampler::Max_n_boxes" ref="adf95f77ac86c63eef71474204ac28efc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classMRSampler.shtml#adf95f77ac86c63eef71474204ac28efc">MRSampler::Max_n_boxes</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00171">171</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>.</p>

</div>
</div>
<a class="anchor" id="afa30f614f3bf25d89990256e2e0c38bd"></a><!-- doxytag: member="MRSampler::n_dim_max" ref="afa30f614f3bf25d89990256e2e0c38bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">MRSampler::n_dim_max</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00167">167</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00802">InitRNG()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>.</p>

</div>
</div>
<a class="anchor" id="a31a44287b73bf986bbddcf67245d3c9c"></a><!-- doxytag: member="MRSampler::nonresidual_samples" ref="a31a44287b73bf986bbddcf67245d3c9c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">MRSampler::nonresidual_samples</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00173">173</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8hpp_source.shtml#l00129">get_nonresidual_samples()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>.</p>

</div>
</div>
<a class="anchor" id="ab82586caa232037dde75eba134f035ae"></a><!-- doxytag: member="MRSampler::nsum" ref="ab82586caa232037dde75eba134f035ae" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">MRSampler::nsum</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00181">181</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00676">get_nsum()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00664">getPAest()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="aa3abc2865eb1f5eed99f3b4017621d04"></a><!-- doxytag: member="MRSampler::own_rng" ref="aa3abc2865eb1f5eed99f3b4017621d04" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">MRSampler::own_rng</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00192">192</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00802">InitRNG()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="ad32ae929145a5d9a1b042aaf4bd34952"></a><!-- doxytag: member="MRSampler::proposalpdf" ref="ad32ae929145a5d9a1b042aaf4bd34952" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">MRSampler::proposalpdf</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00198">198</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="a0019552cda42dbc57e0bbf88b661fbce"></a><!-- doxytag: member="MRSampler::proposalpmf" ref="a0019552cda42dbc57e0bbf88b661fbce" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">MRSampler::proposalpmf</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00196">196</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="a3045790ee467171c7ed5b1a7520457f6"></a><!-- doxytag: member="MRSampler::qrgsl" ref="a3045790ee467171c7ed5b1a7520457f6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gsl_qrng* <a class="el" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">MRSampler::qrgsl</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00194">194</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00802">InitRNG()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="aec967af4872910cd04b49227d843ec66"></a><!-- doxytag: member="MRSampler::RangeDomainSet" ref="aec967af4872910cd04b49227d843ec66" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="SmallClasses_8hpp.shtml#a620bc30fe4c7a65c0a4cdbaf724bd9e9">RangedLabBoxSet</a> <a class="el" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">MRSampler::RangeDomainSet</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00200">200</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00916">AdaptPartition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00202">get_n_boxes()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00235">MRSoutput()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00217">Output_Domain_Partition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00209">Print_Domain_Partition()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00617">PrintBoxes()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00180">RefineUntil()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00695">updateIntegral()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="adf347c7e241dda4ccd20e8d661da5e72"></a><!-- doxytag: member="MRSampler::residual_proposalpmf" ref="adf347c7e241dda4ccd20e8d661da5e72" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">MRSampler::residual_proposalpmf</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00197">197</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l01067">SetupWalker()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="a83ea740a453f9274eb77909ba0573a97"></a><!-- doxytag: member="MRSampler::rgsl" ref="a83ea740a453f9274eb77909ba0573a97" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">gsl_rng* <a class="el" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">MRSampler::rgsl</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00193">193</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00802">InitRNG()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00148">~MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="aa245fc901ea417e5b19f3e26c63cebad"></a><!-- doxytag: member="MRSampler::topologies" ref="aa245fc901ea417e5b19f3e26c63cebad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">MRSampler::topologies</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00170">170</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="ae15d963eb51af7923bdb0dc4a1784208"></a><!-- doxytag: member="MRSampler::UBox" ref="ae15d963eb51af7923bdb0dc4a1784208" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">rvector <a class="el" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">MRSampler::UBox</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00177">177</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>.</p>

</div>
</div>
<a class="anchor" id="ac22f171e36cc11caa473d8232e9c0786"></a><!-- doxytag: member="MRSampler::Umax" ref="ac22f171e36cc11caa473d8232e9c0786" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">MRSampler::Umax</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00184">184</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00658">getUmax()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="a64134c93ecebc9f1a53b32c07bc18858"></a><!-- doxytag: member="MRSampler::UseFScale" ref="a64134c93ecebc9f1a53b32c07bc18858" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMRSampler.shtml#a64134c93ecebc9f1a53b32c07bc18858">MRSampler::UseFScale</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00189">189</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="a5f1bfb7fca5ef5a992a9bc812b19bddd"></a><!-- doxytag: member="MRSampler::UsingLogDensity" ref="a5f1bfb7fca5ef5a992a9bc812b19bddd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">MRSampler::UsingLogDensity</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00190">190</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">Bisect()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00820">FirstBox()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">ImportanceSampleManyQuasi()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">RejectionSampleOnce()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">SetupPDF()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00695">updateIntegral()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">updateUmax()</a>.</p>

</div>
</div>
<a class="anchor" id="af151b4e7e703ba21c87ae895c6b904f4"></a><!-- doxytag: member="MRSampler::wmax" ref="af151b4e7e703ba21c87ae895c6b904f4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">MRSampler::wmax</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00180">180</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00682">get_wmax()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="ad222a996bc96c32c89586628583be8bb"></a><!-- doxytag: member="MRSampler::wmin" ref="ad222a996bc96c32c89586628583be8bb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">MRSampler::wmin</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00180">180</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00688">get_wmin()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<a class="anchor" id="aa569a3c7e50e947daddfe9766e6aa206"></a><!-- doxytag: member="MRSampler::wsum" ref="aa569a3c7e50e947daddfe9766e6aa206" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">MRSampler::wsum</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MRSampler_8hpp_source.shtml#l00180">180</a> of file <a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00670">get_wsum()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00664">getPAest()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a></li>
<li><a class="el" href="MRSampler_8cpp_source.shtml">MRSampler.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classMRSampler.shtml">MRSampler</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:26 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
