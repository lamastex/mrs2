<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: rangecollection.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rangecollection_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">rangecollection.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="rangecollection_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file</span>
<a name="l00023"></a>00023 <span class="comment">\brief RangeCollection definitions.</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef __RANGECOLLECTION_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define __RANGECOLLECTION_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// put it all in the header for the moment and sort out the template issues later</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="rangecollectionexception_8hpp.shtml" title="RangeCollection exception declarations.">rangecollectionexception.hpp</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="cxsc_8hpp.shtml">cxsc.hpp</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// to use std input/output</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">// to use exceptions</span>
<a name="l00039"></a>00039 <span class="comment">//#include &lt;exception&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">//to use accumulate</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;numeric&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">//using namespace std;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">class </span><a class="code" href="classVec.shtml">Vec</a>;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">namespace </span>subpavings {
<a name="l00056"></a>00056 
<a name="l00057"></a>00057     <span class="comment">// templatised hull operator function, for most types</span>
<a name="l00058"></a>00058     <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00059"></a><a class="code" href="namespacesubpavings.shtml#a3aaa0e2846fcc501bf57373ab4fcfcb3">00059</a>     T <a class="code" href="namespacesubpavings.shtml#a3aaa0e2846fcc501bf57373ab4fcfcb3">hullOperator</a>(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> T&amp; y)
<a name="l00060"></a>00060     {
<a name="l00061"></a>00061         <span class="keywordflow">return</span> x &gt; y ? x : y;
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">// specialisation for intervals</span>
<a name="l00065"></a>00065     <span class="keyword">template</span>&lt;&gt;
<a name="l00066"></a>00066     cxsc::interval hullOperator&lt;cxsc::interval&gt;(<span class="keyword">const</span> cxsc::interval&amp; x, <span class="keyword">const</span> cxsc::interval&amp; y);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="comment">// specialisation for interval vectors</span>
<a name="l00069"></a>00069     <span class="keyword">template</span>&lt;&gt;
<a name="l00070"></a>00070     cxsc::ivector hullOperator&lt;cxsc::ivector&gt;(<span class="keyword">const</span> cxsc::ivector&amp; x, <span class="keyword">const</span> cxsc::ivector&amp; y);
<a name="l00071"></a>00071 
<a name="l00072"></a>00072     <span class="comment">// specialisation for vectors</span>
<a name="l00073"></a>00073     <span class="keyword">template</span>&lt;&gt;
<a name="l00074"></a>00074     <a class="code" href="classVec.shtml">Vec</a> <a class="code" href="namespacesubpavings.shtml#a0f22db67f4e7e059f3acff280a8441f8">hullOperator&lt;Vec&gt;</a>(<span class="keyword">const</span> <a class="code" href="classVec.shtml">Vec</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classVec.shtml">Vec</a>&amp; y);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">/*</span>
<a name="l00077"></a>00077 <span class="comment">    template&lt;typename T&gt;</span>
<a name="l00078"></a>00078 <span class="comment">    struct transformMult : public binary_function&lt;int, T, T &gt; {</span>
<a name="l00079"></a>00079 <span class="comment">      T operator() (const int a, const T b) const {return (a*b);}</span>
<a name="l00080"></a>00080 <span class="comment">    };</span>
<a name="l00081"></a>00081 <span class="comment">*/</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00096"></a>00096 <span class="comment">// implementation of RangeCollection using vector for container</span>
<a name="l00097"></a>00097 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00098"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml">00098</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass</a> {
<a name="l00099"></a>00099 
<a name="l00100"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad6b97397ee955fe4ed74e1d8dc0776a">00100</a>         <span class="keyword">typedef</span> std::vector&lt;T&gt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad6b97397ee955fe4ed74e1d8dc0776a">RangeCollectionType</a>;
<a name="l00101"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">00101</a>         <span class="keyword">typedef</span> <span class="keyword">typename</span> std::vector&lt;T&gt;::iterator <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a>;
<a name="l00102"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a636405dad973d70f8addd86d416418ca">00102</a>         <span class="keyword">typedef</span> <span class="keyword">typename</span> std::vector&lt;T&gt;::const_iterator <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a636405dad973d70f8addd86d416418ca">RangeCollectionConstItr</a>;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         <span class="keyword">private</span>:
<a name="l00105"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">00105</a>             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad6b97397ee955fe4ed74e1d8dc0776a">RangeCollectionType</a> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="keyword">public</span>:
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         <span class="comment">// no-argument constructor,</span>
<a name="l00110"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aef62d2aa5ff8ba9dec79cb9bb714fc68">00110</a>         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aef62d2aa5ff8ba9dec79cb9bb714fc68">RangeCollectionClass</a>() {}
<a name="l00111"></a>00111 
<a name="l00112"></a>00112         <span class="comment">// constructor with initial value</span>
<a name="l00113"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a994407fb9063dec6364b57697ee4ffbd">00113</a>         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aef62d2aa5ff8ba9dec79cb9bb714fc68">RangeCollectionClass</a>(<span class="keyword">const</span> T&amp; range)
<a name="l00114"></a>00114         {
<a name="l00115"></a>00115             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad3fca9cdacde8581cd6d1684357d1d1">pushBack</a>(range);
<a name="l00116"></a>00116         }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118         <span class="comment">// copy constructor</span>
<a name="l00119"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afd2ea195d16d474bf618c2fd478cdfc4">00119</a>         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aef62d2aa5ff8ba9dec79cb9bb714fc68">RangeCollectionClass</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; other)
<a name="l00120"></a>00120         : <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>(other.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>) {}
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="comment">// Copy assignment operator</span>
<a name="l00123"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aba4094c69cec254d23643c00051ce068">00123</a>         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aba4094c69cec254d23643c00051ce068">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; rhs)
<a name="l00124"></a>00124         {
<a name="l00125"></a>00125             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a> = rhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>;
<a name="l00126"></a>00126             <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129         <span class="comment">// get the size of the RangeCollection, ie number of elements</span>
<a name="l00130"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">00130</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">getSize</a>()<span class="keyword"> const</span>
<a name="l00131"></a>00131 <span class="keyword">        </span>{
<a name="l00132"></a>00132             <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size();
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         <span class="comment">// get whether container is empty</span>
<a name="l00136"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a777b04fa8e011fdbaabdd85ced542e83">00136</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a777b04fa8e011fdbaabdd85ced542e83">isEmpty</a>()<span class="keyword"> const</span>
<a name="l00137"></a>00137 <span class="keyword">        </span>{
<a name="l00138"></a>00138             <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.empty();
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         <span class="comment">// add to the back of the container</span>
<a name="l00142"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad3fca9cdacde8581cd6d1684357d1d1">00142</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad3fca9cdacde8581cd6d1684357d1d1">pushBack</a>(<span class="keyword">const</span> T&amp; toAdd)
<a name="l00143"></a>00143         {
<a name="l00144"></a>00144             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(toAdd);
<a name="l00145"></a>00145         }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <span class="comment">// reduce the rangeCollection to one value, the sum of the present values</span>
<a name="l00148"></a>00148         <span class="comment">// Fudge to find an initial value and use std::accumulation</span>
<a name="l00149"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ab0bda06429ce2355970cdfe02a1c1b36">00149</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ab0bda06429ce2355970cdfe02a1c1b36">addReduce</a>()
<a name="l00150"></a>00150         {
<a name="l00151"></a>00151             <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.empty()) {
<a name="l00152"></a>00152 
<a name="l00153"></a>00153                 <span class="comment">// use std::accumulate for this but from second value in collection on</span>
<a name="l00154"></a>00154                 <span class="comment">// so that we can use first value as intial one</span>
<a name="l00155"></a>00155                 <span class="comment">// avoids having to know the equivalent of &#39;0&#39; for T</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157                 T accumulation = *(<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin());
<a name="l00158"></a>00158 
<a name="l00159"></a>00159                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() &gt; 1) {
<a name="l00160"></a>00160                     accumulation = std::accumulate(++<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(),
<a name="l00161"></a>00161                                     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(), accumulation);
<a name="l00162"></a>00162                 }
<a name="l00163"></a>00163 
<a name="l00164"></a>00164                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear();
<a name="l00165"></a>00165                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(accumulation);
<a name="l00166"></a>00166             }
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         <span class="comment">// reduce the rangeCollection to one value</span>
<a name="l00170"></a>00170         <span class="comment">// as the product of the present values</span>
<a name="l00171"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#acc3641f81593a24b242bed4f223cbd85">00171</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#acc3641f81593a24b242bed4f223cbd85">productReduce</a>()
<a name="l00172"></a>00172         {
<a name="l00173"></a>00173             <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.empty()) {
<a name="l00174"></a>00174 
<a name="l00175"></a>00175                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> rit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin();
<a name="l00176"></a>00176                 T product = *(rit);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() &gt; 1) {
<a name="l00179"></a>00179                     rit++;
<a name="l00180"></a>00180                     <span class="keywordflow">for</span> (;
<a name="l00181"></a>00181                             rit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); rit++) {
<a name="l00182"></a>00182                         <span class="comment">// don&#39;t use *= in case type T does not support it</span>
<a name="l00183"></a>00183                         product = product * (*rit);
<a name="l00184"></a>00184                     }
<a name="l00185"></a>00185                }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear();
<a name="l00188"></a>00188                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(product);
<a name="l00189"></a>00189             }
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192         <span class="comment">// return absolute value of range collection</span>
<a name="l00193"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a98e31e9ed0220ed3358860b808258a55">00193</a>         T <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a98e31e9ed0220ed3358860b808258a55">absValue</a>()
<a name="l00194"></a>00194         {
<a name="l00195"></a>00195             T accumulation; <span class="comment">// default constructor</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197             <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.empty()) {
<a name="l00198"></a>00198 
<a name="l00199"></a>00199                 accumulation = abs(*(<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin()));
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00202"></a>00202                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() &gt; 1) {
<a name="l00203"></a>00203                     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> rit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin();
<a name="l00204"></a>00204 
<a name="l00205"></a>00205                     rit++;
<a name="l00206"></a>00206                     <span class="keywordflow">for</span> (;
<a name="l00207"></a>00207                             rit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); rit++) {
<a name="l00208"></a>00208                         <span class="comment">// don&#39;t use *= in case type T does not support it</span>
<a name="l00209"></a>00209                         accumulation = accumulation + abs(*rit);
<a name="l00210"></a>00210                     }
<a name="l00211"></a>00211                 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213             }
<a name="l00214"></a>00214             <span class="keywordflow">return</span> accumulation;
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         <span class="comment">// incorporate another rangeCollection into this rangeCollection</span>
<a name="l00218"></a>00218         <span class="comment">// by taking the pair-wise interval hull</span>
<a name="l00219"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ad34b794f99d2b254f1a7d8a1fa608bf8">00219</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ad34b794f99d2b254f1a7d8a1fa608bf8">hullCollection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; other)
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221 
<a name="l00222"></a>00222             <span class="keywordtype">size_t</span> i = 0;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224             <span class="keywordtype">size_t</span> n = other.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">getSize</a>();
<a name="l00225"></a>00225 
<a name="l00226"></a>00226             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a777b04fa8e011fdbaabdd85ced542e83">isEmpty</a>()) { <span class="comment">// nothing here already</span>
<a name="l00227"></a>00227                 <span class="comment">// copy the other&#39;s container for this</span>
<a name="l00228"></a>00228                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a> = other.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>;
<a name="l00229"></a>00229             }
<a name="l00230"></a>00230             <span class="keywordflow">else</span> { <span class="comment">// has something in</span>
<a name="l00231"></a>00231 
<a name="l00232"></a>00232                 <span class="comment">// we have to make sure the rangeCollection for this matches</span>
<a name="l00233"></a>00233                 <span class="comment">// that of the children</span>
<a name="l00234"></a>00234                 <span class="comment">// number of elements in this rangeCollection should = child</span>
<a name="l00235"></a>00235                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">getSize</a>() != n) {
<a name="l00236"></a>00236                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1RangeCollectionException.shtml">RangeCollectionException</a>(<span class="stringliteral">&quot;rangeCollections do not match&quot;</span>);
<a name="l00237"></a>00237                 }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239                 <span class="comment">// store current container temporarily</span>
<a name="l00240"></a>00240                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aad6b97397ee955fe4ed74e1d8dc0776a">RangeCollectionType</a> _temp = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>;
<a name="l00241"></a>00241 
<a name="l00242"></a>00242                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear();
<a name="l00243"></a>00243 
<a name="l00244"></a>00244                 <span class="comment">// put into this container the hull operator of</span>
<a name="l00245"></a>00245                 <span class="comment">// the pairs of values from the other&#39;s container and the this&#39;s container</span>
<a name="l00246"></a>00246                 <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00247"></a>00247                     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(
<a name="l00248"></a>00248                                 <a class="code" href="namespacesubpavings.shtml#a3aaa0e2846fcc501bf57373ab4fcfcb3">hullOperator</a>((other.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>)[i],
<a name="l00249"></a>00249                                 _temp[i]));
<a name="l00250"></a>00250                 }
<a name="l00251"></a>00251             }
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253 <span class="comment">/*</span>
<a name="l00254"></a>00254 <span class="comment">        // multiply each element in the collection by mult</span>
<a name="l00255"></a>00255 <span class="comment">        void intScalarMult(int mult)</span>
<a name="l00256"></a>00256 <span class="comment">        {</span>
<a name="l00257"></a>00257 <span class="comment">            transform (container.begin(), container.end(), container.begin(),</span>
<a name="l00258"></a>00258 <span class="comment">                        bind1st(transformMult&lt;T&gt;(),mult));</span>
<a name="l00259"></a>00259 <span class="comment">        }</span>
<a name="l00260"></a>00260 <span class="comment">*/</span>
<a name="l00261"></a>00261         <span class="comment">// multiply each element in the collection by mult when mult is of type T</span>
<a name="l00262"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#acf3cc8c38b9a009312dc4d6660705958">00262</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#acf3cc8c38b9a009312dc4d6660705958">scalarMult</a>(<span class="keyword">const</span> T&amp; mult)
<a name="l00263"></a>00263         {
<a name="l00264"></a>00264             <span class="comment">//transform (container.begin(), container.end(), container.begin(),</span>
<a name="l00265"></a>00265             <span class="comment">//            bind1st(transformMult&lt;T&gt;(),mult));</span>
<a name="l00266"></a>00266 
<a name="l00267"></a>00267             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> rit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin();
<a name="l00268"></a>00268             <span class="keywordflow">for</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> rit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin();
<a name="l00269"></a>00269                             rit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); rit++) {
<a name="l00270"></a>00270                         <span class="comment">// don&#39;t use *= in case type T does not support it</span>
<a name="l00271"></a>00271                         *rit = mult * (*rit);
<a name="l00272"></a>00272             }
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         <span class="comment">// replace contents of this&#39;s container with contents of lhs and rhs containers</span>
<a name="l00276"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ab2bb4230d2cdfffab259895a8bf0037d">00276</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ad34b794f99d2b254f1a7d8a1fa608bf8">hullCollection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; lhs,
<a name="l00277"></a>00277                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; rhs)
<a name="l00278"></a>00278         {
<a name="l00279"></a>00279             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a> = lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>;
<a name="l00280"></a>00280             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ad34b794f99d2b254f1a7d8a1fa608bf8">hullCollection</a>(rhs);
<a name="l00281"></a>00281         }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 
<a name="l00284"></a>00284         <span class="comment">// combines contents of two other collections into this one</span>
<a name="l00285"></a>00285         <span class="comment">// replaces contents of this</span>
<a name="l00286"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6bfb2802ef229b5671ce6e095fd5004e">00286</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6bfb2802ef229b5671ce6e095fd5004e">combineCollection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; lhs,
<a name="l00287"></a>00287                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; rhs)
<a name="l00288"></a>00288         {
<a name="l00289"></a>00289             <span class="comment">// now give this node a range collection which contains all the</span>
<a name="l00290"></a>00290             <span class="comment">// elements in both lhs and rhs range collections, going l-&gt;r</span>
<a name="l00291"></a>00291             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear(); <span class="comment">// make sure current range collection empty</span>
<a name="l00292"></a>00292             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.insert(<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(),
<a name="l00293"></a>00293                                             lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(),
<a name="l00294"></a>00294                                             lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end());
<a name="l00295"></a>00295             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.insert(<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(),
<a name="l00296"></a>00296                                             rhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(),
<a name="l00297"></a>00297                                             rhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end());
<a name="l00298"></a>00298         }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300         <span class="comment">// replaces contents of this with the difference of the given collections</span>
<a name="l00301"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a5a93572c908847119d9f562208088792">00301</a>         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a5a93572c908847119d9f562208088792">subtractCollection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; lhs,
<a name="l00302"></a>00302                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;T&gt;</a>&amp; rhs)
<a name="l00303"></a>00303         {
<a name="l00304"></a>00304             <span class="keywordtype">size_t</span> i = 0;
<a name="l00305"></a>00305             <span class="keywordtype">size_t</span> n = rhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">getSize</a>();
<a name="l00306"></a>00306             <span class="keywordtype">size_t</span> m = lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac7965fd94f11b817f6f533a5dab2a106">getSize</a>();
<a name="l00307"></a>00307             <span class="comment">// we have to make sure the rangeCollection for this matches</span>
<a name="l00308"></a>00308             <span class="comment">// that of the other</span>
<a name="l00309"></a>00309             <span class="comment">// number of elements in this rangeCollection should = child</span>
<a name="l00310"></a>00310             <span class="keywordflow">if</span> (m &lt; n) {
<a name="l00311"></a>00311                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1RangeCollectionException.shtml">RangeCollectionException</a>(<span class="stringliteral">&quot;rangeCollections do not match&quot;</span>);
<a name="l00312"></a>00312             }
<a name="l00313"></a>00313             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear();
<a name="l00314"></a>00314             <span class="comment">// put into this container the difference of</span>
<a name="l00315"></a>00315             <span class="comment">// the pairs of values from the two containers</span>
<a name="l00316"></a>00316             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00317"></a>00317                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(
<a name="l00318"></a>00318                             lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>[i] - rhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>[i]);
<a name="l00319"></a>00319             }
<a name="l00320"></a>00320             <span class="keywordflow">for</span> (i = n; i &lt; m; i++) {
<a name="l00321"></a>00321                 <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.push_back(lhs.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>[i]);
<a name="l00322"></a>00322             }
<a name="l00323"></a>00323         }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325         <span class="comment">// output contents</span>
<a name="l00326"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a853143f43198b6f2dbfffbe364e75d09">00326</a>         std::ostream&amp; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a853143f43198b6f2dbfffbe364e75d09">outputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00327"></a>00327 <span class="keyword">        </span>{
<a name="l00328"></a>00328             <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a636405dad973d70f8addd86d416418ca">RangeCollectionConstItr</a> cit;
<a name="l00329"></a>00329             <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00330"></a>00330                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*cit);
<a name="l00331"></a>00331             }
<a name="l00332"></a>00332         }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="comment">//gloria added the following functions because she doesn&#39;t know how to</span>
<a name="l00335"></a>00335     <span class="comment">//access the elements of the container from the outside. </span>
<a name="l00336"></a>00336     <span class="comment">//get the ranges in the range collection and output to a vector</span>
<a name="l00337"></a>00337     <span class="comment">//can only do this for rangeCollection.getSize() == 1</span>
<a name="l00338"></a>00338     <span class="comment">//the weight is volume times height of this</span>
<a name="l00339"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">00339</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(std::vector&lt;double&gt; &amp; WeightsVector, 
<a name="l00340"></a>00340                 std::vector&lt;interval&gt; &amp; WeightsInt, <span class="keywordtype">double</span> boxVol)
<a name="l00341"></a>00341     {
<a name="l00342"></a>00342       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00343"></a>00343       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00344"></a>00344         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00345"></a>00345             
<a name="l00346"></a>00346             interval vol = interval(boxVol);
<a name="l00347"></a>00347             interval height = interval(*cit);
<a name="l00348"></a>00348             <span class="comment">//std::cout &lt;&lt; vol &lt;&lt; &quot;\t&quot; &lt;&lt; height &lt;&lt; std::endl;</span>
<a name="l00349"></a>00349             
<a name="l00350"></a>00350             interval area = vol*height;
<a name="l00351"></a>00351             WeightsInt.push_back(area);
<a name="l00352"></a>00352             WeightsVector.push_back(_double(mid(area)));
<a name="l00353"></a>00353             <span class="comment">//i know this is horrible but i don&#39;t know how else to do this</span>
<a name="l00354"></a>00354             <span class="comment">//for now and i don&#39;t have time to improve this.. sorry..</span>
<a name="l00355"></a>00355             <span class="comment">//mainly i need a double for the gsl_ran_discrete_preproc</span>
<a name="l00356"></a>00356             <span class="comment">//which only takes in doubles, hence the cast.</span>
<a name="l00357"></a>00357         }
<a name="l00358"></a>00358       }
<a name="l00359"></a>00359       }
<a name="l00360"></a>00360     
<a name="l00361"></a>00361     <span class="comment">//gloria added the following functions because she doesn&#39;t know how to</span>
<a name="l00362"></a>00362     <span class="comment">//access the elements of the container from the outside. </span>
<a name="l00363"></a>00363     <span class="comment">//get the ranges in the range collection and output to a vector</span>
<a name="l00364"></a>00364     <span class="comment">//can only do this for rangeCollection.getSize() == 1</span>
<a name="l00365"></a>00365     <span class="comment">//get the height</span>
<a name="l00366"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">00366</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(std::vector&lt;real&gt; &amp; HeightsVector)
<a name="l00367"></a>00367     {
<a name="l00368"></a>00368       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00369"></a>00369       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00370"></a>00370         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00371"></a>00371             HeightsVector.push_back((*cit));
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373       }
<a name="l00374"></a>00374       }
<a name="l00375"></a>00375     
<a name="l00376"></a>00376     <span class="comment">//gloria added the following function because she doesn&#39;t know how to</span>
<a name="l00377"></a>00377     <span class="comment">//access the elements of the container from the outside. </span>
<a name="l00378"></a>00378     <span class="comment">//get the ranges in the range collection and output to a vector</span>
<a name="l00379"></a>00379     <span class="comment">//can only do this for rangeCollection.getSize() == 1</span>
<a name="l00380"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aa2490dc5f0d3e9651753ad6aea148c1b">00380</a>     real <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#aa2490dc5f0d3e9651753ad6aea148c1b">getNodeIAE</a>(<span class="keywordtype">double</span> boxVol)
<a name="l00381"></a>00381     {
<a name="l00382"></a>00382       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00383"></a>00383       real IAE;
<a name="l00384"></a>00384       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00385"></a>00385         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00386"></a>00386             real diff = (*cit);
<a name="l00387"></a>00387             <span class="keywordflow">if</span> (diff &lt; 0) { diff = diff * (-1.0); } <span class="comment">//to make it positive</span>
<a name="l00388"></a>00388             IAE = (boxVol*diff);
<a name="l00389"></a>00389             <span class="comment">//std::cout &lt;&lt; diff &lt;&lt; &quot;\t&quot; &lt;&lt; boxVol &lt;&lt; std::endl;</span>
<a name="l00390"></a>00390         }
<a name="l00391"></a>00391       }
<a name="l00392"></a>00392       <span class="keywordflow">return</span> IAE;
<a name="l00393"></a>00393       }
<a name="l00394"></a>00394       
<a name="l00395"></a>00395       <span class="comment">//get the ranges in the range collection and output to a vector</span>
<a name="l00396"></a>00396     <span class="comment">//can only do this for rangeCollection.getSize() == 1</span>
<a name="l00397"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a638fb0cb53c34ae359743cd22d6da8ee">00397</a>     real <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a638fb0cb53c34ae359743cd22d6da8ee">getNodeIAERegHist</a>(<span class="keywordtype">double</span> boxVol, <span class="keywordtype">double</span> height)
<a name="l00398"></a>00398     {
<a name="l00399"></a>00399       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00400"></a>00400       real IAE;
<a name="l00401"></a>00401       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00402"></a>00402         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00403"></a>00403             real diff = (*cit) - height;
<a name="l00404"></a>00404             <span class="keywordflow">if</span> (diff &lt; 0) { diff = diff * (-1.0); } <span class="comment">//to make it positive</span>
<a name="l00405"></a>00405             IAE = (boxVol*diff);
<a name="l00406"></a>00406         }
<a name="l00407"></a>00407       }
<a name="l00408"></a>00408       <span class="keywordflow">return</span> IAE;
<a name="l00409"></a>00409       }
<a name="l00410"></a>00410       
<a name="l00411"></a>00411       <span class="comment">//get the area of this node</span>
<a name="l00412"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a364b0e829d6f1dea3b2cb9085036dd2c">00412</a>       real <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a364b0e829d6f1dea3b2cb9085036dd2c">getNodeArea</a>(<span class="keywordtype">double</span> boxVol)
<a name="l00413"></a>00413       {
<a name="l00414"></a>00414       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00415"></a>00415       real area = 0.0;
<a name="l00416"></a>00416       <span class="comment">//std::cout &lt;&lt; &quot;get node area: &quot; &lt;&lt; std::endl;</span>
<a name="l00417"></a>00417       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00418"></a>00418         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00419"></a>00419             <span class="comment">//std::cout &lt;&lt; (*cit) &lt;&lt; &quot;\t&quot; &lt;&lt; boxVol &lt;&lt; std::endl;</span>
<a name="l00420"></a>00420             area = (*cit)*boxVol;
<a name="l00421"></a>00421         }
<a name="l00422"></a>00422       }
<a name="l00423"></a>00423       <span class="keywordflow">return</span> area;
<a name="l00424"></a>00424     }
<a name="l00425"></a>00425       
<a name="l00426"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">00426</a>     real <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(<span class="keywordtype">double</span> totalArea)
<a name="l00427"></a>00427     {
<a name="l00428"></a>00428       <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#afc18b2f0242b0fc4314bbf8af2cc7034">RangeCollectionItr</a> cit;
<a name="l00429"></a>00429       real newHeight;
<a name="l00430"></a>00430       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.size() == 1) {
<a name="l00431"></a>00431         <span class="keywordflow">for</span> (cit = <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.begin(); cit &lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.end(); cit++) {
<a name="l00432"></a>00432             newHeight = (*cit)/totalArea;
<a name="l00433"></a>00433         }
<a name="l00434"></a>00434       }
<a name="l00435"></a>00435       <span class="keywordflow">return</span> newHeight;
<a name="l00436"></a>00436     } <span class="comment">// end of normNodeHeight</span>
<a name="l00437"></a>00437         
<a name="l00438"></a>00438 
<a name="l00439"></a>00439   <span class="comment">//gat41</span>
<a name="l00440"></a>00440   <span class="comment">//clear the current container</span>
<a name="l00441"></a><a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac728d483dcb418354e6286c8b6db08e1">00441</a>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#ac728d483dcb418354e6286c8b6db08e1">clearAll</a>()
<a name="l00442"></a>00442    {
<a name="l00443"></a>00443     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.empty()) {
<a name="l00444"></a>00444        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a91c127974a65a450569f9c33bbc2fcf6">container</a>.clear();
<a name="l00445"></a>00445     }
<a name="l00446"></a>00446    }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 
<a name="l00450"></a>00450   }; <span class="comment">// end class RangeCollectionClass</span>
<a name="l00451"></a>00451 } <span class="comment">// end namespace subpavings</span>
<a name="l00452"></a>00452 
<a name="l00453"></a>00453 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rangecollection_8hpp.shtml">rangecollection.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
