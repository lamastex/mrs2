<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1MappedSPnode.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::MappedSPnode&lt; T &gt; Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a30fc46b2dd6b0ca4ad703f323a050c7b">_addNonMinimalUnion</a>(const MappedSPnode&lt; T &gt; &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a5fc2d7092ac40f04bd0f83f4ee110fdc">_addRanges</a>(const MappedSPnode&lt; T &gt; *const other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a29dac80a6e0ecce51b22816ef78a298d">_divideNonMinimalUnion</a>(const MappedSPnode&lt; T &gt; &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a7fb50e0bf02d5d5d5a3753a1ff381ae7">_divRanges</a>(const MappedSPnode&lt; T &gt; *const other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a9f6b48701e09b97fbd169db927df0758">_multiplyNonMinimalUnion</a>(const MappedSPnode&lt; T &gt; &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#aa9df7035975f4d82aa605e6ac2a1ffe3">_multRanges</a>(const MappedSPnode&lt; T &gt; *const other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17">_reshapeToUnion</a>(const SPnode *const other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce">_reshapeTreesToUnion</a>(MappedSPnode&lt; T &gt; *const rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a4ef713013762306de2040ac389ec140a">_scalarAdd</a>(const T &amp;add)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a21cbfaf0019ceb215b9c12df05d394f3">_scalarDiv</a>(const T &amp;div)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#ab716b6d35a31dcba9de12114b3139dc2">_scalarMult</a>(const T &amp;mult)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a91ab734b6f270c26557964473f4977b4">_scalarSubtract</a>(const T &amp;sub)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">_slice</a>(const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a9880ddfe3c75fe8e7594ee6222040d79">_subtractNonMinimalUnion</a>(const MappedSPnode&lt; T &gt; &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a78e906fbd5153a29f4de538ccbdc1383">_subtractRanges</a>(const MappedSPnode&lt; T &gt; *const other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3">accept</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe">acceptSPCheckVisitor</a>(const SPCheckVisitor &amp;visitor) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a829001293a30ff276a50cf518893ad7f">acceptSPExpandVisitor</a>(const SPExpandVisitor&lt; T &gt; &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#ab3d7c0ce1aa100e48554605b9c9c3ac7">acceptSPValueVisitor</a>(const SPValueVisitor&lt; T &gt; &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6">allocateRanges</a>(const std::vector&lt; T &gt; &amp;rangesToAllocate, size_t index=0)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f">checkTreeStateLegal</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591">collectRange</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e">dimension</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac">getBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5">getChildNodeNames</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897">getConstSPnodeLeaves</a>(SPnodeConstPtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864">getDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b">getDimension</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e">getLabel</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae">getLargestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b">getLeafNodeLevels</a>(IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab2d91d997064dccc3c1a6f80bd27c6ef">getLeafNodeLevels</a>(const int level, IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7">getLeafNodeLevelsJ</a>(IntVec &amp;levels, int level=0) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72">getLeafNodeLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5">getLeafNodeVolumes</a>(RealVec &amp;vols) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093">getLeftChild</a>() const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81">getNodeDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db">getNodeName</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23">getNumberLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef">getParent</a>() const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd">getRange</a>() const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9">getRightChild</a>() const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d">getSmallestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371">getSplitDim</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878">getSPnodeLeaves</a>(SPnodePtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad">hasLCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e">hasLeafSibling</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa">hasRCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5e79ff65a692b09c98ff53264ddfba9f">ImageSp</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#adda5afc72873dc3875f341ecbb947b23">ImageSpNonMinimal</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593">isEmpty</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7">isLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc">isSubLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb">label</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#aa35a5e2e8518004e8feefb3bdea98d53">leafOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac0d9484691c21a316308b4713e6e8bba">leavesOutputTabs</a>(std::ostream &amp;os, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646">leftChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93">makeTreeFromLeaves</a>(ivector &amp;root, ImageList &amp;leafList)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08">makeTreeFromVoxels</a>(ivector &amp;root, ImageList &amp;leafList, double spacing, size_t dim)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117">MappedSPnode</a>()</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a5c67c4c7aec0a3ce461b7ac459ad70c2">MappedSPnode</a>(const ivector &amp;v)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a866ab9d7d7e517e5c403588f12d8e919">MappedSPnode</a>(const LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#afe15c759857516d725298a1392ab6f07">MappedSPnode</a>(const ivector &amp;v, const T &amp;r)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a5911cc25e5152fe9cced953de14707e7">MappedSPnode</a>(const LabBox &amp;lb, const T &amp;r)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a528b15231c2a8476fdeb9283137dc9b1">MappedSPnode</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a3e0ee96e161385b67f5ccc39b4212bdf">MappedSPnode</a>(const MappedSPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#aceaf989b21707aa1f00a9d8372cf2551">minimiseLeaves</a>()</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f">nodeAddLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26">nodeAddRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16">nodeAdoptLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676">nodeAdoptRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb">nodeContains</a>(const rvector &amp;p, OPERATIONS_ON childInd=ON_PARENT) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a817b05cc2d60ff0ee1a98b0addf54131">nodeExpand</a>(int comp)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92">nodeExpand</a>()</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a3b16d632897f3a4fb11f36db1e9004bf">subpavings::SPnode::nodeExpand</a>(bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610">nodeName</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a798b65086b8c8042522fc317e73247a7">nodePrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36">nodeReabsorbChildren</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347">nodeRealVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc">nodeReunite</a>(SPnode *lChild, SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(std::ostream &amp;os, int level) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7408768856a7c988d9784b6172d74310">nodesAllOutput</a>(std::ostream &amp;os, int level, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#ae4b153a0ff33397c3537f1ce9d87b743">nodeStringSummary</a>() const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb">nodeVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#acfbd13653a91c69a7091c6e9c18a6d68">oneLineOutput</a>(std::ostream &amp;os, int level) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#af329c66306f63fb572c92c582640633e">operator*</a>(const MappedSPnode&lt; T &gt; &amp;mult) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a855f75cf76d1ee0235c7aaab29b048f3">operator*</a>(const T &amp;mult) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#aa5949967da59e064734929aaf190fc15">operator*=</a>(const MappedSPnode&lt; T &gt; &amp;mult)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a6c028eece36691537a2c824b39d0fb00">operator*=</a>(const T &amp;mult)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a1204b445f0526e62aed8ded7a92744f8">operator+</a>(const MappedSPnode&lt; T &gt; &amp;add) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a9c951e4722b21949175ab3997dcd3a86">operator+</a>(const T &amp;add) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a30b1a6a37439a3d5ad3611e6ecdf37be">operator+=</a>(const MappedSPnode&lt; T &gt; &amp;add)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a11f57501aac4b67b779e3344290101b4">operator+=</a>(const T &amp;add)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#acf2b59252b57c2201c5184dbb02a5a20">operator-</a>(const MappedSPnode&lt; T &gt; &amp;sub) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#ad4bb0c01c69521b16c62a90a6e540e8f">operator-</a>(const T &amp;sub) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a1ca00409cd79226e2b626acfb20ea054">operator-=</a>(const MappedSPnode&lt; T &gt; &amp;sub)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a6c67949c1c356830bd0edaae9f75ccbe">operator-=</a>(const T &amp;sub)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a7a92e3c463e2fbe951824badf0aa2383">operator/</a>(const MappedSPnode&lt; T &gt; &amp;div) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#ad8deddac45220ce11ba734c5ff4694d0">operator/</a>(const T &amp;div) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a793f3f3b66690ef99c8a737850f7c291">operator/=</a>(const MappedSPnode&lt; T &gt; &amp;div)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#aab106627889397cf17d3ea7a3626e363">operator/=</a>(const T &amp;div)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a9f159be71fab10b26dec5d080fec95ff">operator=</a>(MappedSPnode&lt; T &gt; rhs)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666">subpavings::SPnode::operator=</a>(const SPnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8">parent</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d">range</a></td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e">recursiveRename</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a1113235b4bedd4a2849cc8e6dae719dc">reshapeToUnion</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd">rightChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db">setLabel</a>(int lab)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f">setNodeName</a>(std::string newname)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a4e3cc447b700d1a0e8e611f56762a96d">setRange</a>(T r)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93">Sivia</a>(PIBT BoolTest, const SPnode *const toInvert, SPnode *const search, const double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a83d5b7a4609c73e1818fe2d3231c0979">slice</a>(const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44">sliceCheck</a>(const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts) const </td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3">spContains</a>(const ivector &amp;z) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56f98ed5bc26b9b11dfce51f3e667e2b">spContains</a>(const rvector &amp;p) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">spLeafBoxDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">spLeafBoxIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">spLeafBoxOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b">splitLeft</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea">splitRootToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286">splitToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54">SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad43955b79e832489150c70b6aa4e3f05">SPnode</a>(const ivector &amp;v)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#acd1241250563fcabfd1fc1d069e2065d">SPnode</a>(const LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a41d88bc0857db595850fd2c7f1a4fa">SPnode</a>(ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac91f261853f289d2ccf7102cd543a0d4">SPnode</a>(LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aeafa6189ea2d85037ab6579471a947be">SPnode</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb">swap</a>(SPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24">swapMSPSR</a>(MappedSPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832">theBox</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(BoxVec &amp;boxes, ivector box1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">volDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">volIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">volOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa">vtkPaving</a>(const std::string filename)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a8f23f414976c6bc3409de02288496e04">~MappedSPnode</a>()</td><td><a class="el" href="classsubpavings_1_1MappedSPnode.shtml">subpavings::MappedSPnode&lt; T &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef">~SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:39 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
