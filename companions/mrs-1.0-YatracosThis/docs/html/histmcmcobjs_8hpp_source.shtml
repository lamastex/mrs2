<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: histmcmcobjs.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('histmcmcobjs_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">histmcmcobjs.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="histmcmcobjs_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef ___MCMCFOBJS_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define ___MCMCFOBJS_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="keyword">namespace </span>subpavings {
<a name="l00030"></a>00030 
<a name="l00033"></a><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml">00033</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035     <span class="keyword">protected</span>:
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">00037</a>     <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">priorName</a>;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039     <span class="keyword">public</span>:
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a6c3e7fab7f47501de8e5577c20a93e22">00041</a>     <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a6c3e7fab7f47501de8e5577c20a93e22">LogMCMCPrior</a>() : <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">priorName</a>(<span class="stringliteral">&quot;&quot;</span>) {}
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#ad3d0c5e29c3a14d86902e90256cbdd97">00043</a>     <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#ad3d0c5e29c3a14d86902e90256cbdd97">LogMCMCPrior</a>(<span class="keywordtype">string</span> pn) : <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">priorName</a>(pn) {}
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#ace14dfa0a28927d063d091e13f9ead1c">getName</a>() <span class="keyword">const</span> = 0;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="keyword">virtual</span> real <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#ae53e146f9ac1b057ae9df4370220a22d">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> k) <span class="keyword">const</span> = 0;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 };
<a name="l00050"></a>00050 
<a name="l00060"></a><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml">00060</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062     <span class="keyword">private</span>:
<a name="l00063"></a>00063     
<a name="l00064"></a><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a11e97ab23bba85316c2077491c4c5cac">00064</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a11e97ab23bba85316c2077491c4c5cac">temp</a>;
<a name="l00065"></a>00065    
<a name="l00066"></a>00066     
<a name="l00067"></a>00067     <span class="keyword">public</span>:
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="comment">// default constructor</span>
<a name="l00070"></a><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a2073d1910c1c644561be521b643b5dd9">00070</a>     <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a2073d1910c1c644561be521b643b5dd9">LogCatalanPrior</a>() {}; 
<a name="l00071"></a>00071      
<a name="l00072"></a>00072     <span class="comment">//LogCatalanPrior(double t) : LogMCMCPrior(&quot;CatalanPrior&quot;), temp(t) {}</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="comment">// give the name of the prior</span>
<a name="l00075"></a><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#add1b40d81d8a22343e74ce7e1a76a354">00075</a>     <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#add1b40d81d8a22343e74ce7e1a76a354">getName</a>()<span class="keyword"> const</span>
<a name="l00076"></a>00076 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">priorName</a>; }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">// number of splits k</span>
<a name="l00079"></a>00079     <span class="comment">// but i think input is number of leaves - so need to subtract 1?</span>
<a name="l00080"></a><a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a54670df4e881f6516d2e368bee8c2439">00080</a>     real <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml#a54670df4e881f6516d2e368bee8c2439">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> k)<span class="keyword"> const</span>
<a name="l00081"></a>00081 <span class="keyword">    </span>{
<a name="l00082"></a>00082       <span class="keywordflow">return</span> -2*<a class="code" href="histpenalty_8hpp.shtml#a1dc9bf6a99daaa6cf7349f16c1e558f5">lCk</a>(k)/1;
<a name="l00083"></a>00083       <span class="comment">//double a = 2  + 4*M_PI/pow(3, 2.5); </span>
<a name="l00084"></a>00084       <span class="comment">//return (-1*log(a) - 2*lCk(k-1))/temp;</span>
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 };
<a name="l00088"></a>00088 
<a name="l00089"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml">00089</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml">LogTemperaturePrior</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="keyword">private</span>:
<a name="l00092"></a>00092 
<a name="l00093"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a161fe5fa916de9250535f5b9f86811b6">00093</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a161fe5fa916de9250535f5b9f86811b6">temp</a>; <span class="comment">// the temperature coefficient</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="comment">// default constructor is private and cannot be used outside the class</span>
<a name="l00096"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#affb626295cf29d795210eab0111bda13">00096</a>     <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#affb626295cf29d795210eab0111bda13">LogTemperaturePrior</a>() {}
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     <span class="keyword">public</span>:
<a name="l00099"></a>00099 
<a name="l00100"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a608c83384be76200c1ac7bf9905d95c2">00100</a>     <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a608c83384be76200c1ac7bf9905d95c2">LogTemperaturePrior</a>(<span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>(<span class="stringliteral">&quot;CatalanPrior&quot;</span>), <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a161fe5fa916de9250535f5b9f86811b6">temp</a>(t) {}
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="comment">// give the name of the prior</span>
<a name="l00103"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a8a41da03f7f93a125f796a8f8009996a">00103</a>     <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a8a41da03f7f93a125f796a8f8009996a">getName</a>()<span class="keyword"> const</span>
<a name="l00104"></a>00104 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#a56c878a215bc9b7fb54871a3c0f6dc44">priorName</a>; }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     <span class="comment">// number of leaves l</span>
<a name="l00107"></a><a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a09b2afaea3be6e703e24ecce36ef0b9a">00107</a>     real <a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a09b2afaea3be6e703e24ecce36ef0b9a">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> l)<span class="keyword"> const</span>
<a name="l00108"></a>00108 <span class="keyword">    </span>{
<a name="l00109"></a>00109         <span class="keywordflow">return</span> -1.0/<a class="code" href="classsubpavings_1_1LogTemperaturePrior.shtml#a161fe5fa916de9250535f5b9f86811b6">temp</a>*l;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 };
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00124"></a><a class="code" href="classsubpavings_1_1MCMCProposal.shtml">00124</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126     <span class="keyword">protected</span>:
<a name="l00127"></a>00127 
<a name="l00128"></a><a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">00128</a>         <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">proposalName</a>;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="keyword">public</span>:
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a4ce28643aa42dbdbacbf31cb0b1065b2">00132</a>     <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a4ce28643aa42dbdbacbf31cb0b1065b2">MCMCProposal</a>() : <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">proposalName</a>(<span class="stringliteral">&quot;&quot;</span>) {}
<a name="l00133"></a>00133 
<a name="l00134"></a><a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a0ef78a8a1abaa03ed0bb35edd21dd178">00134</a>     <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a0ef78a8a1abaa03ed0bb35edd21dd178">MCMCProposal</a>(<span class="keywordtype">string</span> pn) : <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">proposalName</a>(pn) {}
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="keyword">virtual</span> <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a8b96ad3e975f60ad938d4aaf6d1009b3">getName</a>() <span class="keyword">const</span> = 0;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">// fill a vector with probabilities as reals</span>
<a name="l00139"></a>00139     <span class="comment">// and return the sum of the probabilities</span>
<a name="l00140"></a>00140     <span class="keyword">virtual</span> real <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9a41619f829a7fd3c080f3f9c0bed705">fillNodeProposalProbs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> nLeaf,
<a name="l00141"></a>00141                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> nCherry,
<a name="l00142"></a>00142                                         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; probs) <span class="keyword">const</span> = 0;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">// logQ(m | m&#39;) - logQ(m&#39; | m) for split proposal m&#39;</span>
<a name="l00145"></a>00145     <span class="keyword">virtual</span> real <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#acd6dda5380192dfc3bd38a28925dd1ce">getLogQRatioSplitProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00146"></a>00146                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00147"></a>00147                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00148"></a>00148                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective
<a name="l00149"></a>00149                                             ) <span class="keyword">const</span> = 0;
<a name="l00150"></a>00150     <span class="comment">// logQ(m | m&#39;) - logQ(m&#39; | m) for merge proposal m&#39;</span>
<a name="l00151"></a>00151     <span class="keyword">virtual</span> real <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#ae39f9b3d8afbc8be9a10d6947f59798e">getLogQRatioMergeProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00152"></a>00152                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00153"></a>00153                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00154"></a>00154                                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective
<a name="l00155"></a>00155                                             ) <span class="keyword">const</span> = 0;
<a name="l00156"></a>00156 };
<a name="l00157"></a>00157 
<a name="l00162"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml">00162</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="keyword">private</span>:
<a name="l00166"></a>00166 
<a name="l00167"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">00167</a>         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keyword">public</span>:
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="comment">// default constructor</span>
<a name="l00172"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a48ba54810e93ef39de822b3a23152ada">00172</a>         <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a48ba54810e93ef39de822b3a23152ada">UniformProposal</a>() : <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>(<span class="stringliteral">&quot;UniformProposal&quot;</span>),
<a name="l00173"></a>00173                                 <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>(0.5) {}
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a136a544cbf9a088c25d5a044cfb4707e">00175</a>         <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a48ba54810e93ef39de822b3a23152ada">UniformProposal</a>(<span class="keywordtype">double</span> p) : <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>(<span class="stringliteral">&quot;UniformProposal&quot;</span>),
<a name="l00176"></a>00176                                         <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>(p) {}
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         <span class="comment">// give the name of the proposal</span>
<a name="l00179"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#aef037393c168f70b5849813233d7e594">00179</a>         <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1UniformProposal.shtml#aef037393c168f70b5849813233d7e594">getName</a>()<span class="keyword"> const</span>
<a name="l00180"></a>00180 <span class="keyword">        </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">proposalName</a>; }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182         <span class="comment">// fill a vector with probabilities as reals</span>
<a name="l00183"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a78acb8553a9e2f18f0c1accf3519b75f">00183</a>         real <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a78acb8553a9e2f18f0c1accf3519b75f">fillNodeProposalProbs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> nLeaf, <span class="keyword">const</span> <span class="keywordtype">size_t</span> nCherry,
<a name="l00184"></a>00184                                         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; probs)<span class="keyword"> const</span>
<a name="l00185"></a>00185 <span class="keyword">        </span>{
<a name="l00186"></a>00186 
<a name="l00187"></a>00187             real retSum = 0.0;
<a name="l00188"></a>00188             probs.reserve(nLeaf + nCherry);
<a name="l00189"></a>00189 
<a name="l00190"></a>00190             <span class="keywordflow">if</span> (nLeaf &gt; 0) {
<a name="l00191"></a>00191                 real pLeaf = <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>*1.0/nLeaf;
<a name="l00192"></a>00192                 retSum += (1.0*nLeaf * pLeaf);
<a name="l00193"></a>00193                 probs.assign(nLeaf, pLeaf);
<a name="l00194"></a>00194             }
<a name="l00195"></a>00195             <span class="keywordflow">if</span> (nCherry &gt; 0) {
<a name="l00196"></a>00196                 real pCherry = (1.0-<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>)/nCherry;
<a name="l00197"></a>00197                 retSum += (1.0*nCherry * pCherry);
<a name="l00198"></a>00198                 probs.insert(probs.end(), nCherry, pCherry);
<a name="l00199"></a>00199             }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201             <span class="keywordflow">return</span> retSum;
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204         <span class="comment">// logQ(m | m&#39;) - logQ(m&#39; | m)</span>
<a name="l00205"></a>00205         <span class="comment">// where m&#39; is proposal state after a split on m</span>
<a name="l00206"></a>00206         <span class="comment">// what matters is the current number of leaves</span>
<a name="l00207"></a>00207         <span class="comment">// and the number of cherries under the proposal</span>
<a name="l00208"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a34e427b990aebdf8ea302693da8952ea">00208</a>         real <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a34e427b990aebdf8ea302693da8952ea">getLogQRatioSplitProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00209"></a>00209                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00210"></a>00210                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00211"></a>00211                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective)<span class="keyword"> const</span>
<a name="l00212"></a>00212 <span class="keyword">        </span>{
<a name="l00213"></a>00213             real retValue = 0;
<a name="l00214"></a>00214             <span class="keywordflow">if</span> (leavesNow == 0 &amp;&amp; cherriesProspective &gt; 0) {
<a name="l00215"></a>00215                 retValue = log(1.0-<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>) - log(1.0*cherriesProspective);
<a name="l00216"></a>00216             }
<a name="l00217"></a>00217             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (leavesNow &gt; 0 &amp;&amp; cherriesProspective == 0) {
<a name="l00218"></a>00218                 retValue = log(<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>) - log(1.0*leavesNow);
<a name="l00219"></a>00219             }
<a name="l00220"></a>00220             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (leavesNow &gt; 0 &amp;&amp; cherriesProspective &gt; 0) {
<a name="l00221"></a>00221                  retValue = log(1.0-<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>) - log(<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>)
<a name="l00222"></a>00222                             + log(1.0*leavesNow) - log(1.0*cherriesProspective);
<a name="l00223"></a>00223             }
<a name="l00224"></a>00224             <span class="comment">// else retValue = 0 - this should never occur</span>
<a name="l00225"></a>00225             <span class="keywordflow">return</span> retValue;
<a name="l00226"></a>00226         }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228         <span class="comment">// logQ(m | m&#39;) - logQ(m&#39; | m)</span>
<a name="l00229"></a>00229         <span class="comment">// where m&#39; is proposal state after a split on m</span>
<a name="l00230"></a>00230         <span class="comment">// what matters is the prospective number of leaves</span>
<a name="l00231"></a>00231         <span class="comment">// and the current number of cherries</span>
<a name="l00232"></a><a class="code" href="classsubpavings_1_1UniformProposal.shtml#a0dd552bd6b2f9cfb4eb94e2a3efc5d57">00232</a>         real <a class="code" href="classsubpavings_1_1UniformProposal.shtml#a0dd552bd6b2f9cfb4eb94e2a3efc5d57">getLogQRatioMergeProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00233"></a>00233                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00234"></a>00234                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00235"></a>00235                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective)<span class="keyword"> const</span>
<a name="l00236"></a>00236 <span class="keyword">        </span>{
<a name="l00237"></a>00237             <span class="keywordflow">return</span> log(<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>) - log(1.0-<a class="code" href="classsubpavings_1_1UniformProposal.shtml#a9f7fb09d33d58ac7bc938369d3ad4e3d">probSplit</a>)
<a name="l00238"></a>00238                         + log(1.0*cherriesNow) - log(1.0*leavesProspective);
<a name="l00239"></a>00239         }
<a name="l00240"></a>00240 };
<a name="l00241"></a>00241 
<a name="l00246"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml">00246</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml">EquiProbProposal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>
<a name="l00247"></a>00247 {
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     <span class="keyword">public</span>:
<a name="l00250"></a>00250 
<a name="l00251"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a0061c48b37e74ebd4f15426d90e7f87a">00251</a>         <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a0061c48b37e74ebd4f15426d90e7f87a">EquiProbProposal</a>() : <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>(<span class="stringliteral">&quot;EquiprobableProposal&quot;</span>) {}
<a name="l00252"></a>00252 
<a name="l00253"></a>00253         <span class="comment">// give the name of the proposal</span>
<a name="l00254"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#afc31fba60e3a5686d4431f7236597ae8">00254</a>         <span class="keywordtype">string</span> <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#afc31fba60e3a5686d4431f7236597ae8">getName</a>()<span class="keyword"> const</span>
<a name="l00255"></a>00255 <span class="keyword">        </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9ce4ff476ddf57622979e46888f81c09">proposalName</a>; }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257         <span class="comment">// fill a vector with probabilities as reals</span>
<a name="l00258"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a69979ac7c2578262f03556e763e81558">00258</a>         real <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a69979ac7c2578262f03556e763e81558">fillNodeProposalProbs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> nLeaf, <span class="keyword">const</span> <span class="keywordtype">size_t</span> nCherry,
<a name="l00259"></a>00259                                         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; probs)<span class="keyword"> const</span>
<a name="l00260"></a>00260 <span class="keyword">        </span>{
<a name="l00261"></a>00261             real retSum = 0.0;
<a name="l00262"></a>00262             probs.reserve(nLeaf + nCherry);
<a name="l00263"></a>00263 
<a name="l00264"></a>00264             <span class="keywordflow">if</span> (nLeaf + nCherry &gt; 0) {
<a name="l00265"></a>00265                 real pNode = 1.0/(nLeaf + nCherry);
<a name="l00266"></a>00266                 retSum += pNode*(1.0*nLeaf + 1.0*nCherry);
<a name="l00267"></a>00267 
<a name="l00268"></a>00268                 probs.assign(nLeaf+nCherry, pNode);
<a name="l00269"></a>00269             }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271             <span class="keywordflow">return</span> retSum;
<a name="l00272"></a>00272         }
<a name="l00273"></a>00273 
<a name="l00274"></a>00274         <span class="comment">// logQ(m | m&#39;) - logQ(m&#39; | m)</span>
<a name="l00275"></a>00275         <span class="comment">// where m&#39; is proposal state after a split on m</span>
<a name="l00276"></a>00276         <span class="comment">// the current and prospective numbers of leaves and cherries all matter</span>
<a name="l00277"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a14cfb9c0c63ee3a5d1ed978cac89b903">00277</a>         real <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a14cfb9c0c63ee3a5d1ed978cac89b903">getLogQRatioSplitProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00278"></a>00278                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00279"></a>00279                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00280"></a>00280                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective)<span class="keyword"> const</span>
<a name="l00281"></a>00281 <span class="keyword">        </span>{
<a name="l00282"></a>00282             real retValue = 0;
<a name="l00283"></a>00283             <span class="keywordflow">if</span> ((leavesNow + cherriesNow &gt; 0)
<a name="l00284"></a>00284                     &amp;&amp; (leavesProspective + cherriesProspective &gt; 0)) {
<a name="l00285"></a>00285                 retValue = log(1.0*(leavesNow + cherriesNow))
<a name="l00286"></a>00286                     - log(1.0*(leavesProspective + cherriesProspective));
<a name="l00287"></a>00287             }
<a name="l00288"></a>00288             <span class="comment">// else retValue = 0 - this should never occur</span>
<a name="l00289"></a>00289             <span class="keywordflow">return</span> retValue;
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292         <span class="comment">// same as for split</span>
<a name="l00293"></a><a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#af7a44db43cc40978a791913baf083661">00293</a>         real <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#af7a44db43cc40978a791913baf083661">getLogQRatioMergeProposal</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesNow,
<a name="l00294"></a>00294                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesNow,
<a name="l00295"></a>00295                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> leavesProspective,
<a name="l00296"></a>00296                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span> cherriesProspective)<span class="keyword"> const</span>
<a name="l00297"></a>00297 <span class="keyword">        </span>{
<a name="l00298"></a>00298             <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1EquiProbProposal.shtml#a14cfb9c0c63ee3a5d1ed978cac89b903">getLogQRatioSplitProposal</a>(leavesNow, cherriesNow,
<a name="l00299"></a>00299                                     leavesProspective, cherriesProspective);
<a name="l00300"></a>00300         }
<a name="l00301"></a>00301 };
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 } <span class="comment">// end of namespace subpavings</span>
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="preprocessor">#endif</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>
<a name="l00307"></a>00307 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="histmcmcobjs_8hpp.shtml">histmcmcobjs.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
