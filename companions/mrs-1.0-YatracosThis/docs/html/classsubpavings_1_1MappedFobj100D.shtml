<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: subpavings::MappedFobj100D Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1MappedFobj100D.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">subpavings::MappedFobj100D Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="subpavings::MappedFobj100D" --><!-- doxytag: inherits="subpavings::MappedFobj" -->
<p>An abstract class for target function objects on 10-dimensional real space.  
 <a href="classsubpavings_1_1MappedFobj100D.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="mappedFobj100D_8hpp_source.shtml">mappedFobj100D.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for subpavings::MappedFobj100D:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1MappedFobj100D__inherit__graph.png" border="0" usemap="#subpavings_1_1MappedFobj100D_inherit__map" alt="Inheritance graph"/></div>
<map name="subpavings_1_1MappedFobj100D_inherit__map" id="subpavings_1_1MappedFobj100D_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for subpavings::MappedFobj100D:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1MappedFobj100D__coll__graph.png" border="0" usemap="#subpavings_1_1MappedFobj100D_coll__map" alt="Collaboration graph"/></div>
<map name="subpavings_1_1MappedFobj100D_coll__map" id="subpavings_1_1MappedFobj100D_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classsubpavings_1_1MappedFobj100D-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#aa0e7fdeba49e7ee43e46d38f630935ce">operator()</a> (const cxsc::ivector &amp;) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a virtual function for interval image of a box  <a href="#aa0e7fdeba49e7ee43e46d38f630935ce"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a6439390e913abd6ccf9626eaa1dacd16">operator()</a> (const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;) const =0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a pure virtual function for interval image of an interval pair  <a href="#a6439390e913abd6ccf9626eaa1dacd16"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a85c7b43d20d5793676de4b1ff5f242d6">operator()</a> (const cxsc::rvector &amp;) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a virtual function for real image of an rvector  <a href="#a85c7b43d20d5793676de4b1ff5f242d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a6623df51bcbb3ed9ddb9d7e7e38b96eb">operator()</a> (const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;) const =0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a pure virtual function for real image of a real pair  <a href="#a6623df51bcbb3ed9ddb9d7e7e38b96eb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a055b113cf48f62a55175038b64e2c6ac">imageMid</a> (const cxsc::ivector &amp;) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a virtual function for real image of midpoint of an interval  <a href="#a055b113cf48f62a55175038b64e2c6ac"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a20ebd733b7254a0ea2ef36e1920597e0">imageMid</a> (const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a virtual function for real image of midpoint of an interval pair  <a href="#a20ebd733b7254a0ea2ef36e1920597e0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#ab0156c8edfa7ef875abb36fe556dc665">~MappedFobj100D</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ab0156c8edfa7ef875abb36fe556dc665"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>An abstract class for target function objects on 10-dimensional real space. </p>
<p>These target functions can be used by MappedSP types. </p>

<p>Definition at line <a class="el" href="mappedFobj100D_8hpp_source.shtml#l00025">25</a> of file <a class="el" href="mappedFobj100D_8hpp_source.shtml">mappedFobj100D.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab0156c8edfa7ef875abb36fe556dc665"></a><!-- doxytag: member="subpavings::MappedFobj100D::~MappedFobj100D" ref="ab0156c8edfa7ef875abb36fe556dc665" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#ab0156c8edfa7ef875abb36fe556dc665">subpavings::MappedFobj100D::~MappedFobj100D</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="mappedFobj100D_8hpp_source.shtml#l00200">200</a> of file <a class="el" href="mappedFobj100D_8hpp_source.shtml">mappedFobj100D.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a055b113cf48f62a55175038b64e2c6ac"></a><!-- doxytag: member="subpavings::MappedFobj100D::imageMid" ref="a055b113cf48f62a55175038b64e2c6ac" args="(const cxsc::ivector &amp;) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a055b113cf48f62a55175038b64e2c6ac">MappedFobj100D::imageMid</a> </td>
          <td>(</td>
          <td class="paramtype">const cxsc::ivector &amp;&#160;</td>
          <td class="paramname"><em>ivec</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a virtual function for real image of midpoint of an interval </p>

<p>Reimplemented from <a class="el" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d">subpavings::MappedFobj</a>.</p>

<p>Definition at line <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00227">227</a> of file <a class="el" href="mappedFobj100D_8cpp_source.shtml">mappedFobj100D.cpp</a>.</p>

<p>References <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00015">operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> this-&gt;<a class="code" href="classsubpavings_1_1MappedFobj100D.shtml#aa0e7fdeba49e7ee43e46d38f630935ce" title="a virtual function for interval image of a box">operator()</a>(
  cxsc::mid(ivec[1]),
  cxsc::mid(ivec[2]),
  cxsc::mid(ivec[3]),
  cxsc::mid(ivec[4]),
  cxsc::mid(ivec[5]),
  cxsc::mid(ivec[6]),
  cxsc::mid(ivec[7]),
  cxsc::mid(ivec[8]),
  cxsc::mid(ivec[9]),
  cxsc::mid(ivec[10]),
  cxsc::mid(ivec[11]),
  cxsc::mid(ivec[12]),
  cxsc::mid(ivec[13]),
  cxsc::mid(ivec[14]),
  cxsc::mid(ivec[15]),
  cxsc::mid(ivec[16]),
  cxsc::mid(ivec[17]),
  cxsc::mid(ivec[18]),
  cxsc::mid(ivec[19]),
  cxsc::mid(ivec[20]),
  cxsc::mid(ivec[21]),
  cxsc::mid(ivec[22]),
  cxsc::mid(ivec[23]),
  cxsc::mid(ivec[24]),
  cxsc::mid(ivec[25]),
  cxsc::mid(ivec[26]),
  cxsc::mid(ivec[27]),
  cxsc::mid(ivec[28]),
  cxsc::mid(ivec[29]),
  cxsc::mid(ivec[30]),
  cxsc::mid(ivec[31]),
  cxsc::mid(ivec[32]),
  cxsc::mid(ivec[33]),
  cxsc::mid(ivec[34]),
  cxsc::mid(ivec[35]),
  cxsc::mid(ivec[36]),
  cxsc::mid(ivec[37]),
  cxsc::mid(ivec[38]),
  cxsc::mid(ivec[39]),
  cxsc::mid(ivec[40]),
  cxsc::mid(ivec[41]),
  cxsc::mid(ivec[42]),
  cxsc::mid(ivec[43]),
  cxsc::mid(ivec[44]),
  cxsc::mid(ivec[45]),
  cxsc::mid(ivec[46]),
  cxsc::mid(ivec[47]),
  cxsc::mid(ivec[48]),
  cxsc::mid(ivec[49]),
  cxsc::mid(ivec[50]),
  cxsc::mid(ivec[51]),
  cxsc::mid(ivec[52]),
  cxsc::mid(ivec[53]),
  cxsc::mid(ivec[54]),
  cxsc::mid(ivec[55]),
  cxsc::mid(ivec[56]),
  cxsc::mid(ivec[57]),
  cxsc::mid(ivec[58]),
  cxsc::mid(ivec[59]),
  cxsc::mid(ivec[60]),
  cxsc::mid(ivec[61]),
  cxsc::mid(ivec[62]),
  cxsc::mid(ivec[63]),
  cxsc::mid(ivec[64]),
  cxsc::mid(ivec[65]),
  cxsc::mid(ivec[66]),
  cxsc::mid(ivec[67]),
  cxsc::mid(ivec[68]),
  cxsc::mid(ivec[69]),
  cxsc::mid(ivec[70]),
  cxsc::mid(ivec[71]),
  cxsc::mid(ivec[72]),
  cxsc::mid(ivec[73]),
  cxsc::mid(ivec[74]),
  cxsc::mid(ivec[75]),
  cxsc::mid(ivec[76]),
  cxsc::mid(ivec[77]),
  cxsc::mid(ivec[78]),
  cxsc::mid(ivec[79]),
  cxsc::mid(ivec[80]),
  cxsc::mid(ivec[81]),
  cxsc::mid(ivec[82]),
  cxsc::mid(ivec[83]),
  cxsc::mid(ivec[84]),
  cxsc::mid(ivec[85]),
  cxsc::mid(ivec[86]),
  cxsc::mid(ivec[87]),
  cxsc::mid(ivec[88]),
  cxsc::mid(ivec[89]),
  cxsc::mid(ivec[90]),
  cxsc::mid(ivec[91]),
  cxsc::mid(ivec[92]),
  cxsc::mid(ivec[93]),
  cxsc::mid(ivec[94]),
  cxsc::mid(ivec[95]),
  cxsc::mid(ivec[96]),
  cxsc::mid(ivec[97]),
  cxsc::mid(ivec[98]),
  cxsc::mid(ivec[99]),
  cxsc::mid(ivec[100])
  );
}
</pre></div>
</div>
</div>
<a class="anchor" id="a20ebd733b7254a0ea2ef36e1920597e0"></a><!-- doxytag: member="subpavings::MappedFobj100D::imageMid" ref="a20ebd733b7254a0ea2ef36e1920597e0" args="(const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1MappedFobj100D.shtml#a055b113cf48f62a55175038b64e2c6ac">MappedFobj100D::imageMid</a> </td>
          <td>(</td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival4</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival5</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival6</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival7</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival9</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival10</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival11</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival12</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival13</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival14</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival15</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival16</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival17</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival18</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival19</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival20</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival21</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival22</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival23</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival24</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival25</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival26</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival27</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival28</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival29</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival30</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival31</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival33</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival34</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival35</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival36</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival37</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival38</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival39</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival40</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival41</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival42</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival43</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival44</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival45</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival46</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival47</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival48</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival49</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival50</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival51</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival52</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival53</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival54</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival55</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival56</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival57</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival58</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival59</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival60</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival61</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival62</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival63</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival64</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival65</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival66</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival67</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival68</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival69</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival70</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival71</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival72</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival73</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival74</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival75</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival76</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival77</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival78</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival79</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival80</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival81</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival82</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival83</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival84</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival85</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival86</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival87</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival88</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival89</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival90</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival91</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival92</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival93</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival94</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival95</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival96</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival97</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival98</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival99</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname"><em>ival100</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a virtual function for real image of midpoint of an interval pair </p>

<p>Definition at line <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00333">333</a> of file <a class="el" href="mappedFobj100D_8cpp_source.shtml">mappedFobj100D.cpp</a>.</p>

<p>References <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00015">operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> this-&gt;<a class="code" href="classsubpavings_1_1MappedFobj100D.shtml#aa0e7fdeba49e7ee43e46d38f630935ce" title="a virtual function for interval image of a box">operator()</a>(
    cxsc::mid(ival1),
    cxsc::mid(ival2),
    cxsc::mid(ival3),
    cxsc::mid(ival4),
    cxsc::mid(ival5),
    cxsc::mid(ival6),
    cxsc::mid(ival7),
    cxsc::mid(ival8),
    cxsc::mid(ival9),
    cxsc::mid(ival10),
    cxsc::mid(ival11),
    cxsc::mid(ival12),
    cxsc::mid(ival13),
    cxsc::mid(ival14),
    cxsc::mid(ival15),
    cxsc::mid(ival16),
    cxsc::mid(ival17),
    cxsc::mid(ival18),
    cxsc::mid(ival19),
    cxsc::mid(ival20),
    cxsc::mid(ival21),
    cxsc::mid(ival22),
    cxsc::mid(ival23),
    cxsc::mid(ival24),
    cxsc::mid(ival25),
    cxsc::mid(ival26),
    cxsc::mid(ival27),
    cxsc::mid(ival28),
    cxsc::mid(ival29),
    cxsc::mid(ival30),
    cxsc::mid(ival31),
    cxsc::mid(ival32),
    cxsc::mid(ival33),
    cxsc::mid(ival34),
    cxsc::mid(ival35),
    cxsc::mid(ival36),
    cxsc::mid(ival37),
    cxsc::mid(ival38),
    cxsc::mid(ival39),
    cxsc::mid(ival40),
    cxsc::mid(ival41),
    cxsc::mid(ival42),
    cxsc::mid(ival43),
    cxsc::mid(ival44),
    cxsc::mid(ival45),
    cxsc::mid(ival46),
    cxsc::mid(ival47),
    cxsc::mid(ival48),
    cxsc::mid(ival49),
    cxsc::mid(ival50),
    cxsc::mid(ival51),
    cxsc::mid(ival52),
    cxsc::mid(ival53),
    cxsc::mid(ival54),
    cxsc::mid(ival55),
    cxsc::mid(ival56),
    cxsc::mid(ival57),
    cxsc::mid(ival58),
    cxsc::mid(ival59),
    cxsc::mid(ival60),
    cxsc::mid(ival61),
    cxsc::mid(ival62),
    cxsc::mid(ival63),
    cxsc::mid(ival64),
    cxsc::mid(ival65),
    cxsc::mid(ival66),
    cxsc::mid(ival67),
    cxsc::mid(ival68),
    cxsc::mid(ival69),
    cxsc::mid(ival70),
    cxsc::mid(ival71),
    cxsc::mid(ival72),
    cxsc::mid(ival73),
    cxsc::mid(ival74),
    cxsc::mid(ival75),
    cxsc::mid(ival76),
    cxsc::mid(ival77),
    cxsc::mid(ival78),
    cxsc::mid(ival79),
    cxsc::mid(ival80),
    cxsc::mid(ival81),
    cxsc::mid(ival82),
    cxsc::mid(ival83),
    cxsc::mid(ival84),
    cxsc::mid(ival85),
    cxsc::mid(ival86),
    cxsc::mid(ival87),
    cxsc::mid(ival88),
    cxsc::mid(ival89),
    cxsc::mid(ival90),
    cxsc::mid(ival91),
    cxsc::mid(ival92),
    cxsc::mid(ival93),
    cxsc::mid(ival94),
    cxsc::mid(ival95),
    cxsc::mid(ival96),
    cxsc::mid(ival97),
    cxsc::mid(ival98),
    cxsc::mid(ival99),
    cxsc::mid(ival100)
    );
  <span class="comment">/*int ivL = Lb(iv);</span>
<span class="comment">  int ivU = Ub(iv);</span>
<span class="comment">  rvector rv(ivU - ivL +1 );</span>
<span class="comment">  for (int i = ivL; i&lt;=ivU; i++) {</span>
<span class="comment">    rv[i] = mid(iv[i]);</span>
<span class="comment">  }</span>
<span class="comment">  return this-&gt;operator()(rv);</span>
<span class="comment">  */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa0e7fdeba49e7ee43e46d38f630935ce"></a><!-- doxytag: member="subpavings::MappedFobj100D::operator()" ref="aa0e7fdeba49e7ee43e46d38f630935ce" args="(const cxsc::ivector &amp;) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::interval MappedFobj100D::operator() </td>
          <td>(</td>
          <td class="paramtype">const cxsc::ivector &amp;&#160;</td>
          <td class="paramname"><em>ivec</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a virtual function for interval image of a box </p>

<p>Implements <a class="el" href="classsubpavings_1_1MappedFobj.shtml#aad44e53cb112ea94a970a9bf3888fa6b">subpavings::MappedFobj</a>.</p>

<p>Definition at line <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00015">15</a> of file <a class="el" href="mappedFobj100D_8cpp_source.shtml">mappedFobj100D.cpp</a>.</p>

<p>Referenced by <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00227">imageMid()</a>, and <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00121">operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> this-&gt;<a class="code" href="classsubpavings_1_1MappedFobj100D.shtml#aa0e7fdeba49e7ee43e46d38f630935ce" title="a virtual function for interval image of a box">operator()</a>(
  ivec[1],
  ivec[2],
  ivec[3],
  ivec[4],
  ivec[5],
  ivec[6],
  ivec[7],
  ivec[8],
  ivec[9],
  ivec[10],
  ivec[11],
  ivec[12],
  ivec[13],
  ivec[14],
  ivec[15],
  ivec[16],
  ivec[17],
  ivec[18],
  ivec[19],
  ivec[20],
  ivec[21],
  ivec[22],
  ivec[23],
  ivec[24],
  ivec[25],
  ivec[26],
  ivec[27],
  ivec[28],
  ivec[29],
  ivec[30],
  ivec[31],
  ivec[32],
  ivec[33],
  ivec[34],
  ivec[35],
  ivec[36],
  ivec[37],
  ivec[38],
  ivec[39],
  ivec[40],
  ivec[41],
  ivec[42],
  ivec[43],
  ivec[44],
  ivec[45],
  ivec[46],
  ivec[47],
  ivec[48],
  ivec[49],
  ivec[50],
  ivec[51],
  ivec[52],
  ivec[53],
  ivec[54],
  ivec[55],
  ivec[56],
  ivec[57],
  ivec[58],
  ivec[59],
  ivec[60],
  ivec[61],
  ivec[62],
  ivec[63],
  ivec[64],
  ivec[65],
  ivec[66],
  ivec[67],
  ivec[68],
  ivec[69],
  ivec[70],
  ivec[71],
  ivec[72],
  ivec[73],
  ivec[74],
  ivec[75],
  ivec[76],
  ivec[77],
  ivec[78],
  ivec[79],
  ivec[80],
  ivec[81],
  ivec[82],
  ivec[83],
  ivec[84],
  ivec[85],
  ivec[86],
  ivec[87],
  ivec[88],
  ivec[89],
  ivec[90],
  ivec[91],
  ivec[92],
  ivec[93],
  ivec[94],
  ivec[95],
  ivec[96],
  ivec[97],
  ivec[98],
  ivec[99],
  ivec[100]
  );
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6439390e913abd6ccf9626eaa1dacd16"></a><!-- doxytag: member="subpavings::MappedFobj100D::operator()" ref="a6439390e913abd6ccf9626eaa1dacd16" args="(const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;, const cxsc::interval &amp;) const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual cxsc::interval subpavings::MappedFobj100D::operator() </td>
          <td>(</td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::interval &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a pure virtual function for interval image of an interval pair </p>

<p>Implemented in <a class="el" href="classGaussianFobj100D.shtml#a4f1b3477ee51ae239b80b3a77a89e639">GaussianFobj100D</a>, and <a class="el" href="classRosenFobj100D.shtml#a6129ba2da54c28e00c0d41284a732af3">RosenFobj100D</a>.</p>

</div>
</div>
<a class="anchor" id="a85c7b43d20d5793676de4b1ff5f242d6"></a><!-- doxytag: member="subpavings::MappedFobj100D::operator()" ref="a85c7b43d20d5793676de4b1ff5f242d6" args="(const cxsc::rvector &amp;) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real MappedFobj100D::operator() </td>
          <td>(</td>
          <td class="paramtype">const cxsc::rvector &amp;&#160;</td>
          <td class="paramname"><em>rv</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a virtual function for real image of an rvector </p>

<p>Implements <a class="el" href="classsubpavings_1_1MappedFobj.shtml#aed79714dcf7fb4eb54d0488428909291">subpavings::MappedFobj</a>.</p>

<p>Definition at line <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00121">121</a> of file <a class="el" href="mappedFobj100D_8cpp_source.shtml">mappedFobj100D.cpp</a>.</p>

<p>References <a class="el" href="mappedFobj100D_8cpp_source.shtml#l00015">operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> this-&gt;<a class="code" href="classsubpavings_1_1MappedFobj100D.shtml#aa0e7fdeba49e7ee43e46d38f630935ce" title="a virtual function for interval image of a box">operator()</a>(
  rv[1],
  rv[2],
  rv[3],
  rv[4],
  rv[5],
  rv[6],
  rv[7],
  rv[8],
  rv[9],
  rv[10],
  rv[11],
  rv[12],
  rv[13],
  rv[14],
  rv[15],
  rv[16],
  rv[17],
  rv[18],
  rv[19],
  rv[20],
  rv[21],
  rv[22],
  rv[23],
  rv[24],
  rv[25],
  rv[26],
  rv[27],
  rv[28],
  rv[29],
  rv[30],
  rv[31],
  rv[32],
  rv[33],
  rv[34],
  rv[35],
  rv[36],
  rv[37],
  rv[38],
  rv[39],
  rv[40],
  rv[41],
  rv[42],
  rv[43],
  rv[44],
  rv[45],
  rv[46],
  rv[47],
  rv[48],
  rv[49],
  rv[50],
  rv[51],
  rv[52],
  rv[53],
  rv[54],
  rv[55],
  rv[56],
  rv[57],
  rv[58],
  rv[59],
  rv[60],
  rv[61],
  rv[62],
  rv[63],
  rv[64],
  rv[65],
  rv[66],
  rv[67],
  rv[68],
  rv[69],
  rv[70],
  rv[71],
  rv[72],
  rv[73],
  rv[74],
  rv[75],
  rv[76],
  rv[77],
  rv[78],
  rv[79],
  rv[80],
  rv[81],
  rv[82],
  rv[83],
  rv[84],
  rv[85],
  rv[86],
  rv[87],
  rv[88],
  rv[89],
  rv[90],
  rv[91],
  rv[92],
  rv[93],
  rv[94],
  rv[95],
  rv[96],
  rv[97],
  rv[98],
  rv[99],
  rv[100]
  );
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6623df51bcbb3ed9ddb9d7e7e38b96eb"></a><!-- doxytag: member="subpavings::MappedFobj100D::operator()" ref="a6623df51bcbb3ed9ddb9d7e7e38b96eb" args="(const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;, const cxsc::real &amp;) const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual cxsc::real subpavings::MappedFobj100D::operator() </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a pure virtual function for real image of a real pair </p>

<p>Implemented in <a class="el" href="classGaussianFobj100D.shtml#aab5b1387768ff96d70c88b4a85532753">GaussianFobj100D</a>, and <a class="el" href="classRosenFobj100D.shtml#a0fcd3fc10a477991fd44ef3f27d4005a">RosenFobj100D</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="mappedFobj100D_8hpp_source.shtml">mappedFobj100D.hpp</a></li>
<li><a class="el" href="mappedFobj100D_8cpp_source.shtml">mappedFobj100D.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacesubpavings.shtml">subpavings</a>      </li>
      <li class="navelem"><a class="el" href="classsubpavings_1_1MappedFobj100D.shtml">MappedFobj100D</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:38 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
