<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMC.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Trunk_2MCMC_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Trunk/MCMC.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MCMC__Trunk_2dataprep_8hpp_source.shtml">dataprep.hpp</a>&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
</div>
<p><a href="Trunk_2MCMC_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Trunk_2MCMC_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="Trunk/MCMC.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Trunk_2MCMC_8cpp_source.shtml#l00039">39</a> of file <a class="el" href="Trunk_2MCMC_8cpp_source.shtml">Trunk/MCMC.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">subpavings::AdaptiveHistogramCollator::makeAverage()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03102">subpavings::AdaptiveHistogram::MCMCsamples()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, and <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::TXT</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// ------- prepare to generate some data for the tests -----------</span>

<span class="comment">// set up a random number generator</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;

    <span class="keyword">const</span> <span class="keywordtype">int</span> n=1000;    <span class="comment">// number to generate</span>
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>

    gsl_rng_env_setup();

    T = gsl_rng_default;
    r = gsl_rng_alloc (T);

    <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);

    <span class="keywordtype">int</span> d = 2; <span class="comment">// dimension of the box to sample data from</span>
    ivector pavingBox(d);
    interval pavingInterval(0,1);
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;

    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>

    <span class="comment">// make a simulated data set allData to sample from</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {

        rvector thisrv(d);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j &lt;= d; j++) {
                thisrv[j]  = gsl_rng_uniform(r);
        }

        <span class="comment">// put points generated into container</span>
        theData.push_back(thisrv);

    }  <span class="comment">// data  should be in theData</span>

    <span class="comment">// free the random number generator</span>
    gsl_rng_free (r);

<span class="comment">/*</span>
<span class="comment">    // output data to a file</span>
<span class="comment">    string dataFile = &quot;dataFile.txt&quot;;</span>
<span class="comment">    ofstream osd(dataFile.c_str());         // replace data</span>
<span class="comment">    if (osd.is_open()) {</span>
<span class="comment">        RVecDataItr dit;</span>
<span class="comment">        for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<span class="comment">            //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">            osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">        }</span>
<span class="comment">        osd.close();</span>
<span class="comment">    }</span>
<span class="comment">    else {</span>
<span class="comment">        std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<span class="comment">            &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<span class="comment">    }</span>
<span class="comment">*/</span>

    <span class="comment">//bool successfulPQSplit = false;</span>
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;

    <span class="comment">// example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to give a minimum number of bins -----------</span>

    cout &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Start example:&quot;</span> &lt;&lt; endl;

    <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
    <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
    <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBox);

    <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
    successfulInsertion = myHistFirst.insertFromRVec(theData);

    <span class="keywordflow">if</span> (successfulInsertion) {

        <span class="comment">// optional - print out the scores</span>
        <span class="comment">//real scoreCOPERR = myHistFirst.getEMPScoreCOPERR();</span>
        <span class="comment">//real scoreAIC = myHistFirst.getEMPScoreAIC();</span>
        

        <span class="comment">// set up proposal distribution object</span>
        <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
        <span class="comment">// set up prior distribution object</span>
        <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;

        <span class="comment">/* specify minPoints</span>
<span class="comment">        A node is not splittable if splitting that node would give at least</span>
<span class="comment">        one child with &lt; minPoints of data associated with it.*/</span>
        <span class="keywordtype">int</span> minPoints = 20;

    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = 2000;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = 1500;
    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = 100;
    std::vector &lt; AdaptiveHistogram &gt; samples;
    
    {
      cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC sample average &quot;</span>  &lt;&lt; endl;
      clock_t start, end;
      start = clock();

      <span class="comment">// MCMC with 2000 states, burn in 1500, thinout every 100 etc</span>
      <span class="comment">// create a log file only for samples (no dot graphs)</span>
      
      std::vector &lt; AdaptiveHistogram &gt; samples;
      samples = myHistFirst.MCMCsamples(samples, loops, burnin, thinout,
                        proposal, logPrior,
                        minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>);
      
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> tempColl;
      tempColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(samples);
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> mcmcAv = tempColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
      
      end = clock();

      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
         &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;

      cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC sample averaging&quot;</span> &lt;&lt; endl;
      <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;DirectMCMCAverage.txt&quot;</span>;
      
      mcmcAv.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(mcmcAvFilename);
      
      
    }
    {
      cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC samples &quot;</span>  &lt;&lt; endl;
      clock_t start, end;
      start = clock();
      
      <span class="comment">// MCMC with 2000 states, burn in 1500, thinout every 100 etc</span>
      <span class="comment">// create a log file only for samples (no dot graphs)</span>
      samples = myHistFirst.MCMCsamples(samples,
                          loops, burnin, thinout,
                          proposal, logPrior,
                          minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>);
      end = clock();

      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
         &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;

      <span class="keywordflow">if</span> (!samples.empty()) {

        cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; samples.size() &lt;&lt; <span class="stringliteral">&quot; samples&quot;</span> &lt;&lt; endl;
        
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
        
        <span class="keywordflow">for</span> (vector &lt; AdaptiveHistogram &gt;::iterator it = samples.begin();
          it &lt; samples.end();
          ++it) {
            
          coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(*it);
        }
        
        cout &lt;&lt; <span class="stringliteral">&quot;coverage from collator&quot;</span> &lt;&lt; endl;
        
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> av = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
        cout &lt;&lt; <span class="stringliteral">&quot;Finished averaging&quot;</span> &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;coverage from average from coll&quot;</span> &lt;&lt; endl;
                
        <span class="keywordtype">string</span> avFilename = <span class="stringliteral">&quot;AverageColl.txt&quot;</span>;
        <span class="keywordtype">string</span> normFilename = <span class="stringliteral">&quot;NormalisedColl.txt&quot;</span>;

        av.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(avFilename);
        
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> normColl = coll.makeNormalised();
        normColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(normFilename);

        <span class="comment">// create a name for the file to output</span>
        <span class="comment">//outputFileName = &quot;MCMCFirstAfterMCMC.txt&quot;;</span>
        <span class="comment">// To realize a file output</span>
        <span class="comment">//myHistFirst.outputToTxtTabsWithEMPs(outputFileName);</span>
      }
      <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to complete MCMC&quot;</span> &lt;&lt; endl;
    }
  }
    <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;


    <span class="keywordflow">return</span> 0;

} <span class="comment">// end of MCMC test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Trunk_2MCMC_8cpp.shtml">MCMC.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
