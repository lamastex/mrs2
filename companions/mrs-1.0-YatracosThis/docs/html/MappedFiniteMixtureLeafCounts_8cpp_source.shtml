<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedFiniteMixtureLeafCounts.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedFiniteMixtureLeafCounts_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedFiniteMixtureLeafCounts.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedFiniteMixtureLeafCounts_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* s</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> * </span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> * </span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="IAECalculations_2FinMixFobj_8hpp.shtml">FinMixFobj.hpp</a>&quot;</span> <span class="comment">//function objects</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span> <span class="comment">// to use gsl_ran_discrete_preproc</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;valarray&gt;</span> 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//draw unif box</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">using namespace </span>std;
<a name="l00045"></a>00045 <span class="keyword">using namespace </span>subpavings;
<a name="l00046"></a>00046 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00050"></a>00050 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052   <span class="keyword">public</span>:
<a name="l00053"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00053</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00054"></a>00054       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00055"></a>00055     }
<a name="l00056"></a>00056 };
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">//==========Functions=====================================================//</span>
<a name="l00059"></a>00059 <span class="comment">//to output MappedSPnode to .txt file</span>
<a name="l00060"></a><a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00060</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062    <span class="comment">// To generate a file output</span>
<a name="l00063"></a>00063    ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00064"></a>00064    <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00065"></a>00065       node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00066"></a>00066       std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
<a name="l00067"></a>00067                &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00068"></a>00068          os.close();
<a name="l00069"></a>00069       }
<a name="l00070"></a>00070    <span class="keywordflow">else</span> {
<a name="l00071"></a>00071       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00072"></a>00072          &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00073"></a>00073    }
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">//function to iterate through the leaves and get weights and boxes</span>
<a name="l00077"></a><a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">00077</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;double&gt;&amp; WeightsVector)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00080"></a>00080      
<a name="l00081"></a>00081      <span class="comment">//get the weights</span>
<a name="l00082"></a>00082      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00083"></a>00083      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00084"></a>00084      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00085"></a>00085   }
<a name="l00086"></a>00086   <span class="comment">//recurse on the children</span>
<a name="l00087"></a>00087   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00088"></a>00088     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector);
<a name="l00089"></a>00089   }
<a name="l00090"></a>00090    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00091"></a>00091     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector);
<a name="l00092"></a>00092    }
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">//function to iterate through the leaves and get heights and boxes</span>
<a name="l00096"></a><a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">00096</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;ivector&gt;&amp; BoxVector,
<a name="l00097"></a>00097            vector&lt;real&gt;&amp; HeightsVector)
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00100"></a>00100      <span class="comment">//push back this box into the BoxVector</span>
<a name="l00101"></a>00101      BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00102"></a>00102      
<a name="l00103"></a>00103      <span class="comment">//get the heights</span>
<a name="l00104"></a>00104      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00105"></a>00105      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00106"></a>00106      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
<a name="l00107"></a>00107   }
<a name="l00108"></a>00108   <span class="comment">//recurse on the children</span>
<a name="l00109"></a>00109   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00110"></a>00110     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00113"></a>00113     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
<a name="l00114"></a>00114    }
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">// normalize the heights</span>
<a name="l00118"></a><a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">00118</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, <span class="keywordtype">double</span> totalArea, 
<a name="l00119"></a>00119           vector&lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> &gt;&amp; heightNorm)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
<a name="l00122"></a>00122      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00123"></a>00123      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00124"></a>00124      real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
<a name="l00125"></a>00125      
<a name="l00126"></a>00126      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
<a name="l00127"></a>00127     heightNorm.push_back(height);
<a name="l00128"></a>00128   }
<a name="l00129"></a>00129   <span class="comment">//recurse on the children</span>
<a name="l00130"></a>00130   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00131"></a>00131     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
<a name="l00132"></a>00132   }
<a name="l00133"></a>00133    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00134"></a>00134     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
<a name="l00135"></a>00135    }
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 <span class="comment">//=======================end of functions====================================//</span>
<a name="l00138"></a>00138 
<a name="l00139"></a><a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00139</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00142"></a>00142     <span class="keywordtype">int</span> mix = atoi(argv[1]); <span class="comment">//which mixture to use</span>
<a name="l00143"></a>00143    
<a name="l00144"></a>00144    <span class="comment">//string formatting</span>
<a name="l00145"></a>00145    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00146"></a>00146     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00147"></a>00147     oss.precision(10);  
<a name="l00148"></a>00148   
<a name="l00149"></a>00149    <span class="comment">//make a root box</span>
<a name="l00150"></a>00150    <span class="keywordtype">int</span> dims = 1;
<a name="l00151"></a>00151    ivector pavingBox(dims);
<a name="l00152"></a>00152    interval pavingInterval(-10,10);
<a name="l00153"></a>00153    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00154"></a>00154    
<a name="l00155"></a>00155   <span class="comment">//=================Setting up parameters for the distribution============//</span>
<a name="l00156"></a>00156    <span class="comment">// read input from mix*.txt</span>
<a name="l00157"></a>00157    <span class="keywordtype">string</span> mixfileName;
<a name="l00158"></a>00158    mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00159"></a>00159   std::ostringstream stmMix;
<a name="l00160"></a>00160   stmMix &lt;&lt; mix;
<a name="l00161"></a>00161   mixfileName += stmMix.str();
<a name="l00162"></a>00162   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   ifstream infile(mixfileName.c_str());
<a name="l00165"></a>00165   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00166"></a>00166   <span class="keywordtype">double</span> W, M, V;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00169"></a>00169   vector&lt;double&gt; Weight;
<a name="l00170"></a>00170   vector&lt;double&gt; Mean;
<a name="l00171"></a>00171   vector&lt;double&gt; Sigma;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture: &quot;</span> &lt;&lt; endl;
<a name="l00174"></a>00174   ifstream file; <span class="comment">// create file for input</span>
<a name="l00175"></a>00175   file.open(mixfileName.c_str());
<a name="l00176"></a>00176   <span class="comment">// check if this file exists or not</span>
<a name="l00177"></a>00177   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00178"></a>00178     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00179"></a>00179          &lt;&lt; endl;
<a name="l00180"></a>00180     exit(1);
<a name="l00181"></a>00181   }
<a name="l00182"></a>00182   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00183"></a>00183     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00184"></a>00184     W=Weight1/Weight2;
<a name="l00185"></a>00185     Weight.push_back(W);
<a name="l00186"></a>00186     M=Mean1/Mean2;
<a name="l00187"></a>00187     Mean.push_back(M);
<a name="l00188"></a>00188     V=Var1/Var2;
<a name="l00189"></a>00189     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00190"></a>00190   }
<a name="l00191"></a>00191   Weight.pop_back();
<a name="l00192"></a>00192   Mean.pop_back();
<a name="l00193"></a>00193   Sigma.pop_back();
<a name="l00194"></a>00194   
<a name="l00195"></a>00195   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00196"></a>00196   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00197"></a>00197   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00198"></a>00198   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00199"></a>00199 
<a name="l00200"></a>00200    <span class="comment">//=========set up to estimate the function==============================// </span>
<a name="l00201"></a>00201     <span class="comment">//function object</span>
<a name="l00202"></a>00202    <a class="code" href="classFinMixFobj.shtml" title="Declarations for MappedSPnode 1D Gaussian Mixtures function object class.">FinMixFobj</a> realFM(Weight, Mean, Sigma);  
<a name="l00203"></a>00203     
<a name="l00204"></a>00204    vector&lt;real&gt; tol;
<a name="l00205"></a>00205    tol.push_back(0.5);
<a name="l00206"></a>00206    tol.push_back(0.1);
<a name="l00207"></a>00207    tol.push_back(0.05);
<a name="l00208"></a>00208   tol.push_back(0.01);
<a name="l00209"></a>00209   tol.push_back(0.005);
<a name="l00210"></a>00210   tol.push_back(0.001);
<a name="l00211"></a>00211   tol.push_back(0.0005);
<a name="l00212"></a>00212   tol.push_back(0.0001);
<a name="l00213"></a>00213   tol.push_back(0.00005);
<a name="l00214"></a>00214   tol.push_back(0.00001);
<a name="l00215"></a>00215   tol.push_back(0.000005);
<a name="l00216"></a>00216   tol.push_back(0.000001);
<a name="l00217"></a>00217   
<a name="l00218"></a>00218   vector&lt;real&gt;::iterator it;
<a name="l00219"></a>00219   
<a name="l00220"></a>00220   vector&lt;int&gt; numLeaves;
<a name="l00221"></a>00221   
<a name="l00222"></a>00222   <span class="keywordflow">for</span> (it = tol.begin(); it &lt; tol.end(); it++) {
<a name="l00223"></a>00223      <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00224"></a>00224      cout &lt;&lt; <span class="stringliteral">&quot;Estimate function:&quot;</span> &lt;&lt; endl;
<a name="l00225"></a>00225       <span class="comment">// estimate the function</span>
<a name="l00226"></a>00226     
<a name="l00227"></a>00227      <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realFM, (*it));
<a name="l00228"></a>00228      nodeEst.<a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(expander);
<a name="l00229"></a>00229      
<a name="l00230"></a>00230      cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; (*it) &lt;&lt; endl;
<a name="l00231"></a>00231      cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves is: &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; endl;;
<a name="l00232"></a>00232     numLeaves.push_back(nodeEst.getNumLeaves());
<a name="l00233"></a>00233   }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   <span class="comment">//output to txt</span>
<a name="l00236"></a>00236   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00237"></a>00237   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00238"></a>00238   os.precision(5);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00241"></a>00241   outputFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00242"></a>00242   ostringstream stm;
<a name="l00243"></a>00243   stm &lt;&lt; mix;
<a name="l00244"></a>00244   outputFileName += stm.str();
<a name="l00245"></a>00245   outputFileName += <span class="stringliteral">&quot;LeafNodes.txt&quot;</span>;
<a name="l00246"></a>00246   os.open(outputFileName.c_str());
<a name="l00247"></a>00247   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; numLeaves.size(); i++) {
<a name="l00248"></a>00248     os &lt;&lt; numLeaves[i] &lt;&lt; endl;
<a name="l00249"></a>00249   }
<a name="l00250"></a>00250   os &lt;&lt; flush;
<a name="l00251"></a>00251   os.close();
<a name="l00252"></a>00252   
<a name="l00253"></a>00253   std::cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00254"></a>00254   
<a name="l00255"></a>00255   <span class="keywordflow">return</span> 0;
<a name="l00256"></a>00256 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml">MappedFiniteMixtureLeafCounts.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
