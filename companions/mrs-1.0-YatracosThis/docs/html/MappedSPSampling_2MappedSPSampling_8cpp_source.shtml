<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSampling.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPSampling_2MappedSPSampling_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPSampling/MappedSPSampling.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPSampling_2MappedSPSampling_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj1D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj1D.hpp</a>&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj2D.hpp</a>&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj10D.hpp</a>&quot;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj100D.hpp</a>&quot;</span>
<a name="l00009"></a>00009 <span class="comment">//#include &quot;GaussianFobj1000D.hpp&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj2D.hpp</a>&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj10D.hpp</a>&quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj100D.hpp</a>&quot;</span>
<a name="l00013"></a>00013 <span class="comment">//#include &quot;RosenFobj1000D.hpp&quot;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;<a class="code" href="LevyFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">LevyFobj2D.hpp</a>&quot;</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="keyword">using namespace </span>std;
<a name="l00023"></a>00023 <span class="keyword">using namespace </span>subpavings;
<a name="l00024"></a>00024 
<a name="l00025"></a><a class="code" href="MappedSPSampling_2MappedSPSampling_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00025</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00026"></a>00026 {
<a name="l00027"></a>00027         <span class="comment">// To generate a file output</span>
<a name="l00028"></a>00028         ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00029"></a>00029         <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00030"></a>00030 
<a name="l00031"></a>00031             node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00032"></a>00032             std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the example&quot;</span>
<a name="l00033"></a>00033                     &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00034"></a>00034             os.close();
<a name="l00035"></a>00035         }
<a name="l00036"></a>00036         <span class="keywordflow">else</span> {
<a name="l00037"></a>00037             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00038"></a>00038                 &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00039"></a>00039         }
<a name="l00040"></a>00040 }
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="MappedSPSampling_2MappedSPSampling_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00042</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044     <span class="comment">//=======user defined parameters================================//</span>
<a name="l00045"></a>00045       <span class="keywordflow">if</span> ( argc != 5 ) {
<a name="l00046"></a>00046     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: MappedFunctions dims lb ub numLeaves&quot;</span> &lt;&lt; endl;
<a name="l00047"></a>00047     exit(0);
<a name="l00048"></a>00048   }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     <span class="keywordtype">int</span> dims = atoi(argv[1]);
<a name="l00051"></a>00051     <span class="comment">//double tolerance = atof(argv[1]);</span>
<a name="l00052"></a>00052     
<a name="l00053"></a>00053      <span class="keywordtype">size_t</span> critLeaves = atof(argv[4]);
<a name="l00054"></a>00054     cout &lt;&lt; critLeaves &lt;&lt; endl;
<a name="l00055"></a>00055     
<a name="l00056"></a>00056     real tolerance = 0;
<a name="l00057"></a>00057    
<a name="l00058"></a>00058     <span class="comment">//========define the function object</span>
<a name="l00059"></a>00059     <span class="comment">//RosenFobj2D realF;</span>
<a name="l00060"></a>00060     <span class="comment">//LevyFobj2D realF;</span>
<a name="l00061"></a>00061     <a class="code" href="classGaussianFobj10D.shtml">GaussianFobj10D</a> realF;
<a name="l00062"></a>00062     <span class="comment">//GaussianFobj2D realF;</span>
<a name="l00063"></a>00063     <span class="comment">//=====make the root box===========================//</span>
<a name="l00064"></a>00064     ivector pavingBox(dims);
<a name="l00065"></a>00065     real lb = atof(argv[2]);
<a name="l00066"></a>00066     real ub = atof(argv[3]);
<a name="l00067"></a>00067     interval pavingInterval(lb, ub);
<a name="l00068"></a>00068     
<a name="l00069"></a>00069     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00070"></a>00070     <span class="comment">//RealMappedSPnode nodeRoot1(pavingBox); // make a MappedSPnode object</span>
<a name="l00071"></a>00071     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRoot2(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   
<a name="l00074"></a>00074    <span class="comment">// interval ival = realF(pavingBox);</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, tolerance);
<a name="l00077"></a>00077     <span class="comment">//nodeRoot1.accept(expander);    </span>
<a name="l00078"></a>00078     nodeRoot2.priorityAccept(expander, critLeaves);
<a name="l00079"></a>00079    
<a name="l00080"></a>00080    cout.precision(20);
<a name="l00081"></a>00081    cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; tolerance &lt;&lt; endl;
<a name="l00082"></a>00082    <span class="comment">//cout &lt;&lt; &quot;Number of leaves is: &quot; &lt;&lt; nodeRoot1.getNumLeaves() &lt;&lt; endl;</span>
<a name="l00083"></a>00083   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves is: &quot;</span> &lt;&lt; nodeRoot2.getNumLeaves() &lt;&lt; endl;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="comment">//cout &lt;&lt; nodeRoot.getLeafLevelsString() &lt;&lt; endl;</span>
<a name="l00086"></a>00086    <span class="comment">//string filename = &quot;EstFunction1.txt&quot;;</span>
<a name="l00087"></a>00087    <span class="comment">//output(filename, nodeRoot1);</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunction2.txt&quot;</span>;
<a name="l00090"></a>00090    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRoot2);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092     <span class="keywordflow">return</span> 0;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPSampling_2MappedSPSampling_8cpp.shtml">MappedSPSampling.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
