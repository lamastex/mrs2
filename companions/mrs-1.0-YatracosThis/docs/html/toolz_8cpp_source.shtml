<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: toolz.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('toolz_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">toolz.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="toolz_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">//src_trunk_0701</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;stdexcept&gt;</span> 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">//functions</span>
<a name="l00035"></a>00035 
<a name="l00039"></a><a class="code" href="toolz_8hpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528">00039</a> <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (<span class="keyword">const</span> <span class="keywordtype">size_t</span> ssize, <span class="keyword">const</span> <span class="keywordtype">double</span> *x)
<a name="l00040"></a>00040 {
<a name="l00041"></a>00041   <span class="keywordflow">return</span> gsl_stats_mean (x, 1, ssize);
<a name="l00042"></a>00042  <span class="comment">/* long double mean = 0;</span>
<a name="l00043"></a>00043 <span class="comment">  size_t i;</span>
<a name="l00044"></a>00044 <span class="comment"></span>
<a name="l00045"></a>00045 <span class="comment">  for (i = 0; i &lt; ssize; i++)</span>
<a name="l00046"></a>00046 <span class="comment">  {</span>
<a name="l00047"></a>00047 <span class="comment">    mean += (x[i] - mean) / (i + 1);</span>
<a name="l00048"></a>00048 <span class="comment">  }</span>
<a name="l00049"></a>00049 <span class="comment"></span>
<a name="l00050"></a>00050 <span class="comment">  return mean;*/</span>
<a name="l00051"></a>00051 }
<a name="l00052"></a>00052 
<a name="l00055"></a><a class="code" href="toolz_8hpp.shtml#a03a292f5dfc6f19a070570e44eeb8552">00055</a> <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a> (<span class="keyword">const</span> <span class="keywordtype">size_t</span> ssize, <span class="keywordtype">double</span> *x)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057   <span class="keywordflow">return</span> gsl_stats_variance (x, 1, ssize)*((double) (ssize-1) / (double) ssize);
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00066"></a><a class="code" href="toolz_8hpp.shtml#a9efdc4ede6e6e3539c2ddca8b71e79a8">00066</a> <span class="keywordtype">long</span> <a class="code" href="toolz_8cpp.shtml#a9efdc4ede6e6e3539c2ddca8b71e79a8">mean_var</a> (<span class="keyword">const</span> vector &lt; real &gt; &amp;x, real &amp; <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a>, real &amp; <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a>)
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   vector &lt; real &gt;::const_iterator it = x.begin ();
<a name="l00069"></a>00069   real sum (0.0), sumsq (0.0);
<a name="l00070"></a>00070   <span class="keywordtype">long</span> count (0);
<a name="l00071"></a>00071   <span class="keywordflow">for</span> (; it != x.end (); it++)
<a name="l00072"></a>00072   {
<a name="l00073"></a>00073     sum += *it;
<a name="l00074"></a>00074     sumsq += *it * *it;
<a name="l00075"></a>00075     count++;
<a name="l00076"></a>00076   }
<a name="l00077"></a>00077   mean = sum / count;
<a name="l00078"></a>00078   var = sumsq / count - mean * <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a>;
<a name="l00079"></a>00079   <span class="keywordflow">return</span> count;
<a name="l00080"></a>00080   <span class="comment">//sum = std::accumulate(x.begin(),x.end(),0.,kahan_sum&lt;real&gt;());</span>
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">// mean squared error via GSL</span>
<a name="l00084"></a><a class="code" href="toolz_8hpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3">00084</a> <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (<span class="keywordtype">double</span> exact, <span class="keywordtype">int</span> ssize, <span class="keywordtype">double</span> *x)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086   <span class="keywordflow">return</span> gsl_stats_variance_with_fixed_mean (x, 1, ssize, exact);
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">// minimum of two reals</span>
<a name="l00090"></a><a class="code" href="toolz_8hpp.shtml#aed5587466d9191177de49b5f1e0301ad">00090</a> real <a class="code" href="toolz_8cpp.shtml#aed5587466d9191177de49b5f1e0301ad" title="Find Minimum of two real types.">Min</a> (real x, real y)
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092   <span class="keywordflow">return</span> (x &lt; y) ? x : y;
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">// Draw a real uniformly at random from the interval X in R</span>
<a name="l00096"></a><a class="code" href="toolz_8hpp.shtml#a4fb345087779da0877e22420a2ff922d">00096</a> real <a class="code" href="toolz_8cpp.shtml#a4fb345087779da0877e22420a2ff922d" title="Draw a real uniformly at random from the interval X in R.">DrawUnifInterval</a> (gsl_rng * rgsl, <span class="keyword">const</span> interval &amp; X)
<a name="l00097"></a>00097 {
<a name="l00098"></a>00098   <span class="keywordtype">double</span> r = gsl_rng_uniform (rgsl);
<a name="l00099"></a>00099   <span class="keywordflow">return</span> (Inf (X) + (r * diam (X)));
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00105"></a><a class="code" href="toolz_8hpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e">00105</a> rvector <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a> (gsl_rng* rgsl, <span class="keyword">const</span> <span class="keywordtype">int</span> n_dimensions)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107   rvector rand_vector(1, n_dimensions);
<a name="l00108"></a>00108   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=n_dimensions; i++)
<a name="l00109"></a>00109   {
<a name="l00110"></a>00110     rand_vector[i] = gsl_rng_uniform(rgsl);
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112   <span class="keywordflow">return</span> rand_vector;
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="comment">//Draw a real uniformly at random from the box X in R^n</span>
<a name="l00116"></a><a class="code" href="toolz_8hpp.shtml#abc84f170f624cc9d449c0cfcaac0f157">00116</a> rvector <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (gsl_rng * rgsl, <span class="keyword">const</span> ivector &amp; X)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X);
<a name="l00119"></a>00119   rvector UX (a, z);
<a name="l00120"></a>00120   <span class="keywordflow">for</span> (i = a; i &lt;= z; i++)
<a name="l00121"></a>00121   {
<a name="l00122"></a>00122     UX[i] = <a class="code" href="toolz_8cpp.shtml#a4fb345087779da0877e22420a2ff922d" title="Draw a real uniformly at random from the interval X in R.">DrawUnifInterval</a> (rgsl, X[i]);
<a name="l00123"></a>00123   }
<a name="l00124"></a>00124   <span class="keywordflow">return</span> UX;
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="comment">// Draw a real uniformly at quasi-random from the box X in R^n</span>
<a name="l00128"></a><a class="code" href="toolz_8hpp.shtml#adfd4a448ba53eebbc7284fc6414798c6">00128</a> rvector <a class="code" href="toolz_8cpp.shtml#adfd4a448ba53eebbc7284fc6414798c6" title="Draw a vector uniformly at quasi-random from a Box.">DrawQZUnifBox</a> (gsl_qrng * qrgsl, <span class="keyword">const</span> ivector &amp; X)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X);
<a name="l00131"></a>00131   vector&lt;double&gt; v(z - a + 1);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   gsl_qrng_get (qrgsl, (&amp;v[0]));
<a name="l00134"></a>00134   rvector UX (a, z);
<a name="l00135"></a>00135   <span class="keywordflow">for</span> (i = a; i &lt;= z; i++)
<a name="l00136"></a>00136   {
<a name="l00137"></a>00137     UX[i] = Inf (X[i]) + (diam (X[i]) * v[i - a]);
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139   <span class="keywordflow">return</span> UX;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00147"></a><a class="code" href="toolz_8hpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445">00147</a> rvector <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a> (<span class="keywordtype">double</span> *v, <span class="keyword">const</span> ivector &amp; X)
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X);
<a name="l00150"></a>00150   rvector UX (a, z);
<a name="l00151"></a>00151   <span class="keywordflow">for</span> (i = a; i &lt;= z; i++)
<a name="l00152"></a>00152   {
<a name="l00153"></a>00153     UX[i] = Inf (X[i]) + (diam (X[i]) * v[i - a]);
<a name="l00154"></a>00154   }
<a name="l00155"></a>00155   <span class="keywordflow">return</span> UX;
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">// return the first dimension with maximal diameter</span>
<a name="l00159"></a><a class="code" href="toolz_8hpp.shtml#af7098b26cfe9466d751176b29c67342c">00159</a> <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a> (ivector &amp; iv)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161   <span class="keywordtype">int</span> mc, k;
<a name="l00162"></a>00162   rvector d (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (iv), <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (iv));
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   d = diam (iv);
<a name="l00165"></a>00165   mc = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (iv);
<a name="l00166"></a>00166   <span class="keywordflow">for</span> (k = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (iv) + 1; k &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (iv); k++)
<a name="l00167"></a>00167   {
<a name="l00168"></a>00168     <span class="keywordflow">if</span> (d[k] &gt; d[mc])
<a name="l00169"></a>00169       mc = k;
<a name="l00170"></a>00170   }
<a name="l00171"></a>00171   <span class="keywordflow">return</span> mc;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="comment">// blow the box by eps</span>
<a name="l00175"></a><a class="code" href="toolz_8hpp.shtml#a418bc35de36effbb3522fc58fa035b60">00175</a> ivector <a class="code" href="toolz_8cpp.shtml#a418bc35de36effbb3522fc58fa035b60" title="Blow up a box by eps pivoted at FromZero and return it.">BlowUpFromZero</a> (ivector iv, real FromZero, real eps)
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (iv), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (iv);
<a name="l00178"></a>00178   interval x;
<a name="l00179"></a>00179   interval EPS = _interval (-eps, eps);
<a name="l00180"></a>00180   ivector ov (a, z);
<a name="l00181"></a>00181   <span class="keywordflow">for</span> (i = a; i &lt;= z; i++)
<a name="l00182"></a>00182   {
<a name="l00183"></a>00183     x = iv[i] + EPS;
<a name="l00184"></a>00184     ov[i] =
<a name="l00185"></a>00185       _interval (pred (max (FromZero, Inf (x))),
<a name="l00186"></a>00186       succ (max (FromZero, Sup (x))));
<a name="l00187"></a>00187   }
<a name="l00188"></a>00188   <span class="keywordflow">return</span> ov;
<a name="l00189"></a>00189 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="comment">//double MaxDiam (ivector&amp; x, int&amp; c)</span>
<a name="l00192"></a><a class="code" href="toolz_8hpp.shtml#ac7e3723f9b82103197575fd3be3db667">00192</a> <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a> (ivector x, <span class="keywordtype">int</span>&amp; c)
<a name="l00193"></a>00193 {
<a name="l00194"></a>00194   <span class="keywordtype">int</span> i, a=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x), z=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x);
<a name="l00195"></a>00195   real Diam = diam(x[a]); c = a;
<a name="l00196"></a>00196   <span class="keywordflow">for</span> (i=a+1;i&lt;=z;i++)
<a name="l00197"></a>00197     <span class="keywordflow">if</span> (diam(x[i])&gt;Diam) { Diam = diam(x[i]); c = i; }
<a name="l00198"></a>00198     <span class="keywordflow">return</span> _double(Diam);
<a name="l00199"></a>00199 }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="comment">// the intersection interval r of interval a and interval b.</span>
<a name="l00202"></a>00202 <span class="comment">// return 0 if the intersection is empty, else return 1</span>
<a name="l00203"></a><a class="code" href="toolz_8hpp.shtml#a4b95fc9f126441c04e5b773e5fe56533">00203</a> <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a> (interval &amp; r, <span class="keyword">const</span> interval &amp; a, <span class="keyword">const</span> interval &amp; b)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205   <span class="comment">// disjoint?</span>
<a name="l00206"></a>00206   <span class="keywordflow">if</span>( (Inf(a) &gt; Sup(b)) || (Inf(b) &gt; Sup(a)) )
<a name="l00207"></a>00207     <span class="keywordflow">return</span> 0;
<a name="l00208"></a>00208   <span class="keywordflow">else</span> {r = a &amp; b; <span class="keywordflow">return</span> 1;}
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="comment">// the intersection box r of box a and box b.</span>
<a name="l00212"></a>00212 <span class="comment">// return 0 if the intersection is empty, else return dimension of r.</span>
<a name="l00213"></a><a class="code" href="toolz_8hpp.shtml#a0c91bae4b16d5270e24a7ba9dc3b5dfa">00213</a> <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a> (ivector &amp; r, <span class="keyword">const</span> ivector &amp; a, <span class="keyword">const</span> ivector &amp; b)
<a name="l00214"></a>00214 {
<a name="l00215"></a>00215   <span class="keywordtype">int</span> i, il = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(a), iu = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(a);
<a name="l00216"></a>00216   <span class="keywordtype">int</span> intersect = iu-il+2;
<a name="l00217"></a>00217   <span class="keywordflow">if</span>( (iu != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(b)) || (il != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(b)) )
<a name="l00218"></a>00218   {
<a name="l00219"></a>00219     cerr &lt;&lt; <span class="stringliteral">&quot;\n unequal index sets in Intersection\n&quot;</span>;
<a name="l00220"></a>00220     exit(0);
<a name="l00221"></a>00221   }
<a name="l00222"></a>00222   Resize(r, il, iu);
<a name="l00223"></a>00223   <span class="keywordflow">for</span> (i = il; i &lt;= iu; i++)
<a name="l00224"></a>00224   {
<a name="l00225"></a>00225     <span class="comment">// disjoint?</span>
<a name="l00226"></a>00226     <span class="keywordflow">if</span>( (Inf(a[i]) &gt; Sup(b[i])) || (Inf(b[i]) &gt; Sup(a[i])) )
<a name="l00227"></a>00227       <span class="keywordflow">return</span> 0;
<a name="l00228"></a>00228     <span class="keywordflow">else</span> {r[i] = a[i] &amp; b[i]; intersect--;}
<a name="l00229"></a>00229   }
<a name="l00230"></a>00230   <span class="keywordflow">return</span> intersect;
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">// Bisect box x normal to direction &quot;split&quot; and return the lower half.</span>
<a name="l00234"></a><a class="code" href="toolz_8hpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f">00234</a> ivector <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a> (<span class="keyword">const</span> ivector &amp; x, <span class="keywordtype">int</span> split)
<a name="l00235"></a>00235 {
<a name="l00236"></a>00236   ivector t = x;
<a name="l00237"></a>00237   SetSup( t[split], mid(x[split]) );
<a name="l00238"></a>00238   <span class="keywordflow">return</span> t;
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="comment">// Bisect box x normal to direction &quot;split&quot; and return the upper half.</span>
<a name="l00242"></a><a class="code" href="toolz_8hpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3">00242</a> ivector <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a> (<span class="keyword">const</span> ivector &amp; x, <span class="keywordtype">int</span> split)
<a name="l00243"></a>00243 {
<a name="l00244"></a>00244   ivector t = x;
<a name="l00245"></a>00245   SetInf( t[split], mid(x[split]) );
<a name="l00246"></a>00246   <span class="keywordflow">return</span> t;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="comment">// Bisect box x normal to direction &quot;split&quot; and set y to the lower half.</span>
<a name="l00250"></a><a class="code" href="toolz_8hpp.shtml#a849f3db59fb73147d7b220db2456e088">00250</a> <span class="keywordtype">void</span> <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a> (<span class="keyword">const</span> ivector &amp; x, ivector &amp; y, <span class="keywordtype">int</span> split)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252   Resize(y, <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x), <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x));
<a name="l00253"></a>00253   y = x;
<a name="l00254"></a>00254   SetSup( y[split], mid(x[split]) );
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="comment">// Bisect box x normal to direction &quot;split&quot; and set box y to the upper half.</span>
<a name="l00258"></a><a class="code" href="toolz_8hpp.shtml#a941924d49b132adc638d12d7eb7cda92">00258</a> <span class="keywordtype">void</span> <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a> (<span class="keyword">const</span> ivector &amp; x, ivector &amp; y, <span class="keywordtype">int</span> split)
<a name="l00259"></a>00259 {
<a name="l00260"></a>00260   Resize(y, <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x), <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x));
<a name="l00261"></a>00261   y = x;
<a name="l00262"></a>00262   SetInf( y[split], mid(x[split]) );
<a name="l00263"></a>00263 }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 <span class="comment">// to find the volume of an interval vector x</span>
<a name="l00266"></a><a class="code" href="toolz_8hpp.shtml#ae06411dd54912b039475819875c13ecb">00266</a> <span class="keywordtype">double</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<span class="keyword">const</span> ivector &amp;x)
<a name="l00267"></a>00267 {
<a name="l00268"></a>00268   <span class="keywordtype">int</span> low_index = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x);
<a name="l00269"></a>00269   <span class="keywordtype">int</span> upp_index = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   real accVol = 1.0;
<a name="l00272"></a>00272 
<a name="l00273"></a>00273   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= low_index; i&lt;=upp_index; i++)
<a name="l00274"></a>00274   {
<a name="l00275"></a>00275 
<a name="l00276"></a>00276     accVol *= diam(x[i]);
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   }                 <span class="comment">//</span>
<a name="l00279"></a>00279 
<a name="l00280"></a>00280   <span class="keywordflow">return</span> _double(accVol);
<a name="l00281"></a>00281 }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="comment">//src_trunk_0701</span>
<a name="l00284"></a>00284 <span class="comment">// to find the volume of an interval vector x</span>
<a name="l00285"></a><a class="code" href="toolz_8hpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f">00285</a> real <a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(<span class="keyword">const</span> ivector &amp;x)
<a name="l00286"></a>00286 {
<a name="l00287"></a>00287   <span class="keywordtype">int</span> low_index = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x);
<a name="l00288"></a>00288   <span class="keywordtype">int</span> upp_index = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x);
<a name="l00289"></a>00289   
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (upp_index &lt; low_index) <span class="keywordflow">throw</span> std::logic_error(<span class="stringliteral">&quot;Ub &lt; Lb&quot;</span>);
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   real accVol = 1.0;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= low_index; i&lt;=upp_index; ++i)
<a name="l00295"></a>00295   {
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     accVol *= diam(x[i]);
<a name="l00298"></a>00298 
<a name="l00299"></a>00299   }                 <span class="comment">//</span>
<a name="l00300"></a>00300 
<a name="l00301"></a>00301   <span class="keywordflow">return</span> accVol;
<a name="l00302"></a>00302 }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="comment">//Function to return log of Catalan number of k</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="comment">//In a histogram, k is the number of leaves-1, ie the number of splits.</span>
<a name="l00307"></a>00307 <span class="comment">//Catalan(k) = 1/(k+1)Binomial(2k choose k) = (2k)!/((k+1)!k!)</span>
<a name="l00308"></a>00308 <span class="comment">//ln(Catalan(k)) is     0 for k=0, k=1,</span>
<a name="l00309"></a>00309 <span class="comment">//                      sum(from i=1 to i=k-2)of(ln(2k-i) - ln(k-i)), k&gt;1</span>
<a name="l00310"></a><a class="code" href="toolz_8hpp.shtml#a1dc9bf6a99daaa6cf7349f16c1e558f5">00310</a> <span class="keywordtype">double</span> <a class="code" href="histpenalty_8hpp.shtml#a1dc9bf6a99daaa6cf7349f16c1e558f5">lCk</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> k)
<a name="l00311"></a>00311 {
<a name="l00312"></a>00312     <span class="keywordtype">double</span> retValue = 0.0;
<a name="l00313"></a>00313     <span class="keywordflow">if</span> (k &gt; 1) {
<a name="l00314"></a>00314         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; k-1; i++) {
<a name="l00315"></a>00315             retValue += (log(2*k-i) - log(k-i));
<a name="l00316"></a>00316         }
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318     <span class="keywordflow">return</span> retValue; <span class="comment">// return 0 for k=0, k=1</span>
<a name="l00319"></a>00319 }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 
<a name="l00322"></a><a class="code" href="toolz_8hpp.shtml#a7f3b31a0850236fe59b892825f09fd2d">00322</a> std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::rvector&amp; rv)
<a name="l00323"></a>00323 {
<a name="l00324"></a>00324   std::ostringstream oss;
<a name="l00325"></a>00325   <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(oss, rv);
<a name="l00326"></a>00326   <span class="keywordflow">return</span> oss.str();
<a name="l00327"></a>00327 }
<a name="l00328"></a>00328 
<a name="l00329"></a><a class="code" href="toolz_8hpp.shtml#a9e40bf6c2156aaa804a8bb8939b86742">00329</a> std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::ivector&amp; iv)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331   std::ostringstream oss;
<a name="l00332"></a>00332   <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(oss, iv);
<a name="l00333"></a>00333   <span class="keywordflow">return</span> oss.str();
<a name="l00334"></a>00334 }
<a name="l00335"></a>00335 
<a name="l00336"></a><a class="code" href="toolz_8hpp.shtml#a9d4d9a3d991d98a1b2d72aaed3c33704">00336</a> std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::interval&amp; ival)
<a name="l00337"></a>00337 {
<a name="l00338"></a>00338   std::ostringstream oss;
<a name="l00339"></a>00339   <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(oss, ival);
<a name="l00340"></a>00340   <span class="keywordflow">return</span> oss.str();
<a name="l00341"></a>00341 }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment">//src_trunk_0701</span>
<a name="l00344"></a>00344 
<a name="l00345"></a>00345 <span class="comment">// Output formatted with brackets etc, suitable for human reading of rvectors</span>
<a name="l00346"></a><a class="code" href="toolz_8hpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6">00346</a> std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::rvector&amp; rv)
<a name="l00347"></a>00347 {
<a name="l00348"></a>00348   out &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;
<a name="l00349"></a>00349   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rv); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rv); ++i)
<a name="l00350"></a>00350   {
<a name="l00351"></a>00351   out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rv[i];
<a name="l00352"></a>00352   }
<a name="l00353"></a>00353   out &lt;&lt; <span class="stringliteral">&quot; )&quot;</span>; 
<a name="l00354"></a>00354 
<a name="l00355"></a>00355   <span class="keywordflow">return</span> out;
<a name="l00356"></a>00356 }
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 <span class="comment">// Output formatted with brackets etc, suitable for human reading of ivectors</span>
<a name="l00359"></a><a class="code" href="toolz_8hpp.shtml#aea221cbc39241cd4d2a09bf9a93dd62c">00359</a> std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::ivector&amp; iv)
<a name="l00360"></a>00360 {
<a name="l00361"></a>00361   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(iv); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(iv); ++i)
<a name="l00362"></a>00362   {
<a name="l00363"></a>00363   out &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00364"></a>00364   <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(out, iv[i]);
<a name="l00365"></a>00365   }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="keywordflow">return</span> out;
<a name="l00369"></a>00369 }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 <span class="comment">// Output formatted with brackets etc, suitable for human reading of intervals</span>
<a name="l00372"></a><a class="code" href="toolz_8hpp.shtml#a456949a2a9837eb7179b90899cbfa51c">00372</a> std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::interval&amp; ival)
<a name="l00373"></a>00373 {
<a name="l00374"></a>00374   out &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(ival) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; Sup(ival) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span>;
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   <span class="keywordflow">return</span> out;
<a name="l00377"></a>00377 }
<a name="l00378"></a>00378 
<a name="l00379"></a>00379 <span class="comment">// Plain output (alternative to silly cxsc format),tab delimited, suitable for output to txt file</span>
<a name="l00380"></a><a class="code" href="toolz_8cpp.shtml#aa9b4054253be604eff5693db56eef957">00380</a> std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa9b4054253be604eff5693db56eef957">plainPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::rvector&amp; rv)
<a name="l00381"></a>00381 {
<a name="l00382"></a>00382   <span class="keywordtype">int</span> i = 0;
<a name="l00383"></a>00383   <span class="keywordflow">for</span>(i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rv); i&lt;<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rv); ++i)
<a name="l00384"></a>00384   {
<a name="l00385"></a>00385     out &lt;&lt; rv[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00386"></a>00386   }
<a name="l00387"></a>00387   out &lt;&lt; rv[i];  <span class="comment">// final one with no tab at the end </span>
<a name="l00388"></a>00388 
<a name="l00389"></a>00389   <span class="keywordflow">return</span> out;
<a name="l00390"></a>00390 }<span class="comment">//--src_trunk_0701</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="toolz_8cpp.shtml">toolz.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
