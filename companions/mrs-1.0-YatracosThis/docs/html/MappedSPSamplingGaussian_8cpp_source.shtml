<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSamplingGaussian.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPSamplingGaussian_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPSamplingGaussian.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPSamplingGaussian_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00005"></a>00005 <span class="comment">/*</span>
<a name="l00006"></a>00006 <span class="comment">#include &quot;RosenFobj2D.hpp&quot;</span>
<a name="l00007"></a>00007 <span class="comment">#include &quot;RosenFobj10D.hpp&quot;</span>
<a name="l00008"></a>00008 <span class="comment">#include &quot;GaussianFobj1D.hpp&quot;</span>
<a name="l00009"></a>00009 <span class="comment">*/</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj2D.hpp</a>&quot;</span>
<a name="l00011"></a>00011 <span class="comment">/*</span>
<a name="l00012"></a>00012 <span class="comment">#include &quot;GaussianFobj9D.hpp&quot;</span>
<a name="l00013"></a>00013 <span class="comment">#include &quot;GaussianFobj10D.hpp&quot;</span>
<a name="l00014"></a>00014 <span class="comment">#include &quot;GaussianFobj100D.hpp&quot;</span>
<a name="l00015"></a>00015 <span class="comment">//#include &quot;GaussianFobj1000D.hpp&quot;</span>
<a name="l00016"></a>00016 <span class="comment">*/</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// tools to help </span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span> <span class="comment">// to use gsl_ran_discrete_preproc</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;valarray&gt;</span> 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//draw unif box</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="auto__tools_8hpp.shtml" title="Tools for automcmc.">auto_tools.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00044"></a>00044 <span class="comment">//#define MYDEBUG_CALCS // extra console output for calculations</span>
<a name="l00045"></a>00045 <span class="comment">//#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>cxsc;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>subpavings;
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>std;
<a name="l00056"></a>00056 
<a name="l00059"></a>00059 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00060"></a>00060 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062   <span class="keyword">public</span>:
<a name="l00063"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00063</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00064"></a>00064       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00065"></a>00065       <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
<a name="l00066"></a>00066     }
<a name="l00067"></a>00067 };
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">//==========Functions for MappedSPnode===================================//</span>
<a name="l00072"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00072</a> <span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074    <span class="comment">// To generate a file output</span>
<a name="l00075"></a>00075    ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00076"></a>00076    <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00077"></a>00077       node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00078"></a>00078       std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
<a name="l00079"></a>00079                &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00080"></a>00080          os.close();
<a name="l00081"></a>00081       }
<a name="l00082"></a>00082    <span class="keywordflow">else</span> {
<a name="l00083"></a>00083       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00084"></a>00084          &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00085"></a>00085    }
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00090"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">00090</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;double&gt;&amp; WeightsVector,
<a name="l00091"></a>00091               vector&lt;interval&gt;&amp; WeightsInt)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00094"></a>00094       <span class="comment">//get the weights</span>
<a name="l00095"></a>00095      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00096"></a>00096      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00097"></a>00097      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, WeightsInt, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00098"></a>00098   }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="comment">//recurse on the children</span>
<a name="l00101"></a>00101   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00102"></a>00102     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector, WeightsInt);
<a name="l00103"></a>00103   }
<a name="l00104"></a>00104    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00105"></a>00105     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector, WeightsInt);
<a name="l00106"></a>00106    }
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00111"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">00111</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;ivector&gt;&amp; BoxVector,
<a name="l00112"></a>00112            vector&lt;real&gt;&amp; HeightsVector)
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00115"></a>00115      <span class="comment">//push back this box into the BoxVector</span>
<a name="l00116"></a>00116      BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00117"></a>00117      
<a name="l00118"></a>00118      <span class="comment">//get the heights</span>
<a name="l00119"></a>00119      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00120"></a>00120      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00121"></a>00121      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
<a name="l00122"></a>00122   }
<a name="l00123"></a>00123   <span class="comment">//recurse on the children</span>
<a name="l00124"></a>00124   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00125"></a>00125     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
<a name="l00126"></a>00126   }
<a name="l00127"></a>00127    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00128"></a>00128     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
<a name="l00129"></a>00129    }
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00134"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">00134</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, <span class="keywordtype">double</span> totalArea, 
<a name="l00135"></a>00135           vector&lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> &gt;&amp; heightNorm)
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
<a name="l00138"></a>00138      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00139"></a>00139      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00140"></a>00140      real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
<a name="l00141"></a>00141      
<a name="l00142"></a>00142      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
<a name="l00143"></a>00143     heightNorm.push_back(height);
<a name="l00144"></a>00144   }
<a name="l00145"></a>00145   <span class="comment">//recurse on the children</span>
<a name="l00146"></a>00146   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00147"></a>00147     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
<a name="l00148"></a>00148   }
<a name="l00149"></a>00149    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00150"></a>00150     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
<a name="l00151"></a>00151    }
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 <span class="comment">//=======================end of functions====================================//</span>
<a name="l00154"></a>00154 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, <span class="keywordtype">size_t</span> numHist,
<a name="l00155"></a>00155         <span class="keywordtype">size_t</span> maxLeaves, 
<a name="l00156"></a>00156         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, 
<a name="l00157"></a>00157         <span class="keywordtype">size_t</span> minPoints, <span class="keywordtype">int</span> dataSeed, <span class="keywordtype">double</span> maxLeaf, <span class="keywordtype">size_t</span> nL);
<a name="l00158"></a>00158 
<a name="l00161"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00161</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163   <span class="comment">//========user-defined parameters====================//</span>
<a name="l00164"></a>00164   <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number of datapoints to generate for each histogram</span>
<a name="l00165"></a>00165   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00166"></a>00166   <span class="keywordtype">size_t</span> numHist = atoi(argv[3]); <span class="comment">// number of repetitions for simulation purposes</span>
<a name="l00167"></a>00167   
<a name="l00168"></a>00168   <span class="comment">//  for generating samples from MappedSPnode </span>
<a name="l00169"></a>00169   <span class="comment">// ensure max leaves is &lt; 1E6 or something reasonable</span>
<a name="l00170"></a>00170   <span class="keywordtype">size_t</span> maxLeaves = atoi(argv[4]);
<a name="l00171"></a>00171   
<a name="l00172"></a>00172   <span class="comment">// for the MCMC run</span>
<a name="l00173"></a>00173   <span class="keywordtype">int</span> maxLoops = atoi(argv[5]); <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00174"></a>00174   <span class="keywordtype">int</span> samplesNeeded = atoi(argv[6]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00175"></a>00175   <span class="keywordtype">int</span> thinout = atoi(argv[7]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00176"></a>00176   
<a name="l00177"></a>00177   real tolerance = atof(argv[8]);
<a name="l00178"></a>00178   cxsc::real tol(tolerance); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00179"></a>00179   
<a name="l00180"></a>00180   <span class="keywordtype">size_t</span> minPoints = atoi(argv[9]); <span class="comment">// for MCMC rsplittable nodes</span>
<a name="l00181"></a>00181    
<a name="l00182"></a>00182   <span class="keywordtype">int</span> dataSeed = atoi(argv[10]);
<a name="l00183"></a>00183   
<a name="l00184"></a>00184   <span class="keywordtype">double</span> maxLeaf = atoi(argv[11]); <span class="comment">// maximum leaves in hist2</span>
<a name="l00185"></a>00185   <span class="keywordtype">size_t</span> nL = atoi(argv[12]); <span class="comment">// maximum leaves in hist 1</span>
<a name="l00186"></a>00186   
<a name="l00187"></a>00187   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00189"></a>00189     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00190"></a>00190   }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192   <span class="comment">//=====end of user-defined parameters==========================//</span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <span class="keywordflow">try</span> {
<a name="l00195"></a>00195     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(n, d, numHist, maxLeaves, 
<a name="l00196"></a>00196         maxLoops, samplesNeeded, thinout, tol, minPoints, dataSeed, maxLeaf, nL);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198     std::string samplesCollAverageFilename = <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00199"></a>00199     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
<a name="l00200"></a>00200   
<a name="l00201"></a>00201     avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
<a name="l00202"></a>00202     
<a name="l00203"></a>00203     <span class="keywordflow">return</span> 0;
<a name="l00204"></a>00204   }
<a name="l00205"></a>00205   <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
<a name="l00206"></a>00206     cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
<a name="l00207"></a>00207       &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209 } <span class="comment">// end of main()</span>
<a name="l00210"></a>00210 
<a name="l00213"></a><a class="code" href="MappedSPSamplingGaussian_8cpp.shtml#a51baf26c1e8accaefbc23f35b8529496">00213</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, <span class="keywordtype">size_t</span> numHist,
<a name="l00214"></a>00214         <span class="keywordtype">size_t</span> maxLeaves, 
<a name="l00215"></a>00215         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, 
<a name="l00216"></a>00216         <span class="keywordtype">size_t</span> minPoints, <span class="keywordtype">int</span> dataSeed, <span class="keywordtype">double</span> maxLeaf, <span class="keywordtype">size_t</span> nL)
<a name="l00217"></a>00217 {
<a name="l00218"></a>00218   <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00219"></a>00219   <span class="keywordtype">int</span> prec = 15;
<a name="l00220"></a>00220   cout &lt;&lt; cxsc::SaveOpt;
<a name="l00221"></a>00221   cout &lt;&lt; cxsc::Variable;
<a name="l00222"></a>00222   cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00223"></a>00223 
<a name="l00224"></a>00224   <span class="comment">// string formatting</span>
<a name="l00225"></a>00225   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00226"></a>00226    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00227"></a>00227    oss.precision(10);
<a name="l00228"></a>00228 
<a name="l00229"></a>00229   <span class="comment">// set up a random number generator to draw from weighted boxes</span>
<a name="l00230"></a>00230   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00231"></a>00231   gsl_rng * r;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00234"></a>00234   gsl_rng_env_setup();
<a name="l00235"></a>00235   T = gsl_rng_default;
<a name="l00236"></a>00236   r = gsl_rng_alloc (T);
<a name="l00237"></a>00237   <span class="comment">//===========end of setting up preliminaries=======================//</span>
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   
<a name="l00240"></a>00240   <span class="comment">//=======generate actual gaussian data=====================//</span>
<a name="l00241"></a>00241     
<a name="l00242"></a>00242     cout &lt;&lt; <span class="stringliteral">&quot;Generating actual Gaussian data: &quot;</span> &lt;&lt; endl;
<a name="l00243"></a>00243     <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00244"></a>00244     gsl_rng * r1;
<a name="l00245"></a>00245     gsl_rng_env_setup();
<a name="l00246"></a>00246     T1 = gsl_rng_default;
<a name="l00247"></a>00247     r1 = gsl_rng_alloc (T1);
<a name="l00248"></a>00248     gsl_rng_set(r1, dataSeed);
<a name="l00249"></a>00249     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> actualData;
<a name="l00250"></a>00250     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00251"></a>00251       rvector thisrv(d);
<a name="l00252"></a>00252       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00253"></a>00253         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, 1.0); <span class="comment">// generate a normal r.v.</span>
<a name="l00254"></a>00254         thisrv[j] = _real(z);
<a name="l00255"></a>00255       }
<a name="l00256"></a>00256       <span class="comment">//cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00257"></a>00257       actualData.push_back(thisrv);
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259     <span class="comment">//end of actual data runs</span>
<a name="l00260"></a>00260     
<a name="l00261"></a>00261     ivector pavingBox;
<a name="l00262"></a>00262     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* tempHist = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00263"></a>00263     tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(actualData);
<a name="l00264"></a>00264     pavingBox = tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00265"></a>00265     <span class="keyword">delete</span> tempHist;
<a name="l00266"></a>00266     
<a name="l00267"></a>00267   <span class="comment">//====Using MRP procedures to approximate the densities============// </span>
<a name="l00268"></a>00268   <span class="comment">// Function object</span>
<a name="l00269"></a>00269   <span class="comment">//GaussianFobj1D realF;</span>
<a name="l00270"></a>00270   <a class="code" href="classGaussianFobj2D.shtml">GaussianFobj2D</a> realF;
<a name="l00271"></a>00271   <span class="comment">//GaussianFobj9D realF;</span>
<a name="l00272"></a>00272   <span class="comment">//  Gaussian10D realF;</span>
<a name="l00273"></a>00273   <span class="comment">//RosenFobj2D realF;</span>
<a name="l00274"></a>00274   <span class="comment">//  RosenFobj10D realF;</span>
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="comment">// Make a MappedSPnode object</span>
<a name="l00277"></a>00277   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); 
<a name="l00278"></a>00278    <span class="comment">// Get the MRP approximated function using a priority queue</span>
<a name="l00279"></a>00279   <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, 0);
<a name="l00280"></a>00280   vector&lt;real&gt; epsVec; 
<a name="l00281"></a>00281   nodeEst.priorityAccept(expander, maxLeaves, epsVec);
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="comment">/*</span>
<a name="l00284"></a>00284 <span class="comment">  string avgL1FileName = &quot;Eps&quot;;</span>
<a name="l00285"></a>00285 <span class="comment">  avgL1FileName += &quot;.txt&quot;;</span>
<a name="l00286"></a>00286 <span class="comment">  oss.open(avgL1FileName.c_str());</span>
<a name="l00287"></a>00287 <span class="comment">    for (size_t i = 0; i &lt; epsVec.size(); i++) { </span>
<a name="l00288"></a>00288 <span class="comment">  //    cout &lt;&lt; epsVec[i] &lt;&lt; endl;</span>
<a name="l00289"></a>00289 <span class="comment">      oss &lt;&lt; epsVec[i] &lt;&lt; &quot;\n&quot;;</span>
<a name="l00290"></a>00290 <span class="comment">    }</span>
<a name="l00291"></a>00291 <span class="comment">    oss &lt;&lt; flush;</span>
<a name="l00292"></a>00292 <span class="comment">    oss.close();</span>
<a name="l00293"></a>00293 <span class="comment">  */</span>
<a name="l00294"></a>00294 
<a name="l00295"></a>00295   cout &lt;&lt; <span class="stringliteral">&quot;Estimate function has &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00296"></a>00296   
<a name="l00297"></a>00297   <span class="comment">//=======================================================================//</span>
<a name="l00298"></a>00298 
<a name="l00299"></a>00299   <span class="comment">//==================Generate data from the MRP approx function============//</span>
<a name="l00300"></a>00300   <span class="comment">// Get the weights of the boxes</span>
<a name="l00301"></a>00301    cout &lt;&lt; <span class="stringliteral">&quot;Getting boxes and weights:&quot;</span> &lt;&lt; endl;
<a name="l00302"></a>00302     vector&lt;ivector&gt; BoxVector;
<a name="l00303"></a>00303    vector&lt;real&gt; HeightsVector;
<a name="l00304"></a>00304    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodePtr;
<a name="l00305"></a>00305    nodePtr = &amp;nodeEst;
<a name="l00306"></a>00306    vector&lt;double&gt;* WeightsVectorPtr;
<a name="l00307"></a>00307    WeightsVectorPtr = <span class="keyword">new</span> vector&lt;double&gt;;
<a name="l00308"></a>00308    vector&lt;interval&gt;* WeightsIntPtr;
<a name="l00309"></a>00309    WeightsIntPtr = <span class="keyword">new</span> vector&lt;interval&gt;;
<a name="l00310"></a>00310    
<a name="l00311"></a>00311    <span class="comment">// iterate through the leaf nodes to get boxes and heights and weights</span>
<a name="l00312"></a>00312    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(nodePtr, BoxVector, HeightsVector);
<a name="l00313"></a>00313    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(nodePtr, *WeightsVectorPtr, *WeightsIntPtr);
<a name="l00314"></a>00314 
<a name="l00315"></a>00315    <span class="comment">// now put elements of WeightsVector into an array of doubles</span>
<a name="l00316"></a>00316    <span class="keywordtype">size_t</span> sizeWeight =(*WeightsVectorPtr).size();
<a name="l00317"></a>00317    <span class="comment">//check that number of boxes &lt; 10^6</span>
<a name="l00318"></a>00318    <span class="keywordflow">if</span> (sizeWeight &gt; <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10,7)) { 
<a name="l00319"></a>00319       cerr &lt;&lt; <span class="stringliteral">&quot;Too many boxes (&quot;</span> &lt;&lt; sizeWeight &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; endl;
<a name="l00320"></a>00320       exit(1);
<a name="l00321"></a>00321    }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323    <span class="comment">// normalize using heights</span>
<a name="l00324"></a>00324    interval areaInt = interval(0);
<a name="l00325"></a>00325    <span class="comment">// normalize the heights so that the function integrates to 1</span>
<a name="l00326"></a>00326    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00327"></a>00327     areaInt = areaInt + (*WeightsIntPtr)[i];
<a name="l00328"></a>00328     <span class="comment">//cout &lt;&lt; (*WeightsVectorPtr)[i] &lt;&lt; &quot;\t&quot; &lt;&lt; (*WeightsIntPtr)[i] &lt;&lt; endl;</span>
<a name="l00329"></a>00329    }
<a name="l00330"></a>00330    cout &lt;&lt; <span class="stringliteral">&quot;Total area: &quot;</span> &lt;&lt; mid(areaInt) &lt;&lt; endl; 
<a name="l00331"></a>00331    
<a name="l00332"></a>00332    <span class="keywordtype">double</span> totalArea = _double(mid(areaInt));
<a name="l00333"></a>00333    
<a name="l00334"></a>00334    <span class="comment">// very important - normalize the heights in nodeEst</span>
<a name="l00335"></a>00335    vector&lt; RangeCollectionClass&lt;real&gt; &gt;* heightNorm = <span class="keyword">new</span> vector&lt; RangeCollectionClass&lt;real&gt; &gt;;
<a name="l00336"></a>00336    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(nodePtr, totalArea, *heightNorm);
<a name="l00337"></a>00337    nodeEst.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(*heightNorm, 0);
<a name="l00338"></a>00338    <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunctionAfterNormalized.txt&quot;</span>;
<a name="l00339"></a>00339    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeEst);
<a name="l00340"></a>00340    
<a name="l00341"></a>00341    <span class="comment">//need to check that the weights equal to 1</span>
<a name="l00342"></a>00342    <span class="keywordtype">double</span> densityCheck = 0.0;
<a name="l00343"></a>00343     <span class="comment">//convert vector to array</span>
<a name="l00344"></a>00344    <span class="keywordtype">double</span> WeightsArray[sizeWeight];
<a name="l00345"></a>00345    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00346"></a>00346       WeightsArray[i] = (*WeightsVectorPtr)[i]/totalArea;
<a name="l00347"></a>00347       densityCheck += (*WeightsVectorPtr)[i]/totalArea;
<a name="l00348"></a>00348    }
<a name="l00349"></a>00349    
<a name="l00350"></a>00350   cout &lt;&lt; <span class="stringliteral">&quot;Total area after normalizing: &quot;</span> &lt;&lt; densityCheck &lt;&lt; endl;
<a name="l00351"></a>00351 
<a name="l00352"></a>00352   <span class="comment">/*</span>
<a name="l00353"></a>00353 <span class="comment">  if ( (densityCheck != 1.0) ) {</span>
<a name="l00354"></a>00354 <span class="comment">    cout &lt;&lt; densityCheck &lt;&lt; endl; </span>
<a name="l00355"></a>00355 <span class="comment">    cerr &lt;&lt; &quot;Function does not integrate to 1. Need to normalize.&quot; &lt;&lt; endl; </span>
<a name="l00356"></a>00356 <span class="comment">    exit(0); </span>
<a name="l00357"></a>00357 <span class="comment">  }</span>
<a name="l00358"></a>00358 <span class="comment">  */</span>
<a name="l00359"></a>00359 
<a name="l00360"></a>00360    <span class="comment">//return to the system the memory that was pointed to by WeightsVectorPtr</span>
<a name="l00361"></a>00361   <span class="comment">//  and heightNorm</span>
<a name="l00362"></a>00362   <span class="keyword">delete</span> WeightsVectorPtr;
<a name="l00363"></a>00363   <span class="keyword">delete</span> heightNorm;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365     <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
<a name="l00366"></a>00366    <span class="comment">//i.e. the box indices with their weights</span>
<a name="l00367"></a>00367    gsl_ran_discrete_t* gslpdfstruct;
<a name="l00368"></a>00368    gslpdfstruct = gsl_ran_discrete_preproc(sizeWeight, WeightsArray);
<a name="l00369"></a>00369    <span class="comment">//===================end of getting box weights=======================//</span>
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   <span class="comment">//======Start of MCMC routine beginning with data generation============//</span>
<a name="l00372"></a>00372   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; numHist; h++) {
<a name="l00373"></a>00373     ostringstream stmH;
<a name="l00374"></a>00374     stmH &lt;&lt; h;
<a name="l00375"></a>00375     cout &lt;&lt; <span class="stringliteral">&quot;=========running simulation &quot;</span> &lt;&lt; h &lt;&lt; <span class="stringliteral">&quot;===============&quot;</span> &lt;&lt; endl;
<a name="l00376"></a>00376     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesAvg = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; <span class="comment">// our return object, if all goes well</span>
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     cout &lt;&lt; h &lt;&lt; endl;
<a name="l00379"></a>00379     gsl_rng_set(r, h);
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 
<a name="l00382"></a>00382     <span class="comment">//-------------generate data--------------------------------------//</span>
<a name="l00383"></a>00383     <span class="comment">//now sample n data points from boxes given by the proposed indices</span>
<a name="l00384"></a>00384     cout &lt;&lt; <span class="stringliteral">&quot;Sample data points using weighted boxes:&quot;</span> &lt;&lt; endl;
<a name="l00385"></a>00385     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theData = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container for all the points generated</span>
<a name="l00386"></a>00386     <span class="comment">// make a simulated data set</span>
<a name="l00387"></a>00387     <span class="comment">// data sampled as weighted-uniform-mixtures</span>
<a name="l00388"></a>00388     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00389"></a>00389       rvector thisrv(d);
<a name="l00390"></a>00390       <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
<a name="l00391"></a>00391       <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
<a name="l00392"></a>00392       thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r, BoxVector[proposedIndex]);
<a name="l00393"></a>00393       <span class="comment">// put points generated into container</span>
<a name="l00394"></a>00394       theData-&gt;push_back(thisrv);
<a name="l00395"></a>00395     }  <span class="comment">// data  should be in theData</span>
<a name="l00396"></a>00396     
<a name="l00397"></a>00397     cout &lt;&lt; (*theData).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <span class="comment">/* optional</span>
<a name="l00400"></a>00400 <span class="comment">    // Output data</span>
<a name="l00401"></a>00401 <span class="comment">    string dataFileName = &quot;Data&quot;;</span>
<a name="l00402"></a>00402 <span class="comment">    dataFileName += stmH.str();</span>
<a name="l00403"></a>00403 <span class="comment">    dataFileName += &quot;.txt&quot;;</span>
<a name="l00404"></a>00404 <span class="comment">    oss.open(dataFileName.c_str());</span>
<a name="l00405"></a>00405 <span class="comment">    for (size_t i = 0; i &lt; n; i++) { </span>
<a name="l00406"></a>00406 <span class="comment">      for (size_t j = 1; j &lt;= d; j++) {</span>
<a name="l00407"></a>00407 <span class="comment">          //cout &lt;&lt; (*theData)[i][j] &lt;&lt; endl;</span>
<a name="l00408"></a>00408 <span class="comment">        oss &lt;&lt; (*theData)[i][j] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00409"></a>00409 <span class="comment">      }</span>
<a name="l00410"></a>00410 <span class="comment">      oss &lt;&lt; &quot;\n&quot;;</span>
<a name="l00411"></a>00411 <span class="comment">    }</span>
<a name="l00412"></a>00412 <span class="comment">    oss &lt;&lt; flush;</span>
<a name="l00413"></a>00413 <span class="comment">    oss.close();</span>
<a name="l00414"></a>00414 <span class="comment">    */</span>
<a name="l00415"></a>00415     <span class="comment">//---------done generating data-------------------------------------//</span>
<a name="l00416"></a>00416 
<a name="l00417"></a>00417     <span class="comment">//start recording cpu time here</span>
<a name="l00418"></a>00418     clock_t start, end;
<a name="l00419"></a>00419       <span class="keywordtype">double</span> timing; 
<a name="l00420"></a>00420     cout &lt;&lt; <span class="stringliteral">&quot;Min points is &quot;</span> &lt;&lt; minPoints &lt;&lt; endl;
<a name="l00421"></a>00421 
<a name="l00422"></a>00422     <span class="comment">//================Gelman-Rubin method=========================//</span>
<a name="l00423"></a>00423      <span class="comment">// start by making the histograms that are the starting points for our chains</span>
<a name="l00424"></a>00424      <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00425"></a>00425      <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00426"></a>00426      <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00427"></a>00427   
<a name="l00428"></a>00428     <span class="comment">//------Starting histograms-------------------------------//</span>
<a name="l00429"></a>00429     cout &lt;&lt; <span class="stringliteral">&quot;Starting the chains &quot;</span> &lt;&lt; endl;
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="comment">//==================getting posterior-optimal histogram======================//</span>
<a name="l00433"></a>00433     <span class="comment">//histogram 1</span>
<a name="l00434"></a>00434     cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
<a name="l00435"></a>00435     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* HistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00436"></a>00436     <span class="comment">//AdaptiveHistogram* myHistFirst = new AdaptiveHistogram(pavingBox);</span>
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00439"></a>00439      <span class="keywordtype">bool</span> successfulInsertionFirst = HistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
<a name="l00440"></a>00440     <span class="comment">//bool successfulInsertionFirst = HistFirst-&gt;insertFromRVec(actualData);</span>
<a name="l00441"></a>00441 
<a name="l00442"></a>00442     <span class="comment">// PQ</span>
<a name="l00443"></a>00443     <span class="keywordtype">bool</span> successfulPQSplitFirst = <span class="keyword">false</span>;
<a name="l00444"></a>00444     <span class="keywordflow">if</span> (successfulInsertionFirst) {
<a name="l00445"></a>00445       <span class="comment">// set up function objects for a priority split</span>
<a name="l00446"></a>00446       <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00447"></a>00447       <span class="comment">// split until number of leaves is at most nL</span>
<a name="l00448"></a>00448       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critVal(nL);
<a name="l00449"></a>00449       <span class="comment">// or split until each leaf node has at least minVal points</span>
<a name="l00450"></a>00450       <span class="comment">//CritLargestCount_LTE critVal(minVal);</span>
<a name="l00451"></a>00451       <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00452"></a>00452       <span class="keywordtype">size_t</span> maxLeafNodes = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n,2); 
<a name="l00453"></a>00453 
<a name="l00454"></a>00454       <span class="comment">// do the priority split</span>
<a name="l00455"></a>00455       <span class="comment">//vector&lt;real&gt; Posterior;</span>
<a name="l00456"></a>00456       <span class="comment">//LogCatalanPrior logPrior;</span>
<a name="l00457"></a>00457       successfulPQSplitFirst = HistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00458"></a>00458       critVal, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); 
<a name="l00459"></a>00459       <span class="comment">//successfulPQSplitFirst = HistFirst-&gt;prioritySplitMCMC(compCount,</span>
<a name="l00460"></a>00460       <span class="comment">//critVal, NOLOG, minPQPoints, maxLeafNodes, Posterior, logPrior); </span>
<a name="l00461"></a>00461       <span class="comment">//delete HistFirst;</span>
<a name="l00462"></a>00462 
<a name="l00463"></a>00463 <span class="comment">/*      // now normalize the posteriors to get a discrete distribution</span>
<a name="l00464"></a>00464 <span class="comment">      vector&lt;real&gt;::iterator realIt;</span>
<a name="l00465"></a>00465 <span class="comment">      real totPos = 0;</span>
<a name="l00466"></a>00466 <span class="comment">      vector&lt;real&gt; NormPost;</span>
<a name="l00467"></a>00467 <span class="comment">      for (realIt = Posterior.begin(); realIt &lt; Posterior.end(); realIt++) {</span>
<a name="l00468"></a>00468 <span class="comment">        //cout &lt;&lt; *realIt &lt;&lt; endl;</span>
<a name="l00469"></a>00469 <span class="comment">        totPos += *realIt;</span>
<a name="l00470"></a>00470 <span class="comment">      }</span>
<a name="l00471"></a>00471 <span class="comment">      totPos = abs(totPos);</span>
<a name="l00472"></a>00472 <span class="comment">      //find where the posterior is the highest</span>
<a name="l00473"></a>00473 <span class="comment">      size_t maxPosition = 0;</span>
<a name="l00474"></a>00474 <span class="comment">      real maxPosterior = -1000000;</span>
<a name="l00475"></a>00475 <span class="comment">      real check = 0; // need to make sure i check that the sum = 1</span>
<a name="l00476"></a>00476 <span class="comment">      for (size_t i = 0; i &lt; Posterior.size(); i++) {</span>
<a name="l00477"></a>00477 <span class="comment">        NormPost.push_back(Posterior[i]/(totPos));</span>
<a name="l00478"></a>00478 <span class="comment">        if (Posterior[i]/totPos &gt; maxPosterior) {</span>
<a name="l00479"></a>00479 <span class="comment">          maxPosterior = Posterior[i]/(totPos);</span>
<a name="l00480"></a>00480 <span class="comment">          maxPosition = i;</span>
<a name="l00481"></a>00481 <span class="comment">        }</span>
<a name="l00482"></a>00482 <span class="comment">      }</span>
<a name="l00483"></a>00483 <span class="comment"></span>
<a name="l00484"></a>00484 <span class="comment">      // get the state with the highest posterior</span>
<a name="l00485"></a>00485 <span class="comment">      cout &lt;&lt; &quot;highest posterior at: &quot; &lt;&lt; maxPosition &lt;&lt; endl;</span>
<a name="l00486"></a>00486 <span class="comment">      CritLeaves_GTE critValMax(maxPosition+1);</span>
<a name="l00487"></a>00487 <span class="comment">      </span>
<a name="l00488"></a>00488 <span class="comment">      // now get the posterior-optimal histogram</span>
<a name="l00489"></a>00489 <span class="comment">      successfulInsertionFirst = myHistFirst-&gt;insertFromRVec(actualData);</span>
<a name="l00490"></a>00490 <span class="comment">      //successfulInsertionFirst = myHistFirst-&gt;insertFromRVec(theData);</span>
<a name="l00491"></a>00491 <span class="comment">      successfulPQSplitFirst = myHistFirst-&gt;prioritySplitMCMC(compCount,</span>
<a name="l00492"></a>00492 <span class="comment">      critValMax, NOLOG, minPQPoints, maxLeafNodes, Posterior, logPrior); </span>
<a name="l00493"></a>00493 <span class="comment">*/</span>
<a name="l00494"></a>00494       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00495"></a>00495       (HistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLeaves(leaves);
<a name="l00496"></a>00496       cout &lt;&lt; <span class="stringliteral">&quot;number of leaves in myHistFirst: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; endl;
<a name="l00497"></a>00497       <span class="comment">//myHistFirst-&gt;outputToTxtTabs(&quot;Hist1.txt&quot;);</span>
<a name="l00498"></a>00498      }
<a name="l00499"></a>00499 
<a name="l00500"></a>00500     <span class="comment">//histogram 2</span>
<a name="l00501"></a>00501     cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
<a name="l00502"></a>00502     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* HistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00503"></a>00503     <span class="comment">//AdaptiveHistogram* myHistSecond = new AdaptiveHistogram(pavingBox);</span>
<a name="l00504"></a>00504 
<a name="l00505"></a>00505     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00506"></a>00506     <span class="keywordtype">bool</span> successfulInsertionSecond = HistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
<a name="l00507"></a>00507     <span class="comment">//bool successfulInsertionSecond = HistSecond-&gt;insertFromRVec(actualData);</span>
<a name="l00508"></a>00508 
<a name="l00509"></a>00509     <span class="comment">// PQ</span>
<a name="l00510"></a>00510     <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00511"></a>00511     <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00512"></a>00512       <span class="comment">// set up function objects for a priority split</span>
<a name="l00513"></a>00513       <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00514"></a>00514       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00515"></a>00515       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critVal(maxLeaf);
<a name="l00516"></a>00516       <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00517"></a>00517       <span class="keywordtype">size_t</span> maxLeafNodes = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n,2); 
<a name="l00518"></a>00518 
<a name="l00519"></a>00519       <span class="comment">// do the priority split</span>
<a name="l00520"></a>00520       <span class="comment">//vector&lt;real&gt; Posterior;</span>
<a name="l00521"></a>00521       <span class="comment">//LogCatalanPrior logPrior;</span>
<a name="l00522"></a>00522       <span class="comment">//successfulPQSplitFirst = HistSecond-&gt;prioritySplitMCMC(compVol,</span>
<a name="l00523"></a>00523       <span class="comment">//critVal, NOLOG, minPQPoints, maxLeafNodes, Posterior, logPrior); </span>
<a name="l00524"></a>00524       successfulPQSplitSecond = HistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00525"></a>00525       critVal, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); 
<a name="l00526"></a>00526       <span class="comment">//delete HistSecond;</span>
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="comment">/*      // now normalize the posteriors to get a discrete distribution</span>
<a name="l00529"></a>00529 <span class="comment">      vector&lt;real&gt;::iterator realIt;</span>
<a name="l00530"></a>00530 <span class="comment">      real totPos = 0;</span>
<a name="l00531"></a>00531 <span class="comment">      vector&lt;real&gt; NormPost;</span>
<a name="l00532"></a>00532 <span class="comment">      for (realIt = Posterior.begin(); realIt &lt; Posterior.end(); realIt++) {</span>
<a name="l00533"></a>00533 <span class="comment">        //cout &lt;&lt; *realIt &lt;&lt; endl;</span>
<a name="l00534"></a>00534 <span class="comment">        totPos += *realIt;</span>
<a name="l00535"></a>00535 <span class="comment">      }</span>
<a name="l00536"></a>00536 <span class="comment"></span>
<a name="l00537"></a>00537 <span class="comment">      totPos = abs(totPos);</span>
<a name="l00538"></a>00538 <span class="comment">      //find where the posterior is the highest</span>
<a name="l00539"></a>00539 <span class="comment">      size_t maxPosition = 0;</span>
<a name="l00540"></a>00540 <span class="comment">      real maxPosterior = -1000000;</span>
<a name="l00541"></a>00541 <span class="comment">      real check = 0; // need to make sure i check that the sum = 1</span>
<a name="l00542"></a>00542 <span class="comment">      for (size_t i = 0; i &lt; Posterior.size(); i++) {</span>
<a name="l00543"></a>00543 <span class="comment">        NormPost.push_back(Posterior[i]/(totPos));</span>
<a name="l00544"></a>00544 <span class="comment">        if (Posterior[i]/totPos &gt; maxPosterior) {</span>
<a name="l00545"></a>00545 <span class="comment">          maxPosterior = Posterior[i]/(totPos);</span>
<a name="l00546"></a>00546 <span class="comment">          maxPosition = i;</span>
<a name="l00547"></a>00547 <span class="comment">        }</span>
<a name="l00548"></a>00548 <span class="comment">      }</span>
<a name="l00549"></a>00549 <span class="comment"></span>
<a name="l00550"></a>00550 <span class="comment">      // get the state with the highest posterior</span>
<a name="l00551"></a>00551 <span class="comment">      cout &lt;&lt; &quot;highest posterior at: &quot; &lt;&lt; maxPosition &lt;&lt; endl;</span>
<a name="l00552"></a>00552 <span class="comment">      CritLeaves_GTE critValMax(maxPosition+1);</span>
<a name="l00553"></a>00553 <span class="comment">      </span>
<a name="l00554"></a>00554 <span class="comment">      // now get the posterior-optimal histogram</span>
<a name="l00555"></a>00555 <span class="comment">      successfulInsertionSecond = myHistSecond-&gt;insertFromRVec(actualData);</span>
<a name="l00556"></a>00556 <span class="comment">      //successfulInsertionFirst = myHistFirst-&gt;insertFromRVec(theData);</span>
<a name="l00557"></a>00557 <span class="comment">      successfulPQSplitSecond = myHistSecond-&gt;prioritySplitMCMC(compVol,</span>
<a name="l00558"></a>00558 <span class="comment">      critValMax, NOLOG, minPQPoints, maxLeafNodes, Posterior, logPrior); </span>
<a name="l00559"></a>00559 <span class="comment">*/</span>
<a name="l00560"></a>00560       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00561"></a>00561       (HistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLeaves(leaves);
<a name="l00562"></a>00562       cout &lt;&lt; <span class="stringliteral">&quot;number of leaves in myHistSecond: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; endl;
<a name="l00563"></a>00563       <span class="comment">//myHistSecond-&gt;outputToTxtTabs(&quot;Hist2.txt&quot;);</span>
<a name="l00564"></a>00564      }
<a name="l00565"></a>00565 <span class="comment">//===================end of getting posterior-optimal histogram==============//</span>
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 <span class="comment">/*</span>
<a name="l00569"></a>00569 <span class="comment">//====================sampled weighted states===============================//</span>
<a name="l00570"></a>00570 <span class="comment">    AdaptiveHistogram* HistFirst = new AdaptiveHistogram(pavingBox);</span>
<a name="l00571"></a>00571 <span class="comment">    AdaptiveHistogram* HistSecond = new AdaptiveHistogram(pavingBox);</span>
<a name="l00572"></a>00572 <span class="comment">    AdaptiveHistogram* myHistFirst = new AdaptiveHistogram(pavingBox);</span>
<a name="l00573"></a>00573 <span class="comment">    AdaptiveHistogram* myHistSecond = new AdaptiveHistogram(pavingBox);</span>
<a name="l00574"></a>00574 <span class="comment"></span>
<a name="l00575"></a>00575 <span class="comment">    // put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00576"></a>00576 <span class="comment">    // bool successfulInsertionFirst = HistFirst-&gt;insertFromRVec(*theData);</span>
<a name="l00577"></a>00577 <span class="comment">    bool successfulInsertionFirst = HistFirst-&gt;insertFromRVec(actualData);</span>
<a name="l00578"></a>00578 <span class="comment">    bool successfulPQSplitFirst = false;</span>
<a name="l00579"></a>00579 <span class="comment">    bool successfulInsertionSecond = HistSecond-&gt;insertFromRVec(actualData);</span>
<a name="l00580"></a>00580 <span class="comment">    // bool successfulInsertionSecond = HistSecond-&gt;insertFromRVec(*theData);</span>
<a name="l00581"></a>00581 <span class="comment">    bool successfulPQSplitSecond = false;</span>
<a name="l00582"></a>00582 <span class="comment"></span>
<a name="l00583"></a>00583 <span class="comment">    cout &lt;&lt; &quot;first PQ&quot; &lt;&lt; endl;</span>
<a name="l00584"></a>00584 <span class="comment">    // First PQ to get posterior</span>
<a name="l00585"></a>00585 <span class="comment">    if (successfulInsertionFirst) {</span>
<a name="l00586"></a>00586 <span class="comment">      // set up function objects for a priority split</span>
<a name="l00587"></a>00587 <span class="comment">      CompVolInv compVol;</span>
<a name="l00588"></a>00588 <span class="comment">      // split until number of leaves is at most minVal</span>
<a name="l00589"></a>00589 <span class="comment">      CritLeaves_GTE critVal(maxLeaf);</span>
<a name="l00590"></a>00590 <span class="comment">      size_t minPQPoints = 1; // minimum of one data point in each box</span>
<a name="l00591"></a>00591 <span class="comment">      size_t maxLeafNodes = pow(n,2); </span>
<a name="l00592"></a>00592 <span class="comment"></span>
<a name="l00593"></a>00593 <span class="comment">      vector&lt;real&gt; Posterior;</span>
<a name="l00594"></a>00594 <span class="comment">      LogCatalanPrior logPrior;</span>
<a name="l00595"></a>00595 <span class="comment">      </span>
<a name="l00596"></a>00596 <span class="comment">      successfulPQSplitFirst = HistFirst-&gt;prioritySplitMCMC(compVol,</span>
<a name="l00597"></a>00597 <span class="comment">      critVal, NOLOG, minPQPoints, maxLeafNodes, Posterior, logPrior); </span>
<a name="l00598"></a>00598 <span class="comment">      delete HistFirst;</span>
<a name="l00599"></a>00599 <span class="comment"></span>
<a name="l00600"></a>00600 <span class="comment">      // get the sum of the posteriors</span>
<a name="l00601"></a>00601 <span class="comment">      vector&lt;real&gt;::iterator realIt;</span>
<a name="l00602"></a>00602 <span class="comment">      real totPos = 0;</span>
<a name="l00603"></a>00603 <span class="comment">      for (realIt = Posterior.begin(); realIt &lt; Posterior.end(); realIt++) {</span>
<a name="l00604"></a>00604 <span class="comment">        //cout &lt;&lt; *realIt &lt;&lt; endl;</span>
<a name="l00605"></a>00605 <span class="comment">        totPos += *realIt;</span>
<a name="l00606"></a>00606 <span class="comment">      }</span>
<a name="l00607"></a>00607 <span class="comment">      totPos = abs(totPos);</span>
<a name="l00608"></a>00608 <span class="comment"></span>
<a name="l00609"></a>00609 <span class="comment">      //normalize the posterior</span>
<a name="l00610"></a>00610 <span class="comment">      double NormPostArray[Posterior.size()];</span>
<a name="l00611"></a>00611 <span class="comment">      for (size_t i = 0; i &lt; Posterior.size(); i++) {</span>
<a name="l00612"></a>00612 <span class="comment">        NormPostArray[i]=(exp(_double(Posterior[i])/(totPos)));</span>
<a name="l00613"></a>00613 <span class="comment">        cout &lt;&lt; NormPostArray[i] &lt;&lt; endl;</span>
<a name="l00614"></a>00614 <span class="comment">      }</span>
<a name="l00615"></a>00615 <span class="comment"></span>
<a name="l00616"></a>00616 <span class="comment">      // now sample from the discrrete distributions</span>
<a name="l00617"></a>00617 <span class="comment">      gslpdfstruct = gsl_ran_discrete_preproc(Posterior.size(), NormPostArray);</span>
<a name="l00618"></a>00618 <span class="comment">      vector&lt;size_t&gt;* Sampled = new vector&lt;size_t&gt;;</span>
<a name="l00619"></a>00619 <span class="comment">      size_t index1, index2;</span>
<a name="l00620"></a>00620 <span class="comment">      index1 = gsl_ran_discrete(r, gslpdfstruct);</span>
<a name="l00621"></a>00621 <span class="comment">      index2 = gsl_ran_discrete(r, gslpdfstruct);</span>
<a name="l00622"></a>00622 <span class="comment">      </span>
<a name="l00623"></a>00623 <span class="comment">      cout &lt;&lt; index1 &lt;&lt; &quot;\t&quot; &lt;&lt; index2 &lt;&lt; endl;</span>
<a name="l00624"></a>00624 <span class="comment">      </span>
<a name="l00625"></a>00625 <span class="comment">      if ( index1 &lt; index2 ) { </span>
<a name="l00626"></a>00626 <span class="comment">        (*Sampled).push_back(index1);</span>
<a name="l00627"></a>00627 <span class="comment">        (*Sampled).push_back(index2);</span>
<a name="l00628"></a>00628 <span class="comment">      }</span>
<a name="l00629"></a>00629 <span class="comment">      else {</span>
<a name="l00630"></a>00630 <span class="comment">        (*Sampled).push_back(index2);</span>
<a name="l00631"></a>00631 <span class="comment">        (*Sampled).push_back(index1);</span>
<a name="l00632"></a>00632 <span class="comment">      }</span>
<a name="l00633"></a>00633 <span class="comment">      </span>
<a name="l00634"></a>00634 <span class="comment">      cout &lt;&lt; (*Sampled)[0] &lt;&lt; &quot;\t&quot; &lt;&lt; (*Sampled)[1] &lt;&lt; endl;</span>
<a name="l00635"></a>00635 <span class="comment"></span>
<a name="l00636"></a>00636 <span class="comment">      // Second PQ</span>
<a name="l00637"></a>00637 <span class="comment">      cout &lt;&lt; &quot;second pq&quot; &lt;&lt; endl;</span>
<a name="l00638"></a>00638 <span class="comment">      // get the states that are from the sampled indices</span>
<a name="l00639"></a>00639 <span class="comment">      vector&lt;AdaptiveHistogram&gt;* States = new vector&lt;AdaptiveHistogram&gt;;</span>
<a name="l00640"></a>00640 <span class="comment">      successfulPQSplitSecond = HistSecond-&gt;prioritySplitGet(compVol,</span>
<a name="l00641"></a>00641 <span class="comment">      critVal, NOLOG, minPQPoints, maxLeafNodes, *States, *Sampled); </span>
<a name="l00642"></a>00642 <span class="comment">      //delete HistSecond;</span>
<a name="l00643"></a>00643 <span class="comment"></span>
<a name="l00644"></a>00644 <span class="comment">      *myHistFirst = (*States)[0];</span>
<a name="l00645"></a>00645 <span class="comment">      *myHistSecond = (*States)[1];</span>
<a name="l00646"></a>00646 <span class="comment"></span>
<a name="l00647"></a>00647 <span class="comment">      cout &lt;&lt; HistSecond-&gt;getRootLeaves() &lt;&lt; endl;</span>
<a name="l00648"></a>00648 <span class="comment">       </span>
<a name="l00649"></a>00649 <span class="comment">      myHistFirst-&gt;outputToTxtTabs(&quot;Hist1.txt&quot;);</span>
<a name="l00650"></a>00650 <span class="comment">      myHistSecond-&gt;outputToTxtTabs(&quot;Hist2.txt&quot;);</span>
<a name="l00651"></a>00651 <span class="comment">    }</span>
<a name="l00652"></a>00652 <span class="comment">//========end of getting sampled weighted states============================//</span>
<a name="l00653"></a>00653 <span class="comment">*/</span>
<a name="l00654"></a>00654 
<a name="l00655"></a>00655 
<a name="l00656"></a>00656     <span class="comment">/*</span>
<a name="l00657"></a>00657 <span class="comment">    #ifdef FORCEFAILINSERTION</span>
<a name="l00658"></a>00658 <span class="comment">      // debugging - force a failure here to check what program does</span>
<a name="l00659"></a>00659 <span class="comment">      successfulInsertionThird = false;</span>
<a name="l00660"></a>00660 <span class="comment">    #endif</span>
<a name="l00661"></a>00661 <span class="comment">    */</span>
<a name="l00662"></a>00662     
<a name="l00663"></a>00663     start = clock();
<a name="l00664"></a>00664     <span class="comment">// only proceed if successfully made histograms</span>
<a name="l00665"></a>00665     <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitFirst &amp;&amp; 
<a name="l00666"></a>00666       successfulInsertionSecond &amp;&amp; successfulPQSplitSecond) { 
<a name="l00667"></a>00667       
<a name="l00668"></a>00668       <span class="comment">// Initializing containers etc.</span>
<a name="l00669"></a>00669       cout &lt;&lt; <span class="stringliteral">&quot;Initializing containers since successfully made histograms. &quot;</span> &lt;&lt; endl;
<a name="l00670"></a>00670       <span class="comment">// containers for adaptive histograms</span>
<a name="l00671"></a>00671       <span class="comment">// the starting points of the chains</span>
<a name="l00672"></a>00672       vector&lt; AdaptiveHistogram* &gt; hists;
<a name="l00673"></a>00673       hists.push_back(HistFirst);
<a name="l00674"></a>00674       hists.push_back(HistSecond);
<a name="l00675"></a>00675 
<a name="l00676"></a>00676       <span class="comment">// how many chains are to be run = number starting histograms</span>
<a name="l00677"></a>00677       <span class="keywordtype">size_t</span> chains = hists.size(); 
<a name="l00678"></a>00678       
<a name="l00679"></a>00679       <span class="keywordflow">if</span> (chains &lt; 2) {
<a name="l00680"></a>00680         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
<a name="l00681"></a>00681       }
<a name="l00682"></a>00682 
<a name="l00683"></a>00683       <span class="comment">//container to keep the L1-error between each state and true density</span>
<a name="l00684"></a>00684       vector&lt; vector &lt;real&gt; &gt; stateL1(chains);
<a name="l00685"></a>00685       vector&lt; vector &lt;real&gt; &gt; avgStateL1(chains);
<a name="l00686"></a>00686       
<a name="l00687"></a>00687       <span class="comment">// set up proposal distribution object</span>
<a name="l00688"></a>00688       <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00689"></a>00689       <span class="comment">// set up prior distribution object</span>
<a name="l00690"></a>00690       <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00691"></a>00691 
<a name="l00692"></a>00692       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00693"></a>00693       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00694"></a>00694   
<a name="l00695"></a>00695       gsl_rng * rgsl = NULL;
<a name="l00696"></a>00696   
<a name="l00697"></a>00697       <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00698"></a>00698   
<a name="l00699"></a>00699       <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00700"></a>00700       <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00701"></a>00701       <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00702"></a>00702       <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00703"></a>00703       gsl_rng_env_setup();
<a name="l00704"></a>00704       tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00705"></a>00705       rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00706"></a>00706       
<a name="l00707"></a>00707       <span class="comment">// set a seed for the data</span>
<a name="l00708"></a>00708       <span class="keywordtype">int</span> mcmcSeed = 1234;
<a name="l00709"></a>00709       gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
<a name="l00710"></a>00710   
<a name="l00711"></a>00711       <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00712"></a>00712       vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00713"></a>00713       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00714"></a>00714       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00715"></a>00715   
<a name="l00716"></a>00716       vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00717"></a>00717       vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00718"></a>00718       vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00719"></a>00719       vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
<a name="l00720"></a>00720       
<a name="l00721"></a>00721       <span class="comment">// names for leaves related stuff</span>
<a name="l00722"></a>00722       vector&lt;string&gt; leavesColNames(chains);
<a name="l00723"></a>00723       vector&lt;string&gt; leavesRunningSumColNames(chains);
<a name="l00724"></a>00724       vector&lt;string&gt; leavesSampleVarianceColNames(chains);
<a name="l00725"></a>00725       std::string  baseLeavesColName = <span class="stringliteral">&quot;leaves_&quot;</span>;
<a name="l00726"></a>00726       std::string  baseLeavesRunningSumColName = <span class="stringliteral">&quot;leavesSum_&quot;</span>;
<a name="l00727"></a>00727       std::string  baseLeavesSampleVarianceColName = <span class="stringliteral">&quot;leavesVar_&quot;</span>;
<a name="l00728"></a>00728       std::string  overallLeavesRunningSumColName = <span class="stringliteral">&quot;OverallLeavesSum&quot;</span>;
<a name="l00729"></a>00729       
<a name="l00730"></a>00730       std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00731"></a>00731       std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00732"></a>00732       std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00733"></a>00733       std::string baseSequenceStateDiffsToAverageFilename = <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
<a name="l00734"></a>00734       
<a name="l00735"></a>00735       <span class="comment">// files for outputing samples</span>
<a name="l00736"></a>00736       std::string samplesCollFilename = <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00737"></a>00737       std::string samplesLogFilename = <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00738"></a>00738       <span class="comment">//outputFileStart(samplesCollFilename);</span>
<a name="l00739"></a>00739       
<a name="l00740"></a>00740       <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
<a name="l00741"></a>00741       <span class="comment">// but at the moment I have not done anything about graphing</span>
<a name="l00742"></a>00742       <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l00743"></a>00743         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00744"></a>00744       }
<a name="l00745"></a>00745       
<a name="l00746"></a>00746       <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
<a name="l00747"></a>00747       <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
<a name="l00748"></a>00748       
<a name="l00749"></a>00749       <span class="comment">// a name for the file of diagnostics  for leaves</span>
<a name="l00750"></a>00750       std::string GRLeavesFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalar.txt&quot;</span>;
<a name="l00751"></a>00751     
<a name="l00752"></a>00752       <span class="comment">// a name for a file of the leaves v_ij scalars</span>
<a name="l00753"></a>00753       std::string GR_vij_as_Leaves_Filename  = <span class="stringliteral">&quot;LeavesScalar.txt&quot;</span>;
<a name="l00754"></a>00754     
<a name="l00755"></a>00755       <span class="comment">// a name for the file of working calculations for the leaves scalar diagnostics </span>
<a name="l00756"></a>00756       std::string GRLeavesWorkingCalcsFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalarWorkingCalcs.txt&quot;</span>;
<a name="l00757"></a>00757       
<a name="l00758"></a>00758       <span class="comment">/* containers for summaries for the </span>
<a name="l00759"></a>00759 <span class="comment">      * Leaves-distances-to-average scalar convergence diagnostics */</span>
<a name="l00760"></a>00760     
<a name="l00761"></a>00761       <span class="comment">/* note we don&#39;t need this for leaves */</span>
<a name="l00762"></a>00762       <span class="comment">//std::vector &lt; RealVec &gt; currentLeaves(chains); </span>
<a name="l00763"></a>00763 
<a name="l00764"></a>00764       <span class="comment">// one vector of leaves as a RealVec for each chain</span>
<a name="l00765"></a>00765       std::vector &lt; RealVec &gt;* leavesPtr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00766"></a>00766 
<a name="l00767"></a>00767       <span class="comment">/* vector containing one running sum of leaves for each chain</span>
<a name="l00768"></a>00768 <span class="comment">      we can work out the average v = leaves for each chain so far from this</span>
<a name="l00769"></a>00769 <span class="comment">      start with a running sum of 0.0 for each chain */</span>
<a name="l00770"></a>00770       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00771"></a>00771     
<a name="l00772"></a>00772       <span class="comment">/* vector containing one running sum of </span>
<a name="l00773"></a>00773 <span class="comment">      squared leaves for each chain</span>
<a name="l00774"></a>00774 <span class="comment">      we can work out the average of the squared v&#39;s ie v^2 = leaves^2</span>
<a name="l00775"></a>00775 <span class="comment">      for each chain so far from this</span>
<a name="l00776"></a>00776 <span class="comment">      start with a running sum of 0.0 for each chain.</span>
<a name="l00777"></a>00777 <span class="comment">      (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00778"></a>00778 <span class="comment">      when accumulating products of reals) */</span>
<a name="l00779"></a>00779       <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumLeavesSquared(chains, cxsc::dotprecision(0.0));
<a name="l00780"></a>00780 
<a name="l00781"></a>00781       <span class="comment">/* value of running sum of leaves over all chains</span>
<a name="l00782"></a>00782 <span class="comment">      we can work out the average v = leaves over all chains so far from this */</span>
<a name="l00783"></a>00783       real runningSumLeavesAllChains = cxsc::real(0.0);
<a name="l00784"></a>00784       
<a name="l00785"></a>00785 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span>        <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00787"></a>00787         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesOverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>();
<a name="l00788"></a>00788         <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00789"></a>00789         std::vector &lt; RealVec &gt;* runningSumLeavesChainsPtr 
<a name="l00790"></a>00790                   = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00791"></a>00791         <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00792"></a>00792         std::vector &lt; RealVec &gt;* sampleVariancesLeavesPtr 
<a name="l00793"></a>00793                   = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains,
<a name="l00794"></a>00794                     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0)) );
<a name="l00795"></a>00795         <span class="comment">/* keep a vector of the flag for leaves convergence</span>
<a name="l00796"></a>00796 <span class="comment">         * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00797"></a>00797         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatLeavesFlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00798"></a>00798 <span class="preprocessor">      #endif</span>
<a name="l00799"></a>00799 <span class="preprocessor"></span>  
<a name="l00800"></a>00800       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Ws_leaves</span>
<a name="l00801"></a>00801       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Bs_leaves</span>
<a name="l00802"></a>00802       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the estimated var(v) for leaves</span>
<a name="l00803"></a>00803       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhat_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the rhats for leaves</span>
<a name="l00804"></a>00804 
<a name="l00805"></a>00805 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00806"></a>00806 <span class="preprocessor"></span>        <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<a name="l00807"></a>00807 <span class="comment">        * (not a real, but easier to output it if we treat it like one) */</span>
<a name="l00808"></a>00808         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00809"></a>00809 <span class="preprocessor">      #endif</span>
<a name="l00810"></a>00810 <span class="preprocessor"></span>
<a name="l00811"></a>00811       <span class="comment">// container of each state at each sequence</span>
<a name="l00812"></a>00812       vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators;
<a name="l00813"></a>00813       <span class="comment">// container of the collator at each sequence</span>
<a name="l00814"></a>00814 
<a name="l00815"></a>00815       <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00816"></a>00816       
<a name="l00817"></a>00817       <span class="comment">/* need to accumulate sum over all chains of the square of </span>
<a name="l00818"></a>00818 <span class="comment">      * the running sum of leaves </span>
<a name="l00819"></a>00819 <span class="comment">      * for each chain for this starting state */</span>
<a name="l00820"></a>00820       cxsc::real initialSumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l00821"></a>00821 
<a name="l00822"></a>00822       <span class="comment">// this loop is just setting up containers of file names</span>
<a name="l00823"></a>00823       <span class="comment">// and getting info from the starting histograms that is</span>
<a name="l00824"></a>00824       <span class="comment">// needed to start the chains</span>
<a name="l00825"></a>00825       <span class="comment">// and a container of collators, one for each chain,</span>
<a name="l00826"></a>00826       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00827"></a>00827         
<a name="l00828"></a>00828         <span class="comment">// do not comment these out</span>
<a name="l00829"></a>00829         std::ostringstream stm1;
<a name="l00830"></a>00830         stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00831"></a>00831         sequenceStateFilenames[ci] = stm1.str();
<a name="l00832"></a>00832         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00833"></a>00833         
<a name="l00834"></a>00834         <span class="comment">// to output v_ij</span>
<a name="l00835"></a>00835         {
<a name="l00836"></a>00836           std::ostringstream stm;
<a name="l00837"></a>00837           stm &lt;&lt; baseLeavesColName &lt;&lt; ci;
<a name="l00838"></a>00838           leavesColNames[ci] = stm.str();
<a name="l00839"></a>00839         }
<a name="l00840"></a>00840 
<a name="l00841"></a>00841 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00842"></a>00842 <span class="preprocessor"></span>          {
<a name="l00843"></a>00843             std::ostringstream stm;
<a name="l00844"></a>00844             stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00845"></a>00845             sequenceCollationFilenames[ci] = stm.str();
<a name="l00846"></a>00846             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00847"></a>00847           }
<a name="l00848"></a>00848           {
<a name="l00849"></a>00849             std::ostringstream stm;
<a name="l00850"></a>00850             stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00851"></a>00851             sequenceAverageFilenames[ci] = stm.str();
<a name="l00852"></a>00852             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00853"></a>00853           }
<a name="l00854"></a>00854           {
<a name="l00855"></a>00855             std::ostringstream stm;
<a name="l00856"></a>00856             stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00857"></a>00857             sequenceDiffsToAverageFilenames[ci] = stm.str();
<a name="l00858"></a>00858             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
<a name="l00859"></a>00859           }
<a name="l00860"></a>00860           {
<a name="l00861"></a>00861             std::ostringstream stm;
<a name="l00862"></a>00862             stm &lt;&lt; baseLeavesRunningSumColName &lt;&lt; ci;
<a name="l00863"></a>00863             leavesRunningSumColNames[ci] = stm.str();
<a name="l00864"></a>00864           }
<a name="l00865"></a>00865           
<a name="l00866"></a>00866           {
<a name="l00867"></a>00867             std::ostringstream stm;
<a name="l00868"></a>00868             stm &lt;&lt; baseLeavesSampleVarianceColName &lt;&lt; ci;
<a name="l00869"></a>00869             leavesSampleVarianceColNames[ci] = stm.str();
<a name="l00870"></a>00870           }
<a name="l00871"></a>00871 <span class="preprocessor">          #endif</span>
<a name="l00872"></a>00872 <span class="preprocessor"></span>
<a name="l00873"></a>00873         <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<a name="l00874"></a>00874 <span class="comment">        * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<a name="l00875"></a>00875 <span class="comment">        * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<a name="l00876"></a>00876 <span class="comment">        * change.  */</span>
<a name="l00877"></a>00877         
<a name="l00878"></a>00878         <span class="comment">// set up a container for the leaf children</span>
<a name="l00879"></a>00879         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00880"></a>00880         <span class="comment">// set up a container for the subleaf children</span>
<a name="l00881"></a>00881         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00882"></a>00882   
<a name="l00883"></a>00883         <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00884"></a>00884         <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00885"></a>00885   
<a name="l00886"></a>00886         <span class="comment">// fill the container with the leaf children</span>
<a name="l00887"></a>00887         hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00888"></a>00888         <span class="comment">// fill the container with the subleaf children</span>
<a name="l00889"></a>00889         hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00890"></a>00890 
<a name="l00891"></a>00891       <span class="comment">//check the cherries are all &quot;legal&quot;, ie pass checkNodeCountForSplit</span>
<a name="l00892"></a>00892       <span class="keywordflow">if</span> (!cherryVec.empty()) {
<a name="l00893"></a>00893         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> cit;
<a name="l00894"></a>00894         <span class="keywordflow">for</span> (cit = cherryVec.begin(); cit &lt; cherryVec.end(); cit++) {
<a name="l00895"></a>00895           <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#af04d789b7f68d18ba75461caa4627c39" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*cit), minPoints))
<a name="l00896"></a>00896           {
<a name="l00897"></a>00897             <span class="keywordflow">throw</span> std::logic_error(
<a name="l00898"></a>00898             <span class="stringliteral">&quot;\nIllegal state - cherries do not satisfy minPoints for split&quot;</span>);
<a name="l00899"></a>00899           }
<a name="l00900"></a>00900         }
<a name="l00901"></a>00901       }
<a name="l00902"></a>00902       
<a name="l00903"></a>00903       numCherries = cherryVec.size();
<a name="l00904"></a>00904 
<a name="l00905"></a>00905       <span class="comment">// check if node is still splittable</span>
<a name="l00906"></a>00906       <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00907"></a>00907       <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00908"></a>00908          <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00909"></a>00909          <span class="comment">// or could split with one child getting all the points</span>
<a name="l00910"></a>00910          <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00911"></a>00911          <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00912"></a>00912             <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#af04d789b7f68d18ba75461caa4627c39" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*lit), minPoints)) {
<a name="l00913"></a>00913               <span class="comment">// leaf can go into container</span>
<a name="l00914"></a>00914               nodeLists[ci].push_back(*lit);
<a name="l00915"></a>00915               numLeaves++;
<a name="l00916"></a>00916             }
<a name="l00917"></a>00917          }
<a name="l00918"></a>00918         cout &lt;&lt; <span class="stringliteral">&quot;splittable leaf nodes = &quot;</span> &lt;&lt; numLeaves &lt;&lt; endl;
<a name="l00919"></a>00919       }
<a name="l00920"></a>00920         <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00921"></a>00921         <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00922"></a>00922            nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00923"></a>00923                            cherryVec.end());
<a name="l00924"></a>00924         <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00925"></a>00925            cancontinue = <span class="keyword">false</span>;
<a name="l00926"></a>00926            <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00927"></a>00927            std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00928"></a>00928                    &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00929"></a>00929                    &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00930"></a>00930         }
<a name="l00931"></a>00931   
<a name="l00932"></a>00932         numLeavesVec[ci] = numLeaves;
<a name="l00933"></a>00933         numCherriesVec[ci] = numCherries;
<a name="l00934"></a>00934 
<a name="l00935"></a>00935         cout &lt;&lt; numLeaves &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; numCherries &lt;&lt; endl;
<a name="l00936"></a>00936 
<a name="l00937"></a>00937         <span class="comment">// initialise things for the collection of data on leaves</span>
<a name="l00938"></a>00938         
<a name="l00939"></a>00939         <span class="comment">// one vector of leaves for each chain</span>
<a name="l00940"></a>00940         <span class="comment">// record leaves for this first state</span>
<a name="l00941"></a>00941         cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l00942"></a>00942         leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l00943"></a>00943         
<a name="l00944"></a>00944         <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l00945"></a>00945         cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l00946"></a>00946         runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l00947"></a>00947             
<a name="l00948"></a>00948         <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l00949"></a>00949         initialSumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l00950"></a>00950             
<a name="l00951"></a>00951         <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l00952"></a>00952 <span class="comment">         *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l00953"></a>00953         cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l00954"></a>00954         
<a name="l00955"></a>00955         <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l00956"></a>00956         runningSumLeavesAllChains += lastStateLeaves;
<a name="l00957"></a>00957         
<a name="l00958"></a>00958 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00959"></a>00959 <span class="preprocessor"></span>          <span class="comment">//sampleVariancesLeavesPtr-&gt;at(ci) was initialised to 0.0</span>
<a name="l00960"></a>00960           runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l00961"></a>00961 <span class="preprocessor">        #endif</span>
<a name="l00962"></a>00962 <span class="preprocessor"></span>
<a name="l00963"></a>00963         cout &lt;&lt; <span class="stringliteral">&quot;initialising things using the current histogram state: &quot;</span> &lt;&lt; endl;
<a name="l00964"></a>00964         <span class="comment">// initialise things using current histogram state</span>
<a name="l00965"></a>00965         <span class="comment">/* set up one collator for each chain, </span>
<a name="l00966"></a>00966 <span class="comment">         * starting it with the histogram state right now */</span>
<a name="l00967"></a>00967         sequenceCollators.push_back(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(*hists[ci]));
<a name="l00968"></a>00968         
<a name="l00969"></a>00969         <span class="comment">// get the IAE of this first state</span>
<a name="l00970"></a>00970         <span class="comment">//stateL1[ci].push_back(hists[ci]-&gt;getMappedIAE(nodeEst, pavingBox));</span>
<a name="l00971"></a>00971 
<a name="l00972"></a>00972         <span class="comment">//moved this out from MYDEBUG_OUTPUT to get the IAE</span>
<a name="l00973"></a>00973   
<a name="l00974"></a>00974         <span class="comment">//avgStateL1[ci].push_back(colltempavg.getMappedIAE(nodeEst, pavingBox));</span>
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00977"></a>00977 <span class="preprocessor"></span>        {
<a name="l00978"></a>00978           sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
<a name="l00979"></a>00979                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg = 
<a name="l00980"></a>00980                         sequenceCollators[ci]-&gt;makeAverage();
<a name="l00981"></a>00981           colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
<a name="l00982"></a>00982           
<a name="l00983"></a>00983           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00984"></a>00984                       = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00985"></a>00985           colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
<a name="l00986"></a>00986         } <span class="comment">// temp objects go out of scope here  </span>
<a name="l00987"></a>00987 <span class="preprocessor">        #endif</span>
<a name="l00988"></a>00988 <span class="preprocessor"></span>      } <span class="comment">// end loop through chains setting up things to be able to start</span>
<a name="l00989"></a>00989   
<a name="l00990"></a>00990       <span class="comment">/* the overall running sum runningSumLeavesAllChains </span>
<a name="l00991"></a>00991 <span class="comment">       * was initialised to 0.0 </span>
<a name="l00992"></a>00992 <span class="comment">       * and #ifdef MYDEBUG, runningSumLeavesOverall was initialised to contain one 0.0 </span>
<a name="l00993"></a>00993 <span class="comment">       * and similarly rhatLeavesFlagPtr was initialised to contain one 0.0*/</span>
<a name="l00994"></a>00994   
<a name="l00995"></a>00995       <span class="comment">/* and we started the convergence statistics for chains with just one state in</span>
<a name="l00996"></a>00996 <span class="comment">       * with one 0.0 in each (Ws, Bs, estVarsVs, rhats)</span>
<a name="l00997"></a>00997 <span class="comment">       * when we initialised */</span>
<a name="l00998"></a>00998 
<a name="l00999"></a>00999       <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l01000"></a>01000 
<a name="l01001"></a>01001       <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l01002"></a>01002 
<a name="l01003"></a>01003       <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
<a name="l01004"></a>01004       <span class="keywordtype">int</span> samplesSoFar = 0;
<a name="l01005"></a>01005       <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far,</span>
<a name="l01006"></a>01006 <span class="comment">              since state 1 is the initial histograms */</span>
<a name="l01007"></a>01007     
<a name="l01008"></a>01008       <span class="comment">// varibles for monitoring convergence</span>
<a name="l01009"></a>01009       <span class="keywordtype">int</span> rhatLeavesFlag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value </span>
<a name="l01010"></a>01010       <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
<a name="l01011"></a>01011       <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
<a name="l01012"></a>01012       <span class="keywordtype">int</span> rhatFlagCounter = 0;
<a name="l01013"></a>01013       <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<a name="l01014"></a>01014 <span class="comment">                        * diagnostic within limits for sampling to start?</span>
<a name="l01015"></a>01015 <span class="comment">                        * usually this would probably be the number</span>
<a name="l01016"></a>01016 <span class="comment">                        * of scalar values being used? */</span> 
<a name="l01017"></a>01017                         
<a name="l01018"></a>01018       <span class="comment">// counter to keep track of loops</span>
<a name="l01019"></a>01019       <span class="keywordtype">int</span> loopCounter = 0;
<a name="l01020"></a>01020 
<a name="l01021"></a>01021       <span class="comment">/* We also need a collator for the samples*/</span>
<a name="l01022"></a>01022       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
<a name="l01023"></a>01023 
<a name="l01024"></a>01024       <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) 
<a name="l01025"></a>01025       {
<a name="l01026"></a>01026 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l01027"></a>01027 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;****** Change from state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l01028"></a>01028 <span class="preprocessor">        #endif</span>
<a name="l01029"></a>01029 <span class="preprocessor"></span>
<a name="l01030"></a>01030         loopCounter++;
<a name="l01031"></a>01031 
<a name="l01032"></a>01032         <span class="comment">// do initial values for everything so far</span>
<a name="l01033"></a>01033         <span class="comment">/* we want to accumulate the sample variance of the scalar summary leaves</span>
<a name="l01034"></a>01034 <span class="comment">         * for each chain up to the point reached in this loop */</span>
<a name="l01035"></a>01035         cxsc::real sumOfSampleVariancesLeavesOverChains(0.0);
<a name="l01036"></a>01036         
<a name="l01037"></a>01037         <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l01038"></a>01038 <span class="comment">         * the running sum of leaves </span>
<a name="l01039"></a>01039 <span class="comment">         * for each chain up to the point reached in this loop */</span>
<a name="l01040"></a>01040         cxsc::real sumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l01041"></a>01041       
<a name="l01042"></a>01042         <span class="comment">// for each histogram in turn, change the state</span>
<a name="l01043"></a>01043         <span class="comment">/* </span>
<a name="l01044"></a>01044 <span class="comment">         * this is all a fudge - changeMCMCstate should just be a private</span>
<a name="l01045"></a>01045 <span class="comment">         * method of the histograms but I think I made it public so that</span>
<a name="l01046"></a>01046 <span class="comment">         * I could use it here in the example as a first step to being</span>
<a name="l01047"></a>01047 <span class="comment">         * able to make all of this chain convergence stuff back into</span>
<a name="l01048"></a>01048 <span class="comment">         * a method of the histograms themselves</span>
<a name="l01049"></a>01049 <span class="comment">        */</span>
<a name="l01050"></a>01050 
<a name="l01051"></a>01051         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l01052"></a>01052         
<a name="l01053"></a>01053 <span class="preprocessor">          #ifdef MYDEBUG_CALCS</span>
<a name="l01054"></a>01054 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<a name="l01055"></a>01055 <span class="preprocessor">          #endif</span>
<a name="l01056"></a>01056 <span class="preprocessor"></span>
<a name="l01057"></a>01057           <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<a name="l01058"></a>01058 <span class="comment">          * in the comments inside this loop */</span>
<a name="l01059"></a>01059 <span class="comment">//cout &lt;&lt; &quot;Change MCMC state &quot; &lt;&lt; endl;</span>
<a name="l01060"></a>01060           <span class="comment">// changeMCMCState for the chain</span>
<a name="l01061"></a>01061           <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
<a name="l01062"></a>01062             <span class="comment">//cout &lt;&lt; &quot;**** chain &quot; &lt;&lt; ci &lt;&lt; &quot;****&quot; &lt;&lt; endl;</span>
<a name="l01063"></a>01063           goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l01064"></a>01064                numLeavesVec[ci], numCherriesVec[ci],
<a name="l01065"></a>01065                proposal, logPrior, minPoints,
<a name="l01066"></a>01066                rgsl, loggingInChangeStates,
<a name="l01067"></a>01067                sequenceStateFilenames[ci], states);
<a name="l01068"></a>01068                
<a name="l01069"></a>01069 <span class="preprocessor">          #ifdef FORCEFAILMCMCLOOP</span>
<a name="l01070"></a>01070 <span class="preprocessor"></span>            <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
<a name="l01071"></a>01071             <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<a name="l01072"></a>01072 <span class="preprocessor">          #endif </span>
<a name="l01073"></a>01073 <span class="preprocessor"></span>
<a name="l01074"></a>01074           <span class="keywordflow">if</span> (!goodLoop) {
<a name="l01075"></a>01075             <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
<a name="l01076"></a>01076             <span class="comment">// stop if we aren&#39;t happy</span>
<a name="l01077"></a>01077           }
<a name="l01078"></a>01078         
<a name="l01079"></a>01079           <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l01080"></a>01080             <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l01081"></a>01081           }
<a name="l01082"></a>01082         
<a name="l01083"></a>01083           <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
<a name="l01084"></a>01084         
<a name="l01085"></a>01085           <span class="comment">/* this chain should have states + 1 states in it</span>
<a name="l01086"></a>01086 <span class="comment">          * because we have not yet incremented the states variable.*/</span>
<a name="l01087"></a>01087           <span class="keywordtype">size_t</span> n_for_leaves = states + 1;
<a name="l01088"></a>01088                 
<a name="l01089"></a>01089           <span class="comment">/* and n_Leaves should be at least 2 because we started with the </span>
<a name="l01090"></a>01090 <span class="comment">          * starting histogram and have now added another state.*/</span>
<a name="l01091"></a>01091           assert(n_for_leaves &gt; 1);
<a name="l01092"></a>01092         
<a name="l01093"></a>01093           <span class="comment">// collect the leaves scalar and update the running sums for leaves</span>
<a name="l01094"></a>01094           {
<a name="l01095"></a>01095             <span class="comment">// update leaves for last histogram state in the chain</span>
<a name="l01096"></a>01096             cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l01097"></a>01097             leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l01098"></a>01098                     
<a name="l01099"></a>01099             <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l01100"></a>01100             cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l01101"></a>01101             runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l01102"></a>01102             
<a name="l01103"></a>01103             <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l01104"></a>01104             sumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l01105"></a>01105             
<a name="l01106"></a>01106             <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l01107"></a>01107 <span class="comment">             *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l01108"></a>01108             cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l01109"></a>01109             
<a name="l01110"></a>01110             <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l01111"></a>01111             runningSumLeavesAllChains += lastStateLeaves;
<a name="l01112"></a>01112             
<a name="l01113"></a>01113             <span class="comment">/* accumulate the sample variance for leaves for this chain: </span>
<a name="l01114"></a>01114 <span class="comment">             * sample variance for the scalar summary v = leaves</span>
<a name="l01115"></a>01115 <span class="comment">             * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l01116"></a>01116 <span class="comment">             * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l01117"></a>01117             cxsc::real thisSampleVarianceLeaves( ( 1.0/(n_for_leaves - 1) )
<a name="l01118"></a>01118                 *( cxsc::rnd(runningSumLeavesSquared[ci])
<a name="l01119"></a>01119                 -  (newRunningSumLeaves*newRunningSumLeaves/(n_for_leaves * 1.0)) ) );
<a name="l01120"></a>01120             sumOfSampleVariancesLeavesOverChains += thisSampleVarianceLeaves;
<a name="l01121"></a>01121             
<a name="l01122"></a>01122 <span class="preprocessor">            #ifdef MYDEBUG</span>
<a name="l01123"></a>01123 <span class="preprocessor"></span>              sampleVariancesLeavesPtr-&gt;at(ci).push_back( thisSampleVarianceLeaves );
<a name="l01124"></a>01124               runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l01125"></a>01125 <span class="preprocessor">            #endif</span>
<a name="l01126"></a>01126 <span class="preprocessor"></span>
<a name="l01127"></a>01127 <span class="preprocessor">            #ifdef MYDEBUG_CALCS</span>
<a name="l01128"></a>01128 <span class="preprocessor"></span>              <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l01129"></a>01129               <span class="comment">// leavesPtr[ci] has the v_ij for each chain i</span>
<a name="l01130"></a>01130               
<a name="l01131"></a>01131               assert( n_for_leaves == leavesPtr-&gt;at(ci).size() );
<a name="l01132"></a>01132               cxsc::real acc(0.0);
<a name="l01133"></a>01133               <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l01134"></a>01134                 acc+= (*it);
<a name="l01135"></a>01135               }
<a name="l01136"></a>01136               
<a name="l01137"></a>01137               cxsc::real av = acc/(n_for_leaves * 1.0);
<a name="l01138"></a>01138               cxsc::dotprecision accDiffs(0.0);
<a name="l01139"></a>01139               <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l01140"></a>01140                 cxsc::real thisDiff = (*it) - av;
<a name="l01141"></a>01141                 <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01142"></a>01142                 cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01143"></a>01143               }
<a name="l01144"></a>01144               cxsc::real altVar = rnd(accDiffs)/( n_for_leaves - 1.0 );
<a name="l01145"></a>01145               
<a name="l01146"></a>01146               cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance leaves is\t&quot;</span> &lt;&lt; thisSampleVarianceLeaves &lt;&lt; endl;
<a name="l01147"></a>01147               cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar leaves is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l01148"></a>01148               <span class="comment">//assert(cxsc::_double(thisSampleVarianceLeaves) == cxsc::_double(altVar) );</span>
<a name="l01149"></a>01149             
<a name="l01150"></a>01150 <span class="preprocessor">            #endif</span>
<a name="l01151"></a>01151 <span class="preprocessor"></span>          } <span class="comment">// end of collecting leaves scalar</span>
<a name="l01152"></a>01152       } <span class="comment">// end change state for each histogram in turn</span>
<a name="l01153"></a>01153       
<a name="l01154"></a>01154       <span class="comment">// increment number of states histograms have been through</span>
<a name="l01155"></a>01155 
<a name="l01156"></a>01156       states++;
<a name="l01157"></a>01157       <span class="comment">//cout &lt;&lt; &quot;============state &quot; &lt;&lt; states &lt;&lt; endl;</span>
<a name="l01158"></a>01158 
<a name="l01159"></a>01159       <span class="comment">/* each chain now has a new state</span>
<a name="l01160"></a>01160 <span class="comment">       * and info for leaves scalar for diagnostics has been collected</span>
<a name="l01161"></a>01161 <span class="comment">       * and the sample variance of the leaves scalar for each chain </span>
<a name="l01162"></a>01162 <span class="comment">       * has been put into sampleVariancesLeaves vector,</span>
<a name="l01163"></a>01163 <span class="comment">       * and if we are doing full checks, the current histogram states have </span>
<a name="l01164"></a>01164 <span class="comment">       * has been collated into collators </span>
<a name="l01165"></a>01165 <span class="comment">       * and info for any other scalars for diagnostics has been collected</span>
<a name="l01166"></a>01166 <span class="comment">       * and the sample variance of these other scalar summaries for each chain </span>
<a name="l01167"></a>01167 <span class="comment">       * for each scalar value</span>
<a name="l01168"></a>01168 <span class="comment">       * have been put into sampleVariances vectors for each diagnostic,</span>
<a name="l01169"></a>01169 <span class="comment">       * so we can now work out the convergence diagnostics */</span>
<a name="l01170"></a>01170 
<a name="l01171"></a>01171 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01172"></a>01172 <span class="preprocessor"></span>        <span class="comment">// store the current runningSumLeavesAllChains as well</span>
<a name="l01173"></a>01173         runningSumLeavesOverallPtr-&gt;push_back(runningSumLeavesAllChains);
<a name="l01174"></a>01174 <span class="preprocessor">      #endif</span>
<a name="l01175"></a>01175 <span class="preprocessor"></span>      
<a name="l01176"></a>01176       <span class="comment">// convergence diagnostics calculations for leaves</span>
<a name="l01177"></a>01177       {
<a name="l01178"></a>01178         <span class="comment">// the Ws_leaves: average, over chains, of sample variance of scalar value</span>
<a name="l01179"></a>01179         cxsc::real thisW_leaves = sumOfSampleVariancesLeavesOverChains/(chains * 1.0); 
<a name="l01180"></a>01180         Ws_leavesPtr-&gt;push_back(thisW_leaves); 
<a name="l01181"></a>01181         <span class="comment">// the Bs_leaves</span>
<a name="l01182"></a>01182         cxsc::real thisB_leaves = (1.0/( (chains - 1) * states ) 
<a name="l01183"></a>01183                   * ( sumOfSquaresOfRunningSumsLeaves 
<a name="l01184"></a>01184                   - (runningSumLeavesAllChains 
<a name="l01185"></a>01185                   * runningSumLeavesAllChains/(chains * 1.0)) ) );
<a name="l01186"></a>01186         Bs_leavesPtr-&gt;push_back(thisB_leaves); 
<a name="l01187"></a>01187         
<a name="l01188"></a>01188 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l01189"></a>01189 <span class="preprocessor"></span>          <span class="comment">//check thisB_leaves is correct, doing it the long way</span>
<a name="l01190"></a>01190           <span class="comment">// runningSumLeaves has one running sum for each chain</span>
<a name="l01191"></a>01191           <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l01192"></a>01192           cxsc::real accRunningSums(0.0);
<a name="l01193"></a>01193           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumLeavesPtr-&gt;begin(); it &lt; runningSumLeavesPtr-&gt;end(); ++it) {
<a name="l01194"></a>01194             cxsc::real thisChainRunningSum = (*it);
<a name="l01195"></a>01195             cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
<a name="l01196"></a>01196             chainAverages.push_back(thisChainAv);
<a name="l01197"></a>01197             accRunningSums+=thisChainRunningSum;
<a name="l01198"></a>01198           }
<a name="l01199"></a>01199           cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
<a name="l01200"></a>01200           cxsc::dotprecision accDiffs(0.0);
<a name="l01201"></a>01201           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l01202"></a>01202             cxsc::real thisDiff = (*it) - overallAv;
<a name="l01203"></a>01203             <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01204"></a>01204             cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01205"></a>01205           }
<a name="l01206"></a>01206           cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
<a name="l01207"></a>01207           
<a name="l01208"></a>01208           cout &lt;&lt; <span class="stringliteral">&quot;\nthisB for leaves is\t&quot;</span> &lt;&lt; thisB_leaves &lt;&lt; endl;
<a name="l01209"></a>01209           cout &lt;&lt; <span class="stringliteral">&quot;altB for leaves is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l01210"></a>01210           <span class="comment">//assert(thisB_leaves == altB);</span>
<a name="l01211"></a>01211         
<a name="l01212"></a>01212 <span class="preprocessor">        #endif</span>
<a name="l01213"></a>01213 <span class="preprocessor"></span>        
<a name="l01214"></a>01214         <span class="comment">// the estimated var(v)</span>
<a name="l01215"></a>01215         cxsc::real thisVarV_leaves = states/(states-1.0) 
<a name="l01216"></a>01216                 * thisW_leaves + (1.0/states)*thisB_leaves;
<a name="l01217"></a>01217         estVarV_leavesPtr-&gt;push_back(thisVarV_leaves); 
<a name="l01218"></a>01218         <span class="comment">// the rhats</span>
<a name="l01219"></a>01219         cxsc::real thisRhat_leaves(0.0);
<a name="l01220"></a>01220         <span class="comment">// allow division by 0 if w = 0 when var does not</span>
<a name="l01221"></a>01221         <span class="keywordflow">if</span> (thisW_leaves &gt; 0.0 || thisVarV_leaves &gt; 0.0) {
<a name="l01222"></a>01222           thisRhat_leaves = thisVarV_leaves/thisW_leaves;
<a name="l01223"></a>01223         }
<a name="l01224"></a>01224         rhat_leavesPtr-&gt;push_back(thisRhat_leaves); 
<a name="l01225"></a>01225         <span class="comment">//cout &lt;&lt; &quot;rhat:&quot; &lt;&lt; thisRhat_leaves &lt;&lt; endl;</span>
<a name="l01226"></a>01226       } <span class="comment">// end calculations for leaves</span>
<a name="l01227"></a>01227       
<a name="l01228"></a>01228       
<a name="l01229"></a>01229       <span class="comment">// check on the diagnostics for Leaves</span>
<a name="l01230"></a>01230       <span class="keywordflow">if</span> (rhat_leavesPtr-&gt;back() &lt;= 1.0 + tol 
<a name="l01231"></a>01231               &amp;&amp; rhat_leavesPtr-&gt;back() &gt;= 1.0 - tol) {
<a name="l01232"></a>01232         <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l01233"></a>01233         <span class="keywordflow">if</span> (!rhatLeavesFlag)  {
<a name="l01234"></a>01234 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01235"></a>01235 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nleaves convergence test satisfied in state &quot;</span> 
<a name="l01236"></a>01236                 &lt;&lt; states &lt;&lt; endl;
<a name="l01237"></a>01237 <span class="preprocessor">          #endif</span>
<a name="l01238"></a>01238 <span class="preprocessor"></span>          <span class="comment">// set the flag for this scalar value</span>
<a name="l01239"></a>01239           rhatLeavesFlag = 1;
<a name="l01240"></a>01240           <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l01241"></a>01241           rhatFlagCounter ++; 
<a name="l01242"></a>01242         }
<a name="l01243"></a>01243       } <span class="comment">// end of checking diagnostic for leaves</span>
<a name="l01244"></a>01244       <span class="comment">/*else { // not converged on this scalar value</span>
<a name="l01245"></a>01245 <span class="comment">        // if we were okay on this scalar value before</span>
<a name="l01246"></a>01246 <span class="comment">        if (rhatLeavesFlag) {</span>
<a name="l01247"></a>01247 <span class="comment">          #ifdef MYDEBUG</span>
<a name="l01248"></a>01248 <span class="comment">            cout &lt;&lt; &quot;\nLeaves convergence test now NOT satisfied in state &quot; </span>
<a name="l01249"></a>01249 <span class="comment">              &lt;&lt; states &lt;&lt; endl;</span>
<a name="l01250"></a>01250 <span class="comment">        </span>
<a name="l01251"></a>01251 <span class="comment">          #endif</span>
<a name="l01252"></a>01252 <span class="comment">          rhatLeavesFlag = 0; // update the flag</span>
<a name="l01253"></a>01253 <span class="comment">          rhatFlagCounter--; // decrement the flag counter</span>
<a name="l01254"></a>01254 <span class="comment">        } </span>
<a name="l01255"></a>01255 <span class="comment">      }*/</span>
<a name="l01256"></a>01256 
<a name="l01257"></a>01257 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01258"></a>01258 <span class="preprocessor"></span>        <span class="comment">// store the Leavesflag as well, as a real, which is a fudge...</span>
<a name="l01259"></a>01259         rhatLeavesFlagPtr-&gt;push_back(rhatLeavesFlag);
<a name="l01260"></a>01260 <span class="preprocessor">      #endif</span>
<a name="l01261"></a>01261 <span class="preprocessor"></span>
<a name="l01262"></a>01262       <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
<a name="l01263"></a>01263         burntin = 1; 
<a name="l01264"></a>01264         burntinReachedState = states;
<a name="l01265"></a>01265         
<a name="l01266"></a>01266 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01267"></a>01267 <span class="preprocessor"></span>          <span class="comment">// if we have not been burntin, give a message</span>
<a name="l01268"></a>01268            cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
<a name="l01269"></a>01269               &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l01270"></a>01270 <span class="preprocessor">        #endif</span>
<a name="l01271"></a>01271 <span class="preprocessor"></span>      }
<a name="l01272"></a>01272       <span class="comment">/*</span>
<a name="l01273"></a>01273 <span class="comment">      // but it may be that we were burntin and no longer are</span>
<a name="l01274"></a>01274 <span class="comment">      else if ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {</span>
<a name="l01275"></a>01275 <span class="comment">        </span>
<a name="l01276"></a>01276 <span class="comment">        burntin = 0; </span>
<a name="l01277"></a>01277 <span class="comment">        burntinReachedState = 0;</span>
<a name="l01278"></a>01278 <span class="comment">        </span>
<a name="l01279"></a>01279 <span class="comment">        delete samplesColl; // get rid of the old samples collator</span>
<a name="l01280"></a>01280 <span class="comment">        samplesColl = new AdaptiveHistogramCollator(); // and take a new one</span>
<a name="l01281"></a>01281 <span class="comment">        </span>
<a name="l01282"></a>01282 <span class="comment">        samplesSoFar = 0;</span>
<a name="l01283"></a>01283 <span class="comment">        </span>
<a name="l01284"></a>01284 <span class="comment">        // want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
<a name="l01285"></a>01285 <span class="comment">        cxsc::real newVal(0.0);</span>
<a name="l01286"></a>01286 <span class="comment">        </span>
<a name="l01287"></a>01287 <span class="comment">        #ifdef MYDEBUG</span>
<a name="l01288"></a>01288 <span class="comment">          std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), </span>
<a name="l01289"></a>01289 <span class="comment">            std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);</span>
<a name="l01290"></a>01290 <span class="comment">        #endif</span>
<a name="l01291"></a>01291 <span class="comment">        </span>
<a name="l01292"></a>01292 <span class="comment">        // restart the log file if we are logging</span>
<a name="l01293"></a>01293 <span class="comment">        // note nothing done here yet about logging graphs as well  </span>
<a name="l01294"></a>01294 <span class="comment">        if ( (logging = LOGSAMPLES) ) {</span>
<a name="l01295"></a>01295 <span class="comment">          outputFileStart(samplesLogFilename);</span>
<a name="l01296"></a>01296 <span class="comment">        }   </span>
<a name="l01297"></a>01297 <span class="comment">        </span>
<a name="l01298"></a>01298 <span class="comment">        #ifdef MYDEBUG</span>
<a name="l01299"></a>01299 <span class="comment">          cout &lt;&lt; &quot;Burnin convergence test now NOT satisfied at state &quot; </span>
<a name="l01300"></a>01300 <span class="comment">              &lt;&lt; states &lt;&lt; endl;</span>
<a name="l01301"></a>01301 <span class="comment">          </span>
<a name="l01302"></a>01302 <span class="comment">        #endif</span>
<a name="l01303"></a>01303 <span class="comment">      }*/</span>
<a name="l01304"></a>01304       
<a name="l01305"></a>01305       <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<a name="l01306"></a>01306 <span class="comment">       * the thinout specified </span>
<a name="l01307"></a>01307 <span class="comment">       * note - we will only be in the loop at all if we still need more samples*/</span>
<a name="l01308"></a>01308       <span class="keywordflow">if</span> (burntin &amp;&amp; (( states - burntinReachedState )%thinout == 0)) {
<a name="l01309"></a>01309         
<a name="l01310"></a>01310 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01311"></a>01311 <span class="preprocessor"></span>          <span class="comment">//cout &lt;&lt; &quot;sampling at state &quot; &lt;&lt; states &lt;&lt; endl;</span>
<a name="l01312"></a>01312           sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
<a name="l01313"></a>01313 
<a name="l01314"></a>01314 <span class="preprocessor">        #endif</span>
<a name="l01315"></a>01315 <span class="preprocessor"></span>
<a name="l01316"></a>01316         <span class="comment">// take one sample from each chain until we have enough samples</span>
<a name="l01317"></a>01317         <span class="comment">// and increment samplesSoFar for each one taken</span>
<a name="l01318"></a>01318         vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01319"></a>01319 
<a name="l01320"></a>01320         <span class="keywordflow">for</span> (ait = hists.begin(); 
<a name="l01321"></a>01321             (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
<a name="l01322"></a>01322             ++ait) {
<a name="l01323"></a>01323           
<a name="l01324"></a>01324           <span class="comment">// add the collation (this is the main collation to output the final averaged sample)</span>
<a name="l01325"></a>01325           samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
<a name="l01326"></a>01326 
<a name="l01327"></a>01327           samplesSoFar++;
<a name="l01328"></a>01328           cout &lt;&lt; <span class="stringliteral">&quot;samples so far: &quot;</span> &lt;&lt; samplesSoFar &lt;&lt; endl;
<a name="l01329"></a>01329           
<a name="l01330"></a>01330           <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01331"></a>01331             <span class="comment">//(*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);</span>
<a name="l01332"></a>01332           }
<a name="l01333"></a>01333         }
<a name="l01334"></a>01334       } <span class="comment">// finished taking samples for this loop</span>
<a name="l01335"></a>01335       <span class="keywordflow">else</span> {
<a name="l01336"></a>01336 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01337"></a>01337 <span class="preprocessor"></span>          sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<a name="l01338"></a>01338 <span class="preprocessor">        #endif</span>
<a name="l01339"></a>01339 <span class="preprocessor"></span>      }
<a name="l01340"></a>01340 
<a name="l01341"></a>01341       assert( (samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar) );
<a name="l01342"></a>01342 
<a name="l01343"></a>01343       <span class="comment">// back into loop</span>
<a name="l01344"></a>01344 <span class="preprocessor">      #if !defined(MYDEBUG_CALCS)</span>
<a name="l01345"></a>01345 <span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01346"></a>01346 <span class="preprocessor"></span>          <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
<a name="l01347"></a>01347           <span class="keywordflow">if</span> (loopCounter%100 == 0) {
<a name="l01348"></a>01348             cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
<a name="l01349"></a>01349           }
<a name="l01350"></a>01350 <span class="preprocessor">        #endif</span>
<a name="l01351"></a>01351 <span class="preprocessor"></span><span class="preprocessor">      #endif</span>
<a name="l01352"></a>01352 <span class="preprocessor"></span>    }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
<a name="l01353"></a>01353 
<a name="l01354"></a>01354     cancontinue = goodLoop;
<a name="l01355"></a>01355 
<a name="l01356"></a>01356     <span class="comment">// stop recording time here</span>
<a name="l01357"></a>01357     end = clock();  
<a name="l01358"></a>01358     timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l01359"></a>01359     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l01360"></a>01360     
<a name="l01361"></a>01361 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01362"></a>01362 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops, states counter is = &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l01363"></a>01363 <span class="preprocessor">    #endif</span>
<a name="l01364"></a>01364 <span class="preprocessor"></span>
<a name="l01365"></a>01365     cout &lt;&lt; <span class="stringliteral">&quot;\nnumber of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l01366"></a>01366 
<a name="l01367"></a>01367     <span class="comment">// free the random number generator</span>
<a name="l01368"></a>01368     gsl_rng_free (rgsl);
<a name="l01369"></a>01369 
<a name="l01370"></a>01370     cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
<a name="l01371"></a>01371 
<a name="l01372"></a>01372     <span class="comment">/* is all okay with the loop</span>
<a name="l01373"></a>01373 <span class="comment">     * and we have all our samples */</span>
<a name="l01374"></a>01374     <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {
<a name="l01375"></a>01375 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01376"></a>01376 <span class="preprocessor"></span>        <span class="comment">// output the overall collator</span>
<a name="l01377"></a>01377         samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<a name="l01378"></a>01378 <span class="preprocessor">      #endif</span>
<a name="l01379"></a>01379 <span class="preprocessor"></span>
<a name="l01380"></a>01380       <span class="comment">// make the return object be the average of the samples</span>
<a name="l01381"></a>01381       *samplesAvg = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l01382"></a>01382 
<a name="l01383"></a>01383       <span class="comment">// output the convergence diagnostics</span>
<a name="l01384"></a>01384       <span class="comment">//output file for leaves</span>
<a name="l01385"></a>01385       {
<a name="l01386"></a>01386         std::vector &lt; std::string &gt; colNames;
<a name="l01387"></a>01387         colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01388"></a>01388         colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01389"></a>01389         colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01390"></a>01390         colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<a name="l01391"></a>01391 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01392"></a>01392 <span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatFlag&quot;</span>);
<a name="l01393"></a>01393           colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01394"></a>01394 <span class="preprocessor">        #endif</span>
<a name="l01395"></a>01395 <span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
<a name="l01396"></a>01396         data.push_back(Ws_leavesPtr);
<a name="l01397"></a>01397         data.push_back(Bs_leavesPtr);
<a name="l01398"></a>01398         data.push_back(estVarV_leavesPtr);
<a name="l01399"></a>01399         data.push_back(rhat_leavesPtr);
<a name="l01400"></a>01400 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01401"></a>01401 <span class="preprocessor"></span>          data.push_back(rhatLeavesFlagPtr);
<a name="l01402"></a>01402           data.push_back(sampledIndPtr);
<a name="l01403"></a>01403 <span class="preprocessor">        #endif</span>
<a name="l01404"></a>01404 <span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
<a name="l01405"></a>01405         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesFilename, precData);
<a name="l01406"></a>01406       } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01407"></a>01407       
<a name="l01408"></a>01408       
<a name="l01409"></a>01409       <span class="comment">// output the leaves  as v_ij&#39;s)</span>
<a name="l01410"></a>01410       {
<a name="l01411"></a>01411         std::vector &lt; std::string &gt; colNames;
<a name="l01412"></a>01412         colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01413"></a>01413         
<a name="l01414"></a>01414         std::vector &lt; RealVec* &gt; data;
<a name="l01415"></a>01415         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01416"></a>01416         
<a name="l01417"></a>01417         <span class="keywordtype">int</span> precData = 10;
<a name="l01418"></a>01418         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_Leaves_Filename, precData);
<a name="l01419"></a>01419       }
<a name="l01420"></a>01420 
<a name="l01421"></a>01421 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01422"></a>01422 <span class="preprocessor"></span>      {
<a name="l01423"></a>01423         <span class="comment">/* output working calcs: all leaves for each chain, </span>
<a name="l01424"></a>01424 <span class="comment">         * running sums for each chain, sample variances,</span>
<a name="l01425"></a>01425 <span class="comment">         * overall running sums */</span>
<a name="l01426"></a>01426         std::vector &lt; std::string &gt; colNames;
<a name="l01427"></a>01427         colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01428"></a>01428         colNames.insert(colNames.end(), leavesRunningSumColNames.begin(), leavesRunningSumColNames.end());
<a name="l01429"></a>01429         colNames.insert(colNames.end(), leavesSampleVarianceColNames.begin(), leavesSampleVarianceColNames.end());
<a name="l01430"></a>01430         colNames.push_back(overallLeavesRunningSumColName);
<a name="l01431"></a>01431         
<a name="l01432"></a>01432         std::vector &lt; RealVec* &gt; data;
<a name="l01433"></a>01433         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01434"></a>01434         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumLeavesChainsPtr);
<a name="l01435"></a>01435         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesLeavesPtr);
<a name="l01436"></a>01436         data.push_back(runningSumLeavesOverallPtr);
<a name="l01437"></a>01437         
<a name="l01438"></a>01438         <span class="keywordtype">int</span> precData = 10;
<a name="l01439"></a>01439         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesWorkingCalcsFilename, precData);
<a name="l01440"></a>01440       
<a name="l01441"></a>01441       }
<a name="l01442"></a>01442 <span class="preprocessor">      #endif</span>
<a name="l01443"></a>01443 <span class="preprocessor"></span>
<a name="l01444"></a>01444       cout &lt;&lt; <span class="stringliteral">&quot;Burnt in at &quot;</span> &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l01445"></a>01445       
<a name="l01446"></a>01446       cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
<a name="l01447"></a>01447       cout &lt;&lt; <span class="stringliteral">&quot;Check output files\n\t&quot;</span> &lt;&lt; GRLeavesFilename
<a name="l01448"></a>01448               &lt;&lt; <span class="stringliteral">&quot;\nfor diagnostics&quot;</span> &lt;&lt; endl;
<a name="l01449"></a>01449       cout &lt;&lt; <span class="stringliteral">&quot;and for scalar values\n\t&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01450"></a>01450       <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01451"></a>01451         cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
<a name="l01452"></a>01452             &lt;&lt; <span class="stringliteral">&quot;\nfor log of samples&quot;</span> &lt;&lt;endl;
<a name="l01453"></a>01453       }
<a name="l01454"></a>01454 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01455"></a>01455 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; GRLeavesWorkingCalcsFilename
<a name="l01456"></a>01456             &lt;&lt; <span class="stringliteral">&quot;\nfor working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<a name="l01457"></a>01457 <span class="preprocessor">      #endif</span>
<a name="l01458"></a>01458 <span class="preprocessor"></span><span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01459"></a>01459 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l01460"></a>01460             &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
<a name="l01461"></a>01461             &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l01462"></a>01462             &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l01463"></a>01463 <span class="preprocessor">      #endif</span>
<a name="l01464"></a>01464 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01465"></a>01465     }
<a name="l01466"></a>01466     
<a name="l01467"></a>01467     
<a name="l01468"></a>01468     <span class="comment">//put this after clean up the newed stuff</span>
<a name="l01469"></a>01469     
<a name="l01470"></a>01470     <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<a name="l01471"></a>01471 <span class="comment">     *  really the only reason for failing here is that we did not get the right </span>
<a name="l01472"></a>01472 <span class="comment">     * number of samples, but might as well leave it like this - belt &amp; braces*/</span> 
<a name="l01473"></a>01473     <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
<a name="l01474"></a>01474       cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l01475"></a>01475       cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
<a name="l01476"></a>01476           &lt;&lt; GRLeavesFilename
<a name="l01477"></a>01477           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01478"></a>01478           
<a name="l01479"></a>01479       <span class="comment">// remove this afterwards!</span>
<a name="l01480"></a>01480       <span class="comment">// output the convergence diagnostics</span>
<a name="l01481"></a>01481       <span class="comment">//output file for leaves</span>
<a name="l01482"></a>01482       {
<a name="l01483"></a>01483         std::vector &lt; std::string &gt; colNames;
<a name="l01484"></a>01484         colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01485"></a>01485         colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01486"></a>01486         colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01487"></a>01487         colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<a name="l01488"></a>01488 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01489"></a>01489 <span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatFlag&quot;</span>);
<a name="l01490"></a>01490           colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01491"></a>01491 <span class="preprocessor">        #endif</span>
<a name="l01492"></a>01492 <span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
<a name="l01493"></a>01493         data.push_back(Ws_leavesPtr);
<a name="l01494"></a>01494         data.push_back(Bs_leavesPtr);
<a name="l01495"></a>01495         data.push_back(estVarV_leavesPtr);
<a name="l01496"></a>01496         data.push_back(rhat_leavesPtr);
<a name="l01497"></a>01497 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01498"></a>01498 <span class="preprocessor"></span>          data.push_back(rhatLeavesFlagPtr);
<a name="l01499"></a>01499           data.push_back(sampledIndPtr);
<a name="l01500"></a>01500 <span class="preprocessor">        #endif</span>
<a name="l01501"></a>01501 <span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
<a name="l01502"></a>01502         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesFilename, precData);
<a name="l01503"></a>01503       } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01504"></a>01504       
<a name="l01505"></a>01505       
<a name="l01506"></a>01506       <span class="comment">// output the leaves  as v_ij&#39;s)</span>
<a name="l01507"></a>01507       {
<a name="l01508"></a>01508         std::vector &lt; std::string &gt; colNames;
<a name="l01509"></a>01509         colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01510"></a>01510         
<a name="l01511"></a>01511         std::vector &lt; RealVec* &gt; data;
<a name="l01512"></a>01512         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01513"></a>01513         
<a name="l01514"></a>01514         <span class="keywordtype">int</span> precData = 10;
<a name="l01515"></a>01515         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_Leaves_Filename, precData);
<a name="l01516"></a>01516       }
<a name="l01517"></a>01517 
<a name="l01518"></a>01518 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01519"></a>01519 <span class="preprocessor"></span>        cout &lt;&lt; GRLeavesWorkingCalcsFilename &lt;&lt; endl;
<a name="l01520"></a>01520 <span class="preprocessor">      #endif</span>
<a name="l01521"></a>01521 <span class="preprocessor"></span>      <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01522"></a>01522         cout &lt;&lt; samplesLogFilename &lt;&lt; endl;
<a name="l01523"></a>01523       }
<a name="l01524"></a>01524 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01525"></a>01525 <span class="preprocessor"></span>        cout &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01526"></a>01526         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01527"></a>01527         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
<a name="l01528"></a>01528 <span class="preprocessor">      #endif</span>
<a name="l01529"></a>01529 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01530"></a>01530       
<a name="l01531"></a>01531       <span class="keywordflow">if</span> (!cancontinue) {
<a name="l01532"></a>01532         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
<a name="l01533"></a>01533       }
<a name="l01534"></a>01534       <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
<a name="l01535"></a>01535         <span class="comment">// we have not been able to get the required samples - need to give up</span>
<a name="l01536"></a>01536         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
<a name="l01537"></a>01537       }
<a name="l01538"></a>01538     }
<a name="l01539"></a>01539 
<a name="l01540"></a>01540 
<a name="l01541"></a>01541 
<a name="l01542"></a>01542 
<a name="l01543"></a>01543     <span class="comment">/* clean up the newed stuff</span>
<a name="l01544"></a>01544 <span class="comment">     * </span>
<a name="l01545"></a>01545 <span class="comment">     * note that this does not get cleaned up if we throw an exception in the while loop</span>
<a name="l01546"></a>01546 <span class="comment">     * - should probably deal with that at some point but all the newed memory will be </span>
<a name="l01547"></a>01547 <span class="comment">     * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<a name="l01548"></a>01548 <span class="comment">     * it will be okay for the moment */</span>
<a name="l01549"></a>01549 
<a name="l01550"></a>01550     vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01551"></a>01551     <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
<a name="l01552"></a>01552       <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l01553"></a>01553     }
<a name="l01554"></a>01554 
<a name="l01555"></a>01555     vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l01556"></a>01556     <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
<a name="l01557"></a>01557       <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l01558"></a>01558     }
<a name="l01559"></a>01559     
<a name="l01560"></a>01560     <span class="comment">/*</span>
<a name="l01561"></a>01561 <span class="comment">    for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<a name="l01562"></a>01562 <span class="comment">      if (NULL != *acit) delete (*acit);</span>
<a name="l01563"></a>01563 <span class="comment">    }</span>
<a name="l01564"></a>01564 <span class="comment">    */</span>
<a name="l01565"></a>01565     <span class="keyword">delete</span> samplesColl;
<a name="l01566"></a>01566     
<a name="l01567"></a>01567 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01568"></a>01568 <span class="preprocessor"></span>      <span class="keyword">delete</span> sampledIndPtr;
<a name="l01569"></a>01569 <span class="preprocessor">    #endif</span>
<a name="l01570"></a>01570 <span class="preprocessor"></span>    
<a name="l01571"></a>01571     <span class="comment">// leaves stuff</span>
<a name="l01572"></a>01572     <span class="keyword">delete</span> leavesPtr;  
<a name="l01573"></a>01573     
<a name="l01574"></a>01574 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01575"></a>01575 <span class="preprocessor"></span>      <span class="keyword">delete</span> runningSumLeavesOverallPtr;
<a name="l01576"></a>01576       <span class="keyword">delete</span> runningSumLeavesChainsPtr;
<a name="l01577"></a>01577       <span class="keyword">delete</span> sampleVariancesLeavesPtr;
<a name="l01578"></a>01578       <span class="keyword">delete</span> rhatLeavesFlagPtr;
<a name="l01579"></a>01579 <span class="preprocessor">    #endif</span>
<a name="l01580"></a>01580 <span class="preprocessor"></span>
<a name="l01581"></a>01581     <span class="keyword">delete</span> Ws_leavesPtr;
<a name="l01582"></a>01582     <span class="keyword">delete</span> Bs_leavesPtr;
<a name="l01583"></a>01583     <span class="keyword">delete</span> estVarV_leavesPtr;
<a name="l01584"></a>01584     <span class="keyword">delete</span> rhat_leavesPtr;
<a name="l01585"></a>01585 
<a name="l01586"></a>01586 
<a name="l01587"></a>01587       
<a name="l01588"></a>01588       <span class="comment">/*</span>
<a name="l01589"></a>01589 <span class="comment">      // Output the L1 error of states</span>
<a name="l01590"></a>01590 <span class="comment">      vector&lt; vector&lt;real&gt; &gt;::iterator it1;</span>
<a name="l01591"></a>01591 <span class="comment">      vector&lt;real&gt;::iterator it2;</span>
<a name="l01592"></a>01592 <span class="comment">      string stateL1FileName = &quot;GaussianStateL1FileName&quot;;</span>
<a name="l01593"></a>01593 <span class="comment">      stateL1FileName += stmH.str();</span>
<a name="l01594"></a>01594 <span class="comment">      stateL1FileName += &quot;.txt&quot;;</span>
<a name="l01595"></a>01595 <span class="comment">      oss.open(stateL1FileName.c_str());</span>
<a name="l01596"></a>01596 <span class="comment">      for (it1 = stateL1.begin(); it1 &lt; stateL1.end(); it1++) { </span>
<a name="l01597"></a>01597 <span class="comment">        for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<a name="l01598"></a>01598 <span class="comment">          oss &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l01599"></a>01599 <span class="comment">        }</span>
<a name="l01600"></a>01600 <span class="comment">        oss &lt;&lt; &quot;\n&quot;;</span>
<a name="l01601"></a>01601 <span class="comment">      }</span>
<a name="l01602"></a>01602 <span class="comment">      oss &lt;&lt; flush;</span>
<a name="l01603"></a>01603 <span class="comment">      oss.close();</span>
<a name="l01604"></a>01604 <span class="comment">      </span>
<a name="l01605"></a>01605 <span class="comment">      // Output the L1 error of avg states</span>
<a name="l01606"></a>01606 <span class="comment">      string avgL1FileName = &quot;GaussianAvgL1FileName&quot;;</span>
<a name="l01607"></a>01607 <span class="comment">      avgL1FileName += stmH.str();</span>
<a name="l01608"></a>01608 <span class="comment">      avgL1FileName += &quot;.txt&quot;;</span>
<a name="l01609"></a>01609 <span class="comment">      oss.open(avgL1FileName.c_str());</span>
<a name="l01610"></a>01610 <span class="comment">      for (it1 = avgStateL1.begin(); it1 &lt; avgStateL1.end(); it1++) { </span>
<a name="l01611"></a>01611 <span class="comment">        for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<a name="l01612"></a>01612 <span class="comment">          oss &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l01613"></a>01613 <span class="comment">        }</span>
<a name="l01614"></a>01614 <span class="comment">        oss &lt;&lt; &quot;\n&quot;;</span>
<a name="l01615"></a>01615 <span class="comment">      }</span>
<a name="l01616"></a>01616 <span class="comment">      oss &lt;&lt; flush;</span>
<a name="l01617"></a>01617 <span class="comment">      oss.close();</span>
<a name="l01618"></a>01618 <span class="comment">      cout &lt;&lt; &quot;L1-errors output to &quot; &lt;&lt; avgL1FileName &lt;&lt; &quot; and &quot; &lt;&lt; stateL1FileName &lt;&lt; endl;</span>
<a name="l01619"></a>01619 <span class="comment">      */</span>
<a name="l01620"></a>01620       
<a name="l01621"></a>01621       <span class="comment">/*</span>
<a name="l01622"></a>01622 <span class="comment">      //==============get distribution parameters==========================//</span>
<a name="l01623"></a>01623 <span class="comment">      // read input from mix*.txt</span>
<a name="l01624"></a>01624 <span class="comment">      string mixfileName;</span>
<a name="l01625"></a>01625 <span class="comment">      mixfileName = &quot;MixtureFiles/mix&quot;;</span>
<a name="l01626"></a>01626 <span class="comment">      std::ostringstream stmMix;</span>
<a name="l01627"></a>01627 <span class="comment">      stmMix &lt;&lt; 1;</span>
<a name="l01628"></a>01628 <span class="comment">      mixfileName += stmMix.str();</span>
<a name="l01629"></a>01629 <span class="comment">      mixfileName += &quot;.txt&quot;;</span>
<a name="l01630"></a>01630 <span class="comment">      </span>
<a name="l01631"></a>01631 <span class="comment">      ifstream infile(mixfileName.c_str());</span>
<a name="l01632"></a>01632 <span class="comment">      double Weight1, Weight2, Mean1, Mean2, Var1, Var2;</span>
<a name="l01633"></a>01633 <span class="comment">      double W, M, V;</span>
<a name="l01634"></a>01634 <span class="comment">      </span>
<a name="l01635"></a>01635 <span class="comment">      // create vectors for Weight, Mean, Variance</span>
<a name="l01636"></a>01636 <span class="comment">      vector&lt;double&gt; Weight;</span>
<a name="l01637"></a>01637 <span class="comment">      vector&lt;double&gt; Mean;</span>
<a name="l01638"></a>01638 <span class="comment">      vector&lt;double&gt; Sigma;</span>
<a name="l01639"></a>01639 <span class="comment">      </span>
<a name="l01640"></a>01640 <span class="comment">      cout &lt;&lt; &quot;Reading in parameters of mixture &quot; &lt;&lt; 1 &lt;&lt; endl;</span>
<a name="l01641"></a>01641 <span class="comment">      ifstream file; // create file for input</span>
<a name="l01642"></a>01642 <span class="comment">      file.open(mixfileName.c_str());</span>
<a name="l01643"></a>01643 <span class="comment">      // check if this file exists or not</span>
<a name="l01644"></a>01644 <span class="comment">      if ( !file ) { // exit if file doesn&#39;t exists</span>
<a name="l01645"></a>01645 <span class="comment">        cerr &lt;&lt; &quot;Could not open &quot; &lt;&lt; mixfileName &lt;&lt; &quot;. It does not exist.&quot; </span>
<a name="l01646"></a>01646 <span class="comment">             &lt;&lt; endl;</span>
<a name="l01647"></a>01647 <span class="comment">        exit(1);</span>
<a name="l01648"></a>01648 <span class="comment">      }</span>
<a name="l01649"></a>01649 <span class="comment">      while ( !infile.eof() ) {</span>
<a name="l01650"></a>01650 <span class="comment">        infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;</span>
<a name="l01651"></a>01651 <span class="comment">        W=Weight1/Weight2;</span>
<a name="l01652"></a>01652 <span class="comment">        Weight.push_back(W);</span>
<a name="l01653"></a>01653 <span class="comment">        M=Mean1/Mean2;</span>
<a name="l01654"></a>01654 <span class="comment">        Mean.push_back(M);</span>
<a name="l01655"></a>01655 <span class="comment">        V=Var1/Var2;</span>
<a name="l01656"></a>01656 <span class="comment">        Sigma.push_back(sqrt(V));</span>
<a name="l01657"></a>01657 <span class="comment">      }</span>
<a name="l01658"></a>01658 <span class="comment">      Weight.pop_back();</span>
<a name="l01659"></a>01659 <span class="comment">      Mean.pop_back();</span>
<a name="l01660"></a>01660 <span class="comment">      Sigma.pop_back();</span>
<a name="l01661"></a>01661 <span class="comment">      </span>
<a name="l01662"></a>01662 <span class="comment">      //put the parameters as data members of the structure</span>
<a name="l01663"></a>01663 <span class="comment">      FinMix mixt;</span>
<a name="l01664"></a>01664 <span class="comment">      mixt.W = Weight; mixt.M = Mean; mixt.S = Sigma;</span>
<a name="l01665"></a>01665 <span class="comment">          </span>
<a name="l01666"></a>01666 <span class="comment">          double Tol = 1e-15; // tolerance for root finding and integration routines</span>
<a name="l01667"></a>01667 <span class="comment">        cout &lt;&lt; &quot;Tolerance is: &quot; &lt;&lt; Tol &lt;&lt; endl;</span>
<a name="l01668"></a>01668 <span class="comment">        int Deg = 2; // Degree of Taylor series.</span>
<a name="l01669"></a>01669 <span class="comment">          real trueIAE = mid(samplesAvg-&gt;getFinMixIntervalIAE(mixt, Tol, Deg)); </span>
<a name="l01670"></a>01670 <span class="comment">          cout &lt;&lt; &quot;True IAE is &quot; &lt;&lt; trueIAE &lt;&lt; endl;</span>
<a name="l01671"></a>01671 <span class="comment">      //end of actual</span>
<a name="l01672"></a>01672 <span class="comment">      */</span>
<a name="l01673"></a>01673 
<a name="l01674"></a>01674       
<a name="l01675"></a>01675       <span class="comment">// now get the IAE of samplesAvg</span>
<a name="l01676"></a>01676       real thisIAE = samplesAvg-&gt;getMappedIAE(nodeEst, pavingBox); 
<a name="l01677"></a>01677       <span class="comment">//output IAE to file</span>
<a name="l01678"></a>01678       <span class="keywordtype">string</span> IAEFileName;
<a name="l01679"></a>01679       IAEFileName = <span class="stringliteral">&quot;GaussianIAE&quot;</span>;
<a name="l01680"></a>01680       IAEFileName += stmH.str();
<a name="l01681"></a>01681       IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01682"></a>01682       oss.open(IAEFileName.c_str());
<a name="l01683"></a>01683       oss &lt;&lt; thisIAE &lt;&lt;  endl;
<a name="l01684"></a>01684     <span class="comment">//  oss &lt;&lt; thisIAE &lt;&lt; &quot;\t&quot; &lt;&lt; trueIAE &lt;&lt; endl;</span>
<a name="l01685"></a>01685       oss &lt;&lt; flush;
<a name="l01686"></a>01686       oss.close();
<a name="l01687"></a>01687       cout &lt;&lt; <span class="stringliteral">&quot;IAE &quot;</span> &lt;&lt; thisIAE &lt;&lt; <span class="stringliteral">&quot; output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l01688"></a>01688       
<a name="l01689"></a>01689       
<a name="l01690"></a>01690       <span class="comment">//output time taken to file</span>
<a name="l01691"></a>01691       <span class="keywordtype">string</span> timeFileName;
<a name="l01692"></a>01692       timeFileName = <span class="stringliteral">&quot;GaussianTime&quot;</span>;
<a name="l01693"></a>01693       timeFileName += stmH.str();
<a name="l01694"></a>01694       timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01695"></a>01695       oss.open(timeFileName.c_str());
<a name="l01696"></a>01696       oss &lt;&lt; timing &lt;&lt; endl ;
<a name="l01697"></a>01697       oss &lt;&lt; flush;
<a name="l01698"></a>01698       oss.close();
<a name="l01699"></a>01699       cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl &lt;&lt; endl;
<a name="l01700"></a>01700   
<a name="l01701"></a>01701       cout &lt;&lt; <span class="stringliteral">&quot;Remember to do height normalization with: &quot;</span> &lt;&lt; totalArea &lt;&lt; endl;
<a name="l01702"></a>01702   
<a name="l01703"></a>01703     <span class="comment">//return samplesAvg;</span>
<a name="l01704"></a>01704       
<a name="l01705"></a>01705     } <span class="comment">// end check on successful insertion of data into histograms</span>
<a name="l01706"></a>01706     
<a name="l01707"></a>01707     <span class="keywordflow">else</span> {
<a name="l01708"></a>01708       <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
<a name="l01709"></a>01709     }
<a name="l01710"></a>01710     
<a name="l01711"></a>01711     
<a name="l01712"></a>01712     <span class="keywordtype">string</span> histFileName;
<a name="l01713"></a>01713       histFileName = <span class="stringliteral">&quot;FinalHist&quot;</span>;
<a name="l01714"></a>01714       histFileName += stmH.str();
<a name="l01715"></a>01715       histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01716"></a>01716     samplesAvg-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(histFileName);
<a name="l01717"></a>01717     <span class="comment">/*</span>
<a name="l01718"></a>01718 <span class="comment">    string leafFile = &quot;LeafLevel.txt&quot;;</span>
<a name="l01719"></a>01719 <span class="comment">    oss.open(leafFile.c_str());</span>
<a name="l01720"></a>01720 <span class="comment">      oss &lt;&lt; samplesAvg-&gt;getLeafLevelsString() &lt;&lt; endl ;</span>
<a name="l01721"></a>01721 <span class="comment">      oss &lt;&lt; flush;</span>
<a name="l01722"></a>01722 <span class="comment">      oss.close();</span>
<a name="l01723"></a>01723 <span class="comment">    */</span>
<a name="l01724"></a>01724     <span class="keyword">delete</span> samplesAvg;
<a name="l01725"></a>01725 <span class="comment">//    delete theData;</span>
<a name="l01726"></a>01726     
<a name="l01727"></a>01727   } <span class="comment">// end of numHist</span>
<a name="l01728"></a>01728   
<a name="l01729"></a>01729   <span class="comment">//free the random number generator</span>
<a name="l01730"></a>01730   gsl_rng_free(r);
<a name="l01731"></a>01731   <span class="comment">//gsl_ran_discrete_free (gslpdfstruct);</span>
<a name="l01732"></a>01732   
<a name="l01733"></a>01733   
<a name="l01734"></a>01734   <span class="comment">//can i make the doMCMCGRAuto function to be a void function?</span>
<a name="l01735"></a>01735   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l01736"></a>01736   <span class="keywordflow">return</span> coll;
<a name="l01737"></a>01737 
<a name="l01738"></a>01738 } <span class="comment">// end of MCMC test program</span>
<a name="l01739"></a>01739 
<a name="l01740"></a>01740 
<a name="l01741"></a>01741 
<a name="l01742"></a>01742 
<a name="l01743"></a>01743 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPSamplingGaussian_8cpp.shtml">MappedSPSamplingGaussian.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
