<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CoverageNormal.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('CoverageNormal_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">CoverageNormal.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;iostream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_cdf.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_integration.h&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;boost/math/distributions/normal.hpp&gt;</code><br/>
</div>
<p><a href="CoverageNormal_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structFinMix.shtml">FinMix</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#a9021606bd7e0ccdbdb204b596e265de0">FinMixPDF</a> (double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#ae8fb9bc2f15455a39056110b8d4032d4">FinMixCDF</a> (double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> (double, void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> (double, void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#ab91f1fa7223911ea415a2637eadb6a26">FinMixAbs</a> (double, void *)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the absolute error of a finite mixture at x.  <a href="#ab91f1fa7223911ea415a2637eadb6a26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a> (double, double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#ac799088b059b39fe7ba90b2baeaf0208">dpFinMixIAEBoun</a> (double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CoverageNormal_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a416f731e5ce582c3e5c503b5c2aae7b3"></a><!-- doxytag: member="CoverageNormal.cpp::dpFinMixIAE" ref="a416f731e5ce582c3e5c503b5c2aae7b3" args="(double, double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dotprecision <a class="el" href="HoldOutFinMix_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fhat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>W</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>M</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>S</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">477</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">dpFinMixIAE()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">dpFinMixIAE()</a>.</p>
<div class="fragment"><pre class="fragment">{
dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
dpFinMixIAE = 0.0;
<span class="keywordtype">double</span> result = 0.0;

<span class="comment">//accumulate(dpFinMixIAE, result, 1.0);</span>


<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac799088b059b39fe7ba90b2baeaf0208"></a><!-- doxytag: member="CoverageNormal.cpp::dpFinMixIAEBoun" ref="ac799088b059b39fe7ba90b2baeaf0208" args="(double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dotprecision <a class="el" href="HoldOutFinMix_8cpp.shtml#ac799088b059b39fe7ba90b2baeaf0208">dpFinMixIAEBoun</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>W</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>M</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>S</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00490">490</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>.</p>
<div class="fragment"><pre class="fragment">{
dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
dpFinMixIAEBoun = 0.0;
<span class="keywordtype">double</span> Ncomp = W.size();
<span class="keywordtype">double</span> cdfLeft = 0.0;
<span class="keywordtype">double</span> cdfRight = 0.0;
<span class="keywordtype">int</span> c;

<span class="keywordflow">for</span> (c=0; c &lt; Ncomp; c++)
{
normal component(M[c], S[c]);
cdfLeft += W[c]*(cdf(component, x1));
cdfRight += 1-W[c]*(cdf(component, x2));
}

accumulate(dpFinMixIAEBoun, cdfLeft, 1.0);
accumulate(dpFinMixIAEBoun, cdfRight, 1.0);

<span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab91f1fa7223911ea415a2637eadb6a26"></a><!-- doxytag: member="CoverageNormal.cpp::FinMixAbs" ref="ab91f1fa7223911ea415a2637eadb6a26" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ab91f1fa7223911ea415a2637eadb6a26">FinMixAbs</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the absolute error of a finite mixture at x. </p>
<p>Function to get absolute error </p>

<p>Definition at line <a class="el" href="errorfunc_8cpp_source.shtml#l00191">191</a> of file <a class="el" href="errorfunc_8cpp_source.shtml">errorfunc.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8hpp_source.shtml#l00223">FinMix::fhat</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00191">FinMixAbs()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00162">FinMixPDF()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
<a class="code" href="structFinMix.shtml">FinMix</a> mixt = *(<a class="code" href="structFinMix.shtml">FinMix</a> *) params;
<span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a> = fabs(mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> - <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(x, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>));
<span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae8fb9bc2f15455a39056110b8d4032d4"></a><!-- doxytag: member="CoverageNormal.cpp::FinMixCDF" ref="ae8fb9bc2f15455a39056110b8d4032d4" args="(double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ae8fb9bc2f15455a39056110b8d4032d4">FinMixCDF</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>W</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>M</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>S</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to get CDF </p>

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00447">447</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">double</span> Ncomp = W.size();
<span class="keywordtype">double</span> CDF = 0;
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
{
normal component(M[c], S[c]);
CDF += W[c]*(cdf(component, x2) - cdf(component, x1));
<span class="comment">//cout &lt;&lt; &quot;CDF is: &quot; &lt;&lt; CDF &lt;&lt; endl;</span>
}
<span class="keywordflow">return</span> CDF;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab92e3b135b92374b9442d24e210139ad"></a><!-- doxytag: member="CoverageNormal.cpp::FinMixInt1" ref="ab92e3b135b92374b9442d24e210139ad" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">461</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">FinMixInt1()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">FinMixInt1()</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">double</span> sigma = *(<span class="keywordtype">double</span> *) params;
<span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> =<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(x/sigma));
<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb047f418e144a9bc7d15f6bb2515e34"></a><!-- doxytag: member="CoverageNormal.cpp::FinMixInt2" ref="afb047f418e144a9bc7d15f6bb2515e34" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>params</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">469</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">FinMixInt2()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">FinMixInt2()</a>.</p>
<div class="fragment"><pre class="fragment">{
vector&lt;double&gt; MS = *(vector&lt;double&gt; *) params;
<span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*((x-MS[0])/MS[1] + (x-MS[2])/MS[3]));
<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9021606bd7e0ccdbdb204b596e265de0"></a><!-- doxytag: member="CoverageNormal.cpp::FinMixPDF" ref="a9021606bd7e0ccdbdb204b596e265de0" args="(double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#a9021606bd7e0ccdbdb204b596e265de0">FinMixPDF</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>W</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>M</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>S</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to get PDF </p>

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00422">422</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">int</span> Ncomp = W.size();


<span class="keywordtype">double</span> PDF = 0;
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
{
<span class="comment">//transfer to standard normal</span>
<span class="keywordtype">double</span>  z =  (x-M[c])/S[c];
<span class="keywordtype">double</span> term = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((z-M[c])/S[c], 2);
PDF += W[c]*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*term)/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI);
}  
<span class="keywordflow">return</span> PDF;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="CoverageNormal.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00085">85</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAE</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAEBoun</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01386">F()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00223">FinMix::fhat</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00191">FinMixAbs()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00176">FinMixCDF()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00895">subpavings::AdaptiveHistogram::insertRvectorsFromTxt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00503">Nbin</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="comment">// user-input Kn and which dataset to use</span>
<span class="keywordtype">int</span> mix = atoi(argv[1]);
<span class="keywordtype">int</span> D=atoi(argv[2]);
<span class="keywordtype">int</span> step=atoi(argv[3]);

<span class="comment">// Read mixture file</span>
<span class="keywordtype">string</span> mixfileName;
mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
std::ostringstream stm1;
stm1 &lt;&lt; mix;
mixfileName += stm1.str();
mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
ifstream infile(mixfileName.c_str());
<span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<span class="keywordtype">double</span> W, M, V;

<span class="comment">// create vectors for Weight, Mean, Sigma</span>
vector&lt;double&gt; Weight;
vector&lt;double&gt; Mean;
vector&lt;double&gt; Sigma;

<span class="keywordflow">while</span> ( !infile.eof() )
{
infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;

W=Weight1/Weight2;
Weight.push_back(W);
M=Mean1/Mean2;
Mean.push_back(M);
V=Var1/Var2;
Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
}

Weight.pop_back();
Mean.pop_back();
Sigma.pop_back();

<span class="comment">// get number of components in mixture</span>
<span class="keywordtype">int</span> Ncomp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;

cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Ncomp &lt;&lt; <span class="stringliteral">&quot; components in mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;

<span class="comment">// put the parameters as data members of the structure</span>
<a class="code" href="structFinMix.shtml">FinMix</a> mixt;
mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;

<span class="comment">// Build the Histogram</span>
<span class="comment">// make a box: the same box will be used by all histograms</span>
<span class="comment">// so should be big enough for all of them</span>
    ivector pavingBox(1);
    interval dim(-10,10);
    pavingBox[1] = dim;


cout &lt;&lt; <span class="stringliteral">&quot;Doing hist number &quot;</span> &lt;&lt; D &lt;&lt; endl;

<span class="comment">// create a name for the file of random variates.</span>
<span class="keywordtype">string</span> samplesfileName;
samplesfileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
std::ostringstream stm2;
stm2 &lt;&lt; D;
samplesfileName += stm1.str();
samplesfileName += <span class="stringliteral">&quot;Data&quot;</span>;
samplesfileName += stm2.str();
samplesfileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>

cout &lt;&lt; <span class="stringliteral">&quot;Reading data from file &quot;</span> &lt;&lt; samplesfileName  &lt;&lt; endl;
<span class="keywordtype">int</span> n = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(samplesfileName);
cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; random variables &quot;</span> &lt;&lt; n &lt;&lt; endl;

<span class="comment">// maxCount</span>
<span class="keywordtype">size_t</span> maxCount = n;

<span class="comment">// set up containers</span>
 vector&lt;double&gt; timeVec;
 vector&lt;double&gt;::iterator itTimeVec;

 vector&lt;dotprecision&gt; dpIAEVec;
 vector&lt;dotprecision&gt;::iterator dpIAEVecIt;

 vector&lt;int&gt; nBoxVec;
 vector&lt;int&gt;::iterator nBoxVecIt;

 vector&lt;double&gt; covAllVec;
 vector&lt;double&gt;::iterator itCovAllVec;

 vector&lt;double&gt; diffMuVec;
 vector&lt;double&gt;::iterator itDiffMuVec;
 
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> mC = 1; mC &lt;= maxCount; mC++)
{
    <span class="keywordtype">int</span> maxC = mC*step;
    cout &lt;&lt; <span class="stringliteral">&quot;Maximum count is : &quot;</span> &lt;&lt; maxC &lt;&lt; endl;
  
   <span class="comment">// set up parameters for prioritySplit</span>
   <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(maxC);
   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;

    <span class="comment">// fileName to store output from histogram constructed</span>
    <span class="keywordtype">string</span> fileName;
    <span class="keywordtype">bool</span> successfulInsertion; <span class="comment">//for successful insertion of data from container</span>
    <span class="keywordtype">bool</span> successfulPQSplit;

        <span class="comment">// Construct histogram</span>
        clock_t start, end;
  start = clock();
        <span class="comment">// make an Adaptive Histogram object with a specified box</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
  <span class="comment">// AdaptiveHistogram myHist;</span>

        successfulInsertion = myHist.insertRvectorsFromTxt(samplesfileName);

        <span class="keywordflow">if</span> (successfulInsertion) {
        successfulPQSplit = myHist.prioritySplit(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
        
       end = clock();
       <span class="keywordtype">double</span> timing;
       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
       timeVec.push_back(timing);
       } <span class="comment">// end of successfulInsertion</span>
 
       successfulInsertion = successfulInsertion &amp;&amp; successfulPQSplit;
  

        <span class="comment">// only do more if some data was fed in</span>
        <span class="keywordflow">if</span>(successfulInsertion) {

            <span class="comment">// optional</span>
            <span class="comment">// To realise a file output</span>
            <span class="comment">// create a name for the file to output</span>
  <span class="comment">//    fileName = &quot;FinMix&quot;;</span>
            <span class="comment">// convert j and k to a string</span>
       <span class="comment">//     std::ostringstream stm3;</span>
       <span class="comment">//     stm3 &lt;&lt; maxC;</span>
            <span class="comment">// add the stringed j to the filename</span>
    <span class="comment">//        fileName += stm1.str();</span>
    <span class="comment">//        fileName = &quot;AdapHist&quot;;</span>
<span class="comment">//      fileName += stm3.str();</span>
<span class="comment">//            fileName += &quot;Data&quot;;</span>
<span class="comment">//            fileName += stm2.str();</span>
    <span class="comment">//  fileName += &quot;Data&quot;;</span>
<span class="comment">//      fileName += stm2.str();</span>
<span class="comment">//            fileName += &quot;.txt&quot;; // and finish the filename</span>
<span class="comment">//            myHist.outputToTxtTabs(fileName);</span>
  
          <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
          <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
          myHist.getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
          <span class="comment">// container is filled by reading leaves off tree from left to right</span>

          <span class="comment">// a container for the counts</span>
          <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
                            <span class="comment">// the iterator is typedefed as IntVecItr</span>
          <span class="comment">// a container for the boxes</span>
          vector&lt;ivector&gt; boxes;
          vector&lt;ivector&gt;::iterator itBoxes;
          <span class="comment">// a container for the volumes</span>
          vector&lt;double&gt; volumes;
          <span class="comment">// a valarray container for the node levels, sized to fit</span>
          valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.getSubPaving()));
          <span class="comment">// a container for fhat</span>
          vector&lt;double&gt; fhat;
          vector&lt;double&gt;::iterator itFhat;
          <span class="comment">// a container for Fstar</span>
          vector&lt;double&gt; Fstar;
         
          <span class="keywordtype">double</span> diffMu = 0;

       <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
        <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
        <span class="comment">// get the counts in all the leaves</span>
        counts.push_back((*it)-&gt;getCounter());
        <span class="comment">// get the boxes from all the leaves</span>
        boxes.push_back((*it)-&gt;getBox());
        <span class="comment">// get the volumes of all the leaves</span>
        volumes.push_back((*it)-&gt;nodeVolume());
        <span class="comment">// get fhat for all leaves</span>
        fhat.push_back(((*it)-&gt;getCounter()*1.0)/((*it)-&gt;nodeVolume())/(n*1.0));

        rvector xuppVec = Sup((*it)-&gt;getBox());
        <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
        rvector xlowVec = Inf((*it)-&gt;getBox());
        <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
        <span class="keywordtype">double</span> CDF=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
        Fstar.push_back(CDF);
        <span class="comment">// calculate \mu_n - \mu</span>
        diffMu += fabs((*it)-&gt;getCounter()*1.0/(n*1.0) - CDF);
       } <span class="comment">// end of iterating through leaves</span>

      diffMuVec.push_back(diffMu);
<span class="comment">//---Error calculations---</span>
<span class="comment">//----Integrated Absolute Error (IAE)-----</span>
dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
dpIAE = 0.0;

<span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Nbin &lt;&lt; <span class="stringliteral">&quot; leaves in histogram &quot;</span> &lt;&lt; D &lt;&lt; endl;
nBoxVec.push_back(Nbin);


gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<span class="keywordtype">double</span> result = 0.0;
<span class="keywordtype">double</span> error;
gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
F.params =  &amp;mixt;

<span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; k++){
<span class="comment">//  cout &lt;&lt; &quot;calculating error for bin &quot; &lt;&lt; j+1 &lt;&lt; endl;</span>
  mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[k];
  rvector xuppVec = Sup(boxes[k]);
  <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
  rvector xlowVec = Inf(boxes[k]);
  <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
  gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
  accumulate(dpIAE, result, 1.0);
}
<span class="comment">// Accounting for the boundaries</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Calculating IAE of the boundaries&quot;</span> &lt;&lt; endl;

  rvector xuppVec1 = Sup(boxes[Nbin-1]);
  <span class="keywordtype">double</span> xupp1 = _double(xuppVec1[1]);
  rvector xlowVec1 = Inf(boxes[0]);
  <span class="keywordtype">double</span> xlow1 = _double(xlowVec1[1]);
  dpIAEBoun = <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(xlow1, xupp1, Weight, Mean, Sigma);
  dpIAE += <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
  cout&lt;&lt;dpIAE&lt;&lt;endl;

  gsl_integration_workspace_free (w);
  <span class="comment">// store IAE in vector</span>
  dpIAEVec.push_back(dpIAE);
 
<span class="comment">//------------Calculate lower and upper bounds---------------------</span>
<span class="keywordtype">double</span> totVol = 20;
cout &lt;&lt; <span class="stringliteral">&quot;total volume: &quot;</span> &lt;&lt; totVol &lt;&lt; endl;
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> a=1; a&lt;=90; a++){
<span class="keywordtype">double</span> alpha = a*0.01;
<span class="keywordtype">double</span> yesCovOne = 0;

  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i =0; i &lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; i++){
  <span class="comment">// c</span>
  <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*volumes[i])*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(totVol/volumes[i])/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
 
  <span class="comment">// lower bound</span>
  <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat[i])-c, 0), 2);
  <span class="comment">// upper bound</span>
  <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat[i]) + c, 2);

  <span class="keywordflow">if</span> (Fstar[i]/volumes[i] &gt;= Lb &amp;&amp; Fstar[i]/volumes[i] &lt;= Ub)
  { yesCovOne += 1;}
}
<span class="comment">//cout &lt;&lt; yesCovOne*1.0/Nbin*1.0 &lt;&lt; &quot; bins inside envelope&quot; &lt;&lt; endl;</span>
covAllVec.push_back(yesCovOne*1.0/(Nbin*1.0));
} <span class="comment">// end of loop for alpha</span>

ofstream oss;
oss &lt;&lt; scientific;
oss.precision(5);
<span class="keywordtype">string</span> CIFileName;
CIFileName = <span class="stringliteral">&quot;FinMixCI&quot;</span>;
CIFileName += stm2.str();
CIFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
oss.open(CIFileName.c_str());
<span class="keywordflow">for</span> (itCovAllVec = covAllVec.begin(); itCovAllVec &lt; covAllVec.end(); itCovAllVec++){
oss &lt;&lt; (*itCovAllVec) &lt;&lt; endl ;
}
oss &lt;&lt; flush;
oss.close();
cout &lt;&lt; <span class="stringliteral">&quot;CI&#39;s output to &quot;</span> &lt;&lt; CIFileName &lt;&lt; endl;

   }<span class="comment">// end of succesfulInsertion</span>
 } <span class="comment">// end of for loop for maxC</span>

<span class="comment">// output IAE to file</span>
<span class="keywordtype">string</span> IAEFileName;
ofstream oss;
oss &lt;&lt; scientific;
oss.precision(5);

IAEFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
IAEFileName += stm1.str();
IAEFileName += <span class="stringliteral">&quot;IAEData&quot;</span>;
IAEFileName += stm2.str();
IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
oss.open(IAEFileName.c_str());
<span class="keywordflow">for</span> (dpIAEVecIt = dpIAEVec.begin(); dpIAEVecIt &lt; dpIAEVec.end(); dpIAEVecIt++){
oss &lt;&lt; (*dpIAEVecIt) &lt;&lt; endl;
}
oss &lt;&lt; flush;
oss.close();
cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;

<span class="keywordtype">string</span> timeFileName;
timeFileName = <span class="stringliteral">&quot;FinMixTimeData&quot;</span>;
timeFileName += stm2.str();
timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
oss.open(timeFileName.c_str());
<span class="keywordflow">for</span> (itTimeVec = timeVec.begin(); itTimeVec &lt; timeVec.end(); itTimeVec++){
oss &lt;&lt; (*itTimeVec) &lt;&lt; endl ;
}
oss &lt;&lt; flush;
oss.close();
cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl;

<span class="comment">//------output Epsilon------------------</span>
<span class="keywordtype">string</span> diffMuFileName;
diffMuFileName = <span class="stringliteral">&quot;FinMixDiffMu&quot;</span>;
diffMuFileName += stm2.str();
diffMuFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
oss.open(diffMuFileName.c_str());
<span class="keywordflow">for</span> (itDiffMuVec = diffMuVec.begin(); itDiffMuVec &lt; diffMuVec.end(); itDiffMuVec++){
oss &lt;&lt; (*itDiffMuVec) &lt;&lt; endl ;
}
oss &lt;&lt; flush;
oss.close();
cout &lt;&lt; <span class="stringliteral">&quot;Diff Mu output to &quot;</span> &lt;&lt; diffMuFileName &lt;&lt; endl;


<span class="keywordtype">string</span> BoxCountFileName;
BoxCountFileName = <span class="stringliteral">&quot;FinMixBoxCount&quot;</span>;
BoxCountFileName += stm2.str();
BoxCountFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
oss.open(BoxCountFileName.c_str());
<span class="keywordflow">for</span> (nBoxVecIt = nBoxVec.begin(); nBoxVecIt &lt; nBoxVec.end(); nBoxVecIt++){
oss &lt;&lt; (*nBoxVecIt) &lt;&lt; endl ;
}
oss &lt;&lt; flush;
oss.close();
cout &lt;&lt; <span class="stringliteral">&quot;Box Count output to &quot;</span> &lt;&lt; BoxCountFileName &lt;&lt; endl;
 <span class="keywordflow">return</span> 0;

} <span class="comment">// end of FinMixPQLeaves program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="CoverageNormal_8cpp.shtml">CoverageNormal.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
