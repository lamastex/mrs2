<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: mappedspnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('mappedspnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">mappedspnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mappedspnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2010, 2011, 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">/*!/ \file</span>
<a name="l00022"></a>00022 <span class="comment">\brief MappedSPnode definitions.</span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __MAPPEDSP_HPP__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __MAPPEDSP_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="comment">// put it all in the header for the moment and sort out the template issues later</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="sp__expand__visitor_8hpp.shtml" title="declarations for SPExpandVisitor">sp_expand_visitor.hpp</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="sp__value__visitor_8hpp.shtml" title="declarations for SPValueVisitor">sp_value_visitor.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="subpaving__exception_8hpp.shtml" title="SubpavingException declarations.">subpaving_exception.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">//#define MYDEBUGVISITOR</span>
<a name="l00051"></a>00051 <span class="comment">//#define MYDEBUGVISITORE</span>
<a name="l00052"></a>00052 <span class="comment">//#define SLICE_OUTPUT</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="keyword">namespace </span>subpavings {
<a name="l00055"></a>00055   
<a name="l00056"></a>00056   
<a name="l00091"></a>00091     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00092"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml">00092</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> {
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="keyword">public</span>:
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="comment">// ------------------------ public member functions ----------------</span>
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8f23f414976c6bc3409de02288496e04">00102</a>     <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8f23f414976c6bc3409de02288496e04" title="Destructor.">~MappedSPnode</a>()  {}
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00107"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117">00107</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>() {}   <span class="comment">// uses the base SPnode class default constructor</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 
<a name="l00113"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a5c67c4c7aec0a3ce461b7ac459ad70c2">00113</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> ivector&amp; v)
<a name="l00114"></a>00114         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v) {}
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00120"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a866ab9d7d7e517e5c403588f12d8e919">00120</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb)
<a name="l00121"></a>00121         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(lb) {}
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00128"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#afe15c759857516d725298a1392ab6f07">00128</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> ivector&amp; v, <span class="keyword">const</span> T&amp; r)
<a name="l00129"></a>00129         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v), <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>(r)
<a name="l00130"></a>00130     {}
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 
<a name="l00136"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a5911cc25e5152fe9cced953de14707e7">00136</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keyword">const</span> T&amp; r)
<a name="l00137"></a>00137         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(lb), <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>(r)
<a name="l00138"></a>00138     {}
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00146"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a528b15231c2a8476fdeb9283137dc9b1">00146</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other)
<a name="l00147"></a>00147         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>()
<a name="l00148"></a>00148     {
<a name="l00149"></a>00149     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00150"></a>00150       <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152   
<a name="l00153"></a>00153     <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="comment">//recursion on the children</span>
<a name="l00156"></a>00156     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00157"></a>00157       <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(
<a name="l00158"></a>00158         *(other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160     <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00163"></a>00163       <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(
<a name="l00164"></a>00164         *(other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166     <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00167"></a>00167         
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169   
<a name="l00175"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e0ee96e161385b67f5ccc39b4212bdf">00175</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&amp; other)
<a name="l00176"></a>00176         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>()
<a name="l00177"></a>00177     {
<a name="l00178"></a>00178     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00179"></a>00179       <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181   
<a name="l00182"></a>00182     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l00183"></a>00183     <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">//recursion on the children</span>
<a name="l00186"></a>00186     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00187"></a>00187       <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(
<a name="l00188"></a>00188         *(other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00189"></a>00189     }
<a name="l00190"></a>00190     <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00193"></a>00193       <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acc4eb13ea772050e37b1eae2e560b117" title="No-argument constructor.">MappedSPnode</a>(
<a name="l00194"></a>00194         *(other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196     <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00197"></a>00197         
<a name="l00198"></a>00198     }
<a name="l00199"></a>00199   
<a name="l00203"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9f159be71fab10b26dec5d080fec95ff">00203</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9f159be71fab10b26dec5d080fec95ff" title="Copy assignment operator.">operator=</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> rhs)
<a name="l00204"></a>00204     {
<a name="l00205"></a>00205         rhs.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24" title="Swap the properties of this and another.">swapMSPSR</a>(*<span class="keyword">this</span>); <span class="comment">// make sure we use our version of swap</span>
<a name="l00206"></a>00206     <span class="keywordflow">return</span>(*<span class="keyword">this</span>);
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <span class="comment">// parent and child accessors have to hide the base class implementation</span>
<a name="l00212"></a>00212     <span class="comment">// this is not good but otherwise we get the base class return type</span>
<a name="l00213"></a>00213     <span class="comment">// I&#39;ve asked around and I can&#39;t find a way around it ...</span>
<a name="l00214"></a>00214 
<a name="l00218"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef">00218</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>()<span class="keyword"> const</span>
<a name="l00219"></a>00219 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00225"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093">00225</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00226"></a>00226 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 
<a name="l00232"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9">00232</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()<span class="keyword"> const</span>
<a name="l00233"></a>00233 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 
<a name="l00239"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd">00239</a>     T  <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>()<span class="keyword"> const</span>
<a name="l00240"></a>00240 <span class="keyword">    </span>{   
<a name="l00241"></a>00241         <span class="keywordflow">return</span> T(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243 
<a name="l00247"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4e3cc447b700d1a0e8e611f56762a96d">00247</a>     <span class="keywordtype">void</span>  <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4e3cc447b700d1a0e8e611f56762a96d" title="Set the range.">setRange</a>(T r)
<a name="l00248"></a>00248     {   
<a name="l00249"></a>00249         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = r;
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 
<a name="l00254"></a>00254    
<a name="l00258"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ae4b153a0ff33397c3537f1ce9d87b743">00258</a>   std::string <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ae4b153a0ff33397c3537f1ce9d87b743" title="Get a string summary of this.">nodeStringSummary</a>()<span class="keyword"> const</span>
<a name="l00259"></a>00259 <span class="keyword">  </span>{
<a name="l00260"></a>00260     std::ostringstream oss;
<a name="l00261"></a>00261     
<a name="l00262"></a>00262     oss &lt;&lt; <span class="stringliteral">&quot;I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; <span class="stringliteral">&quot;(address &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;),\n&quot;</span>;
<a name="l00263"></a>00263     oss &lt;&lt; <span class="stringliteral">&quot;Dimension is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>() &lt;&lt; <span class="stringliteral">&quot;, address of box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>; 
<a name="l00264"></a>00264     oss &lt;&lt; <span class="stringliteral">&quot;range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00265"></a>00265     oss &lt;&lt; <span class="stringliteral">&quot;my parent is &quot;</span>;
<a name="l00266"></a>00266     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>() != NULL) oss &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>()-&gt;getNodeName();
<a name="l00267"></a>00267     <span class="keywordflow">else</span> oss &lt;&lt; <span class="stringliteral">&quot;NULL&quot;</span>; 
<a name="l00268"></a>00268     oss &lt;&lt; <span class="stringliteral">&quot;, my left child is &quot;</span>;
<a name="l00269"></a>00269     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL) oss &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;getNodeName();
<a name="l00270"></a>00270     <span class="keywordflow">else</span> oss &lt;&lt; <span class="stringliteral">&quot;NULL&quot;</span>; 
<a name="l00271"></a>00271     oss &lt;&lt; <span class="stringliteral">&quot;, my right child is &quot;</span>;
<a name="l00272"></a>00272     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>() != NULL) oss &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;getNodeName();
<a name="l00273"></a>00273     <span class="keywordflow">else</span> oss &lt;&lt; <span class="stringliteral">&quot;NULL&quot;</span>;
<a name="l00274"></a>00274     
<a name="l00275"></a>00275     <span class="keywordflow">return</span> oss.str();
<a name="l00276"></a>00276     
<a name="l00277"></a>00277   }
<a name="l00278"></a>00278   
<a name="l00279"></a>00279   
<a name="l00299"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6">00299</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(<span class="keyword">const</span> std::vector&lt; T &gt;&amp; rangesToAllocate, <span class="keywordtype">size_t</span> index = 0)
<a name="l00300"></a>00300     {
<a name="l00301"></a>00301     <span class="keywordflow">if</span> (index &gt;= rangesToAllocate.size()) {
<a name="l00302"></a>00302       <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Range allocations too short&quot;</span>);
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     }
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = rangesToAllocate[index];
<a name="l00307"></a>00307 
<a name="l00308"></a>00308     std::size_t newIndex = index+1;
<a name="l00309"></a>00309     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00310"></a>00310       newIndex = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;allocateRanges(rangesToAllocate, newIndex);
<a name="l00311"></a>00311     }
<a name="l00312"></a>00312     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00313"></a>00313       newIndex = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;allocateRanges(rangesToAllocate, newIndex);
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316     <span class="comment">// have done all the children</span>
<a name="l00317"></a>00317     <span class="comment">// if this is the root, want to check we have used all the allocations</span>
<a name="l00318"></a>00318     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>()) {
<a name="l00319"></a>00319       <span class="keywordflow">if</span> (newIndex &lt; rangesToAllocate.size()) {
<a name="l00320"></a>00320         <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;More ranges than nodes in tree&quot;</span>);
<a name="l00321"></a>00321       }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323     }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325     <span class="keywordflow">return</span> newIndex;
<a name="l00326"></a>00326   
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 
<a name="l00373"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286">00373</a>   <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(std::string instruction)
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375     <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l00376"></a>00376 
<a name="l00377"></a>00377     <span class="comment">// checks:  is this the root?</span>
<a name="l00378"></a>00378     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>) {
<a name="l00379"></a>00379       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">NonRootNode_Error</a>(<span class="stringliteral">&quot;MappedSPNodeSingleRange&lt;T&gt;::splitToShape(std::string)&quot;</span>);
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382     <span class="comment">// checks:  is there a root box</span>
<a name="l00383"></a>00383     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) {
<a name="l00384"></a>00384       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(<span class="stringliteral">&quot;MappedSPNodeSingleRange&lt;T&gt;::splitToShape(std::string)&quot;</span>);
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 
<a name="l00388"></a>00388     <span class="comment">// checks: is the string properly formed?</span>
<a name="l00389"></a>00389     <span class="keywordflow">if</span> (instruction.length() == 0) {
<a name="l00390"></a>00390       <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l00391"></a>00391       <span class="stringliteral">&quot;MappedSPNodeSingleRange&lt;T&gt;::splitToShape(std::string) : No instruction&quot;</span>);
<a name="l00392"></a>00392     }
<a name="l00393"></a>00393     std::string legal(<span class="stringliteral">&quot;, 0123456789&quot;</span>);
<a name="l00394"></a>00394     <span class="keywordflow">if</span> (instruction.find_first_not_of(legal) != std::string::npos) {
<a name="l00395"></a>00395       <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l00396"></a>00396       <span class="stringliteral">&quot;MappedSPNodeSingleRange&lt;T&gt;::splitToShape(std::string) : Illegal character&quot;</span>);
<a name="l00397"></a>00397     }
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <span class="comment">// all seems to be okay, we can start spliting the root</span>
<a name="l00400"></a>00400     <span class="comment">// specify what to look for as numbers or decimal point or + or -</span>
<a name="l00401"></a>00401 
<a name="l00402"></a>00402     success = <a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea" title="Split a root paving to a specified shape.">splitRootToShape</a>(instruction);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404     <span class="keywordflow">if</span> (!success) {
<a name="l00405"></a>00405       <span class="keywordflow">throw</span> std::logic_error(
<a name="l00406"></a>00406       <span class="stringliteral">&quot;MappedSPNodeSingleRange&lt;T&gt;::splitToShape(std::string) : instruction not a proper tree&quot;</span>);
<a name="l00407"></a>00407       
<a name="l00408"></a>00408      }
<a name="l00409"></a>00409      
<a name="l00410"></a>00410     <span class="keywordflow">return</span> success;
<a name="l00411"></a>00411    }
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 
<a name="l00421"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a817b05cc2d60ff0ee1a98b0addf54131">00421</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92" title="Add two sibling nodes to this provided this is a leaf.">nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l00422"></a>00422     {
<a name="l00423"></a>00423         <span class="comment">// can only expand if there is a box</span>
<a name="l00424"></a>00424     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00425"></a>00425       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(<span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::nodeExpand(int)&quot;</span>);
<a name="l00426"></a>00426     }
<a name="l00427"></a>00427     
<a name="l00428"></a>00428     <span class="comment">// only do something if this node is a leaf</span>
<a name="l00429"></a>00429     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00430"></a>00430       
<a name="l00431"></a>00431       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* newLC = NULL;
<a name="l00432"></a>00432       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* newRC = NULL;
<a name="l00433"></a>00433       
<a name="l00434"></a>00434       <span class="keywordflow">try</span> {
<a name="l00435"></a>00435         <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00436"></a>00436         ivector lC, rC;
<a name="l00437"></a>00437         <span class="comment">// Call Lower() and Upper() to put split boxes</span>
<a name="l00438"></a>00438         <span class="comment">// into lC and rC respectively</span>
<a name="l00439"></a>00439         <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), lC, comp);
<a name="l00440"></a>00440         <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rC, comp);
<a name="l00441"></a>00441 
<a name="l00442"></a>00442         <span class="comment">// make and add the new children</span>
<a name="l00443"></a>00443         newLC = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>(lC, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00444"></a>00444         newRC = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>(rC, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00445"></a>00445         
<a name="l00446"></a>00446         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(newLC);
<a name="l00447"></a>00447         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(newRC);
<a name="l00448"></a>00448         <span class="comment">// both children get the same range as this</span>
<a name="l00449"></a>00449         
<a name="l00450"></a>00450         <span class="comment">//name the new children</span>
<a name="l00451"></a>00451         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;setNodeName(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00452"></a>00452         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;setNodeName(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00453"></a>00453 
<a name="l00454"></a>00454         <span class="comment">// new children have range collection from this</span>
<a name="l00455"></a>00455       }
<a name="l00456"></a>00456       <span class="keywordflow">catch</span>(std::exception&amp; e) {
<a name="l00457"></a>00457       <span class="comment">// overkill, but try to deal with all eventualities...</span>
<a name="l00458"></a>00458         <span class="keywordflow">try</span> {
<a name="l00459"></a>00459           <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL) {
<a name="l00460"></a>00460             <span class="keyword">delete</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00461"></a>00461             <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00462"></a>00462           }
<a name="l00463"></a>00463           
<a name="l00464"></a>00464           <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>() != NULL) {
<a name="l00465"></a>00465             <span class="keyword">delete</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00466"></a>00466             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00467"></a>00467           }
<a name="l00468"></a>00468           <span class="keywordflow">if</span> (newLC != NULL) {
<a name="l00469"></a>00469             <span class="keyword">delete</span> newLC;
<a name="l00470"></a>00470             newLC = NULL;
<a name="l00471"></a>00471           }
<a name="l00472"></a>00472           <span class="keywordflow">if</span> (newRC != NULL) {
<a name="l00473"></a>00473             <span class="keyword">delete</span> newRC;
<a name="l00474"></a>00474             newRC = NULL;
<a name="l00475"></a>00475           }
<a name="l00476"></a>00476         }
<a name="l00477"></a>00477         <span class="keywordflow">catch</span>(std::exception&amp; e) {} <span class="comment">//catch and swallow</span>
<a name="l00478"></a>00478         
<a name="l00479"></a>00479         <span class="keywordflow">throw</span>; <span class="comment">// rethrow original exception</span>
<a name="l00480"></a>00480       }
<a name="l00481"></a>00481     }
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484 
<a name="l00488"></a>00488     <span class="comment">// Finds its own comp argument then calls nodeExpand(int comp).</span>
<a name="l00489"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92">00489</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92" title="Add two sibling nodes to this provided this is a leaf.">nodeExpand</a>()
<a name="l00490"></a>00490     {
<a name="l00491"></a>00491         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00492"></a>00492         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00493"></a>00493         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92" title="Add two sibling nodes to this provided this is a leaf.">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l00494"></a>00494     }
<a name="l00495"></a>00495   
<a name="l00519"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a83d5b7a4609c73e1818fe2d3231c0979">00519</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a83d5b7a4609c73e1818fe2d3231c0979" title="Slice this.">slice</a>(
<a name="l00520"></a>00520       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00521"></a>00521       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts)
<a name="l00522"></a>00522   {
<a name="l00523"></a>00523     
<a name="l00524"></a>00524 <span class="preprocessor">    #ifdef SLICE_OUTPUT</span>
<a name="l00525"></a>00525 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;In MappedSPnode&lt;T&gt;::slice, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00526"></a>00526 <span class="preprocessor">    #endif</span>
<a name="l00527"></a>00527 <span class="preprocessor"></span>    
<a name="l00528"></a>00528     std::vector&lt;cxsc::real&gt; fullSlicePts = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44" title="Check slice parameters and return a full vector of slice points.">sliceCheck</a>(sliceDims, slicePts);
<a name="l00529"></a>00529       
<a name="l00530"></a>00530     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">_slice</a>(sliceDims, fullSlicePts);
<a name="l00531"></a>00531   }
<a name="l00532"></a>00532   
<a name="l00533"></a>00533 
<a name="l00534"></a>00534     <span class="comment">// nodeReabsorbChildren() can use the base class implementation</span>
<a name="l00535"></a>00535     <span class="comment">// (the range for this will be correct so just delete the children)</span>
<a name="l00536"></a>00536 
<a name="l00537"></a>00537   
<a name="l00538"></a>00538 
<a name="l00553"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a829001293a30ff276a50cf518893ad7f">00553</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a829001293a30ff276a50cf518893ad7f" title="Accept a SPExpandVisitor.">acceptSPExpandVisitor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPExpandVisitor.shtml">SPExpandVisitor&lt;T&gt;</a>&amp; visitor)
<a name="l00554"></a>00554   {
<a name="l00555"></a>00555 <span class="preprocessor">    #ifdef MYDEBUGVISITOR</span>
<a name="l00556"></a>00556 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;Using mappedspnode_sr expander accept&quot;</span> &lt;&lt; std::endl;
<a name="l00557"></a>00557 <span class="preprocessor">    #endif</span>
<a name="l00558"></a>00558 <span class="preprocessor"></span>    
<a name="l00559"></a>00559     <span class="comment">// only accept the visit if this is a leaf and the node is splittable</span>
<a name="l00560"></a>00560     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>()) {
<a name="l00561"></a>00561       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = visitor.<a class="code" href="classsubpavings_1_1SPExpandVisitor.shtml#a72d834e1dad55c141a4182e31a324218" title="The visit operation.">visit</a>(<span class="keyword">this</span>);
<a name="l00562"></a>00562 <span class="preprocessor">      #ifdef MYDEBUGVISITOR</span>
<a name="l00563"></a>00563 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;after visit, range value = &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00564"></a>00564 <span class="preprocessor">      #endif</span>
<a name="l00565"></a>00565 <span class="preprocessor"></span>    }
<a name="l00566"></a>00566     
<a name="l00567"></a>00567     
<a name="l00568"></a>00568 <span class="preprocessor">    #ifdef MYDEBUGVISITOR</span>
<a name="l00569"></a>00569 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>()) {
<a name="l00570"></a>00570         std::cout &lt;&lt; <span class="stringliteral">&quot;box is too small to split: volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>() &lt;&lt; std::endl;
<a name="l00571"></a>00571       }
<a name="l00572"></a>00572     
<a name="l00573"></a>00573       <span class="keywordflow">if</span>(!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) std::cout &lt;&lt; <span class="stringliteral">&quot;now visit children&quot;</span> &lt;&lt; std::endl;
<a name="l00574"></a>00574 <span class="preprocessor">    #endif</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span>    
<a name="l00576"></a>00576     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a829001293a30ff276a50cf518893ad7f" title="Accept a SPExpandVisitor.">acceptSPExpandVisitor</a>(visitor);
<a name="l00577"></a>00577     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a829001293a30ff276a50cf518893ad7f" title="Accept a SPExpandVisitor.">acceptSPExpandVisitor</a>(visitor);
<a name="l00578"></a>00578   }
<a name="l00579"></a>00579   
<a name="l00589"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab3d7c0ce1aa100e48554605b9c9c3ac7">00589</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab3d7c0ce1aa100e48554605b9c9c3ac7" title="Accept a SPValueVisitor visitor.">acceptSPValueVisitor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPValueVisitor.shtml">SPValueVisitor&lt;T&gt;</a>&amp; visitor)
<a name="l00590"></a>00590   {
<a name="l00591"></a>00591 <span class="preprocessor">    #ifdef MYDEBUGVISITORE</span>
<a name="l00592"></a>00592 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;Using mappedspnode_sr valuer accept &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00593"></a>00593 <span class="preprocessor">    #endif</span>
<a name="l00594"></a>00594 <span class="preprocessor"></span>    
<a name="l00595"></a>00595     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = visitor.<a class="code" href="classsubpavings_1_1SPValueVisitor.shtml#ab6cbf52f15a9ee3367ec4192c22ffb09">visit</a>(<span class="keyword">this</span>);
<a name="l00596"></a>00596 <span class="preprocessor">    #ifdef MYDEBUGVISITORE</span>
<a name="l00597"></a>00597 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;after visit, range value = &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00598"></a>00598 <span class="preprocessor">    #endif</span>
<a name="l00599"></a>00599 <span class="preprocessor"></span>    
<a name="l00600"></a>00600 <span class="preprocessor">    #ifdef MYDEBUGVISITORE</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>      <span class="keywordflow">if</span>(!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) std::cout &lt;&lt; <span class="stringliteral">&quot;now visit children&quot;</span> &lt;&lt; std::endl;
<a name="l00602"></a>00602 <span class="preprocessor">    #endif</span>
<a name="l00603"></a>00603 <span class="preprocessor"></span>    
<a name="l00604"></a>00604     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab3d7c0ce1aa100e48554605b9c9c3ac7" title="Accept a SPValueVisitor visitor.">acceptSPValueVisitor</a>(visitor);
<a name="l00605"></a>00605     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab3d7c0ce1aa100e48554605b9c9c3ac7" title="Accept a SPValueVisitor visitor.">acceptSPValueVisitor</a>(visitor);
<a name="l00606"></a>00606   }
<a name="l00607"></a>00607   
<a name="l00617"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30b1a6a37439a3d5ad3611e6ecdf37be">00617</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30b1a6a37439a3d5ad3611e6ecdf37be" title="Addition to self operator.">operator+= </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; add)
<a name="l00618"></a>00618     {
<a name="l00619"></a>00619     <span class="comment">// if both empty, do nothing</span>
<a name="l00620"></a>00620     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || !add.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00621"></a>00621       
<a name="l00622"></a>00622       <span class="comment">// just one empty or boxes don&#39;t match</span>
<a name="l00623"></a>00623       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || add.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ||
<a name="l00624"></a>00624         (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != add.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) ) {
<a name="l00625"></a>00625         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00626"></a>00626         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::operator+=(const MappedSPnode&lt;T&gt;&amp; const)&quot;</span>);
<a name="l00627"></a>00627       }
<a name="l00628"></a>00628       
<a name="l00629"></a>00629       this-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30fc46b2dd6b0ca4ad703f323a050c7b" title="Make a non-minimal union of subpavings using addition of ranges.">_addNonMinimalUnion</a>(add);
<a name="l00630"></a>00630     
<a name="l00631"></a>00631     }
<a name="l00632"></a>00632     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00633"></a>00633     }
<a name="l00634"></a>00634 
<a name="l00644"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1204b445f0526e62aed8ded7a92744f8">00644</a>   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1204b445f0526e62aed8ded7a92744f8" title="Addition operator.">operator+ </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; add)<span class="keyword"> const</span>
<a name="l00645"></a>00645 <span class="keyword">    </span>{
<a name="l00646"></a>00646     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00647"></a>00647   
<a name="l00648"></a>00648     result+= add;
<a name="l00649"></a>00649     
<a name="l00650"></a>00650     <span class="keywordflow">return</span> result;
<a name="l00651"></a>00651     }
<a name="l00652"></a>00652   
<a name="l00658"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a11f57501aac4b67b779e3344290101b4">00658</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30b1a6a37439a3d5ad3611e6ecdf37be" title="Addition to self operator.">operator+= </a>(<span class="keyword">const</span> T&amp; add)
<a name="l00659"></a>00659     {
<a name="l00660"></a>00660     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4ef713013762306de2040ac389ec140a" title="Increment range collection of this.">_scalarAdd</a>(add);
<a name="l00661"></a>00661     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00662"></a>00662   }
<a name="l00663"></a>00663   
<a name="l00670"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9c951e4722b21949175ab3997dcd3a86">00670</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1204b445f0526e62aed8ded7a92744f8" title="Addition operator.">operator+ </a>(<span class="keyword">const</span> T&amp; add)<span class="keyword"> const</span>
<a name="l00671"></a>00671 <span class="keyword">    </span>{
<a name="l00672"></a>00672         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00673"></a>00673   
<a name="l00674"></a>00674     result+= add;
<a name="l00675"></a>00675   
<a name="l00676"></a>00676     <span class="keywordflow">return</span> result;
<a name="l00677"></a>00677     }
<a name="l00678"></a>00678   
<a name="l00679"></a>00679 
<a name="l00690"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1ca00409cd79226e2b626acfb20ea054">00690</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1ca00409cd79226e2b626acfb20ea054" title="Subtraction from self operator.">operator-= </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; sub)
<a name="l00691"></a>00691     {
<a name="l00692"></a>00692     
<a name="l00693"></a>00693     <span class="comment">// if both empty, do nothing</span>
<a name="l00694"></a>00694     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || !sub.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00695"></a>00695       
<a name="l00696"></a>00696       <span class="comment">// just one empty or boxes don&#39;t match</span>
<a name="l00697"></a>00697       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || sub.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ||
<a name="l00698"></a>00698         (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != sub.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) ) {
<a name="l00699"></a>00699         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00700"></a>00700         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::operator-=(const MappedSPnode&lt;T&gt;&amp; const)&quot;</span>);
<a name="l00701"></a>00701       }
<a name="l00702"></a>00702       
<a name="l00703"></a>00703       this-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9880ddfe3c75fe8e7594ee6222040d79" title="Make a non-minimal union of subpavings using subtraction of ranges.">_subtractNonMinimalUnion</a>(sub);
<a name="l00704"></a>00704     
<a name="l00705"></a>00705     }
<a name="l00706"></a>00706     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00707"></a>00707   }
<a name="l00708"></a>00708     
<a name="l00719"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acf2b59252b57c2201c5184dbb02a5a20">00719</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acf2b59252b57c2201c5184dbb02a5a20" title="Subtraction operator.">operator- </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; sub)<span class="keyword"> const</span>
<a name="l00720"></a>00720 <span class="keyword">    </span>{
<a name="l00721"></a>00721         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00722"></a>00722   
<a name="l00723"></a>00723     result-= sub;
<a name="l00724"></a>00724   
<a name="l00725"></a>00725     <span class="keywordflow">return</span> result;
<a name="l00726"></a>00726     }
<a name="l00727"></a>00727 
<a name="l00733"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a6c67949c1c356830bd0edaae9f75ccbe">00733</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a1ca00409cd79226e2b626acfb20ea054" title="Subtraction from self operator.">operator-= </a>(<span class="keyword">const</span> T&amp; sub)
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a91ab734b6f270c26557964473f4977b4" title="Increment range collection of this.">_scalarSubtract</a>(sub);
<a name="l00736"></a>00736     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00737"></a>00737   }
<a name="l00738"></a>00738   
<a name="l00745"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ad4bb0c01c69521b16c62a90a6e540e8f">00745</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acf2b59252b57c2201c5184dbb02a5a20" title="Subtraction operator.">operator- </a>(<span class="keyword">const</span> T&amp; sub)<span class="keyword"> const</span>
<a name="l00746"></a>00746 <span class="keyword">    </span>{
<a name="l00747"></a>00747         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00748"></a>00748   
<a name="l00749"></a>00749     result-= sub;
<a name="l00750"></a>00750   
<a name="l00751"></a>00751     <span class="keywordflow">return</span> result;
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753   
<a name="l00764"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa5949967da59e064734929aaf190fc15">00764</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa5949967da59e064734929aaf190fc15" title="Multiplication of self operator.">operator*= </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; mult)
<a name="l00765"></a>00765     {
<a name="l00766"></a>00766     
<a name="l00767"></a>00767     <span class="comment">// if both empty, do nothing</span>
<a name="l00768"></a>00768     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || !mult.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00769"></a>00769       
<a name="l00770"></a>00770       <span class="comment">// just one empty or boxes don&#39;t match</span>
<a name="l00771"></a>00771       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || mult.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ||
<a name="l00772"></a>00772         (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != mult.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) ) {
<a name="l00773"></a>00773         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00774"></a>00774         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::operator*=(const MappedSPnode&lt;T&gt;&amp; const)&quot;</span>);
<a name="l00775"></a>00775       }
<a name="l00776"></a>00776       <span class="comment">// both must be non-empty</span>
<a name="l00777"></a>00777       
<a name="l00778"></a>00778       this-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9f6b48701e09b97fbd169db927df0758" title="Make a non-minimal union of subpavings using multiplication of ranges.">_multiplyNonMinimalUnion</a>(mult);
<a name="l00779"></a>00779 
<a name="l00780"></a>00780       
<a name="l00781"></a>00781     }
<a name="l00782"></a>00782     
<a name="l00783"></a>00783     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00784"></a>00784   }
<a name="l00785"></a>00785   
<a name="l00796"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#af329c66306f63fb572c92c582640633e">00796</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#af329c66306f63fb572c92c582640633e" title="Multiplication operator.">operator* </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; mult)<span class="keyword"> const</span>
<a name="l00797"></a>00797 <span class="keyword">    </span>{
<a name="l00798"></a>00798         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00799"></a>00799   
<a name="l00800"></a>00800     result*= mult;
<a name="l00801"></a>00801     
<a name="l00802"></a>00802     <span class="keywordflow">return</span> result;
<a name="l00803"></a>00803     }
<a name="l00804"></a>00804   
<a name="l00810"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a6c028eece36691537a2c824b39d0fb00">00810</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa5949967da59e064734929aaf190fc15" title="Multiplication of self operator.">operator*= </a>(<span class="keyword">const</span> T&amp; mult)
<a name="l00811"></a>00811     {
<a name="l00812"></a>00812     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab716b6d35a31dcba9de12114b3139dc2" title="Scale up range of this.">_scalarMult</a>(mult);
<a name="l00813"></a>00813     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00814"></a>00814   }
<a name="l00815"></a>00815   
<a name="l00822"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a855f75cf76d1ee0235c7aaab29b048f3">00822</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#af329c66306f63fb572c92c582640633e" title="Multiplication operator.">operator* </a>(<span class="keyword">const</span> T&amp; mult)<span class="keyword"> const</span>
<a name="l00823"></a>00823 <span class="keyword">    </span>{
<a name="l00824"></a>00824         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00825"></a>00825   
<a name="l00826"></a>00826     result*= mult;
<a name="l00827"></a>00827   
<a name="l00828"></a>00828     <span class="keywordflow">return</span> result;
<a name="l00829"></a>00829     }
<a name="l00830"></a>00830   
<a name="l00831"></a>00831   
<a name="l00842"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a793f3f3b66690ef99c8a737850f7c291">00842</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a793f3f3b66690ef99c8a737850f7c291" title="Division of self operator.">operator/= </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; div)
<a name="l00843"></a>00843     {
<a name="l00844"></a>00844     <span class="comment">// if both empty, do nothing</span>
<a name="l00845"></a>00845     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || !div.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00846"></a>00846       
<a name="l00847"></a>00847       <span class="comment">// just one empty or boxes don&#39;t match</span>
<a name="l00848"></a>00848       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || div.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()  ||
<a name="l00849"></a>00849         (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != div.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) ) {
<a name="l00850"></a>00850         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00851"></a>00851         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::operator/=(const MappedSPnode&lt;T&gt;&amp; const)&quot;</span>);
<a name="l00852"></a>00852       }
<a name="l00853"></a>00853       <span class="comment">// both must be non-empty</span>
<a name="l00854"></a>00854       
<a name="l00855"></a>00855       this-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a29dac80a6e0ecce51b22816ef78a298d" title="Make a non-minimal union of subpavings using division of ranges.">_divideNonMinimalUnion</a>(div);
<a name="l00856"></a>00856 
<a name="l00857"></a>00857       
<a name="l00858"></a>00858     }
<a name="l00859"></a>00859     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00860"></a>00860   }
<a name="l00861"></a>00861   
<a name="l00872"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7a92e3c463e2fbe951824badf0aa2383">00872</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7a92e3c463e2fbe951824badf0aa2383" title="Division operator.">operator/ </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; div)<span class="keyword"> const</span>
<a name="l00873"></a>00873 <span class="keyword">    </span>{
<a name="l00874"></a>00874         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00875"></a>00875   
<a name="l00876"></a>00876     result/= div;
<a name="l00877"></a>00877   
<a name="l00878"></a>00878     <span class="keywordflow">return</span> result;
<a name="l00879"></a>00879     }
<a name="l00880"></a>00880   
<a name="l00886"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aab106627889397cf17d3ea7a3626e363">00886</a>     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a793f3f3b66690ef99c8a737850f7c291" title="Division of self operator.">operator/= </a>(<span class="keyword">const</span> T&amp; div)
<a name="l00887"></a>00887     {
<a name="l00888"></a>00888     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a21cbfaf0019ceb215b9c12df05d394f3" title="Scale down range of this.">_scalarDiv</a>(div);
<a name="l00889"></a>00889     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00890"></a>00890   }
<a name="l00891"></a>00891   
<a name="l00898"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ad8deddac45220ce11ba734c5ff4694d0">00898</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7a92e3c463e2fbe951824badf0aa2383" title="Division operator.">operator/ </a>(<span class="keyword">const</span> T&amp; div)<span class="keyword"> const</span>
<a name="l00899"></a>00899 <span class="keyword">    </span>{
<a name="l00900"></a>00900         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> result =(*this);
<a name="l00901"></a>00901   
<a name="l00902"></a>00902     result/= div;
<a name="l00903"></a>00903   
<a name="l00904"></a>00904     <span class="keywordflow">return</span> result;
<a name="l00905"></a>00905     }
<a name="l00906"></a>00906   
<a name="l00927"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aceaf989b21707aa1f00a9d8372cf2551">00927</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aceaf989b21707aa1f00a9d8372cf2551" title="Change this so that it has the minimum number of leaves necessary to represent the same overall &#39;shap...">minimiseLeaves</a>()
<a name="l00928"></a>00928   {
<a name="l00929"></a>00929     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// can&#39;t do anything if this is a leaf</span>
<a name="l00930"></a>00930       
<a name="l00931"></a>00931       <span class="comment">// recurse first</span>
<a name="l00932"></a>00932       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() ) <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;minimiseLeaves();
<a name="l00933"></a>00933       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() ) <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;minimiseLeaves();
<a name="l00934"></a>00934       
<a name="l00935"></a>00935       <span class="comment">// now do me</span>
<a name="l00936"></a>00936       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>() &amp;&amp; 
<a name="l00937"></a>00937         (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>() == <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>()) ) {
<a name="l00938"></a>00938         
<a name="l00939"></a>00939           <span class="comment">// make this range collection one of the childrens</span>
<a name="l00940"></a>00940           <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;getRange();
<a name="l00941"></a>00941           <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l00942"></a>00942           <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00943"></a>00943           <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l00944"></a>00944           <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00945"></a>00945       }
<a name="l00946"></a>00946     
<a name="l00947"></a>00947     }
<a name="l00948"></a>00948   }
<a name="l00949"></a>00949   
<a name="l00958"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24">00958</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24" title="Swap the properties of this and another.">swapMSPSR</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&amp; spn) <span class="comment">//throw() // don&#39;t hide base class version</span>
<a name="l00959"></a>00959   {
<a name="l00960"></a>00960     <span class="comment">/* theBox, parent, leftChild,</span>
<a name="l00961"></a>00961 <span class="comment">    rightChild and nodeName are inherited from base class */</span>
<a name="l00962"></a>00962     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">SPnode::swap</a>(spn); <span class="comment">// use the base version</span>
<a name="l00963"></a>00963     
<a name="l00964"></a>00964     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>, spn.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00965"></a>00965   }
<a name="l00966"></a>00966   
<a name="l00977"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a798b65086b8c8042522fc317e73247a7">00977</a>     <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a798b65086b8c8042522fc317e73247a7" title="Print the details of a specific node in a subpaving.">nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00978"></a>00978 <span class="keyword">    </span>{
<a name="l00979"></a>00979         <span class="comment">// output for box in form:</span>
<a name="l00980"></a>00980         <span class="comment">// box, volume, summary data</span>
<a name="l00981"></a>00981 
<a name="l00982"></a>00982         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00983"></a>00983 
<a name="l00984"></a>00984             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00985"></a>00985 
<a name="l00986"></a>00986       os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> &lt;&lt; <span class="stringliteral">&quot;\tBox is:\t&quot;</span>;
<a name="l00987"></a>00987 
<a name="l00988"></a>00988             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00989"></a>00989                 <span class="comment">// c-xsc default output for intervals</span>
<a name="l00990"></a>00990                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; thisBox[i];   }
<a name="l00991"></a>00991 
<a name="l00992"></a>00992             os &lt;&lt; <span class="stringliteral">&quot;\tBox volume is:\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00993"></a>00993             os &lt;&lt; <span class="stringliteral">&quot;\trange data:\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00994"></a>00994     }
<a name="l00995"></a>00995         <span class="keywordflow">return</span> os;
<a name="l00996"></a>00996     }
<a name="l00997"></a>00997   
<a name="l00998"></a>00998   
<a name="l00999"></a>00999 
<a name="l01000"></a>01000 
<a name="l01001"></a>01001     <span class="keyword">protected</span>:
<a name="l01002"></a>01002     <span class="comment">// -------------------------- protected member functions -------------</span>
<a name="l01003"></a>01003     
<a name="l01005"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa35a5e2e8518004e8feefb3bdea98d53">01005</a>     <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa35a5e2e8518004e8feefb3bdea98d53" title="Print the details of a single leaf node, using tab delimiters.">leafOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01006"></a>01006 <span class="keyword">    </span>{
<a name="l01007"></a>01007         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l01008"></a>01008 
<a name="l01009"></a>01009             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l01010"></a>01010 
<a name="l01011"></a>01011       <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l01012"></a>01012             os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l01013"></a>01013             real vol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>();
<a name="l01014"></a>01014             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l01015"></a>01015 
<a name="l01016"></a>01016             <span class="comment">// followed by the range</span>
<a name="l01017"></a>01017             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01018"></a>01018 
<a name="l01019"></a>01019             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l01020"></a>01020             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l01021"></a>01021             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l01022"></a>01022 
<a name="l01023"></a>01023                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l01024"></a>01024                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l01025"></a>01025             }
<a name="l01026"></a>01026       os &lt;&lt; std::flush;
<a name="l01027"></a>01027       
<a name="l01028"></a>01028         }
<a name="l01029"></a>01029     <span class="keywordflow">return</span> os;
<a name="l01030"></a>01030     }
<a name="l01031"></a>01031 
<a name="l01032"></a>01032     
<a name="l01038"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce">01038</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce" title="Reshape this and  so that both this and rhs have identical shapes after the operation and that shape ...">_reshapeTreesToUnion</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> * <span class="keyword">const</span> rhs)
<a name="l01039"></a>01039   {
<a name="l01040"></a>01040     <span class="keywordflow">if</span> (rhs == NULL) {
<a name="l01041"></a>01041 
<a name="l01042"></a>01042       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01043"></a>01043       <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_reshapeTreesToUnion(MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01044"></a>01044     }
<a name="l01045"></a>01045 
<a name="l01046"></a>01046     <span class="comment">// this is not a leaf, rhs is a leaf</span>
<a name="l01047"></a>01047     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01048"></a>01048 
<a name="l01049"></a>01049       <span class="comment">//we need to expand rhs</span>
<a name="l01050"></a>01050       rhs-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a817b05cc2d60ff0ee1a98b0addf54131" title="Add two sibling nodes to this provided this is a leaf.">nodeExpand</a>();
<a name="l01051"></a>01051     }
<a name="l01052"></a>01052 
<a name="l01053"></a>01053     <span class="comment">// this is a leaf, rhs is not a leaf</span>
<a name="l01054"></a>01054     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01055"></a>01055 
<a name="l01056"></a>01056       <span class="comment">//we need to expand this</span>
<a name="l01057"></a>01057       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a26af7ee7d7e9c00623dea9e6aed02d92" title="Add two sibling nodes to this provided this is a leaf.">nodeExpand</a>();
<a name="l01058"></a>01058     }
<a name="l01059"></a>01059 
<a name="l01060"></a>01060     <span class="comment">// we have made sure that if at least one of them was not a leaf,</span>
<a name="l01061"></a>01061     <span class="comment">// then neither are now leaves</span>
<a name="l01062"></a>01062     <span class="comment">// now recurse on the children</span>
<a name="l01063"></a>01063     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01064"></a>01064       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_reshapeTreesToUnion(rhs-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01065"></a>01065       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_reshapeTreesToUnion(rhs-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01066"></a>01066 
<a name="l01067"></a>01067     }
<a name="l01068"></a>01068   }
<a name="l01069"></a>01069   
<a name="l01076"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a5fc2d7092ac40f04bd0f83f4ee110fdc">01076</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a5fc2d7092ac40f04bd0f83f4ee110fdc" title="Give this a range equal to range of this and range of other.">_addRanges</a>(  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> * <span class="keyword">const</span> other)
<a name="l01077"></a>01077   {
<a name="l01078"></a>01078     <span class="keywordflow">if</span> (other == NULL) {
<a name="l01079"></a>01079       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01080"></a>01080         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_addRanges(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01081"></a>01081     }
<a name="l01082"></a>01082 
<a name="l01083"></a>01083     <span class="comment">// recurse on the children if any first</span>
<a name="l01084"></a>01084     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01085"></a>01085       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_addRanges(
<a name="l01086"></a>01086                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01087"></a>01087       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_addRanges(
<a name="l01088"></a>01088                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01089"></a>01089 
<a name="l01090"></a>01090     }
<a name="l01091"></a>01091 
<a name="l01092"></a>01092     <span class="comment">// deal with this range collection</span>
<a name="l01093"></a>01093     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> + other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01094"></a>01094   }
<a name="l01095"></a>01095   
<a name="l01102"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a78e906fbd5153a29f4de538ccbdc1383">01102</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a78e906fbd5153a29f4de538ccbdc1383" title="Give this a range equal to range of this - range of other.">_subtractRanges</a>( <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> * <span class="keyword">const</span> other)
<a name="l01103"></a>01103   {
<a name="l01104"></a>01104     <span class="keywordflow">if</span> (other == NULL) {
<a name="l01105"></a>01105       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01106"></a>01106         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_subtractRanges(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01107"></a>01107     }
<a name="l01108"></a>01108 
<a name="l01109"></a>01109     <span class="comment">// recurse on the children if any first</span>
<a name="l01110"></a>01110     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01111"></a>01111       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_subtractRanges(
<a name="l01112"></a>01112                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01113"></a>01113       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_subtractRanges(
<a name="l01114"></a>01114                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01115"></a>01115 
<a name="l01116"></a>01116     }
<a name="l01117"></a>01117 
<a name="l01118"></a>01118     <span class="comment">// deal with this range collection</span>
<a name="l01119"></a>01119     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> - other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01120"></a>01120   }
<a name="l01121"></a>01121   
<a name="l01128"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa9df7035975f4d82aa605e6ac2a1ffe3">01128</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa9df7035975f4d82aa605e6ac2a1ffe3" title="Give this a range equal to range of this * range of other.">_multRanges</a>( <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> * <span class="keyword">const</span> other)
<a name="l01129"></a>01129   {
<a name="l01130"></a>01130     <span class="keywordflow">if</span> (other == NULL) {
<a name="l01131"></a>01131       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01132"></a>01132         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_multRanges(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01133"></a>01133     }
<a name="l01134"></a>01134 
<a name="l01135"></a>01135     <span class="comment">// recurse on the children if any first</span>
<a name="l01136"></a>01136     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01137"></a>01137       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_multRanges(
<a name="l01138"></a>01138                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01139"></a>01139       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_multRanges(
<a name="l01140"></a>01140                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01141"></a>01141 
<a name="l01142"></a>01142     }
<a name="l01143"></a>01143 
<a name="l01144"></a>01144     <span class="comment">// deal with this range collection</span>
<a name="l01145"></a>01145     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> * other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01146"></a>01146   }
<a name="l01147"></a>01147   
<a name="l01154"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7fb50e0bf02d5d5d5a3753a1ff381ae7">01154</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7fb50e0bf02d5d5d5a3753a1ff381ae7" title="Give this a range equal to range of this and range of other.">_divRanges</a>(  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> * <span class="keyword">const</span> other)
<a name="l01155"></a>01155   {
<a name="l01156"></a>01156     <span class="keywordflow">if</span> (other == NULL) {
<a name="l01157"></a>01157       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01158"></a>01158         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_divRanges(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01159"></a>01159     }
<a name="l01160"></a>01160 
<a name="l01161"></a>01161     <span class="comment">// recurse on the children if any first</span>
<a name="l01162"></a>01162     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01163"></a>01163       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_divRanges(
<a name="l01164"></a>01164                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01165"></a>01165       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_divRanges(
<a name="l01166"></a>01166                           other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01167"></a>01167 
<a name="l01168"></a>01168     }
<a name="l01169"></a>01169 
<a name="l01170"></a>01170     <span class="comment">// deal with this range collection</span>
<a name="l01171"></a>01171     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> / other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01172"></a>01172   }
<a name="l01173"></a>01173   
<a name="l01174"></a>01174   
<a name="l01175"></a>01175 
<a name="l01176"></a>01176 
<a name="l01180"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30fc46b2dd6b0ca4ad703f323a050c7b">01180</a>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a30fc46b2dd6b0ca4ad703f323a050c7b" title="Make a non-minimal union of subpavings using addition of ranges.">_addNonMinimalUnion</a>(
<a name="l01181"></a>01181                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; rhs)
<a name="l01182"></a>01182     {
<a name="l01183"></a>01183         
<a name="l01184"></a>01184     <span class="comment">//if (rhs == NULL || rhs-&gt;isEmpty()) do nothing</span>
<a name="l01185"></a>01185     
<a name="l01186"></a>01186     <span class="comment">// should not need to check on rhs here </span>
<a name="l01187"></a>01187     <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; !rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01188"></a>01188 
<a name="l01189"></a>01189       *<span class="keyword">this</span> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>(rhs);
<a name="l01190"></a>01190     }
<a name="l01191"></a>01191         
<a name="l01192"></a>01192     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; !rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01193"></a>01193 
<a name="l01194"></a>01194       <span class="comment">// make copies of rhs to reshape</span>
<a name="l01195"></a>01195 
<a name="l01196"></a>01196       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> rhsTemp(rhs);
<a name="l01197"></a>01197 
<a name="l01198"></a>01198       <span class="comment">// reshape</span>
<a name="l01199"></a>01199       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce" title="Reshape this and  so that both this and rhs have identical shapes after the operation and that shape ...">_reshapeTreesToUnion</a>(&amp;rhsTemp);
<a name="l01200"></a>01200 
<a name="l01201"></a>01201       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a5fc2d7092ac40f04bd0f83f4ee110fdc" title="Give this a range equal to range of this and range of other.">_addRanges</a>(&amp;rhsTemp);
<a name="l01202"></a>01202 
<a name="l01203"></a>01203     }
<a name="l01204"></a>01204   }
<a name="l01205"></a>01205 
<a name="l01211"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9880ddfe3c75fe8e7594ee6222040d79">01211</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9880ddfe3c75fe8e7594ee6222040d79" title="Make a non-minimal union of subpavings using subtraction of ranges.">_subtractNonMinimalUnion</a>(
<a name="l01212"></a>01212                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; rhs)
<a name="l01213"></a>01213     {
<a name="l01214"></a>01214         <span class="comment">// should not need to check on rhs not null here </span>
<a name="l01215"></a>01215     <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) || rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01216"></a>01216 
<a name="l01217"></a>01217       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l01218"></a>01218         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_subtractNonMinimalUnion(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01219"></a>01219     }
<a name="l01220"></a>01220     
<a name="l01221"></a>01221     <span class="comment">// make copies of rhs to reshape</span>
<a name="l01222"></a>01222 
<a name="l01223"></a>01223     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> rhsTemp(rhs);
<a name="l01224"></a>01224 
<a name="l01225"></a>01225     <span class="comment">// reshape</span>
<a name="l01226"></a>01226     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce" title="Reshape this and  so that both this and rhs have identical shapes after the operation and that shape ...">_reshapeTreesToUnion</a>(&amp;rhsTemp);
<a name="l01227"></a>01227 
<a name="l01228"></a>01228     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a78e906fbd5153a29f4de538ccbdc1383" title="Give this a range equal to range of this - range of other.">_subtractRanges</a>(&amp;rhsTemp);
<a name="l01229"></a>01229 
<a name="l01230"></a>01230   }
<a name="l01231"></a>01231 
<a name="l01237"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9f6b48701e09b97fbd169db927df0758">01237</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a9f6b48701e09b97fbd169db927df0758" title="Make a non-minimal union of subpavings using multiplication of ranges.">_multiplyNonMinimalUnion</a>(
<a name="l01238"></a>01238                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; rhs)
<a name="l01239"></a>01239     {
<a name="l01240"></a>01240     <span class="comment">// should not need to check on rhs not null here </span>
<a name="l01241"></a>01241     <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) || rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01242"></a>01242 
<a name="l01243"></a>01243       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l01244"></a>01244         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_multiplyNonMinimalUnion(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01245"></a>01245     }
<a name="l01246"></a>01246     
<a name="l01247"></a>01247         <span class="comment">// make copies of rhs to reshape</span>
<a name="l01248"></a>01248 
<a name="l01249"></a>01249     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> rhsTemp(rhs);
<a name="l01250"></a>01250 
<a name="l01251"></a>01251     <span class="comment">// reshape</span>
<a name="l01252"></a>01252     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce" title="Reshape this and  so that both this and rhs have identical shapes after the operation and that shape ...">_reshapeTreesToUnion</a>(&amp;rhsTemp);
<a name="l01253"></a>01253 
<a name="l01254"></a>01254     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#aa9df7035975f4d82aa605e6ac2a1ffe3" title="Give this a range equal to range of this * range of other.">_multRanges</a>(&amp;rhsTemp);
<a name="l01255"></a>01255 
<a name="l01256"></a>01256   }
<a name="l01257"></a>01257 
<a name="l01263"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a29dac80a6e0ecce51b22816ef78a298d">01263</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a29dac80a6e0ecce51b22816ef78a298d" title="Make a non-minimal union of subpavings using division of ranges.">_divideNonMinimalUnion</a>(
<a name="l01264"></a>01264                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>&amp; rhs)
<a name="l01265"></a>01265     {
<a name="l01266"></a>01266     <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) || rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01267"></a>01267 
<a name="l01268"></a>01268       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l01269"></a>01269         <span class="stringliteral">&quot;MappedSPnode&lt;T&gt;::_divideNonMinimalUnion(const MappedSPnode&lt;T&gt; * const)&quot;</span>);
<a name="l01270"></a>01270     }
<a name="l01271"></a>01271     
<a name="l01272"></a>01272         <span class="comment">// make copies of rhs to reshape</span>
<a name="l01273"></a>01273 
<a name="l01274"></a>01274     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a> rhsTemp(rhs);
<a name="l01275"></a>01275 
<a name="l01276"></a>01276     <span class="comment">// reshape</span>
<a name="l01277"></a>01277     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a8c3d82f771a9c88493bffc96dd1341ce" title="Reshape this and  so that both this and rhs have identical shapes after the operation and that shape ...">_reshapeTreesToUnion</a>(&amp;rhsTemp);
<a name="l01278"></a>01278 
<a name="l01279"></a>01279     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a7fb50e0bf02d5d5d5a3753a1ff381ae7" title="Give this a range equal to range of this and range of other.">_divRanges</a>(&amp;rhsTemp);
<a name="l01280"></a>01280 
<a name="l01281"></a>01281   }
<a name="l01282"></a>01282   
<a name="l01288"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4ef713013762306de2040ac389ec140a">01288</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4ef713013762306de2040ac389ec140a" title="Increment range collection of this.">_scalarAdd</a>(<span class="keyword">const</span> T&amp; add)
<a name="l01289"></a>01289     {
<a name="l01290"></a>01290     
<a name="l01291"></a>01291     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01292"></a>01292       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> + add;
<a name="l01293"></a>01293       <span class="comment">// recurse on children</span>
<a name="l01294"></a>01294       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01295"></a>01295         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_scalarAdd(add);
<a name="l01296"></a>01296       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01297"></a>01297         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_scalarAdd(add);
<a name="l01298"></a>01298     }
<a name="l01299"></a>01299     }
<a name="l01300"></a>01300   
<a name="l01306"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a91ab734b6f270c26557964473f4977b4">01306</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a91ab734b6f270c26557964473f4977b4" title="Increment range collection of this.">_scalarSubtract</a>(<span class="keyword">const</span> T&amp; sub)
<a name="l01307"></a>01307     {
<a name="l01308"></a>01308     
<a name="l01309"></a>01309     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01310"></a>01310       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> - sub;
<a name="l01311"></a>01311       <span class="comment">// recurse on children</span>
<a name="l01312"></a>01312       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01313"></a>01313         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_scalarSubtract(sub);
<a name="l01314"></a>01314       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01315"></a>01315         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_scalarSubtract(sub);
<a name="l01316"></a>01316     }
<a name="l01317"></a>01317     }
<a name="l01318"></a>01318   
<a name="l01319"></a>01319   
<a name="l01325"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab716b6d35a31dcba9de12114b3139dc2">01325</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#ab716b6d35a31dcba9de12114b3139dc2" title="Scale up range of this.">_scalarMult</a>(<span class="keyword">const</span> T&amp; mult)
<a name="l01326"></a>01326     {
<a name="l01327"></a>01327     
<a name="l01328"></a>01328     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01329"></a>01329       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> * mult;
<a name="l01330"></a>01330       <span class="comment">// recurse on children</span>
<a name="l01331"></a>01331       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01332"></a>01332         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_scalarMult(mult);
<a name="l01333"></a>01333       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01334"></a>01334         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_scalarMult(mult);
<a name="l01335"></a>01335     }
<a name="l01336"></a>01336     }
<a name="l01337"></a>01337 
<a name="l01343"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a21cbfaf0019ceb215b9c12df05d394f3">01343</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a21cbfaf0019ceb215b9c12df05d394f3" title="Scale down range of this.">_scalarDiv</a>(<span class="keyword">const</span> T&amp; div)
<a name="l01344"></a>01344     {
<a name="l01345"></a>01345     
<a name="l01346"></a>01346     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01347"></a>01347       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> / div;
<a name="l01348"></a>01348       <span class="comment">// recurse on children</span>
<a name="l01349"></a>01349       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01350"></a>01350         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_scalarDiv(div);
<a name="l01351"></a>01351       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01352"></a>01352         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_scalarDiv(div);
<a name="l01353"></a>01353     }
<a name="l01354"></a>01354     }
<a name="l01355"></a>01355 
<a name="l01356"></a>01356   <span class="comment">// assumes the slice pts are inside the box of this node somewhere</span>
<a name="l01357"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">01357</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">_slice</a>(
<a name="l01358"></a>01358         <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l01359"></a>01359         <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts)
<a name="l01360"></a>01360   {
<a name="l01361"></a>01361 <span class="preprocessor">    #ifdef SLICE_OUTPUT</span>
<a name="l01362"></a>01362 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;In MappedSPnodeSR&lt;T&gt;::slice, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01363"></a>01363 <span class="preprocessor">    #endif</span>
<a name="l01364"></a>01364 <span class="preprocessor"></span>    
<a name="l01365"></a>01365     <span class="keywordtype">bool</span> splitOnSliceDim = <span class="keyword">false</span>;
<a name="l01366"></a>01366     
<a name="l01367"></a>01367     <span class="keywordtype">int</span> splitDim = -1;
<a name="l01368"></a>01368     
<a name="l01369"></a>01369     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01370"></a>01370       
<a name="l01371"></a>01371 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01372"></a>01372 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tI am not a leaf: get split dim&quot;</span> &lt;&lt; std::endl;
<a name="l01373"></a>01373 <span class="preprocessor">      #endif</span>
<a name="l01374"></a>01374 <span class="preprocessor"></span>      
<a name="l01375"></a>01375       <span class="comment">/* Check whether we split on a split dim</span>
<a name="l01376"></a>01376 <span class="comment">        before we do anything to the children*/</span>
<a name="l01377"></a>01377       splitDim = <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>();
<a name="l01378"></a>01378       
<a name="l01379"></a>01379 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01380"></a>01380 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tsplitDim = &quot;</span> &lt;&lt; splitDim &lt;&lt; std::endl;
<a name="l01381"></a>01381 <span class="preprocessor">      #endif</span>
<a name="l01382"></a>01382 <span class="preprocessor"></span>      
<a name="l01383"></a>01383       std::vector&lt; int &gt;::const_iterator found 
<a name="l01384"></a>01384         = find (sliceDims.begin(), sliceDims.end(), splitDim);
<a name="l01385"></a>01385     
<a name="l01386"></a>01386       <span class="comment">// can we find splitDim in the sliceDims?</span>
<a name="l01387"></a>01387       splitOnSliceDim = (found &lt; sliceDims.end()); 
<a name="l01388"></a>01388       
<a name="l01389"></a>01389 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01390"></a>01390 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tsplitOnSliceDim = &quot;</span> &lt;&lt; splitOnSliceDim &lt;&lt; std::endl;
<a name="l01391"></a>01391 <span class="preprocessor">      #endif </span>
<a name="l01392"></a>01392 <span class="preprocessor"></span>    }
<a name="l01393"></a>01393     
<a name="l01394"></a>01394     <span class="comment">/* if I am a leaf, or did not split on a slice dimension,</span>
<a name="l01395"></a>01395 <span class="comment">     * adjust the box */</span> 
<a name="l01396"></a>01396     <span class="keywordflow">if</span> (!splitOnSliceDim) {
<a name="l01397"></a>01397       
<a name="l01398"></a>01398 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01399"></a>01399 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tI did not split on a dimension to take out, or I am a leaf: first deal with children ...&quot;</span> &lt;&lt; std::endl;
<a name="l01400"></a>01400 <span class="preprocessor">      #endif</span>
<a name="l01401"></a>01401 <span class="preprocessor"></span>      
<a name="l01402"></a>01402       <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01403"></a>01403         <span class="comment">// Slice on the children first</span>
<a name="l01404"></a>01404         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_slice(sliceDims, slicePts);
<a name="l01405"></a>01405         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_slice(sliceDims, slicePts);
<a name="l01406"></a>01406       }
<a name="l01407"></a>01407       
<a name="l01408"></a>01408       <span class="comment">// now deal with this node itself</span>
<a name="l01409"></a>01409 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01410"></a>01410 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01411"></a>01411           std::cout &lt;&lt; <span class="stringliteral">&quot;\nback in &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01412"></a>01412           std::cout &lt;&lt; <span class="stringliteral">&quot;\tI did not split on a dimension to take out, or I am a leaf, so need to contract box&quot;</span> &lt;&lt; std::endl;
<a name="l01413"></a>01413         }
<a name="l01414"></a>01414         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy split dimension is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>() &lt;&lt; std::endl;
<a name="l01415"></a>01415         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01416"></a>01416         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l01417"></a>01417 <span class="preprocessor">      #endif</span>
<a name="l01418"></a>01418 <span class="preprocessor"></span>      
<a name="l01419"></a>01419       ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01420"></a>01420       <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l01421"></a>01421       <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l01422"></a>01422     
<a name="l01423"></a>01423       <span class="keywordtype">int</span> newDims = dim - sliceDims.size();
<a name="l01424"></a>01424       ivector newBox = ivector(newDims); 
<a name="l01425"></a>01425       <span class="keywordtype">int</span> index = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(newBox);
<a name="l01426"></a>01426       <span class="keywordtype">int</span> oldindex = boxLB;
<a name="l01427"></a>01427     
<a name="l01428"></a>01428       <span class="comment">// put in the upper and lower bounds for the new box</span>
<a name="l01429"></a>01429       <span class="comment">// for each dimension that stays  </span>
<a name="l01430"></a>01430       <span class="keywordflow">for</span> (; oldindex &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box); oldindex++) {
<a name="l01431"></a>01431         std::vector&lt;int&gt;::const_iterator fit 
<a name="l01432"></a>01432         = find (sliceDims.begin(), sliceDims.end(), (oldindex - boxLB + 1));
<a name="l01433"></a>01433         <span class="keywordflow">if</span> (!(fit &lt; sliceDims.end())) { <span class="comment">// keep this one</span>
<a name="l01434"></a>01434           newBox[index] = box[oldindex];
<a name="l01435"></a>01435           index++;
<a name="l01436"></a>01436         }
<a name="l01437"></a>01437       }
<a name="l01438"></a>01438       
<a name="l01439"></a>01439 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01440"></a>01440 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tnew box is &quot;</span> &lt;&lt; newBox &lt;&lt; std::endl;
<a name="l01441"></a>01441 <span class="preprocessor">      #endif</span>
<a name="l01442"></a>01442 <span class="preprocessor"></span>      
<a name="l01443"></a>01443       <span class="comment">//store the child node locations and then temporarily detach them</span>
<a name="l01444"></a>01444       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a>* savedLC = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l01445"></a>01445       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a>* savedRC = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l01446"></a>01446       <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l01447"></a>01447       <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l01448"></a>01448       
<a name="l01449"></a>01449       <span class="comment">// also need to store parent</span>
<a name="l01450"></a>01450       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a>* savedParent = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>();
<a name="l01451"></a>01451       <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = NULL;
<a name="l01452"></a>01452       
<a name="l01453"></a>01453       T temp = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l01454"></a>01454       
<a name="l01455"></a>01455       <span class="comment">// replace contents of this with contents of a newly made node  </span>
<a name="l01456"></a>01456       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a> tempNode(newBox, temp);
<a name="l01457"></a>01457       this-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24" title="Swap the properties of this and another.">swapMSPSR</a>(tempNode);
<a name="l01458"></a>01458       
<a name="l01459"></a>01459 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01460"></a>01460 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tafter contracting, my box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01461"></a>01461         std::cout &lt;&lt; <span class="stringliteral">&quot;\n\tmy range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l01462"></a>01462 <span class="preprocessor">      #endif</span>
<a name="l01463"></a>01463 <span class="preprocessor"></span>      
<a name="l01464"></a>01464       <span class="comment">// put the child pointers back, and reattach to parent</span>
<a name="l01465"></a>01465       <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = savedLC;
<a name="l01466"></a>01466       <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = savedRC;
<a name="l01467"></a>01467       <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = savedParent;
<a name="l01468"></a>01468       
<a name="l01469"></a>01469     }
<a name="l01470"></a>01470     <span class="keywordflow">else</span> {
<a name="l01471"></a>01471     
<a name="l01472"></a>01472       <span class="comment">/* if we split on any of the slice dimensions</span>
<a name="l01473"></a>01473 <span class="comment">         then we drop this from the tree entirely and</span>
<a name="l01474"></a>01474 <span class="comment">         replace it with the child who actually contains the slice */</span>
<a name="l01475"></a>01475         
<a name="l01476"></a>01476       <span class="comment">/*to do this, we just have to know where we split and look at the slice</span>
<a name="l01477"></a>01477 <span class="comment">       * points on the same dimension and see if they are above or below our</span>
<a name="l01478"></a>01478 <span class="comment">       * split. We know we are not a leaf if we are in here at all.  */</span>
<a name="l01479"></a>01479 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01480"></a>01480 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;I DID split on a dimension to take out (so I can&#39;t be a leaf)&quot;</span> &lt;&lt; std::endl;
<a name="l01481"></a>01481 <span class="preprocessor">      #endif </span>
<a name="l01482"></a>01482 <span class="preprocessor"></span>      
<a name="l01483"></a>01483       real splitValue = Sup(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()[splitDim]);  
<a name="l01484"></a>01484       
<a name="l01485"></a>01485       real slPt = slicePts.at(splitDim-1); <span class="comment">// vectors indexed 0 - n-1</span>
<a name="l01486"></a>01486       
<a name="l01487"></a>01487 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01488"></a>01488 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;split dimension is &quot;</span> &lt;&lt; splitDim &lt;&lt; <span class="stringliteral">&quot; and split value is &quot;</span> &lt;&lt; splitValue &lt;&lt; std::endl;
<a name="l01489"></a>01489         std::cout &lt;&lt; <span class="stringliteral">&quot;slPt = slicePts.at(splitDim-1) is &quot;</span> &lt;&lt; slPt &lt;&lt; std::endl;
<a name="l01490"></a>01490 <span class="preprocessor">      #endif</span>
<a name="l01491"></a>01491 <span class="preprocessor"></span>      
<a name="l01492"></a>01492       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a> temp;
<a name="l01493"></a>01493       
<a name="l01494"></a>01494       <span class="comment">// save parent</span>
<a name="l01495"></a>01495       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt;T&gt;</a>* savedParent = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>();
<a name="l01496"></a>01496       <span class="comment">// detach from parent temporarily</span>
<a name="l01497"></a>01497       <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = NULL;
<a name="l01498"></a>01498         
<a name="l01499"></a>01499       <span class="keywordflow">if</span> (slPt &lt; splitValue) { <span class="comment">// crucial slice point is in left child</span>
<a name="l01500"></a>01500       
<a name="l01501"></a>01501 <span class="preprocessor">        #ifdef SLICE_OUTPUT</span>
<a name="l01502"></a>01502 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;slPt is in left child&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01503"></a>01503           std::cout &lt;&lt; <span class="stringliteral">&quot;need to do getLeftChild()-&gt;_slice(sliceDims, slicePts) and then copy it &quot;</span> &lt;&lt; std::endl;
<a name="l01504"></a>01504 <span class="preprocessor">        #endif</span>
<a name="l01505"></a>01505 <span class="preprocessor"></span>        
<a name="l01506"></a>01506         <span class="comment">// Slice on the left child</span>
<a name="l01507"></a>01507         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;_slice(sliceDims, slicePts);
<a name="l01508"></a>01508         
<a name="l01509"></a>01509         <span class="comment">// copy left child</span>
<a name="l01510"></a>01510         temp = *<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l01511"></a>01511       }
<a name="l01512"></a>01512       <span class="keywordflow">else</span> { <span class="comment">// crucial slice point is in right child</span>
<a name="l01513"></a>01513       
<a name="l01514"></a>01514 <span class="preprocessor">        #ifdef SLICE_OUTPUT</span>
<a name="l01515"></a>01515 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;slPt is in right child&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01516"></a>01516           std::cout &lt;&lt; <span class="stringliteral">&quot;need to do getRightChild()-&gt;_slice(sliceDims, slicePts) and then copy it &quot;</span> &lt;&lt; std::endl;
<a name="l01517"></a>01517 <span class="preprocessor">        #endif</span>
<a name="l01518"></a>01518 <span class="preprocessor"></span>        
<a name="l01519"></a>01519         <span class="comment">// Slice on the right child</span>
<a name="l01520"></a>01520         <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;_slice(sliceDims, slicePts);
<a name="l01521"></a>01521         
<a name="l01522"></a>01522         <span class="comment">// copy left child</span>
<a name="l01523"></a>01523         temp = *<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l01524"></a>01524       }
<a name="l01525"></a>01525       
<a name="l01526"></a>01526 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01527"></a>01527 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\nback in &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01528"></a>01528         std::cout &lt;&lt; <span class="stringliteral">&quot;\tNow copy the temp into me&quot;</span> &lt;&lt; std::endl;
<a name="l01529"></a>01529         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy split dimension is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>() &lt;&lt; std::endl;
<a name="l01530"></a>01530         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01531"></a>01531         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l01532"></a>01532 <span class="preprocessor">      #endif</span>
<a name="l01533"></a>01533 <span class="preprocessor"></span>      
<a name="l01534"></a>01534       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24" title="Swap the properties of this and another.">swapMSPSR</a>(temp); <span class="comment">//swap me and temp</span>
<a name="l01535"></a>01535         
<a name="l01536"></a>01536 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01537"></a>01537 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\tre-made me out of copy of child that is sliced:&quot;</span> &lt;&lt; std::endl;
<a name="l01538"></a>01538         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy name (before renaming) is now &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01539"></a>01539         std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy range is now &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l01540"></a>01540         std::cout &lt;&lt; <span class="stringliteral">&quot;\tand my box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01541"></a>01541         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l01542"></a>01542           std::cout &lt;&lt; <span class="stringliteral">&quot;\tand my children (before renaming) are:&quot;</span> &lt;&lt; std::endl;
<a name="l01543"></a>01543           <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;oneLineOutput(std::cout, 2);
<a name="l01544"></a>01544           <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;oneLineOutput(std::cout, 2);
<a name="l01545"></a>01545         }
<a name="l01546"></a>01546 <span class="preprocessor">      #endif</span>
<a name="l01547"></a>01547 <span class="preprocessor"></span>      
<a name="l01548"></a>01548       <span class="comment">// restore relationship to parent</span>
<a name="l01549"></a>01549       <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = savedParent;
<a name="l01550"></a>01550         
<a name="l01551"></a>01551         
<a name="l01552"></a>01552         
<a name="l01553"></a>01553     }<span class="comment">// end else</span>
<a name="l01554"></a>01554     
<a name="l01555"></a>01555     <span class="comment">//if we are the root, recursively rename everything</span>
<a name="l01556"></a>01556     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>() == NULL) {
<a name="l01557"></a>01557       <a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<span class="stringliteral">&quot;X&quot;</span>); <span class="comment">// my name might be wrong</span>
<a name="l01558"></a>01558       <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l01559"></a>01559 <span class="preprocessor">      #ifdef MARG_OUTPUT</span>
<a name="l01560"></a>01560 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\nNow recursively rename everything from me down\n\n&quot;</span> &lt;&lt; std::endl;
<a name="l01561"></a>01561 <span class="preprocessor">      #endif</span>
<a name="l01562"></a>01562 <span class="preprocessor"></span>    }
<a name="l01563"></a>01563   }
<a name="l01564"></a>01564   
<a name="l01591"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44">01591</a>   <span class="keyword">virtual</span> std::vector &lt; cxsc::real &gt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44" title="Check slice parameters and return a full vector of slice points.">sliceCheck</a>(
<a name="l01592"></a>01592       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l01593"></a>01593       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts)<span class="keyword"> const</span>
<a name="l01594"></a>01594 <span class="keyword">  </span>{
<a name="l01595"></a>01595     std::vector &lt; cxsc::real &gt; fullSlicePts;
<a name="l01596"></a>01596     
<a name="l01597"></a>01597     <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a700d3bf53c72e2fdecf27446fab902ef" title="Accessor for the parent of a node.">getParent</a>() != NULL ) {
<a name="l01598"></a>01598       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">NonRootNode_Error</a>(
<a name="l01599"></a>01599         <span class="stringliteral">&quot;sliceCheck error found&quot;</span>);
<a name="l01600"></a>01600     }
<a name="l01601"></a>01601     <span class="keywordflow">if</span> ( !sliceDims.empty() || !slicePts.empty()) {
<a name="l01602"></a>01602       
<a name="l01603"></a>01603     
<a name="l01604"></a>01604       <span class="keywordflow">if</span> ( sliceDims.size() != slicePts.size()) {
<a name="l01605"></a>01605         <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01606"></a>01606           <span class="stringliteral">&quot;sliceCheck error found: sliceDims.size() != slicePts.size()&quot;</span>);
<a name="l01607"></a>01607       }
<a name="l01608"></a>01608       
<a name="l01609"></a>01609       <span class="comment">/* get ordered unique values in sliceDims*/</span>
<a name="l01610"></a>01610       std::set&lt;int&gt; dimsSet(sliceDims.begin(), sliceDims.end());
<a name="l01611"></a>01611       
<a name="l01612"></a>01612       <span class="keywordflow">if</span> ( dimsSet.size() &lt; sliceDims.size()) {
<a name="l01613"></a>01613         <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01614"></a>01614           <span class="stringliteral">&quot;sliceCheck error found: duplicate dimensions in sliceDims&quot;</span>);
<a name="l01615"></a>01615       }
<a name="l01616"></a>01616       
<a name="l01617"></a>01617       <span class="keywordflow">if</span> ( dimsSet.size() &gt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>()) {
<a name="l01618"></a>01618         <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01619"></a>01619           <span class="stringliteral">&quot;sliceCheck error found: number of dimensions to slice on &gt;= dimensions of this&quot;</span>);
<a name="l01620"></a>01620       }
<a name="l01621"></a>01621       
<a name="l01622"></a>01622       
<a name="l01623"></a>01623       <span class="comment">/* check that each of the values in sliceDims is a dimension of this*/</span>
<a name="l01624"></a>01624       ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01625"></a>01625       <span class="keywordtype">int</span> lb = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l01626"></a>01626       <span class="keywordtype">int</span> ub = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box);  <span class="comment">// ub-lb+1 = dim of box</span>
<a name="l01627"></a>01627       
<a name="l01628"></a>01628       <span class="comment">// make a full vector of dim reals, 0.0&#39;s in all positions</span>
<a name="l01629"></a>01629       fullSlicePts =  std::vector&lt; cxsc::real &gt;(ub-lb+1, real(0.0));
<a name="l01630"></a>01630       
<a name="l01631"></a>01631 <span class="preprocessor">      #ifdef SLICE_OUTPUT</span>
<a name="l01632"></a>01632 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;\nin slice&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01633"></a>01633         std::cout &lt;&lt; <span class="stringliteral">&quot;lb = &quot;</span> &lt;&lt; lb &lt;&lt; <span class="stringliteral">&quot; and ub = &quot;</span> &lt;&lt; ub &lt;&lt; std::endl;
<a name="l01634"></a>01634 <span class="preprocessor">      #endif</span>
<a name="l01635"></a>01635 <span class="preprocessor"></span>      
<a name="l01636"></a>01636       std::vector &lt; real &gt;::const_iterator rit = slicePts.begin();
<a name="l01637"></a>01637       <span class="keywordflow">for</span> ( std::vector &lt; int &gt;::const_iterator cit = sliceDims.begin();
<a name="l01638"></a>01638           cit &lt; sliceDims.end();
<a name="l01639"></a>01639           ++cit, ++rit) {
<a name="l01640"></a>01640         <span class="keywordtype">int</span> d = *cit;
<a name="l01641"></a>01641 <span class="preprocessor">        #ifdef SLICE_OUTPUT</span>
<a name="l01642"></a>01642 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;checking d =&quot;</span> &lt;&lt; d &lt;&lt; std::endl;
<a name="l01643"></a>01643           std::cout &lt;&lt; <span class="stringliteral">&quot;*rit =&quot;</span> &lt;&lt; (*rit) &lt;&lt; std::endl;
<a name="l01644"></a>01644 <span class="preprocessor">        #endif</span>
<a name="l01645"></a>01645 <span class="preprocessor"></span>          
<a name="l01646"></a>01646         <span class="keywordflow">if</span> (d &lt; lb || d &gt; ub) {
<a name="l01647"></a>01647           <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01648"></a>01648           <span class="stringliteral">&quot;sliceCheck error found: illegal dimension in sliceDims&quot;</span>);
<a name="l01649"></a>01649         }
<a name="l01650"></a>01650 <span class="preprocessor">        #ifdef SLICE_OUTPUT</span>
<a name="l01651"></a>01651 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;box[d] =&quot;</span> &lt;&lt; box[d] &lt;&lt; std::endl;
<a name="l01652"></a>01652           std::cout &lt;&lt; <span class="stringliteral">&quot;(*rit) &lt;= box[d] =&quot;</span> &lt;&lt; ((*rit) &lt;= box[d]) &lt;&lt; std::endl;
<a name="l01653"></a>01653 <span class="preprocessor">        #endif</span>
<a name="l01654"></a>01654 <span class="preprocessor"></span>        real r = *rit;
<a name="l01655"></a>01655         <span class="keywordflow">if</span> (!(r &lt;= box[d])) {
<a name="l01656"></a>01656           <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01657"></a>01657           <span class="stringliteral">&quot;sliceCheck error found: illegal pt in slicePts&quot;</span>);
<a name="l01658"></a>01658         }
<a name="l01659"></a>01659 <span class="preprocessor">        #ifdef SLICE_OUTPUT</span>
<a name="l01660"></a>01660 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;fullSlicePts[&quot;</span> &lt;&lt; (d-lb) &lt;&lt; <span class="stringliteral">&quot;] = &quot;</span> &lt;&lt; r &lt;&lt; std::endl;
<a name="l01661"></a>01661 <span class="preprocessor">        #endif</span>
<a name="l01662"></a>01662 <span class="preprocessor"></span>        
<a name="l01663"></a>01663         fullSlicePts[d-lb] = r;
<a name="l01664"></a>01664       }
<a name="l01665"></a>01665       
<a name="l01666"></a>01666     } <span class="comment">// end check at least one is non-empty</span>
<a name="l01667"></a>01667     <span class="keywordflow">else</span>  { <span class="comment">// both empty</span>
<a name="l01668"></a>01668       <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l01669"></a>01669         <span class="stringliteral">&quot;sliceCheck error found: sliceDims and slicePts both empty&quot;</span>);
<a name="l01670"></a>01670     }
<a name="l01671"></a>01671     <span class="keywordflow">return</span> fullSlicePts;
<a name="l01672"></a>01672   }
<a name="l01673"></a>01673   
<a name="l01674"></a>01674 
<a name="l01675"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acfbd13653a91c69a7091c6e9c18a6d68">01675</a>   <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#acfbd13653a91c69a7091c6e9c18a6d68">oneLineOutput</a>(std::ostream&amp; os, <span class="keywordtype">int</span> level)<span class="keyword"> const</span>
<a name="l01676"></a>01676 <span class="keyword">  </span>{
<a name="l01677"></a>01677     <span class="comment">// do me</span>
<a name="l01678"></a>01678     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; ++i) { os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>; }
<a name="l01679"></a>01679     os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; <span class="stringliteral">&quot;\tRange: &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> 
<a name="l01680"></a>01680                   &lt;&lt; <span class="stringliteral">&quot;\tbox: &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01681"></a>01681     
<a name="l01682"></a>01682     <span class="comment">// do children</span>
<a name="l01683"></a>01683     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;oneLineOutput(os, level+1);
<a name="l01684"></a>01684     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;oneLineOutput(os, level+1);
<a name="l01685"></a>01685     
<a name="l01686"></a>01686     <span class="keywordflow">return</span> os;
<a name="l01687"></a>01687   }
<a name="l01688"></a>01688 
<a name="l01689"></a>01689   <span class="comment">// data members</span>
<a name="l01690"></a>01690   
<a name="l01693"></a><a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d">01693</a>     T <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01694"></a>01694 
<a name="l01695"></a>01695 
<a name="l01696"></a>01696 
<a name="l01697"></a>01697   
<a name="l01698"></a>01698   <span class="keyword">private</span>:
<a name="l01699"></a>01699 
<a name="l01700"></a>01700     <span class="comment">/* theBox, parent, leftChild,</span>
<a name="l01701"></a>01701 <span class="comment">    rightChild and nodeName are inherited from base class.</span>
<a name="l01702"></a>01702 <span class="comment">    */</span>
<a name="l01703"></a>01703 
<a name="l01704"></a>01704     
<a name="l01705"></a>01705 
<a name="l01706"></a>01706 
<a name="l01707"></a>01707  }; <span class="comment">// end MappedSPnode&lt;T&gt; class</span>
<a name="l01708"></a>01708 
<a name="l01709"></a>01709 
<a name="l01710"></a>01710 
<a name="l01711"></a>01711     <span class="comment">// ----------------- non member tools functions ----------------------</span>
<a name="l01712"></a>01712 
<a name="l01713"></a>01713 
<a name="l01714"></a>01714 } <span class="comment">// end namespace subpavings</span>
<a name="l01715"></a>01715 
<a name="l01717"></a>01717 <span class="keyword">namespace </span>std
<a name="l01718"></a>01718 {
<a name="l01719"></a>01719   <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l01720"></a>01720   <span class="keywordtype">void</span> swap(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">subpavings::MappedSPnode&lt;T&gt;</a> &amp; s1, 
<a name="l01721"></a>01721       <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">subpavings::MappedSPnode&lt;T&gt;</a> &amp; s2) <span class="comment">// throw ()</span>
<a name="l01722"></a>01722   {
<a name="l01723"></a>01723     s1.swapMSP(s2);
<a name="l01724"></a>01724   }
<a name="l01725"></a>01725 }
<a name="l01726"></a>01726 
<a name="l01727"></a>01727 
<a name="l01728"></a>01728 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="mappedspnode_8hpp.shtml">mappedspnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
