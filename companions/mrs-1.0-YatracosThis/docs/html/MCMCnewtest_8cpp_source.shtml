<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCnewtest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCnewtest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCnewtest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCnewtest_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="MCMC__Trunk_2dataprep_8hpp.shtml">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;cassert&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>cxsc;
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>std;
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>subpavings;
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="MCMCnewtest_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00042</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044     <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// set up a random number generator</span>
<a name="l00047"></a>00047     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00048"></a>00048     gsl_rng * r;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     <span class="keyword">const</span> <span class="keywordtype">int</span> n=1000;    <span class="comment">// number to generate</span>
<a name="l00051"></a>00051     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     gsl_rng_env_setup();
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     T = gsl_rng_default;
<a name="l00056"></a>00056     r = gsl_rng_alloc (T);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00059"></a>00059     <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00060"></a>00060     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00061"></a>00061     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00062"></a>00062     oss.precision(5);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="keywordtype">int</span> d = 5; <span class="comment">// dimension of the box to sample data from</span>
<a name="l00065"></a>00065     ivector pavingBox(d);
<a name="l00066"></a>00066     interval pavingInterval(0,1);
<a name="l00067"></a>00067     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="comment">// make a simulated data set allData to sample from</span>
<a name="l00072"></a>00072     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00073"></a>00073 
<a name="l00074"></a>00074         rvector thisrv(d);
<a name="l00075"></a>00075         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j &lt;= d; j++) {
<a name="l00076"></a>00076       thisrv[j]  = gsl_rng_uniform(r);
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="comment">// put points generated into container</span>
<a name="l00080"></a>00080         theData.push_back(thisrv);
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     }  <span class="comment">// data  should be in theData</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <span class="comment">// free the random number generator</span>
<a name="l00085"></a>00085     gsl_rng_free (r);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordtype">int</span> prec = 10;
<a name="l00088"></a>00088   <span class="keywordtype">bool</span> confirm = <span class="keyword">true</span>;
<a name="l00089"></a>00089   
<a name="l00090"></a>00090   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = 100;
<a name="l00091"></a>00091   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = 10;
<a name="l00092"></a>00092   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = 10;
<a name="l00093"></a>00093   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00094"></a>00094   <span class="keywordtype">int</span> minPoints = 1;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="comment">// set up proposal distribution object</span>
<a name="l00097"></a>00097   <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00098"></a>00098   <span class="comment">// set up prior distribution object</span>
<a name="l00099"></a>00099   <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00100"></a>00100     
<a name="l00101"></a>00101   cout &lt;&lt; endl &lt;&lt; endl;
<a name="l00102"></a>00102     cout &lt;&lt; <span class="stringliteral">&quot;\n\nStart example: n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; and d = &quot;</span> &lt;&lt; d &lt;&lt; endl;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00106"></a>00106     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00107"></a>00107     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00108"></a>00108     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBox);
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00111"></a>00111         <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00114"></a>00114       
<a name="l00115"></a>00115       <span class="comment">/* make a generator for this mcmc run */</span>
<a name="l00116"></a>00116       <span class="keywordtype">int</span> seed = 1234;
<a name="l00117"></a>00117       gsl_rng * rgsl = gsl_rng_alloc (gsl_rng_mt19937);
<a name="l00118"></a>00118         
<a name="l00119"></a>00119       gsl_rng_set(rgsl, seed);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121       cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC PiecewiseConstantFunction samples &quot;</span>  &lt;&lt; endl;
<a name="l00122"></a>00122       clock_t start, end;
<a name="l00123"></a>00123       start = clock();
<a name="l00124"></a>00124 
<a name="l00125"></a>00125       <span class="comment">// MCMC with 2000 states, burn in 1500, thinout every 100 etc</span>
<a name="l00126"></a>00126       <span class="comment">// create a log file only for samples (no dot graphs)</span>
<a name="l00127"></a>00127       
<a name="l00128"></a>00128       
<a name="l00129"></a>00129       std::vector &lt; PiecewiseConstantFunction &gt; samples;
<a name="l00130"></a>00130       samples = myHistFirst.MCMCsamplesNEW(samples, loops, burnin, thinout,
<a name="l00131"></a>00131                         proposal, logPrior,
<a name="l00132"></a>00132                         minPoints, logging,
<a name="l00133"></a>00133                         rgsl);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135       end = clock();
<a name="l00136"></a>00136 
<a name="l00137"></a>00137       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00138"></a>00138          &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00139"></a>00139       
<a name="l00140"></a>00140       assert(!samples.empty());
<a name="l00141"></a>00141       std::vector &lt; PiecewiseConstantFunction &gt;::iterator it = samples.begin();
<a name="l00142"></a>00142       it++;
<a name="l00143"></a>00143       <span class="keywordflow">for</span> (; it &lt; samples.end(); ++it) {
<a name="l00144"></a>00144         samples.front() += (*it);
<a name="l00145"></a>00145       }
<a name="l00146"></a>00146       <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> result = samples.front()/cxsc::real(1.0*samples.size());
<a name="l00147"></a>00147       
<a name="l00148"></a>00148       cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC averaging over samples&quot;</span> &lt;&lt; endl;
<a name="l00149"></a>00149       <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;pcfAverage.txt&quot;</span>;
<a name="l00150"></a>00150       
<a name="l00151"></a>00151       result.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(mcmcAvFilename, prec, confirm);
<a name="l00152"></a>00152       
<a name="l00153"></a>00153       
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00156"></a>00156   }
<a name="l00157"></a>00157   {
<a name="l00158"></a>00158     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00159"></a>00159     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00160"></a>00160     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00161"></a>00161     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBox);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00164"></a>00164         <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00167"></a>00167       
<a name="l00168"></a>00168       <span class="comment">/* make a generator for this mcmc run */</span>
<a name="l00169"></a>00169       <span class="keywordtype">int</span> seed = 1234;
<a name="l00170"></a>00170       gsl_rng * rgsl = gsl_rng_alloc (gsl_rng_mt19937);
<a name="l00171"></a>00171         
<a name="l00172"></a>00172       gsl_rng_set(rgsl, seed);
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 
<a name="l00175"></a>00175       cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC PiecewiseConstantFunction samples &quot;</span>  &lt;&lt; endl;
<a name="l00176"></a>00176       clock_t start, end;
<a name="l00177"></a>00177       start = clock();
<a name="l00178"></a>00178 
<a name="l00179"></a>00179       <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> mcmcAv = myHistFirst.MCMCNEW(
<a name="l00180"></a>00180                           loops, burnin, thinout,
<a name="l00181"></a>00181                           proposal, logPrior,
<a name="l00182"></a>00182                           minPoints, logging,
<a name="l00183"></a>00183                           rgsl);
<a name="l00184"></a>00184       
<a name="l00185"></a>00185       end = clock();
<a name="l00186"></a>00186 
<a name="l00187"></a>00187       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00188"></a>00188          &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00189"></a>00189       
<a name="l00190"></a>00190       cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC get average&quot;</span> &lt;&lt; endl;
<a name="l00191"></a>00191       <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;pcfDirectAverage.txt&quot;</span>;
<a name="l00192"></a>00192       
<a name="l00193"></a>00193       mcmcAv.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(mcmcAvFilename, prec, confirm);
<a name="l00194"></a>00194           
<a name="l00195"></a>00195       
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00198"></a>00198   }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200   
<a name="l00201"></a>00201   {
<a name="l00202"></a>00202     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00203"></a>00203     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00204"></a>00204     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00205"></a>00205     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBox);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00208"></a>00208         <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00209"></a>00209 
<a name="l00210"></a>00210     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00211"></a>00211 
<a name="l00212"></a>00212       cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC AdaptiveHistogram samples &quot;</span>  &lt;&lt; endl;
<a name="l00213"></a>00213       clock_t start, end;
<a name="l00214"></a>00214       start = clock();
<a name="l00215"></a>00215 
<a name="l00216"></a>00216       <span class="comment">// MCMC with 2000 states, burn in 1500, thinout every 100 etc</span>
<a name="l00217"></a>00217       <span class="comment">// create a log file only for samples (no dot graphs)</span>
<a name="l00218"></a>00218       
<a name="l00219"></a>00219       std::vector &lt; AdaptiveHistogram &gt; samples;
<a name="l00220"></a>00220       samples = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9" title="Generating MCMC samples from histogram state space.">MCMCsamples</a>(samples, loops, burnin, thinout,
<a name="l00221"></a>00221                         proposal, logPrior,
<a name="l00222"></a>00222                         minPoints, logging);
<a name="l00223"></a>00223       
<a name="l00224"></a>00224       
<a name="l00225"></a>00225       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> tempColl;
<a name="l00226"></a>00226       tempColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(samples);
<a name="l00227"></a>00227       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> mcmcAv = tempColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00228"></a>00228       
<a name="l00229"></a>00229       end = clock();
<a name="l00230"></a>00230 
<a name="l00231"></a>00231       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00232"></a>00232          &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234       cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC adaptive histogram sample averaging&quot;</span> &lt;&lt; endl;
<a name="l00235"></a>00235       <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;adhAverage.txt&quot;</span>;
<a name="l00236"></a>00236         
<a name="l00237"></a>00237       mcmcAv.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(mcmcAvFilename, prec, confirm);
<a name="l00238"></a>00238             
<a name="l00239"></a>00239       
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00242"></a>00242   }
<a name="l00243"></a>00243   
<a name="l00244"></a>00244     <span class="keywordflow">return</span> 0;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 } <span class="comment">// end of MCMC test program</span>
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCnewtest_8cpp.shtml">MCMCnewtest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
