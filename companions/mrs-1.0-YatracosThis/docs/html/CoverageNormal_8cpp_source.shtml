<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CoverageNormal.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('CoverageNormal_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">CoverageNormal.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="CoverageNormal_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="comment">// header files</span>
<a name="l00027"></a>00027 <span class="comment">// to use std::vector</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="comment">// to use iterators</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00031"></a>00031 <span class="comment">// to use valarray</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include&lt;map&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed for integration</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;boost/math/distributions/normal.hpp&gt;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">using namespace </span>cxsc;
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>std;
<a name="l00054"></a>00054 <span class="keyword">using</span> boost::math::normal;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">// structure for the mixture model</span>
<a name="l00057"></a>00057 <span class="keyword">struct </span><a class="code" href="structFinMix.shtml">FinMix</a>
<a name="l00058"></a>00058 {
<a name="l00059"></a><a class="code" href="structFinMix.shtml#ace04e4bbc987bf52978775e974845fcc">00059</a> vector&lt;double&gt; <a class="code" href="structFinMix.shtml#ace04e4bbc987bf52978775e974845fcc">W</a>;
<a name="l00060"></a><a class="code" href="structFinMix.shtml#aaef54338ed42427daaa1a4567f042a26">00060</a> vector&lt;double&gt; <a class="code" href="structFinMix.shtml#aaef54338ed42427daaa1a4567f042a26">M</a>;
<a name="l00061"></a><a class="code" href="structFinMix.shtml#a3a9d330805184d137baf041fcc18c24a">00061</a> vector&lt;double&gt; <a class="code" href="structFinMix.shtml#a3a9d330805184d137baf041fcc18c24a">S</a>;
<a name="l00062"></a>00062 <span class="keywordtype">double</span> fhat;
<a name="l00063"></a>00063 };
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">//function declaration</span>
<a name="l00068"></a>00068 <span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00071"></a>00071 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00074"></a>00074 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00075"></a>00075 
<a name="l00078"></a>00078 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="keyword">inline</span> dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">inline</span> dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">//------------------start of main programme------------------------------</span>
<a name="l00085"></a><a class="code" href="CoverageNormal_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00085</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087 <span class="comment">// user-input Kn and which dataset to use</span>
<a name="l00088"></a>00088 <span class="keywordtype">int</span> mix = atoi(argv[1]);
<a name="l00089"></a>00089 <span class="keywordtype">int</span> D=atoi(argv[2]);
<a name="l00090"></a>00090 <span class="keywordtype">int</span> step=atoi(argv[3]);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">// Read mixture file</span>
<a name="l00093"></a>00093 <span class="keywordtype">string</span> mixfileName;
<a name="l00094"></a>00094 mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00095"></a>00095 std::ostringstream stm1;
<a name="l00096"></a>00096 stm1 &lt;&lt; mix;
<a name="l00097"></a>00097 mixfileName += stm1.str();
<a name="l00098"></a>00098 mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00099"></a>00099 ifstream infile(mixfileName.c_str());
<a name="l00100"></a>00100 <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00101"></a>00101 <span class="keywordtype">double</span> W, M, V;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">// create vectors for Weight, Mean, Sigma</span>
<a name="l00104"></a>00104 vector&lt;double&gt; Weight;
<a name="l00105"></a>00105 vector&lt;double&gt; Mean;
<a name="l00106"></a>00106 vector&lt;double&gt; Sigma;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="keywordflow">while</span> ( !infile.eof() )
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110 infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 W=Weight1/Weight2;
<a name="l00113"></a>00113 Weight.push_back(W);
<a name="l00114"></a>00114 M=Mean1/Mean2;
<a name="l00115"></a>00115 Mean.push_back(M);
<a name="l00116"></a>00116 V=Var1/Var2;
<a name="l00117"></a>00117 Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00118"></a>00118 }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 Weight.pop_back();
<a name="l00121"></a>00121 Mean.pop_back();
<a name="l00122"></a>00122 Sigma.pop_back();
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="comment">// get number of components in mixture</span>
<a name="l00125"></a>00125 <span class="keywordtype">int</span> Ncomp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Ncomp &lt;&lt; <span class="stringliteral">&quot; components in mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 <span class="comment">// put the parameters as data members of the structure</span>
<a name="l00130"></a>00130 <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00131"></a>00131 mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="comment">// Build the Histogram</span>
<a name="l00134"></a>00134 <span class="comment">// make a box: the same box will be used by all histograms</span>
<a name="l00135"></a>00135 <span class="comment">// so should be big enough for all of them</span>
<a name="l00136"></a>00136     ivector pavingBox(1);
<a name="l00137"></a>00137     interval dim(-10,10);
<a name="l00138"></a>00138     pavingBox[1] = dim;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 cout &lt;&lt; <span class="stringliteral">&quot;Doing hist number &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="comment">// create a name for the file of random variates.</span>
<a name="l00144"></a>00144 <span class="keywordtype">string</span> samplesfileName;
<a name="l00145"></a>00145 samplesfileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00146"></a>00146 std::ostringstream stm2;
<a name="l00147"></a>00147 stm2 &lt;&lt; D;
<a name="l00148"></a>00148 samplesfileName += stm1.str();
<a name="l00149"></a>00149 samplesfileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00150"></a>00150 samplesfileName += stm2.str();
<a name="l00151"></a>00151 samplesfileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 cout &lt;&lt; <span class="stringliteral">&quot;Reading data from file &quot;</span> &lt;&lt; samplesfileName  &lt;&lt; endl;
<a name="l00154"></a>00154 <span class="keywordtype">int</span> n = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(samplesfileName);
<a name="l00155"></a>00155 cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; random variables &quot;</span> &lt;&lt; n &lt;&lt; endl;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="comment">// maxCount</span>
<a name="l00158"></a>00158 <span class="keywordtype">size_t</span> maxCount = n;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">// set up containers</span>
<a name="l00161"></a>00161  vector&lt;double&gt; timeVec;
<a name="l00162"></a>00162  vector&lt;double&gt;::iterator itTimeVec;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164  vector&lt;dotprecision&gt; dpIAEVec;
<a name="l00165"></a>00165  vector&lt;dotprecision&gt;::iterator dpIAEVecIt;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167  vector&lt;int&gt; nBoxVec;
<a name="l00168"></a>00168  vector&lt;int&gt;::iterator nBoxVecIt;
<a name="l00169"></a>00169 
<a name="l00170"></a>00170  vector&lt;double&gt; covAllVec;
<a name="l00171"></a>00171  vector&lt;double&gt;::iterator itCovAllVec;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173  vector&lt;double&gt; diffMuVec;
<a name="l00174"></a>00174  vector&lt;double&gt;::iterator itDiffMuVec;
<a name="l00175"></a>00175  
<a name="l00176"></a>00176 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> mC = 1; mC &lt;= maxCount; mC++)
<a name="l00177"></a>00177 {
<a name="l00178"></a>00178     <span class="keywordtype">int</span> maxC = mC*step;
<a name="l00179"></a>00179     cout &lt;&lt; <span class="stringliteral">&quot;Maximum count is : &quot;</span> &lt;&lt; maxC &lt;&lt; endl;
<a name="l00180"></a>00180   
<a name="l00181"></a>00181    <span class="comment">// set up parameters for prioritySplit</span>
<a name="l00182"></a>00182    <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(maxC);
<a name="l00183"></a>00183    <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">// fileName to store output from histogram constructed</span>
<a name="l00186"></a>00186     <span class="keywordtype">string</span> fileName;
<a name="l00187"></a>00187     <span class="keywordtype">bool</span> successfulInsertion; <span class="comment">//for successful insertion of data from container</span>
<a name="l00188"></a>00188     <span class="keywordtype">bool</span> successfulPQSplit;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190         <span class="comment">// Construct histogram</span>
<a name="l00191"></a>00191         clock_t start, end;
<a name="l00192"></a>00192   start = clock();
<a name="l00193"></a>00193         <span class="comment">// make an Adaptive Histogram object with a specified box</span>
<a name="l00194"></a>00194         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00195"></a>00195   <span class="comment">// AdaptiveHistogram myHist;</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197         successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesfileName);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00200"></a>00200         successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00201"></a>00201         
<a name="l00202"></a>00202        end = clock();
<a name="l00203"></a>00203        <span class="keywordtype">double</span> timing;
<a name="l00204"></a>00204        timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00205"></a>00205        cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00206"></a>00206        timeVec.push_back(timing);
<a name="l00207"></a>00207        } <span class="comment">// end of successfulInsertion</span>
<a name="l00208"></a>00208  
<a name="l00209"></a>00209        successfulInsertion = successfulInsertion &amp;&amp; successfulPQSplit;
<a name="l00210"></a>00210   
<a name="l00211"></a>00211 
<a name="l00212"></a>00212         <span class="comment">// only do more if some data was fed in</span>
<a name="l00213"></a>00213         <span class="keywordflow">if</span>(successfulInsertion) {
<a name="l00214"></a>00214 
<a name="l00215"></a>00215             <span class="comment">// optional</span>
<a name="l00216"></a>00216             <span class="comment">// To realise a file output</span>
<a name="l00217"></a>00217             <span class="comment">// create a name for the file to output</span>
<a name="l00218"></a>00218   <span class="comment">//    fileName = &quot;FinMix&quot;;</span>
<a name="l00219"></a>00219             <span class="comment">// convert j and k to a string</span>
<a name="l00220"></a>00220        <span class="comment">//     std::ostringstream stm3;</span>
<a name="l00221"></a>00221        <span class="comment">//     stm3 &lt;&lt; maxC;</span>
<a name="l00222"></a>00222             <span class="comment">// add the stringed j to the filename</span>
<a name="l00223"></a>00223     <span class="comment">//        fileName += stm1.str();</span>
<a name="l00224"></a>00224     <span class="comment">//        fileName = &quot;AdapHist&quot;;</span>
<a name="l00225"></a>00225 <span class="comment">//      fileName += stm3.str();</span>
<a name="l00226"></a>00226 <span class="comment">//            fileName += &quot;Data&quot;;</span>
<a name="l00227"></a>00227 <span class="comment">//            fileName += stm2.str();</span>
<a name="l00228"></a>00228     <span class="comment">//  fileName += &quot;Data&quot;;</span>
<a name="l00229"></a>00229 <span class="comment">//      fileName += stm2.str();</span>
<a name="l00230"></a>00230 <span class="comment">//            fileName += &quot;.txt&quot;; // and finish the filename</span>
<a name="l00231"></a>00231 <span class="comment">//            myHist.outputToTxtTabs(fileName);</span>
<a name="l00232"></a>00232   
<a name="l00233"></a>00233           <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00234"></a>00234           <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00235"></a>00235           myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l00236"></a>00236           <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00237"></a>00237 
<a name="l00238"></a>00238           <span class="comment">// a container for the counts</span>
<a name="l00239"></a>00239           <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l00240"></a>00240                             <span class="comment">// the iterator is typedefed as IntVecItr</span>
<a name="l00241"></a>00241           <span class="comment">// a container for the boxes</span>
<a name="l00242"></a>00242           vector&lt;ivector&gt; boxes;
<a name="l00243"></a>00243           vector&lt;ivector&gt;::iterator itBoxes;
<a name="l00244"></a>00244           <span class="comment">// a container for the volumes</span>
<a name="l00245"></a>00245           vector&lt;double&gt; volumes;
<a name="l00246"></a>00246           <span class="comment">// a valarray container for the node levels, sized to fit</span>
<a name="l00247"></a>00247           valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()));
<a name="l00248"></a>00248           <span class="comment">// a container for fhat</span>
<a name="l00249"></a>00249           vector&lt;double&gt; fhat;
<a name="l00250"></a>00250           vector&lt;double&gt;::iterator itFhat;
<a name="l00251"></a>00251           <span class="comment">// a container for Fstar</span>
<a name="l00252"></a>00252           vector&lt;double&gt; Fstar;
<a name="l00253"></a>00253          
<a name="l00254"></a>00254           <span class="keywordtype">double</span> diffMu = 0;
<a name="l00255"></a>00255 
<a name="l00256"></a>00256        <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00257"></a>00257         <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00258"></a>00258         <span class="comment">// get the counts in all the leaves</span>
<a name="l00259"></a>00259         counts.push_back((*it)-&gt;getCounter());
<a name="l00260"></a>00260         <span class="comment">// get the boxes from all the leaves</span>
<a name="l00261"></a>00261         boxes.push_back((*it)-&gt;getBox());
<a name="l00262"></a>00262         <span class="comment">// get the volumes of all the leaves</span>
<a name="l00263"></a>00263         volumes.push_back((*it)-&gt;nodeVolume());
<a name="l00264"></a>00264         <span class="comment">// get fhat for all leaves</span>
<a name="l00265"></a>00265         fhat.push_back(((*it)-&gt;getCounter()*1.0)/((*it)-&gt;nodeVolume())/(n*1.0));
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         rvector xuppVec = Sup((*it)-&gt;getBox());
<a name="l00268"></a>00268         <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00269"></a>00269         rvector xlowVec = Inf((*it)-&gt;getBox());
<a name="l00270"></a>00270         <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00271"></a>00271         <span class="keywordtype">double</span> CDF=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
<a name="l00272"></a>00272         Fstar.push_back(CDF);
<a name="l00273"></a>00273         <span class="comment">// calculate \mu_n - \mu</span>
<a name="l00274"></a>00274         diffMu += fabs((*it)-&gt;getCounter()*1.0/(n*1.0) - CDF);
<a name="l00275"></a>00275        } <span class="comment">// end of iterating through leaves</span>
<a name="l00276"></a>00276 
<a name="l00277"></a>00277       diffMuVec.push_back(diffMu);
<a name="l00278"></a>00278 <span class="comment">//---Error calculations---</span>
<a name="l00279"></a>00279 <span class="comment">//----Integrated Absolute Error (IAE)-----</span>
<a name="l00280"></a>00280 dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00281"></a>00281 dpIAE = 0.0;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
<a name="l00284"></a>00284 cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Nbin &lt;&lt; <span class="stringliteral">&quot; leaves in histogram &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l00285"></a>00285 nBoxVec.push_back(Nbin);
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l00289"></a>00289 <span class="keywordtype">double</span> result = 0.0;
<a name="l00290"></a>00290 <span class="keywordtype">double</span> error;
<a name="l00291"></a>00291 gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l00292"></a>00292 F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00293"></a>00293 F.params =  &amp;mixt;
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; k++){
<a name="l00296"></a>00296 <span class="comment">//  cout &lt;&lt; &quot;calculating error for bin &quot; &lt;&lt; j+1 &lt;&lt; endl;</span>
<a name="l00297"></a>00297   mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[k];
<a name="l00298"></a>00298   rvector xuppVec = Sup(boxes[k]);
<a name="l00299"></a>00299   <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00300"></a>00300   rvector xlowVec = Inf(boxes[k]);
<a name="l00301"></a>00301   <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00302"></a>00302   gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l00303"></a>00303   accumulate(dpIAE, result, 1.0);
<a name="l00304"></a>00304 }
<a name="l00305"></a>00305 <span class="comment">// Accounting for the boundaries</span>
<a name="l00306"></a>00306   cout &lt;&lt; <span class="stringliteral">&quot;Calculating IAE of the boundaries&quot;</span> &lt;&lt; endl;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   rvector xuppVec1 = Sup(boxes[Nbin-1]);
<a name="l00309"></a>00309   <span class="keywordtype">double</span> xupp1 = _double(xuppVec1[1]);
<a name="l00310"></a>00310   rvector xlowVec1 = Inf(boxes[0]);
<a name="l00311"></a>00311   <span class="keywordtype">double</span> xlow1 = _double(xlowVec1[1]);
<a name="l00312"></a>00312   dpIAEBoun = <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(xlow1, xupp1, Weight, Mean, Sigma);
<a name="l00313"></a>00313   dpIAE += <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00314"></a>00314   cout&lt;&lt;dpIAE&lt;&lt;endl;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   gsl_integration_workspace_free (w);
<a name="l00317"></a>00317   <span class="comment">// store IAE in vector</span>
<a name="l00318"></a>00318   dpIAEVec.push_back(dpIAE);
<a name="l00319"></a>00319  
<a name="l00320"></a>00320 <span class="comment">//------------Calculate lower and upper bounds---------------------</span>
<a name="l00321"></a>00321 <span class="keywordtype">double</span> totVol = 20;
<a name="l00322"></a>00322 cout &lt;&lt; <span class="stringliteral">&quot;total volume: &quot;</span> &lt;&lt; totVol &lt;&lt; endl;
<a name="l00323"></a>00323 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> a=1; a&lt;=90; a++){
<a name="l00324"></a>00324 <span class="keywordtype">double</span> alpha = a*0.01;
<a name="l00325"></a>00325 <span class="keywordtype">double</span> yesCovOne = 0;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i =0; i &lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; i++){
<a name="l00328"></a>00328   <span class="comment">// c</span>
<a name="l00329"></a>00329   <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*volumes[i])*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(totVol/volumes[i])/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00330"></a>00330  
<a name="l00331"></a>00331   <span class="comment">// lower bound</span>
<a name="l00332"></a>00332   <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat[i])-c, 0), 2);
<a name="l00333"></a>00333   <span class="comment">// upper bound</span>
<a name="l00334"></a>00334   <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat[i]) + c, 2);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="keywordflow">if</span> (Fstar[i]/volumes[i] &gt;= Lb &amp;&amp; Fstar[i]/volumes[i] &lt;= Ub)
<a name="l00337"></a>00337   { yesCovOne += 1;}
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 <span class="comment">//cout &lt;&lt; yesCovOne*1.0/Nbin*1.0 &lt;&lt; &quot; bins inside envelope&quot; &lt;&lt; endl;</span>
<a name="l00340"></a>00340 covAllVec.push_back(yesCovOne*1.0/(Nbin*1.0));
<a name="l00341"></a>00341 } <span class="comment">// end of loop for alpha</span>
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 ofstream oss;
<a name="l00344"></a>00344 oss &lt;&lt; scientific;
<a name="l00345"></a>00345 oss.precision(5);
<a name="l00346"></a>00346 <span class="keywordtype">string</span> CIFileName;
<a name="l00347"></a>00347 CIFileName = <span class="stringliteral">&quot;FinMixCI&quot;</span>;
<a name="l00348"></a>00348 CIFileName += stm2.str();
<a name="l00349"></a>00349 CIFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00350"></a>00350 oss.open(CIFileName.c_str());
<a name="l00351"></a>00351 <span class="keywordflow">for</span> (itCovAllVec = covAllVec.begin(); itCovAllVec &lt; covAllVec.end(); itCovAllVec++){
<a name="l00352"></a>00352 oss &lt;&lt; (*itCovAllVec) &lt;&lt; endl ;
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 oss &lt;&lt; flush;
<a name="l00355"></a>00355 oss.close();
<a name="l00356"></a>00356 cout &lt;&lt; <span class="stringliteral">&quot;CI&#39;s output to &quot;</span> &lt;&lt; CIFileName &lt;&lt; endl;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358    }<span class="comment">// end of succesfulInsertion</span>
<a name="l00359"></a>00359  } <span class="comment">// end of for loop for maxC</span>
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="comment">// output IAE to file</span>
<a name="l00362"></a>00362 <span class="keywordtype">string</span> IAEFileName;
<a name="l00363"></a>00363 ofstream oss;
<a name="l00364"></a>00364 oss &lt;&lt; scientific;
<a name="l00365"></a>00365 oss.precision(5);
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 IAEFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00368"></a>00368 IAEFileName += stm1.str();
<a name="l00369"></a>00369 IAEFileName += <span class="stringliteral">&quot;IAEData&quot;</span>;
<a name="l00370"></a>00370 IAEFileName += stm2.str();
<a name="l00371"></a>00371 IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00372"></a>00372 oss.open(IAEFileName.c_str());
<a name="l00373"></a>00373 <span class="keywordflow">for</span> (dpIAEVecIt = dpIAEVec.begin(); dpIAEVecIt &lt; dpIAEVec.end(); dpIAEVecIt++){
<a name="l00374"></a>00374 oss &lt;&lt; (*dpIAEVecIt) &lt;&lt; endl;
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 oss &lt;&lt; flush;
<a name="l00377"></a>00377 oss.close();
<a name="l00378"></a>00378 cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 <span class="keywordtype">string</span> timeFileName;
<a name="l00381"></a>00381 timeFileName = <span class="stringliteral">&quot;FinMixTimeData&quot;</span>;
<a name="l00382"></a>00382 timeFileName += stm2.str();
<a name="l00383"></a>00383 timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00384"></a>00384 oss.open(timeFileName.c_str());
<a name="l00385"></a>00385 <span class="keywordflow">for</span> (itTimeVec = timeVec.begin(); itTimeVec &lt; timeVec.end(); itTimeVec++){
<a name="l00386"></a>00386 oss &lt;&lt; (*itTimeVec) &lt;&lt; endl ;
<a name="l00387"></a>00387 }
<a name="l00388"></a>00388 oss &lt;&lt; flush;
<a name="l00389"></a>00389 oss.close();
<a name="l00390"></a>00390 cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl;
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 <span class="comment">//------output Epsilon------------------</span>
<a name="l00393"></a>00393 <span class="keywordtype">string</span> diffMuFileName;
<a name="l00394"></a>00394 diffMuFileName = <span class="stringliteral">&quot;FinMixDiffMu&quot;</span>;
<a name="l00395"></a>00395 diffMuFileName += stm2.str();
<a name="l00396"></a>00396 diffMuFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00397"></a>00397 oss.open(diffMuFileName.c_str());
<a name="l00398"></a>00398 <span class="keywordflow">for</span> (itDiffMuVec = diffMuVec.begin(); itDiffMuVec &lt; diffMuVec.end(); itDiffMuVec++){
<a name="l00399"></a>00399 oss &lt;&lt; (*itDiffMuVec) &lt;&lt; endl ;
<a name="l00400"></a>00400 }
<a name="l00401"></a>00401 oss &lt;&lt; flush;
<a name="l00402"></a>00402 oss.close();
<a name="l00403"></a>00403 cout &lt;&lt; <span class="stringliteral">&quot;Diff Mu output to &quot;</span> &lt;&lt; diffMuFileName &lt;&lt; endl;
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="keywordtype">string</span> BoxCountFileName;
<a name="l00407"></a>00407 BoxCountFileName = <span class="stringliteral">&quot;FinMixBoxCount&quot;</span>;
<a name="l00408"></a>00408 BoxCountFileName += stm2.str();
<a name="l00409"></a>00409 BoxCountFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00410"></a>00410 oss.open(BoxCountFileName.c_str());
<a name="l00411"></a>00411 <span class="keywordflow">for</span> (nBoxVecIt = nBoxVec.begin(); nBoxVecIt &lt; nBoxVec.end(); nBoxVecIt++){
<a name="l00412"></a>00412 oss &lt;&lt; (*nBoxVecIt) &lt;&lt; endl ;
<a name="l00413"></a>00413 }
<a name="l00414"></a>00414 oss &lt;&lt; flush;
<a name="l00415"></a>00415 oss.close();
<a name="l00416"></a>00416 cout &lt;&lt; <span class="stringliteral">&quot;Box Count output to &quot;</span> &lt;&lt; BoxCountFileName &lt;&lt; endl;
<a name="l00417"></a>00417  <span class="keywordflow">return</span> 0;
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 } <span class="comment">// end of FinMixPQLeaves program</span>
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 <span class="comment">//--- Function: Get PDF of x.</span>
<a name="l00422"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a9021606bd7e0ccdbdb204b596e265de0">00422</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span> x, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00423"></a>00423 {
<a name="l00424"></a>00424 <span class="keywordtype">int</span> Ncomp = W.size();
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 <span class="keywordtype">double</span> PDF = 0;
<a name="l00428"></a>00428 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
<a name="l00429"></a>00429 {
<a name="l00430"></a>00430 <span class="comment">//transfer to standard normal</span>
<a name="l00431"></a>00431 <span class="keywordtype">double</span>  z =  (x-M[c])/S[c];
<a name="l00432"></a>00432 <span class="keywordtype">double</span> term = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((z-M[c])/S[c], 2);
<a name="l00433"></a>00433 PDF += W[c]*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*term)/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI);
<a name="l00434"></a>00434 }  
<a name="l00435"></a>00435 <span class="keywordflow">return</span> PDF;
<a name="l00436"></a>00436 }
<a name="l00437"></a>00437 
<a name="l00438"></a>00438 <span class="comment">//---Function: get absolute error |fhat - f(x)| at x.</span>
<a name="l00439"></a>00439 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00440"></a>00440 {
<a name="l00441"></a>00441 <a class="code" href="structFinMix.shtml">FinMix</a> mixt = *(<a class="code" href="structFinMix.shtml">FinMix</a> *) params;
<a name="l00442"></a>00442 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a> = fabs(mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> - <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(x, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>));
<a name="l00443"></a>00443 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 <span class="comment">//---Function: Get CDF, i.e. P(X &lt;= x).</span>
<a name="l00447"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#ae8fb9bc2f15455a39056110b8d4032d4">00447</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00448"></a>00448 {
<a name="l00449"></a>00449 <span class="keywordtype">double</span> Ncomp = W.size();
<a name="l00450"></a>00450 <span class="keywordtype">double</span> CDF = 0;
<a name="l00451"></a>00451 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
<a name="l00452"></a>00452 {
<a name="l00453"></a>00453 normal component(M[c], S[c]);
<a name="l00454"></a>00454 CDF += W[c]*(cdf(component, x2) - cdf(component, x1));
<a name="l00455"></a>00455 <span class="comment">//cout &lt;&lt; &quot;CDF is: &quot; &lt;&lt; CDF &lt;&lt; endl;</span>
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 <span class="keywordflow">return</span> CDF;
<a name="l00458"></a>00458 }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 <span class="comment">//---Function: integrate exp(-(x/sigma))</span>
<a name="l00461"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">00461</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00462"></a>00462 {
<a name="l00463"></a>00463 <span class="keywordtype">double</span> sigma = *(<span class="keywordtype">double</span> *) params;
<a name="l00464"></a>00464 <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> =<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(x/sigma));
<a name="l00465"></a>00465 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>;
<a name="l00466"></a>00466 }
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 <span class="comment">//---Function: integrate exp(-0.5*((x-mu1)/sigma1 + (x-mu2)/sigma2))</span>
<a name="l00469"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">00469</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00470"></a>00470 {
<a name="l00471"></a>00471 vector&lt;double&gt; MS = *(vector&lt;double&gt; *) params;
<a name="l00472"></a>00472 <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*((x-MS[0])/MS[1] + (x-MS[2])/MS[3]));
<a name="l00473"></a>00473 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>; 
<a name="l00474"></a>00474 }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="comment">//---Function: calculate IAE at this bin.</span>
<a name="l00477"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">00477</a> <span class="keyword">inline</span> dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> fhat, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00478"></a>00478 {
<a name="l00479"></a>00479 dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
<a name="l00480"></a>00480 dpFinMixIAE = 0.0;
<a name="l00481"></a>00481 <span class="keywordtype">double</span> result = 0.0;
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="comment">//accumulate(dpFinMixIAE, result, 1.0);</span>
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
<a name="l00487"></a>00487 }
<a name="l00488"></a>00488             
<a name="l00489"></a>00489 <span class="comment">//---Function to calculate IAE at boundaries.</span>
<a name="l00490"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#ac799088b059b39fe7ba90b2baeaf0208">00490</a> <span class="keyword">inline</span> dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00491"></a>00491 {
<a name="l00492"></a>00492 dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00493"></a>00493 dpFinMixIAEBoun = 0.0;
<a name="l00494"></a>00494 <span class="keywordtype">double</span> Ncomp = W.size();
<a name="l00495"></a>00495 <span class="keywordtype">double</span> cdfLeft = 0.0;
<a name="l00496"></a>00496 <span class="keywordtype">double</span> cdfRight = 0.0;
<a name="l00497"></a>00497 <span class="keywordtype">int</span> c;
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 <span class="keywordflow">for</span> (c=0; c &lt; Ncomp; c++)
<a name="l00500"></a>00500 {
<a name="l00501"></a>00501 normal component(M[c], S[c]);
<a name="l00502"></a>00502 cdfLeft += W[c]*(cdf(component, x1));
<a name="l00503"></a>00503 cdfRight += 1-W[c]*(cdf(component, x2));
<a name="l00504"></a>00504 }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506 accumulate(dpFinMixIAEBoun, cdfLeft, 1.0);
<a name="l00507"></a>00507 accumulate(dpFinMixIAEBoun, cdfRight, 1.0);
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00510"></a>00510 }
<a name="l00511"></a>00511 <span class="comment">/*</span>
<a name="l00512"></a>00512 <span class="comment">//---Function: to get ISE at this bin----</span>
<a name="l00513"></a>00513 <span class="comment">inline dotprecision dpFinMixISE(double x1, double x2, double fhat1, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)</span>
<a name="l00514"></a>00514 <span class="comment">{</span>
<a name="l00515"></a>00515 <span class="comment">double nComp = W.size();</span>
<a name="l00516"></a>00516 <span class="comment">int i, j;</span>
<a name="l00517"></a>00517 <span class="comment">dotprecision dpFinMixISE;</span>
<a name="l00518"></a>00518 <span class="comment">dpFinMixISE = 0.0;</span>
<a name="l00519"></a>00519 <span class="comment">double FinMixW1, FinMixI1, FinMixW2, FinMixI2;</span>
<a name="l00520"></a>00520 <span class="comment">vector&lt;double&gt; MS;</span>
<a name="l00521"></a>00521 <span class="comment"></span>
<a name="l00522"></a>00522 <span class="comment">// calculate f^2.</span>
<a name="l00523"></a>00523 <span class="comment">gsl_integration_workspace * w = gsl_integration_workspace_alloc (1000);</span>
<a name="l00524"></a>00524 <span class="comment">double result, error;</span>
<a name="l00525"></a>00525 <span class="comment">gsl_function F1, F2;</span>
<a name="l00526"></a>00526 <span class="comment">F1.function = &amp;FinMixInt1;</span>
<a name="l00527"></a>00527 <span class="comment">F2.function = &amp;FinMixInt2;</span>
<a name="l00528"></a>00528 <span class="comment">F2.params = &amp;MS;</span>
<a name="l00529"></a>00529 <span class="comment"></span>
<a name="l00530"></a>00530 <span class="comment">for (i = 0; i &lt; nComp; i++)</span>
<a name="l00531"></a>00531 <span class="comment">{</span>
<a name="l00532"></a>00532 <span class="comment">FinMixW1 = W[i]*W[i]/S[i]/S[i]*exp(M[i]/S[i]);</span>
<a name="l00533"></a>00533 <span class="comment">F1.params = &amp;S[i];</span>
<a name="l00534"></a>00534 <span class="comment">gsl_integration_qag (&amp;F1, x1 ,x2, 0, 1e-7, 1000, 6, w, &amp;result, &amp;error);</span>
<a name="l00535"></a>00535 <span class="comment">accumulate(dpFinMixISE, result, FinMixW1*0.5/M_PI);</span>
<a name="l00536"></a>00536 <span class="comment"></span>
<a name="l00537"></a>00537 <span class="comment"> for (j = 0; j &lt; nComp; j++)</span>
<a name="l00538"></a>00538 <span class="comment"> { </span>
<a name="l00539"></a>00539 <span class="comment">   if ( i != j )</span>
<a name="l00540"></a>00540 <span class="comment">   {</span>
<a name="l00541"></a>00541 <span class="comment">   FinMixW2 = W[i]/S[i]*W[j]/S[j];</span>
<a name="l00542"></a>00542 <span class="comment">   MS.push_back(M[i]); MS.push_back(S[i]); MS.push_back(M[j]); MS.push_back(S[j]); </span>
<a name="l00543"></a>00543 <span class="comment">   gsl_integration_qag (&amp;F2, x1 ,x2, 0, 1e-7, 1000, 6, w, &amp;result, &amp;error);</span>
<a name="l00544"></a>00544 <span class="comment">   MS.pop_back(); MS.pop_back(); MS.pop_back(); MS.pop_back(); </span>
<a name="l00545"></a>00545 <span class="comment">   accumulate(dpFinMixISE, result, FinMixW2*0.5/M_PI);</span>
<a name="l00546"></a>00546 <span class="comment">   }</span>
<a name="l00547"></a>00547 <span class="comment">  }</span>
<a name="l00548"></a>00548 <span class="comment">}</span>
<a name="l00549"></a>00549 <span class="comment"></span>
<a name="l00550"></a>00550 <span class="comment">// to calculate fhat^2</span>
<a name="l00551"></a>00551 <span class="comment">double a=pow(fhat1, 2)*(x2-x1);</span>
<a name="l00552"></a>00552 <span class="comment">accumulate(dpFinMixISE, a, 1.0);</span>
<a name="l00553"></a>00553 <span class="comment"></span>
<a name="l00554"></a>00554 <span class="comment">// to calculate 2*fhat*f</span>
<a name="l00555"></a>00555 <span class="comment">double cdf = FinMixCDF(x1, x2, W, M, S);</span>
<a name="l00556"></a>00556 <span class="comment">accumulate(dpFinMixISE, cdf,-2*fhat1);</span>
<a name="l00557"></a>00557 <span class="comment"></span>
<a name="l00558"></a>00558 <span class="comment"></span>
<a name="l00559"></a>00559 <span class="comment">gsl_integration_workspace_free(w);</span>
<a name="l00560"></a>00560 <span class="comment"></span>
<a name="l00561"></a>00561 <span class="comment">//cout &lt;&lt; dpFinMixISE &lt;&lt; endl;</span>
<a name="l00562"></a>00562 <span class="comment"></span>
<a name="l00563"></a>00563 <span class="comment">return dpFinMixISE;</span>
<a name="l00564"></a>00564 <span class="comment">}</span>
<a name="l00565"></a>00565 <span class="comment"></span>
<a name="l00566"></a>00566 <span class="comment">//----Function: calculate ISE at left boundary</span>
<a name="l00567"></a>00567 <span class="comment">inline dotprecision dpISELeft(double x, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)</span>
<a name="l00568"></a>00568 <span class="comment">{</span>
<a name="l00569"></a>00569 <span class="comment">double nComp = W.size();</span>
<a name="l00570"></a>00570 <span class="comment">int i, j;</span>
<a name="l00571"></a>00571 <span class="comment">dotprecision dpISELeft;</span>
<a name="l00572"></a>00572 <span class="comment">dpISELeft = 0.0;</span>
<a name="l00573"></a>00573 <span class="comment">double FinMixW1, FinMixI1, FinMixW2, FinMixI2;</span>
<a name="l00574"></a>00574 <span class="comment">vector&lt;double&gt; MS;</span>
<a name="l00575"></a>00575 <span class="comment"></span>
<a name="l00576"></a>00576 <span class="comment">// calculate f^2.</span>
<a name="l00577"></a>00577 <span class="comment">gsl_integration_workspace * w = gsl_integration_workspace_alloc (1000);</span>
<a name="l00578"></a>00578 <span class="comment">double result, error;</span>
<a name="l00579"></a>00579 <span class="comment">gsl_function F1, F2;</span>
<a name="l00580"></a>00580 <span class="comment">F1.function = &amp;FinMixInt1;</span>
<a name="l00581"></a>00581 <span class="comment">F2.function = &amp;FinMixInt2;</span>
<a name="l00582"></a>00582 <span class="comment">F2.params = &amp;MS;</span>
<a name="l00583"></a>00583 <span class="comment"></span>
<a name="l00584"></a>00584 <span class="comment"></span>
<a name="l00585"></a>00585 <span class="comment">for (i = 0; i &lt; nComp; i++)</span>
<a name="l00586"></a>00586 <span class="comment">{</span>
<a name="l00587"></a>00587 <span class="comment">FinMixW1 = W[i]*W[i]/S[i]/S[i]*exp(M[i]/S[i]);</span>
<a name="l00588"></a>00588 <span class="comment">F1.params = &amp;S[i];</span>
<a name="l00589"></a>00589 <span class="comment">gsl_integration_qagil (&amp;F1, x, 0, 1e-7, 1000, w, &amp;result, &amp;error);</span>
<a name="l00590"></a>00590 <span class="comment">accumulate(dpISELeft, result, FinMixW1*0.5/M_PI);</span>
<a name="l00591"></a>00591 <span class="comment"></span>
<a name="l00592"></a>00592 <span class="comment"> for (j = 0; j &lt; nComp; j++)</span>
<a name="l00593"></a>00593 <span class="comment"> {</span>
<a name="l00594"></a>00594 <span class="comment">   if ( i != j )</span>
<a name="l00595"></a>00595 <span class="comment">   {</span>
<a name="l00596"></a>00596 <span class="comment">   FinMixW2 = W[i]/S[i]*W[j]/S[j];</span>
<a name="l00597"></a>00597 <span class="comment">   MS.push_back(M[i]); MS.push_back(S[i]); MS.push_back(M[j]); MS.push_back(S[j]);</span>
<a name="l00598"></a>00598 <span class="comment">   gsl_integration_qagil (&amp;F2, x, 0, 1e-7, 1000, w, &amp;result, &amp;error);</span>
<a name="l00599"></a>00599 <span class="comment">   MS.pop_back(); MS.pop_back(); MS.pop_back(); MS.pop_back();</span>
<a name="l00600"></a>00600 <span class="comment">   accumulate(dpISELeft, result, FinMixW2*0.5/M_PI);</span>
<a name="l00601"></a>00601 <span class="comment">   }</span>
<a name="l00602"></a>00602 <span class="comment">  }</span>
<a name="l00603"></a>00603 <span class="comment">}</span>
<a name="l00604"></a>00604 <span class="comment"></span>
<a name="l00605"></a>00605 <span class="comment">gsl_integration_workspace_free(w);</span>
<a name="l00606"></a>00606 <span class="comment">return dpISELeft;</span>
<a name="l00607"></a>00607 <span class="comment">}</span>
<a name="l00608"></a>00608 <span class="comment"></span>
<a name="l00609"></a>00609 <span class="comment"></span>
<a name="l00610"></a>00610 <span class="comment">//----Function: calculate ISE at right boundary</span>
<a name="l00611"></a>00611 <span class="comment">inline dotprecision dpISERight(double x, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)</span>
<a name="l00612"></a>00612 <span class="comment">{</span>
<a name="l00613"></a>00613 <span class="comment">double nComp = W.size();</span>
<a name="l00614"></a>00614 <span class="comment">int i, j; </span>
<a name="l00615"></a>00615 <span class="comment">dotprecision dpISERight;</span>
<a name="l00616"></a>00616 <span class="comment">dpISERight = 0.0;</span>
<a name="l00617"></a>00617 <span class="comment">double FinMixW1, FinMixI1, FinMixW2, FinMixI2;</span>
<a name="l00618"></a>00618 <span class="comment">vector&lt;double&gt; MS;       </span>
<a name="l00619"></a>00619 <span class="comment"></span>
<a name="l00620"></a>00620 <span class="comment">// calculate f^2.</span>
<a name="l00621"></a>00621 <span class="comment">gsl_integration_workspace * w = gsl_integration_workspace_alloc (1000);</span>
<a name="l00622"></a>00622 <span class="comment">double result, error;</span>
<a name="l00623"></a>00623 <span class="comment">gsl_function F1, F2;</span>
<a name="l00624"></a>00624 <span class="comment">F1.function = &amp;FinMixInt1;</span>
<a name="l00625"></a>00625 <span class="comment">F2.function = &amp;FinMixInt2;</span>
<a name="l00626"></a>00626 <span class="comment">F2.params = &amp;MS;</span>
<a name="l00627"></a>00627 <span class="comment"></span>
<a name="l00628"></a>00628 <span class="comment">for (i = 0; i &lt; nComp; i++)</span>
<a name="l00629"></a>00629 <span class="comment">{</span>
<a name="l00630"></a>00630 <span class="comment">FinMixW1 = W[i]*W[i]/S[i]/S[i]*exp(M[i]/S[i]);</span>
<a name="l00631"></a>00631 <span class="comment">F1.params = &amp;S[i];</span>
<a name="l00632"></a>00632 <span class="comment">gsl_integration_qagiu(&amp;F1, x, 0, 1e-7, 1000, w, &amp;result, &amp;error);</span>
<a name="l00633"></a>00633 <span class="comment">accumulate(dpISERight, result, FinMixW1*0.5/M_PI);</span>
<a name="l00634"></a>00634 <span class="comment"></span>
<a name="l00635"></a>00635 <span class="comment"> for (j = 0; j &lt; nComp; j++)</span>
<a name="l00636"></a>00636 <span class="comment"> {</span>
<a name="l00637"></a>00637 <span class="comment">   if ( i != j )</span>
<a name="l00638"></a>00638 <span class="comment">   {</span>
<a name="l00639"></a>00639 <span class="comment">   FinMixW2 = W[i]/S[i]*W[j]/S[j];</span>
<a name="l00640"></a>00640 <span class="comment">   MS.push_back(M[i]); MS.push_back(S[i]); MS.push_back(M[j]); MS.push_back(S[j]);</span>
<a name="l00641"></a>00641 <span class="comment">   gsl_integration_qagiu (&amp;F2, x, 0, 1e-7, 1000, w, &amp;result, &amp;error);</span>
<a name="l00642"></a>00642 <span class="comment">   MS.pop_back(); MS.pop_back(); MS.pop_back(); MS.pop_back();</span>
<a name="l00643"></a>00643 <span class="comment">   accumulate(dpISERight, result, FinMixW2*0.5/M_PI);</span>
<a name="l00644"></a>00644 <span class="comment">   }</span>
<a name="l00645"></a>00645 <span class="comment">  }</span>
<a name="l00646"></a>00646 <span class="comment">}</span>
<a name="l00647"></a>00647 <span class="comment"></span>
<a name="l00648"></a>00648 <span class="comment">gsl_integration_workspace_free(w);</span>
<a name="l00649"></a>00649 <span class="comment">return dpISERight;</span>
<a name="l00650"></a>00650 <span class="comment">}</span>
<a name="l00651"></a>00651 <span class="comment">*/</span>
<a name="l00652"></a>00652 
<a name="l00653"></a>00653 
<a name="l00654"></a>00654 
<a name="l00655"></a>00655 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="CoverageNormal_8cpp.shtml">CoverageNormal.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
