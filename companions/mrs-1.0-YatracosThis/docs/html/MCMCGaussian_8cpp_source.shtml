<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGaussian.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGaussian_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCGaussian.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCGaussian_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>  
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="MCMC__Trunk_2dataprep_8hpp.shtml">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>cxsc;
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>std;
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>subpavings;
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="MCMCGaussian_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00044</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   <span class="comment">// sort out user-defined parameters------------------//</span>
<a name="l00047"></a>00047   <span class="keywordflow">if</span> ( argc &lt; 14) {
<a name="l00048"></a>00048     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; d n loops seed burnin thinout hist1crit hist2crit hist3crit hist1critleaf hist2critleaf hist3critleaf numstateschosen log_full&quot;</span> &lt;&lt; endl;
<a name="l00049"></a>00049     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Syntax: &quot;</span> + std::string(argv[0]) + <span class="stringliteral">&quot; d n loops seed burnin thinout hist1crit hist2crit hist3crit hist1critleaf hist2critleaf hist3critleaf numstateschosen [log_full]&quot;</span>);
<a name="l00050"></a>00050   }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052   <span class="keywordtype">int</span> d = atoi(argv[1]);  <span class="comment">// dimensions</span>
<a name="l00053"></a>00053   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[2]);  <span class="comment">// number of points to generate</span>
<a name="l00054"></a>00054   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = atoi(argv[3]); <span class="comment">// number of states to loop through</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056   <span class="keywordtype">int</span> dataSeed = atoi(argv[4]); <span class="comment">// seed for data generation</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = atoi(argv[5]); 
<a name="l00059"></a>00059   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = atoi(argv[6]);
<a name="l00060"></a>00060 
<a name="l00061"></a>00061   <span class="comment">//this is really a bad naming scheme: this is for CritLeaves_GTE</span>
<a name="l00062"></a>00062   <span class="keywordtype">size_t</span> hist1Crit = atoi(argv[7]);
<a name="l00063"></a>00063   <span class="keywordtype">size_t</span> hist2Crit = atoi(argv[8]);
<a name="l00064"></a>00064   <span class="keywordtype">size_t</span> hist3Crit = atoi(argv[9]); 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="comment">//this is for CritLargestCounts_GTE</span>
<a name="l00067"></a>00067   <span class="keywordtype">size_t</span> hist1CritLeaf = atoi(argv[10]);
<a name="l00068"></a>00068   <span class="keywordtype">size_t</span> hist2CritLeaf = atoi(argv[11]);
<a name="l00069"></a>00069   <span class="keywordtype">size_t</span> hist3CritLeaf = atoi(argv[12]); <span class="comment">//this is actually not needed</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="keywordtype">size_t</span> minPQPoints1 = 1;
<a name="l00072"></a>00072   <span class="keywordtype">size_t</span> minPQPoints2 = 1;
<a name="l00073"></a>00073   <span class="keywordtype">size_t</span> minPQPoints3 = 1;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="keywordtype">bool</span> shiftCatalan = 0;
<a name="l00076"></a>00076   
<a name="l00077"></a>00077   <span class="keywordtype">size_t</span> NumStatesChosen = atoi(argv[13]);
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = LOGSTATETRACE;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   cout &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; : process id is &quot;</span> &lt;&lt; getpid() &lt;&lt; std::endl;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="comment">// set up a random number generator and use mt19937 for generator</span>
<a name="l00086"></a>00086   gsl_rng * r = gsl_rng_alloc (gsl_rng_mt19937); <span class="comment">// set up with default seed</span>
<a name="l00087"></a>00087   <span class="comment">//long unsigned int seed = 1234;</span>
<a name="l00088"></a>00088   gsl_rng_set (r, dataSeed); <span class="comment">// change the seed</span>
<a name="l00089"></a>00089   cout &lt;&lt; <span class="stringliteral">&quot;Data seed is &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00090"></a>00090     
<a name="l00091"></a>00091   <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00092"></a>00092   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00093"></a>00093   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00094"></a>00094   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00095"></a>00095   oss.precision(5);
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container for all the points generated</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   <span class="comment">//gat41</span>
<a name="l00100"></a>00100   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00101"></a>00101     rvector thisrv(d);
<a name="l00102"></a>00102     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00103"></a>00103       <span class="comment">//double z = gsl_rng_uniform(r);</span>
<a name="l00104"></a>00104       <span class="keywordtype">double</span> z = gsl_ran_gaussian(r, 1.0); <span class="comment">// generate a normal r.v.</span>
<a name="l00105"></a>00105       
<a name="l00106"></a>00106       thisrv[j] = (z);
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108     <span class="comment">// put points generated into container</span>
<a name="l00109"></a>00109     theDataPtr-&gt;push_back(thisrv);
<a name="l00110"></a>00110   }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="comment">// free the random number generator</span>
<a name="l00113"></a>00113   <span class="keywordflow">try</span> {
<a name="l00114"></a>00114     gsl_rng_free (r);
<a name="l00115"></a>00115     r = NULL;
<a name="l00116"></a>00116   }
<a name="l00117"></a>00117   <span class="keywordflow">catch</span>(...) {}<span class="comment">// catch and swallow</span>
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">/* these parameters are set up here just to get an idea of what</span>
<a name="l00120"></a>00120 <span class="comment">   * is happening in each state - I don&#39;t care about the actual </span>
<a name="l00121"></a>00121 <span class="comment">   * sampling. variable loops came from user-supplied parameters.*/</span>
<a name="l00122"></a>00122   <span class="comment">//unsigned int burnin = 10; // don&#39;t care about this</span>
<a name="l00123"></a>00123   <span class="comment">//unsigned int thinout = loops/10; // don&#39;t care here either.</span>
<a name="l00124"></a>00124   <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">// set up proposal distribution object</span>
<a name="l00127"></a>00127   <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00128"></a>00128   <span class="comment">// set up prior distribution object</span>
<a name="l00129"></a>00129   <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00130"></a>00130   cout &lt;&lt; <span class="stringliteral">&quot;=============================================&quot;</span>;
<a name="l00131"></a>00131   cout &lt;&lt; <span class="stringliteral">&quot;\nStart example: n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; and d = &quot;</span> &lt;&lt; d &lt;&lt; endl;
<a name="l00132"></a>00132   
<a name="l00133"></a>00133 <span class="comment">//==============MCMC with different starting states========================//</span>
<a name="l00134"></a>00134   <span class="keywordtype">int</span> numFunc = 1;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="comment">// parameters needed to start the PQ</span>
<a name="l00137"></a>00137   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logPQ = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging level  </span>
<a name="l00138"></a>00138   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> comp2; 
<a name="l00139"></a>00139   CompVolMassMinus comp1;
<a name="l00140"></a>00140   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00141"></a>00141   vector&lt;real&gt; IAEContainer; <span class="comment">//for MCMC </span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> func = 0; func &lt; numFunc; func++) {
<a name="l00144"></a>00144     cout &lt;&lt; <span class="stringliteral">&quot;\n========Function : &quot;</span> &lt;&lt; func &lt;&lt; <span class="stringliteral">&quot;========&quot;</span> &lt;&lt; endl; 
<a name="l00145"></a>00145     ostringstream stm;
<a name="l00146"></a>00146     stm &lt;&lt; func; <span class="comment">// for output purposes</span>
<a name="l00147"></a>00147     vector&lt;size_t&gt; LeafContainer; <span class="comment">// to store the number of leaf nodes from which the optimal posterior support is at</span>
<a name="l00148"></a>00148     
<a name="l00149"></a>00149     <span class="comment">/*</span>
<a name="l00150"></a>00150 <span class="comment">    // make the paving box</span>
<a name="l00151"></a>00151 <span class="comment">    ivector pavingBox(d);</span>
<a name="l00152"></a>00152 <span class="comment">    for(int k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;</span>
<a name="l00153"></a>00153 <span class="comment">    */</span>
<a name="l00154"></a>00154     
<a name="l00155"></a>00155     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00156"></a>00156     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00157"></a>00157     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00158"></a>00158     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst; <span class="comment">// still let the data decide the box</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00161"></a>00161     <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00164"></a>00164 
<a name="l00165"></a>00165       vector&lt;real&gt; ChosenStateMaxPosterior;
<a name="l00166"></a>00166       vector&lt;AdaptiveHistogram&gt; ChosenStateSubset;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168       <span class="comment">/*</span>
<a name="l00169"></a>00169 <span class="comment">      //----------------------------------------------------------//</span>
<a name="l00170"></a>00170 <span class="comment">      //Option 1: make a histogram using the estimate</span>
<a name="l00171"></a>00171 <span class="comment">      //--- make the histogram have the same shape as the estimate------//</span>
<a name="l00172"></a>00172 <span class="comment">      // except if minPoints will not allow this</span>
<a name="l00173"></a>00173 <span class="comment">      myHistFirst.reshapeToUnion(estimate, minPoints);</span>
<a name="l00174"></a>00174 <span class="comment">      cout &lt;&lt; &quot;After reshaping to shape of function, histogram has &quot; &lt;&lt; myHistFirst.getRootLeaves() &lt;&lt; &quot; leaves&quot; &lt;&lt; endl;</span>
<a name="l00175"></a>00175 <span class="comment">      //get the number of leaf nodes in this state</span>
<a name="l00176"></a>00176 <span class="comment">      histLeaf1 = myHistFirst.getRootLeaves();</span>
<a name="l00177"></a>00177 <span class="comment">      //----------------------------------------------------------//</span>
<a name="l00178"></a>00178 <span class="comment">      */</span>
<a name="l00179"></a>00179 
<a name="l00180"></a>00180       <span class="comment">//----------------------------------------------------------//</span>
<a name="l00181"></a>00181       <span class="comment">//Option 2: get the optimal estimate by computing the posterior from SEB-PQ</span>
<a name="l00182"></a>00182       <span class="keywordtype">size_t</span> histCrit;
<a name="l00183"></a>00183       <span class="keywordflow">if</span> (func == 0) { histCrit = hist1Crit; }
<a name="l00184"></a>00184       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func==1) { histCrit = hist2Crit; }
<a name="l00185"></a>00185       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critStop(histCrit);
<a name="l00186"></a>00186       cout &lt;&lt; <span class="stringliteral">&quot;PQ to &quot;</span>  &lt;&lt; histCrit &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188       <span class="comment">//containers to store needed outputs</span>
<a name="l00189"></a>00189       vector&lt;real&gt; Posterior;
<a name="l00190"></a>00190       vector&lt;real&gt; PosteriorSupport;
<a name="l00191"></a>00191       vector&lt;double&gt; EmptyBox;
<a name="l00192"></a>00192       <span class="keywordtype">int</span> Txt = func;
<a name="l00193"></a>00193       vector&lt;real&gt; IAEPQContainer;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195       <span class="keywordtype">bool</span> successfulHist = <span class="keyword">false</span>;
<a name="l00196"></a>00196       <span class="comment">// start the first stage of PQ here</span>
<a name="l00197"></a>00197       <span class="keywordflow">if</span> (func == 0) {
<a name="l00198"></a>00198         successfulHist = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(comp1, critStop, 
<a name="l00199"></a>00199         logPQ, minPQPoints1, Posterior, logPrior, EmptyBox, 
<a name="l00200"></a>00200         PosteriorSupport, IAEPQContainer, shiftCatalan);
<a name="l00201"></a>00201       }
<a name="l00202"></a>00202       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00203"></a>00203         successfulHist = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(comp2, critStop, 
<a name="l00204"></a>00204         logPQ, minPQPoints2, Posterior, logPrior, EmptyBox,
<a name="l00205"></a>00205         PosteriorSupport, IAEPQContainer,  shiftCatalan);
<a name="l00206"></a>00206       }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208       <span class="keywordflow">if</span> (successfulHist) {
<a name="l00209"></a>00209         <span class="comment">// output log-posterior</span>
<a name="l00210"></a>00210         <span class="keywordtype">string</span> PostFileName;
<a name="l00211"></a>00211         PostFileName = <span class="stringliteral">&quot;Posterior&quot;</span>;
<a name="l00212"></a>00212         PostFileName += stm.str();
<a name="l00213"></a>00213         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00214"></a>00214         oss.open(PostFileName.c_str());
<a name="l00215"></a>00215         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; Posterior.size(); i++) {
<a name="l00216"></a>00216           oss &lt;&lt; Posterior[i] &lt;&lt; endl;
<a name="l00217"></a>00217         }
<a name="l00218"></a>00218         oss &lt;&lt; flush;
<a name="l00219"></a>00219         oss.close();
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="comment">// output support log-posterior </span>
<a name="l00222"></a>00222         PostFileName = <span class="stringliteral">&quot;PosteriorSupport&quot;</span>;
<a name="l00223"></a>00223         PostFileName += stm.str();
<a name="l00224"></a>00224         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00225"></a>00225         oss.open(PostFileName.c_str());
<a name="l00226"></a>00226         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupport.size(); i++) {
<a name="l00227"></a>00227           oss &lt;&lt; PosteriorSupport[i] &lt;&lt; endl;
<a name="l00228"></a>00228         }
<a name="l00229"></a>00229         oss &lt;&lt; flush;
<a name="l00230"></a>00230         oss.close();
<a name="l00231"></a>00231         
<a name="l00232"></a>00232         <span class="comment">// output the cumulative ratio of empty boxes</span>
<a name="l00233"></a>00233         <span class="keywordtype">string</span> EmptyFileName;
<a name="l00234"></a>00234         EmptyFileName = <span class="stringliteral">&quot;Empty&quot;</span>;
<a name="l00235"></a>00235         EmptyFileName += stm.str();
<a name="l00236"></a>00236         EmptyFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00237"></a>00237         oss.open(EmptyFileName.c_str());
<a name="l00238"></a>00238         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; EmptyBox.size(); i++) {
<a name="l00239"></a>00239           oss &lt;&lt; EmptyBox[i] &lt;&lt; endl;
<a name="l00240"></a>00240         }
<a name="l00241"></a>00241         oss &lt;&lt; flush;
<a name="l00242"></a>00242         oss.close();
<a name="l00243"></a>00243         
<a name="l00244"></a>00244         <span class="comment">// get K number of states with a local highest posterior</span>
<a name="l00245"></a>00245         cout &lt;&lt; <span class="stringliteral">&quot;Choosing &quot;</span> &lt;&lt; NumStatesChosen &lt;&lt; <span class="stringliteral">&quot; states&quot;</span> &lt;&lt; endl;
<a name="l00246"></a>00246         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; NumStatesChosen; j++) {
<a name="l00247"></a>00247           ostringstream stmj;
<a name="l00248"></a>00248           stmj &lt;&lt; j;
<a name="l00249"></a>00249           <span class="keywordtype">int</span> step = int(1.0*PosteriorSupport.size()/(1.0*NumStatesChosen));
<a name="l00250"></a>00250           <span class="comment">//find where the posterior/log-posterior/emptyVol is the highest</span>
<a name="l00251"></a>00251           <span class="keywordtype">size_t</span> maxPosition = 0;
<a name="l00252"></a>00252           real maxPosterior = -1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00253"></a>00253           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; step; i++) {
<a name="l00254"></a>00254             <span class="keywordtype">size_t</span> thisPosition = j*step + i;
<a name="l00255"></a>00255             <span class="keywordflow">if</span> (PosteriorSupport[thisPosition] &gt; maxPosterior) {
<a name="l00256"></a>00256               maxPosterior = PosteriorSupport[thisPosition];
<a name="l00257"></a>00257               maxPosition = thisPosition;
<a name="l00258"></a>00258             }
<a name="l00259"></a>00259           }
<a name="l00260"></a>00260           cout &lt;&lt; <span class="stringliteral">&quot;----------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00261"></a>00261           cout &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;-th subset: &quot;</span>&lt;&lt; endl;
<a name="l00262"></a>00262           cout &lt;&lt; <span class="stringliteral">&quot;log posterior highest at split &quot;</span> &lt;&lt; maxPosition;
<a name="l00263"></a>00263           <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMax(maxPosition+1);
<a name="l00264"></a>00264           LeafContainer.push_back(maxPosition+1);
<a name="l00265"></a>00265 
<a name="l00266"></a>00266           <span class="comment">// now get the posterior-optimal histogram</span>
<a name="l00267"></a>00267           <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHist;
<a name="l00268"></a>00268           myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00269"></a>00269           
<a name="l00270"></a>00270           <span class="comment">// get the corresponding histogram</span>
<a name="l00271"></a>00271           <span class="keywordflow">if</span> (func == 0) {
<a name="l00272"></a>00272             myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(comp1, critValMax, logPQ, minPQPoints1);
<a name="l00273"></a>00273           }
<a name="l00274"></a>00274           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00275"></a>00275             myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(comp2, critValMax, logPQ, minPQPoints2);
<a name="l00276"></a>00276           }
<a name="l00277"></a>00277           <span class="keywordtype">size_t</span> chosenHistLeaves = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>();
<a name="l00278"></a>00278           cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00279"></a>00279           
<a name="l00280"></a>00280           <span class="comment">//optional hist output</span>
<a name="l00281"></a>00281           myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;SelectedCarvedHistogram.txt&quot;</span>);
<a name="l00282"></a>00282           
<a name="l00283"></a>00283           <span class="comment">// start SEB from chosen histogram</span>
<a name="l00284"></a>00284           <span class="comment">// initialize containers</span>
<a name="l00285"></a>00285           vector&lt;real&gt; PosteriorChosen;
<a name="l00286"></a>00286           vector&lt;double&gt; EmptyBoxChosen;
<a name="l00287"></a>00287           vector&lt;real&gt; PosteriorSupportChosen;
<a name="l00288"></a>00288           vector&lt;real&gt; IAEContainerChosen;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290           <span class="keywordflow">if</span> (func == 0) { histCrit = hist1CritLeaf; }
<a name="l00291"></a>00291           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func==1) { histCrit = hist2CritLeaf; }
<a name="l00292"></a>00292           <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critLeaf(histCrit);
<a name="l00293"></a>00293           cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ to at most &quot;</span>  &lt;&lt; (histCrit) &lt;&lt; <span class="stringliteral">&quot; points in each node&quot;</span> &lt;&lt; endl;
<a name="l00294"></a>00294           Txt = 900 + func*10 + j;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296           <span class="keywordflow">if</span> (func == 0) {
<a name="l00297"></a>00297             successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critLeaf, 
<a name="l00298"></a>00298             logPQ, minPQPoints1, PosteriorChosen, logPrior,  EmptyBoxChosen, 
<a name="l00299"></a>00299             PosteriorSupportChosen, IAEContainerChosen, shiftCatalan);
<a name="l00300"></a>00300           }
<a name="l00301"></a>00301           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00302"></a>00302             successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critLeaf, 
<a name="l00303"></a>00303             logPQ, minPQPoints2, PosteriorChosen, logPrior, EmptyBoxChosen, 
<a name="l00304"></a>00304             PosteriorSupportChosen, IAEContainerChosen,  shiftCatalan);
<a name="l00305"></a>00305           }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307           <span class="comment">// optional</span>
<a name="l00308"></a>00308           <span class="comment">// output log-posterior</span>
<a name="l00309"></a>00309           PostFileName = <span class="stringliteral">&quot;PosteriorChosen&quot;</span>;
<a name="l00310"></a>00310           PostFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00311"></a>00311           PostFileName += stmj.str(); <span class="comment">//for j</span>
<a name="l00312"></a>00312           PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00313"></a>00313           oss.open(PostFileName.c_str());
<a name="l00314"></a>00314           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00315"></a>00315             oss &lt;&lt; PosteriorChosen[i] &lt;&lt; endl;
<a name="l00316"></a>00316           }
<a name="l00317"></a>00317           oss &lt;&lt; flush;
<a name="l00318"></a>00318           oss.close();
<a name="l00319"></a>00319 
<a name="l00320"></a>00320           <span class="comment">// output support log-posterior </span>
<a name="l00321"></a>00321           PostFileName = <span class="stringliteral">&quot;PosteriorSupportChosen&quot;</span>;
<a name="l00322"></a>00322           PostFileName += stm.str();
<a name="l00323"></a>00323           PostFileName += stmj.str();
<a name="l00324"></a>00324           PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00325"></a>00325           oss.open(PostFileName.c_str());
<a name="l00326"></a>00326           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupportChosen.size(); i++) {
<a name="l00327"></a>00327             oss &lt;&lt; PosteriorSupportChosen[i] &lt;&lt; endl;
<a name="l00328"></a>00328           }
<a name="l00329"></a>00329           oss &lt;&lt; flush;
<a name="l00330"></a>00330           oss.close();
<a name="l00331"></a>00331   
<a name="l00332"></a>00332           <span class="comment">// output the cumulative ratio of empty boxes</span>
<a name="l00333"></a>00333           EmptyFileName = <span class="stringliteral">&quot;EmptyChosen&quot;</span>;
<a name="l00334"></a>00334           EmptyFileName += stm.str();
<a name="l00335"></a>00335           EmptyFileName += stmj.str();
<a name="l00336"></a>00336           EmptyFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00337"></a>00337           oss.open(EmptyFileName.c_str());
<a name="l00338"></a>00338           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; EmptyBoxChosen.size(); i++) {
<a name="l00339"></a>00339             oss &lt;&lt; EmptyBoxChosen[i] &lt;&lt; endl;
<a name="l00340"></a>00340           }
<a name="l00341"></a>00341           oss &lt;&lt; flush;
<a name="l00342"></a>00342           oss.close();
<a name="l00343"></a>00343 
<a name="l00344"></a>00344           <span class="comment">// get the max position for this sub-set</span>
<a name="l00345"></a>00345           maxPosition = 0;
<a name="l00346"></a>00346           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00347"></a>00347             <span class="keywordflow">if</span> (PosteriorChosen[i] &gt; maxPosterior) {
<a name="l00348"></a>00348               maxPosterior = PosteriorChosen[i];
<a name="l00349"></a>00349               maxPosition = i;
<a name="l00350"></a>00350             }
<a name="l00351"></a>00351           }
<a name="l00352"></a>00352           cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ using carved support has log-posterior highest at index &quot;</span> &lt;&lt; maxPosition &lt;&lt; endl;;
<a name="l00353"></a>00353           ChosenStateMaxPosterior.push_back(PosteriorChosen[maxPosition]);
<a name="l00354"></a>00354           
<a name="l00355"></a>00355           <span class="comment">// now get the posterior-optimal histogram for this subset using PQ-SEB</span>
<a name="l00356"></a>00356           <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHistSubset;
<a name="l00357"></a>00357           myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00358"></a>00358           <span class="comment">// be careful here</span>
<a name="l00359"></a>00359           <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMaxSubset(chosenHistLeaves + maxPosition);
<a name="l00360"></a>00360           
<a name="l00361"></a>00361           <span class="keywordflow">if</span> (func == 0) {
<a name="l00362"></a>00362             myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00363"></a>00363             logPQ, minPQPoints1);
<a name="l00364"></a>00364           }
<a name="l00365"></a>00365           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00366"></a>00366             myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00367"></a>00367             logPQ, minPQPoints2);
<a name="l00368"></a>00368           }
<a name="l00369"></a>00369           cout &lt;&lt; <span class="stringliteral">&quot; Chosen state has &quot;</span> &lt;&lt; myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00370"></a>00370           <span class="comment">//keep this histogram in a container</span>
<a name="l00371"></a>00371           ChosenStateSubset.push_back(myChosenHistSubset);
<a name="l00372"></a>00372         } <span class="comment">// end of going through NumStatesChosen</span>
<a name="l00373"></a>00373         cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00374"></a>00374 
<a name="l00375"></a>00375         <span class="comment">// start the SEB-PQ from the root node as a sanity check</span>
<a name="l00376"></a>00376         cout &lt;&lt; <span class="stringliteral">&quot;Starting the SEB-PQ from the root node:&quot;</span> &lt;&lt; endl;
<a name="l00377"></a>00377         <span class="comment">// initialize containers</span>
<a name="l00378"></a>00378         vector&lt;real&gt; PosteriorChosen;
<a name="l00379"></a>00379         vector&lt;double&gt; EmptyBoxChosen;
<a name="l00380"></a>00380         vector&lt;real&gt; PosteriorSupportChosen;
<a name="l00381"></a>00381         vector&lt;real&gt; IAEContainerChosen;
<a name="l00382"></a>00382 
<a name="l00383"></a>00383         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHist;
<a name="l00384"></a>00384         myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00385"></a>00385 
<a name="l00386"></a>00386         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critStop(hist3Crit);
<a name="l00387"></a>00387         cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ to &quot;</span>  &lt;&lt; (hist3Crit) &lt;&lt; <span class="stringliteral">&quot; leaf nodes&quot;</span> &lt;&lt; endl;
<a name="l00388"></a>00388         Txt = 9000 + func*100 + NumStatesChosen;
<a name="l00389"></a>00389         <span class="keywordflow">if</span> (func == 0) {
<a name="l00390"></a>00390           successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00391"></a>00391           logPQ, minPQPoints1, PosteriorChosen, logPrior, EmptyBoxChosen, 
<a name="l00392"></a>00392           PosteriorSupportChosen, IAEContainerChosen, shiftCatalan);
<a name="l00393"></a>00393         }
<a name="l00394"></a>00394         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00395"></a>00395           successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00396"></a>00396           logPQ, minPQPoints2, PosteriorChosen, logPrior, EmptyBoxChosen, 
<a name="l00397"></a>00397           PosteriorSupportChosen, IAEContainerChosen, shiftCatalan);
<a name="l00398"></a>00398         }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400         <span class="comment">// optional</span>
<a name="l00401"></a>00401         <span class="comment">// output log-posterior</span>
<a name="l00402"></a>00402         PostFileName = <span class="stringliteral">&quot;PosteriorChosen&quot;</span>;
<a name="l00403"></a>00403         PostFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00404"></a>00404         ostringstream stm1;
<a name="l00405"></a>00405         stm1 &lt;&lt; NumStatesChosen;
<a name="l00406"></a>00406         PostFileName += stm1.str(); 
<a name="l00407"></a>00407         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00408"></a>00408         oss.open(PostFileName.c_str());
<a name="l00409"></a>00409         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00410"></a>00410             oss &lt;&lt; PosteriorChosen[i] &lt;&lt; endl;
<a name="l00411"></a>00411           }
<a name="l00412"></a>00412           oss &lt;&lt; flush;
<a name="l00413"></a>00413           oss.close();
<a name="l00414"></a>00414 
<a name="l00415"></a>00415         <span class="comment">// output support log-posterior </span>
<a name="l00416"></a>00416         PostFileName = <span class="stringliteral">&quot;PosteriorSupportChosen&quot;</span>;
<a name="l00417"></a>00417         PostFileName += stm.str();
<a name="l00418"></a>00418         PostFileName += stm1.str();
<a name="l00419"></a>00419         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00420"></a>00420         oss.open(PostFileName.c_str());
<a name="l00421"></a>00421         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupportChosen.size(); i++) {
<a name="l00422"></a>00422           oss &lt;&lt; PosteriorSupportChosen[i] &lt;&lt; endl;
<a name="l00423"></a>00423         }
<a name="l00424"></a>00424         oss &lt;&lt; flush;
<a name="l00425"></a>00425         oss.close();
<a name="l00426"></a>00426   
<a name="l00427"></a>00427         <span class="comment">// output the cumulative ratio of empty boxes</span>
<a name="l00428"></a>00428         EmptyFileName = <span class="stringliteral">&quot;EmptyChosen&quot;</span>;
<a name="l00429"></a>00429         EmptyFileName += stm.str();
<a name="l00430"></a>00430         EmptyFileName += stm1.str();
<a name="l00431"></a>00431         EmptyFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00432"></a>00432         oss.open(EmptyFileName.c_str());
<a name="l00433"></a>00433         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; EmptyBoxChosen.size(); i++) {
<a name="l00434"></a>00434           oss &lt;&lt; EmptyBoxChosen[i] &lt;&lt; endl;
<a name="l00435"></a>00435         }
<a name="l00436"></a>00436         oss &lt;&lt; flush;
<a name="l00437"></a>00437         oss.close();
<a name="l00438"></a>00438 
<a name="l00439"></a>00439         <span class="comment">// get the max position for this sub-set</span>
<a name="l00440"></a>00440         <span class="keywordtype">size_t</span> maxPosition = 0;
<a name="l00441"></a>00441         real maxPosterior = -1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00442"></a>00442         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00443"></a>00443           <span class="keywordflow">if</span> (PosteriorChosen[i] &gt; maxPosterior) {
<a name="l00444"></a>00444             maxPosterior = PosteriorChosen[i];
<a name="l00445"></a>00445             maxPosition = i;
<a name="l00446"></a>00446           }
<a name="l00447"></a>00447         }
<a name="l00448"></a>00448         cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ using carved support has log-posterior highest at index &quot;</span> &lt;&lt; maxPosition &lt;&lt; endl;
<a name="l00449"></a>00449         ChosenStateMaxPosterior.push_back(PosteriorChosen[maxPosition]);
<a name="l00450"></a>00450         
<a name="l00451"></a>00451         <span class="comment">// now get the posterior-optimal histogram for this subset using PQ-SEB</span>
<a name="l00452"></a>00452         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHistSubset;
<a name="l00453"></a>00453         myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00454"></a>00454         <span class="comment">// be careful here</span>
<a name="l00455"></a>00455         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMaxSubset(maxPosition+1);
<a name="l00456"></a>00456         
<a name="l00457"></a>00457         <span class="keywordflow">if</span> (func == 0) {
<a name="l00458"></a>00458           myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00459"></a>00459           logPQ, minPQPoints1);
<a name="l00460"></a>00460         }
<a name="l00461"></a>00461         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00462"></a>00462           myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00463"></a>00463           logPQ, minPQPoints2);
<a name="l00464"></a>00464         }
<a name="l00465"></a>00465         cout &lt;&lt; <span class="stringliteral">&quot; Chosen state has &quot;</span> &lt;&lt; myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00466"></a>00466         <span class="comment">//keep this histogram in a container</span>
<a name="l00467"></a>00467         ChosenStateSubset.push_back(myChosenHistSubset);
<a name="l00468"></a>00468         <span class="comment">//-------------end of getting from the root node------------------//</span>
<a name="l00469"></a>00469         
<a name="l00470"></a>00470         cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------&quot;</span> &lt;&lt; endl;
<a name="l00471"></a>00471         <span class="comment">// find which subset gives the maximum posterior</span>
<a name="l00472"></a>00472         cout &lt;&lt; <span class="stringliteral">&quot;Find the maximum over the maximum log-posteriors: &quot;</span> &lt;&lt; endl;
<a name="l00473"></a>00473         maxPosition = 0;
<a name="l00474"></a>00474         maxPosterior=-1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00475"></a>00475         <span class="keywordflow">if</span> ( ChosenStateMaxPosterior.size() != (1+NumStatesChosen) ) {
<a name="l00476"></a>00476           cerr &lt;&lt; <span class="stringliteral">&quot;Number of states is incompatible.&quot;</span> &lt;&lt; endl;
<a name="l00477"></a>00477           exit(0);
<a name="l00478"></a>00478         }
<a name="l00479"></a>00479         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; ChosenStateMaxPosterior.size(); i++) {
<a name="l00480"></a>00480           cout &lt;&lt; <span class="stringliteral">&quot;Subset: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; ChosenStateMaxPosterior[i] &lt;&lt; endl;
<a name="l00481"></a>00481           <span class="keywordflow">if</span> (ChosenStateMaxPosterior[i] &gt; maxPosterior) {
<a name="l00482"></a>00482             maxPosterior = ChosenStateMaxPosterior[i];
<a name="l00483"></a>00483             maxPosition = i;
<a name="l00484"></a>00484           }
<a name="l00485"></a>00485         }
<a name="l00486"></a>00486         cout &lt;&lt; <span class="stringliteral">&quot;Final optimal histogram is from subset &quot;</span> &lt;&lt; maxPosition;
<a name="l00487"></a>00487 
<a name="l00488"></a>00488         <span class="comment">// use this histogram as the starting state for MCMC</span>
<a name="l00489"></a>00489         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPosOptHist;
<a name="l00490"></a>00490         myPosOptHist = ChosenStateSubset[maxPosition];
<a name="l00491"></a>00491         cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span>  &lt;&lt; endl;
<a name="l00492"></a>00492         cout &lt;&lt; <span class="stringliteral">&quot;---------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00493"></a>00493         <span class="comment">//optional hist output</span>
<a name="l00494"></a>00494         myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;SelectedStartingHistogram.txt&quot;</span>);
<a name="l00495"></a>00495           
<a name="l00496"></a>00496         
<a name="l00497"></a>00497         
<a name="l00498"></a>00498         <span class="comment">//output the leaf container</span>
<a name="l00499"></a>00499         <span class="keywordtype">string</span> LeafFileName = <span class="stringliteral">&quot;LeafChosen&quot;</span>;
<a name="l00500"></a>00500         LeafFileName += stm.str();
<a name="l00501"></a>00501         LeafFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00502"></a>00502         oss.open(LeafFileName.c_str());
<a name="l00503"></a>00503         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; LeafContainer.size(); i++) {
<a name="l00504"></a>00504           oss &lt;&lt; LeafContainer[i] &lt;&lt; endl;
<a name="l00505"></a>00505         }
<a name="l00506"></a>00506         oss &lt;&lt; 1 &lt;&lt; endl;
<a name="l00507"></a>00507         oss &lt;&lt; flush;
<a name="l00508"></a>00508         oss.close();
<a name="l00509"></a>00509         
<a name="l00510"></a>00510         <span class="comment">//----------End of getting an initial state---------------//</span>
<a name="l00511"></a>00511 
<a name="l00512"></a>00512         <span class="comment">//============start MCMC==============================//</span>
<a name="l00513"></a>00513         cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC PiecewiseConstantFunction samples with a state that has &quot;</span> &lt;&lt;  
<a name="l00514"></a>00514         myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes:&quot;</span> &lt;&lt; endl;
<a name="l00515"></a>00515         
<a name="l00516"></a>00516         vector&lt;real&gt; LogLikAvg;
<a name="l00517"></a>00517         vector&lt;real&gt; LogLikCurr;
<a name="l00518"></a>00518         
<a name="l00519"></a>00519         
<a name="l00520"></a>00520         clock_t start, end;
<a name="l00521"></a>00521         start = clock();
<a name="l00522"></a>00522 
<a name="l00523"></a>00523         <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> mcmcAv = myPosOptHist.MCMCNEW(
<a name="l00524"></a>00524                             loops, burnin, thinout,
<a name="l00525"></a>00525                             proposal, logPrior,
<a name="l00526"></a>00526                             minPoints, logging, stm.str(),
<a name="l00527"></a>00527                             LogLikAvg, LogLikCurr);
<a name="l00528"></a>00528         end = clock();
<a name="l00529"></a>00529 
<a name="l00530"></a>00530         cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00531"></a>00531          &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00532"></a>00532 
<a name="l00533"></a>00533         cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC sample averaging&quot;</span> &lt;&lt; endl;
<a name="l00534"></a>00534         <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;pcfAverage.txt&quot;</span>;
<a name="l00535"></a>00535         mcmcAv.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(mcmcAvFilename);
<a name="l00536"></a>00536 
<a name="l00537"></a>00537         <span class="comment">// output log-likelihood</span>
<a name="l00538"></a>00538         <span class="keywordtype">string</span> IAEFileName;
<a name="l00539"></a>00539         IAEFileName = <span class="stringliteral">&quot;LogLikCurrMCMC&quot;</span>;
<a name="l00540"></a>00540         IAEFileName += stm.str();
<a name="l00541"></a>00541         IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00542"></a>00542         oss.open(IAEFileName.c_str());
<a name="l00543"></a>00543         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; LogLikCurr.size(); i++) {
<a name="l00544"></a>00544           oss &lt;&lt; LogLikCurr[i] &lt;&lt; endl;
<a name="l00545"></a>00545         }
<a name="l00546"></a>00546         oss &lt;&lt; flush;
<a name="l00547"></a>00547         oss.close();
<a name="l00548"></a>00548         cout &lt;&lt; <span class="stringliteral">&quot;Log-lik output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l00549"></a>00549           
<a name="l00550"></a>00550         <span class="comment">// output log-likelihood</span>
<a name="l00551"></a>00551         IAEFileName = <span class="stringliteral">&quot;LogLikAvgMCMC&quot;</span>;
<a name="l00552"></a>00552         IAEFileName += stm.str();
<a name="l00553"></a>00553         IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00554"></a>00554         oss.open(IAEFileName.c_str());
<a name="l00555"></a>00555         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; LogLikAvg.size(); i++) {
<a name="l00556"></a>00556           oss &lt;&lt; LogLikAvg[i] &lt;&lt; endl;
<a name="l00557"></a>00557         }
<a name="l00558"></a>00558         oss &lt;&lt; flush;
<a name="l00559"></a>00559         oss.close();
<a name="l00560"></a>00560         cout &lt;&lt; <span class="stringliteral">&quot;Log-lik output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l00561"></a>00561       }
<a name="l00562"></a>00562       <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00563"></a>00563 
<a name="l00564"></a>00564     } <span class="comment">// end of successfulHist condition</span>
<a name="l00565"></a>00565   } <span class="comment">// end of loop</span>
<a name="l00566"></a>00566   <span class="comment">//=======================End of Chains=================================//</span>
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 
<a name="l00570"></a>00570   <span class="keyword">delete</span> theDataPtr;
<a name="l00571"></a>00571 
<a name="l00572"></a>00572    <span class="keywordflow">return</span> 0;
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGaussian_8cpp.shtml">MCMCGaussian.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
