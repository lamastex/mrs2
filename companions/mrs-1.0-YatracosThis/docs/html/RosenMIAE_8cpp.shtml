<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: RosenMIAE.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('RosenMIAE_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">RosenMIAE.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Calculate the MIAE of adaptive histograms for Rosen.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="FLevy2D_8hpp_source.shtml">FLevy2D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="FRosenbrock_8hpp_source.shtml">FRosenbrock.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>&quot;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_math.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_monte.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_monte_miser.h&gt;</code><br/>
</div>
<p><a href="RosenMIAE_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="RosenMIAE_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Calculate the MIAE of adaptive histograms for Rosen. </p>

<p>Definition in file <a class="el" href="RosenMIAE_8cpp_source.shtml">RosenMIAE.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="RosenMIAE.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="RosenMIAE_8cpp_source.shtml#l00056">56</a> of file <a class="el" href="RosenMIAE_8cpp_source.shtml">RosenMIAE.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00238">RSSample::EnvelopeIntegral</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03748">subpavings::AdaptiveHistogram::getIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01247">subpavings::AdaptiveHistogram::getRootLeaves()</a>, <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00018">Height</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01023">subpavings::AdaptiveHistogram::insertFromRSSample()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00245">RSSample::IntegralEstimate()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00260">RSSample::Mean()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">MRSampler::RejectionSampleMany()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>, and <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00017">Tinverse</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//=======================================================================//</span>
  <span class="comment">//------set up parameters for data---------------------------------</span>
   <span class="comment">// cannot use manual input as will affect Rosenbrock function</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Setting up parameters: &quot;</span> &lt;&lt; endl;
  <span class="keywordtype">int</span> H = 100; <span class="comment">// number of simulations</span>
   <span class="keywordtype">int</span> step = 200; <span class="comment">// step size</span>
  <span class="keywordtype">size_t</span> n_samples = 100000; <span class="comment">// number of data to generate</span>
  <span class="keywordtype">size_t</span> maxN = (n_samples/2); <span class="comment">// do not need to split till n</span>
  cout &lt;&lt; maxN &lt;&lt; endl;
   <span class="comment">//---------string formatting-----------------------------------------</span>
   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(10);
  <span class="comment">//=======================================================================//</span>
     
   <span class="comment">//================Setting up parameters for the Rosenbrock density========//</span>
   <span class="comment">//Parameters specific to the Rosenbrock target</span>
   <span class="comment">// set default values</span>
   <span class="keywordtype">int</span> n_dimensions = 2;
   <span class="keywordtype">int</span> n_boxes = 10000;
   <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
   <span class="comment">//Parameters specific to the Rosenbrock target</span>
   real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
   real RosenDomainLimit = 10.0;
   <span class="comment">//========================================================================//</span>
  
  <span class="comment">//=================Start simulations=====================================//</span>
  
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> h=1; h&lt;=H; h++){
    cout &lt;&lt; <span class="stringliteral">&quot;Doing hist number &quot;</span> &lt;&lt; h &lt;&lt; endl;
    <span class="comment">//record time taken</span>
    vector&lt;double&gt; timeVec;
    vector&lt;double&gt;::iterator itTimeVec;
      <span class="comment">//keep the IAEs in a vector </span>
    vector&lt;real&gt; IAEVec;
    vector&lt;real&gt;::iterator IAEVecIt;
    <span class="comment">//record number of leaf boxes for each histogram</span>
    vector&lt;int&gt; numBinVec;
    vector&lt;int&gt;::iterator numBinVecIt;
   
     <span class="comment">//generate data</span>
    <span class="keywordtype">unsigned</span> theSeed =  time (NULL) * getpid() + h; 
     <span class="keywordflow">if</span> (argc &gt;= 2) {
         sscanf (argv[1], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_dimensions);
         <span class="keywordflow">if</span> (argc &gt;= 3) {
            sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
            <span class="keywordflow">if</span> (argc &gt;= 4) sscanf (argv[3], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);
            <span class="keywordflow">if</span> (argc &gt;= 5) sscanf (argv[4], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theSeed);
            <span class="keywordflow">if</span> (argc &gt;= 6)
            cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
             &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
         }
         <span class="keywordflow">else</span> 
         cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
                 &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
      }
     cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes
        &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed
        &lt;&lt; endl; <span class="comment">//getchar();</span>
      <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
      <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
      <span class="comment">// make the function object</span>
      <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> FRosen (n_dimensions, Tinverse, Height, RosenDomainLimit, UseLogPi);
      <span class="comment">// produce the samples</span>
      <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (FRosen, n_boxes, Alb, theSeed, (use_f_scale == 1));
    <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
    cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
    cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
    theSampler.RejectionSampleMany (n_samples, rs_sample);
    cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
    <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
    cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
        &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();

       
    <span class="comment">//start the priority queue </span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> mC = 1; mC &lt;= maxN/step; mC++){
      <span class="keywordtype">int</span> maxC = mC*step;
      cout &lt;&lt; <span class="stringliteral">&quot;Maximum count is : &quot;</span> &lt;&lt; maxC &lt;&lt; endl;
        
       <span class="comment">//set up flags</span>
      <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
      <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
        
       <span class="comment">//create an AdaptiveHistogram object</span>
      <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist;
        successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(rs_sample, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0);
      <span class="keywordflow">if</span> (successfulInsertion) {        
        <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;  <span class="comment">// compare counts</span>
        <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(maxC); <span class="comment">// maxC is stopping criteria</span>
        clock_t start, end;
        start = clock();
        successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount, 
                                    critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
        end = clock();
        <span class="keywordtype">double</span> timing;
        timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
        cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
        timeVec.push_back(timing);
      } <span class="comment">// end of successfulInsertion</span>

      <span class="keywordflow">if</span> (successfulPQSplit) {         
            <span class="comment">/* // optional - if you want to get a txt output of each histogram</span>
<span class="comment">            // create a name for the file to output</span>
<span class="comment">            string fileName = &quot;HistBiG&quot;;</span>
<span class="comment">            //convert j to a string</span>
<span class="comment">            // std::ostringstream stm2;</span>
<span class="comment">            // stm2 &lt;&lt; j;</span>
<span class="comment">            // add the stringed j to the filename</span>
<span class="comment">            // fileName += stm2.str();</span>
<span class="comment">             fileName += &quot;.txt&quot;; // and finish the filename</span>
<span class="comment">            // To realize a file output</span>
<span class="comment">             myHist.outputToTxtTabs(fileName);</span>
<span class="comment">            */</span> <span class="comment">// optional</span>
             <span class="comment">//get number of bins for this histogram</span>
        numBinVec.push_back(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    
        <span class="comment">//get IAE </span>
        real IAE = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">getIAE</a>(3);
        IAEVec.push_back(IAE);
      } <span class="comment">// end of if(successfulPQSplit)</span>
      cout &lt;&lt; <span class="stringliteral">&quot;-----------------End of maxC = &quot;</span> &lt;&lt; maxC &lt;&lt; <span class="stringliteral">&quot;for hist &quot;</span> &lt;&lt; h
           &lt;&lt; endl;
    } <span class="comment">// end of loop for maxCount</span>
  
  
    <span class="comment">//output vecIAE to .txt file</span>
      <span class="comment">//name of file</span>
    outputFileName = <span class="stringliteral">&quot;RosenIAEHist&quot;</span>;
    std::ostringstream stm1;
    stm1 &lt;&lt; h;
    outputFileName += stm1.str();
    outputFileName+= <span class="stringliteral">&quot;.txt&quot;</span>;
 
      <span class="comment">//read into file</span>
    oss.open(outputFileName.c_str());
    <span class="keywordflow">for</span> (IAEVecIt = IAEVec.begin(); IAEVecIt &lt; IAEVec.end(); IAEVecIt++){
      oss &lt;&lt; (*IAEVecIt) &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;

      <span class="comment">//read time taken into file</span>
    <span class="keywordtype">string</span> timeFileName;
    timeFileName = <span class="stringliteral">&quot;RosenTime&quot;</span>;
    timeFileName += stm1.str(); <span class="comment">//hist number</span>
    timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(timeFileName.c_str());
    <span class="keywordflow">for</span>(itTimeVec = timeVec.begin(); itTimeVec &lt; timeVec.end(); itTimeVec++){
      oss &lt;&lt; (*itTimeVec) &lt;&lt; endl ;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl;
    
     <span class="comment">//read number of bins into file</span>
    <span class="keywordtype">string</span> binFileName;
    binFileName = <span class="stringliteral">&quot;RosenBins&quot;</span>;
    binFileName += stm1.str(); <span class="comment">//hist number</span>
    binFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(binFileName.c_str());
    <span class="keywordflow">for</span>(numBinVecIt = numBinVec.begin(); numBinVecIt &lt; numBinVec.end(); 
         numBinVecIt++){
      oss &lt;&lt; *numBinVecIt &lt;&lt; endl ;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Number of bins output to &quot;</span> &lt;&lt; binFileName &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;----------------------------------------------&quot;</span> &lt;&lt; endl;



   cout &lt;&lt; <span class="stringliteral">&quot;===================done with hist &quot;</span> &lt;&lt; h &lt;&lt; <span class="stringliteral">&quot;============&quot;</span> &lt;&lt; endl;
  } <span class="comment">// end of loop for histograms</span>
  

<span class="keywordflow">return</span> 0;
} <span class="comment">// end of Rosen MIAE</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="RosenMIAE_8cpp.shtml">RosenMIAE.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
