<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSamplingScheffe.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPSamplingScheffe_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPSamplingScheffe.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPSamplingScheffe_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* s</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> * </span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> * </span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="IAECalculations_2FinMixFobj_8hpp.shtml">FinMixFobj.hpp</a>&quot;</span> <span class="comment">//function objects</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj1D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj1D.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj2D.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj10D.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj100D.hpp</a>&quot;</span>
<a name="l00034"></a>00034 <span class="comment">//#include &quot;GaussianFobj1000D.hpp&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">//#include &quot;RosenFobj2D.hpp&quot;</span>
<a name="l00037"></a>00037 <span class="comment">//#include &quot;RosenFobj10D.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="comment">//#include &quot;RosenFobj100D.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="comment">//#include &quot;RosenFobj1000D.hpp&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">//#include &quot;LevyFobj2D.hpp&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span> <span class="comment">// to use gsl_ran_discrete_preproc</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;valarray&gt;</span> 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//draw unif box</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>     <span class="comment">// to be able to use the Rosen function objects</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="FRosenbrock_8hpp.shtml" title="Declarations for example function class FRosenbrock (Rosenbrock function).">FRosenbrock.hpp</a>&quot;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>    <span class="comment">// to be able to do MRS rejection sampling</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="keyword">using namespace </span>std;
<a name="l00065"></a>00065 <span class="keyword">using namespace </span>subpavings;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00071"></a>00071 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00072"></a>00072 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074   <span class="keyword">public</span>:
<a name="l00075"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00075</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00076"></a>00076       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078 };
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">//==========Functions for MappedSPnode===================================//</span>
<a name="l00081"></a>00081 <span class="comment">//to output MappedSPnode to .txt file</span>
<a name="l00082"></a><a class="code" href="MappedSPSamplingScheffe_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00082</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084    <span class="comment">// To generate a file output</span>
<a name="l00085"></a>00085    ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00086"></a>00086    <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00087"></a>00087       node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00088"></a>00088       std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
<a name="l00089"></a>00089                &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00090"></a>00090          os.close();
<a name="l00091"></a>00091       }
<a name="l00092"></a>00092    <span class="keywordflow">else</span> {
<a name="l00093"></a>00093       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00094"></a>00094          &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00095"></a>00095    }
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="comment">//function to iterate through the leaves and get weights and boxes</span>
<a name="l00099"></a><a class="code" href="MappedSPSamplingScheffe_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">00099</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;double&gt;&amp; WeightsVector,
<a name="l00100"></a>00100               vector&lt;interval&gt;&amp; WeightsInt)
<a name="l00101"></a>00101 {
<a name="l00102"></a>00102   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00103"></a>00103      <span class="comment">//get the weights</span>
<a name="l00104"></a>00104      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00105"></a>00105      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00106"></a>00106      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, WeightsInt, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00107"></a>00107   }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="comment">//recurse on the children</span>
<a name="l00110"></a>00110   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00111"></a>00111     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector, WeightsInt);
<a name="l00112"></a>00112   }
<a name="l00113"></a>00113    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00114"></a>00114     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector, WeightsInt);
<a name="l00115"></a>00115    }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">//function to iterate through the leaves and get heights and boxes</span>
<a name="l00119"></a><a class="code" href="MappedSPSamplingScheffe_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">00119</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;ivector&gt;&amp; BoxVector,
<a name="l00120"></a>00120            vector&lt;real&gt;&amp; HeightsVector)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00123"></a>00123      <span class="comment">//push back this box into the BoxVector</span>
<a name="l00124"></a>00124      BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00125"></a>00125      
<a name="l00126"></a>00126      <span class="comment">//get the heights</span>
<a name="l00127"></a>00127      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00128"></a>00128      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00129"></a>00129      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
<a name="l00130"></a>00130   }
<a name="l00131"></a>00131   <span class="comment">//recurse on the children</span>
<a name="l00132"></a>00132   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00133"></a>00133     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
<a name="l00134"></a>00134   }
<a name="l00135"></a>00135    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00136"></a>00136     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
<a name="l00137"></a>00137    }
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="comment">// normalize the heights</span>
<a name="l00141"></a><a class="code" href="MappedSPSamplingScheffe_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">00141</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, <span class="keywordtype">double</span> totalArea, 
<a name="l00142"></a>00142           vector&lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> &gt;&amp; heightNorm)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
<a name="l00145"></a>00145      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00146"></a>00146      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00147"></a>00147      real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
<a name="l00148"></a>00148      
<a name="l00149"></a>00149      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
<a name="l00150"></a>00150     heightNorm.push_back(height);
<a name="l00151"></a>00151   }
<a name="l00152"></a>00152   <span class="comment">//recurse on the children</span>
<a name="l00153"></a>00153   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00154"></a>00154     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00157"></a>00157     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
<a name="l00158"></a>00158    }
<a name="l00159"></a>00159 }
<a name="l00160"></a>00160 <span class="comment">//=======================end of functions====================================//</span>
<a name="l00161"></a>00161 
<a name="l00162"></a><a class="code" href="MappedSPSamplingScheffe_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00162</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00165"></a>00165   <span class="keywordflow">if</span> ( argc != 7 ) {
<a name="l00166"></a>00166     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: MappedFunctions n dataSeed dims lb ub critLeaves maxCheck approxLeaves&quot;</span> &lt;&lt; endl;
<a name="l00167"></a>00167     exit(0);
<a name="l00168"></a>00168   }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="comment">//user inputs</span>
<a name="l00171"></a>00171   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00172"></a>00172   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00173"></a>00173   <span class="keywordtype">int</span> simNum = dataSeed;
<a name="l00174"></a>00174   <span class="keywordtype">int</span> dims = atoi(argv[3]); <span class="comment">//which data set </span>
<a name="l00175"></a>00175 
<a name="l00176"></a>00176  
<a name="l00177"></a>00177   <span class="keywordtype">size_t</span> critLeaves = atoi(argv[4]);
<a name="l00178"></a>00178 
<a name="l00179"></a>00179   <span class="keywordtype">int</span> maxCheck = atoi(argv[5]);
<a name="l00180"></a>00180   
<a name="l00181"></a>00181   <span class="keywordtype">int</span> approxLeaves = atoi(argv[6]);
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">//string formatting</span>
<a name="l00184"></a>00184   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00185"></a>00185   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00186"></a>00186   oss.precision(10);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="comment">//=========set up to estimate the function==============================// </span>
<a name="l00191"></a>00191   <span class="comment">// Function object</span>
<a name="l00192"></a>00192   <a class="code" href="classGaussianFobj1D.shtml">GaussianFobj1D</a> realF;
<a name="l00193"></a>00193 <span class="comment">//   GaussianFobj2D realF;</span>
<a name="l00194"></a>00194 <span class="comment">//   GaussianFobj10D realF;</span>
<a name="l00195"></a>00195   <span class="comment">//RosenFobj2D realF;  </span>
<a name="l00196"></a>00196   <span class="comment">//RosenFobj10D realF;</span>
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="comment">//make a root box</span>
<a name="l00199"></a>00199   ivector pavingBox(dims);
<a name="l00200"></a>00200   interval pavingInterval(-5,5);
<a name="l00201"></a>00201   <span class="comment">//interval pavingInterval(-2,3);</span>
<a name="l00202"></a>00202   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00205"></a>00205     <span class="comment">// estimate the function</span>
<a name="l00206"></a>00206    <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, 0);
<a name="l00207"></a>00207    vector&lt;real&gt; eps;
<a name="l00208"></a>00208    nodeEst.priorityAccept(expander, approxLeaves, eps);
<a name="l00209"></a>00209    cout &lt;&lt; <span class="stringliteral">&quot;Estimate function has &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00210"></a>00210    
<a name="l00211"></a>00211    <span class="comment">//output to .txt  </span>
<a name="l00212"></a>00212    <span class="keywordtype">string</span> thefilename = <span class="stringliteral">&quot;EstFunction.txt&quot;</span>;
<a name="l00213"></a>00213    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(thefilename, nodeEst);
<a name="l00214"></a>00214   <span class="comment">//=======================================================================//</span>
<a name="l00215"></a>00215   
<a name="l00216"></a>00216   <span class="comment">//==================Get the weights of the boxes=========================//</span>
<a name="l00217"></a>00217    cout &lt;&lt; <span class="stringliteral">&quot;Getting boxes and weights:&quot;</span> &lt;&lt; endl;
<a name="l00218"></a>00218     vector&lt;ivector&gt; BoxVector;
<a name="l00219"></a>00219    vector&lt;real&gt; HeightsVector;
<a name="l00220"></a>00220    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodePtr;
<a name="l00221"></a>00221    nodePtr = &amp;nodeEst;
<a name="l00222"></a>00222    vector&lt;double&gt;* WeightsVectorPtr;
<a name="l00223"></a>00223    WeightsVectorPtr = <span class="keyword">new</span> vector&lt;double&gt;;
<a name="l00224"></a>00224    vector&lt;interval&gt;* WeightsIntPtr;
<a name="l00225"></a>00225    WeightsIntPtr = <span class="keyword">new</span> vector&lt;interval&gt;;
<a name="l00226"></a>00226    
<a name="l00227"></a>00227    <span class="comment">// iterate through the leaf nodes to get boxes and heights and weights</span>
<a name="l00228"></a>00228    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(nodePtr, BoxVector, HeightsVector);
<a name="l00229"></a>00229    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(nodePtr, *WeightsVectorPtr, *WeightsIntPtr);
<a name="l00230"></a>00230    
<a name="l00231"></a>00231    <span class="comment">//now put elements of WeightsVector into an array of doubles</span>
<a name="l00232"></a>00232    <span class="keywordtype">size_t</span> sizeWeight =(*WeightsVectorPtr).size();
<a name="l00233"></a>00233    <span class="comment">//check that number of boxes &lt; 10^6</span>
<a name="l00234"></a>00234    <span class="keywordflow">if</span> (sizeWeight &gt; <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10,7)) { 
<a name="l00235"></a>00235       cerr &lt;&lt; <span class="stringliteral">&quot;Too many boxes (&quot;</span> &lt;&lt; sizeWeight &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; endl;
<a name="l00236"></a>00236       exit(1);
<a name="l00237"></a>00237    }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239   <span class="comment">// normalize using heights</span>
<a name="l00240"></a>00240   interval areaInt = interval(0);
<a name="l00241"></a>00241    <span class="comment">//normalize the heights so that the function integrates to 1</span>
<a name="l00242"></a>00242    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00243"></a>00243     areaInt = areaInt + (*WeightsIntPtr)[i];
<a name="l00244"></a>00244     
<a name="l00245"></a>00245     <span class="comment">//cout &lt;&lt; (*WeightsVectorPtr)[i] &lt;&lt; &quot;\t&quot; &lt;&lt; (*WeightsIntPtr)[i] &lt;&lt; endl;</span>
<a name="l00246"></a>00246    }
<a name="l00247"></a>00247   cout &lt;&lt; <span class="stringliteral">&quot;Total area: &quot;</span> &lt;&lt; mid(areaInt) &lt;&lt; endl; 
<a name="l00248"></a>00248    
<a name="l00249"></a>00249    <span class="keywordtype">double</span> totalArea = _double(mid(areaInt));
<a name="l00250"></a>00250    
<a name="l00251"></a>00251    <span class="comment">// very important - normalize the heights in nodeEst</span>
<a name="l00252"></a>00252    vector&lt; RangeCollectionClass&lt;real&gt; &gt;* heightNorm = <span class="keyword">new</span> vector&lt; RangeCollectionClass&lt;real&gt; &gt;;
<a name="l00253"></a>00253    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(nodePtr, totalArea, *heightNorm);
<a name="l00254"></a>00254    nodeEst.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(*heightNorm, 0);
<a name="l00255"></a>00255    <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunctionAfterNormalized.txt&quot;</span>;
<a name="l00256"></a>00256    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeEst);
<a name="l00257"></a>00257    
<a name="l00258"></a>00258    <span class="comment">//need to check that the weights equal to 1</span>
<a name="l00259"></a>00259    <span class="keywordtype">double</span> densityCheck = 0.0;
<a name="l00260"></a>00260     <span class="comment">//convert vector to array</span>
<a name="l00261"></a>00261    <span class="keywordtype">double</span> WeightsArray[sizeWeight];
<a name="l00262"></a>00262    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00263"></a>00263       WeightsArray[i] = (*WeightsVectorPtr)[i];
<a name="l00264"></a>00264       densityCheck += (*WeightsVectorPtr)[i]/totalArea;
<a name="l00265"></a>00265    }
<a name="l00266"></a>00266    
<a name="l00267"></a>00267   cout &lt;&lt; <span class="stringliteral">&quot;Total area after normalizing: &quot;</span> &lt;&lt; densityCheck &lt;&lt; endl;
<a name="l00268"></a>00268   <span class="comment">/*</span>
<a name="l00269"></a>00269 <span class="comment">  if ( (densityCheck != 1.0) ) {</span>
<a name="l00270"></a>00270 <span class="comment">    cout &lt;&lt; densityCheck &lt;&lt; endl; </span>
<a name="l00271"></a>00271 <span class="comment">    cerr &lt;&lt; &quot;Function does not integrate to 1. Need to normalize.&quot; &lt;&lt; endl; </span>
<a name="l00272"></a>00272 <span class="comment">    exit(0); </span>
<a name="l00273"></a>00273 <span class="comment">  }</span>
<a name="l00274"></a>00274 <span class="comment">  */</span>
<a name="l00275"></a>00275   
<a name="l00276"></a>00276    <span class="comment">//return to the system the memory that was pointed to by WeightsVectorPtr</span>
<a name="l00277"></a>00277    <span class="comment">// and heightNorm</span>
<a name="l00278"></a>00278    <span class="keyword">delete</span> WeightsVectorPtr;
<a name="l00279"></a>00279    <span class="keyword">delete</span> heightNorm;
<a name="l00280"></a>00280    
<a name="l00281"></a>00281     <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
<a name="l00282"></a>00282    <span class="comment">//i.e. the box indices with their weights</span>
<a name="l00283"></a>00283    gsl_ran_discrete_t* gslpdfstruct;
<a name="l00284"></a>00284    gslpdfstruct = gsl_ran_discrete_preproc(sizeWeight, WeightsArray);
<a name="l00285"></a>00285 
<a name="l00286"></a>00286    <span class="comment">//===================end of getting box weights=======================//</span>
<a name="l00287"></a>00287 
<a name="l00288"></a>00288   <span class="comment">//===================generate data===================================</span>
<a name="l00289"></a>00289   <span class="comment">// set up a random number generator to draw from weighted boxes</span>
<a name="l00290"></a>00290   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00291"></a>00291   gsl_rng * r;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00294"></a>00294   gsl_rng_env_setup();
<a name="l00295"></a>00295   T = gsl_rng_default;
<a name="l00296"></a>00296   r = gsl_rng_alloc (T);
<a name="l00297"></a>00297   <span class="comment">// set a seed for the data</span>
<a name="l00298"></a>00298   gsl_rng_set(r, dataSeed);
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   <span class="comment">//now sample n data points from boxes given by the proposed indices</span>
<a name="l00301"></a>00301   cout &lt;&lt; <span class="stringliteral">&quot;Sample data points using weighted boxes:&quot;</span> &lt;&lt; endl;
<a name="l00302"></a>00302   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00303"></a>00303    <span class="comment">// make a simulated data set</span>
<a name="l00304"></a>00304   <span class="comment">// data sampled as weighted-uniform-mixtures</span>
<a name="l00305"></a>00305   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00306"></a>00306     rvector thisrv(dims);
<a name="l00307"></a>00307     <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
<a name="l00308"></a>00308     <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
<a name="l00309"></a>00309     thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r, BoxVector[proposedIndex]);
<a name="l00310"></a>00310     <span class="comment">// put points generated into container</span>
<a name="l00311"></a>00311     theData.push_back(thisrv);
<a name="l00312"></a>00312   }  <span class="comment">// data  should be in theData</span>
<a name="l00313"></a>00313 
<a name="l00314"></a>00314     <span class="comment">// /* optional output for data</span>
<a name="l00315"></a>00315     <span class="comment">//string dataFileName = &quot;FinMix&quot;;</span>
<a name="l00316"></a>00316     <span class="comment">//dataFileName += mix.str();</span>
<a name="l00317"></a>00317     <span class="keywordtype">string</span> dataFileName = <span class="stringliteral">&quot;MappedData&quot;</span>; 
<a name="l00318"></a>00318     <span class="comment">//dataFileName += simNum.str();</span>
<a name="l00319"></a>00319     dataFileName += <span class="stringliteral">&quot;.txt&quot;</span>; 
<a name="l00320"></a>00320     oss.open(dataFileName.c_str());
<a name="l00321"></a>00321       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) { 
<a name="l00322"></a>00322         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= dims; j++) {
<a name="l00323"></a>00323             <span class="comment">//cout &lt;&lt; (*theData)[i][j] &lt;&lt; endl;</span>
<a name="l00324"></a>00324           oss &lt;&lt; (theData)[i][j] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00325"></a>00325         }
<a name="l00326"></a>00326         oss &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00327"></a>00327       }
<a name="l00328"></a>00328       oss &lt;&lt; flush;
<a name="l00329"></a>00329       oss.close();
<a name="l00330"></a>00330     <span class="comment">// */</span>
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   <span class="comment">//================Setting up parameters for the Rosenbrock density========//</span>
<a name="l00333"></a>00333    <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00334"></a>00334    <span class="comment">// set default values</span>
<a name="l00335"></a>00335    <span class="keywordtype">int</span> n_dimensions = 2;
<a name="l00336"></a>00336    <span class="keywordtype">int</span> n_boxes = 1000000;
<a name="l00337"></a>00337    <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
<a name="l00338"></a>00338    <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00339"></a>00339    real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00340"></a>00340    real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00341"></a>00341    
<a name="l00342"></a>00342    real RosenDomainLimit = 3.0;
<a name="l00343"></a>00343    
<a name="l00344"></a>00344   <span class="keywordtype">unsigned</span> theSeed =  1; 
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 <span class="comment">/*</span>
<a name="l00347"></a>00347 <span class="comment">   if (argc &gt;= 2) {</span>
<a name="l00348"></a>00348 <span class="comment">         sscanf (argv[1], &quot;%i&quot;, &amp;n_dimensions);</span>
<a name="l00349"></a>00349 <span class="comment">         if (argc &gt;= 3) {</span>
<a name="l00350"></a>00350 <span class="comment">            sscanf (argv[2], &quot;%i&quot;, &amp;n_boxes);</span>
<a name="l00351"></a>00351 <span class="comment">            if (argc &gt;= 4) sscanf (argv[3], &quot;%i&quot;, &amp;n_samples);</span>
<a name="l00352"></a>00352 <span class="comment">            if (argc &gt;= 5) sscanf (argv[4], &quot;%ui&quot;, &amp;theSeed);</span>
<a name="l00353"></a>00353 <span class="comment">            if (argc &gt;= 6)</span>
<a name="l00354"></a>00354 <span class="comment">            cout &lt;&lt; &quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00355"></a>00355 <span class="comment">             &lt;&lt; &quot;extra arguments ignored.\n&quot;;</span>
<a name="l00356"></a>00356 <span class="comment">         }</span>
<a name="l00357"></a>00357 <span class="comment">         else </span>
<a name="l00358"></a>00358 <span class="comment">         cout &lt;&lt; &quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00359"></a>00359 <span class="comment">                 &lt;&lt; &quot;extra arguments ignored.\n&quot;;</span>
<a name="l00360"></a>00360 <span class="comment">      }*/</span>
<a name="l00361"></a>00361       
<a name="l00362"></a>00362      cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes
<a name="l00363"></a>00363         &lt;&lt; <span class="stringliteral">&quot;  n: &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed
<a name="l00364"></a>00364         &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00365"></a>00365       <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00366"></a>00366       <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
<a name="l00367"></a>00367       <span class="comment">// make the function object</span>
<a name="l00368"></a>00368       <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> FRosen (n_dimensions, Tinverse, Height, RosenDomainLimit, UseLogPi);
<a name="l00369"></a>00369       <span class="comment">// produce the samples</span>
<a name="l00370"></a>00370       <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (FRosen, n_boxes, Alb, theSeed, (use_f_scale == 1));
<a name="l00371"></a>00371     <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
<a name="l00372"></a>00372     cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
<a name="l00373"></a>00373     cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n &lt;&lt; endl;
<a name="l00374"></a>00374     theSampler.<a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">RejectionSampleMany</a> (n, rs_sample);
<a name="l00375"></a>00375     cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
<a name="l00376"></a>00376     <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
<a name="l00377"></a>00377     cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
<a name="l00378"></a>00378         &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
<a name="l00379"></a>00379     cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
<a name="l00380"></a>00380     cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
<a name="l00381"></a>00381 
<a name="l00382"></a>00382     vector&lt;LabPnt&gt;::iterator LabPntIt; <span class="comment">//to iterate over labData.Samples</span>
<a name="l00383"></a>00383     dataFileName = <span class="stringliteral">&quot;Data.txt&quot;</span>;
<a name="l00384"></a>00384     oss.open(dataFileName.c_str());
<a name="l00385"></a>00385     <span class="keywordflow">for</span> (LabPntIt = rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin(); LabPntIt &lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end();
<a name="l00386"></a>00386           LabPntIt++) {
<a name="l00387"></a>00387         (*LabPntIt).Print(oss);
<a name="l00388"></a>00388     }
<a name="l00389"></a>00389     oss &lt;&lt; flush;
<a name="l00390"></a>00390     oss.close();
<a name="l00391"></a>00391     
<a name="l00392"></a>00392   <span class="comment">//==================Hold-out MDE===========================================</span>
<a name="l00393"></a>00393   
<a name="l00394"></a>00394   <span class="comment">/*</span>
<a name="l00395"></a>00395 <span class="comment">  cout &lt;&lt; &quot;========================================================&quot; &lt;&lt; endl;</span>
<a name="l00396"></a>00396 <span class="comment">  cout &lt;&lt; &quot;Run hold out estimation...&quot; &lt;&lt; endl;</span>
<a name="l00397"></a>00397 <span class="comment"></span>
<a name="l00398"></a>00398 <span class="comment">  //=========insert data into an AdaptiveHistogramValidation object=========//</span>
<a name="l00399"></a>00399 <span class="comment">  //containers for output needed</span>
<a name="l00400"></a>00400 <span class="comment">  vector&lt;real&gt; IAEV;</span>
<a name="l00401"></a>00401 <span class="comment">  vector&lt;int&gt; NumLeafNodesV;</span>
<a name="l00402"></a>00402 <span class="comment">  vector&lt;double&gt; timings;</span>
<a name="l00403"></a>00403 <span class="comment">  double timing = 0;</span>
<a name="l00404"></a>00404 <span class="comment">  </span>
<a name="l00405"></a>00405 <span class="comment">  </span>
<a name="l00406"></a>00406 <span class="comment">  // stopping criteria </span>
<a name="l00407"></a>00407 <span class="comment">  bool stopCrit = true; // to remove this?</span>
<a name="l00408"></a>00408 <span class="comment"></span>
<a name="l00409"></a>00409 <span class="comment">  //maximum number of leaf nodes allowed</span>
<a name="l00410"></a>00410 <span class="comment">  int holdOutCount = int(n/3);</span>
<a name="l00411"></a>00411 <span class="comment">  int trainCount = n-holdOutCount; </span>
<a name="l00412"></a>00412 <span class="comment">  cout &lt;&lt; n-holdOutCount &lt;&lt; &quot; training data and &quot; </span>
<a name="l00413"></a>00413 <span class="comment">      &lt;&lt; holdOutCount &lt;&lt; &quot; validation data inserted.&quot; &lt;&lt; endl; </span>
<a name="l00414"></a>00414 <span class="comment">  size_t maxLeafNodes = 1500;</span>
<a name="l00415"></a>00415 <span class="comment">//  size_t maxLeafNodes = int(trainCount/log(trainCount*(2*dims+1))); // temporarily</span>
<a name="l00416"></a>00416 <span class="comment">  //size_t maxLeafNodes = 50;</span>
<a name="l00417"></a>00417 <span class="comment">  //cout &lt;&lt; &quot;max leaf nodes: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00418"></a>00418 <span class="comment"></span>
<a name="l00419"></a>00419 <span class="comment">  // indicators</span>
<a name="l00420"></a>00420 <span class="comment">   bool successfulInsertion1 = false;</span>
<a name="l00421"></a>00421 <span class="comment">   bool successfulInsertion2 = false;</span>
<a name="l00422"></a>00422 <span class="comment">   bool successfulInsertion3 = false;</span>
<a name="l00423"></a>00423 <span class="comment">   bool successfulInsertion4 = false;</span>
<a name="l00424"></a>00424 <span class="comment">   bool successfulInsertion5 = false;</span>
<a name="l00425"></a>00425 <span class="comment">   bool successfulInsertion6 = false;</span>
<a name="l00426"></a>00426 <span class="comment">   bool successfulInsertion7 = false;</span>
<a name="l00427"></a>00427 <span class="comment">   bool successfulInsertion8 = false;</span>
<a name="l00428"></a>00428 <span class="comment">   </span>
<a name="l00429"></a>00429 <span class="comment">   </span>
<a name="l00430"></a>00430 <span class="comment">   bool successfulPQSplit1 = false;</span>
<a name="l00431"></a>00431 <span class="comment">   bool successfulPQSplit2 = false;</span>
<a name="l00432"></a>00432 <span class="comment">   bool successfulPQSplit3 = false;</span>
<a name="l00433"></a>00433 <span class="comment">   bool successfulPQSplit4 = false;</span>
<a name="l00434"></a>00434 <span class="comment">   bool successfulPQSplit5 = false;</span>
<a name="l00435"></a>00435 <span class="comment">   bool successfulPQSplit6 = false;</span>
<a name="l00436"></a>00436 <span class="comment">   bool successfulPQSplit7 = false;</span>
<a name="l00437"></a>00437 <span class="comment">   bool successfulPQSplit8 = false;</span>
<a name="l00438"></a>00438 <span class="comment">   </span>
<a name="l00439"></a>00439 <span class="comment">   </span>
<a name="l00440"></a>00440 <span class="comment">   // comparison objects</span>
<a name="l00441"></a>00441 <span class="comment">   CompCountVal compCount;</span>
<a name="l00442"></a>00442 <span class="comment">   CompVolVal compVol;</span>
<a name="l00443"></a>00443 <span class="comment">   CompAreaVal compArea;</span>
<a name="l00444"></a>00444 <span class="comment">   CompMeanMassVal compMeanMass;</span>
<a name="l00445"></a>00445 <span class="comment">   CompCovarVal compCovarMass;</span>
<a name="l00446"></a>00446 <span class="comment">   CompHellingerDistMassVal compH;</span>
<a name="l00447"></a>00447 <span class="comment">   CompHellingerDistMassDiamVal compHD;</span>
<a name="l00448"></a>00448 <span class="comment">   SplitNever sn;   </span>
<a name="l00449"></a>00449 <span class="comment">  bool holdAllStats = true;</span>
<a name="l00450"></a>00450 <span class="comment">  </span>
<a name="l00451"></a>00451 <span class="comment">  int finalK = 1;</span>
<a name="l00452"></a>00452 <span class="comment">  //CritLargestCount_LTEV critCount(finalK);</span>
<a name="l00453"></a>00453 <span class="comment">  size_t minChildPoints = 0;</span>
<a name="l00454"></a>00454 <span class="comment">  CritLeaves_GTEV critCount(critLeaves);</span>
<a name="l00455"></a>00455 <span class="comment"></span>
<a name="l00456"></a>00456 <span class="comment">  //container for scheffe tournament candidates</span>
<a name="l00457"></a>00457 <span class="comment">  vector&lt;AdaptiveHistogramValidation&gt; optHist;</span>
<a name="l00458"></a>00458 <span class="comment"></span>
<a name="l00459"></a>00459 <span class="comment">  cout &lt;&lt; &quot;PQ1&quot; &lt;&lt; endl;</span>
<a name="l00460"></a>00460 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00461"></a>00461 <span class="comment">  AdaptiveHistogramValidation myHistVal1(pavingBox);</span>
<a name="l00462"></a>00462 <span class="comment">  AdaptiveHistogramValidation optHist1(pavingBox);</span>
<a name="l00463"></a>00463 <span class="comment">  int m = 1;</span>
<a name="l00464"></a>00464 <span class="comment">  successfulInsertion1 = myHistVal1.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00465"></a>00465 <span class="comment">  if (successfulInsertion1) {</span>
<a name="l00466"></a>00466 <span class="comment">    clock_t start, end;</span>
<a name="l00467"></a>00467 <span class="comment">    start = clock();</span>
<a name="l00468"></a>00468 <span class="comment">    successfulPQSplit1 = myHistVal1.prioritySplitAndEstimate(compCount, </span>
<a name="l00469"></a>00469 <span class="comment">                        critCount, NOLOG, minChildPoints, </span>
<a name="l00470"></a>00470 <span class="comment">                         0.0, stopCrit, nodeEst, m, simNum, </span>
<a name="l00471"></a>00471 <span class="comment">                         maxLeafNodes, maxCheck, optHist1);</span>
<a name="l00472"></a>00472 <span class="comment">    end = clock();</span>
<a name="l00473"></a>00473 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00474"></a>00474 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00475"></a>00475 <span class="comment">    if (successfulPQSplit1) { </span>
<a name="l00476"></a>00476 <span class="comment">      optHist1.outputToTxtTabs(&quot;HistPQ1.txt&quot;);</span>
<a name="l00477"></a>00477 <span class="comment">      optHist.push_back(optHist1); timings.push_back(timing);}</span>
<a name="l00478"></a>00478 <span class="comment">  }</span>
<a name="l00479"></a>00479 <span class="comment">  </span>
<a name="l00480"></a>00480 <span class="comment">  </span>
<a name="l00481"></a>00481 <span class="comment">  cout &lt;&lt; &quot;\nPQ2 &quot; &lt;&lt; endl;</span>
<a name="l00482"></a>00482 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00483"></a>00483 <span class="comment">  AdaptiveHistogramValidation myHistVal2(pavingBox);</span>
<a name="l00484"></a>00484 <span class="comment">  AdaptiveHistogramValidation optHist2(pavingBox);   </span>
<a name="l00485"></a>00485 <span class="comment">  m=2;</span>
<a name="l00486"></a>00486 <span class="comment">  successfulInsertion2 = myHistVal2.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00487"></a>00487 <span class="comment">  if (successfulInsertion2) {</span>
<a name="l00488"></a>00488 <span class="comment">    clock_t start, end;</span>
<a name="l00489"></a>00489 <span class="comment">    start = clock();</span>
<a name="l00490"></a>00490 <span class="comment">    successfulPQSplit2 = myHistVal2.prioritySplitAndEstimate(compVol, </span>
<a name="l00491"></a>00491 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00492"></a>00492 <span class="comment">                         0, 0.0, stopCrit, nodeEst, m, simNum, </span>
<a name="l00493"></a>00493 <span class="comment">                         maxLeafNodes, maxCheck, optHist2);</span>
<a name="l00494"></a>00494 <span class="comment">    end = clock();  </span>
<a name="l00495"></a>00495 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00496"></a>00496 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00497"></a>00497 <span class="comment">    if (successfulPQSplit2) { </span>
<a name="l00498"></a>00498 <span class="comment">      optHist2.outputToTxtTabs(&quot;HistPQ2.txt&quot;);</span>
<a name="l00499"></a>00499 <span class="comment">      optHist.push_back(optHist2); timings.push_back(timing); }</span>
<a name="l00500"></a>00500 <span class="comment">  }</span>
<a name="l00501"></a>00501 <span class="comment">  </span>
<a name="l00502"></a>00502 <span class="comment">  cout &lt;&lt; &quot;\nPQ3&quot; &lt;&lt; endl;</span>
<a name="l00503"></a>00503 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00504"></a>00504 <span class="comment">  AdaptiveHistogramValidation myHistVal3(pavingBox);   </span>
<a name="l00505"></a>00505 <span class="comment">  AdaptiveHistogramValidation optHist3(pavingBox);</span>
<a name="l00506"></a>00506 <span class="comment">  successfulInsertion3 = myHistVal3.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00507"></a>00507 <span class="comment">  if (successfulInsertion3) {</span>
<a name="l00508"></a>00508 <span class="comment">    clock_t start, end;</span>
<a name="l00509"></a>00509 <span class="comment">    start = clock();</span>
<a name="l00510"></a>00510 <span class="comment">    successfulPQSplit3 = myHistVal3.prioritySplitAndEstimateWithSwitch(compVol, </span>
<a name="l00511"></a>00511 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00512"></a>00512 <span class="comment">                         0, 0.0, stopCrit, nodeEst, 3, simNum, </span>
<a name="l00513"></a>00513 <span class="comment">                         maxLeafNodes, maxCheck, optHist3);</span>
<a name="l00514"></a>00514 <span class="comment">    end = clock();  </span>
<a name="l00515"></a>00515 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00516"></a>00516 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00517"></a>00517 <span class="comment">    if (successfulPQSplit3) { </span>
<a name="l00518"></a>00518 <span class="comment">      optHist3.outputToTxtTabs(&quot;HistPQ3.txt&quot;);</span>
<a name="l00519"></a>00519 <span class="comment">      optHist.push_back(optHist3); timings.push_back(timing);}</span>
<a name="l00520"></a>00520 <span class="comment">  }</span>
<a name="l00521"></a>00521 <span class="comment">  </span>
<a name="l00522"></a>00522 <span class="comment">  cout &lt;&lt; &quot;\nPQ4&quot; &lt;&lt; endl;</span>
<a name="l00523"></a>00523 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00524"></a>00524 <span class="comment">  AdaptiveHistogramValidation myHistVal4(pavingBox);</span>
<a name="l00525"></a>00525 <span class="comment">  AdaptiveHistogramValidation optHist4(pavingBox);</span>
<a name="l00526"></a>00526 <span class="comment">  successfulInsertion4 = myHistVal4.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00527"></a>00527 <span class="comment"></span>
<a name="l00528"></a>00528 <span class="comment">  if (successfulInsertion4) {</span>
<a name="l00529"></a>00529 <span class="comment">    clock_t start, end;</span>
<a name="l00530"></a>00530 <span class="comment">    start = clock();</span>
<a name="l00531"></a>00531 <span class="comment">    successfulPQSplit4 = myHistVal4.prioritySplitAndEstimateWithSwitch(compArea, </span>
<a name="l00532"></a>00532 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00533"></a>00533 <span class="comment">                         0, 0.0, stopCrit, nodeEst, 4, simNum, </span>
<a name="l00534"></a>00534 <span class="comment">                         maxLeafNodes, maxCheck,  optHist4);</span>
<a name="l00535"></a>00535 <span class="comment">    end = clock();  </span>
<a name="l00536"></a>00536 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00537"></a>00537 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00538"></a>00538 <span class="comment">    if (successfulPQSplit4) { </span>
<a name="l00539"></a>00539 <span class="comment">      optHist4.outputToTxtTabs(&quot;HistPQ4.txt&quot;);</span>
<a name="l00540"></a>00540 <span class="comment">      optHist.push_back(optHist4); timings.push_back(timing);}</span>
<a name="l00541"></a>00541 <span class="comment">  }</span>
<a name="l00542"></a>00542 <span class="comment">  </span>
<a name="l00543"></a>00543 <span class="comment">  </span>
<a name="l00544"></a>00544 <span class="comment">  cout &lt;&lt; &quot;\nPQ5&quot; &lt;&lt;  endl;</span>
<a name="l00545"></a>00545 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00546"></a>00546 <span class="comment">  AdaptiveHistogramValidation myHistVal5(pavingBox, holdAllStats);   </span>
<a name="l00547"></a>00547 <span class="comment">  AdaptiveHistogramValidation optHist5(pavingBox, holdAllStats);</span>
<a name="l00548"></a>00548 <span class="comment">  successfulInsertion5 = myHistVal5.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00549"></a>00549 <span class="comment">  //cout &lt;&lt; myHistVal5.getHoldAllStats() &lt;&lt; endl;</span>
<a name="l00550"></a>00550 <span class="comment">  //cout &lt;&lt; myHistVal5.getSubPaving() &lt;&lt; endl;</span>
<a name="l00551"></a>00551 <span class="comment">  if (successfulInsertion5) {</span>
<a name="l00552"></a>00552 <span class="comment">    clock_t start, end;</span>
<a name="l00553"></a>00553 <span class="comment">    start = clock();</span>
<a name="l00554"></a>00554 <span class="comment">    int m = 5;</span>
<a name="l00555"></a>00555 <span class="comment">    successfulPQSplit5 = myHistVal5.prioritySplitAndEstimateWithSwitch(compMeanMass, </span>
<a name="l00556"></a>00556 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00557"></a>00557 <span class="comment">                         minChildPoints, 0.0, stopCrit, nodeEst, m, simNum, </span>
<a name="l00558"></a>00558 <span class="comment">                         maxLeafNodes, maxCheck, optHist5);</span>
<a name="l00559"></a>00559 <span class="comment"> </span>
<a name="l00560"></a>00560 <span class="comment">    end = clock();  </span>
<a name="l00561"></a>00561 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00562"></a>00562 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00563"></a>00563 <span class="comment">    if (successfulPQSplit5) { </span>
<a name="l00564"></a>00564 <span class="comment">      optHist5.outputToTxtTabs(&quot;HistPQ5.txt&quot;);</span>
<a name="l00565"></a>00565 <span class="comment">      optHist.push_back(optHist5); timings.push_back(timing);</span>
<a name="l00566"></a>00566 <span class="comment">    }</span>
<a name="l00567"></a>00567 <span class="comment">  }</span>
<a name="l00568"></a>00568 <span class="comment">  </span>
<a name="l00569"></a>00569 <span class="comment">  cout &lt;&lt; &quot;\nPQ6&quot; &lt;&lt; endl;</span>
<a name="l00570"></a>00570 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00571"></a>00571 <span class="comment">  AdaptiveHistogramValidation myHistVal6(pavingBox, holdAllStats); </span>
<a name="l00572"></a>00572 <span class="comment">  AdaptiveHistogramValidation  optHist6(pavingBox, holdAllStats);</span>
<a name="l00573"></a>00573 <span class="comment">  successfulInsertion6 = myHistVal6.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00574"></a>00574 <span class="comment">  if (successfulInsertion6) {</span>
<a name="l00575"></a>00575 <span class="comment">    clock_t start, end;</span>
<a name="l00576"></a>00576 <span class="comment">    start = clock();</span>
<a name="l00577"></a>00577 <span class="comment">    successfulPQSplit6 = myHistVal6.prioritySplitAndEstimateWithSwitch(compCovarMass, </span>
<a name="l00578"></a>00578 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00579"></a>00579 <span class="comment">                         0, 0.0, stopCrit, nodeEst, 6, simNum, </span>
<a name="l00580"></a>00580 <span class="comment">                         maxLeafNodes, maxCheck, optHist6);</span>
<a name="l00581"></a>00581 <span class="comment">    end = clock();  </span>
<a name="l00582"></a>00582 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00583"></a>00583 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00584"></a>00584 <span class="comment">    if (successfulPQSplit6) { </span>
<a name="l00585"></a>00585 <span class="comment">      optHist6.outputToTxtTabs(&quot;HistPQ6.txt&quot;);</span>
<a name="l00586"></a>00586 <span class="comment">      optHist.push_back(optHist6); timings.push_back(timing); }</span>
<a name="l00587"></a>00587 <span class="comment">  }</span>
<a name="l00588"></a>00588 <span class="comment">  </span>
<a name="l00589"></a>00589 <span class="comment">  cout &lt;&lt; &quot;\nPQ7&quot; &lt;&lt; endl &lt;&lt; endl;</span>
<a name="l00590"></a>00590 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00591"></a>00591 <span class="comment">  AdaptiveHistogramValidation myHistVal7(pavingBox, holdAllStats); </span>
<a name="l00592"></a>00592 <span class="comment">  AdaptiveHistogramValidation optHist7(pavingBox, holdAllStats);</span>
<a name="l00593"></a>00593 <span class="comment">  </span>
<a name="l00594"></a>00594 <span class="comment">  successfulInsertion7 = myHistVal7.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00595"></a>00595 <span class="comment">  if (successfulInsertion7) {</span>
<a name="l00596"></a>00596 <span class="comment">    clock_t start, end;</span>
<a name="l00597"></a>00597 <span class="comment">    start = clock();</span>
<a name="l00598"></a>00598 <span class="comment">    successfulPQSplit7 = myHistVal7.prioritySplitAndEstimateWithSwitch(compH, </span>
<a name="l00599"></a>00599 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00600"></a>00600 <span class="comment">                         0, 0.0, stopCrit, nodeEst, 7, simNum, </span>
<a name="l00601"></a>00601 <span class="comment">                         maxLeafNodes, maxCheck, optHist7);</span>
<a name="l00602"></a>00602 <span class="comment">    end = clock();  </span>
<a name="l00603"></a>00603 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00604"></a>00604 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00605"></a>00605 <span class="comment">    if (successfulPQSplit7) { </span>
<a name="l00606"></a>00606 <span class="comment">      optHist7.outputToTxtTabs(&quot;HistPQ7.txt&quot;);</span>
<a name="l00607"></a>00607 <span class="comment">      optHist.push_back(optHist7); timings.push_back(timing);}</span>
<a name="l00608"></a>00608 <span class="comment">  }</span>
<a name="l00609"></a>00609 <span class="comment">  </span>
<a name="l00610"></a>00610 <span class="comment">  cout &lt;&lt; &quot;\nPQ8&quot; &lt;&lt; endl;</span>
<a name="l00611"></a>00611 <span class="comment">  // Put the data from the container into the histogram  </span>
<a name="l00612"></a>00612 <span class="comment">  AdaptiveHistogramValidation myHistVal8(pavingBox, holdAllStats);</span>
<a name="l00613"></a>00613 <span class="comment">  AdaptiveHistogramValidation optHist8(pavingBox, holdAllStats);</span>
<a name="l00614"></a>00614 <span class="comment">  successfulInsertion8 = myHistVal8.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<a name="l00615"></a>00615 <span class="comment">  if (successfulInsertion8) {</span>
<a name="l00616"></a>00616 <span class="comment">    clock_t start, end;</span>
<a name="l00617"></a>00617 <span class="comment">    start = clock();</span>
<a name="l00618"></a>00618 <span class="comment">    successfulPQSplit8 = myHistVal8.prioritySplitAndEstimateWithSwitch(compHD, </span>
<a name="l00619"></a>00619 <span class="comment">                        critCount, NOLOG, </span>
<a name="l00620"></a>00620 <span class="comment">                         0, 0.0, stopCrit, nodeEst, 8, simNum, </span>
<a name="l00621"></a>00621 <span class="comment">                         maxLeafNodes, maxCheck, optHist8);</span>
<a name="l00622"></a>00622 <span class="comment">    end = clock();  </span>
<a name="l00623"></a>00623 <span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00624"></a>00624 <span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00625"></a>00625 <span class="comment">    if (successfulPQSplit8) { </span>
<a name="l00626"></a>00626 <span class="comment">      optHist8.outputToTxtTabs(&quot;HistPQ8.txt&quot;);</span>
<a name="l00627"></a>00627 <span class="comment">      optHist.push_back(optHist8); timings.push_back(timing);}</span>
<a name="l00628"></a>00628 <span class="comment">  }</span>
<a name="l00629"></a>00629 <span class="comment">  </span>
<a name="l00630"></a>00630 <span class="comment">//================start the Scheffe tournament======================//</span>
<a name="l00631"></a>00631 <span class="comment">//  if (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3 &amp;&amp;</span>
<a name="l00632"></a>00632 <span class="comment">//    successfulPQSplit4 &amp;&amp; successfulPQSplit5 &amp;&amp; successfulPQSplit6 &amp;&amp;</span>
<a name="l00633"></a>00633 <span class="comment">//    successfulPQSplit7 &amp;&amp; successfulPQSplit8) {</span>
<a name="l00634"></a>00634 <span class="comment"></span>
<a name="l00635"></a>00635 <span class="comment">  ofstream os;         // ofstream object</span>
<a name="l00636"></a>00636 <span class="comment">  os &lt;&lt; scientific;  // set formatting for input to oss</span>
<a name="l00637"></a>00637 <span class="comment">  os.precision(5);</span>
<a name="l00638"></a>00638 <span class="comment"></span>
<a name="l00639"></a>00639 <span class="comment">  vector&lt;real&gt; TrueDelta;</span>
<a name="l00640"></a>00640 <span class="comment">  AdaptiveHistogramVCollator coll;</span>
<a name="l00641"></a>00641 <span class="comment">  size_t agg = 0;</span>
<a name="l00642"></a>00642 <span class="comment">  vector&lt;real&gt; IAEMDE;</span>
<a name="l00643"></a>00643 <span class="comment">  vector&lt;real&gt; IAEMDEFull;</span>
<a name="l00644"></a>00644 <span class="comment"></span>
<a name="l00645"></a>00645 <span class="comment">  for (size_t i = 0; i &lt; optHist.size(); i++) {</span>
<a name="l00646"></a>00646 <span class="comment">    IAEMDE.push_back(optHist[i].getMappedFunctionIAE(nodeEst, 0));</span>
<a name="l00647"></a>00647 <span class="comment">    IAEMDEFull.push_back(optHist[i].getMappedFunctionIAE(nodeEst, 1));</span>
<a name="l00648"></a>00648 <span class="comment">    coll.addToCollationWithVal(optHist[i], 1, agg);</span>
<a name="l00649"></a>00649 <span class="comment">  }</span>
<a name="l00650"></a>00650 <span class="comment"></span>
<a name="l00651"></a>00651 <span class="comment">  cout &lt;&lt; &quot;Get the Yatracos set for theorem checks: &quot; &lt;&lt; endl;</span>
<a name="l00652"></a>00652 <span class="comment">  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecYatSet;</span>
<a name="l00653"></a>00653 <span class="comment"></span>
<a name="l00654"></a>00654 <span class="comment">  vector&lt;double&gt; maxDelta;</span>
<a name="l00655"></a>00655 <span class="comment">  vector&lt;double&gt;::iterator it;</span>
<a name="l00656"></a>00656 <span class="comment">  clock_t start, end;</span>
<a name="l00657"></a>00657 <span class="comment">  start = clock();</span>
<a name="l00658"></a>00658 <span class="comment">  coll.getMinDistEst(maxDelta, vecYatSet);</span>
<a name="l00659"></a>00659 <span class="comment">  end = clock();  </span>
<a name="l00660"></a>00660 <span class="comment">  timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<a name="l00661"></a>00661 <span class="comment">  cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<a name="l00662"></a>00662 <span class="comment">  timings.push_back(timing);  </span>
<a name="l00663"></a>00663 <span class="comment">  </span>
<a name="l00664"></a>00664 <span class="comment">  double minMaxDelta = 100;</span>
<a name="l00665"></a>00665 <span class="comment">  real minMinIAE = 100;</span>
<a name="l00666"></a>00666 <span class="comment">  int minPosIAE; </span>
<a name="l00667"></a>00667 <span class="comment">  int minPosDelta;</span>
<a name="l00668"></a>00668 <span class="comment">  </span>
<a name="l00669"></a>00669 <span class="comment">  for (size_t i = 0; i &lt; coll.getNumberCollated(); i++) {</span>
<a name="l00670"></a>00670 <span class="comment">    cout &lt;&lt; maxDelta[i] &lt;&lt; &quot;\t&quot; &lt;&lt; IAEMDE[i] &lt;&lt; endl;</span>
<a name="l00671"></a>00671 <span class="comment">    if (maxDelta[i] &lt; minMaxDelta) { minPosDelta = i+1; minMaxDelta = maxDelta[i]; }</span>
<a name="l00672"></a>00672 <span class="comment">    if (IAEMDE[i] &lt; minMinIAE) { minPosIAE = i+1; minMinIAE = IAEMDE[i]; }</span>
<a name="l00673"></a>00673 <span class="comment">  }</span>
<a name="l00674"></a>00674 <span class="comment"></span>
<a name="l00675"></a>00675 <span class="comment">  cout &lt;&lt; &quot;Min IAE at candidate &quot; &lt;&lt; minPosIAE &lt;&lt; endl;</span>
<a name="l00676"></a>00676 <span class="comment">  cout &lt;&lt; &quot;Min delta max at candidate &quot; &lt;&lt; minPosDelta &lt;&lt; endl;</span>
<a name="l00677"></a>00677 <span class="comment"></span>
<a name="l00678"></a>00678 <span class="comment">  //get the true Delta</span>
<a name="l00679"></a>00679 <span class="comment">  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator vecYatSetIt;</span>
<a name="l00680"></a>00680 <span class="comment">  real trueDelta = 0.0;</span>
<a name="l00681"></a>00681 <span class="comment">  if (!vecYatSet.empty()) {</span>
<a name="l00682"></a>00682 <span class="comment">    for (vecYatSetIt = vecYatSet.begin(); vecYatSetIt &lt; vecYatSet.end(); vecYatSetIt++) {</span>
<a name="l00683"></a>00683 <span class="comment">      real trueDeltaR = getMappedFunctionTrueDelta(nodeEst, *vecYatSetIt);</span>
<a name="l00684"></a>00684 <span class="comment">      trueDeltaR = abs(trueDeltaR);</span>
<a name="l00685"></a>00685 <span class="comment">      //cout &lt;&lt; trueDeltaR &lt;&lt; &quot;\t&quot;;</span>
<a name="l00686"></a>00686 <span class="comment">      trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;</span>
<a name="l00687"></a>00687 <span class="comment">      //cout &lt;&lt; trueDelta &lt;&lt; endl; </span>
<a name="l00688"></a>00688 <span class="comment">    }</span>
<a name="l00689"></a>00689 <span class="comment">    cout &lt;&lt; &quot;Delta over the Yatracos set: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l00690"></a>00690 <span class="comment">  }</span>
<a name="l00691"></a>00691 <span class="comment">  else { trueDelta = -1; }</span>
<a name="l00692"></a>00692 <span class="comment">  </span>
<a name="l00693"></a>00693 <span class="comment">  ostringstream stm;</span>
<a name="l00694"></a>00694 <span class="comment">  stm &lt;&lt; simNum;</span>
<a name="l00695"></a>00695 <span class="comment">  string deltaFile;</span>
<a name="l00696"></a>00696 <span class="comment">  deltaFile = &quot;TrueDeltaAll&quot;;</span>
<a name="l00697"></a>00697 <span class="comment">  deltaFile += stm.str();</span>
<a name="l00698"></a>00698 <span class="comment">  deltaFile += &quot;.txt&quot;;</span>
<a name="l00699"></a>00699 <span class="comment">  os.open(deltaFile.c_str());</span>
<a name="l00700"></a>00700 <span class="comment">  os &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l00701"></a>00701 <span class="comment">  os &lt;&lt; flush;</span>
<a name="l00702"></a>00702 <span class="comment">  os.close();</span>
<a name="l00703"></a>00703 <span class="comment"></span>
<a name="l00704"></a>00704 <span class="comment"></span>
<a name="l00705"></a>00705 <span class="comment">  string IAEMDEFile = &quot;IAEMDEandDeltaMax&quot;;</span>
<a name="l00706"></a>00706 <span class="comment">  IAEMDEFile += stm.str();</span>
<a name="l00707"></a>00707 <span class="comment">  IAEMDEFile += &quot;.txt&quot;;</span>
<a name="l00708"></a>00708 <span class="comment">  os.open(IAEMDEFile.c_str());</span>
<a name="l00709"></a>00709 <span class="comment">  for (size_t i = 0; i &lt; IAEMDE.size(); i++) {</span>
<a name="l00710"></a>00710 <span class="comment">    os &lt;&lt; IAEMDE[i] &lt;&lt; &quot;\t&quot; &lt;&lt; IAEMDEFull[i] &lt;&lt; &quot;\t&quot; &lt;&lt; maxDelta[i] &lt;&lt; endl;</span>
<a name="l00711"></a>00711 <span class="comment">  }</span>
<a name="l00712"></a>00712 <span class="comment">  os &lt;&lt; flush;</span>
<a name="l00713"></a>00713 <span class="comment">  os.close();</span>
<a name="l00714"></a>00714 <span class="comment"></span>
<a name="l00715"></a>00715 <span class="comment">  string TimeFile = &quot;Times&quot;;</span>
<a name="l00716"></a>00716 <span class="comment">  TimeFile += stm.str();</span>
<a name="l00717"></a>00717 <span class="comment">  TimeFile += &quot;.txt&quot;;</span>
<a name="l00718"></a>00718 <span class="comment">  os.open(TimeFile.c_str());</span>
<a name="l00719"></a>00719 <span class="comment">  for (size_t i = 0; i &lt; timings.size(); i++) {</span>
<a name="l00720"></a>00720 <span class="comment">    os &lt;&lt; timings[i] &lt;&lt; endl;</span>
<a name="l00721"></a>00721 <span class="comment">  }</span>
<a name="l00722"></a>00722 <span class="comment">  os &lt;&lt; flush;</span>
<a name="l00723"></a>00723 <span class="comment">  os.close();</span>
<a name="l00724"></a>00724 <span class="comment">*/</span>
<a name="l00725"></a>00725   <span class="comment">// free the random number generator</span>
<a name="l00726"></a>00726   gsl_rng_free (r);  
<a name="l00727"></a>00727   gsl_ran_discrete_free (gslpdfstruct);
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <span class="keywordflow">return</span> 0;
<a name="l00730"></a>00730 }
<a name="l00731"></a>00731 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPSamplingScheffe_8cpp.shtml">MappedSPSamplingScheffe.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
