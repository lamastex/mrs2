<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: UniformMixture.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('UniformMixture_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">UniformMixture.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="UniformMixture_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> * </span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00027"></a>00027 <span class="comment">// include header files</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>std;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">//===================start of main programme================================//</span>
<a name="l00041"></a><a class="code" href="UniformMixture_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00041</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043    <span class="comment">//===================== user-inputs======================================//</span>
<a name="l00044"></a>00044   <span class="keywordflow">if</span> ( argc != 8 ) {
<a name="l00045"></a>00045     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UniformMixture n d dataSeed mixShape simNum maxCheck StopVal&quot;</span> &lt;&lt; endl;
<a name="l00046"></a>00046     exit(0);
<a name="l00047"></a>00047   }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00050"></a>00050    <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00051"></a>00051    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[3]); <span class="comment">//seed for generating data</span>
<a name="l00052"></a>00052    <span class="keywordtype">int</span> shape = atoi(argv[4]); <span class="comment">//which mixture to use</span>
<a name="l00053"></a>00053    <span class="keywordtype">int</span> simNum = atoi(argv[5]); <span class="comment">//which data set </span>
<a name="l00054"></a>00054    <span class="keywordtype">double</span> alpha = 0.95; <span class="comment">//to compute the coverage</span>
<a name="l00055"></a>00055    <span class="keywordtype">size_t</span> maxCheck = atoi(argv[6]); <span class="comment">//stopping criteria for MDE</span>
<a name="l00056"></a>00056    <span class="keywordtype">int</span> StopVal = atoi(argv[7]); <span class="comment">//stopping criteria for total variation</span>
<a name="l00057"></a>00057   
<a name="l00058"></a>00058    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00059"></a>00059    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00060"></a>00060    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00061"></a>00061    oss.precision(5);
<a name="l00062"></a>00062    std::ostringstream stm;
<a name="l00063"></a>00063   stm &lt;&lt; simNum;
<a name="l00064"></a>00064    <span class="comment">//=================set up for data generation===============================</span>
<a name="l00065"></a>00065    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00066"></a>00066    <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00067"></a>00067    gsl_rng * r;             
<a name="l00068"></a>00068    gsl_rng_env_setup();
<a name="l00069"></a>00069    T = gsl_rng_default;
<a name="l00070"></a>00070    r = gsl_rng_alloc (T);
<a name="l00071"></a>00071    gsl_rng_set(r, dataSeed);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073    <span class="comment">//data generating partition</span>
<a name="l00074"></a>00074    ivector pavingBox(d);
<a name="l00075"></a>00075    interval pavingInterval(0,1);
<a name="l00076"></a>00076    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078    <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00079"></a>00079    <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00080"></a>00080    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00081"></a>00081    <span class="keywordtype">double</span> rootBoxVol = (myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00082"></a>00082    <span class="comment">// a container for the boxes</span>
<a name="l00083"></a>00083    vector&lt;ivector&gt; Pboxes;
<a name="l00084"></a>00084    <span class="keywordtype">size_t</span> PartSize;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086    <span class="comment">// mixture shape</span>
<a name="l00087"></a>00087    <span class="keywordtype">string</span> mixShape;
<a name="l00088"></a>00088   <span class="keywordflow">if</span> (shape == 1) { mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }
<a name="l00089"></a>00089   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==2) { mixShape = <span class="stringliteral">&quot;3,4,4,2,2,3,3&quot;</span>; } 
<a name="l00090"></a>00090   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==3) {
<a name="l00091"></a>00091     mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }    
<a name="l00092"></a>00092   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==4) { mixShape = <span class="stringliteral">&quot;3, 3, 2, 3, 3, 2&quot;</span>; }   
<a name="l00093"></a>00093   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture   </span>
<a name="l00094"></a>00094    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00095"></a>00095    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt; <span class="comment">// and an iterator over the container</span>
<a name="l00096"></a>00096    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(trueLeaves); <span class="comment">// fill the container</span>
<a name="l00097"></a>00097    <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00098"></a>00098    <span class="keywordflow">for</span>(trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l00099"></a>00099       Pboxes.push_back((*trueIt)-&gt;getBox());
<a name="l00100"></a>00100    }
<a name="l00101"></a>00101   PartSize = Pboxes.size();
<a name="l00102"></a>00102   <span class="comment">// get weight of mixture components</span>
<a name="l00103"></a>00103   <span class="keywordtype">double</span> weight = 1.0/(1.0*PartSize); 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00106"></a>00106   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00107"></a>00107   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00108"></a>00108    <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00109"></a>00109    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00110"></a>00110    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00111"></a>00111         rvector thisrv(d);
<a name="l00112"></a>00112         <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00113"></a>00113         <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
<a name="l00114"></a>00114         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
<a name="l00115"></a>00115      <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00116"></a>00116         theData.push_back(thisrv);
<a name="l00117"></a>00117    }  <span class="comment">// data  should be in theData</span>
<a name="l00118"></a>00118    
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
<a name="l00121"></a>00121   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00122"></a>00122   cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
<a name="l00123"></a>00123   <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00124"></a>00124   <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">//containers for output needed</span>
<a name="l00127"></a>00127    vector&lt;real&gt; IAE;
<a name="l00128"></a>00128    vector&lt;int&gt; NumLeafNodes;
<a name="l00129"></a>00129    vector&lt;double&gt; TotalVarDist;
<a name="l00130"></a>00130    vector&lt;double&gt; Coverage;
<a name="l00131"></a>00131    vector&lt;double&gt; Times;
<a name="l00132"></a>00132    
<a name="l00133"></a>00133   <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
<a name="l00134"></a>00134   <span class="comment">// set up function objects for a priority split</span>
<a name="l00135"></a>00135   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00136"></a>00136   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 20; i++) {
<a name="l00137"></a>00137     <span class="comment">//make a pointer to an AdaptiveHistogram object</span>
<a name="l00138"></a>00138     <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
<a name="l00139"></a>00139     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox, holdAllStats); 
<a name="l00140"></a>00140     successfulInsertion= myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00141"></a>00141     
<a name="l00142"></a>00142     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00143"></a>00143       <span class="keywordtype">int</span> finalK = int(i*0.005*n);
<a name="l00144"></a>00144       cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00145"></a>00145       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00146"></a>00146       <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00147"></a>00147       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00148"></a>00148 
<a name="l00149"></a>00149       <span class="keywordtype">size_t</span> maxLeafNodes = n;
<a name="l00150"></a>00150       <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00151"></a>00151       
<a name="l00152"></a>00152       <span class="comment">// we want to check the timings for this</span>
<a name="l00153"></a>00153       clock_t start, end;
<a name="l00154"></a>00154       <span class="keywordtype">double</span> timing; 
<a name="l00155"></a>00155       
<a name="l00156"></a>00156       <span class="comment">// do the priority split</span>
<a name="l00157"></a>00157       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00158"></a>00158       successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00159"></a>00159            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00160"></a>00160       end = clock();
<a name="l00161"></a>00161       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00162"></a>00162       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00163"></a>00163       Times.push_back(timing);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165       <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00166"></a>00166         
<a name="l00167"></a>00167         <span class="comment">//optional - output the histogram</span>
<a name="l00168"></a>00168         <span class="comment">// create a name for the file to output</span>
<a name="l00169"></a>00169             <span class="keywordtype">string</span> fileName;
<a name="l00170"></a>00170             fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00171"></a>00171             std::ostringstream stm2;
<a name="l00172"></a>00172             stm2 &lt;&lt; finalK;
<a name="l00173"></a>00173             fileName += stm2.str();
<a name="l00174"></a>00174             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00175"></a>00175             myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00176"></a>00176             
<a name="l00177"></a>00177         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00178"></a>00178         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
<a name="l00179"></a>00179         (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLeaves(leaves);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         <span class="comment">//get the IAE</span>
<a name="l00182"></a>00182         IAE.push_back(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">getUnifIAE</a>(myPart, weight));
<a name="l00183"></a>00183 
<a name="l00184"></a>00184         <span class="comment">//get the number of leaves</span>
<a name="l00185"></a>00185         NumLeafNodes.push_back(leaves.size());
<a name="l00186"></a>00186         <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l00187"></a>00187         <span class="comment">//cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         <span class="comment">//initialize totalvariationdistance</span>
<a name="l00190"></a>00190         <span class="keywordtype">double</span> totalVarDist = 0.0;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192         <span class="comment">//initialize the coverage</span>
<a name="l00193"></a>00193         <span class="keywordtype">size_t</span> yesCovOne = 0;
<a name="l00194"></a>00194 
<a name="l00195"></a>00195         <span class="comment">//iterate through the leaf nodes</span>
<a name="l00196"></a>00196         <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l00197"></a>00197     
<a name="l00198"></a>00198           cout &lt;&lt; <span class="stringliteral">&quot;Hellinger Distance: &quot;</span> &lt;&lt; endl;
<a name="l00199"></a>00199           (*leavesIt)-&gt;getHellingerDist();
<a name="l00200"></a>00200           
<a name="l00201"></a>00201           <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l00202"></a>00202           <span class="comment">//get the total variation distance</span>
<a name="l00203"></a>00203           <span class="comment">//calculate \mu_n - \mu</span>
<a name="l00204"></a>00204                <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
<a name="l00205"></a>00205                <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00206"></a>00206                <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l00207"></a>00207           totalVarDist += diffMu;
<a name="l00208"></a>00208           <span class="comment">//out &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00209"></a>00209           <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00210"></a>00210           <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00211"></a>00211 
<a name="l00212"></a>00212           <span class="comment">//get the 95% coverage</span>
<a name="l00213"></a>00213           <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00214"></a>00214           <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216           <span class="comment">// get lower and upper bounds</span>
<a name="l00217"></a>00217           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
<a name="l00218"></a>00218           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
<a name="l00219"></a>00219 
<a name="l00220"></a>00220           <span class="comment">//get the true density of the uniform mixture</span>
<a name="l00221"></a>00221           <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 0;
<a name="l00222"></a>00222           <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l00223"></a>00223             <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l00224"></a>00224               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00225"></a>00225             } <span class="comment">//end of if this box is in trueBox</span>
<a name="l00226"></a>00226             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
<a name="l00227"></a>00227               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00228"></a>00228             } <span class="comment">//end of if trueBox is in this box</span>
<a name="l00229"></a>00229           } <span class="comment">// end of going through all trueBoxes</span>
<a name="l00230"></a>00230           
<a name="l00231"></a>00231           <span class="comment">// see SAGE worksheet for this</span>
<a name="l00232"></a>00232           <span class="comment">// f*leafVol/leafVol = f</span>
<a name="l00233"></a>00233           <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}
<a name="l00234"></a>00234 
<a name="l00235"></a>00235         } <span class="comment">// end of iterating through the leaves</span>
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         <span class="comment">//keep the total variation distance</span>
<a name="l00238"></a>00238         <span class="comment">//cout &lt;&lt; &quot;final: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00239"></a>00239         TotalVarDist.push_back(totalVarDist);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241         <span class="comment">//keep the coverage</span>
<a name="l00242"></a>00242         <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00243"></a>00243         <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00244"></a>00244         Coverage.push_back(yesCovOne*1.0/(leaves.size()*1.0));
<a name="l00245"></a>00245       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00246"></a>00246     }<span class="comment">// end of if(successfulInsertion)</span>
<a name="l00247"></a>00247   } <span class="comment">// end of iterating through different kn&#39;s</span>
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
<a name="l00250"></a>00250     <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00251"></a>00251     std::ostringstream stm;
<a name="l00252"></a>00252     stm &lt;&lt; simNum;
<a name="l00253"></a>00253     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifExhaustivePQOutput&quot;</span>;
<a name="l00254"></a>00254     PQFileName += stm.str();
<a name="l00255"></a>00255     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00256"></a>00256     oss.open(PQFileName.c_str());
<a name="l00257"></a>00257     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Coverage.size(); i++) {
<a name="l00258"></a>00258       oss &lt;&lt; IAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00259"></a>00259       oss &lt;&lt; NumLeafNodes[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00260"></a>00260       oss &lt;&lt; TotalVarDist[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00261"></a>00261       oss &lt;&lt; Coverage[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00262"></a>00262       oss &lt;&lt; Times[i] &lt;&lt; endl;
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264     oss &lt;&lt; flush;
<a name="l00265"></a>00265     oss.close();
<a name="l00266"></a>00266     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00267"></a>00267         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00268"></a>00268   }
<a name="l00269"></a>00269 <span class="comment">//=================end of exhaustive PQ=================================// </span>
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">//===using total variation to determine best histogram and a stopping rule=//</span>
<a name="l00272"></a>00272 
<a name="l00273"></a>00273   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00274"></a>00274   cout &lt;&lt; <span class="stringliteral">&quot;Run PQ with total variation...&quot;</span> &lt;&lt; endl;
<a name="l00275"></a>00275 
<a name="l00276"></a>00276   <span class="comment">//containers to store needed output</span>
<a name="l00277"></a>00277   vector&lt;real&gt; IAETotal;
<a name="l00278"></a>00278   vector&lt;int&gt; CoverageTotal;
<a name="l00279"></a>00279   vector&lt;int&gt; NumLeafNodesTotal;
<a name="l00280"></a>00280   vector&lt;double&gt; TotalVarDistTotal;
<a name="l00281"></a>00281   <span class="keywordtype">double</span> timing; 
<a name="l00282"></a>00282   
<a name="l00283"></a>00283   successfulInsertion = <span class="keyword">false</span>;
<a name="l00284"></a>00284   successfulPQSplit = <span class="keyword">false</span>;
<a name="l00285"></a>00285 
<a name="l00286"></a>00286   vector&lt;AdaptiveHistogram&gt; HistAtValley;
<a name="l00287"></a>00287   
<a name="l00288"></a>00288   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistTot(pavingBox); 
<a name="l00289"></a>00289   successfulInsertion= myHistTot.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291   <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00292"></a>00292     <span class="keywordtype">int</span> finalK = 1;
<a name="l00293"></a>00293     cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00294"></a>00294     
<a name="l00295"></a>00295     <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00296"></a>00296     cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00299"></a>00299     <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00300"></a>00300  
<a name="l00301"></a>00301     <span class="comment">// we want to check the timings for this</span>
<a name="l00302"></a>00302     clock_t start, end;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     <span class="comment">// do the priority split</span>
<a name="l00305"></a>00305     start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00306"></a>00306     successfulPQSplit = myHistTot.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(compCount,
<a name="l00307"></a>00307            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, StopVal, 
<a name="l00308"></a>00308            HistAtValley, simNum); <span class="comment">// no logging</span>
<a name="l00309"></a>00309     end = clock();
<a name="l00310"></a>00310     timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00311"></a>00311     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00312"></a>00312 
<a name="l00313"></a>00313     <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00314"></a>00314       <span class="comment">//iterate through the &quot;best&quot; histograms to get the MIAE</span>
<a name="l00315"></a>00315       vector&lt;AdaptiveHistogram&gt;::iterator it;
<a name="l00316"></a>00316       <span class="keywordflow">for</span> (it = HistAtValley.begin(); it &lt; HistAtValley.end(); it++) {
<a name="l00317"></a>00317         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00318"></a>00318         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
<a name="l00319"></a>00319         ((*it).getSubPaving())-&gt;getLeaves(leaves);
<a name="l00320"></a>00320 
<a name="l00321"></a>00321         <span class="comment">//get the IAE</span>
<a name="l00322"></a>00322         IAETotal.push_back((*it).getUnifIAE(myPart, weight));
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <span class="comment">//get the number of leaves</span>
<a name="l00325"></a>00325         NumLeafNodesTotal.push_back(leaves.size());
<a name="l00326"></a>00326         <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l00327"></a>00327         cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;
<a name="l00328"></a>00328 
<a name="l00329"></a>00329         <span class="comment">//initialize the coverage</span>
<a name="l00330"></a>00330         <span class="keywordtype">size_t</span> yesCovOne = 0;
<a name="l00331"></a>00331         
<a name="l00332"></a>00332         <span class="comment">//initialize the total variation distance</span>
<a name="l00333"></a>00333         <span class="keywordtype">double</span> totalVarDist = 0.0;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335         <span class="comment">//iterate through the leaf nodes</span>
<a name="l00336"></a>00336         <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l00337"></a>00337           <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l00338"></a>00338                <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
<a name="l00339"></a>00339                <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00340"></a>00340                <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l00341"></a>00341           totalVarDist += diffMu;
<a name="l00342"></a>00342           <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00343"></a>00343           <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00344"></a>00344           <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00345"></a>00345           
<a name="l00346"></a>00346           <span class="comment">//get the 95% coverage</span>
<a name="l00347"></a>00347           <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00348"></a>00348           <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350           <span class="comment">// get lower and upper bounds</span>
<a name="l00351"></a>00351           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
<a name="l00352"></a>00352           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
<a name="l00353"></a>00353 
<a name="l00354"></a>00354           <span class="comment">//get the true density of the uniform mixture</span>
<a name="l00355"></a>00355           <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 0;
<a name="l00356"></a>00356           <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l00357"></a>00357             <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l00358"></a>00358               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00359"></a>00359             } <span class="comment">//end of if this box is in trueBox</span>
<a name="l00360"></a>00360             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
<a name="l00361"></a>00361               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00362"></a>00362             } <span class="comment">//end of if trueBox is in this box</span>
<a name="l00363"></a>00363           } <span class="comment">// end of going through all trueBoxes</span>
<a name="l00364"></a>00364           
<a name="l00365"></a>00365           <span class="comment">// see SAGE worksheet for this</span>
<a name="l00366"></a>00366           <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}
<a name="l00367"></a>00367         } <span class="comment">// end of iterating through the leaves</span>
<a name="l00368"></a>00368 
<a name="l00369"></a>00369         <span class="comment">//keep the total variation distance</span>
<a name="l00370"></a>00370         TotalVarDistTotal.push_back(totalVarDist);
<a name="l00371"></a>00371 
<a name="l00372"></a>00372         <span class="comment">//keep the coverage</span>
<a name="l00373"></a>00373         <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00374"></a>00374         <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00375"></a>00375         CoverageTotal.push_back(yesCovOne*1.0/(leaves.size()*1.0));
<a name="l00376"></a>00376       } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
<a name="l00377"></a>00377     } <span class="comment">// end of successfulPQSplit</span>
<a name="l00378"></a>00378   } <span class="comment">// end of successfulInsertion</span>
<a name="l00379"></a>00379 
<a name="l00380"></a>00380   <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
<a name="l00381"></a>00381     <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00382"></a>00382     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifTotalVariationPQOutput&quot;</span>;
<a name="l00383"></a>00383     PQFileName += stm.str();
<a name="l00384"></a>00384     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00385"></a>00385     oss.open(PQFileName.c_str());
<a name="l00386"></a>00386     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageTotal.size(); i++) {
<a name="l00387"></a>00387       oss &lt;&lt; IAETotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00388"></a>00388       oss &lt;&lt; NumLeafNodesTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00389"></a>00389       oss &lt;&lt; TotalVarDistTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00390"></a>00390       oss &lt;&lt; CoverageTotal[i] &lt;&lt; endl;
<a name="l00391"></a>00391     }
<a name="l00392"></a>00392     oss &lt;&lt; timing &lt;&lt; endl;
<a name="l00393"></a>00393     oss &lt;&lt; flush;
<a name="l00394"></a>00394     oss.close();
<a name="l00395"></a>00395     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00396"></a>00396         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00397"></a>00397   }
<a name="l00398"></a>00398 <span class="comment">//=================end of total variation with stopping rule=================================// </span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="comment">//==================Hold-out MDE===========================================//</span>
<a name="l00401"></a>00401   cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
<a name="l00402"></a>00402   cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;
<a name="l00403"></a>00403 
<a name="l00404"></a>00404   <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
<a name="l00405"></a>00405   <span class="comment">// indicators</span>
<a name="l00406"></a>00406    successfulInsertion = <span class="keyword">false</span>;
<a name="l00407"></a>00407    
<a name="l00408"></a>00408   <span class="comment">// Put the data from the container into the histogram  </span>
<a name="l00409"></a>00409   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal(pavingBox);
<a name="l00410"></a>00410   <span class="keywordtype">int</span> holdOutCount = int(n*0.3);
<a name="l00411"></a>00411   <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   
<a name="l00412"></a>00412   successfulInsertion = myHistVal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00413"></a>00413   cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
<a name="l00414"></a>00414       &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
<a name="l00415"></a>00415 
<a name="l00416"></a>00416   <span class="comment">//containers for output needed</span>
<a name="l00417"></a>00417   vector&lt;real&gt; IAEV;
<a name="l00418"></a>00418   vector&lt;int&gt; NumLeafNodesV;
<a name="l00419"></a>00419   vector&lt;double&gt; TotalVarDistV;
<a name="l00420"></a>00420   vector&lt;double&gt; CoverageV;
<a name="l00421"></a>00421   vector&lt;AdaptiveHistogramValidation&gt; HistsKept;
<a name="l00422"></a>00422   
<a name="l00423"></a>00423   <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
<a name="l00424"></a>00424     <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
<a name="l00425"></a>00425     <span class="keywordtype">int</span> finalK = 1;
<a name="l00426"></a>00426     <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);
<a name="l00427"></a>00427 
<a name="l00428"></a>00428     <span class="comment">//start the hold out estimation</span>
<a name="l00429"></a>00429     <span class="comment">//with stopping criteria</span>
<a name="l00430"></a>00430     <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>;
<a name="l00431"></a>00431     cout &lt;&lt; <span class="stringliteral">&quot;------Running MDEAll with stopping criteria-----------&quot;</span> &lt;&lt; endl;
<a name="l00432"></a>00432     <span class="keywordtype">int</span> method = 2; <span class="comment">// MDE</span>
<a name="l00433"></a>00433 
<a name="l00434"></a>00434     <span class="comment">//maximum number of leaf nodes allowed </span>
<a name="l00435"></a>00435     <span class="keywordtype">int</span> trainCount = n-holdOutCount;
<a name="l00436"></a>00436     <span class="keywordtype">size_t</span> maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     clock_t start, end;
<a name="l00439"></a>00439     start = clock();
<a name="l00440"></a>00440     successfulPQSplit = myHistVal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
<a name="l00441"></a>00441                            0, 0.0, stopCrit, myPart, method, simNum, 
<a name="l00442"></a>00442                            maxLeafNodes, maxCheck, HistsKept);
<a name="l00443"></a>00443       end = clock();  
<a name="l00444"></a>00444     timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00445"></a>00445     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00446"></a>00446     
<a name="l00447"></a>00447     <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00448"></a>00448       <span class="comment">// get the final histograms</span>
<a name="l00449"></a>00449       vector&lt;AdaptiveHistogramValidation&gt;::iterator it;
<a name="l00450"></a>00450       <span class="keywordflow">for</span> (it = HistsKept.begin(); it &lt; HistsKept.end(); it++) {
<a name="l00451"></a>00451         <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l00452"></a>00452         <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> leavesIt;
<a name="l00453"></a>00453         ((*it).getSubPaving())-&gt;getLeaves(leaves);
<a name="l00454"></a>00454 
<a name="l00455"></a>00455         <span class="comment">//get the IAE</span>
<a name="l00456"></a>00456         IAEV.push_back((*it).getUnifIAE(myPart));
<a name="l00457"></a>00457 
<a name="l00458"></a>00458         <span class="comment">//get the number of leaves</span>
<a name="l00459"></a>00459         NumLeafNodesV.push_back(leaves.size());
<a name="l00460"></a>00460         <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l00461"></a>00461         <span class="comment">//cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>
<a name="l00462"></a>00462 
<a name="l00463"></a>00463         <span class="comment">//initialize the coverage</span>
<a name="l00464"></a>00464         <span class="keywordtype">size_t</span> yesCovOne = 0;
<a name="l00465"></a>00465         
<a name="l00466"></a>00466         <span class="comment">//initialize the total variation distance</span>
<a name="l00467"></a>00467         <span class="keywordtype">double</span> totalVarDist = 0.0;
<a name="l00468"></a>00468 
<a name="l00469"></a>00469         <span class="comment">//iterate through the leaf nodes</span>
<a name="l00470"></a>00470         <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l00471"></a>00471           <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l00472"></a>00472                <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/(n-holdOutCount);
<a name="l00473"></a>00473                <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00474"></a>00474                <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l00475"></a>00475           totalVarDist += diffMu;
<a name="l00476"></a>00476           <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00477"></a>00477           <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00478"></a>00478           <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00479"></a>00479           
<a name="l00480"></a>00480           <span class="comment">//get the 95% coverage</span>
<a name="l00481"></a>00481           <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00482"></a>00482           <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00483"></a>00483 
<a name="l00484"></a>00484           <span class="comment">// get lower and upper bounds</span>
<a name="l00485"></a>00485           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
<a name="l00486"></a>00486           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
<a name="l00487"></a>00487 
<a name="l00488"></a>00488           <span class="comment">//get the true density of the uniform mixture</span>
<a name="l00489"></a>00489           <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 0;
<a name="l00490"></a>00490           <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l00491"></a>00491             <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l00492"></a>00492               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00493"></a>00493             } <span class="comment">//end of if this box is in trueBox</span>
<a name="l00494"></a>00494             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
<a name="l00495"></a>00495               f = weight/((*trueIt)-&gt;nodeVolume());
<a name="l00496"></a>00496             } <span class="comment">//end of if trueBox is in this box</span>
<a name="l00497"></a>00497           } <span class="comment">// end of going through all trueBoxes</span>
<a name="l00498"></a>00498           
<a name="l00499"></a>00499           <span class="comment">// see SAGE worksheet for this</span>
<a name="l00500"></a>00500           <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}
<a name="l00501"></a>00501         } <span class="comment">// end of iterating through the leaves</span>
<a name="l00502"></a>00502 
<a name="l00503"></a>00503         <span class="comment">//keep the total variation distance</span>
<a name="l00504"></a>00504         TotalVarDistV.push_back(totalVarDist);
<a name="l00505"></a>00505 
<a name="l00506"></a>00506         <span class="comment">//keep the coverage</span>
<a name="l00507"></a>00507         <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00508"></a>00508         <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00509"></a>00509         CoverageV.push_back(yesCovOne*1.0/(leaves.size()*1.0));
<a name="l00510"></a>00510       } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
<a name="l00511"></a>00511     } <span class="comment">// end of successfulPQSplit</span>
<a name="l00512"></a>00512   } <span class="comment">// end of successfulInsertion</span>
<a name="l00513"></a>00513 
<a name="l00514"></a>00514   <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
<a name="l00515"></a>00515     <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00516"></a>00516     std::ostringstream stm;
<a name="l00517"></a>00517     stm &lt;&lt; simNum;
<a name="l00518"></a>00518     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifMDEPQOutput&quot;</span>;
<a name="l00519"></a>00519     PQFileName += stm.str();
<a name="l00520"></a>00520     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00521"></a>00521     oss.open(PQFileName.c_str());
<a name="l00522"></a>00522     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageV.size(); i++) {
<a name="l00523"></a>00523       oss &lt;&lt; IAEV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00524"></a>00524       oss &lt;&lt; NumLeafNodesV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00525"></a>00525       oss &lt;&lt; TotalVarDistV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00526"></a>00526       oss &lt;&lt; CoverageV[i] &lt;&lt; endl;
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528     oss &lt;&lt; timing &lt;&lt; endl;
<a name="l00529"></a>00529     oss &lt;&lt; flush;
<a name="l00530"></a>00530     oss.close();
<a name="l00531"></a>00531     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00532"></a>00532         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00533"></a>00533   }
<a name="l00534"></a>00534 <span class="comment">//====================end of MDE===================================//</span>
<a name="l00535"></a>00535 
<a name="l00536"></a>00536 <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00537"></a>00537    
<a name="l00538"></a>00538    <span class="keywordflow">if</span> ( d== 1 ) {
<a name="l00539"></a>00539    cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
<a name="l00540"></a>00540    
<a name="l00541"></a>00541    vector&lt;real&gt; regHistIAE;
<a name="l00542"></a>00542    vector&lt;int&gt; nBins;
<a name="l00543"></a>00543    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00544"></a>00544     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00545"></a>00545     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00546"></a>00546     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, theData, pavingBox, bw);
<a name="l00547"></a>00547     nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00548"></a>00548     regHistIAE.push_back(<a class="code" href="errorfunc_8cpp.shtml#a63593212e4bbb8cbe660d8bf3209f4b4">getRegHistUnifIAE</a>(myRegHist, myPart, n, weight));
<a name="l00549"></a>00549   }
<a name="l00550"></a>00550 
<a name="l00551"></a>00551   <span class="comment">//output IAE to .txt file------------------</span>
<a name="l00552"></a>00552   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00553"></a>00553   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00554"></a>00554   os.precision(5);
<a name="l00555"></a>00555 
<a name="l00556"></a>00556   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00557"></a>00557   outputFileName = <span class="stringliteral">&quot;UnifIAERegHist&quot;</span>;
<a name="l00558"></a>00558   outputFileName += stm.str();
<a name="l00559"></a>00559   outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00560"></a>00560   os.open(outputFileName.c_str());
<a name="l00561"></a>00561   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00562"></a>00562     os &lt;&lt; regHistIAE[bw] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[bw] &lt;&lt; endl;
<a name="l00563"></a>00563   }
<a name="l00564"></a>00564   os &lt;&lt; flush;
<a name="l00565"></a>00565   os.close();
<a name="l00566"></a>00566   
<a name="l00567"></a>00567   std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00568"></a>00568   }
<a name="l00569"></a>00569   
<a name="l00570"></a>00570   <span class="keywordflow">return</span> 0;
<a name="l00571"></a>00571 } <span class="comment">// end of uniform mixture test program</span>
<a name="l00572"></a>00572 
<a name="l00573"></a>00573 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="UniformMixture_8cpp.shtml">UniformMixture.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
