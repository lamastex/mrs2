<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: rangecollection_hist.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('rangecollection__hist_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">rangecollection_hist.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="rangecollection__hist_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009, 2010, 2011 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file     </span>
<a name="l00023"></a>00023 <span class="comment">\brief RangeCollectionHist declarations</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef __RANGECOLLECTION_HIST_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define __RANGECOLLECTION_HIST_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="sptypes_8hpp.shtml" title="Includes and general typedefs for subpavings.">sptypes.hpp</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="cxsc_8hpp.shtml">cxsc.hpp</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035     
<a name="l00036"></a>00036 
<a name="l00047"></a>00047 <span class="comment">// implementation of RangeCollections for Histograms using vector for container</span>
<a name="l00048"></a>00048 <span class="keyword">namespace </span>subpavings {
<a name="l00049"></a>00049   
<a name="l00050"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">00050</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> {
<a name="l00051"></a>00051     
<a name="l00052"></a>00052         <span class="keyword">public</span>:
<a name="l00053"></a>00053     
<a name="l00056"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a6a5e1b431a3cf779ca098ca63e2cff3b">00056</a>       <span class="keyword">typedef</span> cxsc::real  <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a6a5e1b431a3cf779ca098ca63e2cff3b" title="Definition for the type for the values accessible from a rangeCollection.">RangeCollectionHistValueType</a>;
<a name="l00057"></a>00057       
<a name="l00060"></a>00060       <span class="keyword">typedef</span> std::vector &lt; RangeCollectionHistValueType &gt;::const_iterator 
<a name="l00061"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a65d6a1cb899b673b28913a7dfb572476">00061</a>                   <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a65d6a1cb899b673b28913a7dfb572476" title="Definition for the type for iterating through the values in a rangeCollection.">RangeCollectionHistItr</a>;
<a name="l00062"></a>00062 
<a name="l00064"></a>00064       <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1798364905b4d4db8aa0ffa922dbc169" title="No-argument constructor.">RangeCollectionHist</a>();
<a name="l00065"></a>00065 
<a name="l00068"></a>00068       <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1798364905b4d4db8aa0ffa922dbc169" title="No-argument constructor.">RangeCollectionHist</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; range);
<a name="l00069"></a>00069 
<a name="l00072"></a>00072       <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1798364905b4d4db8aa0ffa922dbc169" title="No-argument constructor.">RangeCollectionHist</a>(<span class="keyword">const</span> cxsc::real&amp; r);
<a name="l00073"></a>00073 
<a name="l00075"></a>00075       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1798364905b4d4db8aa0ffa922dbc169" title="No-argument constructor.">RangeCollectionHist</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; other);
<a name="l00076"></a>00076       
<a name="l00077"></a>00077       
<a name="l00079"></a>00079       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ad06f912d9345fb484445d352e2bb7348" title="Copy assignment operator.">operator=</a>(<a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> rhs);
<a name="l00080"></a>00080 
<a name="l00092"></a>00092       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a65d6a1cb899b673b28913a7dfb572476" title="Definition for the type for iterating through the values in a rangeCollection.">RangeCollectionHistItr</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#adbd68fcd7515aeb084af67cbe946e162" title="Return an iterator to the start of the collection.">begin</a>() <span class="keyword">const</span>;
<a name="l00093"></a>00093       
<a name="l00095"></a>00095       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a65d6a1cb899b673b28913a7dfb572476" title="Definition for the type for iterating through the values in a rangeCollection.">RangeCollectionHistItr</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ab19aefc62a7559964b43e24f352063e3" title="Return an iterator to the end of the collection.">end</a>() <span class="keyword">const</span>;
<a name="l00096"></a>00096 
<a name="l00100"></a>00100       std::size_t <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1d771d4ec07fd09a078615c599dbd81c" title="Get the size of this.">getSize</a>() <span class="keyword">const</span>;
<a name="l00101"></a>00101 
<a name="l00105"></a>00105       <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a49d8516732a4d2d4e7a5863a502c0fda" title="Get whether the rangeCollection is empty.">isEmpty</a>() <span class="keyword">const</span>;
<a name="l00106"></a>00106       
<a name="l00109"></a>00109       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#abf9c11987119de78dce7b2ebf0c9b17a" title="Get a copy of the elements of this as a collection of reals.">getRangeCollectionValues</a>() <span class="keyword">const</span>;
<a name="l00110"></a>00110       
<a name="l00112"></a>00112       cxsc::real <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#aaee124fc1435e538fc2bb8c799032c2c" title="Get the total of all the elements in this.">getTotal</a>() <span class="keyword">const</span>;
<a name="l00113"></a>00113       
<a name="l00116"></a>00116       cxsc::real <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a551fea530035f92f3a9824d107f7079f" title="Get the total of the absolute values of all the elements in this.">getAbsTotal</a>() <span class="keyword">const</span>;
<a name="l00117"></a>00117 
<a name="l00121"></a>00121       cxsc::real <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#adb2636c4eb438e5ebbb7cd8be9088af8" title="Get the average of all the elements in this.">getAverageValue</a>() <span class="keyword">const</span>;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123       
<a name="l00128"></a>00128       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a3829de1bc59ceff1c9ed143cb05168c2" title="Make a rangeCollection containing just the average of this.">makeAverageRangeCollection</a>() <span class="keyword">const</span>;
<a name="l00129"></a>00129       
<a name="l00134"></a>00134       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#af042b4b68c09ac3b54bcb1abdd51f78c" title="Make a rangeCollection containing the absolute differences of each element to their average...">getAbsDiffsToAverageRangeCollection</a>() <span class="keyword">const</span>;
<a name="l00135"></a>00135       
<a name="l00138"></a>00138       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a7a23ebb0badaa26845d97bfdb3a26dc2" title="Reduce the rangeCollection to the sum of the present values.">reduce</a>();
<a name="l00139"></a>00139       
<a name="l00145"></a>00145       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a64e08d8b81255e1fb66fa7f9042f41dd" title="Add another the rangeCollection to this so that each element += parallel element in rhs...">parallelAdd</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; rhs);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00150"></a>00150       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#adb1fdd14f7484a22e77a7ceb65b4c8a1" title="Append the contents of another rangeCollection to this.">operator+=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; rhs);
<a name="l00151"></a>00151       
<a name="l00154"></a>00154       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a933eb6a39c07b990b5e734f2354e0300" title="Get the results of appending the contents of another rangeCollection to this.">operator+</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00155"></a>00155       
<a name="l00157"></a>00157       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#afc613e3d9ea05a796ad256b911b91145" title="Multiply every element in this by mult.">operator*=</a>(<span class="keyword">const</span> cxsc::real&amp; mult);
<a name="l00158"></a>00158       
<a name="l00160"></a>00160       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ac6d582db5cdec2575db1a91c70fa7aaa" title="Get the results of multipling every element in this by mult.">operator*</a>(<span class="keyword">const</span> cxsc::real&amp; mult) <span class="keyword">const</span>;
<a name="l00161"></a>00161       
<a name="l00165"></a>00165       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a>&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1fef83c6e3cd8095ceaced044990612c" title="Divide every element in this by div.">operator/=</a>(<span class="keyword">const</span> cxsc::real&amp; div);
<a name="l00166"></a>00166       
<a name="l00170"></a>00170       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a93a520db202a1032ec1e1b02014c10a8" title="Get the results of dividing every element in this by div.">operator/</a>(<span class="keyword">const</span> cxsc::real&amp; div) <span class="keyword">const</span>;
<a name="l00171"></a>00171 
<a name="l00173"></a>00173       <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ae8047b013a97315564303752a329ff45" title="Get whether the values in this are all positive.">checkRangeCollectionAllPositive</a>() <span class="keyword">const</span>;
<a name="l00174"></a>00174       
<a name="l00181"></a>00181       std::ostream&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ac34a42f1ad337dc961cda4386bcefd99">outputTabs</a>(std::ostream &amp;os,
<a name="l00182"></a>00182                     <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00183"></a>00183       std::ostream&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ac34a42f1ad337dc961cda4386bcefd99">outputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00185"></a>00185       
<a name="l00191"></a>00191       std::ostream&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1c9864fdfb7362224f3842631d8ce9b7">outputAverage</a>(std::ostream &amp;os,
<a name="l00192"></a>00192                     <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00193"></a>00193       std::ostream&amp; <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a1c9864fdfb7362224f3842631d8ce9b7">outputAverage</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00195"></a>00195       
<a name="l00197"></a>00197       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a265fa98459a9c678e980d111922bfddd" title="Swap the contents of this and other.">swap</a>(<a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">RangeCollectionHist</a> &amp;other);
<a name="l00198"></a>00198       
<a name="l00199"></a>00199       
<a name="l00200"></a>00200     <span class="keyword">private</span>:
<a name="l00201"></a>00201       
<a name="l00202"></a>00202       <span class="keyword">typedef</span> cxsc::real 
<a name="l00203"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a48c339f8bcabae3f0ecd9a0b08211e54">00203</a>                   <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a48c339f8bcabae3f0ecd9a0b08211e54">RangeCollectionHistPrivateValueType</a>;
<a name="l00204"></a>00204       <span class="keyword">typedef</span> std::vector&lt;RangeCollectionHistPrivateValueType&gt; 
<a name="l00205"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ab3b0321ac69a063bda1c70cdb9bf00ec">00205</a>                   <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ab3b0321ac69a063bda1c70cdb9bf00ec">RangeCollectionHistPrivateType</a>;
<a name="l00206"></a>00206       <span class="keyword">typedef</span> RangeCollectionHistPrivateType::iterator 
<a name="l00207"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a6e8c17437030654fc20d5d341897e806">00207</a>                   <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#a6e8c17437030654fc20d5d341897e806">RangeCollectionHistPrivateTypeItr</a>;
<a name="l00208"></a>00208       <span class="keyword">typedef</span> RangeCollectionHistPrivateType::const_iterator 
<a name="l00209"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#acb2f5e2dbcc99b2efcb6bb62f010574e">00209</a>                   <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#acb2f5e2dbcc99b2efcb6bb62f010574e">RangeCollectionHistPrivateTypeConstItr</a>;
<a name="l00210"></a>00210 
<a name="l00211"></a><a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#aba0b943c3580d4ded0a82270589c3df3">00211</a>             <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#ab3b0321ac69a063bda1c70cdb9bf00ec">RangeCollectionHistPrivateType</a> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#aba0b943c3580d4ded0a82270589c3df3">container</a>;
<a name="l00212"></a>00212       
<a name="l00213"></a>00213 
<a name="l00214"></a>00214       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml#aca4bb8b2394285f14ec9af829f55d5c9">scalarMult</a>(<span class="keyword">const</span> cxsc::real&amp; mult);
<a name="l00215"></a>00215       
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     }; <span class="comment">// end class RangeCollectionHist</span>
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 } <span class="comment">// end namespace subpavings</span>
<a name="l00221"></a>00221 
<a name="l00223"></a>00223 <span class="keyword">namespace </span>std
<a name="l00224"></a>00224 {
<a name="l00225"></a>00225   <span class="keyword">template</span> &lt;&gt;
<a name="l00226"></a>00226   <span class="keywordtype">void</span> swap(<a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">subpavings::RangeCollectionHist</a> &amp; rh1, 
<a name="l00227"></a>00227       <a class="code" href="classsubpavings_1_1RangeCollectionHist.shtml">subpavings::RangeCollectionHist</a> &amp; rh2); <span class="comment">// throw ()</span>
<a name="l00228"></a>00228   
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="rangecollection__hist_8hpp.shtml">rangecollection_hist.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
