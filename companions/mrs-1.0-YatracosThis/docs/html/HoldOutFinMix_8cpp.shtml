<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOutFinMix.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOutFinMix_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">HoldOutFinMix.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_cdf.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_integration.h&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;cmath&gt;</code><br/>
<code>#include &lt;boost/math/distributions/normal.hpp&gt;</code><br/>
</div>
<p><a href="HoldOutFinMix_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structFinMix.shtml">FinMix</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a9021606bd7e0ccdbdb204b596e265de0">FinMixPDF</a> (double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#ae8fb9bc2f15455a39056110b8d4032d4">FinMixCDF</a> (double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> (double, void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> (double, void *)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#ab91f1fa7223911ea415a2637eadb6a26">FinMixAbs</a> (double, void *)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the absolute error of a finite mixture at x.  <a href="#ab91f1fa7223911ea415a2637eadb6a26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a> (double, double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#ac799088b059b39fe7ba90b2baeaf0208">dpFinMixIAEBoun</a> (double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#aba38dacd61404f7db380eda000e40dc9">cout&lt;&lt; &quot;Number of histograms collated: &quot;&lt;&lt; collMin.getNumberCollated()&lt;&lt; endl;string accumFileName;accumFileName=&quot;AccumFinMix.txt&quot;;collMin.outputAccumulationToTxtTabs(accumFileName);string avgfileName=&quot;AverageFinMix.txt&quot;;collMin.outputAverageToTxtTabs(avgfileName);cout&lt;&lt; &quot;\n Averaging the histograms&quot;&lt;&lt; endl;clock_t start, end;start=clock();coll.makeAverage();end=clock();double timing;timing=((static_cast&lt; double &gt;</a> (end-start))/CLOCKS_PER_SEC)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a30a5b87d0ad92ec2ac4720f718cfbe4c">while</a> (!infile1.eof())</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a18f47afd7369146e7242725a3a3ff780">pop_back</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a0519e162e1c41359fb8bd66c112e41fb">for</a> (int c=0;c&lt; xlowA.size();c++)</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cout&lt;&lt; &quot;Computing time : &quot;<br class="typebreak"/>
&lt;&lt; timing&lt;&lt; &quot; s.&quot;&lt;&lt; endl;timeVec.push_back(timing);ifstream <br class="typebreak"/>
infile1(accumFileName.c_str());string <br class="typebreak"/>
chAv;double volAv;double <br class="typebreak"/>
countsAv;double xlowAv;double <br class="typebreak"/>
xuppAv;vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; ivector &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a> = 0.0</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">dotprecision&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> = countsA.size()</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="aba38dacd61404f7db380eda000e40dc9"></a><!-- doxytag: member="HoldOutFinMix.cpp::cout&lt;&lt; &quot;Number of histograms collated: &quot;&lt;&lt; collMin.getNumberCollated()&lt;&lt; endl;string accumFileName;accumFileName=&quot;AccumFinMix.txt&quot;;collMin.outputAccumulationToTxtTabs(accumFileName);string avgfileName=&quot;AverageFinMix.txt&quot;;collMin.outputAverageToTxtTabs(avgfileName);cout&lt;&lt; &quot;\n Averaging the histograms&quot;&lt;&lt; endl;clock_t start, end;start=clock();coll.makeAverage();end=clock();double timing;timing=((static_cast&lt; double &gt;" ref="aba38dacd61404f7db380eda000e40dc9" args="(end&#45;start))/CLOCKS_PER_SEC)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cout&lt;&lt; &quot;Number of histograms collated: &quot;&lt;&lt; collMin.getNumberCollated()&lt;&lt; endl;string accumFileName;accumFileName=&quot;AccumFinMix.txt&quot;;collMin.outputAccumulationToTxtTabs(accumFileName);string avgfileName=&quot;AverageFinMix.txt&quot;;collMin.outputAverageToTxtTabs(avgfileName);cout&lt;&lt; &quot;\n Averaging the histograms&quot;&lt;&lt; endl;clock_t start, end;start=clock();coll.makeAverage();end=clock();double timing;timing=((static_cast&lt; double &gt; </td>
          <td>(</td>
          <td class="paramtype">end-&#160;</td>
          <td class="paramname"><em>start</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a416f731e5ce582c3e5c503b5c2aae7b3"></a><!-- doxytag: member="HoldOutFinMix.cpp::dpFinMixIAE" ref="a416f731e5ce582c3e5c503b5c2aae7b3" args="(double, double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dotprecision <a class="el" href="HoldOutFinMix_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">477</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">dpFinMixIAE()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00477">dpFinMixIAE()</a>.</p>
<div class="fragment"><pre class="fragment">{
dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
dpFinMixIAE = 0.0;
<span class="keywordtype">double</span> result = 0.0;

<span class="comment">//accumulate(dpFinMixIAE, result, 1.0);</span>


<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac799088b059b39fe7ba90b2baeaf0208"></a><!-- doxytag: member="HoldOutFinMix.cpp::dpFinMixIAEBoun" ref="ac799088b059b39fe7ba90b2baeaf0208" args="(double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dotprecision <a class="el" href="HoldOutFinMix_8cpp.shtml#ac799088b059b39fe7ba90b2baeaf0208">dpFinMixIAEBoun</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00490">490</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>.</p>
<div class="fragment"><pre class="fragment">{
dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
dpFinMixIAEBoun = 0.0;
<span class="keywordtype">double</span> Ncomp = W.size();
<span class="keywordtype">double</span> cdfLeft = 0.0;
<span class="keywordtype">double</span> cdfRight = 0.0;
<span class="keywordtype">int</span> c;

<span class="keywordflow">for</span> (c=0; c &lt; Ncomp; c++)
{
normal component(M[c], S[c]);
cdfLeft += W[c]*(cdf(component, x1));
cdfRight += 1-W[c]*(cdf(component, x2));
}

accumulate(dpFinMixIAEBoun, cdfLeft, 1.0);
accumulate(dpFinMixIAEBoun, cdfRight, 1.0);

<span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab91f1fa7223911ea415a2637eadb6a26"></a><!-- doxytag: member="HoldOutFinMix.cpp::FinMixAbs" ref="ab91f1fa7223911ea415a2637eadb6a26" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ab91f1fa7223911ea415a2637eadb6a26">FinMixAbs</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the absolute error of a finite mixture at x. </p>
<p>Function to get absolute error</p>
<p>get the integrated absolute of a finite mixture of boxes in the root box </p>

<p>Definition at line <a class="el" href="errorfunc_8cpp_source.shtml#l00191">191</a> of file <a class="el" href="errorfunc_8cpp_source.shtml">errorfunc.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8hpp_source.shtml#l00223">FinMix::fhat</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00191">FinMixAbs()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00162">FinMixPDF()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>

<p>Referenced by <a class="el" href="errorfunc_8cpp_source.shtml#l00191">FinMixAbs()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03530">subpavings::AdaptiveHistogramValidation::getFinMixIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03895">subpavings::AdaptiveHistogram::getFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00683">getRegHistFinMixIAE()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00085">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
<a class="code" href="structFinMix.shtml">FinMix</a> mixt = *(<a class="code" href="structFinMix.shtml">FinMix</a> *) params;
<span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a> = fabs(mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> - <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(x, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>));
<span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae8fb9bc2f15455a39056110b8d4032d4"></a><!-- doxytag: member="HoldOutFinMix.cpp::FinMixCDF" ref="ae8fb9bc2f15455a39056110b8d4032d4" args="(double, double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ae8fb9bc2f15455a39056110b8d4032d4">FinMixCDF</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to get CDF </p>

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00447">447</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">double</span> Ncomp = W.size();
<span class="keywordtype">double</span> CDF = 0;
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
{
normal component(M[c], S[c]);
CDF += W[c]*(cdf(component, x2) - cdf(component, x1));
<span class="comment">//cout &lt;&lt; &quot;CDF is: &quot; &lt;&lt; CDF &lt;&lt; endl;</span>
}
<span class="keywordflow">return</span> CDF;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab92e3b135b92374b9442d24e210139ad"></a><!-- doxytag: member="HoldOutFinMix.cpp::FinMixInt1" ref="ab92e3b135b92374b9442d24e210139ad" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">461</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">FinMixInt1()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">FinMixInt1()</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">double</span> sigma = *(<span class="keywordtype">double</span> *) params;
<span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> =<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(x/sigma));
<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb047f418e144a9bc7d15f6bb2515e34"></a><!-- doxytag: member="HoldOutFinMix.cpp::FinMixInt2" ref="afb047f418e144a9bc7d15f6bb2515e34" args="(double, void *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">469</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">FinMixInt2()</a>.</p>

<p>Referenced by <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">FinMixInt2()</a>.</p>
<div class="fragment"><pre class="fragment">{
vector&lt;double&gt; MS = *(vector&lt;double&gt; *) params;
<span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*((x-MS[0])/MS[1] + (x-MS[2])/MS[3]));
<span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9021606bd7e0ccdbdb204b596e265de0"></a><!-- doxytag: member="HoldOutFinMix.cpp::FinMixPDF" ref="a9021606bd7e0ccdbdb204b596e265de0" args="(double, vector&lt; double &gt;, vector&lt; double &gt;, vector&lt; double &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="HoldOutFinMix_8cpp.shtml#a9021606bd7e0ccdbdb204b596e265de0">FinMixPDF</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to get PDF </p>

<p>Definition at line <a class="el" href="CoverageNormal_8cpp_source.shtml#l00422">422</a> of file <a class="el" href="CoverageNormal_8cpp_source.shtml">CoverageNormal.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">int</span> Ncomp = W.size();


<span class="keywordtype">double</span> PDF = 0;
<span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
{
<span class="comment">//transfer to standard normal</span>
<span class="keywordtype">double</span>  z =  (x-M[c])/S[c];
<span class="keywordtype">double</span> term = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((z-M[c])/S[c], 2);
PDF += W[c]*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*term)/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI);
}  
<span class="keywordflow">return</span> PDF;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0519e162e1c41359fb8bd66c112e41fb"></a><!-- doxytag: member="HoldOutFinMix.cpp::for" ref="a0519e162e1c41359fb8bd66c112e41fb" args="(int c=0;c&lt; xlowA.size();c++)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="HoldOutFinMix_8cpp.shtml#a0519e162e1c41359fb8bd66c112e41fb">for</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">489</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>References <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00486">boxesA</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00468">countsA</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00487">fhatA</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00469">xlowA</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00470">xuppA</a>.</p>
<div class="fragment"><pre class="fragment">                                      {
        <span class="comment">// makes boxes into ivector</span>
        ivector box(1);
        box[1] = interval(<a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>[c], <a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>[c]);
        <a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>.push_back(box);
        <span class="comment">// get fhat of each box</span>
        <a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>.push_back(<a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>[c]/collMin.getNumberCollated());
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="HoldOutFinMix.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00077">77</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#af62c725dd362922c15d45983e2d8f6cf">subpavings::checkString()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="namespacesubpavings.shtml#a4160d2d9f357dddf86d43f70c9bb8063">subpavings::countNumbers()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAE</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAEBoun</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01386">F()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00223">FinMix::fhat</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00191">FinMixAbs()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00176">FinMixCDF()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00798">subpavings::AdaptiveHistogramCollator::getNumberCollated()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00503">Nbin</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>, <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">                                {

 <span class="comment">//--------------------generate data---------------------------------------------</span>
  <span class="comment">//-----read in parameters of the mixture to use</span>
  <span class="comment">//user-input Kn and which dataset to use</span>
  <span class="keywordtype">int</span> mix = atoi(argv[1]);
  <span class="keywordtype">int</span> D=atoi(argv[2]);

  <span class="comment">// Read mixture file</span>
  <span class="keywordtype">string</span> mixfileName;
  mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stm1;
  stm1 &lt;&lt; mix;
  mixfileName += stm1.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">//create vectors for Weight, Mean, Sigma</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;
  
  <span class="comment">//read file</span>
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();

  <span class="comment">//get number of components in mixture</span>
  <span class="keywordtype">int</span> Ncomp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
  cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Ncomp &lt;&lt; <span class="stringliteral">&quot; components in mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;

  <span class="comment">// put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;

  <span class="comment">//----------------get data from FinMixGen------------------------------------</span>
  <span class="comment">//create a name for the file of random variates.</span>
  <span class="keywordtype">string</span> samplesfileName;
  samplesfileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
  std::ostringstream stm2;
  stm2 &lt;&lt; D;
  samplesfileName += stm1.str();
  samplesfileName += stm2.str();
  samplesfileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Reading data from file &quot;</span> &lt;&lt; samplesfileName  &lt;&lt; endl;

   <span class="comment">//a container for the data</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;
    <span class="comment">// we can read rvectors as strings in c-xsc format and then convert to rvectors with c-xsc::&gt;&gt;</span>
    <span class="comment">//set up the file and read input line by line</span>
    <span class="comment">// we need to convert the string argument to a c-string for ifstream</span>
        ifstream samplesfileName(s.c_str());
        <span class="keywordtype">int</span> dim = 0; <span class="comment">// dimensions, to be assessed from the file</span>
        <span class="keywordtype">int</span> howMany = 0; <span class="comment">// how many datapoints, to be read from file</span>

        <span class="keywordtype">string</span> line;

        <span class="keywordflow">if</span> (dataFile.is_open())
        {
            getline (dataFile,line); <span class="comment">// get the first line from the file</span>

            <span class="keywordflow">if</span>(line.empty()) { <span class="comment">// if no characters extracted</span>
                std::cout
                    &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt: &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;nothing in input file&quot;</span> &lt;&lt; std::endl;
                dataFile.close();
                cancontinue = <span class="keyword">false</span>;
            }

        }

        <span class="keywordflow">else</span> { <span class="comment">// dataFile not open</span>
            std::cout &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt.&quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;Unable to open file&quot;</span> &lt;&lt; std::endl;
            cancontinue = <span class="keyword">false</span>;
        }

        <span class="keywordflow">if</span> (cancontinue) {

            <span class="comment">//  find the number of blocks of numbers with decimal points</span>
            <span class="comment">// countNumbers will return 0 if the line contains illegal</span>
            <span class="comment">// characters or any number is missing its decimal point</span>

            dim = <a class="code" href="namespacesubpavings.shtml#a4160d2d9f357dddf86d43f70c9bb8063" title="Find the number of &#39;blocks&#39; of numbers in a properly formatted string of numbers.">countNumbers</a>(line);
            <span class="keywordflow">while</span> (dim == 0 &amp;&amp; dataFile.good()) { <span class="comment">// problem try next line</span>
                getline(dataFile, line);
                dim = <a class="code" href="namespacesubpavings.shtml#a4160d2d9f357dddf86d43f70c9bb8063" title="Find the number of &#39;blocks&#39; of numbers in a properly formatted string of numbers.">countNumbers</a>(line);
            }

            <span class="keywordflow">if</span> (dim == 0) {     <span class="comment">// failed to find a valid line</span>
                std::cout &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt: &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;all lines of input file contain illegal &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;formatting&quot;</span> &lt;&lt; std::endl;
                dataFile.close();
                cancontinue = <span class="keyword">false</span>;
            }

            <span class="comment">// dim now becomes the number of dimensions we expect</span>
        }

        <span class="comment">// if there is already data, check dimensions match</span>
        <span class="keywordflow">if</span> (cancontinue &amp;&amp; !theData.empty()) {

            <span class="comment">//find the data dimensions from the first datapoint</span>
            <span class="keywordtype">int</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theData.begin()) -
                <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theData.begin()) + 1;
            <span class="keywordflow">if</span> (dim != dataDim) {
                std::cout
                    &lt;&lt; <span class="stringliteral">&quot;Existing data different &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;dimension to data to be read in &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;- aborting read&quot;</span>
                    &lt;&lt; std::endl;
                dataFile.close();
                cancontinue = <span class="keyword">false</span>;
            }
        }

        <span class="keywordflow">if</span> (cancontinue) {

            dataFile.clear(); <span class="comment">// reset the flags on the file</span>
            dataFile.seekg(0, ios::beg); <span class="comment">// and put file pointer to start</span>

            rvector r(dim);

            <span class="comment">// count the lines in the file</span>
            <span class="keywordflow">while</span> (dataFile.good() )
            {
                getline (dataFile,line);
                howMany++;  <span class="comment">// count number of lines in the file</span>
            }

            theData.reserve(howMany);

            dataFile.clear(); <span class="comment">// reset the flags on the file</span>
            dataFile.seekg(0, ios::beg); <span class="comment">// and put file pointer to start</span>

            <span class="keywordtype">int</span> countIn = 0;
            <span class="keywordtype">int</span> countLines = 0;

            <span class="keywordflow">while</span> (dataFile.good() )
            {
                <span class="comment">// get from the file line by line</span>
                getline (dataFile, line);
                countLines++;


                <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#af62c725dd362922c15d45983e2d8f6cf" title="A quick check on a data string: expecting only numbers white space or decimal points.">checkString</a>(line, dim)) { <span class="comment">// quick validity check</span>

                    <span class="comment">// could replace all this by checking if sin is true (good)</span>
                    <span class="comment">// since it will not be if failed to convert input to r</span>
                    <span class="comment">// but should check this before implementing</span>

                    <span class="comment">// convert to an istream type</span>
                    istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line);
                    <span class="comment">// c-xsc can convert this to an rvector</span>
                    <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; r;
                    <span class="comment">// put r into the container</span>
                    theData.push_back(r);
                    countIn++;
                }
                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (line != <span class="stringliteral">&quot;&quot;</span>) {  <span class="comment">// invalid line, spit out</span>
                    std::cout &lt;&lt; <span class="stringliteral">&quot;Error in data input file, &quot;</span>
                        &lt;&lt; <span class="stringliteral">&quot;ignored line &quot;</span> &lt;&lt; countLines
                        &lt;&lt; <span class="stringliteral">&quot;.  Data ignored is:  &quot;</span>
                        &lt;&lt; line &lt;&lt; std::endl;
                    <span class="comment">// better make this output to an input error</span>
                    <span class="comment">//log txt file?</span>
                }
            }
            dataFile.close();

            <span class="comment">// confirm the amount of data read in</span>
            std::cout &lt;&lt; <span class="stringliteral">&quot;End of reading data input file: &quot;</span>
                &lt;&lt; countIn &lt;&lt; <span class="stringliteral">&quot; valid data points read in&quot;</span>
                &lt;&lt; std::endl;

            <span class="keywordflow">if</span> (countIn &gt; 0) retValue = <span class="keyword">true</span>; <span class="comment">// some data successfully read in</span>
        }
   
   
   
   
   


   <span class="comment">//--------------start priorityStageSplit-----------------------------------</span>
    <span class="comment">//make an Adaptive Histogram object with a specified box</span>
    ivector pavingBox(1);
    interval dim(-10,10);
    pavingBox[1] = dim;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
  
    <span class="comment">//maximum number of points in each leaf box        </span>
    <span class="keywordtype">int</span> finalK = 2;
    <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(finalK);
    <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
       
   <span class="comment">// now split with priority queue</span>
   <span class="comment">// Stopping Criteria: critCount</span>
    <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
    <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
    cout &lt;&lt; <span class="stringliteral">&quot;Max k is &quot;</span> &lt;&lt; finalK &lt;&lt; endl; 
    cout &lt;&lt; <span class="stringliteral">&quot;Performing hold-out estimation: &quot;</span> &lt;&lt; endl;
   
   <span class="comment">// put the data from the container into the histogram</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Put data into the histogram&quot;</span> &lt;&lt; endl;
   
   <span class="comment">// indicators</span>
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
  
   <span class="comment">//number of points to be hold out is by brute force at the moment. Consider putting in as argument.</span>
    successfulInsertion = myHist.insertFromRVecForHoldOut(theData, sn, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    <span class="comment">//successfulInsertion = myHist.insertFromRVecForHoldOut(theData, splitK, NOLOG);</span>
 
  <span class="comment">// optional output for number of leaves</span>
    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
  <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
  myHist.getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
  <span class="comment">// container is filled by reading leaves off tree from left to right</span>
  <span class="comment">// a container for the counts</span>
  <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
                            <span class="comment">// the iterator is typedefed as IntVecItr</span>
          <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
        <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
            <span class="comment">// get the counts in all the leaves</span>
        cout &lt;&lt; <span class="stringliteral">&quot;Counter \t VCounter\n&quot;</span> &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; (*it)-&gt;getVcounter() &lt;&lt; endl;
      }
   <span class="comment">// end of optional output</span>
   
   <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
       <span class="comment">//create an AdaptiveHistogramCollator object</span>
       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
    
       <span class="comment">//start the clock</span>
       clock_t start, end;
       start = clock();
       
       <span class="comment">//start the hold out estimation</span>
       coll=myHist.priorityStageSplit(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0, 0.0);

       <span class="comment">//output time taken</span>
       end = clock();
       <span class="keywordtype">double</span> timing;
       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
 
      <span class="comment">//cout &lt;&lt; coll &lt;&lt; endl;</span>
      <span class="keywordtype">int</span> numberCollated = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();
      cout &lt;&lt; numberCollated &lt;&lt; <span class="stringliteral">&quot; histograms collated.&quot;</span> &lt;&lt; endl;
      <span class="comment">//output the collator to a .txt file</span>
      <span class="comment">//coll.outputToTxtTabs(&quot;TestHold.txt&quot;); </span>
    } <span class="comment">// end of successful insertion</span>
   
   
  
        <span class="comment">//-----get IAE of this histogram</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
        myHist.getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
        <span class="comment">// container is filled by reading leaves off tree from left to right</span>

        <span class="comment">// a container for the counts</span>
        <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
                            <span class="comment">// the iterator is typedefed as IntVecItr</span>
        <span class="comment">// a container for the boxes</span>
        vector&lt;ivector&gt; boxes;
        vector&lt;ivector&gt;::iterator itBoxes;
        <span class="comment">// a container for the volumes</span>
        vector&lt;double&gt; volumes;
       <span class="comment">// a valarray container for the node levels, sized to fit</span>
        valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.getSubPaving()));
       <span class="comment">// a container for fhat</span>
       vector&lt;double&gt; fhat;
       vector&lt;double&gt;::iterator itFhat;
       <span class="comment">// a container for Fstar</span>
       vector&lt;double&gt; Fstar;

       <span class="keywordtype">double</span> diffMu = 0;

       <span class="keywordtype">int</span> v=0;
       <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
  <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
  <span class="comment">// get the counts in all the leaves</span>
  counts.push_back((*it)-&gt;getCounter());
  <span class="comment">// get the boxes from all the leaves</span>
  boxes.push_back((*it)-&gt;getBox());
  <span class="comment">// get the volumes of all the leaves</span>
  volumes.push_back((*it)-&gt;nodeVolume());
  <span class="comment">// get the levels of the leaves</span>
  levels[v] = (*it)-&gt;getNodeDepth();
  <span class="comment">// get fhat for all leaves</span>
  fhat.push_back(((*it)-&gt;getCounter())/((*it)-&gt;nodeVolume())/n);
                v++;

        rvector xuppVec = Sup((*it)-&gt;getBox());
        <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
        rvector xlowVec = Inf((*it)-&gt;getBox());
        <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
        <span class="keywordtype">double</span> CDF=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
        Fstar.push_back(CDF);
        } <span class="comment">// end of looping through leaves</span>

<span class="comment">//get IAE</span>
dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
dpIAE = 0.0;

<span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Nbin &lt;&lt; <span class="stringliteral">&quot; leaves in histogram &quot;</span> &lt;&lt; D &lt;&lt; endl;

gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<span class="keywordtype">double</span> result = 0.0;
<span class="keywordtype">double</span> error;
gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
F.params =  &amp;mixt;

<span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; k++){
<span class="comment">//  cout &lt;&lt; &quot;calculating error for bin &quot; &lt;&lt; j+1 &lt;&lt; endl;</span>
  mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[k];
  rvector xuppVec = Sup(boxes[k]);
  <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
  rvector xlowVec = Inf(boxes[k]);
  <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
  gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
  accumulate(dpIAE, result, 1.0);
}
<span class="comment">// Accounting for the boundaries</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Calculating IAE of the boundaries&quot;</span> &lt;&lt; endl;

  rvector xuppVec1 = Sup(boxes[Nbin-1]);
  <span class="keywordtype">double</span> xupp1 = _double(xuppVec1[1]);
  rvector xlowVec1 = Inf(boxes[0]);
  <span class="keywordtype">double</span> xlow1 = _double(xlowVec1[1]);
  dpIAEBoun = <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(xlow1, xupp1, Weight, Mean, Sigma);
  dpIAE += <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
  cout&lt;&lt;dpIAE&lt;&lt;endl;

  gsl_integration_workspace_free (w);
  <span class="comment">// store IAE in vector</span>
  dpIAEVec.push_back(dpIAE);
 

   } <span class="comment">// end of successfulPQsplit</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a18f47afd7369146e7242725a3a3ff780"></a><!-- doxytag: member="HoldOutFinMix.cpp::pop_back" ref="a18f47afd7369146e7242725a3a3ff780" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a> <a class="el" href="HoldOutFinMix_8cpp.shtml#a18f47afd7369146e7242725a3a3ff780">pop_back</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a30a5b87d0ad92ec2ac4720f718cfbe4c"></a><!-- doxytag: member="HoldOutFinMix.cpp::while" ref="a30a5b87d0ad92ec2ac4720f718cfbe4c" args="(!infile1.eof())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="HoldOutFinMix_8cpp.shtml#a30a5b87d0ad92ec2ac4720f718cfbe4c">while</a> </td>
          <td>(</td>
          <td class="paramtype">!infile1.&#160;</td>
          <td class="paramname"><em>eof</em>()</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00472">472</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>References <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00468">countsA</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00467">volA</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00469">xlowA</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00470">xuppA</a>.</p>
<div class="fragment"><pre class="fragment">{
infile1 &gt;&gt; chAv&gt;&gt; volAv&gt;&gt; countsAv&gt;&gt;xlowAv&gt;&gt;xuppAv;
<a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>.push_back(volAv);
<a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>.push_back(countsAv);
<a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>.push_back(xlowAv);
<a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>.push_back(xuppAv);
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a85377091af4aac9cac693472564eca90"></a><!-- doxytag: member="HoldOutFinMix.cpp::boxesA" ref="a85377091af4aac9cac693472564eca90" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;ivector&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00486">486</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">for()</a>.</p>

</div>
</div>
<a class="anchor" id="ad0ed2e852ce391062394d3fb37d83fca"></a><!-- doxytag: member="HoldOutFinMix.cpp::countsA" ref="ad0ed2e852ce391062394d3fb37d83fca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;double&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00468">468</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">for()</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00472">while()</a>.</p>

</div>
</div>
<a class="anchor" id="a894b8d12887c7363e41db774d05a13b4"></a><!-- doxytag: member="HoldOutFinMix.cpp::dpIAE" ref="a894b8d12887c7363e41db774d05a13b4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a> = 0.0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">500</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03530">subpavings::AdaptiveHistogramValidation::getFinMixIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03895">subpavings::AdaptiveHistogram::getFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00683">getRegHistFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01286">getRegHistUnifIAE()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01271">subpavings::AdaptiveHistogramCollator::getUnifIAE()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03435">subpavings::AdaptiveHistogramValidation::getUnifIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03774">subpavings::AdaptiveHistogram::getUnifIAE()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l04264">getUnifTrueDelta()</a>, and <a class="el" href="Coverage_8cpp_source.shtml#l00051">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a97e24d3d1886f2162f0daa315bc812a7"></a><!-- doxytag: member="HoldOutFinMix.cpp::dpIAEBoun" ref="a97e24d3d1886f2162f0daa315bc812a7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">dotprecision <a class="el" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">500</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03530">subpavings::AdaptiveHistogramValidation::getFinMixIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03895">subpavings::AdaptiveHistogram::getFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00683">getRegHistFinMixIAE()</a>, and <a class="el" href="CoverageNormal_8cpp_source.shtml#l00085">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a55dbd38124b429effc8498fd72e75ac9"></a><!-- doxytag: member="HoldOutFinMix.cpp::fhatA" ref="a55dbd38124b429effc8498fd72e75ac9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;double&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00487">487</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">for()</a>.</p>

</div>
</div>
<a class="anchor" id="a5048e3a13ffcb20124b62a989f4c5524"></a><!-- doxytag: member="HoldOutFinMix.cpp::Nbin" ref="a5048e3a13ffcb20124b62a989f4c5524" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> = countsA.size()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00503">503</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03530">subpavings::AdaptiveHistogramValidation::getFinMixIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03895">subpavings::AdaptiveHistogram::getFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00683">getRegHistFinMixIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00733">getRegHistFinMixIntervalIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00917">getRegHistLaplaceIntervalIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01101">getRegHistLognormalIntervalIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01286">getRegHistUnifIAE()</a>, and <a class="el" href="Coverage_8cpp_source.shtml#l00051">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a94dc863b1a67c64d7a11fc8fc482d676"></a><!-- doxytag: member="HoldOutFinMix.cpp::volA" ref="a94dc863b1a67c64d7a11fc8fc482d676" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cout&lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl; timeVec.push_back(timing); ifstream infile1(accumFileName.c_str());string chAv; double volAv; double countsAv; double xlowAv; double xuppAv;vector&lt;double&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00467">467</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00472">while()</a>.</p>

</div>
</div>
<a class="anchor" id="a3bc52ae65a3e8c94d6e239f5a95072e6"></a><!-- doxytag: member="HoldOutFinMix.cpp::xlowA" ref="a3bc52ae65a3e8c94d6e239f5a95072e6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;double&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00469">469</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">for()</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00472">while()</a>.</p>

</div>
</div>
<a class="anchor" id="a2d959f69287f44c479f94f36fcee9b77"></a><!-- doxytag: member="HoldOutFinMix.cpp::xuppA" ref="a2d959f69287f44c479f94f36fcee9b77" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;double&gt; <a class="el" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00470">470</a> of file <a class="el" href="HoldOutFinMix_8cpp_source.shtml">HoldOutFinMix.cpp</a>.</p>

<p>Referenced by <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00489">for()</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00472">while()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOutFinMix_8cpp.shtml">HoldOutFinMix.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
