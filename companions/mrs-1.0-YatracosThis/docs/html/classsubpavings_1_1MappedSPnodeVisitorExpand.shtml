<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: subpavings::MappedSPnodeVisitorExpand Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1MappedSPnodeVisitorExpand.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">subpavings::MappedSPnodeVisitorExpand Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="subpavings::MappedSPnodeVisitorExpand" --><!-- doxytag: inherits="subpavings::SPnodeVisitor" -->
<p><code>#include &lt;<a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for subpavings::MappedSPnodeVisitorExpand:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1MappedSPnodeVisitorExpand__inherit__graph.png" border="0" usemap="#subpavings_1_1MappedSPnodeVisitorExpand_inherit__map" alt="Inheritance graph"/></div>
<map name="subpavings_1_1MappedSPnodeVisitorExpand_inherit__map" id="subpavings_1_1MappedSPnodeVisitorExpand_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for subpavings::MappedSPnodeVisitorExpand:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1MappedSPnodeVisitorExpand__coll__graph.png" border="0" usemap="#subpavings_1_1MappedSPnodeVisitorExpand_coll__map" alt="Collaboration graph"/></div>
<map name="subpavings_1_1MappedSPnodeVisitorExpand_coll__map" id="subpavings_1_1MappedSPnodeVisitorExpand_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classsubpavings_1_1MappedSPnodeVisitorExpand-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a292481207d6456275fe92160dbcd82b0">MappedSPnodeVisitorExpand</a> (<a class="el" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, cxsc::real tol)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a9ca7e3ae700e79bd8656757cba68fd55">visit</a> (<a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *spn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#aeed5572a50b11c5f5d49321093188eec">tellMe</a> (<a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *spn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">priorityVisit</a> (<a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *spn, size_t critLeaves, std::vector&lt; real &gt; &amp;eps)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#ad1b71939066cfd6cda106d03b3ed466e">priorityVisit</a> (<a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *spn, size_t critLeaves, gsl_rng *rgsl, std::vector&lt; real &gt; &amp;eps)</td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00031">31</a> of file <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a292481207d6456275fe92160dbcd82b0"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::MappedSPnodeVisitorExpand" ref="a292481207d6456275fe92160dbcd82b0" args="(MappedFobj &amp;f, cxsc::real tol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a292481207d6456275fe92160dbcd82b0">MappedSPnodeVisitorExpand::MappedSPnodeVisitorExpand</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>tol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00039">39</a> of file <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a>.</p>
<div class="fragment"><pre class="fragment">      : <a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml#a84110f6eacb81e0f2167e869261fe16e">SPnodeVisitor</a>(), <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(f), <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a>(tol) {}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a33088d8b066f447fe2626680a2255ec6"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::priorityVisit" ref="a33088d8b066f447fe2626680a2255ec6" args="(SPnode *spn, size_t critLeaves, std::vector&lt; real &gt; &amp;eps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">MappedSPnodeVisitorExpand::priorityVisit</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *&#160;</td>
          <td class="paramname"><em>spn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>critLeaves</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; real &gt; &amp;&#160;</td>
          <td class="paramname"><em>eps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00090">90</a> of file <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
   gsl_rng * rgsl = NULL;
    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * tgsl;
    <span class="comment">// set the library variables *gsl_rng_default and</span>
    <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
    gsl_rng_env_setup();
    tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
    rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
    retValue = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">priorityVisit</a>(mspn, critLeaves, rgsl, eps);
    gsl_rng_free (rgsl);
   <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad1b71939066cfd6cda106d03b3ed466e"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::priorityVisit" ref="ad1b71939066cfd6cda106d03b3ed466e" args="(SPnode *spn, size_t critLeaves, gsl_rng *rgsl, std::vector&lt; real &gt; &amp;eps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">MappedSPnodeVisitorExpand::priorityVisit</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *&#160;</td>
          <td class="paramname"><em>spn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>critLeaves</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gsl_rng *&#160;</td>
          <td class="paramname"><em>rgsl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; real &gt; &amp;&#160;</td>
          <td class="paramname"><em>eps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00107">107</a> of file <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00864">subpavings::SPnode::collectRange()</a>, <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00035">fobj</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00401">subpavings::SPnode::getLeftChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00406">subpavings::SPnode::getRightChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l01305">subpavings::SPnode::nodeExpand()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, and <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00036">tolerance</a>.</p>
<div class="fragment"><pre class="fragment">{    
   <span class="comment">//cout &lt;&lt; &quot;Calling priority visit: &quot; &lt;&lt; endl;</span>

   <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
   <span class="keywordtype">size_t</span> numNodes = 0;
   <span class="comment">//real normConst = 0.0;</span>
   
   <span class="comment">//comparison function</span>
   <a class="code" href="classsubpavings_1_1CompSPArea.shtml" title="Class comparing the approximate area of a box by multiplying the box volume with the diameter of its ...">CompSPArea</a> compTest(<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>);
   <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
   multiset&lt;SPnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));

   <span class="comment">//cout &lt;&lt; &quot;get fobj of box &quot; &lt;&lt; endl;</span>
   ivector box = mspn-&gt;getBox();
   interval thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
   
   <span class="comment">//cout &lt;&lt; &quot;get fobj of mid point &quot; &lt;&lt; endl;</span>
   <span class="comment">//real thisMidImage = fobj.imageMid(box);</span>
   <span class="comment">//normConst = (mspn-&gt;nodeVolume() * thisMidImage);</span>

   interval RiemannDiff = (mspn-&gt;nodeVolume()) * (thisRange);
   real MaxEps = diam(RiemannDiff);
   <span class="comment">//normalize MaxEps by normConst</span>
   interval TotEps = interval(MaxEps); 
   real midTotEps = mid(TotEps);
   pq.insert(mspn);
   mspn-&gt;collectRange(*<span class="keyword">this</span>);
   numNodes++;
  <span class="comment">// this is optional (collecting midTotEps)</span>
   eps.push_back(midTotEps);
   
   cancontinue = (!pq.empty());
   <span class="keywordflow">if</span>(!cancontinue) {
      std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
    } 

   <span class="comment">// split until have desired number of leaf nodes</span>
   <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
   <span class="comment">// that they are splittable when we take them out</span>
   <span class="keywordflow">while</span> (cancontinue &amp;&amp; (numNodes &lt; critLeaves) &amp;&amp; (midTotEps &gt; <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a>))
   {
    <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
    <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* chosenLargest;
    
    <span class="comment">// find if there are any more equal to largest around</span>
    multiset&lt;SPnode*, MyCompare&gt;::iterator mit;
    pair&lt;multiset&lt;SPnode*, MyCompare&gt;::iterator,
       multiset&lt;SPnode*, MyCompare&gt;::iterator&gt; equalLargest;

    equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
    <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>

    <span class="keywordflow">if</span> (numberLargest &gt; 1) {
       <span class="comment">// draw a random number in [0,1)</span>
       <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
       real sum = 0.0;

       <span class="comment">// random selection of the =largest node to chose</span>
       <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
          sum += 1.0/(1.0*numberLargest);
          <span class="keywordflow">if</span> (rand &lt; sum) {
            <span class="keywordflow">break</span>;
          }
       }
       chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
       pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
       numNodes--; <span class="comment">//check if pq.size() == numNodes;</span>
       assert(numNodes == pq.size());
    }
    <span class="keywordflow">else</span> {
       chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
       multiset&lt;SPnode*, MyCompare&gt;::iterator it = pq.end();
       it--;
       pq.erase(it);<span class="comment">// take this largest out of the set</span>
       numNodes--; <span class="comment">//check if pq.size() == numNodes</span>
       assert(numNodes == pq.size());
    }

    <span class="comment">// split the biggest one</span>
    <span class="comment">//cout &lt;&lt; &quot;---------------splitting &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;-----&quot; &lt;&lt; endl;</span>
    
    <span class="comment">//cout &lt;&lt; &quot;get fobj of box &quot; &lt;&lt; endl;</span>
    box = chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
    thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
    <span class="comment">//thisRange = thisRange/normConst; //normalize the heights</span>
    RiemannDiff = (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()) * (thisRange);
    MaxEps = diam(RiemannDiff);
    
    <span class="comment">// now update TotEps</span>
    TotEps = TotEps - interval(MaxEps);
    
     <span class="comment">// now update the normalizing constant since a node is removed</span>
     <span class="comment">//thisMidImage = fobj.imageMid(box);</span>
     <span class="comment">//real remNormConst = thisMidImage * (chosenLargest-&gt;nodeVolume());</span>
     <span class="comment">//cout &lt;&lt; &quot;to remove: &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; remNormConst &lt;&lt; endl;</span>
     <span class="comment">//assert(normConst &gt;= remNormConst);</span>
     <span class="comment">//normConst = normConst - remNormConst;</span>
     
     <span class="comment">//now split</span>
    chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>();
    
    <span class="comment">//name the new children</span>
    (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;recursiveRename();
    (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;collectRange(*<span class="keyword">this</span>);

    (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;recursiveRename();
    (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;collectRange(*<span class="keyword">this</span>);
    
    <span class="comment">// insert these nodes into the priority queue</span>
    pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
    pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
    numNodes = numNodes+2;
    assert(pq.size() == numNodes);
    
    <span class="comment">// update normConst with the addition of the left and right child nodes</span>
    <span class="comment">//normConst = normConst </span>
    <span class="comment">//    + (((chosenLargest-&gt;getLeftChild())-&gt;nodeVolume())* </span>
    <span class="comment">//       (fobj.imageMid((chosenLargest-&gt;getLeftChild())-&gt;getBox()))</span>
    <span class="comment">//      );</span>

    <span class="comment">//normConst = normConst </span>
    <span class="comment">//    + (((chosenLargest-&gt;getRightChild())-&gt;nodeVolume())* </span>
    <span class="comment">//       (fobj.imageMid((chosenLargest-&gt;getRightChild())-&gt;getBox()))</span>
    <span class="comment">//      );</span>

    <span class="comment">//normalize TotEps to the current normConst</span>

    
    <span class="comment">// get the epsilon for the left child node</span>
    <span class="comment">//cout &lt;&lt; &quot;get fobj of box and mid point &quot; &lt;&lt; endl;</span>
    MaxEps = diam(((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;nodeVolume()) * (<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getBox())));
    TotEps = TotEps + interval(MaxEps);

    <span class="comment">// get the epsilon for the right child node</span>
    MaxEps = diam(((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;nodeVolume()) * (<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getBox())));
    TotEps = TotEps + interval(MaxEps);

    <span class="comment">//get the mid point</span>
    midTotEps = mid(TotEps);
    <span class="comment">//optional</span>
    <span class="comment">//if (normConst != 0.0) </span>
    eps.push_back(midTotEps); 

    cancontinue = (!pq.empty());
    <span class="keywordflow">if</span> (!cancontinue)
       std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
          &lt;&lt; std::endl;
  }
    <span class="keywordflow">return</span> (cancontinue);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeed5572a50b11c5f5d49321093188eec"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::tellMe" ref="aeed5572a50b11c5f5d49321093188eec" args="(SPnode *spn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#aeed5572a50b11c5f5d49321093188eec">MappedSPnodeVisitorExpand::tellMe</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *&#160;</td>
          <td class="paramname"><em>spn</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented from <a class="el" href="classsubpavings_1_1SPnodeVisitor.shtml#a8c10bef76c4e6ed1ca3e718032fdd2b3">subpavings::SPnodeVisitor</a>.</p>

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00071">71</a> of file <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a>.</p>

<p>References <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00035">fobj</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, and <a class="el" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d">subpavings::MappedFobj::imageMid()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(mspn-&gt;getBox());
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ca7e3ae700e79bd8656757cba68fd55"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::visit" ref="a9ca7e3ae700e79bd8656757cba68fd55" args="(SPnode *spn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a9ca7e3ae700e79bd8656757cba68fd55">MappedSPnodeVisitorExpand::visit</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> *&#160;</td>
          <td class="paramname"><em>spn</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented from <a class="el" href="classsubpavings_1_1SPnodeVisitor.shtml#ab66d7c252cd58fc14214315033521a80">subpavings::SPnodeVisitor</a>.</p>

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00043">43</a> of file <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a>.</p>

<p>References <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00035">fobj</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00401">subpavings::SPnode::getLeftChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00406">subpavings::SPnode::getRightChild()</a>, <a class="el" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d">subpavings::MappedFobj::imageMid()</a>, <a class="el" href="spnode_8cpp_source.shtml#l01305">subpavings::SPnode::nodeExpand()</a>, and <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00036">tolerance</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">//std::cout &lt;&lt; &quot;in visit, for &quot; &lt;&lt; mspn-&gt;getNodeName() &lt;&lt; std::endl;</span>

  <span class="comment">// check if we need to split</span>
  ivector box = mspn-&gt;getBox();
  <span class="comment">//std::cout &lt;&lt; &quot;this box is &quot; &lt;&lt; box &lt;&lt; &quot; and has volume &quot; &lt;&lt; mspn-&gt;nodeVolume() &lt;&lt; std::endl;</span>
  interval thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
  <span class="comment">//std::cout &lt;&lt; &quot;this range is &quot; &lt;&lt; thisRange &lt;&lt; std::endl;</span>
  real thisMidImage = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(box);
  <span class="comment">//std::cout &lt;&lt; &quot;this midImage is &quot; &lt;&lt; thisMidImage &lt;&lt; std::endl;</span>
  
  <span class="comment">// split if so and then visit children</span>
  
cout &lt;&lt; diam(thisRange) &lt;&lt; <span class="charliteral">&#39;\t&#39;</span> &lt;&lt; thisRange &lt;&lt; endl;
  <span class="comment">// wants the simple function approx using the mid image to be within epsilon of the worst-case scenario</span>
  <span class="keywordflow">if</span> (max(Sup(thisRange) - thisMidImage, thisMidImage - Inf(thisRange)) &gt; <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a>) {
    <span class="comment">//std::cout &lt;&lt; &quot;expanding&quot; &lt;&lt; std::endl;</span>
    mspn-&gt;nodeExpand();

    <span class="comment">//visit the children</span>
    <span class="comment">//std::cout &lt;&lt; &quot;check children&quot; &lt;&lt; std::endl;</span>
    (mspn-&gt;getLeftChild())-&gt;accept(*<span class="keyword">this</span>);
    (mspn-&gt;getRightChild())-&gt;accept(*<span class="keyword">this</span>);
  }
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a7c071f0df7b4dd7fd009827da8853d35"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::fobj" ref="a7c071f0df7b4dd7fd009827da8853d35" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">subpavings::MappedSPnodeVisitorExpand::fobj</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00035">35</a> of file <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>.</p>

<p>Referenced by <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00107">priorityVisit()</a>, <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00071">tellMe()</a>, and <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00043">visit()</a>.</p>

</div>
</div>
<a class="anchor" id="a77345ab08c67ee3b152e7f48795e1132"></a><!-- doxytag: member="subpavings::MappedSPnodeVisitorExpand::tolerance" ref="a77345ab08c67ee3b152e7f48795e1132" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">subpavings::MappedSPnodeVisitorExpand::tolerance</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml#l00036">36</a> of file <a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>.</p>

<p>Referenced by <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00107">priorityVisit()</a>, and <a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml#l00043">visit()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a></li>
<li><a class="el" href="mappedspnodevisitor__expand_8cpp_source.shtml">mappedspnodevisitor_expand.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacesubpavings.shtml">subpavings</a>      </li>
      <li class="navelem"><a class="el" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:39 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
