<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRAuto.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRAuto_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MCMCGRAuto.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MCMCGR_2dataprep_8hpp_source.shtml">dataprep.hpp</a>&quot;</code><br/>
</div>
<p><a href="MCMCGRAuto_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRAuto_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="MCMCGRAuto.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRAuto_8cpp_source.shtml#l00038">38</a> of file <a class="el" href="MCMCGRAuto_8cpp_source.shtml">MCMCGRAuto.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01076">subpavings::AdaptiveHistogramCollator::getSumVarianceAreaScalar()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01146">subpavings::AdaptiveHistogramCollator::getSumVarianceTotalHeightScalar()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00094">subpavings::LOGSAMPLES</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">subpavings::AdaptiveHistogramCollator::makeAverage()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7">subpavings::outputFile()</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00868">subpavings::AdaptiveHistogramCollator::publicOutputLog()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//========user-defined parameters====================//</span>
   <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number to generate</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
   <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//mix</span>
   <span class="keywordtype">int</span> loops = atoi(argv[4]); <span class="comment">//make this a big number</span>
   <span class="keywordtype">int</span> thinout = atoi(argv[5]);

   <span class="comment">//======set up for output========================================//    </span>
   <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);

   <span class="comment">//===========prepare to generate some data for the tests ================//</span>
   <span class="comment">// set up a random number generator</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;

   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>

   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);

   <span class="comment">//-------define the root box--------------------</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">//------------data generating partition-------------</span>
   <span class="comment">//data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="comment">//mixture shape</span>
   <span class="keywordtype">string</span> mixShape;
   <span class="keywordflow">if</span> (mix == 1) {mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }<span class="comment">// this is the basic uniform</span>
   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix == 2) { mixShape = <span class="stringliteral">&quot;1,2,2&quot;</span>; }
   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==3) { mixShape = <span class="stringliteral">&quot;2,3,4,4,3,4,4,2&quot;</span>; }   
   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==4) {mixShape =             <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }    
   myPart.splitToShape(mixShape);<span class="comment">// uniform mixture     </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
   myPart.getSubPaving()-&gt;getLeaves(Pleaves); <span class="comment">// fill the container</span>
   
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
      Pboxes.push_back((*it)-&gt;getBox());
   }
   <span class="keywordtype">size_t</span> PartSize = Pboxes.size();

   <span class="comment">//--------------generate data-----------------------------------------</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
    <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE   </span>
    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
      rvector thisrv(d);
      <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);
      }
      <span class="comment">// put points generated into container</span>
      theData.push_back(thisrv);
    }

   <span class="comment">// free the random number generator</span>
   gsl_rng_free (r);

  <span class="comment">/*  // output data to a file</span>
<span class="comment">   string dataFile = &quot;dataFile.txt&quot;;</span>
<span class="comment">   ofstream osd(dataFile.c_str());         // replace data</span>
<span class="comment">   if (osd.is_open()) {</span>
<span class="comment">      RVecDataItr dit;</span>
<span class="comment">      for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<span class="comment">        //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">        osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">      }</span>
<span class="comment">      osd.close();</span>
<span class="comment">   }</span>
<span class="comment">   else {</span>
<span class="comment">      std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<span class="comment">        &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<span class="comment">   }</span>
<span class="comment">  */</span>

  <span class="comment">//=========Gelman-Rubin method: initial points=========================//</span>
   <span class="comment">// this is how many starting histograms we need</span>
   <span class="keywordtype">size_t</span> chains = 3; <span class="comment">// how many chains to run</span>
   <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
   <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
   <span class="comment">// the starting points are chosen to be widely dispersed</span>

  <span class="comment">//------Starting histograms-------------------------------//</span>
  <span class="comment">//histogram 1</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
  <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
  <span class="keywordtype">bool</span> successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);

  <span class="comment">//histogram 2</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
  <span class="comment">// the same data into the second histogram</span>
  <span class="keywordtype">bool</span> successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
  <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
  <span class="keywordflow">if</span> (successfulInsertionSecond) {
      <span class="comment">// set up function objects for a priority split</span>
      <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
      <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
      <span class="keywordtype">size_t</span> minLeaves = 50;
      <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
      <span class="comment">// do the priority split</span>
      successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
           critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
   }

  <span class="comment">//histogram 3</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Histogram 3&quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistThird = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
  myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(<span class="stringliteral">&quot;1,2,2&quot;</span>); <span class="comment">// make a specific starting shape</span>
  <span class="comment">// put in the data in a &#39;pulse&#39; with no further splitting</span>
  <span class="keywordtype">bool</span> successfulInsertionThird = myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);

  <span class="comment">//===========set up MCMC ingredients====================================//</span>
  <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond &amp;&amp; successfulInsertionThird) 
  {
     <span class="comment">// set up proposal distribution object</span>
     <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
     <span class="comment">// there are 2 other proposals</span>
     <span class="comment">// UniformProposal proposal(p); //p is the probability of staying</span>
     <span class="comment">// EquiProbProposal proposal;</span>
     
     <span class="comment">// set up prior distribution object</span>
     <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;

     <span class="keywordtype">size_t</span> minPoints = 0;
     <span class="keywordtype">bool</span> thinning = (thinout &gt; 0);

     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;

     gsl_rng * rgsl = NULL;

     <span class="comment">// should check that each hist to be done has a paving</span>

     <span class="comment">// set up a random number generator for uniform rvs</span>
     <span class="keyword">const</span> gsl_rng_type * tgsl;
     <span class="comment">// set the library variables *gsl_rng_default and</span>
     <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
     gsl_rng_env_setup();
     tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
     rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>

     <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
     vector&lt;SPSnodeList&gt; nodeLists(chains);
     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);

     vector&lt;string&gt; sequenceStateFilenames(chains);
     vector&lt;string&gt; sequenceAverageFilenames(chains);
     vector&lt;string&gt; sequenceCollationFilenames(chains);
    
     std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
     std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
     std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;

    std::string overSequenceAvgCollFilename = <span class="stringliteral">&quot;CollationsOfAveragesOverSequences.txt&quot;</span>;
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(overSequenceAvgCollFilename);
    std::string GRAreaFilename = <span class="stringliteral">&quot;GelmanRubinLog_AreaScalar.txt&quot;</span>;
    std::string GRTotalHeightFilename = <span class="stringliteral">&quot;GelmanRubinLog_TotalHeightScalar.txt&quot;</span>;
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRAreaFilename);
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRTotalHeightFilename);

    <span class="comment">// containers for summaries for the Area-related scalar</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceAreaVec; <span class="comment">// to hold the Ws</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceAreaVec; <span class="comment">// to hold the Bs</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVAreaVec; <span class="comment">// to hold the estimated var(v)</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatAreaVec; <span class="comment">// to hold the sqrtRhats</span>

    <span class="comment">// containers for summaries for the total height scalar</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Ws</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Bs</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVTotalHeightVec; <span class="comment">// to hold the estimated var(v)</span>
    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatTotalHeightVec; <span class="comment">// to hold the sqrtRhats</span>
    
      <span class="comment">// containers for adaptive histograms</span>
      vector&lt;AdaptiveHistogram*&gt; hists;
      hists.push_back(myHistFirst);
      hists.push_back(myHistSecond);
      hists.push_back(myHistThird);
      <span class="comment">// there should be as many hists in hists as there are chains</span>
      <span class="keywordflow">if</span> (hists.size() != chains) {
        cout &lt;&lt; <span class="stringliteral">&quot;Wrong number of histograms&quot;</span> &lt;&lt; endl;
        exit(1);
      }

    <span class="comment">// container of each state at each sequence</span>
    vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
    <span class="comment">//container for the collation of the averages over each sequence at each state</span>
    vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> masterCollator; <span class="comment">// not newed so no need to delete</span>

    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
    <span class="keywordtype">bool</span> burninArea = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> burninTotalHeight = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> burninTotalLeaves = <span class="keyword">false</span>;

    <span class="comment">//==========getting the splittable nodes from the initial conditions====//</span>
    <span class="keywordtype">size_t</span> ci = 0; <span class="comment">// indexing through chains</span>
    <span class="keywordflow">for</span> (ci = 0; ci &lt; chains; ci++) {
      <span class="comment">// do not comment these out</span>
      std::ostringstream stm1;
      stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
      sequenceStateFilenames[ci] = stm1.str();
      <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);

      std::ostringstream stm3;
      stm3 &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
      sequenceCollationFilenames[ci] = stm3.str();
      <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);

      std::ostringstream stm2;
      stm2 &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
      sequenceAverageFilenames[ci] = stm2.str();
      <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
        
      <span class="comment">// set up a container for the leaf children</span>
      <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
      <span class="comment">// set up a container for the subleaf children</span>
      <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;

      <span class="keywordtype">size_t</span> numLeaves = 0;
      <span class="keywordtype">size_t</span> numCherries = 0;

      <span class="comment">// fill the container with the leaf children</span>
      hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
      <span class="comment">// fill the container with the subleaf children</span>
      hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
      numCherries = cherryVec.size();

      <span class="comment">// check if node is still splittable</span>
      <span class="keywordflow">if</span> (!leafVec.empty()) {
         <span class="comment">// but only put into the container the leaves which, if split,</span>
         <span class="comment">// would have at least minPoints data points associated with them</span>
         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
         <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
            <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
              ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
                 <span class="comment">// leaf can go into container</span>
                 nodeLists[ci].push_back(*lit);
                 numLeaves++;
            }
         }
      }

      <span class="comment">// no need to check on cherries - they can all go in</span>
      <span class="keywordflow">if</span> (numCherries &gt; 0)
         nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
                         cherryVec.end());
      <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
         cancontinue = <span class="keyword">false</span>;
         <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
         std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
                 &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
                 &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
      }

      numLeavesVec[ci] = numLeaves;
      numCherriesVec[ci] = numCherries;

      <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* coll = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>;
      sequenceCollators[ci] = coll;
    }

      <span class="keywordtype">bool</span> goodLoop = cancontinue;
  
      <span class="comment">//========start the MCMC==========================================//</span>
      <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
      <span class="keywordtype">int</span> i = 1;  <span class="comment">// keep track of states in the chain</span>
      <span class="keywordtype">int</span> sampleNumber = 1; <span class="comment">//to keep track of the number of states</span>
      <span class="keywordtype">size_t</span> flagRhat = 0; <span class="comment">//to keep track of the GR diagnostic</span>

      <span class="comment">// loop from here conditional on good loop and cancontinue</span>
      <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loops &gt; 0)) {
        cout &lt;&lt; <span class="stringliteral">&quot;==========state &quot;</span> &lt;&lt; sampleNumber &lt;&lt; <span class="stringliteral">&quot;=============&quot;</span> &lt;&lt; endl;
        loops--;

        <span class="comment">// a collator for the averages for this loop</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* avgColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>;

        <span class="comment">// container for the scalar summaries for this loop</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> summariesArea(chains);
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> summariesTotalHeight(chains);
        
        <span class="comment">// container for the S&#39;s for this loop</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sampleVariancesArea(chains);
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sampleVariancesTotalHeight(chains);

        cout &lt;&lt; <span class="stringliteral">&quot;for each histogram in turn change the state&quot;</span> &lt;&lt; endl;
        <span class="comment">// for each histogram in turn, change the state</span>
        <span class="keywordflow">for</span> (ci = 0; ci &lt; chains; ci++) {
          cout &lt;&lt; <span class="stringliteral">&quot;chain &quot;</span> &lt;&lt; ci &lt;&lt; endl;
           <span class="comment">// changeMCMCState updates nodes, numLeaves, numCherries, i</span>
           goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
                   numLeavesVec[ci], numCherriesVec[ci],
                   proposal, logPrior, minPoints,
                   rgsl, loggingInChangeStates,
                   sequenceStateFilenames[ci], i);

           <span class="keywordflow">if</span> (!goodLoop) <span class="keywordflow">break</span>; <span class="comment">// break out if we aren&#39;t happy</span>
           <span class="keywordflow">else</span> {
             <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
              <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
             }

            <span class="comment">// collate the sample state;</span>
            sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));

            <span class="comment">// collate the sample state;</span>
            sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));

            <span class="comment">// now make the average over the collator</span>
            <span class="comment">// and collect that too!</span>
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
                      = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
            (*avgColl) += colltempavg; <span class="comment">// add the average into the collation of averages</span>
    
            <span class="comment">// store the sample variance (only applicable if i &gt; 1)</span>
            real sampleVarArea = 0.0;
            real sampleVarTotalHeight = 0.0;
            <span class="keywordflow">if</span> (sampleNumber &gt; 1) {
               sampleVarArea =
                  sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aefbffc32c2919a65a8a8f67b74416766" title="Get the sample variance for an area-related scalar summary.">getSampleVarianceAreaScalar</a>();
               sampleVarTotalHeight =
                  sequenceCollators[ci]-&gt;getSampleVarianceTotalHeightScalar();
            }
            sampleVariancesArea[ci] = sampleVarArea;
            sampleVariancesTotalHeight[ci] = sampleVarTotalHeight;

            <span class="comment">// if already burn in then we can output the sample </span>
            <span class="keywordflow">if</span> (burninArea == <span class="keyword">true</span>){
              <span class="comment">// output the sample state;</span>
              <span class="comment">// hists[ci]-&gt;publicOutputMCMCStateSample(ci, i);</span>

              <span class="comment">// log the sample as well</span>
              hists[ci]-&gt;publicLogMCMCSample(sequenceStateFilenames[ci], i);
              colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], i);
              sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], i);

              <span class="comment">// add the sample variance to the collations file</span>
              std::ostringstream stm;
              stm &lt;&lt; <span class="stringliteral">&quot;Area scalar sample variance is \t&quot;</span> &lt;&lt; sampleVarArea
                &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;Total height scalar sample variance is \t&quot;</span> &lt;&lt; sampleVarTotalHeight;
              <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(sequenceCollationFilenames[ci], stm.str());
            } <span class="comment">//end of taking the sample after burn in </span>
        } <span class="comment">//end of goodLoop check</span>
      } <span class="comment">// end change state for each histogram in turn</span>

      <span class="comment">// each histogram now has a new state which has been collated into</span>
      <span class="comment">// its collator and its average has been updated</span>
      averageCollators.push_back(avgColl); <span class="comment">// keep the collation of averages</span>
      real sumSequenceVariancesArea =
               avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e" title="Get the sum of the variances for an area-related scalar summary.">getSumVarianceAreaScalar</a>();
      real sumSequenceVariancesTotalHeight =
               avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2" title="Get the sum of the variances for scalar summary total height.">getSumVarianceTotalHeightScalar</a>();

       <span class="comment">// now make the average over the collator of averages</span>
       <span class="comment">// and collect that too!</span>
       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> collavtemp = avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
       masterCollator += collavtemp; <span class="comment">// and collate it</span>

       <span class="comment">// W is the average sample variance over the sequences</span>
       <span class="comment">// we have collected the sequence sample variances for our scalars</span>
       real withinSequenceVarianceArea = 0.0;
       real withinSequenceVarianceTotalHeight = 0.0;
       <a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it;
       <span class="keywordflow">for</span> (it = sampleVariancesArea.begin();
            it &lt; sampleVariancesArea.end(); it++) {
          withinSequenceVarianceArea += *it;
       }
       withinSequenceVarianceArea /= (1.0*chains);

       <span class="keywordflow">for</span> (it = sampleVariancesTotalHeight.begin();
            it &lt; sampleVariancesTotalHeight.end(); it++) {
          withinSequenceVarianceTotalHeight += *it;
       }
       withinSequenceVarianceTotalHeight /= (1.0*chains);

       <span class="comment">// B is n/(k-1)*sumSequenceVariances where n is number of states</span>
       <span class="comment">// k is number of chains</span>
       real betweenSequenceVarianceArea = 0.0;
       real sampleVarianceOfSequenceAveragesArea = 0.0;
       real betweenSequenceVarianceTotalHeight = 0.0;
       real sampleVarianceOfSequenceAveragesTotalHeight = 0.0;

       <span class="keywordflow">if</span> (chains &gt; 1) {
          betweenSequenceVarianceArea =
                  sumSequenceVariancesArea*sampleNumber/(1.0*(chains-1));
          sampleVarianceOfSequenceAveragesArea =
                  sumSequenceVariancesArea/(1.0*(chains-1));

          betweenSequenceVarianceTotalHeight =
                  sumSequenceVariancesTotalHeight*sampleNumber/(1.0*(chains-1));
          sampleVarianceOfSequenceAveragesTotalHeight =
                  sumSequenceVariancesTotalHeight/(1.0*(chains-1));
       }

       <span class="comment">// estimated varV is (n-1)*W/n + B/n</span>
       <span class="comment">// sqrt Rhat is sqrt(estimatedVarV/W)</span>
       real estimatedVarVArea = 0.0;
       real sqrtRhatArea = 0.0;
       real estimatedVarVTotalHeight = 0.0;
       real sqrtRhatTotalHeight = 0.0;

       <span class="keywordflow">if</span> (sampleNumber &gt; 1) {
          estimatedVarVArea =
            ((sampleNumber-1)*withinSequenceVarianceArea/(1.0*sampleNumber))
            + betweenSequenceVarianceArea/(1.0*sampleNumber);
          <span class="keywordflow">if</span> (withinSequenceVarianceArea &gt; 0.0)
            sqrtRhatArea = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(estimatedVarVArea/withinSequenceVarianceArea);
        
            estimatedVarVTotalHeight =
            ((sampleNumber-1)*withinSequenceVarianceTotalHeight/(1.0*sampleNumber))
            + betweenSequenceVarianceTotalHeight/(1.0*sampleNumber);

          <span class="keywordflow">if</span> (withinSequenceVarianceTotalHeight &gt; 0.0)
            sqrtRhatTotalHeight =
               <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(estimatedVarVTotalHeight/withinSequenceVarianceTotalHeight);
       }

      <span class="keywordflow">if</span> (burninArea == <span class="keyword">true</span>) {
        avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(overSequenceAvgCollFilename, i);
        <span class="comment">// add to the collation of averages log file</span>
        std::ostringstream stm0;
        stm0  &lt;&lt; <span class="stringliteral">&quot;Area scalar sum of variances of sequence averages \t&quot;</span>
            &lt;&lt; sumSequenceVariancesArea
            &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
            &lt;&lt; <span class="stringliteral">&quot;Total height scalar sum of variances of sequence averages is \t&quot;</span>
            &lt;&lt; sumSequenceVariancesTotalHeight;
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(overSequenceAvgCollFilename, stm0.str());

         std::ostringstream stm10;
         stm10 &lt;&lt; <span class="stringliteral">&quot;Sample &quot;</span> &lt;&lt; sampleNumber &lt;&lt; <span class="stringliteral">&quot; (state &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, stm10.str());
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, stm10.str());

         <span class="comment">// log the sample variances</span>
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;Area scalar sample variances&quot;</span>,
                         sampleVariancesArea);
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;Total height scalar sample variances&quot;</span>,
                         sampleVariancesTotalHeight);

         <span class="comment">// store the convergence diagnostics</span>
         withinSequenceVarianceAreaVec.push_back(withinSequenceVarianceArea);
         betweenSequenceVarianceAreaVec.push_back(betweenSequenceVarianceArea);
         estVarVAreaVec.push_back(estimatedVarVArea);
         sqrtRhatAreaVec.push_back(sqrtRhatArea);

         withinSequenceVarianceTotalHeightVec.push_back(withinSequenceVarianceTotalHeight);
         betweenSequenceVarianceTotalHeightVec.push_back(betweenSequenceVarianceTotalHeight);
         estVarVTotalHeightVec.push_back(estimatedVarVTotalHeight);
         sqrtRhatTotalHeightVec.push_back(sqrtRhatTotalHeight);
         <span class="comment">// and the rest</span>
         std::ostringstream stm20;
         stm20 &lt;&lt; <span class="stringliteral">&quot;Sum of variances of sequence averages \t&quot;</span> &lt;&lt; sumSequenceVariancesArea;
         stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Sample variance of sequence averages \t&quot;</span>
                                    &lt;&lt; sampleVarianceOfSequenceAveragesArea;
         stm20  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Within sequence variance, W \t&quot;</span> &lt;&lt; withinSequenceVarianceArea;
         stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Between sequence variance, B \t&quot;</span> &lt;&lt; betweenSequenceVarianceArea;
         stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;estimated variance of v, var(v)  \t&quot;</span> &lt;&lt; estimatedVarVArea;
         stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;sqrtRhat  \t&quot;</span> &lt;&lt; sqrtRhatArea &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, stm20.str());

         std::ostringstream stm30;
         stm30 &lt;&lt; <span class="stringliteral">&quot;Sum of variances of sequence averages \t&quot;</span> &lt;&lt;
              sumSequenceVariancesTotalHeight;
         stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Sample variance of sequence averages \t&quot;</span> &lt;&lt;
              sampleVarianceOfSequenceAveragesTotalHeight;
         stm30  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Within sequence variance, W \t&quot;</span> &lt;&lt;
              withinSequenceVarianceTotalHeight;
         stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Between sequence variance, B \t&quot;</span> &lt;&lt;
              betweenSequenceVarianceTotalHeight;
         stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;estimated variance of v, var(v)  \t&quot;</span> &lt;&lt;
              estimatedVarVTotalHeight;
         stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;sqrtRhat  \t&quot;</span> &lt;&lt; sqrtRhatTotalHeight &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, stm30.str());
      }

      <span class="comment">// check the rhat to determine burn-in using </span>
      <span class="comment">// recommended bounds for the sqrtRhat value</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Rhat: &quot;</span> &lt;&lt; sqrtRhatTotalHeight &lt;&lt; endl; 
      <span class="keywordflow">if</span> (sqrtRhatTotalHeight &lt; 1.1 &amp;&amp; sqrtRhatTotalHeight &gt; 0.9) {
        flagRhat++; <span class="comment">//increment the flagRhat counter</span>
        cout &lt;&lt; <span class="stringliteral">&quot;We can collect the sample from state &quot;</span> 
            &lt;&lt; sampleNumber &lt;&lt; <span class="stringliteral">&quot; onwards.&quot;</span> &lt;&lt; endl;
        burninArea = <span class="keyword">true</span>;
        
        <span class="comment">//maybe can also have an upper bound for flagRhat defined by user.</span>
        <span class="comment">// once there is enough &quot;flagRhat&quot;, we can stop the chain</span>
      }
      <span class="comment">// if rhat condition is not fulfilled, reset flagRhat and</span>
      <span class="comment">// reset the containers and files</span>
      <span class="keywordflow">else</span> {
          <span class="comment">//we need to hard code this - use maxTimeSteps as our loop so that we can run the chain as far as we can</span>
          flagRhat = 0;
          burninArea = <span class="keyword">false</span>;
          cout &lt;&lt; <span class="stringliteral">&quot;Rhat outside bounds. Restart. &quot;</span> &lt;&lt; endl;

          <span class="comment">//reset the container and files etc so that they are empty</span>
          std::string overSequenceAvgCollFilename = <span class="stringliteral">&quot;CollationsOfAveragesOverSequences.txt&quot;</span>;
          <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(overSequenceAvgCollFilename);
          std::string GRAreaFilename = <span class="stringliteral">&quot;GelmanRubinLog_AreaScalar.txt&quot;</span>;
          std::string GRTotalHeightFilename = <span class="stringliteral">&quot;GelmanRubinLog_TotalHeightScalar.txt&quot;</span>;
          <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRAreaFilename);
          <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRTotalHeightFilename);
      
          <span class="comment">// containers for summaries for the Area-related scalar</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceAreaVec; <span class="comment">// to hold the Ws</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceAreaVec; <span class="comment">// to hold the Bs</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVAreaVec; <span class="comment">// to hold the estimated var(v)</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatAreaVec; <span class="comment">// to hold the sqrtRhats</span>
      
          <span class="comment">// containers for summaries for the total height scalar</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Ws</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Bs</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVTotalHeightVec; <span class="comment">// to hold the estimated var(v)</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatTotalHeightVec; <span class="comment">// to hold the sqrtRhats</span>
          
          <span class="keywordflow">for</span> (ci = 0; ci &lt; chains; ci++) {
            <span class="comment">// do not comment these out</span>
            std::ostringstream stm1;
            stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceStateFilenames[ci] = stm1.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
      
            std::ostringstream stm3;
            stm3 &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceCollationFilenames[ci] = stm3.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
      
            std::ostringstream stm2;
            stm2 &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceAverageFilenames[ci] = stm2.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
          }
      } <span class="comment">//end of resetting</span>

      sampleNumber++;
      i++;
      <span class="comment">// back into loop</span>
    } <span class="comment">// finished loop</span>
 
      cancontinue = goodLoop;
      <span class="keywordflow">if</span> (cancontinue &amp;&amp; (flagRhat &gt; 1)) {
        <span class="comment">// output the convergence diagnostics</span>
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;\n\n\n Final diagnostics&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;W&quot;</span>, withinSequenceVarianceAreaVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;B&quot;</span>, betweenSequenceVarianceAreaVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;estVarV&quot;</span>, estVarVAreaVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;sqrtRhat&quot;</span>,sqrtRhatAreaVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);

        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;\n\n\n Final diagnostics&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;W&quot;</span>, withinSequenceVarianceTotalHeightVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;B&quot;</span>, betweenSequenceVarianceTotalHeightVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;estVarV&quot;</span>, estVarVTotalHeightVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;sqrtRhat&quot;</span>,sqrtRhatTotalHeightVec);
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
      }

      <span class="comment">// free the random number generator</span>
      gsl_rng_free (rgsl);

      <span class="comment">// check cancontinue;</span>
    <span class="keywordflow">if</span> (cancontinue &amp;&amp; (flagRhat &gt; 1)) {
      cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;Check output files &quot;</span> &lt;&lt; GRAreaFilename
              &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; GRTotalHeightFilename
              &lt;&lt; <span class="stringliteral">&quot; for diagnostics&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; overSequenceAvgCollFilename
              &lt;&lt; <span class="stringliteral">&quot; for averages over the squences&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
            &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
            &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
            &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
    }
    <span class="keywordflow">else</span> {
      cout &lt;&lt; <span class="stringliteral">&quot;MCMC not successful&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore: \n:&quot;</span>
            &lt;&lt; GRAreaFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
            &lt;&lt; GRTotalHeightFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
            &lt;&lt; overSequenceAvgCollFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
            &lt;&lt; baseSequenceStateFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n&quot;</span>
            &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n&quot;</span>
            &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
    }

      <span class="comment">// delete the relevant pointers to free memory</span>
      vector&lt;AdaptiveHistogram*&gt;::iterator ait;
      <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ait++) {
        <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
      }
      
      vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
      <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); acit++) {
        <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
      }
      
      <span class="keywordflow">for</span> (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {
        <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
      }
  } <span class="comment">// end of ifSuccessful</span>

   <span class="keywordflow">return</span> 0;

  } <span class="comment">// end of MCMC test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRAuto_8cpp.shtml">MCMCGRAuto.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:22 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
