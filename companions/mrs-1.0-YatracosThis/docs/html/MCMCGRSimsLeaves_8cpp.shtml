<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRSimsLeaves.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRSimsLeaves_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MCMCGRSimsLeaves.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &quot;<a class="el" href="MCMCGRtools_8hpp_source.shtml">MCMCGRtools.hpp</a>&quot;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
</div>
<p><a href="MCMCGRSimsLeaves_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSimsLeaves_8cpp.shtml#a1a8fc670ce7b46a9d64870cc1a6f4a2a">doMCMCGRAuto</a> (size_t n, int d, size_t numHist, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol, size_t minPoints, int dataSeed, int maxLeaves)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSimsLeaves_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a1a8fc670ce7b46a9d64870cc1a6f4a2a"></a><!-- doxytag: member="MCMCGRSimsLeaves.cpp::doMCMCGRAuto" ref="a1a8fc670ce7b46a9d64870cc1a6f4a2a" args="(size_t n, int d, size_t numHist, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol, size_t minPoints, int dataSeed, int maxLeaves)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#aea9f4a954dda6cf104fccfbb15d2f704">doMCMCGRAuto</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numHist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxLoops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>samplesNeeded</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thinout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>tol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>minPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dataSeed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxLeaves</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRSimsLeaves_8cpp_source.shtml#l00108">108</a> of file <a class="el" href="MCMCGRSimsLeaves_8cpp_source.shtml">MCMCGRSimsLeaves.cpp</a>.</p>

<p>References <a class="el" href="MCMCGRtools_8cpp_source.shtml#l00113">addDataPtrs()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00798">subpavings::AdaptiveHistogramCollator::getNumberCollated()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01271">subpavings::AdaptiveHistogramCollator::getUnifIAE()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00094">subpavings::LOGSAMPLES</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">subpavings::AdaptiveHistogramCollator::makeAverage()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, <a class="el" href="MCMCGRtools_8cpp_source.shtml#l00047">outputToFileVertical()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00868">subpavings::AdaptiveHistogramCollator::publicOutputLog()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//======set up for output========================================//     </span>
  <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
  <span class="keywordtype">int</span> prec = 15;
  cout &lt;&lt; cxsc::SaveOpt;
  cout &lt;&lt; cxsc::Variable;
  cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);

  ofstream os;
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  <span class="comment">//===========prepare to generate some data for the tests ================//</span>
  <span class="comment">// set up a random number generator</span>
  <span class="keyword">const</span> gsl_rng_type * T;
  gsl_rng * r;

  <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
  gsl_rng_env_setup();
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);
  <span class="comment">// set a seed for the data</span>
  gsl_rng_set(r, dataSeed);

  <span class="comment">//-------define the root box--------------------</span>
  ivector pavingBox(d);
  interval pavingInterval(0,1);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

  <span class="comment">//=========numHist repetitions for simulation purposes=====================//</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; numHist; h++) {
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesAvg = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; <span class="comment">// our return object, if all goes well</span>

    ostringstream stmH;
    stmH &lt;&lt; h;
     <span class="comment">//--------------generate data-------------------</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Generating data for simulation &quot;</span> &lt;&lt; h &lt;&lt; endl;
      <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
      <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE   </span>
      <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theData = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   
      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
        rvector thisrv(d);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
          thisrv[i] = gsl_rng_uniform(r);
        }
        <span class="comment">// put points generated into container</span>
        theData-&gt;push_back(thisrv);
      }
        
    <span class="comment">/*  // output data to a file</span>
<span class="comment">     string dataFile = &quot;dataFile.txt&quot;;</span>
<span class="comment">     ofstream osd(dataFile.c_str());         // replace data</span>
<span class="comment">     if (osd.is_open()) {</span>
<span class="comment">        RVecDataItr dit;</span>
<span class="comment">        for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<span class="comment">          //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">          osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">        }</span>
<span class="comment">        osd.close();</span>
<span class="comment">     }</span>
<span class="comment">     else {</span>
<span class="comment">        std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<span class="comment">          &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<span class="comment">     }</span>
<span class="comment">    */</span>
    
    <span class="comment">//start recording cpu time here, which includes making the chains</span>
    clock_t start, end;
      <span class="keywordtype">double</span> timing; 
    start = clock();
    <span class="comment">//================Gelman-Rubin method=========================//</span>
     <span class="comment">// start by making the histograms that are the starting points for our chains</span>
     
     <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
     <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
     <span class="comment">// the starting points are chosen to be widely dispersed</span>
  
    <span class="comment">//------Starting histograms-------------------------------//</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Starting the chains &quot;</span> &lt;&lt; endl;
    <span class="comment">//histogram 1</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
    <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
    <span class="keywordtype">bool</span> successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
  
    
    <span class="comment">//histogram 2</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
    <span class="comment">// the same data into the second histogram</span>
    <span class="keywordtype">bool</span> successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
    <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
    <span class="keywordflow">if</span> (successfulInsertionSecond) {
      <span class="comment">// set up function objects for a priority split</span>
      <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critVal(maxLeaves);
      <span class="comment">// or split until each leaf node has at least minVal points</span>
      <span class="comment">//CritLargestCount_LTE critVal(minVal);</span>
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
      <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, 0.9));  
      <span class="comment">// do the priority split</span>
      successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
           critVal, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
      (myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLeaves(leaves);
      cout &lt;&lt; <span class="stringliteral">&quot;number of leaves in myHistSecond: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; endl;
     }
    
    <span class="comment">/*  </span>
<span class="comment">    //histogram 3</span>
<span class="comment">    cout &lt;&lt; &quot;Histogram 3&quot; &lt;&lt; endl;</span>
<span class="comment">    AdaptiveHistogram* myHistThird = new AdaptiveHistogram(pavingBox);</span>
<span class="comment">    myHistThird-&gt;splitToShape(&quot;1,2,2&quot;); // make a specific starting shape</span>
<span class="comment">    // put in the data in a &#39;pulse&#39; with no further splitting</span>
<span class="comment">    bool successfulInsertionThird = myHistThird-&gt;insertFromRVec(theData);</span>
<span class="comment">    cout &lt;&lt; &quot;number of leaves in myHistThird: &quot; &lt;&lt; spLeaves(myHistThird-&gt;getSubPaving()) &lt;&lt; endl;</span>
<span class="comment">    */</span>
    <span class="comment">/*</span>
<span class="comment">    //histogram 4</span>
<span class="comment">    cout &lt;&lt; &quot;Histogram 4&quot; &lt;&lt; endl;</span>
<span class="comment">    AdaptiveHistogram* myHistFourth = new AdaptiveHistogram(pavingBox);</span>
<span class="comment">    myHistFourth-&gt;splitToShape(&quot;2,3,4,4,3,4,4,2&quot;); // make a specific starting shape</span>
<span class="comment">    // put in the data in a &#39;pulse&#39; with no further splitting</span>
<span class="comment">    bool successfulInsertionFourth = myHistFourth-&gt;insertFromRVec(theData);</span>
<span class="comment">    cout &lt;&lt; &quot;number of leaves in myHistFourth: &quot; &lt;&lt; spLeaves(myHistFourth-&gt;getSubPaving()) &lt;&lt; endl;</span>
<span class="comment">    */</span>
    <span class="comment">/*</span>
<span class="comment">    //histogram 5</span>
<span class="comment">    cout &lt;&lt; &quot;Histogram 5&quot; &lt;&lt; endl;</span>
<span class="comment">    AdaptiveHistogram* myHistFifth = new AdaptiveHistogram(pavingBox);</span>
<span class="comment">    myHistFifth-&gt;splitToShape(&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;); // make a specific starting shape</span>
<span class="comment">    // put in the data in a &#39;pulse&#39; with no further splitting</span>
<span class="comment">    bool successfulInsertionFifth = myHistFifth-&gt;insertFromRVec(theData);</span>
<span class="comment">    cout &lt;&lt; &quot;number of leaves in myHistFifth: &quot; &lt;&lt; spLeaves(myHistFifth-&gt;getSubPaving()) &lt;&lt; endl;</span>
<span class="comment">    */</span>
    <span class="comment">/*</span>
<span class="comment">    #ifdef FORCEFAILINSERTION</span>
<span class="comment">      // debugging - force a failure here to check what program does</span>
<span class="comment">      successfulInsertionThird = false;</span>
<span class="comment">    #endif</span>
<span class="comment">    */</span>
    
    <span class="comment">// only proceed if successfully made histograms</span>
    <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; 
      successfulPQSplitSecond) { <span class="comment">// &amp;&amp; //) {  </span>
      <span class="comment">//  successfulInsertionThird &amp;&amp; //) {</span>
    <span class="comment">//   successfulInsertionFourth ) { </span>
       <span class="comment">//&amp;&amp; successfulInsertionFifth) {</span>
      
      <span class="keyword">delete</span> theData; <span class="comment">// don&#39;t need this anymore</span>

      <span class="comment">// Initializing containers etc.</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Initializing containers since successfully made histograms. &quot;</span> &lt;&lt; endl;
      <span class="comment">// containers for adaptive histograms</span>
      <span class="comment">// the starting points of the chains</span>
      vector&lt; AdaptiveHistogram* &gt; hists;
      hists.push_back(myHistFirst);
      hists.push_back(myHistSecond);
      <span class="comment">//hists.push_back(myHistThird);</span>
      <span class="comment">//hists.push_back(myHistFourth);</span>
      <span class="comment">//hists.push_back(myHistFifth);</span>
      
      <span class="comment">// how many chains are to be run = number starting histograms</span>
      <span class="keywordtype">size_t</span> chains = hists.size(); 
      
      <span class="keywordflow">if</span> (chains &lt; 2) {
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
      }

      <span class="comment">//container to keep the L1-error between each state and true density</span>
      vector&lt; vector &lt;real&gt; &gt; stateL1(chains);
      vector&lt; vector &lt;real&gt; &gt; avgStateL1(chains);
      
      <span class="comment">// set up proposal distribution object</span>
      <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
      <span class="comment">// set up prior distribution object</span>
      <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;

      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
  
      gsl_rng * rgsl = NULL;
  
      <span class="comment">// should check that each hist to be done has a paving</span>
  
      <span class="comment">// set up a random number generator for uniform rvs</span>
      <span class="keyword">const</span> gsl_rng_type * tgsl;
      <span class="comment">// set the library variables *gsl_rng_default and</span>
      <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
      gsl_rng_env_setup();
      tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
      rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
      
      <span class="comment">// set a seed for the data</span>
      <span class="keywordtype">int</span> mcmcSeed = 1234;
      gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
  
      <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
      vector&lt;SPSnodeList&gt; nodeLists(chains);
      <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
      <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
  
      vector&lt;string&gt; sequenceStateFilenames(chains);
      vector&lt;string&gt; sequenceAverageFilenames(chains);
      vector&lt;string&gt; sequenceCollationFilenames(chains);
      vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
      
      <span class="comment">// names for leaves related stuff</span>
      vector&lt;string&gt; leavesColNames(chains);
      vector&lt;string&gt; leavesRunningSumColNames(chains);
      vector&lt;string&gt; leavesSampleVarianceColNames(chains);
      std::string  baseLeavesColName = <span class="stringliteral">&quot;leaves_&quot;</span>;
      std::string  baseLeavesRunningSumColName = <span class="stringliteral">&quot;leavesSum_&quot;</span>;
      std::string  baseLeavesSampleVarianceColName = <span class="stringliteral">&quot;leavesVar_&quot;</span>;
      std::string  overallLeavesRunningSumColName = <span class="stringliteral">&quot;OverallLeavesSum&quot;</span>;
      
      std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
      std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
      std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
      std::string baseSequenceStateDiffsToAverageFilename = <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
      
      <span class="comment">// files for outputing samples</span>
      std::string samplesCollFilename = <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto.txt&quot;</span>;
      std::string samplesLogFilename = <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto.txt&quot;</span>;
      <span class="comment">//outputFileStart(samplesCollFilename);</span>
      
      <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
      <span class="comment">// but at the moment I have not done anything about graphing</span>
      <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
        <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
      }
      
      <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
      <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
      
      <span class="comment">// a name for the file of diagnostics  for leaves</span>
      std::string GRLeavesFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalar.txt&quot;</span>;
    
      <span class="comment">// a name for a file of the leaves v_ij scalars</span>
      std::string GR_vij_as_Leaves_Filename  = <span class="stringliteral">&quot;LeavesScalar.txt&quot;</span>;
    
      <span class="comment">// a name for the file of working calculations for the leaves scalar diagnostics </span>
      std::string GRLeavesWorkingCalcsFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalarWorkingCalcs.txt&quot;</span>;
      
      <span class="comment">/* containers for summaries for the </span>
<span class="comment">      * Leaves-distances-to-average scalar convergence diagnostics */</span>
    
      <span class="comment">/* note we don&#39;t need this for leaves */</span>
      <span class="comment">//std::vector &lt; RealVec &gt; currentLeaves(chains); </span>

      <span class="comment">// one vector of leaves as a RealVec for each chain</span>
      std::vector &lt; RealVec &gt;* leavesPtr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  

      <span class="comment">/* vector containing one running sum of leaves for each chain</span>
<span class="comment">      we can work out the average v = leaves for each chain so far from this</span>
<span class="comment">      start with a running sum of 0.0 for each chain */</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
    
      <span class="comment">/* vector containing one running sum of </span>
<span class="comment">      squared leaves for each chain</span>
<span class="comment">      we can work out the average of the squared v&#39;s ie v^2 = leaves^2</span>
<span class="comment">      for each chain so far from this</span>
<span class="comment">      start with a running sum of 0.0 for each chain.</span>
<span class="comment">      (Use a dotprecision for each running sum to keep accuracy </span>
<span class="comment">      when accumulating products of reals) */</span>
      <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumLeavesSquared(chains, cxsc::dotprecision(0.0));

      <span class="comment">/* value of running sum of leaves over all chains</span>
<span class="comment">      we can work out the average v = leaves over all chains so far from this */</span>
      real runningSumLeavesAllChains = cxsc::real(0.0);
      
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">// keep a vector of all the overall running sums as well</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesOverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>();
        <span class="comment">// keep a vector of the runningsums for each chain as well</span>
        std::vector &lt; RealVec &gt;* runningSumLeavesChainsPtr 
                  = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
        <span class="comment">// keep a vector of the sample variances for each chain as well</span>
        std::vector &lt; RealVec &gt;* sampleVariancesLeavesPtr 
                  = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains,
                    <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0)) );
        <span class="comment">/* keep a vector of the flag for leaves convergence</span>
<span class="comment">         * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatLeavesFlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>  
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Ws_leaves</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Bs_leaves</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the estimated var(v) for leaves</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhat_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the rhats for leaves</span>

<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<span class="comment">        * (not a real, but easier to output it if we treat it like one) */</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>
      <span class="comment">// container of each state at each sequence</span>
      vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
      
      <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
      
      <span class="comment">/* need to accumulate sum over all chains of the square of </span>
<span class="comment">      * the running sum of leaves </span>
<span class="comment">      * for each chain for this starting state */</span>
      cxsc::real initialSumOfSquaresOfRunningSumsLeaves(0.0);

      <span class="comment">// this loop is just setting up containers of file names</span>
      <span class="comment">// and getting info from the starting histograms that is</span>
      <span class="comment">// needed to start the chains</span>
      <span class="comment">// and a container of collators, one for each chain,</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
        
        <span class="comment">// do not comment these out</span>
        std::ostringstream stm1;
        stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
        sequenceStateFilenames[ci] = stm1.str();
        <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
        
        <span class="comment">// to output v_ij</span>
        {
          std::ostringstream stm;
          stm &lt;&lt; baseLeavesColName &lt;&lt; ci;
          leavesColNames[ci] = stm.str();
        }

<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceCollationFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceAverageFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceDiffsToAverageFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseLeavesRunningSumColName &lt;&lt; ci;
            leavesRunningSumColNames[ci] = stm.str();
          }
          
          {
            std::ostringstream stm;
            stm &lt;&lt; baseLeavesSampleVarianceColName &lt;&lt; ci;
            leavesSampleVarianceColNames[ci] = stm.str();
          }
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>
        <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<span class="comment">        * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<span class="comment">        * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<span class="comment">        * change.  */</span>
        
        <span class="comment">// set up a container for the leaf children</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
        <span class="comment">// set up a container for the subleaf children</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
  
        <span class="keywordtype">size_t</span> numLeaves = 0;
        <span class="keywordtype">size_t</span> numCherries = 0;
  
        <span class="comment">// fill the container with the leaf children</span>
        hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
        <span class="comment">// fill the container with the subleaf children</span>
        hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
  
        numCherries = cherryVec.size();
  
        <span class="comment">// check if node is still splittable</span>
        <span class="keywordflow">if</span> (!leafVec.empty()) {
           <span class="comment">// but only put into the container the leaves which, if split,</span>
           <span class="comment">// would have at least minPoints data points associated with them</span>
           <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
           <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
              <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
                ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
                   <span class="comment">// leaf can go into container</span>
                   nodeLists[ci].push_back(*lit);
                   numLeaves++;
              }
           }
        }
  
        <span class="comment">// no need to check on cherries - they can all go in</span>
        <span class="keywordflow">if</span> (numCherries &gt; 0)
           nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
                           cherryVec.end());
        <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
           cancontinue = <span class="keyword">false</span>;
           <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
           std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
                   &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
                   &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
        }
  
        numLeavesVec[ci] = numLeaves;
        numCherriesVec[ci] = numCherries;

        <span class="comment">// initialise things for the collection of data on leaves</span>
        
        <span class="comment">// one vector of leaves for each chain</span>
        <span class="comment">// record leaves for this first state</span>
        cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
        leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
        
        <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
        cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
        runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
            
        <span class="comment">// accumulate the square of the running sum of leaves </span>
        initialSumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
            
        <span class="comment">/* update the running sum of squared leaves over this chain</span>
<span class="comment">         *  held in runningSumLeavesSquared as a dot precision */</span>
        cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
        
        <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
        runningSumLeavesAllChains += lastStateLeaves;
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">//sampleVariancesLeavesPtr-&gt;at(ci) was initialised to 0.0</span>
          runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>
        <span class="comment">// initialise things using current histogram state</span>
        <span class="comment">//cout &lt;&lt; &quot;set up collator for each chain: &quot; &lt;&lt; endl;</span>
        <span class="comment">/* set up one collator for each chain, </span>
<span class="comment">         * starting it with the histogram state right now */</span>
        sequenceCollators[ci] = ( <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] ) );
        <span class="comment">// get the IAE of this first state</span>
        <span class="comment">//stateL1[ci].push_back(hists[ci]-&gt;getUnifIAE());</span>

        <span class="comment">//cout &lt;&lt; &quot;get the averaged histogram at this state&quot; &lt;&lt; endl;</span>
        <span class="comment">//moved this out from MYDEBUG_OUTPUT to get the IAE</span>
        <span class="comment">//AdaptiveHistogramCollator colltempavg = </span>
        <span class="comment">//                sequenceCollators[ci]-&gt;makeAverage();</span>
        <span class="comment">//cout &lt;&lt; &quot;get the IAE &quot; &lt;&lt; endl;</span>
        <span class="comment">//cout &lt;&lt; colltempavg.getUnifIAE() &lt;&lt; endl;</span>
        <span class="comment">//avgStateL1[ci].push_back(colltempavg.getUnifIAE());</span>

<span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>        {
          sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg = 
                        sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
          colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
                      = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">makeDifferencesToAverage</a>();
          colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
        } <span class="comment">// temp objects go out of scope here  </span>
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>      } <span class="comment">// end loop through chains setting up things to be able to start</span>
  
      <span class="comment">/* the overall running sum runningSumLeavesAllChains </span>
<span class="comment">       * was initialised to 0.0 </span>
<span class="comment">       * and #ifdef MYDEBUG, runningSumLeavesOverall was initialised to contain one 0.0 </span>
<span class="comment">       * and similarly rhatLeavesFlagPtr was initialised to contain one 0.0*/</span>
  
      <span class="comment">/* and we started the convergence statistics for chains with just one state in</span>
<span class="comment">       * with one 0.0 in each (Ws, Bs, estVarsVs, rhats)</span>
<span class="comment">       * when we initialised */</span>

      <span class="keywordtype">bool</span> goodLoop = cancontinue;

      <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;

      <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
      <span class="keywordtype">int</span> samplesSoFar = 0;
      <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far,</span>
<span class="comment">              since state 1 is the initial histograms */</span>
    
      <span class="comment">// varibles for monitoring convergence</span>
      <span class="keywordtype">int</span> rhatLeavesFlag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value </span>
      <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
      <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
      <span class="keywordtype">int</span> rhatFlagCounter = 0;
      <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<span class="comment">                        * diagnostic within limits for sampling to start?</span>
<span class="comment">                        * usually this would probably be the number</span>
<span class="comment">                        * of scalar values being used? */</span> 
                        
      <span class="comment">// counter to keep track of loops</span>
      <span class="keywordtype">int</span> loopCounter = 0;

      <span class="comment">/* We also need a collator for the samples*/</span>
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();

      <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) 
      {
<span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;****** Change from state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>
        loopCounter++;

        <span class="comment">// do initial values for everything so far</span>
        <span class="comment">/* we want to accumulate the sample variance of the scalar summary leaves</span>
<span class="comment">         * for each chain up to the point reached in this loop */</span>
        cxsc::real sumOfSampleVariancesLeavesOverChains(0.0);
        
        <span class="comment">/* also accumulate sum over all chains of the square of </span>
<span class="comment">         * the running sum of leaves </span>
<span class="comment">         * for each chain up to the point reached in this loop */</span>
        cxsc::real sumOfSquaresOfRunningSumsLeaves(0.0);
      
        <span class="comment">// for each histogram in turn, change the state</span>
        <span class="comment">/* </span>
<span class="comment">         * this is all a fudge - changeMCMCstate should just be a private</span>
<span class="comment">         * method of the histograms but I think I made it public so that</span>
<span class="comment">         * I could use it here in the example as a first step to being</span>
<span class="comment">         * able to make all of this chain convergence stuff back into</span>
<span class="comment">         * a method of the histograms themselves</span>
<span class="comment">        */</span>

        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
        
<span class="preprocessor">          #ifdef MYDEBUG_CALCS</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>
          <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<span class="comment">          * in the comments inside this loop */</span>

          <span class="comment">// changeMCMCState for the chain</span>
          <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
          goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
               numLeavesVec[ci], numCherriesVec[ci],
               proposal, logPrior, minPoints,
               rgsl, loggingInChangeStates,
               sequenceStateFilenames[ci], states);
               
<span class="preprocessor">          #ifdef FORCEFAILMCMCLOOP</span>
<span class="preprocessor"></span>            <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
            <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<span class="preprocessor">          #endif </span>
<span class="preprocessor"></span>
          <span class="keywordflow">if</span> (!goodLoop) {
            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
            <span class="comment">// stop if we aren&#39;t happy</span>
          }
        
          <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
          }
        
          <span class="comment">// so assume all is okay if we have not just thrown an exception</span>

          <span class="comment">/* this chain should have states + 1 states in it</span>
<span class="comment">          * because we have not yet incremented the states variable.*/</span>
          <span class="keywordtype">size_t</span> n_for_leaves = states + 1;
                
          <span class="comment">/* and n_Leaves should be at least 2 because we started with the </span>
<span class="comment">          * starting histogram and have now added another state.*/</span>
          assert(n_for_leaves &gt; 1);
        
          <span class="comment">// collect the leaves scalar and update the running sums for leaves</span>
          {
            <span class="comment">// update leaves for last histogram state in the chain</span>
            cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
            leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
                    
            <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
            cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
            runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
            
            <span class="comment">// accumulate the square of the running sum of leaves </span>
            sumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
            
            <span class="comment">/* update the running sum of squared leaves over this chain</span>
<span class="comment">             *  held in runningSumLeavesSquared as a dot precision */</span>
            cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
            
            <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
            runningSumLeavesAllChains += lastStateLeaves;
            
            <span class="comment">/* accumulate the sample variance for leaves for this chain: </span>
<span class="comment">             * sample variance for the scalar summary v = leaves</span>
<span class="comment">             * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<span class="comment">             * which equals (sum of squares - square of sums/n)/(n-1) */</span>
            cxsc::real thisSampleVarianceLeaves( ( 1.0/(n_for_leaves - 1) )
                *( cxsc::rnd(runningSumLeavesSquared[ci])
                -  (newRunningSumLeaves*newRunningSumLeaves/(n_for_leaves * 1.0)) ) );
            sumOfSampleVariancesLeavesOverChains += thisSampleVarianceLeaves;
            
<span class="preprocessor">            #ifdef MYDEBUG</span>
<span class="preprocessor"></span>              sampleVariancesLeavesPtr-&gt;at(ci).push_back( thisSampleVarianceLeaves );
              runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<span class="preprocessor">            #endif</span>
<span class="preprocessor"></span>
<span class="preprocessor">            #ifdef MYDEBUG_CALCS</span>
<span class="preprocessor"></span>              <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
              <span class="comment">// leavesPtr[ci] has the v_ij for each chain i</span>
              
              assert( n_for_leaves == leavesPtr-&gt;at(ci).size() );
              cxsc::real acc(0.0);
              <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
                acc+= (*it);
              }
              
              cxsc::real av = acc/(n_for_leaves * 1.0);
              cxsc::dotprecision accDiffs(0.0);
              <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
                cxsc::real thisDiff = (*it) - av;
                <span class="comment">// sum up the squares of the differences compared to overall average</span>
                cxsc::accumulate(accDiffs, thisDiff, thisDiff);
              }
              cxsc::real altVar = rnd(accDiffs)/( n_for_leaves - 1.0 );
              
              cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance leaves is\t&quot;</span> &lt;&lt; thisSampleVarianceLeaves &lt;&lt; endl;
              cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar leaves is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
              <span class="comment">//assert(cxsc::_double(thisSampleVarianceLeaves) == cxsc::_double(altVar) );</span>
            
<span class="preprocessor">            #endif</span>
<span class="preprocessor"></span>          } <span class="comment">// end of collecting leaves scalar</span>
      } <span class="comment">// end change state for each histogram in turn</span>
      
      <span class="comment">// increment number of states histograms have been through</span>

      states++;

      <span class="comment">/* each chain now has a new state</span>
<span class="comment">       * and info for leaves scalar for diagnostics has been collected</span>
<span class="comment">       * and the sample variance of the leaves scalar for each chain </span>
<span class="comment">       * has been put into sampleVariancesLeaves vector,</span>
<span class="comment">       * and if we are doing full checks, the current histogram states have </span>
<span class="comment">       * has been collated into collators </span>
<span class="comment">       * and info for any other scalars for diagnostics has been collected</span>
<span class="comment">       * and the sample variance of these other scalar summaries for each chain </span>
<span class="comment">       * for each scalar value</span>
<span class="comment">       * have been put into sampleVariances vectors for each diagnostic,</span>
<span class="comment">       * so we can now work out the convergence diagnostics */</span>

<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">// store the current runningSumLeavesAllChains as well</span>
        runningSumLeavesOverallPtr-&gt;push_back(runningSumLeavesAllChains);
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      
      <span class="comment">// convergence diagnostics calculations for leaves</span>
      {
        <span class="comment">// the Ws_leaves: average, over chains, of sample variance of scalar value</span>
        cxsc::real thisW_leaves = sumOfSampleVariancesLeavesOverChains/(chains * 1.0); 
        Ws_leavesPtr-&gt;push_back(thisW_leaves); 
        <span class="comment">// the Bs_leaves</span>
        cxsc::real thisB_leaves = (1.0/( (chains - 1) * states ) 
                  * ( sumOfSquaresOfRunningSumsLeaves 
                  - (runningSumLeavesAllChains 
                  * runningSumLeavesAllChains/(chains * 1.0)) ) );
        Bs_leavesPtr-&gt;push_back(thisB_leaves); 
        
<span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<span class="preprocessor"></span>          <span class="comment">//check thisB_leaves is correct, doing it the long way</span>
          <span class="comment">// runningSumLeaves has one running sum for each chain</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
          cxsc::real accRunningSums(0.0);
          <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumLeavesPtr-&gt;begin(); it &lt; runningSumLeavesPtr-&gt;end(); ++it) {
            cxsc::real thisChainRunningSum = (*it);
            cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
            chainAverages.push_back(thisChainAv);
            accRunningSums+=thisChainRunningSum;
          }
          cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
          cxsc::dotprecision accDiffs(0.0);
          <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
            cxsc::real thisDiff = (*it) - overallAv;
            <span class="comment">// sum up the squares of the differences compared to overall average</span>
            cxsc::accumulate(accDiffs, thisDiff, thisDiff);
          }
          cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
          
          cout &lt;&lt; <span class="stringliteral">&quot;\nthisB for leaves is\t&quot;</span> &lt;&lt; thisB_leaves &lt;&lt; endl;
          cout &lt;&lt; <span class="stringliteral">&quot;altB for leaves is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
          <span class="comment">//assert(thisB_leaves == altB);</span>
        
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">// the estimated var(v)</span>
        cxsc::real thisVarV_leaves = states/(states-1.0) 
                * thisW_leaves + (1.0/states)*thisB_leaves;
        estVarV_leavesPtr-&gt;push_back(thisVarV_leaves); 
        <span class="comment">// the rhats</span>
        cxsc::real thisRhat_leaves(0.0);
        <span class="comment">// allow division by 0 if w = 0 when var does not</span>
        <span class="keywordflow">if</span> (thisW_leaves &gt; 0.0 || thisVarV_leaves &gt; 0.0) {
          thisRhat_leaves = thisVarV_leaves/thisW_leaves;
        }
        rhat_leavesPtr-&gt;push_back(thisRhat_leaves); 
      } <span class="comment">// end calculations for leaves</span>
      
      
      <span class="comment">// check on the diagnostics for Leaves</span>
      <span class="keywordflow">if</span> (rhat_leavesPtr-&gt;back() &lt;= 1.0 + tol 
              &amp;&amp; rhat_leavesPtr-&gt;back() &gt;= 1.0 - tol) {
        <span class="comment">// if we have not been converged before on this scalar value</span>
        <span class="keywordflow">if</span> (!rhatLeavesFlag)  {
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nleaves convergence test satisfied in state &quot;</span> 
                &lt;&lt; states &lt;&lt; endl;
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          <span class="comment">// set the flag for this scalar value</span>
          rhatLeavesFlag = 1;
          <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
          rhatFlagCounter ++; 
        }
      } <span class="comment">// end of checking diagnostic for leaves</span>
      <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
        <span class="comment">// if we were okay on this scalar value before</span>
        <span class="keywordflow">if</span> (rhatLeavesFlag) {
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nLeaves convergence test now NOT satisfied in state &quot;</span> 
              &lt;&lt; states &lt;&lt; endl;
        
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          rhatLeavesFlag = 0; <span class="comment">// update the flag</span>
          rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
        } 
      }

<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">// store the Leavesflag as well, as a real, which is a fudge...</span>
        rhatLeavesFlagPtr-&gt;push_back(rhatLeavesFlag);
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>
      <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
        burntin = 1; 
        burntinReachedState = states;
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">// if we have not been burntin, give a message</span>
           cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
              &lt;&lt; burntinReachedState &lt;&lt; endl;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>      }
      
      <span class="comment">// but it may be that we were burntin and no longer are</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
        
        burntin = 0; 
        burntinReachedState = 0;
        
        <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
        samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
        
        samplesSoFar = 0;
        
        <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
        cxsc::real newVal(0.0);
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
            std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">// restart the log file if we are logging</span>
        <span class="comment">// note nothing done here yet about logging graphs as well  </span>
        <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
          <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
        }   
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
              &lt;&lt; states &lt;&lt; endl;
          
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>      }
      
      <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<span class="comment">       * the thinout specified </span>
<span class="comment">       * note - we will only be in the loop at all if we still need more samples*/</span>
      <span class="keywordflow">if</span> (burntin &amp;&amp; (( states - burntinReachedState )%thinout == 0)) {
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">//cout &lt;&lt; &quot;sampling at state &quot; &lt;&lt; states &lt;&lt; endl;</span>
          sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 

<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">// take one sample from each chain until we have enough samples</span>
        <span class="comment">// and increment samplesSoFar for each one taken</span>
        vector&lt;AdaptiveHistogram*&gt;::iterator ait;

        <span class="keywordflow">for</span> (ait = hists.begin(); 
            (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
            ++ait) {
          
          <span class="comment">// get the IAE of this histogram</span>
          <span class="comment">//stateL1[c].push_back((*ait)-&gt;getUnifIAE());</span>
          <span class="comment">//cout &lt;&lt; &quot;#Leaves: &quot; &lt;&lt; spLeaves((*ait)-&gt;getSubPaving()) &lt;&lt; endl;</span>
          
          <span class="comment">// add the collation (this is the main collation to output the final averaged sample)</span>
          samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
          <span class="comment">//cout &lt;&lt; samplesColl-&gt;getNumberCollated() &lt;&lt; endl;</span>

          <span class="comment">//cout &lt;&lt; &quot;adding this sample to the collater for chain &quot; &lt;&lt; c &lt;&lt; endl;</span>
          <span class="comment">// also add this to the collation associated with this chain</span>
          <span class="comment">//sigh this is so stupid but i can&#39;t get the vector one to work</span>
          <span class="comment">/*</span>
<span class="comment">          if (c==0) { </span>
<span class="comment">            coll1-&gt;addToCollation(**ait); </span>
<span class="comment">            //cout &lt;&lt; coll1-&gt;getNumberCollated() &lt;&lt; endl; </span>
<span class="comment">            // get the average of the collation associated with this chain</span>
<span class="comment">            AdaptiveHistogramCollator colltemp = coll1-&gt;makeAverage();</span>
<span class="comment">            // get the IAE</span>
<span class="comment">            avgStateL1[c].push_back(colltemp.getUnifIAE());</span>
<span class="comment">          }</span>
<span class="comment">          else {</span>
<span class="comment">            coll2-&gt;addToCollation(**ait); </span>
<span class="comment">            //cout &lt;&lt; coll2-&gt;getNumberCollated() &lt;&lt; endl; </span>
<span class="comment">            // get the average of the collation associated with this chain</span>
<span class="comment">            AdaptiveHistogramCollator colltemp = coll2-&gt;makeAverage();</span>
<span class="comment">            // get the IAE</span>
<span class="comment">            avgStateL1[c].push_back(colltemp.getUnifIAE());</span>
<span class="comment">          }</span>
<span class="comment"></span>
<span class="comment">          c++; //chain index</span>
<span class="comment">          */</span>
          samplesSoFar++;
          
          <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
            <span class="comment">//(*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);</span>
          }
        } <span class="comment">// finished iterating through samples to be taken</span>
      } <span class="comment">// finished taking samples for this loop</span>
      <span class="keywordflow">else</span> {
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>      }
      
      assert( (samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar) );
      
      <span class="comment">// back into loop</span>
<span class="preprocessor">      #if !defined(MYDEBUG_CALCS)</span>
<span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
          <span class="keywordflow">if</span> (loopCounter%100 == 0) {
            cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
          }
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span><span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>    }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
    
    cancontinue = goodLoop;
    
    <span class="comment">// stop recording time here</span>
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    
<span class="preprocessor">    #ifdef MYDEBUG</span>
<span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops, states counter is = &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>    
    cout &lt;&lt; <span class="stringliteral">&quot;\nnumber of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
    
    <span class="comment">// free the random number generator</span>
    gsl_rng_free (rgsl);

    cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
  
    
    <span class="comment">/* is all okay with the loop</span>
<span class="comment">     * and we have all our samples */</span>
    <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">// output the overall collator</span>
        samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      
      <span class="comment">// make the return object be the average of the samples</span>
      *samplesAvg = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
        
      <span class="comment">// output the convergence diagnostics</span>
      
      <span class="comment">//output file for leaves</span>
      {
        std::vector &lt; std::string &gt; colNames;
        colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
        colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
        colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
        colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatFlag&quot;</span>);
          colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
        data.push_back(Ws_leavesPtr);
        data.push_back(Bs_leavesPtr);
        data.push_back(estVarV_leavesPtr);
        data.push_back(rhat_leavesPtr);
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          data.push_back(rhatLeavesFlagPtr);
          data.push_back(sampledIndPtr);
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
        <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesFilename, precData);
      } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
      
      
      <span class="comment">// output the leaves  as v_ij&#39;s)</span>
      {
        std::vector &lt; std::string &gt; colNames;
        colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
        
        std::vector &lt; RealVec* &gt; data;
        data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
        
        <span class="keywordtype">int</span> precData = 10;
        <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_Leaves_Filename, precData);
      }

<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>      {
        <span class="comment">/* output working calcs: all leaves for each chain, </span>
<span class="comment">         * running sums for each chain, sample variances,</span>
<span class="comment">         * overall running sums */</span>
        std::vector &lt; std::string &gt; colNames;
        colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
        colNames.insert(colNames.end(), leavesRunningSumColNames.begin(), leavesRunningSumColNames.end());
        colNames.insert(colNames.end(), leavesSampleVarianceColNames.begin(), leavesSampleVarianceColNames.end());
        colNames.push_back(overallLeavesRunningSumColName);
        
        std::vector &lt; RealVec* &gt; data;
        data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
        data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumLeavesChainsPtr);
        data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesLeavesPtr);
        data.push_back(runningSumLeavesOverallPtr);
        
        <span class="keywordtype">int</span> precData = 10;
        <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesWorkingCalcsFilename, precData);
      
      }
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>
      cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;Check output files\n\t&quot;</span> &lt;&lt; GRLeavesFilename
              &lt;&lt; <span class="stringliteral">&quot;\nfor diagnostics&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;and for scalar values\n\t&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
      <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
            &lt;&lt; <span class="stringliteral">&quot;\nfor log of samples&quot;</span> &lt;&lt;endl;
      }
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; GRLeavesWorkingCalcsFilename
            &lt;&lt; <span class="stringliteral">&quot;\nfor working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span><span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
            &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
            &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
            &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      cout &lt;&lt; endl;
    }
    
    <span class="comment">/* clean up the newed stuff</span>
<span class="comment">     * </span>
<span class="comment">     * note that this does not get cleaned up if we throw an exception in the while loop</span>
<span class="comment">     * - should probably deal with that at some point but all the newed memory will be </span>
<span class="comment">     * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<span class="comment">     * it will be okay for the moment */</span>

    vector&lt;AdaptiveHistogram*&gt;::iterator ait;
    <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
      <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
    }

    vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
    <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
      <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
    }

    <span class="comment">/*</span>
<span class="comment">    for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<span class="comment">      if (NULL != *acit) delete (*acit);</span>
<span class="comment">    }</span>
<span class="comment">    */</span>
    
    <span class="keyword">delete</span> samplesColl;
    
<span class="preprocessor">    #ifdef MYDEBUG</span>
<span class="preprocessor"></span>      <span class="keyword">delete</span> sampledIndPtr;
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>    
    <span class="comment">// leaves stuff</span>
    <span class="keyword">delete</span> leavesPtr;  
    
<span class="preprocessor">    #ifdef MYDEBUG</span>
<span class="preprocessor"></span>      <span class="keyword">delete</span> runningSumLeavesOverallPtr;
      <span class="keyword">delete</span> runningSumLeavesChainsPtr;
      <span class="keyword">delete</span> sampleVariancesLeavesPtr;
      <span class="keyword">delete</span> rhatLeavesFlagPtr;
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>
    <span class="keyword">delete</span> Ws_leavesPtr;
    <span class="keyword">delete</span> Bs_leavesPtr;
    <span class="keyword">delete</span> estVarV_leavesPtr;
    <span class="keyword">delete</span> rhat_leavesPtr;

          
    <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<span class="comment">     *  really the only reason for failing here is that we did not get the right </span>
<span class="comment">     * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
    <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
      cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
          &lt;&lt; GRLeavesFilename
          &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
      
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        cout &lt;&lt; GRLeavesWorkingCalcsFilename &lt;&lt; endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
        cout &lt;&lt; samplesLogFilename &lt;&lt; endl;
      }
<span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>        cout &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
        &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
        &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      cout &lt;&lt; endl;
      
      <span class="keywordflow">if</span> (!cancontinue) {
        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
      }
      <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
        <span class="comment">// we have not been able to get the required samples - need to give up</span>
        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
      }
    }
      <span class="comment">/*</span>
<span class="comment">      // Output the L1 error of states</span>
<span class="comment">      vector&lt; vector&lt;real&gt; &gt;::iterator it1;</span>
<span class="comment">      vector&lt;real&gt;::iterator it2;</span>
<span class="comment">      string stateL1FileName = &quot;UnifStateL1FileName&quot;;</span>
<span class="comment">      stateL1FileName += stmH.str();</span>
<span class="comment">      stateL1FileName += &quot;.txt&quot;;</span>
<span class="comment">      os.open(stateL1FileName.c_str());</span>
<span class="comment">      for (it1 = stateL1.begin(); it1 &lt; stateL1.end(); it1++) { </span>
<span class="comment">        for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<span class="comment">          os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<span class="comment">        }</span>
<span class="comment">        os &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">      }</span>
<span class="comment">      os &lt;&lt; flush;</span>
<span class="comment">      os.close();</span>
<span class="comment">      </span>
<span class="comment">      // Output the L1 error of avg states</span>
<span class="comment">      string avgL1FileName = &quot;UnifAvgL1FileName&quot;;</span>
<span class="comment">      avgL1FileName += stmH.str();</span>
<span class="comment">      avgL1FileName += &quot;.txt&quot;;</span>
<span class="comment">      os.open(avgL1FileName.c_str());</span>
<span class="comment">      for (it1 = avgStateL1.begin(); it1 &lt; avgStateL1.end(); it1++) { </span>
<span class="comment">        for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<span class="comment">          os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<span class="comment">        }</span>
<span class="comment">        os &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">      }</span>
<span class="comment">      os &lt;&lt; flush;</span>
<span class="comment">      os.close();</span>
<span class="comment">      cout &lt;&lt; &quot;L1-errors output to &quot; &lt;&lt; avgL1FileName &lt;&lt; &quot; and &quot; &lt;&lt; stateL1FileName &lt;&lt; endl;</span>
<span class="comment">      */</span>
      
      <span class="comment">// now get the IAE of samplesAvg</span>
      real thisIAE = samplesAvg-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46870c2d282efef091dfb1b3477aba4f">getUnifIAE</a>(); 
      <span class="comment">//output IAE to file</span>
      <span class="keywordtype">string</span> IAEFileName;
      IAEFileName = <span class="stringliteral">&quot;UnifIAE&quot;</span>;
      IAEFileName += stmH.str();
      IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      os.open(IAEFileName.c_str());
      os &lt;&lt; thisIAE &lt;&lt; endl;
      os &lt;&lt; flush;
      os.close();
      cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
    
      <span class="comment">//output time taken to file</span>
      <span class="keywordtype">string</span> timeFileName;
      timeFileName = <span class="stringliteral">&quot;UnifTime&quot;</span>;
      timeFileName += stmH.str();
      timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      os.open(timeFileName.c_str());
      os &lt;&lt; timing &lt;&lt; endl ;
      os &lt;&lt; flush;
      os.close();
      cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl &lt;&lt; endl;
    
      <span class="keyword">delete</span> samplesAvg;

  
    } <span class="comment">// end check on successful insertion of data into histograms</span>
    
    <span class="keywordflow">else</span> {
      <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
    }

  } <span class="comment">// end of numHist</span>
  
  <span class="comment">//free the random number generator</span>
  gsl_rng_free(r);
  
  <span class="comment">//can i make the doMCMCGRAuto function to be a void function?</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
  <span class="keywordflow">return</span> coll;

} <span class="comment">// end of MCMC test program</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="MCMCGRSimsLeaves.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRSimsLeaves_8cpp_source.shtml#l00063">63</a> of file <a class="el" href="MCMCGRSimsLeaves_8cpp_source.shtml">MCMCGRSimsLeaves.cpp</a>.</p>

<p>References <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//========user-defined parameters====================//</span>
  <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number of datapoints to generate for each histogram</span>
  <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
  <span class="keywordtype">size_t</span> numHist = atoi(argv[3]); <span class="comment">// number of repetitions for simulation purposes</span>
  
  <span class="keywordtype">int</span> maxLoops = atoi(argv[4]); <span class="comment">// maximum changes of state from initial state to try</span>
  <span class="keywordtype">int</span> samplesNeeded = atoi(argv[5]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
  <span class="keywordtype">int</span> thinout = atoi(argv[6]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
  
  real tolerance = atof(argv[7]);
  cxsc::real tol(tolerance); <span class="comment">//tolerance for automated burn in criteria</span>
  
  <span class="keywordtype">size_t</span> minPoints = atoi(argv[8]); <span class="comment">//minimum points needed for a node to be splittable</span>
  
  <span class="keywordtype">int</span> dataSeed = atoi(argv[9]); <span class="comment">//seed to generate data</span>
  
  <span class="keywordtype">int</span> maxLeaves = atoi(argv[10]); <span class="comment">// number of leaves allowed in the PQ histogram</span>
                        <span class="comment">// used as one of the chains</span>
  <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
  <span class="keywordflow">if</span> (thinout &lt; 1 ) {
    <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
  }

  <span class="comment">//===========done with working on parameters==========================//</span>

  <span class="keywordflow">try</span> {
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(n, d, numHist,
        maxLoops, samplesNeeded, thinout, tol, minPoints, dataSeed, maxLeaves);

    std::string samplesCollAverageFilename = <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
  
    avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
    
    <span class="keywordflow">return</span> 0;
  }
  <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
    cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
      &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  }
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRSimsLeaves_8cpp.shtml">MCMCGRSimsLeaves.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:22 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
