<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1AdaptiveHistogramValidation.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::AdaptiveHistogramValidation Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7bebcc83720d315cbbb8c8ab85d7a945">AdaptiveHistogramValidation</a>(SPSVnode *spn, bool as)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [explicit, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c">AdaptiveHistogramValidation</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a07760421ee7a7bdf1d38cf29a1ebf5c8">AdaptiveHistogramValidation</a>(bool as)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a3ef9f2889ef3bde29457990c210094e9">AdaptiveHistogramValidation</a>(ivector &amp;v, bool as=false)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a899983cbb878e24d4e3d7e54601b7dd2">AdaptiveHistogramValidation</a>(const AdaptiveHistogramValidation &amp;other)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0">checkNodeCountForSplit</a>(const SPSVnode *const spn, bool volChecking, double minVol, size_t minChildPoints)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9">completeDataInsertionFromVec</a>(const RVecData &amp;theData, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, size_t holdOutCount, std::vector&lt; size_t &gt; &amp;numNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2">creationString</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93">dataCollection</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">get2DIAE</a>(taylor::dim2taylor(*testpnt)(taylor::dim2taylor_vector, interval))</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a034c61becd57f5d282435f5881950035">getFinMixIAE</a>(FinMix &amp;mixt)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(FinMix &amp;mixt, double tol, int deg, bool full)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abfd3760f709336024357625903d9f2e9">getHoldAllStats</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae599e0bbb226dc0610c4ec25845533d8">getIAE</a>(int distr)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a234fc6618948f692ea2458cedb4fed8f">getLeafCounts</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab9672c3fe9ee4ced96a1ad03ee12c1c9">getLeafLevels</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acba6350d62c4aa8c1d9de5589c039543">getLeafLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99">getMinVol</a>(double minVolB) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169">getRootLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a22ac33f1952cfb6b605193cddab42bae">getRootSumLeafCountOverVol</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a23a25c2169c94e019859f8efc2657c1b">getRootVcounter</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59">getSubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(AdaptiveHistogram &amp;myPart, double weight, vector&lt; int &gt; holesLoc, bool full)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7b6e78d7a069536dd096e81c6e3d8e1f">haveMadePaving</a>(const RVecData &amp;theData, const size_t dim)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd">holdAllStats</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac57fa83d1ec2fc1e9cf1565c9cc07f91">insertDataFromContainer</a>(const RVecData &amp;theData, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, size_t holdOutCount, std::vector&lt; size_t &gt; &amp;numNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ace1a6eca888d6251a7e3db5d1c59bf2b">insertFromRSSampleForHoldOut</a>(const RSSample &amp;rss, int label, const SplitDecisionObj &amp;boolTest, int holdOutCount, LOGGING_LEVEL logging)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa0d5d92e0474bfc0574340b34268dd39">insertFromRVec</a>(const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, int holdOutCount, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(const std::string &amp;s, std::vector&lt; size_t &gt; &amp;numNodes, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad8df8dae6a879dc00975edfe4a0cc3b6">insertRvectorsFromTxt</a>(const std::string &amp;s, std::vector&lt; size_t &gt; &amp;numNodes, const SplitDecisionObj &amp;boolTest, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abaa0f3ffd23bccd07a2c4a4b9a60e579">makeBox</a>(const RVecData &amp;theData, const size_t dim)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a30cd1199dfab7883a8191e501d372613">mergeUp</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad3d12ca5330306b377001a4064599430">operator+</a>(const AdaptiveHistogramValidation &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aba8d900d6f696824de3e6cb5bb99e794">operator=</a>(const AdaptiveHistogramValidation &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0286278b4e489ed8809dcb60d136dce7">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a75453f853b530cd3e2a7afccf25e39d0">outputLog</a>(const std::string &amp;s, const int i) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5">outputLogStart</a>(const std::string &amp;s) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a78d5c3ad5e31fc438e0c4cac65e73313">outputRootToTxt</a>(const std::string &amp;s, bool confirm=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24">outputToTxtTabs</a>(const std::string &amp;s, bool confirm=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea">padding</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a86feeca7ad74bc1c9ebc35f2ef0dd5e6">prioritySplit</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, long double tol, AdaptiveHistogram &amp;myPart, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a9a558b6a13ad7019acd893f0edbb107b">prioritySplit</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, long double tol, AdaptiveHistogram &amp;myPart, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, int distr, int method, size_t hist, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad076189eb2565d34b8f4998eb7330827">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, int distr, int method, size_t hist, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a63938649a46bb4a5ed5d432606b02427">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, AdaptiveHistogram &amp;myPart, double weight, std::vector&lt; int &gt; holesLoc, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae982e9b5ffc50d9893a557a09bfc89af">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, AdaptiveHistogram &amp;myPart, double weight, std::vector&lt; int &gt; holesLoc, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a46ff8e128b5d734c3839871c465bcf46">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, FinMix &amp;mixt, int method, size_t hist, size_t maxLeafNodes, int maxCheck, double tol, int deg, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a990028dc08bc4780df6a04f78b4ec644">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, FinMix &amp;mixt, int method, size_t hist, size_t maxLeafNodes, int maxCheck, double tol, int deg, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae94f662a33afa791de400341ad98cff7">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, RealMappedSPnode &amp;nodeEst, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a831814eaa200ac0fb42b5b600ec785c3">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, RealMappedSPnode &amp;nodeEst, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aeb61aa929e6edebe98d6d4fbb10a6adb">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, int method, size_t hist, size_t maxLeafNodes, RealMappedSPnode &amp;nodeEst)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab38050780c66024e0c278789b37e25ed">prioritySplitAndEstimate</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, int method, size_t hist, size_t maxLeafNodes, RealMappedSPnode &amp;nodeEst)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, AdaptiveHistogram &amp;myPart, double weight, std::vector&lt; int &gt; holesLoc, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae2684877f0996eea6f6593f1be2ab38a">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, AdaptiveHistogram &amp;myPart, double weight, std::vector&lt; int &gt; holesLoc, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8f39563ed08722fbe6be55474681abd5">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, FinMix &amp;mixt, int method, size_t hist, size_t maxLeafNodes, int maxCheck, double tol, int deg, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6bd25ba3a874dee64a2fd93984542f39">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, FinMix &amp;mixt, int method, size_t hist, size_t maxLeafNodes, int maxCheck, double tol, int deg, AdaptiveHistogramValidation &amp;opthist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae20e1507aad418b0d5aee31882b738ea">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, bool stopCrit, RealMappedSPnode &amp;nodeEst, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad3f8cf7cf11ce1214abd2559bea54393">prioritySplitAndEstimateWithSwitch</a>(const NodeCompObjVal &amp;compTest, const HistEvalObjVal &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, bool stopCrit, RealMappedSPnode &amp;nodeEst, int method, size_t hist, size_t maxLeafNodes, int maxCheck, AdaptiveHistogramValidation &amp;optHist)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c">rootBox</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c">rootVpaving</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7498bdc1663c857052e5bc147bf086f7">splitToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a26664847dd161cb938bddb579946b018">~AdaptiveHistogramValidation</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">subpavings::AdaptiveHistogramValidation</a></td><td></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:32 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
