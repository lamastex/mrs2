<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: itaylor.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('itaylor_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">itaylor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="itaylor_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">**  Copyright (C) 1999-2006 F. Blomquist, M. Braeuer, M. Grimmer,</span>
<a name="l00003"></a>00003 <span class="comment">**                          W. Hofschuster, W. Kraemer</span>
<a name="l00004"></a>00004 <span class="comment">**                          Wiss. Rechnen/Softwaretechnologie</span>
<a name="l00005"></a>00005 <span class="comment">**                          Universitaet Wuppertal, Germany   </span>
<a name="l00006"></a>00006 <span class="comment">**</span>
<a name="l00007"></a>00007 <span class="comment">**  This library is free software; you can redistribute it and/or</span>
<a name="l00008"></a>00008 <span class="comment">**  modify it under the terms of the GNU Library General Public</span>
<a name="l00009"></a>00009 <span class="comment">**  License as published by the Free Software Foundation; either</span>
<a name="l00010"></a>00010 <span class="comment">**  version 2 of the License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">**</span>
<a name="l00012"></a>00012 <span class="comment">**  This library is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">**  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">**  Library General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">**</span>
<a name="l00017"></a>00017 <span class="comment">**  You should have received a copy of the GNU Library General Public</span>
<a name="l00018"></a>00018 <span class="comment">**  License along with this library; if not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment">**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00023"></a>00023 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment">//       Implementation of class itaylor in itaylor.cpp     </span>
<a name="l00025"></a>00025 <span class="comment">//</span>
<a name="l00027"></a>00027 <span class="comment"></span>
<a name="l00029"></a>00029 <span class="comment">//     Updated by F. Blomquist, M. Grimmer</span>
<a name="l00030"></a>00030 <span class="comment">//     Extended version 05.03.2006 by M. Grimmer</span>
<a name="l00032"></a>00032 <span class="comment"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="itaylor_8hpp.shtml">itaylor.hpp</a>&quot;</span>
<a name="l00034"></a>00034 
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 <span class="comment">//                     class itaylor</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00040"></a>00040 <span class="comment"></span>
<a name="l00041"></a>00041 <span class="keyword">namespace </span>taylor {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="comment">//ivector itaylor::faks(1);</span>
<a name="l00044"></a>00044 <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=0;
<a name="l00045"></a>00045 
<a name="l00046"></a><a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">00046</a> <span class="keywordtype">void</span> <a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>()
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048   <span class="comment">/*</span>
<a name="l00049"></a>00049 <span class="comment"> Resize(itaylor::faks,0,170);</span>
<a name="l00050"></a>00050 <span class="comment"> itaylor::faks[0]=interval(1.0);</span>
<a name="l00051"></a>00051 <span class="comment"> itaylor::faks[1]=interval(1.0);</span>
<a name="l00052"></a>00052 <span class="comment"></span>
<a name="l00053"></a>00053 <span class="comment"> for(int i=2; i&lt;=170; i++)</span>
<a name="l00054"></a>00054 <span class="comment">   itaylor::faks[i]=itaylor::faks[i-1]*interval(i);</span>
<a name="l00055"></a>00055 <span class="comment">  */</span>
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// Constructors:</span>
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">00062</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a>()
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064  <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00068"></a>00068 
<a name="l00069"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a887750e3c2930fedeebe83e693d71b6b">00069</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a>(<span class="keywordtype">int</span> order)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071  <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
<a name="l00072"></a>00072  <span class="comment">/*if(order&lt;0 || order&gt;170) </span>
<a name="l00073"></a>00073 <span class="comment">  {</span>
<a name="l00074"></a>00074 <span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<a name="l00075"></a>00075 <span class="comment">              &lt;&lt; std::endl;</span>
<a name="l00076"></a>00076 <span class="comment">    exit(1);</span>
<a name="l00077"></a>00077 <span class="comment">  }</span>
<a name="l00078"></a>00078 <span class="comment"> */</span>
<a name="l00079"></a>00079  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
<a name="l00080"></a>00080  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a8ed680089fc56345b4f3408767099609">00085</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; s)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087  <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
<a name="l00088"></a>00088  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=s.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>;
<a name="l00089"></a>00089  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00090"></a>00090  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=s.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>;
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a680b6e9e675f47fc26241800635cde08">00095</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a>(<span class="keywordtype">int</span> order, <span class="keyword">const</span> real&amp; value)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097  <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
<a name="l00098"></a>00098  <span class="comment">/*</span>
<a name="l00099"></a>00099 <span class="comment"> if(order&lt;0 || order&gt;170) </span>
<a name="l00100"></a>00100 <span class="comment">  {</span>
<a name="l00101"></a>00101 <span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<a name="l00102"></a>00102 <span class="comment">              &lt;&lt; std::endl;</span>
<a name="l00103"></a>00103 <span class="comment">    exit(1);</span>
<a name="l00104"></a>00104 <span class="comment">  }</span>
<a name="l00105"></a>00105 <span class="comment"> */</span>
<a name="l00106"></a>00106  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
<a name="l00107"></a>00107  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00108"></a>00108  
<a name="l00109"></a>00109  interval interval_value=interval(value);
<a name="l00110"></a>00110  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=interval_value;
<a name="l00111"></a>00111  <span class="keywordflow">if</span>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>&gt;0)
<a name="l00112"></a>00112    {
<a name="l00113"></a>00113      <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1]=interval(1.0);
<a name="l00114"></a>00114      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
<a name="l00115"></a>00115    }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00119"></a>00119 
<a name="l00120"></a><a class="code" href="classtaylor_1_1itaylor.shtml#af8c051a56aab85f0ab6fb9f38f7b34fc">00120</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a>(<span class="keywordtype">int</span> order, <span class="keyword">const</span> interval&amp; value)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122  <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
<a name="l00123"></a>00123  <span class="comment">/* </span>
<a name="l00124"></a>00124 <span class="comment">if(order&lt;0 || order&gt;170) </span>
<a name="l00125"></a>00125 <span class="comment">  {</span>
<a name="l00126"></a>00126 <span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<a name="l00127"></a>00127 <span class="comment">              &lt;&lt; std::endl;</span>
<a name="l00128"></a>00128 <span class="comment">    exit(1);</span>
<a name="l00129"></a>00129 <span class="comment">  }</span>
<a name="l00130"></a>00130 <span class="comment"> */</span>
<a name="l00131"></a>00131  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
<a name="l00132"></a>00132  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00133"></a>00133  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=value;
<a name="l00134"></a>00134  <span class="keywordflow">if</span>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>&gt;0)
<a name="l00135"></a>00135    { 
<a name="l00136"></a>00136      <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1]=interval(1.0);
<a name="l00137"></a>00137      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
<a name="l00138"></a>00138    }
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="comment">// Functions for initialization of independent variables:</span>
<a name="l00144"></a><a class="code" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">00144</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">var_itaylor</a>(<span class="keywordtype">int</span> ord, <span class="keyword">const</span> real&amp; x)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(ord,x);
<a name="l00147"></a>00147     <span class="keywordflow">return</span> erg;
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00151"></a>00151 
<a name="l00152"></a><a class="code" href="namespacetaylor.shtml#a44a70c367b1b6a794db51766b92e6199">00152</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">var_itaylor</a>(<span class="keywordtype">int</span> ord, <span class="keyword">const</span> interval&amp; x)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(ord,x);
<a name="l00155"></a>00155     <span class="keywordflow">return</span> erg;
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">// Functions for initialization of constants:</span>
<a name="l00162"></a><a class="code" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">00162</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">const_itaylor</a>(<span class="keywordtype">int</span> ord, <span class="keyword">const</span> real&amp; c)
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(ord);
<a name="l00165"></a>00165  erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=interval(c);
<a name="l00166"></a>00166  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
<a name="l00167"></a>00167  <span class="keywordflow">return</span> erg;
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00171"></a>00171 
<a name="l00172"></a><a class="code" href="namespacetaylor.shtml#a181e11b88a03a4851d44b5cfd6adbd78">00172</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">const_itaylor</a>(<span class="keywordtype">int</span> ord, <span class="keyword">const</span> interval&amp; c)
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(ord);
<a name="l00175"></a>00175  erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=c;
<a name="l00176"></a>00176  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
<a name="l00177"></a>00177  <span class="keywordflow">return</span> erg;
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00184"></a>00184 <span class="comment">// assignment operators</span>
<a name="l00185"></a>00185 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00186"></a>00186 
<a name="l00187"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">00187</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">itaylor::operator=</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; s)
<a name="l00188"></a>00188 {
<a name="l00189"></a>00189  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=s.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>;
<a name="l00190"></a>00190  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,s.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00191"></a>00191  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=s.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>;
<a name="l00192"></a>00192  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a><a class="code" href="classtaylor_1_1itaylor.shtml#ad2d33ad63445ff588128c7c7ab81ddd2">00195</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">itaylor::operator=</a>(<span class="keywordtype">int</span> n)
<a name="l00196"></a>00196 {
<a name="l00197"></a>00197  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(n);
<a name="l00198"></a>00198  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
<a name="l00199"></a>00199  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a><a class="code" href="classtaylor_1_1itaylor.shtml#ac1bb1fd6de6d9216fb753bd2ba7ffc78">00202</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">itaylor::operator=</a>(<span class="keyword">const</span> real&amp; x)
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(x);
<a name="l00205"></a>00205  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
<a name="l00206"></a>00206  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a34d9e7d9dadf9745471bfd5379bdc57e">00209</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">itaylor::operator=</a>(<span class="keyword">const</span> interval&amp; x)
<a name="l00210"></a>00210 {
<a name="l00211"></a>00211  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x;
<a name="l00212"></a>00212  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
<a name="l00213"></a>00213  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a3e9c0bf41e486a5c9c95f107ceba0b7c">00216</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">itaylor::operator=</a>(<span class="keyword">const</span> ivector&amp; iv) <span class="comment">//added,mg,2005-08</span>
<a name="l00217"></a>00217                                               <span class="comment">//const since C-XSC 2.1,mg,2006-02</span>
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 { 
<a name="l00220"></a>00220  <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=VecLen(iv)-1;
<a name="l00221"></a>00221  Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
<a name="l00222"></a>00222  <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=iv;
<a name="l00223"></a>00223  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00224"></a>00224 }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00227"></a>00227 <span class="comment">// relational operators</span>
<a name="l00228"></a>00228 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="classtaylor_1_1itaylor.shtml#ab0651bb54b7671f3443d3f939fbe2510">00230</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#ab0651bb54b7671f3443d3f939fbe2510">itaylor::operator==</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)     <span class="comment">//added, mg2005-08</span>
<a name="l00231"></a>00231 {
<a name="l00232"></a>00232   <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>));
<a name="l00233"></a>00233 }
<a name="l00234"></a>00234 
<a name="l00235"></a><a class="code" href="classtaylor_1_1itaylor.shtml#aa7041b3ebe493a059d6dfaee28faf82c">00235</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#aa7041b3ebe493a059d6dfaee28faf82c">itaylor::operator!=</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)     <span class="comment">//added, mg2005-08</span>
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237   <span class="keywordflow">return</span> (!((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>)));
<a name="l00238"></a>00238 }
<a name="l00239"></a>00239 
<a name="l00240"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a7b823770abba6bdcf6c2091caee5381d">00240</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a7b823770abba6bdcf6c2091caee5381d">itaylor::operator&lt;=</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)     <span class="comment">//added, mg2005-08</span>
<a name="l00241"></a>00241 {
<a name="l00242"></a>00242   <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&lt;=it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>));
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00245"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a5f4eaaa8772c9146900a951b8e53e2c6">00245</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a5f4eaaa8772c9146900a951b8e53e2c6">itaylor::operator&lt;</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)      <span class="comment">//added, mg2005-08</span>
<a name="l00246"></a>00246 {
<a name="l00247"></a>00247   <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&lt;it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>));
<a name="l00248"></a>00248 }
<a name="l00249"></a>00249 
<a name="l00250"></a><a class="code" href="classtaylor_1_1itaylor.shtml#acaf2ba4e4dcb012aed6a469a30ad5682">00250</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#acaf2ba4e4dcb012aed6a469a30ad5682">itaylor::operator&gt;=</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)     <span class="comment">//added, mg2005-08</span>
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252   <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&gt;=it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>));
<a name="l00253"></a>00253 }
<a name="l00254"></a>00254 
<a name="l00255"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a47ca76c8135b9bd62998e85c427fb232">00255</a> <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a47ca76c8135b9bd62998e85c427fb232">itaylor::operator&gt;</a>(<a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; it)      <span class="comment">//added, mg2005-08</span>
<a name="l00256"></a>00256 {
<a name="l00257"></a>00257   <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&gt;it.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>));
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00261"></a>00261 <span class="comment">// component access</span>
<a name="l00262"></a>00262 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00263"></a>00263 
<a name="l00264"></a><a class="code" href="classtaylor_1_1itaylor.shtml#a3674126b2d14cc05e23c7150b52d0a8f">00264</a> interval&amp; <a class="code" href="classtaylor_1_1itaylor.shtml#a3674126b2d14cc05e23c7150b52d0a8f">itaylor::operator[]</a>(<span class="keywordtype">int</span> n) <span class="comment">//added, mg2005-08</span>
<a name="l00265"></a>00265 <span class="comment">// r/w access -&gt; not const </span>
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267  <span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[n];
<a name="l00268"></a>00268 }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="comment">// class components:</span>
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="comment">// returning the maximal order</span>
<a name="l00276"></a><a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">00276</a> <span class="keywordtype">int</span> <a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278  <span class="keywordflow">return</span> x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>;
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="comment">// returning all Taylor-coefficients by an interval vector</span>
<a name="l00284"></a><a class="code" href="namespacetaylor.shtml#a50419e8b461f8b4155495d943cbc4469">00284</a> ivector <a class="code" href="namespacetaylor.shtml#a50419e8b461f8b4155495d943cbc4469">get_all_coef</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00285"></a>00285 {
<a name="l00286"></a>00286  <span class="keywordflow">return</span> x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>;
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="comment">// returning Taylor-coefficient of order j</span>
<a name="l00292"></a><a class="code" href="namespacetaylor.shtml#a6694e32c6d5d68b7081fe4079435279e">00292</a> interval <a class="code" href="namespacetaylor.shtml#a6694e32c6d5d68b7081fe4079435279e">get_j_coef</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> j)
<a name="l00293"></a>00293 {
<a name="l00294"></a>00294  <span class="keywordflow">return</span> x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00298"></a>00298 <span class="comment">/*</span>
<a name="l00299"></a>00299 <span class="comment">// returning derivative of order j,  j &lt;= 170;</span>
<a name="l00300"></a>00300 <span class="comment">interval get_j_derive(const itaylor&amp; x, int j)</span>
<a name="l00301"></a>00301 <span class="comment">{</span>
<a name="l00302"></a>00302 <span class="comment">  return x.tayl[j]*itaylor::faks[j];</span>
<a name="l00303"></a>00303 <span class="comment">}</span>
<a name="l00304"></a>00304 <span class="comment">*/</span>
<a name="l00305"></a>00305 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="comment">// Output of all taylor coefficients </span>
<a name="l00308"></a><a class="code" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">00308</a> <span class="keywordtype">void</span> <a class="code" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">print_itaylor</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310  std::cerr &lt;&lt;<span class="stringliteral">&quot;Output itaylor of order &quot;</span> &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
<a name="l00311"></a>00311  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) 
<a name="l00312"></a>00312   {
<a name="l00313"></a>00313    std::cerr &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span> &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] &lt;&lt; std::endl;
<a name="l00314"></a>00314   };
<a name="l00315"></a>00315  std::cerr &lt;&lt; std::endl;
<a name="l00316"></a>00316 }
<a name="l00317"></a>00317 
<a name="l00318"></a><a class="code" href="namespacetaylor.shtml#a48b8404764aa49f337985ba478f4e201">00318</a> <span class="keywordtype">void</span> <a class="code" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">print_itaylor</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> digits)  
<a name="l00319"></a>00319                                              <span class="comment">// added, mg2005,2006</span>
<a name="l00320"></a>00320 {
<a name="l00321"></a>00321  os &lt;&lt;<span class="stringliteral">&quot;Ausgabe itaylor der Ordnung &quot;</span> &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
<a name="l00322"></a>00322  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) 
<a name="l00323"></a>00323   {
<a name="l00324"></a>00324    os &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span>;
<a name="l00325"></a>00325    <span class="keywordflow">if</span> (width&gt;0||digits&gt;0) os &lt;&lt; SetPrecision(width,digits);
<a name="l00326"></a>00326    os &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] &lt;&lt; std::endl;
<a name="l00327"></a>00327   };
<a name="l00328"></a>00328  os &lt;&lt; std::endl;
<a name="l00329"></a>00329 }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00332"></a>00332 
<a name="l00333"></a><a class="code" href="namespacetaylor.shtml#af2f42b7045a6bc7bdf5225bb5b7f07bc">00333</a> std::ostream&amp; <a class="code" href="namespacetaylor.shtml#a23cd9841df525cfac085fbeb62bf52a9">operator&lt;&lt; </a>(std::ostream&amp; os, <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00334"></a>00334                                              <span class="comment">// added, mg2005-08</span>
<a name="l00335"></a>00335 {
<a name="l00336"></a>00336  os &lt;&lt;<span class="stringliteral">&quot;[itaylor object, order &quot;</span> &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a> &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
<a name="l00337"></a>00337  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) 
<a name="l00338"></a>00338   {
<a name="l00339"></a>00339    os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;
<a name="l00340"></a>00340    os &lt;&lt; x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] &lt;&lt; std::endl;
<a name="l00341"></a>00341   };
<a name="l00342"></a>00342  os &lt;&lt; std::endl;
<a name="l00343"></a>00343  <span class="keywordflow">return</span> os;
<a name="l00344"></a>00344 }                                
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="comment">// Overloading of operators:</span>
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="comment">// - operator:</span>
<a name="l00354"></a><a class="code" href="namespacetaylor.shtml#a92d08c093471e48086af561e044283d2">00354</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00355"></a>00355 {
<a name="l00356"></a>00356  <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l00357"></a>00357  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00358"></a>00358  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= -x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00359"></a>00359  <span class="keywordflow">return</span> erg;
<a name="l00360"></a>00360 }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 <span class="comment">// Operators with two operands:  +,-,*,/  for (itaylor, itaylor):</span>
<a name="l00365"></a>00365 <span class="comment">// All operands are independent variables.</span>
<a name="l00366"></a><a class="code" href="namespacetaylor.shtml#a3a700687e786e96af9fb63575f941188">00366</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00367"></a>00367 {
<a name="l00368"></a>00368  <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l00369"></a>00369  <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
<a name="l00370"></a>00370  <span class="keywordflow">if</span>(order1 != order2) 
<a name="l00371"></a>00371   {
<a name="l00372"></a>00372    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator - : different orders &quot;</span> 
<a name="l00373"></a>00373              &lt;&lt; std::endl;
<a name="l00374"></a>00374    exit(1);
<a name="l00375"></a>00375   };
<a name="l00376"></a>00376 
<a name="l00377"></a>00377  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order1);
<a name="l00378"></a>00378  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]-y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00379"></a>00379  <span class="keywordflow">return</span> erg; 
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00383"></a>00383 
<a name="l00384"></a><a class="code" href="namespacetaylor.shtml#a02e03dd1f37b791466c6ceaff7dadb36">00384</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00385"></a>00385 {
<a name="l00386"></a>00386  <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l00387"></a>00387  <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
<a name="l00388"></a>00388  <span class="keywordflow">if</span>(order1 != order2) 
<a name="l00389"></a>00389   {
<a name="l00390"></a>00390    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator + : different orders &quot;</span> 
<a name="l00391"></a>00391              &lt;&lt; std::endl;
<a name="l00392"></a>00392    exit(1);
<a name="l00393"></a>00393   };
<a name="l00394"></a>00394 
<a name="l00395"></a>00395  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order1);
<a name="l00396"></a>00396  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]+y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00397"></a>00397  <span class="keywordflow">return</span> erg; 
<a name="l00398"></a>00398 }
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00401"></a>00401 
<a name="l00402"></a><a class="code" href="namespacetaylor.shtml#a67bd05fe808051b2bd312fb3f488d448">00402</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00403"></a>00403 {
<a name="l00404"></a>00404  <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l00405"></a>00405  <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
<a name="l00406"></a>00406  <span class="keywordflow">if</span>(order1 != order2) 
<a name="l00407"></a>00407   {
<a name="l00408"></a>00408    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator * : different orders &quot;</span> 
<a name="l00409"></a>00409              &lt;&lt; std::endl;
<a name="l00410"></a>00410    exit(1);
<a name="l00411"></a>00411   };
<a name="l00412"></a>00412 
<a name="l00413"></a>00413  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order1);
<a name="l00414"></a>00414  interval sum; 
<a name="l00415"></a>00415  idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>
<a name="l00416"></a>00416 
<a name="l00417"></a>00417  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
<a name="l00418"></a>00418  {
<a name="l00419"></a>00419   sum_idot=interval(0);
<a name="l00420"></a>00420   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j; i++)
<a name="l00421"></a>00421    {
<a name="l00422"></a>00422     accumulate(sum_idot, x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i],y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i]);
<a name="l00423"></a>00423    }
<a name="l00424"></a>00424   rnd(sum_idot,sum);
<a name="l00425"></a>00425   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= sum;
<a name="l00426"></a>00426  }
<a name="l00427"></a>00427  <span class="keywordflow">return</span> erg; 
<a name="l00428"></a>00428 }
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00431"></a>00431 
<a name="l00432"></a><a class="code" href="namespacetaylor.shtml#a782087dc9a12d1b6eb6ecd189b7454f8">00432</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00433"></a>00433 {
<a name="l00434"></a>00434  <span class="keywordtype">int</span> order1(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00435"></a>00435  <span class="keywordtype">int</span> order2(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00436"></a>00436  <span class="keywordflow">if</span>(order1 != order2) 
<a name="l00437"></a>00437   {
<a name="l00438"></a>00438    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : different orders &quot;</span> 
<a name="l00439"></a>00439              &lt;&lt; std::endl;
<a name="l00440"></a>00440    exit(1);
<a name="l00441"></a>00441   };
<a name="l00442"></a>00442  
<a name="l00443"></a>00443  <span class="keywordflow">if</span>(0 &lt;= y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l00444"></a>00444   {
<a name="l00445"></a>00445    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> &lt;&lt; std::endl;
<a name="l00446"></a>00446    exit(1);
<a name="l00447"></a>00447   };
<a name="l00448"></a>00448 
<a name="l00449"></a>00449  <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order1);
<a name="l00450"></a>00450  interval sum; 
<a name="l00451"></a>00451  idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>
<a name="l00452"></a>00452 
<a name="l00453"></a>00453  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
<a name="l00454"></a>00454  {
<a name="l00455"></a>00455   sum_idot=interval(0);
<a name="l00456"></a>00456   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j; i++)
<a name="l00457"></a>00457    {
<a name="l00458"></a>00458     accumulate(sum_idot, y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i],erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i]);
<a name="l00459"></a>00459    }
<a name="l00460"></a>00460   rnd(sum_idot,sum);
<a name="l00461"></a>00461   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= (x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]-sum)/y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00462"></a>00462  }
<a name="l00463"></a>00463  <span class="keywordflow">return</span> erg;
<a name="l00464"></a>00464 }
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 <span class="comment">// Operators with two operands:   +,-,*,/  for (interval, itaylor):</span>
<a name="l00469"></a>00469 <span class="comment">// The operand of type interval is assumed to be a constant and not</span>
<a name="l00470"></a>00470 <span class="comment">// an independent variable!</span>
<a name="l00471"></a>00471 
<a name="l00472"></a><a class="code" href="namespacetaylor.shtml#ac0be684300be0c2c140b5f21a18a021d">00472</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> interval&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00473"></a>00473 {
<a name="l00474"></a>00474     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00475"></a>00475     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00476"></a>00476     erg = -y;
<a name="l00477"></a>00477     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x - y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00478"></a>00478     <span class="keywordflow">return</span> erg;
<a name="l00479"></a>00479 }
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00482"></a>00482 
<a name="l00483"></a><a class="code" href="namespacetaylor.shtml#a0ccc4b187f19c84e174cff0e0415baf9">00483</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> interval&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00484"></a>00484 {
<a name="l00485"></a>00485     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00486"></a>00486     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00487"></a>00487     erg = y;
<a name="l00488"></a>00488     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x + y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00489"></a>00489     <span class="keywordflow">return</span> erg;
<a name="l00490"></a>00490 }
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00493"></a>00493 
<a name="l00494"></a><a class="code" href="namespacetaylor.shtml#a852eb06a98b349480553d8124724dbc0">00494</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> interval&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00495"></a>00495 {
<a name="l00496"></a>00496     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00497"></a>00497     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00498"></a>00498     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x*y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00499"></a>00499     <span class="keywordflow">return</span> erg;
<a name="l00500"></a>00500 }
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00503"></a>00503 
<a name="l00504"></a><a class="code" href="namespacetaylor.shtml#a38d9e25f2193b6de0fb6a5a235c4a617">00504</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> interval&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00505"></a>00505 {
<a name="l00506"></a>00506     <span class="keywordflow">if</span> (0&lt;=y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])
<a name="l00507"></a>00507     {
<a name="l00508"></a>00508   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
<a name="l00509"></a>00509                   &lt;&lt; std::endl;
<a name="l00510"></a>00510   exit(1);
<a name="l00511"></a>00511     }; 
<a name="l00512"></a>00512     idotprecision idot;
<a name="l00513"></a>00513     interval sum;
<a name="l00514"></a>00514     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00515"></a>00515     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> w(order);
<a name="l00516"></a>00516     w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00517"></a>00517     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00518"></a>00518     {
<a name="l00519"></a>00519   idot=0;
<a name="l00520"></a>00520   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
<a name="l00521"></a>00521       accumulate(idot,y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l00522"></a>00522   rnd(idot,sum);
<a name="l00523"></a>00523   w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = -sum / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00524"></a>00524     }
<a name="l00525"></a>00525     <span class="keywordflow">return</span> w;
<a name="l00526"></a>00526 }
<a name="l00527"></a>00527 
<a name="l00528"></a>00528 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00529"></a>00529 
<a name="l00530"></a>00530 <span class="comment">// Operators with two operands:   +,-,*,/  for (itaylor, interval):</span>
<a name="l00531"></a>00531 <span class="comment">// The operand of type interval is assumed to be a constant and not</span>
<a name="l00532"></a>00532 <span class="comment">// an independent variable!</span>
<a name="l00533"></a>00533 
<a name="l00534"></a><a class="code" href="namespacetaylor.shtml#a5fbafc16645c05d60634be3ba1ae75fe">00534</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> interval&amp; y)
<a name="l00535"></a>00535 {
<a name="l00536"></a>00536     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00537"></a>00537     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00538"></a>00538     erg = x;
<a name="l00539"></a>00539     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] - y;
<a name="l00540"></a>00540     <span class="keywordflow">return</span> erg;
<a name="l00541"></a>00541 }
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00544"></a>00544 
<a name="l00545"></a><a class="code" href="namespacetaylor.shtml#a73e071be2c515e2213963c5d4adfd978">00545</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> interval&amp; y)
<a name="l00546"></a>00546 {
<a name="l00547"></a>00547     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00548"></a>00548     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00549"></a>00549     erg = x;
<a name="l00550"></a>00550     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] + y;
<a name="l00551"></a>00551     <span class="keywordflow">return</span> erg;
<a name="l00552"></a>00552 }
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00555"></a>00555 
<a name="l00556"></a><a class="code" href="namespacetaylor.shtml#a464e53f823f12c772db53cf1a34583d6">00556</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> interval&amp; y)
<a name="l00557"></a>00557 {
<a name="l00558"></a>00558     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00559"></a>00559     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00560"></a>00560     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*y;
<a name="l00561"></a>00561     <span class="keywordflow">return</span> erg;
<a name="l00562"></a>00562 }
<a name="l00563"></a>00563 
<a name="l00564"></a>00564 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00565"></a>00565 
<a name="l00566"></a><a class="code" href="namespacetaylor.shtml#aa35f5bbbbd3b7efecf6db9a0900e3a58">00566</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> interval&amp; y)
<a name="l00567"></a>00567 {
<a name="l00568"></a>00568     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00569"></a>00569     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00570"></a>00570     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]/y;
<a name="l00571"></a>00571     <span class="keywordflow">return</span> erg;
<a name="l00572"></a>00572 }
<a name="l00573"></a>00573 
<a name="l00574"></a>00574 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00575"></a>00575 
<a name="l00576"></a>00576 <span class="comment">// Operators with two operands:   +,-,*,/  for (real, itaylor):</span>
<a name="l00577"></a>00577 <span class="comment">// The operand of type real is assumed to be a constant and not</span>
<a name="l00578"></a>00578 <span class="comment">// an independent variable!</span>
<a name="l00579"></a>00579 
<a name="l00580"></a><a class="code" href="namespacetaylor.shtml#aea48d1e448300b1b05ce34a3c9228fd6">00580</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> real&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00581"></a>00581 {
<a name="l00582"></a>00582     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00583"></a>00583     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00584"></a>00584     erg = -y;
<a name="l00585"></a>00585     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x - y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00586"></a>00586     <span class="keywordflow">return</span> erg;
<a name="l00587"></a>00587 }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00590"></a>00590 
<a name="l00591"></a><a class="code" href="namespacetaylor.shtml#a401f53ac76107b6d9b890b4b0ecbd423">00591</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> real&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00592"></a>00592 {
<a name="l00593"></a>00593     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00594"></a>00594     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00595"></a>00595     erg = y;
<a name="l00596"></a>00596     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x + y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00597"></a>00597     <span class="keywordflow">return</span> erg;
<a name="l00598"></a>00598 }
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00601"></a>00601 
<a name="l00602"></a><a class="code" href="namespacetaylor.shtml#afb0205c63be46b8c4d65b46f0f2c63d5">00602</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> real&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00603"></a>00603 {
<a name="l00604"></a>00604     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00605"></a>00605     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00606"></a>00606     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x*y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00607"></a>00607     <span class="keywordflow">return</span> erg;
<a name="l00608"></a>00608 }
<a name="l00609"></a>00609 
<a name="l00610"></a>00610 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00611"></a>00611 
<a name="l00612"></a><a class="code" href="namespacetaylor.shtml#ab62d7c3647e2a62d7863f6cb838ed71f">00612</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> real&amp; x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00613"></a>00613 {
<a name="l00614"></a>00614     <span class="keywordflow">if</span> (0&lt;=y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])
<a name="l00615"></a>00615     {
<a name="l00616"></a>00616   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
<a name="l00617"></a>00617                   &lt;&lt; std::endl;
<a name="l00618"></a>00618   exit(1);
<a name="l00619"></a>00619     }; 
<a name="l00620"></a>00620     idotprecision idot;
<a name="l00621"></a>00621     interval sum;
<a name="l00622"></a>00622     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00623"></a>00623     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> w(order);
<a name="l00624"></a>00624     w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00625"></a>00625     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00626"></a>00626     {
<a name="l00627"></a>00627   idot=0;
<a name="l00628"></a>00628   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
<a name="l00629"></a>00629       accumulate(idot,y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l00630"></a>00630   rnd(idot,sum);
<a name="l00631"></a>00631   w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = -sum / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00632"></a>00632     }
<a name="l00633"></a>00633     <span class="keywordflow">return</span> w;
<a name="l00634"></a>00634 }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00637"></a>00637 
<a name="l00638"></a>00638 <span class="comment">// Operators with two operands:   +,-,*,/  for (itaylor, real):</span>
<a name="l00639"></a>00639 <span class="comment">// The operand of type real is assumed to be a constant and not</span>
<a name="l00640"></a>00640 <span class="comment">// an independent variable!</span>
<a name="l00641"></a>00641 
<a name="l00642"></a><a class="code" href="namespacetaylor.shtml#a32e05ef71dbf31a76381ce8e36d8684d">00642</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> real&amp; y)
<a name="l00643"></a>00643 {
<a name="l00644"></a>00644     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00645"></a>00645     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00646"></a>00646     erg = x;
<a name="l00647"></a>00647     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] - y;
<a name="l00648"></a>00648     <span class="keywordflow">return</span> erg;
<a name="l00649"></a>00649 }
<a name="l00650"></a>00650 
<a name="l00651"></a>00651 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00652"></a>00652 
<a name="l00653"></a><a class="code" href="namespacetaylor.shtml#aa32df806dfcdb79632f619d6e725877b">00653</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> real&amp; y)
<a name="l00654"></a>00654 {
<a name="l00655"></a>00655     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00656"></a>00656     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00657"></a>00657     erg = x;
<a name="l00658"></a>00658     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] + y;
<a name="l00659"></a>00659     <span class="keywordflow">return</span> erg;
<a name="l00660"></a>00660 }
<a name="l00661"></a>00661 
<a name="l00662"></a>00662 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00663"></a>00663 
<a name="l00664"></a><a class="code" href="namespacetaylor.shtml#ac5cd097e68711b10ef867594c1c4873e">00664</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> real&amp; y)
<a name="l00665"></a>00665 {
<a name="l00666"></a>00666     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00667"></a>00667     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00668"></a>00668     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*y;
<a name="l00669"></a>00669     <span class="keywordflow">return</span> erg;
<a name="l00670"></a>00670 }
<a name="l00671"></a>00671 
<a name="l00672"></a>00672 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00673"></a>00673 
<a name="l00674"></a><a class="code" href="namespacetaylor.shtml#a240b2c541cf0d46b9a7810987448631c">00674</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> real&amp; y)
<a name="l00675"></a>00675 {
<a name="l00676"></a>00676     <span class="keywordflow">if</span> (y==0)
<a name="l00677"></a>00677     {
<a name="l00678"></a>00678   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
<a name="l00679"></a>00679                   &lt;&lt; std::endl;
<a name="l00680"></a>00680   exit(1);
<a name="l00681"></a>00681     };
<a name="l00682"></a>00682     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00683"></a>00683     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00684"></a>00684     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]/y;
<a name="l00685"></a>00685     <span class="keywordflow">return</span> erg;
<a name="l00686"></a>00686 }
<a name="l00687"></a>00687 
<a name="l00688"></a>00688 <span class="comment">// Operators with two operands:   +,-,*,/  for (int, itaylor):</span>
<a name="l00689"></a>00689 <span class="comment">// The operand of type real is assumed to be a constant and not</span>
<a name="l00690"></a>00690 <span class="comment">// an independent variable!</span>
<a name="l00691"></a>00691 
<a name="l00692"></a><a class="code" href="namespacetaylor.shtml#a8ba1d848b912b57f58e2dbbbb1da7091">00692</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keywordtype">int</span> x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00693"></a>00693 {
<a name="l00694"></a>00694     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00695"></a>00695     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00696"></a>00696     erg = -y;
<a name="l00697"></a>00697     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(x) - y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00698"></a>00698     <span class="keywordflow">return</span> erg;
<a name="l00699"></a>00699 }
<a name="l00700"></a>00700 
<a name="l00701"></a>00701 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00702"></a>00702 
<a name="l00703"></a><a class="code" href="namespacetaylor.shtml#ad3050b08b9a846b6b6d7556593d4d43f">00703</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keywordtype">int</span> x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00704"></a>00704 {
<a name="l00705"></a>00705     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00706"></a>00706     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00707"></a>00707     erg = y;
<a name="l00708"></a>00708     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(x) + y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00709"></a>00709     <span class="keywordflow">return</span> erg;
<a name="l00710"></a>00710 }
<a name="l00711"></a>00711 
<a name="l00712"></a>00712 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00713"></a>00713 
<a name="l00714"></a><a class="code" href="namespacetaylor.shtml#a0584bb8817c35fb018eb6a16346396fa">00714</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keywordtype">int</span> x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00715"></a>00715 {
<a name="l00716"></a>00716     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00717"></a>00717     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00718"></a>00718     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = interval(x)*y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j];
<a name="l00719"></a>00719     <span class="keywordflow">return</span> erg;
<a name="l00720"></a>00720 }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00723"></a>00723 
<a name="l00724"></a><a class="code" href="namespacetaylor.shtml#aa68052fbd6ae385609fb861cd61c970d">00724</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keywordtype">int</span> x, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; y)
<a name="l00725"></a>00725 {
<a name="l00726"></a>00726     <span class="keywordflow">if</span> (0&lt;=y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])
<a name="l00727"></a>00727     {
<a name="l00728"></a>00728   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
<a name="l00729"></a>00729                   &lt;&lt; std::endl;
<a name="l00730"></a>00730   exit(1);
<a name="l00731"></a>00731     }; 
<a name="l00732"></a>00732     idotprecision idot;
<a name="l00733"></a>00733     interval sum;
<a name="l00734"></a>00734     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
<a name="l00735"></a>00735     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> w(order);
<a name="l00736"></a>00736     w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(x) / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00737"></a>00737     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00738"></a>00738     {
<a name="l00739"></a>00739   idot=0;
<a name="l00740"></a>00740   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
<a name="l00741"></a>00741       accumulate(idot,y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l00742"></a>00742   rnd(idot,sum);
<a name="l00743"></a>00743   w.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = -sum / y.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00744"></a>00744     }
<a name="l00745"></a>00745     <span class="keywordflow">return</span> w;
<a name="l00746"></a>00746 }
<a name="l00747"></a>00747 
<a name="l00748"></a>00748 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00749"></a>00749 
<a name="l00750"></a>00750 <span class="comment">// Operators with two operands:   +,-,*,/  for (itaylor, int):</span>
<a name="l00751"></a>00751 <span class="comment">// The operand of type real is assumed to be a constant and not</span>
<a name="l00752"></a>00752 <span class="comment">// an independent variable!</span>
<a name="l00753"></a>00753 
<a name="l00754"></a><a class="code" href="namespacetaylor.shtml#a99a5e76ba886177f7789b309a1321c32">00754</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> y)
<a name="l00755"></a>00755 {
<a name="l00756"></a>00756     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00757"></a>00757     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00758"></a>00758     erg = x;
<a name="l00759"></a>00759     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] - interval(y);
<a name="l00760"></a>00760     <span class="keywordflow">return</span> erg;
<a name="l00761"></a>00761 }
<a name="l00762"></a>00762 
<a name="l00763"></a>00763 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00764"></a>00764 
<a name="l00765"></a><a class="code" href="namespacetaylor.shtml#ad7810135b75df4525eeaa320940436d3">00765</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> y)
<a name="l00766"></a>00766 {
<a name="l00767"></a>00767     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00768"></a>00768     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00769"></a>00769     erg = x;
<a name="l00770"></a>00770     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] + interval(y);
<a name="l00771"></a>00771     <span class="keywordflow">return</span> erg;
<a name="l00772"></a>00772 }
<a name="l00773"></a>00773 
<a name="l00774"></a>00774 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00775"></a>00775 
<a name="l00776"></a><a class="code" href="namespacetaylor.shtml#aabf6fb8b1928b06ac73dfc55bee2e993">00776</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> y)
<a name="l00777"></a>00777 {
<a name="l00778"></a>00778     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00779"></a>00779     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00780"></a>00780     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*interval(y);
<a name="l00781"></a>00781     <span class="keywordflow">return</span> erg;
<a name="l00782"></a>00782 }
<a name="l00783"></a>00783 
<a name="l00784"></a>00784 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00785"></a>00785 
<a name="l00786"></a><a class="code" href="namespacetaylor.shtml#a770113818b5fc83f7eefe876cbdd8295">00786</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> y)
<a name="l00787"></a>00787 {
<a name="l00788"></a>00788     <span class="keywordflow">if</span> (y==0)
<a name="l00789"></a>00789     {
<a name="l00790"></a>00790   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
<a name="l00791"></a>00791                   &lt;&lt; std::endl;
<a name="l00792"></a>00792   exit(1);
<a name="l00793"></a>00793     };
<a name="l00794"></a>00794     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00795"></a>00795     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00796"></a>00796     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]/interval(y);
<a name="l00797"></a>00797     <span class="keywordflow">return</span> erg;
<a name="l00798"></a>00798 }
<a name="l00799"></a>00799 
<a name="l00800"></a>00800 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 <span class="comment">// Overloading the standard functions:</span>
<a name="l00803"></a>00803 
<a name="l00804"></a>00804 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00805"></a>00805 
<a name="l00806"></a>00806 <span class="comment">// Help function</span>
<a name="l00807"></a><a class="code" href="namespacetaylor.shtml#a9962829203c2ce858b9158543d577e0d">00807</a> <span class="keywordtype">void</span> <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; g, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; u, <span class="keywordtype">int</span> nb_function)
<a name="l00808"></a>00808 {
<a name="l00809"></a>00809  <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(f);
<a name="l00810"></a>00810  <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(g);
<a name="l00811"></a>00811  <span class="keywordtype">int</span> order3=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(u);
<a name="l00812"></a>00812 
<a name="l00813"></a>00813  <span class="comment">// The following errors should be caught before </span>
<a name="l00814"></a>00814  <span class="comment">// but for security here again:</span>
<a name="l00815"></a>00815  <span class="keywordflow">if</span>(order1 != order2) 
<a name="l00816"></a>00816   {
<a name="l00817"></a>00817    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error1 in f_g_u: different orders &quot;</span> 
<a name="l00818"></a>00818              &lt;&lt; std::endl;
<a name="l00819"></a>00819    exit(1);
<a name="l00820"></a>00820   };
<a name="l00821"></a>00821 
<a name="l00822"></a>00822  <span class="keywordflow">if</span>(order3 != order2) 
<a name="l00823"></a>00823   {
<a name="l00824"></a>00824    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error2 in f_g_u: different orders &quot;</span> &lt;&lt; std::endl;
<a name="l00825"></a>00825    exit(1);
<a name="l00826"></a>00826   };
<a name="l00827"></a>00827 
<a name="l00828"></a>00828  <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l00829"></a>00829   {
<a name="l00830"></a>00830    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in f_g_u : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l00831"></a>00831    exit(1);
<a name="l00832"></a>00832   }; 
<a name="l00833"></a>00833 
<a name="l00834"></a>00834  <span class="keywordflow">switch</span>(nb_function) <span class="comment">// element No. 0</span>
<a name="l00835"></a>00835    {
<a name="l00836"></a>00836     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00837"></a>00837 
<a name="l00838"></a>00838     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00839"></a>00839     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00840"></a>00840 
<a name="l00841"></a>00841     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00842"></a>00842     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00843"></a>00843     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00844"></a>00844     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00845"></a>00845 
<a name="l00846"></a>00846     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00847"></a>00847     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>; 
<a name="l00848"></a>00848 
<a name="l00849"></a>00849     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00850"></a>00850     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00851"></a>00851     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00852"></a>00852 
<a name="l00853"></a>00853     <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>:f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="keywordflow">break</span>;
<a name="l00854"></a>00854    }
<a name="l00855"></a>00855  
<a name="l00856"></a>00856  <span class="comment">// remaining elements:</span>
<a name="l00857"></a>00857  interval sum; 
<a name="l00858"></a>00858  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) 
<a name="l00859"></a>00859  {
<a name="l00860"></a>00860      sum = interval(0);
<a name="l00861"></a>00861      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j-1; i++)
<a name="l00862"></a>00862    sum += interval(i)*f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]*g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l00863"></a>00863      f.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] = (u.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]-sum/interval(j)) / g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00864"></a>00864  }
<a name="l00865"></a>00865 }
<a name="l00866"></a>00866 
<a name="l00867"></a>00867 <span class="comment">// sqr-function</span>
<a name="l00868"></a><a class="code" href="namespacetaylor.shtml#a37319bcf4ecec3b74d87c39c9b5a8fce">00868</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00869"></a>00869 {
<a name="l00870"></a>00870     idotprecision idot;
<a name="l00871"></a>00871     interval sum;
<a name="l00872"></a>00872     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
<a name="l00873"></a>00873     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00874"></a>00874 
<a name="l00875"></a>00875     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l00876"></a>00876     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00877"></a>00877     {
<a name="l00878"></a>00878   m = (k+1) / 2;
<a name="l00879"></a>00879   idot = 0;
<a name="l00880"></a>00880   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=m-1; j++) 
<a name="l00881"></a>00881       accumulate(idot,x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l00882"></a>00882   rnd(idot,sum);
<a name="l00883"></a>00883   times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
<a name="l00884"></a>00884   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = sum;
<a name="l00885"></a>00885   <span class="keywordflow">if</span> (k%2==0) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[m]); <span class="comment">// k even </span>
<a name="l00886"></a>00886     }
<a name="l00887"></a>00887     <span class="keywordflow">return</span> erg; 
<a name="l00888"></a>00888 }
<a name="l00889"></a>00889 
<a name="l00890"></a>00890 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00891"></a>00891 
<a name="l00892"></a>00892 <span class="comment">// Square-root</span>
<a name="l00893"></a>00893 
<a name="l00894"></a><a class="code" href="namespacetaylor.shtml#a5a055d2fa829aab1ef9d9d452dbf635b">00894</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00895"></a>00895 {
<a name="l00896"></a>00896     idotprecision idot;
<a name="l00897"></a>00897     interval sum,h;
<a name="l00898"></a>00898     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
<a name="l00899"></a>00899     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00900"></a>00900     <span class="keywordflow">if</span> (0&lt;=x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt: 0 in interval&quot;</span> &lt;&lt; std::endl;
<a name="l00903"></a>00903   exit(1);
<a name="l00904"></a>00904     };
<a name="l00905"></a>00905     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l00906"></a>00906     h = erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l00907"></a>00907     times2pown(h,1);
<a name="l00908"></a>00908     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00909"></a>00909     {
<a name="l00910"></a>00910   m = (k+1) / 2;
<a name="l00911"></a>00911   idot = 0;
<a name="l00912"></a>00912   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
<a name="l00913"></a>00913       accumulate(idot,erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l00914"></a>00914   rnd(idot,sum);
<a name="l00915"></a>00915   times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
<a name="l00916"></a>00916   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = sum;
<a name="l00917"></a>00917   <span class="keywordflow">if</span> (k%2==0) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[m]); <span class="comment">// k even </span>
<a name="l00918"></a>00918   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = (x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]-erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]) / h;
<a name="l00919"></a>00919     }
<a name="l00920"></a>00920     <span class="keywordflow">return</span> erg;
<a name="l00921"></a>00921 }
<a name="l00922"></a>00922 
<a name="l00923"></a>00923 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00924"></a>00924 
<a name="l00925"></a>00925 <span class="comment">// sqrt(x,n)</span>
<a name="l00926"></a>00926 
<a name="l00927"></a><a class="code" href="namespacetaylor.shtml#af9650236965b00326a3be8175c47789c">00927</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keywordtype">int</span> n)
<a name="l00928"></a>00928 {
<a name="l00929"></a>00929     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l00930"></a>00930     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l00931"></a>00931     <span class="keywordflow">if</span> (0&lt;=x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l00932"></a>00932     {
<a name="l00933"></a>00933   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt(x,n): 0 in interval&quot;</span> &lt;&lt; std::endl;
<a name="l00934"></a>00934   exit(1);
<a name="l00935"></a>00935     };
<a name="l00936"></a>00936     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0],n); <span class="comment">// element No. 0</span>
<a name="l00937"></a>00937     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00938"></a>00938     {
<a name="l00939"></a>00939   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l00940"></a>00940   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
<a name="l00941"></a>00941       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += (interval(k-j)/real(n)-interval(j))
<a name="l00942"></a>00942                * erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j];
<a name="l00943"></a>00943   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] /= (interval(k)*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l00944"></a>00944     }
<a name="l00945"></a>00945     <span class="keywordflow">return</span> erg;
<a name="l00946"></a>00946 }
<a name="l00947"></a>00947 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00948"></a>00948 
<a name="l00949"></a>00949 <span class="comment">// sqrt(1-x^2):</span>
<a name="l00950"></a><a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">00950</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00951"></a>00951 {
<a name="l00952"></a>00952     idotprecision idot;
<a name="l00953"></a>00953     interval sum,h;
<a name="l00954"></a>00954     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
<a name="l00955"></a>00955     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order), g(order);
<a name="l00956"></a>00956 
<a name="l00957"></a>00957     <span class="keywordflow">if</span> (Inf(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])&lt;=-1 || Sup(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])&gt;=1)
<a name="l00958"></a>00958     {
<a name="l00959"></a>00959   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt1mx2: wrong argument&quot;</span> &lt;&lt; std::endl;
<a name="l00960"></a>00960   exit(1);
<a name="l00961"></a>00961     };
<a name="l00962"></a>00962     erg.tayl[0]=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])); <span class="comment">// =sqrt1mx2(x.tayl[0]); Blomi </span>
<a name="l00963"></a>00963     h = real(-1)/erg.tayl[0];
<a name="l00964"></a>00964     times2pown(h,-1);
<a name="l00965"></a>00965     g = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
<a name="l00966"></a>00966     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l00967"></a>00967     {
<a name="l00968"></a>00968   m = (k+1)/2;
<a name="l00969"></a>00969   idot = 0;
<a name="l00970"></a>00970   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
<a name="l00971"></a>00971       accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
<a name="l00972"></a>00972   rnd(idot,sum);
<a name="l00973"></a>00973   times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
<a name="l00974"></a>00974   erg.tayl[k] = sum;
<a name="l00975"></a>00975   <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
<a name="l00976"></a>00976   erg.tayl[k] = (g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]+erg.tayl[k])*h;
<a name="l00977"></a>00977     }
<a name="l00978"></a>00978     <span class="keywordflow">return</span> erg;
<a name="l00979"></a>00979 }
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00982"></a>00982 
<a name="l00983"></a>00983 <span class="comment">// sqrt(x^2-1):</span>
<a name="l00984"></a><a class="code" href="namespacetaylor.shtml#a72536b0978e6cdcec6adf898e2642d31">00984</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l00985"></a>00985 {
<a name="l00986"></a>00986     <span class="keyword">const</span> real c = 30.0; 
<a name="l00987"></a>00987     idotprecision idot;
<a name="l00988"></a>00988     interval sum,h;
<a name="l00989"></a>00989     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
<a name="l00990"></a>00990     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order), g(order);
<a name="l00991"></a>00991 
<a name="l00992"></a>00992     <span class="keywordflow">if</span> (Disjoint(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0],interval(-1,1))==0)
<a name="l00993"></a>00993     {
<a name="l00994"></a>00994   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtx2m1: wrong argument&quot;</span> &lt;&lt; std::endl;
<a name="l00995"></a>00995   exit(1);
<a name="l00996"></a>00996     };
<a name="l00997"></a>00997 
<a name="l00998"></a>00998     <span class="keywordflow">if</span> (Inf(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])&gt;c) erg = x*<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(real(1)/x);
<a name="l00999"></a>00999     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])&lt;-c) erg = -x*<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(real(1)/x);
<a name="l01000"></a>01000     <span class="keywordflow">else</span> {
<a name="l01001"></a>01001   erg.tayl[0]=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])-real(1)); <span class="comment">// =sqrtx2m1(x.tayl[0]); Blomi </span>
<a name="l01002"></a>01002   g = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
<a name="l01003"></a>01003   h = real(1)/erg.tayl[0];
<a name="l01004"></a>01004   times2pown(h,-1);
<a name="l01005"></a>01005   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01006"></a>01006   {
<a name="l01007"></a>01007       m = (k+1)/2;
<a name="l01008"></a>01008       idot = 0;
<a name="l01009"></a>01009       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
<a name="l01010"></a>01010     accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
<a name="l01011"></a>01011       rnd(idot,sum);
<a name="l01012"></a>01012       times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
<a name="l01013"></a>01013       erg.tayl[k] = sum;
<a name="l01014"></a>01014       <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
<a name="l01015"></a>01015       erg.tayl[k] = (g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]-erg.tayl[k])*h;
<a name="l01016"></a>01016   }
<a name="l01017"></a>01017     }
<a name="l01018"></a>01018     <span class="keywordflow">return</span> erg;
<a name="l01019"></a>01019 }
<a name="l01020"></a>01020 
<a name="l01021"></a>01021 <span class="comment">// sqrt(1+x)-1</span>
<a name="l01022"></a><a class="code" href="namespacetaylor.shtml#a8a7b5c467bf63f6e51bd5b6c55ddd74d">01022</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01023"></a>01023 {
<a name="l01024"></a>01024     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
<a name="l01025"></a>01025     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01026"></a>01026     idotprecision idot;
<a name="l01027"></a>01027     interval h,Ne;
<a name="l01028"></a>01028 
<a name="l01029"></a>01029     <span class="keywordflow">if</span> (Inf(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])&lt;=-1)
<a name="l01030"></a>01030     {
<a name="l01031"></a>01031   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtp1m1: wrong argument&quot;</span> &lt;&lt; std::endl;
<a name="l01032"></a>01032   exit(1);
<a name="l01033"></a>01033     };
<a name="l01034"></a>01034 
<a name="l01035"></a>01035     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l01036"></a>01036     Ne = real(1.0)+erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l01037"></a>01037     times2pown(Ne,1);
<a name="l01038"></a>01038 
<a name="l01039"></a>01039     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01040"></a>01040     {
<a name="l01041"></a>01041   m = (k+1)/2;
<a name="l01042"></a>01042   idot = 0;
<a name="l01043"></a>01043   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++)
<a name="l01044"></a>01044       accumulate(idot,erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j],erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]);
<a name="l01045"></a>01045   rnd(idot,h);
<a name="l01046"></a>01046   times2pown(h,1);
<a name="l01047"></a>01047   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = h;
<a name="l01048"></a>01048   <span class="keywordflow">if</span> (k%2==0) erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[m]);
<a name="l01049"></a>01049   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = (x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]-erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]) / Ne; 
<a name="l01050"></a>01050     }
<a name="l01051"></a>01051     <span class="keywordflow">return</span> erg;
<a name="l01052"></a>01052 } <span class="comment">// sqrtp1m1</span>
<a name="l01053"></a>01053 
<a name="l01054"></a>01054 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01055"></a>01055 
<a name="l01056"></a>01056 <span class="comment">// power-function</span>
<a name="l01057"></a><a class="code" href="namespacetaylor.shtml#a585467c43fcacacb16fcfa01320f4a15">01057</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x, <span class="keyword">const</span> interval&amp; alpha)
<a name="l01058"></a>01058 {
<a name="l01059"></a>01059     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01060"></a>01060     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01061"></a>01061 
<a name="l01062"></a>01062     <span class="keywordflow">if</span> (0&lt;=x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])
<a name="l01063"></a>01063     {
<a name="l01064"></a>01064   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in interval x&quot;</span> 
<a name="l01065"></a>01065                   &lt;&lt; std::endl;
<a name="l01066"></a>01066   exit(1);
<a name="l01067"></a>01067     };
<a name="l01068"></a>01068 
<a name="l01069"></a>01069     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0],alpha); <span class="comment">// element No. 0</span>
<a name="l01070"></a>01070     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01071"></a>01071     {
<a name="l01072"></a>01072   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l01073"></a>01073   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
<a name="l01074"></a>01074       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += (interval(k-j)*alpha-interval(j))
<a name="l01075"></a>01075                * erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j];
<a name="l01076"></a>01076   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] /= (interval(k)*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l01077"></a>01077     }
<a name="l01078"></a>01078     <span class="keywordflow">return</span> erg;
<a name="l01079"></a>01079 }
<a name="l01080"></a>01080 
<a name="l01081"></a>01081 
<a name="l01082"></a>01082 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01083"></a>01083 
<a name="l01084"></a>01084 <span class="comment">// Exponential-function</span>
<a name="l01085"></a><a class="code" href="namespacetaylor.shtml#af95b8719093fcf56b4c366a57a604c0e">01085</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01086"></a>01086 {
<a name="l01087"></a>01087     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01088"></a>01088     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01089"></a>01089 
<a name="l01090"></a>01090     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0; function value</span>
<a name="l01091"></a>01091     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01092"></a>01092     {
<a name="l01093"></a>01093   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l01094"></a>01094   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
<a name="l01095"></a>01095       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += interval(k-j)*erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]; 
<a name="l01096"></a>01096   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] /= interval(k);
<a name="l01097"></a>01097     }
<a name="l01098"></a>01098     <span class="keywordflow">return</span> erg; 
<a name="l01099"></a>01099 }
<a name="l01100"></a>01100 
<a name="l01101"></a>01101 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01102"></a>01102 
<a name="l01103"></a>01103 <span class="comment">// exp(x)-1;</span>
<a name="l01104"></a><a class="code" href="namespacetaylor.shtml#af148c02264bd6b573ce1edf7fca71aa0">01104</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af148c02264bd6b573ce1edf7fca71aa0">expm1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01105"></a>01105 {
<a name="l01106"></a>01106     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01107"></a>01107     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01108"></a>01108 
<a name="l01109"></a>01109     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0; function value</span>
<a name="l01110"></a>01110     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01111"></a>01111     {
<a name="l01112"></a>01112   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l01113"></a>01113   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
<a name="l01114"></a>01114       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += interval(k-j)*erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]; 
<a name="l01115"></a>01115   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] /= interval(k);
<a name="l01116"></a>01116     }
<a name="l01117"></a>01117     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0])-real(1); <span class="comment">// = expm1(x.tayl[0]); Blomi</span>
<a name="l01118"></a>01118     <span class="keywordflow">return</span> erg; 
<a name="l01119"></a>01119 }
<a name="l01120"></a>01120 
<a name="l01121"></a>01121 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01122"></a>01122 
<a name="l01123"></a>01123 <span class="comment">// Logarithm-function</span>
<a name="l01124"></a><a class="code" href="namespacetaylor.shtml#ac7c27e2d4a78dbeaa37fb7803f8d1170">01124</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01125"></a>01125 {
<a name="l01126"></a>01126     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01127"></a>01127     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01128"></a>01128 
<a name="l01129"></a>01129     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,x,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>);
<a name="l01130"></a>01130   
<a name="l01131"></a>01131     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01132"></a>01132 }
<a name="l01133"></a>01133 
<a name="l01134"></a>01134 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01135"></a>01135 
<a name="l01136"></a>01136 <span class="comment">// ln(1+x)</span>
<a name="l01137"></a><a class="code" href="namespacetaylor.shtml#ae68d1b569d3411210304ec4001ea4a1e">01137</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01138"></a>01138 {
<a name="l01139"></a>01139     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01140"></a>01140     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order), g(order);
<a name="l01141"></a>01141 
<a name="l01142"></a>01142     g = interval(1) + x;
<a name="l01143"></a>01143     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]);
<a name="l01144"></a>01144     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01145"></a>01145     {
<a name="l01146"></a>01146   erg.tayl[k] = 0;
<a name="l01147"></a>01147   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
<a name="l01148"></a>01148       erg.tayl[k] += interval(j) * erg.tayl[j] * g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j];
<a name="l01149"></a>01149   erg.tayl[k] = (x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]-erg.tayl[k]/interval(k)) / g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0];
<a name="l01150"></a>01150     }
<a name="l01151"></a>01151     <span class="keywordflow">return</span> erg;
<a name="l01152"></a>01152 }
<a name="l01153"></a>01153 
<a name="l01154"></a>01154 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01155"></a>01155 
<a name="l01156"></a>01156 <span class="comment">// Sinus-function</span>
<a name="l01157"></a><a class="code" href="namespacetaylor.shtml#a62ec379740c8e57b65eb49a4f78c86f5">01157</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01158"></a>01158 {
<a name="l01159"></a>01159     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01160"></a>01160     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg1(order);   <span class="comment">// sin</span>
<a name="l01161"></a>01161     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg2(order);   <span class="comment">// cos</span>
<a name="l01162"></a>01162     interval s1,s2;
<a name="l01163"></a>01163 
<a name="l01164"></a>01164     erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
<a name="l01165"></a>01165     erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>
<a name="l01166"></a>01166 
<a name="l01167"></a>01167     <span class="comment">// remainig elements: </span>
<a name="l01168"></a>01168     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) 
<a name="l01169"></a>01169     {
<a name="l01170"></a>01170   s1=s2=interval(0);
<a name="l01171"></a>01171   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l01172"></a>01172   {
<a name="l01173"></a>01173       s1 += interval(j-i) * erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01174"></a>01174       s2 += interval(j-i) * erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01175"></a>01175   }
<a name="l01176"></a>01176   erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s1/interval(j);
<a name="l01177"></a>01177   erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= real(-1.0)/interval(j)*s2;
<a name="l01178"></a>01178     }
<a name="l01179"></a>01179     <span class="keywordflow">return</span> erg1; 
<a name="l01180"></a>01180 }
<a name="l01181"></a>01181 
<a name="l01182"></a>01182 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01183"></a>01183 
<a name="l01184"></a>01184 <span class="comment">// Cosinus-function</span>
<a name="l01185"></a><a class="code" href="namespacetaylor.shtml#a3ffa0c28ccb08c1f1b043e9dfab43c04">01185</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01186"></a>01186 {
<a name="l01187"></a>01187     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01188"></a>01188     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg1(order);   <span class="comment">// sin</span>
<a name="l01189"></a>01189     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg2(order);   <span class="comment">// cos</span>
<a name="l01190"></a>01190     interval s1,s2;
<a name="l01191"></a>01191 
<a name="l01192"></a>01192     erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
<a name="l01193"></a>01193     erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>
<a name="l01194"></a>01194 
<a name="l01195"></a>01195     <span class="comment">// remainig elements: </span>
<a name="l01196"></a>01196     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) 
<a name="l01197"></a>01197     {
<a name="l01198"></a>01198   s1=s2=interval(0);
<a name="l01199"></a>01199   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l01200"></a>01200   {
<a name="l01201"></a>01201       s1 += interval(j-i) * erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01202"></a>01202       s2 += interval(j-i) * erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01203"></a>01203   }
<a name="l01204"></a>01204   erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s1/interval(j);
<a name="l01205"></a>01205   erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= real(-1.0)/interval(j)*s2;
<a name="l01206"></a>01206     }
<a name="l01207"></a>01207  <span class="keywordflow">return</span> erg2; 
<a name="l01208"></a>01208 }
<a name="l01209"></a>01209 
<a name="l01210"></a>01210 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01211"></a>01211 
<a name="l01212"></a>01212 <span class="comment">// Tangens-function</span>
<a name="l01213"></a><a class="code" href="namespacetaylor.shtml#a3cbd901c0e176be2efe58be70bb48db6">01213</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01214"></a>01214 {
<a name="l01215"></a>01215     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01216"></a>01216     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01217"></a>01217     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01218"></a>01218 
<a name="l01219"></a>01219     g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x));
<a name="l01220"></a>01220 
<a name="l01221"></a>01221     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01222"></a>01222     {
<a name="l01223"></a>01223   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, tan : wrong argument&quot;</span> &lt;&lt; std::endl;
<a name="l01224"></a>01224   exit(1);
<a name="l01225"></a>01225     };  
<a name="l01226"></a>01226  
<a name="l01227"></a>01227     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>);
<a name="l01228"></a>01228   
<a name="l01229"></a>01229     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01230"></a>01230 }
<a name="l01231"></a>01231 
<a name="l01232"></a>01232 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01233"></a>01233 
<a name="l01234"></a>01234 <span class="comment">// Cotangens-function</span>
<a name="l01235"></a><a class="code" href="namespacetaylor.shtml#a9e16ad2608259386bb54992b05bb9da9">01235</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01236"></a>01236 {
<a name="l01237"></a>01237     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01238"></a>01238     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01239"></a>01239     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01240"></a>01240 
<a name="l01241"></a>01241     g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x));
<a name="l01242"></a>01242 
<a name="l01243"></a>01243     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01244"></a>01244     {
<a name="l01245"></a>01245   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, cot : wrong argument&quot;</span> &lt;&lt; std::endl;
<a name="l01246"></a>01246   exit(1);
<a name="l01247"></a>01247     };  
<a name="l01248"></a>01248  
<a name="l01249"></a>01249     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>);
<a name="l01250"></a>01250   
<a name="l01251"></a>01251     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01252"></a>01252 }
<a name="l01253"></a>01253 
<a name="l01254"></a>01254 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01255"></a>01255 
<a name="l01256"></a>01256 <span class="comment">// Sinushyperbolicus-function</span>
<a name="l01257"></a><a class="code" href="namespacetaylor.shtml#ace92ea0efa6fa5768a476784b1761859">01257</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01258"></a>01258 {
<a name="l01259"></a>01259     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01260"></a>01260     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg1(order);  <span class="comment">// sinh</span>
<a name="l01261"></a>01261     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg2(order);  <span class="comment">// cosh</span>
<a name="l01262"></a>01262     interval s1,s2;
<a name="l01263"></a>01263 
<a name="l01264"></a>01264     erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
<a name="l01265"></a>01265     erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>
<a name="l01266"></a>01266 
<a name="l01267"></a>01267     <span class="comment">// remainig elements: </span>
<a name="l01268"></a>01268     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) 
<a name="l01269"></a>01269     {
<a name="l01270"></a>01270   s1=s2=interval(0);
<a name="l01271"></a>01271   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l01272"></a>01272   {
<a name="l01273"></a>01273       s1 += interval(j-i) * erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01274"></a>01274       s2 += interval(j-i) * erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01275"></a>01275   }
<a name="l01276"></a>01276   erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s1/interval(j);
<a name="l01277"></a>01277   erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s2/interval(j);
<a name="l01278"></a>01278     }
<a name="l01279"></a>01279     <span class="keywordflow">return</span> erg1; 
<a name="l01280"></a>01280 }
<a name="l01281"></a>01281 
<a name="l01282"></a>01282 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01283"></a>01283 
<a name="l01284"></a>01284 <span class="comment">// Cosinushyperbolicus-function</span>
<a name="l01285"></a><a class="code" href="namespacetaylor.shtml#a964f8e36028c83bc8ae0b836730a900c">01285</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01286"></a>01286 {
<a name="l01287"></a>01287     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01288"></a>01288     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg1(order); <span class="comment">// sinh</span>
<a name="l01289"></a>01289     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg2(order); <span class="comment">// cosh</span>
<a name="l01290"></a>01290     interval s1,s2;
<a name="l01291"></a>01291 
<a name="l01292"></a>01292     erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
<a name="l01293"></a>01293     erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>
<a name="l01294"></a>01294 
<a name="l01295"></a>01295     <span class="comment">// remaining elements: </span>
<a name="l01296"></a>01296     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>); j++) 
<a name="l01297"></a>01297     {
<a name="l01298"></a>01298   s1=s2=interval(0);
<a name="l01299"></a>01299   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l01300"></a>01300   {
<a name="l01301"></a>01301       s1 += interval(j-i) * erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01302"></a>01302       s2 += interval(j-i) * erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j-i];
<a name="l01303"></a>01303   }
<a name="l01304"></a>01304   erg1.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s1/interval(j);
<a name="l01305"></a>01305   erg2.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]= s2/interval(j);
<a name="l01306"></a>01306     }
<a name="l01307"></a>01307     <span class="keywordflow">return</span> erg2; 
<a name="l01308"></a>01308 }
<a name="l01309"></a>01309 
<a name="l01310"></a>01310 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01311"></a>01311 
<a name="l01312"></a>01312 <span class="comment">//Tangenshyperbolicus-function</span>
<a name="l01313"></a><a class="code" href="namespacetaylor.shtml#a0de984183956000ebf6f44a817719266">01313</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01314"></a>01314 {
<a name="l01315"></a>01315     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01316"></a>01316     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01317"></a>01317     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01318"></a>01318 
<a name="l01319"></a>01319     g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x)); 
<a name="l01320"></a>01320  
<a name="l01321"></a>01321     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>);
<a name="l01322"></a>01322   
<a name="l01323"></a>01323     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01324"></a>01324 }
<a name="l01325"></a>01325 
<a name="l01326"></a>01326 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01327"></a>01327 
<a name="l01328"></a>01328 <span class="comment">// Cotangenshyperbolicus-function</span>
<a name="l01329"></a><a class="code" href="namespacetaylor.shtml#a968502b349e1cd5621644b34495d9b3f">01329</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01330"></a>01330 {
<a name="l01331"></a>01331     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01332"></a>01332     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01333"></a>01333     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01334"></a>01334 
<a name="l01335"></a>01335     g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x));
<a name="l01336"></a>01336 
<a name="l01337"></a>01337     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01338"></a>01338     {
<a name="l01339"></a>01339   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, coth : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01340"></a>01340   exit(1);
<a name="l01341"></a>01341     };  
<a name="l01342"></a>01342  
<a name="l01343"></a>01343     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>);
<a name="l01344"></a>01344   
<a name="l01345"></a>01345     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01346"></a>01346 }
<a name="l01347"></a>01347 
<a name="l01348"></a>01348 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01349"></a>01349 
<a name="l01350"></a>01350 <span class="comment">//Arcsinusfunktion</span>
<a name="l01351"></a><a class="code" href="namespacetaylor.shtml#a8d6631d0906e0dbe8d5e0e573e6197ae">01351</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01352"></a>01352 {
<a name="l01353"></a>01353     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01354"></a>01354     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01355"></a>01355     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01356"></a>01356 
<a name="l01357"></a>01357     g=<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(x);
<a name="l01358"></a>01358 
<a name="l01359"></a>01359     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01360"></a>01360     {
<a name="l01361"></a>01361   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, asin : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01362"></a>01362   exit(1);
<a name="l01363"></a>01363     };  
<a name="l01364"></a>01364  
<a name="l01365"></a>01365     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>);
<a name="l01366"></a>01366   
<a name="l01367"></a>01367     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01368"></a>01368 }
<a name="l01369"></a>01369 
<a name="l01370"></a>01370 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01371"></a>01371 
<a name="l01372"></a>01372 <span class="comment">//Arccosinusfunktion</span>
<a name="l01373"></a><a class="code" href="namespacetaylor.shtml#a10ee4a237acfa23e5566bdbc6256c34b">01373</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01374"></a>01374 {
<a name="l01375"></a>01375     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01376"></a>01376     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01377"></a>01377     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01378"></a>01378 
<a name="l01379"></a>01379     g = -<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(x);
<a name="l01380"></a>01380 
<a name="l01381"></a>01381     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01382"></a>01382     {
<a name="l01383"></a>01383   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acos : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01384"></a>01384   exit(1);
<a name="l01385"></a>01385     };  
<a name="l01386"></a>01386  
<a name="l01387"></a>01387     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>);
<a name="l01388"></a>01388   
<a name="l01389"></a>01389     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01390"></a>01390 }
<a name="l01391"></a>01391 
<a name="l01392"></a>01392 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 <span class="comment">//Arctan-function</span>
<a name="l01395"></a><a class="code" href="namespacetaylor.shtml#ad4efebf4e010be4ae41fdc661f00417d">01395</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01396"></a>01396 {
<a name="l01397"></a>01397     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01398"></a>01398     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01399"></a>01399     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01400"></a>01400 
<a name="l01401"></a>01401     g=interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
<a name="l01402"></a>01402 
<a name="l01403"></a>01403     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>);
<a name="l01404"></a>01404   
<a name="l01405"></a>01405     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01406"></a>01406 }
<a name="l01407"></a>01407 
<a name="l01408"></a>01408 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01409"></a>01409 
<a name="l01410"></a>01410 <span class="comment">//Arccotan-function</span>
<a name="l01411"></a><a class="code" href="namespacetaylor.shtml#af339a9fb39e8c7141cc881baa47c4ea8">01411</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01412"></a>01412 {
<a name="l01413"></a>01413     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01414"></a>01414     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01415"></a>01415     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01416"></a>01416 
<a name="l01417"></a>01417     g=-(interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
<a name="l01418"></a>01418 
<a name="l01419"></a>01419     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>);
<a name="l01420"></a>01420   
<a name="l01421"></a>01421     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01422"></a>01422 }
<a name="l01423"></a>01423 
<a name="l01424"></a>01424 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01425"></a>01425 
<a name="l01426"></a>01426 <span class="comment">//Areasinh-function</span>
<a name="l01427"></a><a class="code" href="namespacetaylor.shtml#aea804ac21a6ac493d1b3b94c320c6d5f">01427</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01428"></a>01428 {
<a name="l01429"></a>01429     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01430"></a>01430     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01431"></a>01431     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01432"></a>01432 
<a name="l01433"></a>01433     g=<a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(x);
<a name="l01434"></a>01434 
<a name="l01435"></a>01435     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>);
<a name="l01436"></a>01436   
<a name="l01437"></a>01437     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01438"></a>01438 }
<a name="l01439"></a>01439 
<a name="l01440"></a>01440 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01441"></a>01441 
<a name="l01442"></a>01442 <span class="comment">//Areacosh-function</span>
<a name="l01443"></a><a class="code" href="namespacetaylor.shtml#a9aedcec32b2edf6a4f93169199469bb5">01443</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01444"></a>01444 {
<a name="l01445"></a>01445     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01446"></a>01446     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01447"></a>01447     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01448"></a>01448 
<a name="l01449"></a>01449     g=<a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(x);
<a name="l01450"></a>01450 
<a name="l01451"></a>01451     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01452"></a>01452     {
<a name="l01453"></a>01453   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acosh : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01454"></a>01454   exit(1);
<a name="l01455"></a>01455     };  
<a name="l01456"></a>01456  
<a name="l01457"></a>01457     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>);
<a name="l01458"></a>01458   
<a name="l01459"></a>01459     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01460"></a>01460 }
<a name="l01461"></a>01461 
<a name="l01462"></a>01462 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01463"></a>01463 
<a name="l01464"></a>01464 <span class="comment">//Areatanh-function</span>
<a name="l01465"></a><a class="code" href="namespacetaylor.shtml#a3f93cbff36aa827c4da8179674cc1d41">01465</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01466"></a>01466 {
<a name="l01467"></a>01467     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01468"></a>01468     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01469"></a>01469     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01470"></a>01470 
<a name="l01471"></a>01471     g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
<a name="l01472"></a>01472 
<a name="l01473"></a>01473     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01474"></a>01474     {
<a name="l01475"></a>01475   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, atanh : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01476"></a>01476   exit(1);
<a name="l01477"></a>01477     };  
<a name="l01478"></a>01478  
<a name="l01479"></a>01479     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>);
<a name="l01480"></a>01480   
<a name="l01481"></a>01481     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01482"></a>01482 }
<a name="l01483"></a>01483 
<a name="l01484"></a>01484 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01485"></a>01485 
<a name="l01486"></a>01486 <span class="comment">//Areacotanh-function</span>
<a name="l01487"></a><a class="code" href="namespacetaylor.shtml#a425c4a560efdc61060e7c8d368c56a8f">01487</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01488"></a>01488 {
<a name="l01489"></a>01489     <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
<a name="l01490"></a>01490     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
<a name="l01491"></a>01491     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01492"></a>01492 
<a name="l01493"></a>01493     g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
<a name="l01494"></a>01494 
<a name="l01495"></a>01495     <span class="keywordflow">if</span>(0 &lt;= g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) 
<a name="l01496"></a>01496     {
<a name="l01497"></a>01497   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acoth : wrong argument &quot;</span> &lt;&lt; std::endl;
<a name="l01498"></a>01498   exit(1);
<a name="l01499"></a>01499     };  
<a name="l01500"></a>01500 
<a name="l01501"></a>01501     <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>);
<a name="l01502"></a>01502   
<a name="l01503"></a>01503     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01504"></a>01504 }
<a name="l01505"></a>01505 
<a name="l01506"></a>01506 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01507"></a>01507 
<a name="l01508"></a>01508 <span class="comment">//Error function &quot;erf&quot; //added, mg2006-03</span>
<a name="l01509"></a><a class="code" href="namespacetaylor.shtml#ae34779c49ee5e1ce798eafb83de238d0">01509</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01510"></a>01510 {
<a name="l01511"></a>01511     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01512"></a>01512     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01513"></a>01513     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> g(order);
<a name="l01514"></a>01514 
<a name="l01515"></a>01515     g=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
<a name="l01516"></a>01516    
<a name="l01517"></a>01517     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]); <span class="comment">// element No. 0; function value</span>
<a name="l01518"></a>01518     
<a name="l01519"></a>01519     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
<a name="l01520"></a>01520     {
<a name="l01521"></a>01521         erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l01522"></a>01522         
<a name="l01523"></a>01523   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
<a name="l01524"></a>01524       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += interval(k-j)*g.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k-j]; 
<a name="l01525"></a>01525   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 2*erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]/(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
<a name="l01526"></a>01526     }
<a name="l01527"></a>01527     <span class="keywordflow">return</span> erg; 
<a name="l01528"></a>01528 }
<a name="l01529"></a>01529 
<a name="l01530"></a>01530 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01531"></a>01531 
<a name="l01532"></a>01532 <span class="comment">//Complementary Error function &quot;erfc&quot; //added, mg2006-03</span>
<a name="l01533"></a><a class="code" href="namespacetaylor.shtml#a33b5e2b4ab7dcafac6e1d96991c94e8d">01533</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">erfc</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01534"></a>01534 {
<a name="l01535"></a>01535     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01536"></a>01536     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01537"></a>01537 
<a name="l01538"></a>01538     erg=interval(1)-<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(x); 
<a name="l01539"></a>01539 
<a name="l01540"></a>01540     <span class="keywordflow">return</span> erg;
<a name="l01541"></a>01541 }
<a name="l01542"></a>01542 
<a name="l01543"></a>01543 
<a name="l01544"></a>01544 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01545"></a>01545 
<a name="l01546"></a>01546 <span class="comment">// sqrt(1+x^2)</span>
<a name="l01547"></a><a class="code" href="namespacetaylor.shtml#a319f85acd3f83eb66fba6be32346573e">01547</a> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a>&amp; x)
<a name="l01548"></a>01548 {
<a name="l01549"></a>01549     <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01550"></a>01550     <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01551"></a>01551     <span class="keyword">const</span> real c = 500.0;
<a name="l01552"></a>01552 
<a name="l01553"></a>01553     <span class="keywordflow">if</span> (Inf(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) &gt; c) erg = x*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+real(1)/<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
<a name="l01554"></a>01554     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]) &lt; -c) erg = -x*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+real(1)/<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x)); 
<a name="l01555"></a>01555     <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));  
<a name="l01556"></a>01556     <span class="keywordflow">return</span> erg;
<a name="l01557"></a>01557 }
<a name="l01558"></a>01558 
<a name="l01559"></a>01559 
<a name="l01560"></a>01560 
<a name="l01561"></a>01561 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l01562"></a>01562 
<a name="l01563"></a>01563 <span class="comment">//ALTERED by Tomas Johnson</span>
<a name="l01565"></a><a class="code" href="namespacetaylor.shtml#a51730e93b533e086e3d94d2aaeba4e24">01565</a> <span class="comment"></span><a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a51730e93b533e086e3d94d2aaeba4e24">powerAtZero</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, <span class="keywordtype">int</span> n) {
<a name="l01566"></a>01566   <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
<a name="l01567"></a>01567   <a class="code" href="classtaylor_1_1itaylor.shtml">itaylor</a> erg(order);
<a name="l01568"></a>01568   
<a name="l01569"></a>01569   <span class="keywordflow">if</span> (0&lt;=x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1])
<a name="l01570"></a>01570     {
<a name="l01571"></a>01571       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in the derivative of x&quot;</span> 
<a name="l01572"></a>01572     &lt;&lt; std::endl;
<a name="l01573"></a>01573       exit(1);
<a name="l01574"></a>01574     };
<a name="l01575"></a>01575   
<a name="l01576"></a>01576   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt;n; k++)
<a name="l01577"></a>01577     erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k]=0.0;
<a name="l01578"></a>01578 
<a name="l01579"></a>01579   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[n] = <a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1],n); <span class="comment">// element No. n</span>
<a name="l01580"></a>01580   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=n+1; k&lt;=order; k++)
<a name="l01581"></a>01581     {
<a name="l01582"></a>01582       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] = 0;
<a name="l01583"></a>01583       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1-n; j++)
<a name="l01584"></a>01584   erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] += (interval(k-n-j)*n-interval(j))
<a name="l01585"></a>01585                * erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j+n] * x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k+1-n-j];
<a name="l01586"></a>01586       erg.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[k] /= (interval(k-n)*x.<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1]);
<a name="l01587"></a>01587     }
<a name="l01588"></a>01588   <span class="keywordflow">return</span> erg;
<a name="l01589"></a>01589 }
<a name="l01591"></a>01591 
<a name="l01592"></a>01592 
<a name="l01593"></a>01593 } <span class="comment">// End of namespace taylor</span>
<a name="l01594"></a>01594 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="itaylor_8cpp.shtml">itaylor.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
