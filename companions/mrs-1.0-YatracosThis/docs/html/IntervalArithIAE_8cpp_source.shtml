<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: IntervalArithIAE.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('IntervalArithIAE_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">IntervalArithIAE.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="IntervalArithIAE_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00039"></a>00039 <span class="comment">//#include &quot;intervalw.h&quot; //for interval routines</span>
<a name="l00040"></a>00040 <span class="comment">//#include &quot;ia_ad.h&quot; //for interval routines</span>
<a name="l00041"></a>00041 <span class="comment">//#include &quot;itaylor.h&quot; //for taylor integration routine</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> <span class="comment">//for root finding and integration routines</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">// to use std::vector</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00047"></a>00047 <span class="comment">// to use iterators</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00049"></a>00049 <span class="comment">// to use valarray</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">using namespace </span>std;
<a name="l00063"></a>00063 <span class="keyword">using namespace </span>cxsc;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">//====================================================================//</span>
<a name="l00066"></a><a class="code" href="IntervalArithIAE_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00066</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> * argv[])
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   <span class="comment">//-----------user-defined parameters</span>
<a name="l00069"></a>00069   <span class="keywordflow">if</span> ( argc != 3 ) {
<a name="l00070"></a>00070     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: IntervalArithIAE Mix SampleSize&quot;</span> &lt;&lt; endl;
<a name="l00071"></a>00071     exit(0);
<a name="l00072"></a>00072   }
<a name="l00073"></a>00073   <span class="keywordtype">int</span> mix = atoi(argv[1]);
<a name="l00074"></a>00074   <span class="keywordtype">int</span> n = atoi(argv[2]);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="keywordtype">double</span> TOL = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l00077"></a>00077   cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; TOL &lt;&lt; endl;
<a name="l00078"></a>00078   <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   <span class="comment">//---------get the relevant parameters for the finite mixture density</span>
<a name="l00081"></a>00081   <span class="comment">//string formatting</span>
<a name="l00082"></a>00082    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00083"></a>00083     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00084"></a>00084     oss.precision(10);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086    <span class="comment">// read input from mix*.txt</span>
<a name="l00087"></a>00087    <span class="keywordtype">string</span> mixfileName;
<a name="l00088"></a>00088    mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00089"></a>00089   std::ostringstream stmMix;
<a name="l00090"></a>00090   stmMix &lt;&lt; mix;
<a name="l00091"></a>00091   mixfileName += stmMix.str();
<a name="l00092"></a>00092   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   ifstream infile(mixfileName.c_str());
<a name="l00095"></a>00095   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00096"></a>00096   <span class="keywordtype">double</span> W, M, V;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00099"></a>00099   vector&lt;double&gt; Weight;
<a name="l00100"></a>00100   vector&lt;double&gt; Mean;
<a name="l00101"></a>00101   vector&lt;double&gt; Sigma;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00104"></a>00104   ifstream file; <span class="comment">// create file for input</span>
<a name="l00105"></a>00105   file.open(mixfileName.c_str());
<a name="l00106"></a>00106   <span class="comment">// check if this file exists or not</span>
<a name="l00107"></a>00107   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00108"></a>00108     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00109"></a>00109          &lt;&lt; endl;
<a name="l00110"></a>00110     exit(1);
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00113"></a>00113     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00114"></a>00114     W=Weight1/Weight2;
<a name="l00115"></a>00115     Weight.push_back(W);
<a name="l00116"></a>00116     M=Mean1/Mean2;
<a name="l00117"></a>00117     Mean.push_back(M);
<a name="l00118"></a>00118     V=Var1/Var2;
<a name="l00119"></a>00119     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00120"></a>00120   }
<a name="l00121"></a>00121   Weight.pop_back();
<a name="l00122"></a>00122   Mean.pop_back();
<a name="l00123"></a>00123   Sigma.pop_back();
<a name="l00124"></a>00124   
<a name="l00125"></a>00125   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00126"></a>00126   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00127"></a>00127   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00128"></a>00128   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00131"></a>00131     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00132"></a>00132     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00133"></a>00133     gsl_rng * r;
<a name="l00134"></a>00134     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00135"></a>00135     gsl_rng_env_setup();
<a name="l00136"></a>00136     T = gsl_rng_default;
<a name="l00137"></a>00137     r = gsl_rng_alloc (T);
<a name="l00138"></a>00138     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00139"></a>00139     gsl_rng_set(r, s);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141    <span class="comment">//set up a random number generator for gaussian rvs</span>
<a name="l00142"></a>00142      <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00143"></a>00143      gsl_rng * r1;
<a name="l00144"></a>00144      gsl_rng_env_setup();
<a name="l00145"></a>00145      T1 = gsl_rng_default;
<a name="l00146"></a>00146      r1 = gsl_rng_alloc (T1);
<a name="l00147"></a>00147      gsl_rng_set(r1,s);
<a name="l00148"></a>00148      
<a name="l00149"></a>00149   <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
<a name="l00150"></a>00150   <span class="keywordtype">double</span> a=0, b=1;
<a name="l00151"></a>00151   vector&lt;double&gt; u;
<a name="l00152"></a>00152   <span class="keywordtype">int</span> j;
<a name="l00153"></a>00153   <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00154"></a>00154       u.push_back(gsl_ran_flat(r, a, b));
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="comment">// number of components</span>
<a name="l00158"></a>00158   <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00159"></a>00159   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   <span class="comment">// get cumulative sum of the weights</span>
<a name="l00162"></a>00162   <span class="keywordtype">double</span> WeightCum[comp];
<a name="l00163"></a>00163   <span class="comment">//initialize the array</span>
<a name="l00164"></a>00164   WeightCum[0] = Weight[0]; 
<a name="l00165"></a>00165   cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
<a name="l00166"></a>00166    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
<a name="l00167"></a>00167     WeightCum[j] = WeightCum[j-1] + Weight[j];
<a name="l00168"></a>00168   }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="comment">//Create mixture data using component densities that are normal.</span>
<a name="l00171"></a>00171   cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span>&lt;&lt;endl; 
<a name="l00172"></a>00172   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
<a name="l00173"></a>00173     cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
<a name="l00174"></a>00174     <span class="comment">//find the number of members generated from each component.</span>
<a name="l00175"></a>00175     <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
<a name="l00176"></a>00176       <span class="keywordtype">int</span> ind=0;
<a name="l00177"></a>00177       <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
<a name="l00178"></a>00178       cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
<a name="l00179"></a>00179       <span class="comment">//now generate the data</span>
<a name="l00180"></a>00180       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
<a name="l00181"></a>00181         rvector thisrv(1);
<a name="l00182"></a>00182         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
<a name="l00183"></a>00183         thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v.         </span>
<a name="l00184"></a>00184         theData.push_back(thisrv);
<a name="l00185"></a>00185       }
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187   <span class="comment">//-------------finish generating data---------------------------------//</span>
<a name="l00188"></a>00188 
<a name="l00189"></a>00189   <span class="comment">//--------make an Adaptive Histogram object with a specified box</span>
<a name="l00190"></a>00190   <span class="comment">// domain is a hypercube</span>
<a name="l00191"></a>00191    interval pavingInterval(-10,10);
<a name="l00192"></a>00192    <span class="keywordtype">int</span> d = 1;
<a name="l00193"></a>00193     ivector pavingBox(d);
<a name="l00194"></a>00194    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) pavingBox[i] = pavingInterval;
<a name="l00195"></a>00195   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00196"></a>00196   
<a name="l00197"></a>00197   <span class="comment">// put the data from the container into the histogram, no splitting here</span>
<a name="l00198"></a>00198   <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00199"></a>00199    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00200"></a>00200   cout &lt;&lt; <span class="stringliteral">&quot;Inserting data... &quot;</span> &lt;&lt; endl;
<a name="l00201"></a>00201   successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
<a name="l00204"></a>00204   <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(2);
<a name="l00205"></a>00205   <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00206"></a>00206     cout &lt;&lt; <span class="stringliteral">&quot;building the histogram...&quot;</span> &lt;&lt; endl;
<a name="l00207"></a>00207     <span class="comment">// now split with priority queue</span>
<a name="l00208"></a>00208     <span class="comment">// split node wth most pointsin first (compCount)</span>
<a name="l00209"></a>00209     <span class="comment">// until leaves &gt;= minLeaves (critLeaves_GTE)</span>
<a name="l00210"></a>00210     <span class="comment">// no minPoints or minVolB limitations on splittable nodes</span>
<a name="l00211"></a>00211     <span class="keywordtype">double</span> beta = 0.99; <span class="comment">//re-calculate this!</span>
<a name="l00212"></a>00212     <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, beta)); 
<a name="l00213"></a>00213     successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount,
<a name="l00214"></a>00214                 critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r, maxLeafNodes); <span class="comment">// no logs</span>
<a name="l00215"></a>00215   }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00218"></a>00218     <span class="comment">// optional - if you want to get a txt output of each histogram</span>
<a name="l00219"></a>00219     <span class="comment">// create a name for the file to output</span>
<a name="l00220"></a>00220      <span class="keywordtype">string</span> fileName;
<a name="l00221"></a>00221      fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00222"></a>00222     <span class="comment">//convert j to a string</span>
<a name="l00223"></a>00223     <span class="comment">// std::ostringstream stm2;</span>
<a name="l00224"></a>00224     <span class="comment">// stm2 &lt;&lt; j;</span>
<a name="l00225"></a>00225     <span class="comment">// add the stringed j to the filename</span>
<a name="l00226"></a>00226     <span class="comment">// fileName += stm2.str();</span>
<a name="l00227"></a>00227      fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00228"></a>00228     <span class="comment">// To realize a file output</span>
<a name="l00229"></a>00229      myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231     <span class="comment">//-----get the IAE of this histogram</span>
<a name="l00232"></a>00232     interval totalArea(0.0);
<a name="l00233"></a>00233     
<a name="l00234"></a>00234     cout &lt;&lt; <span class="stringliteral">&quot;iterating through the leaf nodes to get the L1-error...&quot;</span> &lt;&lt; endl;
<a name="l00235"></a>00235     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00236"></a>00236     <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00237"></a>00237     myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l00238"></a>00238     <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00239"></a>00239     <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00240"></a>00240       <span class="comment">//a container for the roots at this leaf node</span>
<a name="l00241"></a>00241       vector&lt;intervalw&gt; rootVec;
<a name="l00242"></a>00242       
<a name="l00243"></a>00243        <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00244"></a>00244        <span class="comment">//get the height in this leaf node</span>
<a name="l00245"></a>00245        <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l00246"></a>00246        cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------&quot;</span> &lt;&lt; endl;
<a name="l00247"></a>00247        cout &lt;&lt; <span class="stringliteral">&quot;height at this node: &quot;</span> &lt;&lt; fhat &lt;&lt; endl;
<a name="l00248"></a>00248        
<a name="l00249"></a>00249        <span class="comment">//get the box of this leaf node</span>
<a name="l00250"></a>00250       ivector thisBox = (*it)-&gt;getBox();
<a name="l00251"></a>00251       
<a name="l00252"></a>00252       <span class="comment">//---------find the root at this domain</span>
<a name="l00253"></a>00253       <span class="comment">// make an intervalw object using thisBox</span>
<a name="l00254"></a>00254       rvector lb = Inf(thisBox);
<a name="l00255"></a>00255       rvector ub = Sup(thisBox);
<a name="l00256"></a>00256       <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]),_double(ub[1]));
<a name="l00257"></a>00257       interval thisInt(_double(lb[1]),_double(ub[1]));
<a name="l00258"></a>00258       
<a name="l00259"></a>00259       <span class="comment">// find the root</span>
<a name="l00260"></a>00260       cout &lt;&lt; <span class="stringliteral">&quot;finding roots at this node &quot;</span> &lt;&lt; thisInt &lt;&lt; endl;
<a name="l00261"></a>00261       <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, TOL, fhat, rootVec, Weight, Mean, Sigma); 
<a name="l00262"></a>00262       
<a name="l00263"></a>00263       <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l00264"></a>00264       <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l00265"></a>00265       <span class="comment">//this domain</span>
<a name="l00266"></a>00266       <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l00267"></a>00267         <span class="comment">//get the L1 error</span>
<a name="l00268"></a>00268         interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00269"></a>00269         <span class="comment">//add to totalArea</span>
<a name="l00270"></a>00270         totalArea += diffArea;
<a name="l00271"></a>00271       } <span class="comment">//end of rootVec is empty</span>
<a name="l00272"></a>00272 
<a name="l00273"></a>00273       <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l00274"></a>00274         cout &lt;&lt; <span class="stringliteral">&quot;There are root(s)&quot;</span> &lt;&lt; endl;
<a name="l00275"></a>00275 
<a name="l00276"></a>00276         <span class="comment">// if there&#39;s only 1 root</span>
<a name="l00277"></a>00277         <span class="keywordflow">if</span> (rootVec.size() == 1) {
<a name="l00278"></a>00278           cout &lt;&lt; <span class="stringliteral">&quot;there is only one root..&quot;</span> &lt;&lt; endl;
<a name="l00279"></a>00279           <span class="comment">// is the root at the left or right boundary?</span>
<a name="l00280"></a>00280           <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l00281"></a>00281               (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l00282"></a>00282             cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the left/right boundary:&quot;</span> &lt;&lt; rootVec[0] &lt;&lt; endl;
<a name="l00283"></a>00283             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00284"></a>00284             totalArea += diffArea;
<a name="l00285"></a>00285           }
<a name="l00286"></a>00286           <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l00287"></a>00287             cout &lt;&lt; <span class="stringliteral">&quot;no root at the boundaries&quot;</span> &lt;&lt; endl;
<a name="l00288"></a>00288             <span class="comment">//get the left sub-interval</span>
<a name="l00289"></a>00289             interval thisSubIntLeft = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l00290"></a>00290             cout &lt;&lt; <span class="stringliteral">&quot;left interval: &quot;</span> &lt;&lt; thisSubIntLeft &lt;&lt; endl; 
<a name="l00291"></a>00291             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, Deg, TOL, Weight, Mean, Sigma);
<a name="l00292"></a>00292             totalArea += diffArea;
<a name="l00293"></a>00293             
<a name="l00294"></a>00294             <span class="comment">//get the right sub-interval</span>
<a name="l00295"></a>00295             <span class="comment">//get the left sub-interval</span>
<a name="l00296"></a>00296             interval thisSubIntRight = interval(inf(rootVec[0]), Sup(thisInt));
<a name="l00297"></a>00297             cout &lt;&lt; <span class="stringliteral">&quot;right interval: &quot;</span> &lt;&lt; thisSubIntRight &lt;&lt; endl; 
<a name="l00298"></a>00298             diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, Deg, TOL, Weight, Mean, Sigma);
<a name="l00299"></a>00299             totalArea += diffArea;
<a name="l00300"></a>00300           }
<a name="l00301"></a>00301         } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l00302"></a>00302 
<a name="l00303"></a>00303         <span class="comment">// if there is more than 1 root</span>
<a name="l00304"></a>00304         <span class="keywordflow">else</span> {
<a name="l00305"></a>00305           cout &lt;&lt; <span class="stringliteral">&quot;let&#39;s have a look at all the roots:&quot;</span> &lt;&lt; endl;
<a name="l00306"></a>00306           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; rootVec.size(); i++) {
<a name="l00307"></a>00307             cout &lt;&lt; rootVec[i] &lt;&lt; endl;
<a name="l00308"></a>00308           }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310           <span class="comment">//first check if the first root is at the boundary</span>
<a name="l00311"></a>00311           <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-16 ) {
<a name="l00312"></a>00312             cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the leftmost boundary:&quot;</span> &lt;&lt; endl;
<a name="l00313"></a>00313             interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[1]));
<a name="l00314"></a>00314             cout &lt;&lt; <span class="stringliteral">&quot;0-th interval:&quot;</span> &lt;&lt; thisSubIntFirst &lt;&lt; endl; 
<a name="l00315"></a>00315             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, Deg, TOL,Weight, Mean, Sigma);
<a name="l00316"></a>00316             totalArea += diffArea;
<a name="l00317"></a>00317             
<a name="l00318"></a>00318             <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l00319"></a>00319             <span class="comment">// get the sub-itnervals</span>
<a name="l00320"></a>00320             cout &lt;&lt; <span class="stringliteral">&quot;iterating through each root&quot;</span> &lt;&lt; endl;
<a name="l00321"></a>00321             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (rootVec.size() - 1); i++) {
<a name="l00322"></a>00322               <span class="comment">// check that this is a unique root</span>
<a name="l00323"></a>00323               cout &lt;&lt; <span class="stringliteral">&quot;checking that this is a unique root&quot;</span> &lt;&lt; endl;
<a name="l00324"></a>00324               <span class="comment">// not the best way but temporarily...</span>
<a name="l00325"></a>00325               <span class="keywordtype">bool</span> uniq = subset(abs(rootVec[i] - rootVec[i+1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10));
<a name="l00326"></a>00326               <span class="keywordflow">if</span> ( uniq ) { i++; }
<a name="l00327"></a>00327               <span class="keywordflow">else</span> {
<a name="l00328"></a>00328                 cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th root is: &quot;</span> &lt;&lt; rootVec[i+1] &lt;&lt; endl;
<a name="l00329"></a>00329                 <span class="keywordflow">if</span> ( (i+2) &gt; rootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l00330"></a>00330                   interval thisSubInt = interval(inf(rootVec[i+1]), Sup(thisInt));
<a name="l00331"></a>00331                   cout &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
<a name="l00332"></a>00332                   interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00333"></a>00333                   totalArea += diffArea;
<a name="l00334"></a>00334                 }
<a name="l00335"></a>00335                 <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l00336"></a>00336                   interval thisSubInt = interval(inf(rootVec[i+1]), sup(rootVec[i+2]));
<a name="l00337"></a>00337                   cout &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
<a name="l00338"></a>00338                   interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00339"></a>00339                   totalArea += diffArea;
<a name="l00340"></a>00340                 }
<a name="l00341"></a>00341               }
<a name="l00342"></a>00342             } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l00343"></a>00343             
<a name="l00344"></a>00344             <span class="comment">// now check if the last root is at the boundary</span>
<a name="l00345"></a>00345             <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(rootVec[rootVec.size()-1])) &lt; 1e-16 ) {
<a name="l00346"></a>00346               cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the rightmost boundary:&quot;</span> &lt;&lt; endl;
<a name="l00347"></a>00347               interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-2]), Sup(thisInt));
<a name="l00348"></a>00348               cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
<a name="l00349"></a>00349               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
<a name="l00350"></a>00350               totalArea += diffArea;
<a name="l00351"></a>00351             }
<a name="l00352"></a>00352             <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l00353"></a>00353             interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-1]), Sup(thisInt));
<a name="l00354"></a>00354               cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
<a name="l00355"></a>00355               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
<a name="l00356"></a>00356               totalArea += diffArea;
<a name="l00357"></a>00357             } 
<a name="l00358"></a>00358           } <span class="comment">// end of if first root is the boundary</span>
<a name="l00359"></a>00359           <span class="keywordflow">else</span> {
<a name="l00360"></a>00360           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l00361"></a>00361             interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l00362"></a>00362             cout &lt;&lt; <span class="stringliteral">&quot;0-th interval: &quot;</span> &lt;&lt; thisSubIntFirst &lt;&lt; endl; 
<a name="l00363"></a>00363             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, Deg, TOL, Weight, Mean, Sigma);
<a name="l00364"></a>00364             totalArea += diffArea;
<a name="l00365"></a>00365             
<a name="l00366"></a>00366             <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l00367"></a>00367             <span class="comment">// get the sub-itnervals</span>
<a name="l00368"></a>00368             cout &lt;&lt; <span class="stringliteral">&quot;iterating through each root&quot;</span> &lt;&lt; endl;
<a name="l00369"></a>00369             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (rootVec.size() - 1); i++) {
<a name="l00370"></a>00370               <span class="comment">// check that this is a unique root</span>
<a name="l00371"></a>00371               cout &lt;&lt; <span class="stringliteral">&quot;checking that this is a unique root&quot;</span> &lt;&lt; endl;
<a name="l00372"></a>00372               <span class="comment">// not the best way but temporarily...</span>
<a name="l00373"></a>00373               <span class="keywordtype">bool</span> uniq = subset(abs(rootVec[i] - rootVec[i+1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10));
<a name="l00374"></a>00374               <span class="keywordflow">if</span> ( uniq ) { i++; }
<a name="l00375"></a>00375               <span class="keywordflow">else</span> {
<a name="l00376"></a>00376                 cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th root is: &quot;</span> &lt;&lt; rootVec[i+1] &lt;&lt; endl;
<a name="l00377"></a>00377                 <span class="keywordflow">if</span> ( (i+2) &gt; rootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l00378"></a>00378                   interval thisSubInt = interval(inf(rootVec[i+1]), Sup(thisInt));
<a name="l00379"></a>00379                   cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
<a name="l00380"></a>00380                   interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00381"></a>00381                   totalArea += diffArea;
<a name="l00382"></a>00382                 }
<a name="l00383"></a>00383                 <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l00384"></a>00384                   interval thisSubInt = interval(inf(rootVec[i+1]), sup(rootVec[i+2]));
<a name="l00385"></a>00385                   cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
<a name="l00386"></a>00386                   interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
<a name="l00387"></a>00387                   totalArea += diffArea;
<a name="l00388"></a>00388                 }
<a name="l00389"></a>00389               }
<a name="l00390"></a>00390             } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l00391"></a>00391             
<a name="l00392"></a>00392             <span class="comment">// now check if the last root is at the boundary</span>
<a name="l00393"></a>00393             <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(rootVec[rootVec.size()-1])) &lt; 1e-16 ) {
<a name="l00394"></a>00394               cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the rightmost boundary:&quot;</span> &lt;&lt; endl;
<a name="l00395"></a>00395               interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-2]), Sup(thisInt));
<a name="l00396"></a>00396               cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
<a name="l00397"></a>00397               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
<a name="l00398"></a>00398               totalArea += diffArea;
<a name="l00399"></a>00399             }
<a name="l00400"></a>00400             <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l00401"></a>00401             interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-1]), Sup(thisInt));
<a name="l00402"></a>00402               cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
<a name="l00403"></a>00403               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
<a name="l00404"></a>00404               totalArea += diffArea;
<a name="l00405"></a>00405             } 
<a name="l00406"></a>00406           } <span class="comment">// end of first root is not the boundary</span>
<a name="l00407"></a>00407         } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l00408"></a>00408       } <span class="comment">// end of rootVec is not empty</span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410     } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l00411"></a>00411     
<a name="l00412"></a>00412     cout &lt;&lt; <span class="stringliteral">&quot;IAE: &quot;</span> &lt;&lt; totalArea &lt;&lt; endl;
<a name="l00413"></a>00413     } <span class="comment">// end of successfulPQsplit</span>
<a name="l00414"></a>00414     
<a name="l00415"></a>00415   <span class="keywordflow">else</span> {
<a name="l00416"></a>00416      cerr &lt;&lt; <span class="stringliteral">&quot;did not make histogram.&quot;</span> &lt;&lt; endl;
<a name="l00417"></a>00417    }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419   <span class="comment">// free the random number generator</span>
<a name="l00420"></a>00420   gsl_rng_free (r);
<a name="l00421"></a>00421 
<a name="l00422"></a>00422   <span class="keywordflow">return</span> 0;
<a name="l00423"></a>00423 }
<a name="l00424"></a>00424 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="IntervalArithIAE_8cpp.shtml">IntervalArithIAE.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
