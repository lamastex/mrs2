<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCFunctionSimGaussianQueue.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCFunctionSimGaussianQueue_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCFunctionSimGaussianQueue.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCFunctionSimGaussianQueue_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;intervalmappedspnode_measurers.hpp&quot;</span> <span class="comment">// ordering for pq split</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;functionestimator_interval.hpp&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>  
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj_8hpp.shtml" title="Declarations for multivariate Gaussian example function object class.">GaussianFobj.hpp</a>&quot;</span> <span class="comment">// fobj</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>cxsc;
<a name="l00043"></a>00043 <span class="keyword">using namespace </span>std;
<a name="l00044"></a>00044 <span class="keyword">using namespace </span>subpavings;
<a name="l00045"></a>00045 
<a name="l00046"></a><a class="code" href="MCMCFunctionSimGaussianQueue_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00046</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048   <span class="comment">// sort out user-defined parameters------------------//</span>
<a name="l00049"></a>00049   <span class="keywordflow">if</span> ( argc &lt; 19 ) {
<a name="l00050"></a>00050     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: &quot;</span> &lt;&lt; argv[0] &lt;&lt; 
<a name="l00051"></a>00051     <span class="stringliteral">&quot;d maxLeavesEst n states symmetryIndicator seed burnin thinout [log_full]&quot;</span> &lt;&lt; endl;
<a name="l00052"></a>00052     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Syntax: &quot;</span> + std::string(argv[0]) + <span class="stringliteral">&quot;d n states, symmetryIndicator&quot;</span>);
<a name="l00053"></a>00053   }
<a name="l00054"></a>00054   
<a name="l00055"></a>00055   <span class="keywordtype">int</span> d = atoi(argv[1]);  <span class="comment">// dimensions</span>
<a name="l00056"></a>00056   <span class="keywordtype">size_t</span> maxLeavesEst = atoi(argv[2]);  <span class="comment">// number of leaves in estimator</span>
<a name="l00057"></a>00057   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[3]);  <span class="comment">// number of points to generate</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059   cout &lt;&lt; <span class="stringliteral">&quot;Dim: &quot;</span> &lt;&lt; d &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Est: &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot;\t N: &quot;</span> &lt;&lt; n &lt;&lt; endl;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = atoi(argv[4]); <span class="comment">// number of states to loop through</span>
<a name="l00063"></a>00063   <span class="keywordtype">int</span> symmetryIndicator = atoi(argv[5]); <span class="comment">// 1 for symmetric, 0 otherwise</span>
<a name="l00064"></a>00064   <span class="keywordtype">int</span> dataSeed = atoi(argv[6]); <span class="comment">// seed for data generation</span>
<a name="l00065"></a>00065   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = atoi(argv[7]); 
<a name="l00066"></a>00066   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = atoi(argv[8]); 
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   cout &lt;&lt; <span class="stringliteral">&quot;Seed: &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00069"></a>00069   cout &lt;&lt; <span class="stringliteral">&quot;Burnin: &quot;</span> &lt;&lt; burnin &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Thinout: &quot;</span> &lt;&lt; thinout &lt;&lt; endl; 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="keywordtype">size_t</span> hist1Crit = atoi(argv[9]);
<a name="l00072"></a>00072   <span class="keywordtype">size_t</span> hist2Crit = atoi(argv[10]);
<a name="l00073"></a>00073   <span class="keywordtype">size_t</span> hist3Crit = atoi(argv[11]);
<a name="l00074"></a>00074   
<a name="l00075"></a>00075   <span class="keywordtype">size_t</span> hist1CritLeaf = atoi(argv[12]);
<a name="l00076"></a>00076   <span class="keywordtype">size_t</span> hist2CritLeaf = atoi(argv[13]);
<a name="l00077"></a>00077   
<a name="l00078"></a>00078   <span class="keywordtype">size_t</span> NumStatesChosen = atoi(argv[14]);
<a name="l00079"></a>00079   
<a name="l00080"></a>00080   <span class="keywordtype">bool</span> computeIAE = atoi(argv[15]);
<a name="l00081"></a>00081   
<a name="l00082"></a>00082   <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00083"></a>00083   <span class="keywordtype">size_t</span> minPQPoints1 = 1;
<a name="l00084"></a>00084   <span class="keywordtype">size_t</span> minPQPoints2 = 1;
<a name="l00085"></a>00085   <span class="keywordtype">size_t</span> minPQPoints3 = 1;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordtype">bool</span> shiftCatalan = 0;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="keywordtype">bool</span> minVolControl = atoi(argv[16]);
<a name="l00090"></a>00090   <span class="keywordtype">int</span> loggingType = atoi(argv[17]); <span class="comment">//1 - NOLOG; 2 - LOGSTATETRACE</span>
<a name="l00091"></a>00091   <span class="keywordtype">bool</span> IAEPQ = atoi(argv[18]);
<a name="l00092"></a>00092   
<a name="l00093"></a>00093   <span class="comment">/* for logging to output the logposterior for the sample average and current state */</span>
<a name="l00094"></a>00094   <span class="comment">/* use LOGSTATETRACE only for current state */</span>
<a name="l00095"></a>00095   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging;
<a name="l00096"></a>00096   
<a name="l00097"></a>00097   <span class="keywordflow">if</span> ( loggingType == 1) { logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; }
<a name="l00098"></a>00098   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( loggingType == 2 ) { logging = LOGSTATETRACE; }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   cout &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; : process id is &quot;</span> &lt;&lt; getpid() &lt;&lt; std::endl;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">// set up proposal distribution object</span>
<a name="l00104"></a>00104   <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00105"></a>00105   <span class="comment">// set up prior distribution object</span>
<a name="l00106"></a>00106   <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00107"></a>00107     
<a name="l00108"></a>00108   interval pavingIntervalSym(-6,6);
<a name="l00109"></a>00109   interval pavingIntervalNonSym(-6.5,7);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111   interval pavingInterval = pavingIntervalSym; <span class="comment">// if we are doing symmetric case</span>
<a name="l00112"></a>00112   <span class="comment">// but if we&#39;ve asked for non-symmetric, change this</span>
<a name="l00113"></a>00113   <span class="keywordflow">if</span> (!symmetryIndicator) pavingInterval = pavingIntervalNonSym;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">// for output purposes</span>
<a name="l00116"></a>00116   <span class="comment">// string formatting</span>
<a name="l00117"></a>00117   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00118"></a>00118    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00119"></a>00119    oss.precision(10);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   <span class="comment">//=======get the root box from the actual data==============//</span>
<a name="l00122"></a>00122   <span class="comment">// set up a random number generator and use mt19937 for generator</span>
<a name="l00123"></a>00123   gsl_rng * r = gsl_rng_alloc (gsl_rng_mt19937); <span class="comment">// set up with default seed</span>
<a name="l00124"></a>00124   <span class="comment">//long unsigned int seed = 1234;</span>
<a name="l00125"></a>00125   gsl_rng_set (r, dataSeed); <span class="comment">// change the seed</span>
<a name="l00126"></a>00126   cout &lt;&lt; <span class="stringliteral">&quot;Data seed is &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00127"></a>00127   
<a name="l00128"></a>00128   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* tempDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00131"></a>00131     rvector thisrv(d);
<a name="l00132"></a>00132     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00133"></a>00133       <span class="comment">//double z = gsl_rng_uniform(r);</span>
<a name="l00134"></a>00134       <span class="keywordtype">double</span> z = gsl_ran_gaussian(r, 1.0); <span class="comment">// generate a normal r.v.</span>
<a name="l00135"></a>00135       thisrv[j] = (z);
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137     <span class="comment">// put points generated into container</span>
<a name="l00138"></a>00138     tempDataPtr-&gt;push_back(thisrv);
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* tempHist = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>; 
<a name="l00142"></a>00142   tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*tempDataPtr);
<a name="l00143"></a>00143   ivector pavingBoxEst = tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc" title="Get the box of the subpaving managed by this.">getRootBox</a>();
<a name="l00144"></a>00144   <span class="keyword">delete</span> tempHist;
<a name="l00145"></a>00145   <span class="keyword">delete</span> tempDataPtr;
<a name="l00146"></a>00146   <span class="comment">//=========end of getting a root box from the actual data=============</span>
<a name="l00147"></a>00147   
<a name="l00148"></a>00148   <span class="comment">//============== make estimate ============//</span>
<a name="l00149"></a>00149   cout &lt;&lt; <span class="stringliteral">&quot;\nMake the function estimator to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00150"></a>00150   
<a name="l00151"></a>00151   <span class="comment">// specify function object (from /examples/MappedTargets</span>
<a name="l00152"></a>00152   <a class="code" href="classsubpavings_1_1GaussianFobj.shtml">GaussianFobj</a> fobj;
<a name="l00153"></a>00153   
<a name="l00154"></a>00154   <span class="comment">/* function estimate is going to use same box as the histograms */</span>
<a name="l00155"></a>00155   <span class="comment">//ivector pavingBoxEst(d);</span>
<a name="l00156"></a>00156   <span class="comment">//for(int k=1; k &lt;= d; k++) pavingBoxEst[k] = pavingInterval;</span>
<a name="l00157"></a>00157   
<a name="l00158"></a>00158   <span class="comment">// Use fobj and pavingBox to get an estimator</span>
<a name="l00159"></a>00159   FunctionEstimatorInterval estimator(pavingBoxEst, fobj);
<a name="l00160"></a>00160   
<a name="l00161"></a>00161   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logEst = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging for making estimator</span>
<a name="l00162"></a>00162   
<a name="l00163"></a>00163 <span class="preprocessor">  #if(1)</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>  <span class="keywordtype">size_t</span> maxLeavesEstDown = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(1.2*maxLeavesEst); <span class="comment">// go down to 1.2 x max</span>
<a name="l00165"></a>00165 <span class="preprocessor">  #endif</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span><span class="preprocessor">  #if(0)</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span>    <span class="keywordtype">size_t</span> maxLeavesEstDown = maxLeavesEst;
<a name="l00168"></a>00168 <span class="preprocessor">  #endif</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>  
<a name="l00170"></a>00170   cout &lt;&lt; <span class="stringliteral">&quot;pq down to max leaves &quot;</span> &lt;&lt; maxLeavesEstDown &lt;&lt; endl;
<a name="l00171"></a>00171   
<a name="l00172"></a>00172   clock_t startEst = clock();
<a name="l00173"></a>00173   
<a name="l00174"></a>00174   <span class="comment">// priority split driven by splitting leaf with max reimann diff</span>
<a name="l00175"></a>00175   ReimannDiffMeasurer measurer;
<a name="l00176"></a>00176   estimator.prioritySplit(measurer, maxLeavesEstDown, logEst);
<a name="l00177"></a>00177       
<a name="l00178"></a>00178   <span class="comment">// stop recording time here</span>
<a name="l00179"></a>00179   clock_t endEst = clock();
<a name="l00180"></a>00180   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves in estimate: &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;  
<a name="l00181"></a>00181   cout &lt;&lt; <span class="stringliteral">&quot;After split, getTotalAreaOfIntervalBand() = &quot;</span>
<a name="l00182"></a>00182     &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00183"></a>00183   <span class="keywordtype">double</span> timingEst1 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00184"></a>00184   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for pq split in estimate: &quot;</span> &lt;&lt; timingEst1 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00185"></a>00185   startEst = clock();
<a name="l00186"></a>00186   
<a name="l00187"></a>00187 <span class="preprocessor">  #if(1) </span>
<a name="l00188"></a>00188 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Hull propagation&quot;</span> &lt;&lt; endl;
<a name="l00189"></a>00189     estimator.hullPropagation();
<a name="l00190"></a>00190     
<a name="l00191"></a>00191     cout &lt;&lt; <span class="stringliteral">&quot;Priority merge to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00192"></a>00192 <span class="preprocessor">    #if(0)</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by minimising increase the reimann diff</span>
<a name="l00194"></a>00194     estimator.priorityMergeOnLoss(maxLeavesEst, logEst);
<a name="l00195"></a>00195 <span class="preprocessor">    #endif</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span><span class="preprocessor">    #if(1)</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by merging cherry with minimum reimann diff</span>
<a name="l00198"></a>00198     estimator.priorityMerge(maxLeavesEst, logEst);
<a name="l00199"></a>00199 <span class="preprocessor">    #endif</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span>          
<a name="l00201"></a>00201     <span class="comment">// stop recording time here</span>
<a name="l00202"></a>00202     endEst = clock(); 
<a name="l00203"></a>00203     <span class="keywordtype">double</span> timingEst2 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00204"></a>00204     cout &lt;&lt; <span class="stringliteral">&quot;Computing time for hull propagate and merge up in estimate: &quot;</span> &lt;&lt; timingEst2 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00205"></a>00205     
<a name="l00206"></a>00206     cout &lt;&lt; <span class="stringliteral">&quot;After propagation and priority merge, getTotalAreaOfIntervalBand() = &quot;</span> 
<a name="l00207"></a>00207           &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00208"></a>00208     cout &lt;&lt; <span class="stringliteral">&quot;number of leaves is = &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; endl;
<a name="l00209"></a>00209 <span class="preprocessor">  #endif</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>  
<a name="l00211"></a>00211   cout &lt;&lt; <span class="stringliteral">&quot;Making estimate and normalising&quot;</span> &lt;&lt; endl;
<a name="l00212"></a>00212   <span class="comment">// Make PiecewiseConstantFunction estimate from estimator</span>
<a name="l00213"></a>00213   <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> estimate = estimator.makePiecewiseConstantFunction();
<a name="l00214"></a>00214   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a>();
<a name="l00215"></a>00215   
<a name="l00216"></a>00216   cout &lt;&lt; <span class="stringliteral">&quot;estimate has integral &quot;</span> &lt;&lt; estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() &lt;&lt; endl;
<a name="l00217"></a>00217   
<a name="l00218"></a>00218   
<a name="l00219"></a>00219   <span class="comment">//optional</span>
<a name="l00220"></a>00220   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(<span class="stringliteral">&quot;pcfEstimate.txt&quot;</span>);
<a name="l00221"></a>00221   
<a name="l00222"></a>00222   <span class="comment">//===========end of estimating function using PCF=========================//</span>
<a name="l00223"></a>00223 
<a name="l00224"></a>00224   <span class="comment">//===========generate data==============================================//</span>
<a name="l00225"></a>00225   <span class="comment">// Use PiecewiseConstantFunction to generate data, supplying our own rng</span>
<a name="l00226"></a>00226   cout &lt;&lt; <span class="stringliteral">&quot;\nGenerating data for simulation&quot;</span> &lt;&lt; endl;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container for all the points generated</span>
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   clock_t startData = clock();
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <span class="comment">// Gaussian data</span>
<a name="l00233"></a>00233   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(*theDataPtr, n, r);
<a name="l00234"></a>00234 
<a name="l00235"></a>00235   <span class="comment">// stop recording time here</span>
<a name="l00236"></a>00236   clock_t endData = clock();  
<a name="l00237"></a>00237   <span class="keywordtype">double</span> timingData = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endData - startData)) / CLOCKS_PER_SEC);
<a name="l00238"></a>00238   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for simulating data: &quot;</span> &lt;&lt; timingData &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   cout &lt;&lt; (*theDataPtr).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00241"></a>00241   
<a name="l00242"></a>00242   <span class="keywordflow">try</span> {
<a name="l00243"></a>00243     gsl_rng_free (r);
<a name="l00244"></a>00244     r = NULL;
<a name="l00245"></a>00245   }
<a name="l00246"></a>00246   <span class="keywordflow">catch</span>(...) {}<span class="comment">// catch and swallow</span>
<a name="l00247"></a>00247   
<a name="l00248"></a>00248   cout &lt;&lt; <span class="stringliteral">&quot;\nStart example: n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; and d = &quot;</span> &lt;&lt; d &lt;&lt; endl;
<a name="l00249"></a>00249   <span class="comment">//cout &lt;&lt; &quot;Paving interval is &quot; &lt;&lt; pavingInterval &lt;&lt; endl;</span>
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="comment">//===========end of generating data=================================//</span>
<a name="l00252"></a>00252 
<a name="l00253"></a>00253   <span class="comment">//==============MCMC with different starting states========================//</span>
<a name="l00254"></a>00254   <span class="keywordtype">int</span> numFunc = 1;
<a name="l00255"></a>00255   
<a name="l00256"></a>00256   ostringstream stmSeed;
<a name="l00257"></a>00257   stmSeed &lt;&lt; dataSeed;
<a name="l00258"></a>00258 
<a name="l00259"></a>00259   <span class="comment">// parameters needed to start the PQ</span>
<a name="l00260"></a>00260   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logPQ = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging level  </span>
<a name="l00261"></a>00261   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> comp2; 
<a name="l00262"></a>00262   CompVolMassMinus comp1;
<a name="l00263"></a>00263   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00264"></a>00264   vector&lt;real&gt; IAEContainer; <span class="comment">//for MCMC </span>
<a name="l00265"></a>00265   vector&lt;double&gt; Times; <span class="comment">// for MCMC times</span>
<a name="l00266"></a>00266 
<a name="l00267"></a>00267   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> func = 0; func &lt; numFunc; func++) {
<a name="l00268"></a>00268     
<a name="l00269"></a>00269     <span class="keywordtype">double</span> minVolB = 0.0; <span class="comment">// to control the carving-in PQ so that it will not</span>
<a name="l00270"></a>00270                   <span class="comment">// over-zoom into areas with small volumes</span>
<a name="l00271"></a>00271     
<a name="l00272"></a>00272     cout &lt;&lt; <span class="stringliteral">&quot;\n========Function : &quot;</span> &lt;&lt; func &lt;&lt; <span class="stringliteral">&quot;========&quot;</span> &lt;&lt; endl; 
<a name="l00273"></a>00273     ostringstream stm;
<a name="l00274"></a>00274     stm &lt;&lt; func; <span class="comment">// for output purposes</span>
<a name="l00275"></a>00275     vector&lt;size_t&gt; LeafContainer; <span class="comment">// to store the number of leaf nodes from which the optimal posterior support is at</span>
<a name="l00276"></a>00276     
<a name="l00277"></a>00277     <span class="comment">/*</span>
<a name="l00278"></a>00278 <span class="comment">    // make the paving box</span>
<a name="l00279"></a>00279 <span class="comment">    ivector pavingBox(d);</span>
<a name="l00280"></a>00280 <span class="comment">    for(int k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;</span>
<a name="l00281"></a>00281 <span class="comment">    */</span>
<a name="l00282"></a>00282     
<a name="l00283"></a>00283     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00284"></a>00284     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00285"></a>00285     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00286"></a>00286     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBoxEst); <span class="comment">// still let the data decide the box</span>
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00289"></a>00289     <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00292"></a>00292 
<a name="l00293"></a>00293       vector&lt;real&gt; ChosenStateMaxPosterior;
<a name="l00294"></a>00294       vector&lt;AdaptiveHistogram&gt; ChosenStateSubset;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296       <span class="comment">//===== start the SEB-PQ from the root node as a sanity check====//</span>
<a name="l00297"></a>00297       {
<a name="l00298"></a>00298       cout &lt;&lt; <span class="stringliteral">&quot;Starting the SEB-PQ from the root node:&quot;</span> &lt;&lt; endl;
<a name="l00299"></a>00299       <span class="comment">// initialize containers</span>
<a name="l00300"></a>00300       vector&lt;real&gt; PosteriorChosen;
<a name="l00301"></a>00301       vector&lt;double&gt; EmptyBoxChosen;
<a name="l00302"></a>00302       vector&lt;real&gt; PosteriorSupportChosen;
<a name="l00303"></a>00303       vector&lt;real&gt; IAEContainerChosen;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHist(pavingBoxEst);
<a name="l00306"></a>00306       myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00307"></a>00307 
<a name="l00308"></a>00308       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critStop(hist3Crit);
<a name="l00309"></a>00309       cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ to &quot;</span>  &lt;&lt; (hist3Crit) &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00310"></a>00310       <span class="keywordtype">int</span> Txt = 9000 + func*100 + NumStatesChosen;
<a name="l00311"></a>00311       <span class="keywordflow">if</span> (func == 0) {
<a name="l00312"></a>00312         myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00313"></a>00313         logPQ, minPQPoints1, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00314"></a>00314         PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, IAEPQ);
<a name="l00315"></a>00315       }
<a name="l00316"></a>00316       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00317"></a>00317         myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00318"></a>00318         logPQ, minPQPoints2, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00319"></a>00319         PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, IAEPQ);
<a name="l00320"></a>00320       }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322       <span class="comment">//get the minimum volume</span>
<a name="l00323"></a>00323       <span class="keywordflow">if</span> (minVolControl == <span class="keyword">true</span>) {
<a name="l00324"></a>00324         minVolB = myChosenHist.getBoxMinVol();
<a name="l00325"></a>00325         cout &lt;&lt; <span class="stringliteral">&quot;Minimum volume: &quot;</span> &lt;&lt; minVolB &lt;&lt; endl; 
<a name="l00326"></a>00326       }
<a name="l00327"></a>00327       <span class="keywordflow">else</span> { minVolB = -1.0; }
<a name="l00328"></a>00328       
<a name="l00329"></a>00329       ostringstream stm1;
<a name="l00330"></a>00330       stm1 &lt;&lt; NumStatesChosen;
<a name="l00331"></a>00331     
<a name="l00332"></a>00332       <span class="comment">// optional</span>
<a name="l00333"></a>00333       <span class="comment">// output log-posterior</span>
<a name="l00334"></a>00334       <span class="keywordtype">string</span> PostFileName = <span class="stringliteral">&quot;PosteriorChosen&quot;</span>;
<a name="l00335"></a>00335       PostFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00336"></a>00336       PostFileName += stm1.str(); 
<a name="l00337"></a>00337       PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00338"></a>00338       oss.open(PostFileName.c_str());
<a name="l00339"></a>00339       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00340"></a>00340         oss &lt;&lt; PosteriorChosen[i] &lt;&lt; endl;
<a name="l00341"></a>00341       }
<a name="l00342"></a>00342       oss &lt;&lt; flush;
<a name="l00343"></a>00343       oss.close();
<a name="l00344"></a>00344       
<a name="l00345"></a>00345       
<a name="l00346"></a>00346       <span class="comment">// output support log-posterior </span>
<a name="l00347"></a>00347       PostFileName = <span class="stringliteral">&quot;PosteriorSupportChosen&quot;</span>;
<a name="l00348"></a>00348       PostFileName += stm.str();
<a name="l00349"></a>00349       PostFileName += stm1.str();
<a name="l00350"></a>00350       PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00351"></a>00351       oss.open(PostFileName.c_str());
<a name="l00352"></a>00352       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupportChosen.size(); i++) {
<a name="l00353"></a>00353         oss &lt;&lt; PosteriorSupportChosen[i] &lt;&lt; endl;
<a name="l00354"></a>00354       }
<a name="l00355"></a>00355       oss &lt;&lt; flush;
<a name="l00356"></a>00356       oss.close();
<a name="l00357"></a>00357   
<a name="l00358"></a>00358 <span class="comment">/*      // output the cumulative ratio of empty boxes</span>
<a name="l00359"></a>00359 <span class="comment">      EmptyFileName = &quot;EmptyChosen&quot;;</span>
<a name="l00360"></a>00360 <span class="comment">      EmptyFileName += stm.str();</span>
<a name="l00361"></a>00361 <span class="comment">      EmptyFileName += stm1.str();</span>
<a name="l00362"></a>00362 <span class="comment">      EmptyFileName += &quot;.txt&quot;;</span>
<a name="l00363"></a>00363 <span class="comment">      oss.open(EmptyFileName.c_str());</span>
<a name="l00364"></a>00364 <span class="comment">      for (size_t i = 0; i &lt; EmptyBoxChosen.size(); i++) {</span>
<a name="l00365"></a>00365 <span class="comment">        oss &lt;&lt; EmptyBoxChosen[i] &lt;&lt; endl;</span>
<a name="l00366"></a>00366 <span class="comment">      }</span>
<a name="l00367"></a>00367 <span class="comment">      oss &lt;&lt; flush;</span>
<a name="l00368"></a>00368 <span class="comment">      oss.close();</span>
<a name="l00369"></a>00369 <span class="comment">*/</span>      
<a name="l00370"></a>00370 
<a name="l00371"></a>00371       <span class="comment">//output IAE from second stage</span>
<a name="l00372"></a>00372       <span class="keywordtype">string</span> IAEFileName = <span class="stringliteral">&quot;IAEPQChosen&quot;</span>;
<a name="l00373"></a>00373       IAEFileName += stmSeed.str();
<a name="l00374"></a>00374       IAEFileName += stm1.str();
<a name="l00375"></a>00375       IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00376"></a>00376       oss.open(IAEFileName.c_str());
<a name="l00377"></a>00377       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEContainerChosen.size(); i++) {
<a name="l00378"></a>00378         oss &lt;&lt; IAEContainerChosen[i] &lt;&lt; endl;
<a name="l00379"></a>00379       }
<a name="l00380"></a>00380       oss &lt;&lt; flush;
<a name="l00381"></a>00381       oss.close();
<a name="l00382"></a>00382 
<a name="l00383"></a>00383       <span class="comment">// get the max position for this sub-set</span>
<a name="l00384"></a>00384       <span class="keywordtype">size_t</span> maxPosition = 0;
<a name="l00385"></a>00385       real maxPosterior = -1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00386"></a>00386       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00387"></a>00387         <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; PosteriorChosen[i] &lt;&lt; endl;</span>
<a name="l00388"></a>00388         <span class="keywordflow">if</span> (PosteriorChosen[i] &gt; maxPosterior) {
<a name="l00389"></a>00389           maxPosterior = PosteriorChosen[i];
<a name="l00390"></a>00390           maxPosition = i;
<a name="l00391"></a>00391         }
<a name="l00392"></a>00392       }
<a name="l00393"></a>00393       cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ from root node has log-posterior highest at index &quot;</span> &lt;&lt; maxPosition;
<a name="l00394"></a>00394       ChosenStateMaxPosterior.push_back(PosteriorChosen[maxPosition]);
<a name="l00395"></a>00395 
<a name="l00396"></a>00396       <span class="comment">// now get the posterior-optimal histogram for this subset using PQ-SEB</span>
<a name="l00397"></a>00397       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHistSubset(pavingBoxEst);
<a name="l00398"></a>00398       myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00399"></a>00399       <span class="comment">// be careful here</span>
<a name="l00400"></a>00400       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMaxSubset(maxPosition+1);
<a name="l00401"></a>00401       
<a name="l00402"></a>00402       <span class="keywordflow">if</span> (func == 0) {
<a name="l00403"></a>00403         myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00404"></a>00404         logPQ, minPQPoints1);
<a name="l00405"></a>00405       }
<a name="l00406"></a>00406       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00407"></a>00407         myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00408"></a>00408         logPQ, minPQPoints2);
<a name="l00409"></a>00409       }
<a name="l00410"></a>00410       cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00411"></a>00411       <span class="comment">//keep this histogram in a container</span>
<a name="l00412"></a>00412       ChosenStateSubset.push_back(myChosenHistSubset);
<a name="l00413"></a>00413       cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------&quot;</span> &lt;&lt; endl;
<a name="l00414"></a>00414       
<a name="l00415"></a>00415       <span class="comment">//optional</span>
<a name="l00416"></a>00416       <span class="comment">//output &quot;best&quot; histogram from SEBPQ from root node</span>
<a name="l00417"></a>00417       myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;SelectedSEBPQHist.txt&quot;</span>);
<a name="l00418"></a>00418       
<a name="l00419"></a>00419       }
<a name="l00420"></a>00420       <span class="comment">//-------------end of getting from the root node------------------//</span>
<a name="l00421"></a>00421 
<a name="l00422"></a>00422       <span class="comment">//===========A carved-in PQ======================//</span>
<a name="l00423"></a>00423       <span class="keywordtype">size_t</span> histCrit;
<a name="l00424"></a>00424       <span class="keywordflow">if</span> (func == 0) { histCrit = hist1Crit; }
<a name="l00425"></a>00425       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func==1) { histCrit = hist2Crit; }
<a name="l00426"></a>00426       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critStop(histCrit);
<a name="l00427"></a>00427       cout &lt;&lt; <span class="stringliteral">&quot;Carving-in PQ to &quot;</span>  &lt;&lt; histCrit &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429       <span class="comment">//containers to store needed outputs</span>
<a name="l00430"></a>00430       vector&lt;real&gt; Posterior;
<a name="l00431"></a>00431       vector&lt;real&gt; PosteriorSupport;
<a name="l00432"></a>00432       vector&lt;double&gt; EmptyBox;
<a name="l00433"></a>00433       <span class="keywordtype">int</span> Txt = func;
<a name="l00434"></a>00434       vector&lt;real&gt; IAEPQContainer;
<a name="l00435"></a>00435 
<a name="l00436"></a>00436       <span class="keywordtype">bool</span> successfulHist = <span class="keyword">false</span>;
<a name="l00437"></a>00437       <span class="comment">// start the carving PQ here</span>
<a name="l00438"></a>00438       <span class="keywordflow">if</span> (func == 0) {
<a name="l00439"></a>00439         successfulHist = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(comp1, critStop, 
<a name="l00440"></a>00440         logPQ, minPQPoints1, minVolB, Posterior, logPrior, Txt, EmptyBox, 
<a name="l00441"></a>00441         PosteriorSupport, IAEPQContainer, estimate, shiftCatalan, IAEPQ);
<a name="l00442"></a>00442       }
<a name="l00443"></a>00443       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00444"></a>00444         successfulHist = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(comp2, critStop, 
<a name="l00445"></a>00445         logPQ, minPQPoints2, minVolB, Posterior, logPrior, Txt, EmptyBox,
<a name="l00446"></a>00446         PosteriorSupport, IAEPQContainer, estimate, shiftCatalan, IAEPQ);
<a name="l00447"></a>00447       }
<a name="l00448"></a>00448 
<a name="l00449"></a>00449       <span class="keywordflow">if</span> (successfulHist) {
<a name="l00450"></a>00450         
<a name="l00451"></a>00451         <span class="comment">// output log-posterior</span>
<a name="l00452"></a>00452         <span class="keywordtype">string</span> PostFileName;
<a name="l00453"></a>00453         PostFileName = <span class="stringliteral">&quot;Posterior&quot;</span>;
<a name="l00454"></a>00454         PostFileName += stm.str();
<a name="l00455"></a>00455         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00456"></a>00456         oss.open(PostFileName.c_str());
<a name="l00457"></a>00457         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; Posterior.size(); i++) {
<a name="l00458"></a>00458           oss &lt;&lt; Posterior[i] &lt;&lt; endl;
<a name="l00459"></a>00459         }
<a name="l00460"></a>00460         oss &lt;&lt; flush;
<a name="l00461"></a>00461         oss.close();
<a name="l00462"></a>00462         
<a name="l00463"></a>00463         
<a name="l00464"></a>00464         <span class="comment">// output support log-posterior </span>
<a name="l00465"></a>00465         PostFileName = <span class="stringliteral">&quot;PosteriorSupport&quot;</span>;
<a name="l00466"></a>00466         PostFileName += stm.str();
<a name="l00467"></a>00467         PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00468"></a>00468         oss.open(PostFileName.c_str());
<a name="l00469"></a>00469         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupport.size(); i++) {
<a name="l00470"></a>00470           oss &lt;&lt; PosteriorSupport[i] &lt;&lt; endl;
<a name="l00471"></a>00471         }
<a name="l00472"></a>00472         oss &lt;&lt; flush;
<a name="l00473"></a>00473         oss.close();
<a name="l00474"></a>00474         
<a name="l00475"></a>00475         
<a name="l00476"></a>00476 <span class="comment">/*        // output the cumulative ratio of empty boxes</span>
<a name="l00477"></a>00477 <span class="comment">        string EmptyFileName;</span>
<a name="l00478"></a>00478 <span class="comment">        EmptyFileName = &quot;Empty&quot;;</span>
<a name="l00479"></a>00479 <span class="comment">        EmptyFileName += stm.str();</span>
<a name="l00480"></a>00480 <span class="comment">        EmptyFileName += &quot;.txt&quot;;</span>
<a name="l00481"></a>00481 <span class="comment">        oss.open(EmptyFileName.c_str());</span>
<a name="l00482"></a>00482 <span class="comment">        for (size_t i = 0; i &lt; EmptyBox.size(); i++) {</span>
<a name="l00483"></a>00483 <span class="comment">          oss &lt;&lt; EmptyBox[i] &lt;&lt; endl;</span>
<a name="l00484"></a>00484 <span class="comment">        }</span>
<a name="l00485"></a>00485 <span class="comment">        oss &lt;&lt; flush;</span>
<a name="l00486"></a>00486 <span class="comment">        oss.close();</span>
<a name="l00487"></a>00487 <span class="comment">*/</span>        
<a name="l00488"></a>00488         
<a name="l00489"></a>00489         <span class="comment">//output IAE from second stage</span>
<a name="l00490"></a>00490         <span class="keywordtype">string</span> IAEFileName = <span class="stringliteral">&quot;IAEPQZoomIn&quot;</span>;
<a name="l00491"></a>00491         IAEFileName += stm.str();
<a name="l00492"></a>00492         IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00493"></a>00493         oss.open(IAEFileName.c_str());
<a name="l00494"></a>00494         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEPQContainer.size(); i++) {
<a name="l00495"></a>00495           oss &lt;&lt; IAEPQContainer[i] &lt;&lt; endl;
<a name="l00496"></a>00496         }
<a name="l00497"></a>00497         oss &lt;&lt; flush;
<a name="l00498"></a>00498         oss.close();
<a name="l00499"></a>00499         <span class="comment">//=============end of carving in====================//</span>
<a name="l00500"></a>00500         
<a name="l00501"></a>00501         <span class="comment">//==== get K number of states with a local highest posterior ====//</span>
<a name="l00502"></a>00502         cout &lt;&lt; <span class="stringliteral">&quot;Choosing &quot;</span> &lt;&lt; NumStatesChosen &lt;&lt; <span class="stringliteral">&quot; states&quot;</span> &lt;&lt; endl;
<a name="l00503"></a>00503         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; NumStatesChosen; j++) {
<a name="l00504"></a>00504           ostringstream stmj;
<a name="l00505"></a>00505           stmj &lt;&lt; j;
<a name="l00506"></a>00506           <span class="keywordtype">int</span> step = int(1.0*PosteriorSupport.size()/(1.0*NumStatesChosen));
<a name="l00507"></a>00507           <span class="comment">//find where the posterior/log-posterior/emptyVol is the highest</span>
<a name="l00508"></a>00508           <span class="keywordtype">size_t</span> maxPosition = 0;
<a name="l00509"></a>00509           real maxPosterior = -1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00510"></a>00510           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; step; i++) {
<a name="l00511"></a>00511             <span class="keywordtype">size_t</span> thisPosition = j*step + i;
<a name="l00512"></a>00512             <span class="comment">//cout &lt;&lt; thisPosition &lt;&lt; &quot;\t&quot; &lt;&lt; PosteriorSupport[thisPosition] &lt;&lt; endl;</span>
<a name="l00513"></a>00513             <span class="keywordflow">if</span> (PosteriorSupport[thisPosition] &gt; maxPosterior) {
<a name="l00514"></a>00514               maxPosterior = PosteriorSupport[thisPosition];
<a name="l00515"></a>00515               maxPosition = thisPosition;
<a name="l00516"></a>00516             }
<a name="l00517"></a>00517           }
<a name="l00518"></a>00518           cout &lt;&lt; <span class="stringliteral">&quot;----------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00519"></a>00519           <span class="comment">//cout &lt;&lt; j &lt;&lt; &quot;-th subset: &quot;&lt;&lt; endl;</span>
<a name="l00520"></a>00520           cout &lt;&lt; <span class="stringliteral">&quot;log posterior highest at split &quot;</span> &lt;&lt; maxPosition;
<a name="l00521"></a>00521           <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMax(maxPosition+1);
<a name="l00522"></a>00522           LeafContainer.push_back(maxPosition+1);
<a name="l00523"></a>00523 
<a name="l00524"></a>00524           <span class="comment">// now get the posterior-optimal histogram</span>
<a name="l00525"></a>00525           <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHist(pavingBoxEst);
<a name="l00526"></a>00526           myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00527"></a>00527           
<a name="l00528"></a>00528           <span class="comment">// get the corresponding histogram</span>
<a name="l00529"></a>00529           <span class="keywordflow">if</span> (func == 0) {
<a name="l00530"></a>00530             myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(comp1, critValMax, logPQ, minPQPoints1);
<a name="l00531"></a>00531           }
<a name="l00532"></a>00532           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00533"></a>00533             myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(comp2, critValMax, logPQ, minPQPoints2);
<a name="l00534"></a>00534           }
<a name="l00535"></a>00535           <span class="keywordtype">size_t</span> chosenHistLeaves = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>(); 
<a name="l00536"></a>00536           cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; chosenHistLeaves &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00537"></a>00537           
<a name="l00538"></a>00538           <span class="comment">//optional hist output</span>
<a name="l00539"></a>00539           <span class="keywordtype">string</span> SelectedCarvedHistFileName = <span class="stringliteral">&quot;SelectedCarvedHist&quot;</span>;
<a name="l00540"></a>00540           SelectedCarvedHistFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00541"></a>00541           SelectedCarvedHistFileName += stmj.str(); <span class="comment">//for j</span>
<a name="l00542"></a>00542           SelectedCarvedHistFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00543"></a>00543           myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(SelectedCarvedHistFileName);
<a name="l00544"></a>00544           
<a name="l00545"></a>00545           <span class="comment">//========SEB-PQ from chosen histograms======================//</span>
<a name="l00546"></a>00546           <span class="comment">// initialize containers</span>
<a name="l00547"></a>00547           vector&lt;real&gt; PosteriorChosen;
<a name="l00548"></a>00548           vector&lt;double&gt; EmptyBoxChosen;
<a name="l00549"></a>00549           vector&lt;real&gt; PosteriorSupportChosen;
<a name="l00550"></a>00550           vector&lt;real&gt; IAEContainerChosen;
<a name="l00551"></a>00551 
<a name="l00552"></a>00552           <span class="keywordflow">if</span> (func == 0) { histCrit = hist1CritLeaf; }
<a name="l00553"></a>00553           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func==1) { histCrit = hist2CritLeaf; }
<a name="l00554"></a>00554           <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critLeaf(histCrit);
<a name="l00555"></a>00555           cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ to at most &quot;</span>  &lt;&lt; (histCrit) &lt;&lt; <span class="stringliteral">&quot; points in each node&quot;</span> &lt;&lt; endl;
<a name="l00556"></a>00556           Txt = 900 + func*10 + j;
<a name="l00557"></a>00557 
<a name="l00558"></a>00558           <span class="keywordflow">if</span> (func == 0) {
<a name="l00559"></a>00559             successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critLeaf, 
<a name="l00560"></a>00560             logPQ, minPQPoints1, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00561"></a>00561             PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, IAEPQ);
<a name="l00562"></a>00562           }
<a name="l00563"></a>00563           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00564"></a>00564             successfulHist = myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critLeaf, 
<a name="l00565"></a>00565             logPQ, minPQPoints2, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00566"></a>00566             PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, IAEPQ);
<a name="l00567"></a>00567           }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569           
<a name="l00570"></a>00570           <span class="comment">// optional</span>
<a name="l00571"></a>00571           <span class="comment">// output log-posterior</span>
<a name="l00572"></a>00572           PostFileName = <span class="stringliteral">&quot;PosteriorChosen&quot;</span>;
<a name="l00573"></a>00573           PostFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00574"></a>00574           PostFileName += stmj.str(); <span class="comment">//for j</span>
<a name="l00575"></a>00575           PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00576"></a>00576           oss.open(PostFileName.c_str());
<a name="l00577"></a>00577           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00578"></a>00578             oss &lt;&lt; PosteriorChosen[i] &lt;&lt; endl;
<a name="l00579"></a>00579           }
<a name="l00580"></a>00580           oss &lt;&lt; flush;
<a name="l00581"></a>00581           oss.close();
<a name="l00582"></a>00582           
<a name="l00583"></a>00583           
<a name="l00584"></a>00584           <span class="comment">// output support log-posterior </span>
<a name="l00585"></a>00585           PostFileName = <span class="stringliteral">&quot;PosteriorSupportChosen&quot;</span>;
<a name="l00586"></a>00586           PostFileName += stm.str();
<a name="l00587"></a>00587           PostFileName += stmj.str();
<a name="l00588"></a>00588           PostFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00589"></a>00589           oss.open(PostFileName.c_str());
<a name="l00590"></a>00590           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorSupportChosen.size(); i++) {
<a name="l00591"></a>00591             oss &lt;&lt; PosteriorSupportChosen[i] &lt;&lt; endl;
<a name="l00592"></a>00592           }
<a name="l00593"></a>00593           oss &lt;&lt; flush;
<a name="l00594"></a>00594           oss.close();
<a name="l00595"></a>00595   
<a name="l00596"></a>00596 <span class="comment">/*          // output the cumulative ratio of empty boxes</span>
<a name="l00597"></a>00597 <span class="comment">          EmptyFileName = &quot;EmptyChosen&quot;;</span>
<a name="l00598"></a>00598 <span class="comment">          EmptyFileName += stm.str();</span>
<a name="l00599"></a>00599 <span class="comment">          EmptyFileName += stmj.str();</span>
<a name="l00600"></a>00600 <span class="comment">          EmptyFileName += &quot;.txt&quot;;</span>
<a name="l00601"></a>00601 <span class="comment">          oss.open(EmptyFileName.c_str());</span>
<a name="l00602"></a>00602 <span class="comment">          for (size_t i = 0; i &lt; EmptyBoxChosen.size(); i++) {</span>
<a name="l00603"></a>00603 <span class="comment">            oss &lt;&lt; EmptyBoxChosen[i] &lt;&lt; endl;</span>
<a name="l00604"></a>00604 <span class="comment">          }</span>
<a name="l00605"></a>00605 <span class="comment">          oss &lt;&lt; flush;</span>
<a name="l00606"></a>00606 <span class="comment">          oss.close();</span>
<a name="l00607"></a>00607 <span class="comment">          */</span>
<a name="l00608"></a>00608           
<a name="l00609"></a>00609           <span class="comment">//output IAE from second stage</span>
<a name="l00610"></a>00610           <span class="keywordtype">string</span> IAEFileName = <span class="stringliteral">&quot;IAEPQChosen&quot;</span>;
<a name="l00611"></a>00611           IAEFileName += stm.str();
<a name="l00612"></a>00612           IAEFileName += stmj.str();
<a name="l00613"></a>00613           IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00614"></a>00614           oss.open(IAEFileName.c_str());
<a name="l00615"></a>00615           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEContainerChosen.size(); i++) {
<a name="l00616"></a>00616             oss &lt;&lt; IAEContainerChosen[i] &lt;&lt; endl;
<a name="l00617"></a>00617           }
<a name="l00618"></a>00618           oss &lt;&lt; flush;
<a name="l00619"></a>00619           oss.close();
<a name="l00620"></a>00620           
<a name="l00621"></a>00621           <span class="comment">// get the max position for this sub-set</span>
<a name="l00622"></a>00622           maxPosition = 0;
<a name="l00623"></a>00623           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; PosteriorChosen.size(); i++) {
<a name="l00624"></a>00624             <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; PosteriorChosen[i] &lt;&lt; endl; </span>
<a name="l00625"></a>00625             <span class="keywordflow">if</span> (PosteriorChosen[i] &gt; maxPosterior) {
<a name="l00626"></a>00626               maxPosterior = PosteriorChosen[i];
<a name="l00627"></a>00627               maxPosition = i;
<a name="l00628"></a>00628             }
<a name="l00629"></a>00629           }
<a name="l00630"></a>00630           cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ using carved support has log-posterior highest at index &quot;</span> &lt;&lt; maxPosition;
<a name="l00631"></a>00631           ChosenStateMaxPosterior.push_back(PosteriorChosen[maxPosition]);
<a name="l00632"></a>00632           
<a name="l00633"></a>00633           <span class="comment">// now get the posterior-optimal histogram for this subset using PQ-SEB</span>
<a name="l00634"></a>00634           <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHistSubset(pavingBoxEst);
<a name="l00635"></a>00635           myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00636"></a>00636           <span class="comment">// be careful here</span>
<a name="l00637"></a>00637           <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critValMaxSubset(chosenHistLeaves+maxPosition);
<a name="l00638"></a>00638           
<a name="l00639"></a>00639           <span class="keywordflow">if</span> (func == 0) {
<a name="l00640"></a>00640             myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00641"></a>00641             logPQ, minPQPoints1);
<a name="l00642"></a>00642           }
<a name="l00643"></a>00643           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00644"></a>00644             myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount, critValMaxSubset, 
<a name="l00645"></a>00645             logPQ, minPQPoints2);
<a name="l00646"></a>00646           }
<a name="l00647"></a>00647           cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00648"></a>00648           <span class="comment">//keep this histogram in a container</span>
<a name="l00649"></a>00649           ChosenStateSubset.push_back(myChosenHistSubset);
<a name="l00650"></a>00650           
<a name="l00651"></a>00651           <span class="comment">//optional </span>
<a name="l00652"></a>00652           <span class="comment">//output selected SEB-PQ hist from carved states</span>
<a name="l00653"></a>00653           <span class="keywordtype">string</span> SelectedSEBHistFileName = <span class="stringliteral">&quot;SelectedSEBHist&quot;</span>;
<a name="l00654"></a>00654           SelectedSEBHistFileName += stm.str(); <span class="comment">//for func</span>
<a name="l00655"></a>00655           SelectedSEBHistFileName += stmj.str(); <span class="comment">//for j</span>
<a name="l00656"></a>00656           SelectedSEBHistFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00657"></a>00657           myChosenHistSubset.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(SelectedSEBHistFileName);
<a name="l00658"></a>00658 
<a name="l00659"></a>00659         } <span class="comment">// end of going through NumStatesChosen</span>
<a name="l00660"></a>00660         cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00661"></a>00661         <span class="comment">//========end of selecting K sub-sets===========================//</span>
<a name="l00662"></a>00662 
<a name="l00663"></a>00663         <span class="comment">//=======find the maximum over the maximum======================//</span>
<a name="l00664"></a>00664         cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------&quot;</span> &lt;&lt; endl;
<a name="l00665"></a>00665         <span class="comment">// find which subset gives the maximum posterior</span>
<a name="l00666"></a>00666         cout &lt;&lt; <span class="stringliteral">&quot;Find the maximum over the maximum log-posteriors: &quot;</span> &lt;&lt; endl;
<a name="l00667"></a>00667         <span class="keywordtype">int</span> maxPosition = 0;
<a name="l00668"></a>00668         real maxPosterior=-1*(numeric_limits&lt;double&gt;::infinity());
<a name="l00669"></a>00669         <span class="keywordflow">if</span> ( ChosenStateMaxPosterior.size() != (1+NumStatesChosen) ) {
<a name="l00670"></a>00670           cerr &lt;&lt; <span class="stringliteral">&quot;Number of states is incompatible.&quot;</span> &lt;&lt; endl;
<a name="l00671"></a>00671           exit(0);
<a name="l00672"></a>00672         }
<a name="l00673"></a>00673         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; ChosenStateMaxPosterior.size(); i++) {
<a name="l00674"></a>00674           cout &lt;&lt; <span class="stringliteral">&quot;Subset: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; ChosenStateMaxPosterior[i] &lt;&lt; endl;
<a name="l00675"></a>00675           <span class="keywordflow">if</span> (ChosenStateMaxPosterior[i] &gt; maxPosterior) {
<a name="l00676"></a>00676             maxPosterior = ChosenStateMaxPosterior[i];
<a name="l00677"></a>00677             maxPosition = i;
<a name="l00678"></a>00678           }
<a name="l00679"></a>00679         }
<a name="l00680"></a>00680         cout &lt;&lt; <span class="stringliteral">&quot;Final optimal histogram is from subset &quot;</span> &lt;&lt; maxPosition;
<a name="l00681"></a>00681 
<a name="l00682"></a>00682         <span class="comment">// use this histogram as the starting state for MCMC</span>
<a name="l00683"></a>00683         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPosOptHist;
<a name="l00684"></a>00684         myPosOptHist = ChosenStateSubset[maxPosition];
<a name="l00685"></a>00685         cout &lt;&lt; <span class="stringliteral">&quot; and has &quot;</span> &lt;&lt; myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span>  &lt;&lt; endl;
<a name="l00686"></a>00686         cout &lt;&lt; <span class="stringliteral">&quot;---------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00687"></a>00687         
<a name="l00688"></a>00688         <span class="comment">//output the leaf container</span>
<a name="l00689"></a>00689         <span class="keywordtype">string</span> LeafFileName = <span class="stringliteral">&quot;LeafChosen&quot;</span>;
<a name="l00690"></a>00690         LeafFileName += stm.str();
<a name="l00691"></a>00691         LeafFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00692"></a>00692         oss.open(LeafFileName.c_str());
<a name="l00693"></a>00693         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; LeafContainer.size(); i++) {
<a name="l00694"></a>00694           oss &lt;&lt; LeafContainer[i] &lt;&lt; endl;
<a name="l00695"></a>00695         }
<a name="l00696"></a>00696         oss &lt;&lt; 1 &lt;&lt; endl;
<a name="l00697"></a>00697         oss &lt;&lt; flush;
<a name="l00698"></a>00698         oss.close();
<a name="l00699"></a>00699         
<a name="l00700"></a>00700         <span class="comment">//----------End of getting an initial state---------------//</span>
<a name="l00701"></a>00701 
<a name="l00702"></a>00702         <span class="comment">//============start MCMC==============================//</span>
<a name="l00703"></a>00703         cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC PiecewiseConstantFunction samples with a state that has &quot;</span> &lt;&lt;  
<a name="l00704"></a>00704         myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes:&quot;</span> &lt;&lt; endl;
<a name="l00705"></a>00705         
<a name="l00706"></a>00706         <span class="comment">//optional hist output</span>
<a name="l00707"></a>00707         myPosOptHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;SelectedStartingHistogram.txt&quot;</span>);
<a name="l00708"></a>00708         
<a name="l00709"></a>00709         <span class="comment">//set up containers to get needed traceplots</span>
<a name="l00710"></a>00710         <span class="keywordtype">bool</span> toIAE = computeIAE;
<a name="l00711"></a>00711             std::vector&lt;real&gt; IAEAvgHist;
<a name="l00712"></a>00712             std::vector&lt;real&gt; IAECurrHist;
<a name="l00713"></a>00713             vector&lt;real&gt; LogLikAvg;
<a name="l00714"></a>00714             vector&lt;real&gt; LogLikCurr;
<a name="l00715"></a>00715         
<a name="l00716"></a>00716         clock_t start, end;
<a name="l00717"></a>00717         start = clock();
<a name="l00718"></a>00718 
<a name="l00719"></a>00719         cout &lt;&lt; <span class="stringliteral">&quot;clock started: &quot;</span> &lt;&lt; endl;
<a name="l00720"></a>00720         <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> mcmcAv = myPosOptHist.MCMCNEWPost(
<a name="l00721"></a>00721                             loops, burnin, thinout,
<a name="l00722"></a>00722                             proposal, logPrior,
<a name="l00723"></a>00723                             minPoints, logging, estimate, toIAE,
<a name="l00724"></a>00724                             stm.str(), IAEAvgHist, IAECurrHist,
<a name="l00725"></a>00725                             LogLikAvg, LogLikCurr);
<a name="l00726"></a>00726         end = clock();
<a name="l00727"></a>00727 
<a name="l00728"></a>00728         <span class="keywordtype">double</span> timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00729"></a>00729         cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00730"></a>00730          &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00731"></a>00731          
<a name="l00732"></a>00732          Times.push_back(timing);
<a name="l00733"></a>00733 
<a name="l00734"></a>00734         cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC sample averaging&quot;</span> &lt;&lt; endl;
<a name="l00735"></a>00735         <span class="keywordtype">string</span> mcmcAvFilename = <span class="stringliteral">&quot;pcfAverage.txt&quot;</span>;
<a name="l00736"></a>00736         
<a name="l00737"></a>00737         <span class="comment">//optional</span>
<a name="l00738"></a>00738         <span class="keywordflow">if</span> ( loggingType == 2 ) { mcmcAv.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(mcmcAvFilename); }
<a name="l00739"></a>00739 
<a name="l00740"></a>00740         <span class="comment">// now get the IAE of mcmcAv against the estimate</span>
<a name="l00741"></a>00741         cout &lt;&lt; <span class="stringliteral">&quot;Get the IAE&quot;</span> &lt;&lt; endl;
<a name="l00742"></a>00742         real thisIAE = mcmcAv.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2499c322fa30a4f07d8ad7360a8d7d95" title="Get the total integrated absolute error (IAE) between this and another PiecewiseConstantFunction.">getIAE</a>(estimate);
<a name="l00743"></a>00743         IAEContainer.push_back(thisIAE);
<a name="l00744"></a>00744         cout &lt;&lt; <span class="stringliteral">&quot;IAE against the estimate is &quot;</span> &lt;&lt; thisIAE &lt;&lt; endl;
<a name="l00745"></a>00745         
<a name="l00746"></a>00746         
<a name="l00747"></a>00747         <span class="comment">//output the current IAEs</span>
<a name="l00748"></a>00748         IAEFileName = <span class="stringliteral">&quot;IAECurrMCMCState&quot;</span>;
<a name="l00749"></a>00749         IAEFileName += stm.str();
<a name="l00750"></a>00750         IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00751"></a>00751         oss.open(IAEFileName.c_str());
<a name="l00752"></a>00752         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAECurrHist.size(); i++) {
<a name="l00753"></a>00753           oss &lt;&lt; IAECurrHist[i] &lt;&lt; endl;
<a name="l00754"></a>00754         }
<a name="l00755"></a>00755         oss &lt;&lt; flush;
<a name="l00756"></a>00756         oss.close();
<a name="l00757"></a>00757         
<a name="l00758"></a>00758         <span class="comment">//output the current IAEs of the averaged state</span>
<a name="l00759"></a>00759         IAEFileName = <span class="stringliteral">&quot;IAECurrMCMCAvg&quot;</span>;
<a name="l00760"></a>00760         IAEFileName += stm.str();
<a name="l00761"></a>00761         IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00762"></a>00762         oss.open(IAEFileName.c_str());
<a name="l00763"></a>00763         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEAvgHist.size(); i++) {
<a name="l00764"></a>00764           oss &lt;&lt; IAEAvgHist[i] &lt;&lt; endl;
<a name="l00765"></a>00765         }
<a name="l00766"></a>00766         oss &lt;&lt; flush;
<a name="l00767"></a>00767         oss.close();
<a name="l00768"></a>00768         
<a name="l00769"></a>00769       <span class="comment">/*  </span>
<a name="l00770"></a>00770 <span class="comment">        // output log-likelihood</span>
<a name="l00771"></a>00771 <span class="comment">        IAEFileName = &quot;LogLikCurrMCMC&quot;;</span>
<a name="l00772"></a>00772 <span class="comment">        IAEFileName += stm.str();</span>
<a name="l00773"></a>00773 <span class="comment">        IAEFileName += &quot;.txt&quot;;</span>
<a name="l00774"></a>00774 <span class="comment">        oss.open(IAEFileName.c_str());</span>
<a name="l00775"></a>00775 <span class="comment">        for (size_t i = 0; i &lt; LogLikCurr.size(); i++) {</span>
<a name="l00776"></a>00776 <span class="comment">          oss &lt;&lt; LogLikCurr[i] &lt;&lt; endl;</span>
<a name="l00777"></a>00777 <span class="comment">        }</span>
<a name="l00778"></a>00778 <span class="comment">        oss &lt;&lt; flush;</span>
<a name="l00779"></a>00779 <span class="comment">        oss.close();</span>
<a name="l00780"></a>00780 <span class="comment">        cout &lt;&lt; &quot;Log-lik output to &quot; &lt;&lt; IAEFileName &lt;&lt; endl;</span>
<a name="l00781"></a>00781 <span class="comment">          </span>
<a name="l00782"></a>00782 <span class="comment">        // output log-likelihood</span>
<a name="l00783"></a>00783 <span class="comment">        IAEFileName = &quot;LogLikAvgMCMC&quot;;</span>
<a name="l00784"></a>00784 <span class="comment">        IAEFileName += stm.str();</span>
<a name="l00785"></a>00785 <span class="comment">        IAEFileName += &quot;.txt&quot;;</span>
<a name="l00786"></a>00786 <span class="comment">        oss.open(IAEFileName.c_str());</span>
<a name="l00787"></a>00787 <span class="comment">        for (size_t i = 0; i &lt; LogLikAvg.size(); i++) {</span>
<a name="l00788"></a>00788 <span class="comment">          oss &lt;&lt; LogLikAvg[i] &lt;&lt; endl;</span>
<a name="l00789"></a>00789 <span class="comment">        }</span>
<a name="l00790"></a>00790 <span class="comment">        oss &lt;&lt; flush;</span>
<a name="l00791"></a>00791 <span class="comment">        oss.close();</span>
<a name="l00792"></a>00792 <span class="comment">        cout &lt;&lt; &quot;Log-lik output to &quot; &lt;&lt; IAEFileName &lt;&lt; endl;</span>
<a name="l00793"></a>00793 <span class="comment">        */</span>
<a name="l00794"></a>00794       }
<a name="l00795"></a>00795       <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00796"></a>00796       
<a name="l00797"></a>00797     } <span class="comment">// end of successfulHist condition</span>
<a name="l00798"></a>00798   } <span class="comment">// end of loop</span>
<a name="l00799"></a>00799   <span class="comment">//=======================End of Chains=================================//</span>
<a name="l00800"></a>00800 
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 
<a name="l00803"></a>00803   <span class="comment">// output IAE from MCMC</span>
<a name="l00804"></a>00804   <span class="keywordtype">string</span> IAEFileName;
<a name="l00805"></a>00805   IAEFileName = <span class="stringliteral">&quot;IAEMCMC&quot;</span>;
<a name="l00806"></a>00806   IAEFileName += stmSeed.str();
<a name="l00807"></a>00807   IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00808"></a>00808   oss.open(IAEFileName.c_str());
<a name="l00809"></a>00809   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEContainer.size(); i++) {
<a name="l00810"></a>00810     oss &lt;&lt; IAEContainer[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Times[i] &lt;&lt; endl;
<a name="l00811"></a>00811   }
<a name="l00812"></a>00812   oss &lt;&lt; flush;
<a name="l00813"></a>00813   oss.close();
<a name="l00814"></a>00814   cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l00815"></a>00815 
<a name="l00816"></a>00816   <span class="keyword">delete</span> theDataPtr;
<a name="l00817"></a>00817 
<a name="l00818"></a>00818    <span class="keywordflow">return</span> 0;
<a name="l00819"></a>00819 
<a name="l00820"></a>00820 } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCFunctionSimGaussianQueue_8cpp.shtml">MCMCFunctionSimGaussianQueue.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
