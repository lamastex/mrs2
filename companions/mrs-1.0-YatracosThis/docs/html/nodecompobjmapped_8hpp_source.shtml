<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: nodecompobjmapped.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('nodecompobjmapped_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">nodecompobjmapped.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="nodecompobjmapped_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">* </span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___NODECOMPOBJMAPPED_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___NODECOMPOBJMAPPED_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">using namespace </span>cxsc;
<a name="l00032"></a>00032 <span class="keyword">using namespace </span>std;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>subpavings {
<a name="l00036"></a>00036 
<a name="l00038"></a>00038     <span class="keyword">class </span>SPnode;
<a name="l00039"></a>00039     
<a name="l00046"></a><a class="code" href="classsubpavings_1_1NodeCompObjMapped.shtml">00046</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NodeCompObjMapped.shtml" title="A Virtual class providing a way to compare spnodes visited by mappedspnodes.">NodeCompObjMapped</a> {
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="keyword">public</span>:
<a name="l00049"></a>00049 
<a name="l00051"></a>00051     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> lhs,
<a name="l00052"></a>00052                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> rhs) <span class="keyword">const</span> = 0;
<a name="l00053"></a>00053   };
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00057"></a>00057 
<a name="l00061"></a><a class="code" href="classsubpavings_1_1CompSPArea.shtml">00061</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompSPArea.shtml" title="Class comparing the approximate area of a box by multiplying the box volume with the diameter of its ...">CompSPArea</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjMapped.shtml" title="A Virtual class providing a way to compare spnodes visited by mappedspnodes.">NodeCompObjMapped</a>
<a name="l00062"></a>00062     {
<a name="l00063"></a><a class="code" href="classsubpavings_1_1CompSPArea.shtml#aff332dcd6dc387f8f0a8f290c2bad73e">00063</a>     <a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="classsubpavings_1_1CompSPArea.shtml#aff332dcd6dc387f8f0a8f290c2bad73e">fobj</a>;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <a class="code" href="classsubpavings_1_1CompSPArea.shtml" title="Class comparing the approximate area of a box by multiplying the box volume with the diameter of its ...">CompSPArea</a>(); <span class="comment">// private default constructor</span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067     <span class="keyword">public</span>:
<a name="l00068"></a><a class="code" href="classsubpavings_1_1CompSPArea.shtml#a4fdad40a42f54ba4f8b1aac0e504ca4e">00068</a>     <a class="code" href="classsubpavings_1_1CompSPArea.shtml#a4fdad40a42f54ba4f8b1aac0e504ca4e">CompSPArea</a>(<a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>) : fobj(f) {}
<a name="l00069"></a>00069      
<a name="l00070"></a><a class="code" href="classsubpavings_1_1CompSPArea.shtml#a0cdc7c4e83e51d70017b74e37072f0e8">00070</a>       <span class="keywordtype">bool</span> operator()   (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> lhs,
<a name="l00071"></a>00071                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00072"></a>00072 <span class="keyword">      </span>{ 
<a name="l00073"></a>00073       <span class="comment">//std::cout &lt;&lt; &quot;----doing comparisons&quot; &lt;&lt; endl;</span>
<a name="l00074"></a>00074       <span class="comment">//std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getBox() &lt;&lt; &quot;\t&quot;;</span>
<a name="l00075"></a>00075       ivector lbox = lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00076"></a>00076       interval lRange = fobj(lbox);
<a name="l00077"></a>00077       interval lArea = (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()) * (lRange);
<a name="l00078"></a>00078       <span class="comment">//riemann sum</span>
<a name="l00079"></a>00079       <span class="comment">//cout &lt;&lt; &quot;left area: &quot; &lt;&lt; lArea &lt;&lt; endl;</span>
<a name="l00080"></a>00080       
<a name="l00081"></a>00081       <span class="comment">//std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getBox() &lt;&lt; &quot;\t&quot;;</span>
<a name="l00082"></a>00082       ivector rbox = rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00083"></a>00083       interval rRange = fobj(rbox);
<a name="l00084"></a>00084       interval rArea = (rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()) * (rRange);
<a name="l00085"></a>00085       <span class="comment">//cout &lt;&lt; &quot;right area: &quot; &lt;&lt; rArea &lt;&lt; endl;</span>
<a name="l00086"></a>00086       
<a name="l00087"></a>00087       <span class="comment">//cout &lt;&lt; (diam(lArea)) &lt;&lt; &quot;\t&quot; &lt;&lt; (diam(rArea)) &lt;&lt; endl;</span>
<a name="l00088"></a>00088       <span class="comment">//the diameters are the uncertainty in the approximate to the integral error</span>
<a name="l00089"></a>00089       <span class="keywordflow">return</span> (diam(lArea) &lt; diam(rArea));
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091   }; 
<a name="l00092"></a>00092 
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="nodecompobjmapped_8hpp.shtml">nodecompobjmapped.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
