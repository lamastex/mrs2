<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FLevy2D.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FLevy2D_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FLevy2D.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FLevy2D_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="FLevy2D_8hpp.shtml" title="Declarations for example function class FLevy2D (Levy function, 2 dimensions).">FLevy2D.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">/*</span>
<a name="l00029"></a>00029 <span class="comment">// Older tempalized version as a function object -- more convenient for testing </span>
<a name="l00030"></a>00030 <span class="comment">template &lt;class Arg, class Result&gt;</span>
<a name="l00031"></a>00031 <span class="comment">class FLevy: public std::unary_function&lt;Arg, Result&gt;{</span>
<a name="l00032"></a>00032 <span class="comment">// Std normal located at -5; 1 dim</span>
<a name="l00033"></a>00033 <span class="comment">public:</span>
<a name="l00034"></a>00034 <span class="comment">    Result operator() (const Arg &amp;X) const {</span>
<a name="l00035"></a>00035 <span class="comment">      int a=Lb(X);</span>
<a name="l00036"></a>00036 <span class="comment">      int i, z=Ub(X);</span>
<a name="l00037"></a>00037 <span class="comment">      Result isum, jsum, hh;</span>
<a name="l00038"></a>00038 <span class="comment">      isum = 0.0; jsum = 0.0;</span>
<a name="l00039"></a>00039 <span class="comment">      for (i = 1; i &lt;= 5; i++) {</span>
<a name="l00040"></a>00040 <span class="comment">        isum = isum + double(i)*cos(double(i-1)*X[a] + double(i));</span>
<a name="l00041"></a>00041 <span class="comment">        jsum = jsum + double(i)*cos(double(i+1)*X[z] + double(i));</span>
<a name="l00042"></a>00042 <span class="comment">      }</span>
<a name="l00043"></a>00043 <span class="comment">      hh = isum * jsum +</span>
<a name="l00044"></a>00044 <span class="comment">           sqr(X[a] + 1.42513) +    // Avoid real con-</span>
<a name="l00045"></a>00045 <span class="comment">           sqr(X[z] + 0.80032);      // version error</span>
<a name="l00046"></a>00046 <span class="comment">        //return exp(-hh/10.0);</span>
<a name="l00047"></a>00047 <span class="comment">        return exp(-hh/TEMPERATURE); // TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00048"></a>00048 <span class="comment">    }</span>
<a name="l00049"></a>00049 <span class="comment">};</span>
<a name="l00050"></a>00050 <span class="comment">*/</span>
<a name="l00051"></a>00051 
<a name="l00061"></a><a class="code" href="classFLevy2D.shtml#a5a66e2397fa91de9792552212a9d5cdc">00061</a> <a class="code" href="classFLevy2D.shtml#a5a66e2397fa91de9792552212a9d5cdc" title="Constructor.">FLevy2D::FLevy2D</a> (real T, real GlbMx, real C1, real C2, 
<a name="l00062"></a>00062                   real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>, <span class="keywordtype">bool</span> LogPi)
<a name="l00063"></a>00063 :
<a name="l00064"></a>00064 <a class="code" href="LevyFobj2D_8cpp.shtml#ae3d1dc6c8ff5f4490d10dd105dfce9a7">Temperature</a> (T), <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> (GlbMx), <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> (C1), <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> (C2)
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = 0;<span class="comment">// Uniform PriorType is an inherited member from Fobj</span>
<a name="l00069"></a>00069   <span class="comment">// set up the domain list</span>
<a name="l00070"></a>00070   ivector domain (1, 2);
<a name="l00071"></a>00071   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>  Ldomain;
<a name="l00072"></a>00072   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 2; i++)
<a name="l00073"></a>00073   {
<a name="l00074"></a>00074     domain[i] = interval (-DomainLimit, DomainLimit);
<a name="l00075"></a>00075   }
<a name="l00076"></a>00076   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00077"></a>00077   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00078"></a>00078   <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="classFLevy2D.shtml#a0bf7bf18b3f8bdcb2034526f2b809162">00082</a> interval <a class="code" href="classFLevy2D.shtml#a0bf7bf18b3f8bdcb2034526f2b809162" title="interval operator()">FLevy2D::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp; X)<span class="keyword"> const</span>
<a name="l00083"></a>00083 <span class="keyword"></span>{
<a name="l00084"></a>00084   <a class="code" href="classFLevy2D.shtml#a3ae9783838856fc26170358ca4989818" title="Track number of interval function calls.">n_interval_calls</a>++;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   ivector Box = X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00087"></a>00087   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (Box), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (Box);
<a name="l00088"></a>00088   interval isum, jsum, hh;
<a name="l00089"></a>00089   isum = 0.0;
<a name="l00090"></a>00090   jsum = 0.0;
<a name="l00091"></a>00091   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00092"></a>00092   {
<a name="l00093"></a>00093     isum = isum + double(i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span>(i - 1) * Box[a] + <span class="keywordtype">double</span>(i));
<a name="l00094"></a>00094     jsum = jsum + double(i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span>(i + 1) * Box[z] + <span class="keywordtype">double</span>(i));
<a name="l00095"></a>00095   }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097                     <span class="comment">// Avoid real con-</span>
<a name="l00098"></a>00098   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (Box[a] + <a class="code" href="classFLevy2D.shtml#a2ac016c1aefc1f4885817e5c96a35b5d">Center1</a>) +
<a name="l00099"></a>00099                     <span class="comment">// version error</span>
<a name="l00100"></a>00100     <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (Box[z] + <a class="code" href="classFLevy2D.shtml#a40852278de546d74fa99913e5f107b51">Center2</a>);
<a name="l00101"></a>00101     hh += <a class="code" href="classFLevy2D.shtml#ab9b008eeb65b79ca24dfd782a8d1541e">GlobalMax</a>;  
<a name="l00102"></a>00102   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00103"></a>00103   interval result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / <a class="code" href="classFLevy2D.shtml#adfc81b0fad00fd255954e5f0a6ae786a">Temperature</a>);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classFLevy2D.shtml#a69223536c13e52445d3ee1fc435447d8">00108</a> real <a class="code" href="classFLevy2D.shtml#a0bf7bf18b3f8bdcb2034526f2b809162" title="interval operator()">FLevy2D::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp; X)<span class="keyword"> const</span>
<a name="l00109"></a>00109 <span class="keyword"></span>{
<a name="l00110"></a>00110   <a class="code" href="classFLevy2D.shtml#a9061075d7df97d8cbd182f049b93d404" title="Track number of real function calls.">n_real_calls</a>++;
<a name="l00111"></a>00111   rvector Pnt = X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>;
<a name="l00112"></a>00112   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (Pnt), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (Pnt);
<a name="l00113"></a>00113   real isum, jsum, hh;
<a name="l00114"></a>00114   isum = 0.0;
<a name="l00115"></a>00115   jsum = 0.0;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00118"></a>00118   {
<a name="l00119"></a>00119     isum = isum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i - 1) * Pnt[a] + <span class="keywordtype">double</span> (i));
<a name="l00120"></a>00120     jsum = jsum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i + 1) * Pnt[z] + <span class="keywordtype">double</span> (i));
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122   <span class="comment">// Avoid real conversion error</span>
<a name="l00123"></a>00123   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (Pnt[a] + <a class="code" href="classFLevy2D.shtml#a2ac016c1aefc1f4885817e5c96a35b5d">Center1</a>) +
<a name="l00124"></a>00124        <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (Pnt[z] + <a class="code" href="classFLevy2D.shtml#a40852278de546d74fa99913e5f107b51">Center2</a>);
<a name="l00125"></a>00125   hh += <a class="code" href="classFLevy2D.shtml#ab9b008eeb65b79ca24dfd782a8d1541e">GlobalMax</a>;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00128"></a>00128   real result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / <a class="code" href="classFLevy2D.shtml#adfc81b0fad00fd255954e5f0a6ae786a">Temperature</a>);
<a name="l00129"></a>00129   <span class="comment">//result /= sqrt(Temperature);</span>
<a name="l00130"></a>00130   <span class="comment">//result /= Temperature;</span>
<a name="l00131"></a>00131   assert (result &lt; 1.0);
<a name="l00132"></a>00132   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">// HessType operator()</span>
<a name="l00136"></a>00136 <span class="comment">// label is not used but needed to match Fobj signature</span>
<a name="l00137"></a><a class="code" href="classFLevy2D.shtml#a0a031a396ed8aa0591ee214a6ec20b7f">00137</a> HessType <a class="code" href="classFLevy2D.shtml#a0bf7bf18b3f8bdcb2034526f2b809162" title="interval operator()">FLevy2D::operator()</a>(<span class="keyword">const</span> HTvector&amp; x, <span class="keyword">const</span> <span class="keywordtype">int</span> label)<span class="keyword"> const</span>
<a name="l00138"></a>00138 <span class="keyword"></span>{
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   HessType isum(2), jsum(2), hh(2);
<a name="l00141"></a>00141   isum = 0.0;
<a name="l00142"></a>00142   jsum = 0.0;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00145"></a>00145   {
<a name="l00146"></a>00146     isum = isum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i - 1) * x[1] + <span class="keywordtype">double</span> (i));
<a name="l00147"></a>00147     jsum = jsum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i + 1) * x[2] + <span class="keywordtype">double</span> (i));
<a name="l00148"></a>00148   }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[1] + <a class="code" href="classFLevy2D.shtml#a2ac016c1aefc1f4885817e5c96a35b5d">Center1</a> + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[2] + <a class="code" href="classFLevy2D.shtml#a40852278de546d74fa99913e5f107b51">Center2</a>));
<a name="l00151"></a>00151   hh = hh + <a class="code" href="classFLevy2D.shtml#ab9b008eeb65b79ca24dfd782a8d1541e">GlobalMax</a>;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00154"></a>00154   hh = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / <a class="code" href="classFLevy2D.shtml#adfc81b0fad00fd255954e5f0a6ae786a">Temperature</a>);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (hh) : hh;
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a><a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#af3dbaaec74847fde9ffd754e4b295278">00159</a> <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#af3dbaaec74847fde9ffd754e4b295278">FLevy2D_Lkl_Tfrom1data::FLevy2D_Lkl_Tfrom1data</a> (ivector &amp; data, 
<a name="l00160"></a>00160                                                 real GlbMx, real C1, real C2, 
<a name="l00161"></a>00161                                                 interval <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>, 
<a name="l00162"></a>00162                                                 <span class="keywordtype">bool</span> LogPi)
<a name="l00163"></a>00163 :
<a name="l00164"></a>00164 Data (data), <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> (GlbMx), <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> (C1), <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> (C2)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <a class="code" href="classFobj1D.shtml#ab11d43cdd2d745e945890d95d86f015d">setUsingLogDensity</a> (LogPi);
<a name="l00167"></a>00167   <span class="comment">//PriorType = 0;// Uniform PriorType is an inherited member from Fobj</span>
<a name="l00168"></a>00168   <span class="comment">//domain for the temperature parameter in the likelihood</span>
<a name="l00169"></a>00169   ivector domain (1, 1);
<a name="l00170"></a>00170   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
<a name="l00171"></a>00171   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 1; i++)
<a name="l00172"></a>00172   {
<a name="l00173"></a>00173     domain[i] = <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>;
<a name="l00174"></a>00174   }
<a name="l00175"></a>00175   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00176"></a>00176   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00177"></a>00177   <a class="code" href="classFobj1D.shtml#ad2c10838556997430a304824b745e090">LabDomainList</a>.push_back (Ldomain);
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 }
<a name="l00180"></a>00180 
<a name="l00181"></a><a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a06a1515d0efad766651950946e4fac03">00181</a> interval <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a06a1515d0efad766651950946e4fac03">FLevy2D_Lkl_Tfrom1data::operator () </a>(<span class="keyword">const</span> interval &amp; X)<span class="keyword"> const</span>
<a name="l00182"></a>00182 <span class="keyword"></span>{
<a name="l00183"></a>00183   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>);
<a name="l00184"></a>00184   interval isum, jsum, hh;
<a name="l00185"></a>00185   isum = 0.0;
<a name="l00186"></a>00186   jsum = 0.0;
<a name="l00187"></a>00187   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00188"></a>00188   {
<a name="l00189"></a>00189     isum =
<a name="l00190"></a>00190       isum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i - 1) * <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>[a] + <span class="keywordtype">double</span> (i));
<a name="l00191"></a>00191     jsum =
<a name="l00192"></a>00192       jsum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i + 1) * <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>[z] + <span class="keywordtype">double</span> (i));
<a name="l00193"></a>00193   }
<a name="l00194"></a>00194                     <span class="comment">// Avoid real con-</span>
<a name="l00195"></a>00195   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>[a] + <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a65a223e801a809656bd2918d3f57e449">Center1</a>) +
<a name="l00196"></a>00196                     <span class="comment">// version error</span>
<a name="l00197"></a>00197     <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>[z] + <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#aeadb884eb472f4b9a7fe739dc636f924">Center2</a>);
<a name="l00198"></a>00198   hh += <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a76c6284c5bb945dcbdd9e0b4e93b7159">GlobalMax</a>;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200    <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00201"></a>00201   interval result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / X);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   result /= <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X);
<a name="l00204"></a>00204   <span class="comment">//result /= X;</span>
<a name="l00205"></a>00205   <span class="keywordflow">return</span> (<a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00206"></a>00206 }
<a name="l00207"></a>00207 
<a name="l00208"></a><a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#ad420bcdc039ecc689488181c23aae0bb">00208</a> real <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a06a1515d0efad766651950946e4fac03">FLevy2D_Lkl_Tfrom1data::operator () </a>(<span class="keyword">const</span> real &amp; X)<span class="keyword"> const</span>
<a name="l00209"></a>00209 <span class="keyword"></span>{
<a name="l00210"></a>00210   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>);
<a name="l00211"></a>00211   <span class="comment">// here we simply take the mid-point of the data to get thin data</span>
<a name="l00212"></a>00212   rvector realData = mid (<a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a164feef005f7cd698ef7e737479376d9">Data</a>);
<a name="l00213"></a>00213   real isum, jsum, hh;
<a name="l00214"></a>00214   isum = 0.0;
<a name="l00215"></a>00215   jsum = 0.0;
<a name="l00216"></a>00216   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00217"></a>00217   {
<a name="l00218"></a>00218     isum =
<a name="l00219"></a>00219       isum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i - 1) * realData[a] +
<a name="l00220"></a>00220       <span class="keywordtype">double</span> (i));
<a name="l00221"></a>00221     jsum =
<a name="l00222"></a>00222       jsum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i + 1) * realData[z] +
<a name="l00223"></a>00223       <span class="keywordtype">double</span> (i));
<a name="l00224"></a>00224   }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226                     <span class="comment">// Avoid real con-</span>
<a name="l00227"></a>00227   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (realData[a] + <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a65a223e801a809656bd2918d3f57e449">Center1</a>) +
<a name="l00228"></a>00228                     <span class="comment">// version error</span>
<a name="l00229"></a>00229     <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (realData[z] + <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#aeadb884eb472f4b9a7fe739dc636f924">Center2</a>);
<a name="l00230"></a>00230   hh += <a class="code" href="classFLevy2D__Lkl__Tfrom1data.shtml#a76c6284c5bb945dcbdd9e0b4e93b7159">GlobalMax</a>;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00233"></a>00233   real result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / X);
<a name="l00234"></a>00234   result /= <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X);
<a name="l00235"></a>00235   <span class="keywordflow">return</span> (<a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00236"></a>00236 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FLevy2D_8cpp.shtml">FLevy2D.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
