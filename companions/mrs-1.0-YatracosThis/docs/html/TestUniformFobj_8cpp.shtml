<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: TestUniformFobj.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('TestUniformFobj_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TestUniformFobj.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Testing Uniform function object.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="UniformFobj_8hpp_source.shtml">UniformFobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;iostream&gt;</code><br/>
</div>
<p><a href="TestUniformFobj_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="TestUniformFobj_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Testing Uniform function object. </p>

<p>Definition in file <a class="el" href="TestUniformFobj_8cpp_source.shtml">TestUniformFobj.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="TestUniformFobj.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="TestUniformFobj_8cpp_source.shtml#l00040">40</a> of file <a class="el" href="TestUniformFobj_8cpp_source.shtml">TestUniformFobj.cpp</a>.</p>

<p>References <a class="el" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d">subpavings::MappedFobj::imageMid()</a>, and <a class="el" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d">subpavings::toString()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">try</span> {
    
    vector &lt;int&gt; dims;
    dims.push_back(1);
    dims.push_back(2);
    dims.push_back(10);
    
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dims.size(); ++i) {
      <span class="keywordtype">int</span> dd = dims[i];
    
      ivector domain(dd);
      interval domainInterval(-5,5);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= dd; i++) { domain[i] = domainInterval; }
      <a class="code" href="classsubpavings_1_1UniformFobj.shtml">UniformFobj</a> realF(domain);
      
      {
        ivector ivec(dd);
        rvector rvec(dd);
        real rr1(-0.8);
        real rr2(0.4);
        interval ii1(-1.5,1.1);
        interval ii2(-1.3,1.2);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
          ivec[k] = ii1;
          rvec[k] = rr1;
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
          ivec[k] = ii2;
          rvec[k] = rr2;
        }
        
        cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
        interval i_image = realF(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
        real rmid_image = realF.imageMid(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
        real r_image = realF(rvec);
        cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
      }
      {
        ivector ivec(dd);
        rvector rvec(dd);
        real rr1(6.0);
        real rr2(0.4);
        interval ii1(-1.5,6.0);
        interval ii2(-1.3,1.2);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
          ivec[k] = ii1;
          rvec[k] = rr1;
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
          ivec[k] = ii2;
          rvec[k] = rr2;
        }
        
        cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
        interval i_image = realF(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
        real rmid_image = realF.imageMid(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
        real r_image = realF(rvec);
        cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
      }
      {
        ivector ivec(dd);
        rvector rvec(dd);
        real rr1(-6.0);
        real rr2(0.4);
        interval ii1(-5.5,6.0);
        interval ii2(-1.3,1.2);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
          ivec[k] = ii1;
          rvec[k] = rr1;
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
          ivec[k] = ii2;
          rvec[k] = rr2;
        }
        
        cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
        interval i_image = realF(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
        real rmid_image = realF.imageMid(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
        real r_image = realF(rvec);
        cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
      }
      {
        ivector ivec(dd);
        rvector rvec(dd);
        real rr1(-6.0);
        real rr2(6.0);
        interval ii1(-6.5,-5.5);
        interval ii2(-1.3,1.2);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
          ivec[k] = ii1;
          rvec[k] = rr1;
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
          ivec[k] = ii2;
          rvec[k] = rr2;
        }
        
        cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
        interval i_image = realF(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
        real rmid_image = realF.imageMid(ivec);
        cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
        
        cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
        real r_image = realF(rvec);
        cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
      }
          
    }
    
    <span class="keywordflow">return</span> 0;
  }
  <span class="keywordflow">catch</span> (std::exception&amp; e) {
    cout &lt;&lt; <span class="stringliteral">&quot;Exception:\n&quot;</span> &lt;&lt; e.what() &lt;&lt; endl;
    <span class="keywordflow">throw</span>;
  }
  <span class="keywordflow">catch</span> (...) {
    cout &lt;&lt; <span class="stringliteral">&quot;Unknown exception&quot;</span> &lt;&lt; endl;
    <span class="keywordflow">throw</span>;
  }
  
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="TestUniformFobj_8cpp.shtml">TestUniformFobj.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
