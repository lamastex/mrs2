<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogram.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogram_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogram.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogram_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___ADAPTIVEHIST_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___ADAPTIVEHIST_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="splitdecisionobj_8hpp.shtml" title="classes for determining whether to split an SPSnode.">splitdecisionobj.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="nodecompobj_8hpp.shtml" title="Classes for comparing spsnodes.">nodecompobj.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to know about the gsl random number generator</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">//using namespace subpavings;</span>
<a name="l00041"></a>00041 <span class="keyword">struct </span><a class="code" href="structRegHist.shtml">RegHist</a>;
<a name="l00042"></a>00042 <span class="keyword">struct </span><a class="code" href="structFinMix.shtml">FinMix</a>;
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="namespacesubpavings.shtml">00044</a> <span class="keyword">namespace </span>subpavings {
<a name="l00045"></a>00045 
<a name="l00047"></a>00047 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>;
<a name="l00048"></a>00048 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>;
<a name="l00049"></a>00049 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>;
<a name="l00050"></a>00050 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>;
<a name="l00051"></a>00051 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>;
<a name="l00052"></a>00052 
<a name="l00076"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml">00076</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> {
<a name="l00077"></a>00077 <span class="keyword">private</span>:
<a name="l00078"></a>00078 
<a name="l00084"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09">00084</a>     <span class="keyword">static</span> <span class="keyword">const</span> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09" title="a constant for padding a box if it is tailor-made for data.">padding</a>;
<a name="l00085"></a>00085 
<a name="l00091"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a">00091</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>;
<a name="l00092"></a>00092 
<a name="l00098"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6">00098</a>     ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>;
<a name="l00099"></a>00099 
<a name="l00104"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214">00104</a>     <a class="code" href="namespacesubpavings.shtml#aa79f33663da92502ce1a37f3fd1f3d85" title="Define type BigData Collection as a container for data.">BigDataCollection</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l00105"></a>00105 
<a name="l00109"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17">00109</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l00110"></a>00110 
<a name="l00113"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59">00113</a>     std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a>;
<a name="l00114"></a>00114 
<a name="l00131"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96">00131</a>     <span class="keyword">mutable</span> dotprecision <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>;
<a name="l00132"></a>00132 
<a name="l00148"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89">00148</a>     <span class="keyword">mutable</span> dotprecision <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 
<a name="l00156"></a>00156     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * spn, <span class="keywordtype">bool</span> as);
<a name="l00157"></a>00157 
<a name="l00181"></a>00181     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00182"></a>00182                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging);
<a name="l00183"></a>00183 
<a name="l00198"></a>00198     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab5d45e2f1966bd43a7bb8bf041ea29db" title="Checks if we need to make root paving for the histogram object.">haveMadePaving</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim);
<a name="l00199"></a>00199 
<a name="l00210"></a>00210     <span class="keyword">static</span> ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e40497a24ce0807235196e17ca21456" title="Make a box to contain all the data.">makeBox</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim);
<a name="l00211"></a>00211 
<a name="l00234"></a>00234     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0eaca3eebf10b3d251ed284f0317c593" title="Insert data from a container.">insertDataFromContainer</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00235"></a>00235                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging);
<a name="l00236"></a>00236 
<a name="l00241"></a>00241     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>() <span class="keyword">const</span>;
<a name="l00242"></a>00242 
<a name="l00247"></a>00247     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>() <span class="keyword">const</span>;
<a name="l00248"></a>00248 
<a name="l00251"></a>00251     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71122bfe1d3dfad1f2b55585326334ac" title="Update the scaled EMP part COPERR score given change.">updateScaledEMPSumCOPERR</a>(dotprecision change) <span class="keyword">const</span>;
<a name="l00252"></a>00252 
<a name="l00255"></a>00255     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a79fe01c35fba2bbdb1df5e8eb1d3a78b" title="Update the the scaled EMP part AIC score given change.">updateScaledEMPSumAIC</a>(dotprecision change) <span class="keyword">const</span>;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00263"></a>00263     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879" title="Add COPERR EMP score to log file.">outputLogEMPCOPERR</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00264"></a>00264 
<a name="l00270"></a>00270     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00271"></a>00271 
<a name="l00277"></a>00277     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00278"></a>00278 
<a name="l00295"></a>00295     <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350" title="Send a collection of changes in MCMC probabilities to log file.">logMCMCDeltas</a>(std::string s, <span class="keywordtype">int</span> i,
<a name="l00296"></a>00296                         real deltaL, real deltaP, real deltaQ, real deltaPi,
<a name="l00297"></a>00297                         <span class="keywordtype">double</span> randChange);
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
<a name="l00308"></a>00308     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adf589f52a0cd3e2371c288aa6bca7d37" title="Put header in a log file for MCMC.">MCMCStartLogFile</a>(std::string s, <span class="keywordtype">int</span> i, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00309"></a>00309                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior);
<a name="l00310"></a>00310 
<a name="l00316"></a>00316     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e7d34aea502906cb2230c0732d752b3" title="Output the state of this histogram as an MCMC sample.">outputMCMCStateSample</a>(<span class="keywordtype">int</span> i);
<a name="l00317"></a>00317 
<a name="l00324"></a>00324     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a10fc830a1dd32fe83aa3846a6fb2af35" title="Capture the final state of this histogram after MCMC.">MCMCLogFinalState</a>(std::string s, <span class="keywordtype">int</span> i);
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 
<a name="l00355"></a>00355     <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7f23176e9afea24c51c6a37cbcc4b0a" title="Finds the node to target for change in MCMC on SPSnode trees.">proposeChangeMCMCState</a> (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00356"></a>00356                             <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes,
<a name="l00357"></a>00357                             <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries,
<a name="l00358"></a>00358                             gsl_rng* rgsl, <span class="keywordtype">bool</span>&amp; haveNode);
<a name="l00359"></a>00359 
<a name="l00390"></a>00390     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a89aa9c37916fcac47cf273f512bca019" title="Determines whether to split a node to get a new MCMC state.">decisionMCMCSplit</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00391"></a>00391                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00392"></a>00392                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior, gsl_rng* rgsl,
<a name="l00393"></a>00393                         <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries, <span class="keywordtype">size_t</span> minPoints,
<a name="l00394"></a>00394                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00395"></a>00395                         
<a name="l00426"></a>00426     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae2df56ec733843dffcc6af094637758d" title="Determines whether to merge a node to get a new MCMC state.">decisionMCMCMerge</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00427"></a>00427                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00428"></a>00428                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior, gsl_rng* rgsl,
<a name="l00429"></a>00429                         <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries, <span class="keywordtype">size_t</span> minPoints,
<a name="l00430"></a>00430                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 
<a name="l00463"></a>00463     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1544712de53718450f5f13fee5738a92" title="Changes the state of this Adaptive Histogram by splitting a node.">changeStateForSplit</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target, <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes,
<a name="l00464"></a>00464                         <span class="keywordtype">size_t</span>&amp; numLeaves, <span class="keywordtype">size_t</span>&amp; numCherries,
<a name="l00465"></a>00465                         <span class="keywordtype">size_t</span> minPoints);
<a name="l00466"></a>00466 
<a name="l00494"></a>00494     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4ff31f6b6d944c0c1e71ae4e7586cc2a" title="Changes the state of this Adaptive Histogram by merging cherry.">changeStateForMerge</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target, <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes,
<a name="l00495"></a>00495                         <span class="keywordtype">size_t</span>&amp; numLeaves, <span class="keywordtype">size_t</span>&amp; numCherries,
<a name="l00496"></a>00496                         <span class="keywordtype">size_t</span> minPoints);
<a name="l00497"></a>00497                         
<a name="l00529"></a>00529     <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn,
<a name="l00530"></a>00530                 <span class="keywordtype">bool</span> volChecking, <span class="keywordtype">double</span> minVol, <span class="keywordtype">size_t</span> minChildPoints);
<a name="l00531"></a>00531 
<a name="l00532"></a>00532 
<a name="l00533"></a>00533 
<a name="l00534"></a>00534 
<a name="l00535"></a>00535     <span class="keyword">public</span>:
<a name="l00536"></a>00536 
<a name="l00542"></a>00542     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram</a>();
<a name="l00543"></a>00543 
<a name="l00550"></a>00550     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram</a>  (<span class="keywordtype">bool</span> as);
<a name="l00551"></a>00551 
<a name="l00562"></a>00562     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram</a>(ivector&amp; v, <span class="keywordtype">bool</span> as = <span class="keyword">false</span>);
<a name="l00563"></a>00563 
<a name="l00566"></a>00566     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; other);
<a name="l00567"></a>00567 
<a name="l00570"></a>00570     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3adb7a4fce51ec497ef30dea633249fd" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; rhs);
<a name="l00571"></a>00571 
<a name="l00582"></a>00582     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a962f179df0a65d5f179930d00e65b70e" title="Overloaded addition operator.">operator+</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; rhs);
<a name="l00583"></a>00583 
<a name="l00584"></a>00584 
<a name="l00586"></a>00586     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa11b3ed173c858fec6234c7e0b9d9829" title="Destructor.">~AdaptiveHistogram</a>();
<a name="l00587"></a>00587 
<a name="l00588"></a>00588 
<a name="l00589"></a>00589 
<a name="l00592"></a>00592     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>() <span class="keyword">const</span>;
<a name="l00593"></a>00593     
<a name="l00594"></a>00594     <span class="comment">//src_trunk_0701</span>
<a name="l00597"></a>00597 <span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adc2a97bb7f8fc3c543f90ba876515ca1" title="Return the label for this.">getLabel</a>() <span class="keyword">const</span>;
<a name="l00598"></a>00598 
<a name="l00599"></a>00599 
<a name="l00602"></a>00602     rvector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91" title="Gets the mean from the root box of the paving this manages.">getRootPavingMean</a>() <span class="keyword">const</span>;
<a name="l00603"></a>00603 
<a name="l00604"></a>00604 
<a name="l00607"></a>00607     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f" title="Gets variance covariance vector from root box of rootpaving.">getRootPavingVarCovar</a>() <span class="keyword">const</span>;
<a name="l00608"></a>00608 
<a name="l00611"></a>00611     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>() <span class="keyword">const</span>;
<a name="l00612"></a>00612 
<a name="l00615"></a>00615     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() <span class="keyword">const</span>;
<a name="l00616"></a>00616 
<a name="l00619"></a>00619     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ac7f7cb4d5aea17c967afec84e1159f9b" title="Gets the sum of leaf count over volume in root paving.">getRootSumLeafCountOverVol</a>() <span class="keyword">const</span>;
<a name="l00620"></a>00620 
<a name="l00621"></a>00621 
<a name="l00625"></a>00625     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec" title="get the EMP part of the COPERR score.">getEMPScoreCOPERR</a>() <span class="keyword">const</span>;
<a name="l00626"></a>00626 
<a name="l00630"></a>00630     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">getEMPScoreAIC</a>() <span class="keyword">const</span>;
<a name="l00631"></a>00631 
<a name="l00632"></a>00632 
<a name="l00638"></a>00638     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad" title="get the COPERR score.">getScoreCOPERR</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen, <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00639"></a>00639 
<a name="l00645"></a>00645     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3" title="get AIC score.">getScoreAIC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen, <span class="keywordtype">bool</span> verbose = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00646"></a>00646 
<a name="l00655"></a>00655     real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen, <span class="keywordtype">int</span> deltaLeaf = 0) <span class="keyword">const</span>;
<a name="l00656"></a>00656 
<a name="l00666"></a>00666     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(<span class="keywordtype">double</span> minVolB) <span class="keyword">const</span>;
<a name="l00667"></a>00667 
<a name="l00673"></a>00673     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1" title="get the value of holdAllStats field.">getHoldAllStats</a>() <span class="keyword">const</span>;
<a name="l00674"></a>00674 
<a name="l00675"></a>00675   <span class="comment">//src_trunk_0701</span>
<a name="l00683"></a>00683 <span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() <span class="keyword">const</span>;
<a name="l00684"></a>00684     
<a name="l00685"></a>00685     <span class="comment">//src_trunk_0701</span>
<a name="l00693"></a>00693 <span class="comment"></span>  cxsc::ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc" title="Get the box of the subpaving managed by this.">getRootBox</a>() <span class="keyword">const</span>;
<a name="l00694"></a>00694 
<a name="l00701"></a>00701     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a70f9af80f0ee875d6dcbfd4cafb53813">getLeafLevels</a>() <span class="keyword">const</span>;
<a name="l00702"></a>00702 
<a name="l00703"></a>00703 
<a name="l00711"></a>00711     std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>() <span class="keyword">const</span>;
<a name="l00712"></a>00712 
<a name="l00713"></a>00713 
<a name="l00718"></a>00718     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaffb116a24a6de03482a8bfd9625b07f">getLeafCounts</a>() <span class="keyword">const</span>;
<a name="l00719"></a>00719 
<a name="l00729"></a>00729     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00730"></a>00730 
<a name="l00753"></a>00753     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aafef86d6e4482aef11de75b83cfb4345" title="Insert a single data point into AdaptiveHistogram object.">insertOne</a>(rvector newdata,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00754"></a>00754             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00755"></a>00755 
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     
<a name="l00785"></a>00785 
<a name="l00787"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">00787</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00788"></a>00788                 <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00789"></a>00789                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00790"></a>00790     {
<a name="l00791"></a>00791         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00792"></a>00792         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(s, sn, headerlines, logging);
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794 
<a name="l00796"></a>00796     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00797"></a>00797                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00798"></a>00798           <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00799"></a>00799                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 
<a name="l00803"></a>00803 
<a name="l00835"></a>00835 
<a name="l00837"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3705758c35dbfe8745a2e34c83b7f619">00837</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3705758c35dbfe8745a2e34c83b7f619">insertDoublesFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00838"></a>00838                 <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00839"></a>00839                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00840"></a>00840     {
<a name="l00841"></a>00841         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00842"></a>00842         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(s, sn, headerlines, logging);
<a name="l00843"></a>00843     }
<a name="l00844"></a>00844 
<a name="l00846"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3e03076ea91599538bcc69f47084f649">00846</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3705758c35dbfe8745a2e34c83b7f619">insertDoublesFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00847"></a>00847                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00848"></a>00848           <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00849"></a>00849                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00850"></a>00850     {
<a name="l00851"></a>00851         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(s, boolTest, logging);
<a name="l00852"></a>00852     }
<a name="l00854"></a>00854 
<a name="l00855"></a>00855 
<a name="l00893"></a>00893 
<a name="l00895"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">00895</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00896"></a>00896                 <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00897"></a>00897                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00898"></a>00898     {
<a name="l00899"></a>00899         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00900"></a>00900         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(s, sn, headerlines, logging);
<a name="l00901"></a>00901     }
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 
<a name="l00905"></a>00905     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00906"></a>00906                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00907"></a>00907           <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00908"></a>00908                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 
<a name="l00923"></a>00923 
<a name="l00925"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">00925</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00926"></a>00926     {
<a name="l00927"></a>00927         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00928"></a>00928         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(rvec, sn, logging);
<a name="l00929"></a>00929     }
<a name="l00930"></a>00930 
<a name="l00932"></a>00932     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00933"></a>00933                              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00934"></a>00934 
<a name="l00936"></a>00936 
<a name="l00956"></a>00956 
<a name="l00959"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">00959</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize, gsl_rng * rgsl,
<a name="l00960"></a>00960             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00961"></a>00961     {
<a name="l00962"></a>00962         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00963"></a>00963         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize, rgsl, rvec,
<a name="l00964"></a>00964                                     sn, logging);
<a name="l00965"></a>00965     }
<a name="l00966"></a>00966 
<a name="l00969"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a754142aca6681e39debd7167146a7e1c">00969</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keywordtype">int</span> seed,
<a name="l00970"></a>00970             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00971"></a>00971     {
<a name="l00972"></a>00972         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00973"></a>00973         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize, seed, rvec,
<a name="l00974"></a>00974                                     sn, logging);
<a name="l00975"></a>00975     }
<a name="l00978"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aeca515a5f969a1f368ba1fe0390aa047">00978</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00979"></a>00979             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00980"></a>00980     {
<a name="l00981"></a>00981         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00982"></a>00982         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize, rvec, sn, logging);
<a name="l00983"></a>00983     }
<a name="l00984"></a>00984 
<a name="l00987"></a>00987     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize, gsl_rng * rgsl,
<a name="l00988"></a>00988             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00989"></a>00989             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00992"></a>00992     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keywordtype">int</span> seed,
<a name="l00993"></a>00993             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00994"></a>00994             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00997"></a>00997     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec,
<a name="l00998"></a>00998             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00999"></a>00999 
<a name="l01001"></a>01001 
<a name="l01002"></a>01002 
<a name="l01003"></a>01003 
<a name="l01021"></a>01021 
<a name="l01023"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">01023</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(<span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss,
<a name="l01024"></a>01024                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0)
<a name="l01025"></a>01025     {
<a name="l01026"></a>01026         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l01027"></a>01027         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(rss, sn, logging, label);
<a name="l01028"></a>01028     }
<a name="l01029"></a>01029 
<a name="l01031"></a>01031     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(<span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss,
<a name="l01032"></a>01032                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01033"></a>01033                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0);
<a name="l01035"></a>01035 
<a name="l01036"></a>01036 
<a name="l01063"></a>01063 
<a name="l01066"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">01066</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize, gsl_rng * rgsl,
<a name="l01067"></a>01067             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0)
<a name="l01068"></a>01068     {
<a name="l01069"></a>01069         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l01070"></a>01070         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(samplesize, rgsl, rss, sn,
<a name="l01071"></a>01071                                         logging, label);
<a name="l01072"></a>01072     }
<a name="l01075"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab41e19cc570fa35d9c867413a7398edc">01075</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keywordtype">int</span> seed,
<a name="l01076"></a>01076             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0)
<a name="l01077"></a>01077     {
<a name="l01078"></a>01078         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l01079"></a>01079         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(samplesize, seed, rss, sn,
<a name="l01080"></a>01080                                         logging, label);
<a name="l01081"></a>01081     }
<a name="l01084"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a9468b46a614470017cc09cadd7699af8">01084</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01085"></a>01085             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0)
<a name="l01086"></a>01086     {
<a name="l01087"></a>01087         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l01088"></a>01088         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(samplesize, rss, sn,
<a name="l01089"></a>01089                                         logging, label);
<a name="l01090"></a>01090     }
<a name="l01091"></a>01091 
<a name="l01094"></a>01094     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize, gsl_rng * rgsl,
<a name="l01095"></a>01095             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01096"></a>01096             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0);
<a name="l01099"></a>01099     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keywordtype">int</span> seed,
<a name="l01100"></a>01100             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01101"></a>01101             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0);
<a name="l01104"></a>01104     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss,
<a name="l01105"></a>01105                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01106"></a>01106                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label = 0);
<a name="l01107"></a>01107 
<a name="l01109"></a>01109 
<a name="l01110"></a>01110 
<a name="l01150"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">01150</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01151"></a>01151                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01152"></a>01152                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01153"></a>01153     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compTest, he, logging, minChildPoints, 0.0, 
<a name="l01154"></a>01154                     maxLeafNodes); }
<a name="l01155"></a>01155 
<a name="l01157"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a123e69c185cb450a05ecdc7101c71548">01157</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01158"></a>01158                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01159"></a>01159                       <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01160"></a>01160     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a123e69c185cb450a05ecdc7101c71548">prioritySplit</a>(compTest, he, logging, 0, minVolB, maxLeafNodes); }
<a name="l01161"></a>01161 
<a name="l01163"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a04219b243723859e2939216181cbaddc">01163</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01164"></a>01164                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01165"></a>01165     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a04219b243723859e2939216181cbaddc">prioritySplit</a>(compTest, he, logging, 0, 0.0, maxLeafNodes); }
<a name="l01166"></a>01166 
<a name="l01168"></a>01168     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01169"></a>01169                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01170"></a>01170                <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes);
<a name="l01171"></a>01171 
<a name="l01173"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aea0d424449b7d93babef81d49bbbdb70">01173</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01174"></a>01174                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01175"></a>01175                       <span class="keywordtype">size_t</span> minChildPoints, gsl_rng * rgsl, 
<a name="l01176"></a>01176                <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01177"></a>01177     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aea0d424449b7d93babef81d49bbbdb70">prioritySplit</a>(compTest, he, logging, minChildPoints, 0.0, rgsl,
<a name="l01178"></a>01178                     maxLeafNodes); }
<a name="l01179"></a>01179 
<a name="l01181"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad6a946d5c729b0f49d78962680d5d659">01181</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01182"></a>01182                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01183"></a>01183                       <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01184"></a>01184     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad6a946d5c729b0f49d78962680d5d659">prioritySplit</a>(compTest, he, logging, 0, minVolB, rgsl, maxLeafNodes); }
<a name="l01185"></a>01185 
<a name="l01187"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a630b400683794cd527173b18eb126f84">01187</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01188"></a>01188                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l01189"></a>01189     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a630b400683794cd527173b18eb126f84">prioritySplit</a>(compTest, he, logging, 0, 0.0, rgsl, maxLeafNodes); }
<a name="l01190"></a>01190 
<a name="l01192"></a>01192     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01193"></a>01193                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01194"></a>01194                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl,
<a name="l01195"></a>01195                <span class="keywordtype">size_t</span> maxLeafNodes);
<a name="l01196"></a>01196 
<a name="l01198"></a>01198 
<a name="l01220"></a>01220     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712" title="Priority merge to reduce number of leaves in histogram.">priorityMerge</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01221"></a>01221                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l01222"></a>01222 
<a name="l01227"></a>01227     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a745b6edb93463e227edb9c9aa1dcb505" title="Merge a multileaf histogram up to just root box.">mergeUp</a>();
<a name="l01228"></a>01228 
<a name="l01233"></a>01233     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(std::string instruction);
<a name="l01234"></a>01234 
<a name="l01235"></a>01235 
<a name="l01306"></a>01306     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a733cc04938b2236087cbbe0384985c3d" title="Outputting MCMC samples from histogram state space.">MCMC</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout,
<a name="l01307"></a>01307                 <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l01308"></a>01308                 <span class="keywordtype">size_t</span> minPoints = 0, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l01309"></a>01309 
<a name="l01382"></a>01382   std::vector &lt; AdaptiveHistogram &gt;&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9" title="Generating MCMC samples from histogram state space.">MCMCsamples</a>(
<a name="l01383"></a>01383             std::vector &lt; AdaptiveHistogram &gt;&amp; samples, 
<a name="l01384"></a>01384             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops, 
<a name="l01385"></a>01385             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin,
<a name="l01386"></a>01386             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout,
<a name="l01387"></a>01387             <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l01388"></a>01388             <span class="keywordtype">size_t</span> minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging);
<a name="l01389"></a>01389 
<a name="l01390"></a>01390 
<a name="l01391"></a>01391     <span class="comment">//docs and make private?</span>
<a name="l01392"></a>01392     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0163eb023d0db24e0d91864a38acd562">publicOutputMCMCStateSample</a>(<span class="keywordtype">int</span> ci, <span class="keywordtype">int</span> i, <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>);
<a name="l01393"></a>01393 
<a name="l01394"></a>01394     <span class="comment">//docs</span>
<a name="l01395"></a>01395     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af41faeb2742df1aaa5108f17dee54d71">publicLogMCMCSample</a>(std::string s, <span class="keywordtype">int</span> i);
<a name="l01396"></a>01396 
<a name="l01487"></a>01487     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2e95f7f1a9dab963a28a7d3a655e0e8f" title="Changes the state of this Adaptive Histogram using MCMC process.">changeMCMCState</a> (<a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes, <span class="keywordtype">size_t</span>&amp; numLeaves,
<a name="l01488"></a>01488                             <span class="keywordtype">size_t</span>&amp; numCherries,
<a name="l01489"></a>01489                             <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l01490"></a>01490                             <span class="keywordtype">size_t</span> minPoints, gsl_rng* rgsl,
<a name="l01491"></a>01491                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, std::string s, <span class="keywordtype">int</span> i);
<a name="l01492"></a>01492 
<a name="l01502"></a>01502     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>() <span class="keyword">const</span>;
<a name="l01503"></a>01503 
<a name="l01504"></a>01504 
<a name="l01515"></a>01515     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l01516"></a>01516 
<a name="l01530"></a>01530     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">outputToTxtTabsWithEMPs</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l01531"></a>01531                                 <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l01532"></a>01532 
<a name="l01533"></a>01533 
<a name="l01542"></a>01542     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a35416eefb965755a846e1bb64c882439" title="Output details of full sample (from root) to txt tile.">outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l01543"></a>01543    
<a name="l01544"></a>01544    <span class="comment">//--src_trunk_0701</span>
<a name="l01568"></a>01568 <span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e" title="Change this so that the subpaving it manages is the union of this&#39;s subpaving and the subpaving of th...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other);
<a name="l01569"></a>01569 
<a name="l01606"></a>01606   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e" title="Change this so that the subpaving it manages is the union of this&#39;s subpaving and the subpaving of th...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other,
<a name="l01607"></a>01607             <span class="keywordtype">size_t</span> minChildPoints);
<a name="l01608"></a>01608   <span class="comment">//--src_trunk_0701</span>
<a name="l01609"></a>01609    
<a name="l01610"></a>01610    
<a name="l01613"></a>01613    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4" title="Clear the histogram&#39;s data and counters.">makeEmpty</a>();
<a name="l01614"></a>01614    
<a name="l01629"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">01629</a>    real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">getEstLogLikelihoodFromRSSample</a>(<a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; labSampledData,
<a name="l01630"></a>01630                     <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> wt)
<a name="l01631"></a>01631   { <span class="keywordtype">double</span> WeightHist = 1.0;
<a name="l01632"></a>01632     std::map&lt;rvector, double, std::less&lt;rvector&gt; &gt; WeightsPM;
<a name="l01633"></a>01633     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">getEstLogLikelihoodFromRSSample</a>(labSampledData,
<a name="l01634"></a>01634                     dx, wt, WeightHist, WeightsPM); } 
<a name="l01635"></a>01635   real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">getEstLogLikelihoodFromRSSample</a>(<a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; labSampledData,
<a name="l01636"></a>01636                     <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> wt,  <span class="keywordtype">double</span> WeightHist,
<a name="l01637"></a>01637             std::map&lt;rvector, <span class="keywordtype">double</span>, std::less&lt;rvector&gt; &gt;&amp; WeightsPM);
<a name="l01638"></a>01638     
<a name="l01650"></a>01650   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">getIAE</a>(<span class="keywordtype">int</span> distr);
<a name="l01651"></a>01651 
<a name="l01653"></a>01653   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a368e5e9ed8cf0a3e82b30291c4a54d24">getFinMixIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt); 
<a name="l01654"></a>01654   
<a name="l01657"></a>01657    cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l01658"></a>01658   
<a name="l01660"></a>01660   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">get2DIAE</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval));
<a name="l01661"></a>01661   
<a name="l01663"></a>01663   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">getUnifIAE</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, std::vector&lt;int&gt; holesLoc);
<a name="l01664"></a>01664   
<a name="l01666"></a>01666   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">getUnifIAE</a>();
<a name="l01667"></a>01667   
<a name="l01669"></a>01669   <span class="comment">//cxsc::real getMappedFunctionIAE(RealMappedSPnode nodeEst);</span>
<a name="l01670"></a>01670   
<a name="l01673"></a>01673    cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(<span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l01674"></a>01674    
<a name="l01677"></a>01677    cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(<span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l01679"></a>01679 
<a name="l01682"></a>01682   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa0b81dd06668d2ce34e3fe983a2a2913" title="Find the coverage of the boxes in an AdaptiveHistogram.">findDensityRegion</a>(<span class="keywordtype">double</span> cov, <span class="keywordtype">double</span> weightPM, vector&lt;SPSnode*&gt; &amp; covNodes,
<a name="l01683"></a>01683                   <span class="keywordtype">string</span> covFileName);
<a name="l01684"></a>01684                   
<a name="l01685"></a>01685   
<a name="l01686"></a>01686   <span class="comment">// Jenny addition for Gloria&#39;s convergence work</span>
<a name="l01695"></a>01695 <span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa73a46279c3f591d298a0180d99723a5" title="Append current state of histogram to a txt log file.">outputLogPlain</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l01696"></a>01696   
<a name="l01697"></a>01697   <span class="comment">// gloria addition for makingADHtoMapped</span>
<a name="l01700"></a>01700 <span class="comment"></span>  <span class="comment">//cxsc::real getMappedIAE(RealMappedSPnode&amp; nodeEst, ivector pavingBox) const;</span>
<a name="l01701"></a>01701   
<a name="l01702"></a>01702   
<a name="l01707"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">01707</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01708"></a>01708                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01709"></a>01709                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">size_t</span> maxLeafNodes,
<a name="l01710"></a>01710                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01711"></a>01711                       std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01712"></a>01712     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(compTest, he, logging, minChildPoints, 0.0, 
<a name="l01713"></a>01713                     maxLeafNodes, States, Sampled); }
<a name="l01714"></a>01714 
<a name="l01716"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab3416e49bbb37e982e2e2f6a1ef13850">01716</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01717"></a>01717                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01718"></a>01718                       <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01719"></a>01719                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01720"></a>01720                       std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01721"></a>01721     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab3416e49bbb37e982e2e2f6a1ef13850">prioritySplitGet</a>(compTest, he, logging, 0, minVolB, maxLeafNodes, 
<a name="l01722"></a>01722                      States, Sampled); }
<a name="l01723"></a>01723 
<a name="l01725"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3eab9e09fee0aa81bd19bf170cf23aea">01725</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01726"></a>01726                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01727"></a>01727                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01728"></a>01728                       std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01729"></a>01729     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3eab9e09fee0aa81bd19bf170cf23aea">prioritySplitGet</a>(compTest, he, logging, 0, 0.0, maxLeafNodes,
<a name="l01730"></a>01730                      States, Sampled); }
<a name="l01731"></a>01731 
<a name="l01733"></a>01733     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01734"></a>01734                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01735"></a>01735                <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01736"></a>01736                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01737"></a>01737                       std::vector&lt;size_t&gt;&amp; Sampled);
<a name="l01738"></a>01738 
<a name="l01740"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af4e1c9c71ca8835f8ee3a78204f63d49">01740</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01741"></a>01741                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01742"></a>01742                       <span class="keywordtype">size_t</span> minChildPoints, gsl_rng * rgsl, 
<a name="l01743"></a>01743                <span class="keywordtype">size_t</span> maxLeafNodes,
<a name="l01744"></a>01744                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01745"></a>01745                       std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01746"></a>01746     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af4e1c9c71ca8835f8ee3a78204f63d49">prioritySplitGet</a>(compTest, he, logging, minChildPoints, 0.0, rgsl,
<a name="l01747"></a>01747                     maxLeafNodes, States, Sampled); }
<a name="l01748"></a>01748 
<a name="l01750"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a761f68d3b8f183d4fda926732fda70f9">01750</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01751"></a>01751                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01752"></a>01752                       <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01753"></a>01753                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01754"></a>01754                       std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01755"></a>01755     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a761f68d3b8f183d4fda926732fda70f9">prioritySplitGet</a>(compTest, he, logging, 0, minVolB, rgsl, maxLeafNodes, 
<a name="l01756"></a>01756                      States, Sampled); }
<a name="l01757"></a>01757 
<a name="l01759"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8654a1a779b1c0e6d0dcec82f436efd6">01759</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01760"></a>01760                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01761"></a>01761                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l01762"></a>01762     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8654a1a779b1c0e6d0dcec82f436efd6">prioritySplitGet</a>(compTest, he, logging, 0, 0.0, rgsl, maxLeafNodes, 
<a name="l01763"></a>01763                       States, Sampled); }
<a name="l01764"></a>01764 
<a name="l01766"></a>01766     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01767"></a>01767                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01768"></a>01768                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl,
<a name="l01769"></a>01769                <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01770"></a>01770                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l01771"></a>01771                       std::vector&lt;size_t&gt;&amp; Sampled);
<a name="l01773"></a>01773   
<a name="l01774"></a>01774 
<a name="l01775"></a>01775   <span class="comment">//gat41</span>
<a name="l01781"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">01781</a> <span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01782"></a>01782                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01783"></a>01783                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">size_t</span> maxLeafNodes,
<a name="l01784"></a>01784                       std::vector&lt;real&gt;&amp; Posterior, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01785"></a>01785     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compTest, he, logging, minChildPoints, 0.0, 
<a name="l01786"></a>01786                     maxLeafNodes, Posterior, logPrior); }
<a name="l01787"></a>01787 
<a name="l01789"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a024499e93cb4ca592c78b860d09cef79">01789</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01790"></a>01790                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01791"></a>01791                       <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, std::vector&lt;real&gt;&amp; Posterior,
<a name="l01792"></a>01792                       <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01793"></a>01793     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a024499e93cb4ca592c78b860d09cef79">prioritySplitMCMC</a>(compTest, he, logging, 0, minVolB, maxLeafNodes, 
<a name="l01794"></a>01794     Posterior, logPrior); }
<a name="l01795"></a>01795 
<a name="l01797"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c890ee5d86fc4cfd45c0ea2667b4a4f">01797</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01798"></a>01798                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01799"></a>01799                       std::vector&lt;real&gt;&amp; Posterior, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01800"></a>01800     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c890ee5d86fc4cfd45c0ea2667b4a4f">prioritySplitMCMC</a>(compTest, he, logging, 0, 0.0, maxLeafNodes, Posterior,
<a name="l01801"></a>01801     logPrior); }
<a name="l01802"></a>01802 
<a name="l01804"></a>01804     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01805"></a>01805                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01806"></a>01806                <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01807"></a>01807                std::vector&lt;real&gt;&amp; Posterior, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior);
<a name="l01808"></a>01808 
<a name="l01810"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab38788117602e87f4e53a72b6c62747a">01810</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01811"></a>01811                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01812"></a>01812                       <span class="keywordtype">size_t</span> minChildPoints, gsl_rng * rgsl, 
<a name="l01813"></a>01813                <span class="keywordtype">size_t</span> maxLeafNodes, std::vector&lt;real&gt;&amp; Posterior,
<a name="l01814"></a>01814                <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01815"></a>01815     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab38788117602e87f4e53a72b6c62747a">prioritySplitMCMC</a>(compTest, he, logging, minChildPoints, 0.0, rgsl,
<a name="l01816"></a>01816                     maxLeafNodes, Posterior, logPrior); }
<a name="l01817"></a>01817 
<a name="l01819"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8e2052a043fc9969084719da4338678">01819</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01820"></a>01820                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01821"></a>01821                       <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01822"></a>01822                       std::vector&lt;real&gt;&amp; Posterior, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01823"></a>01823     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8e2052a043fc9969084719da4338678">prioritySplitMCMC</a>(compTest, he, logging, 0, minVolB, rgsl, maxLeafNodes, 
<a name="l01824"></a>01824     Posterior, logPrior); }
<a name="l01825"></a>01825 
<a name="l01827"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af6cd725ab063a5c3af80d42315d99ddc">01827</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01828"></a>01828                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01829"></a>01829                       std::vector&lt;real&gt;&amp; Posterior, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l01830"></a>01830     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af6cd725ab063a5c3af80d42315d99ddc">prioritySplitMCMC</a>(compTest, he, logging, 0, 0.0, rgsl, maxLeafNodes, 
<a name="l01831"></a>01831     Posterior, logPrior); }
<a name="l01832"></a>01832 
<a name="l01834"></a>01834     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01835"></a>01835                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01836"></a>01836                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl,
<a name="l01837"></a>01837                <span class="keywordtype">size_t</span> maxLeafNodes, std::vector&lt;real&gt;&amp; Posterior,
<a name="l01838"></a>01838                <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior);
<a name="l01840"></a>01840 
<a name="l01841"></a>01841   <span class="comment">// gloria addition for total variation as a stopping criteria in prioritySplit</span>
<a name="l01846"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">01846</a> <span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01847"></a>01847                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01848"></a>01848                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal,
<a name="l01849"></a>01849                       std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l01850"></a>01850     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(compTest, he, logging, minChildPoints, 0.0, 
<a name="l01851"></a>01851                     maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01852"></a>01852 
<a name="l01854"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c7ccb75b629b131c7a448579386c6a9">01854</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01855"></a>01855                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01856"></a>01856                       <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes,<span class="keywordtype">int</span> StopVal,
<a name="l01857"></a>01857                       std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l01858"></a>01858     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c7ccb75b629b131c7a448579386c6a9">prioritySplitWithTotalVar</a>(compTest, he, logging, 0, minVolB, 
<a name="l01859"></a>01859               maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01860"></a>01860 
<a name="l01862"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a435e13db001d1b919489507b81cb49ad">01862</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01863"></a>01863                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal,
<a name="l01864"></a>01864                       std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l01865"></a>01865     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a435e13db001d1b919489507b81cb49ad">prioritySplitWithTotalVar</a>(compTest, he, logging, 0, 0.0, 
<a name="l01866"></a>01866                 maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01867"></a>01867 
<a name="l01869"></a>01869     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01870"></a>01870                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01871"></a>01871                <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal,
<a name="l01872"></a>01872                std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum);
<a name="l01873"></a>01873 
<a name="l01875"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae80f3d62957c9c70a2b7eed4b1e11810">01875</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01876"></a>01876                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01877"></a>01877                       <span class="keywordtype">size_t</span> minChildPoints, gsl_rng * rgsl, 
<a name="l01878"></a>01878                <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal, 
<a name="l01879"></a>01879                std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l01880"></a>01880     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae80f3d62957c9c70a2b7eed4b1e11810">prioritySplitWithTotalVar</a>(compTest, he, logging, minChildPoints, 0.0, rgsl,
<a name="l01881"></a>01881                     maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01882"></a>01882 
<a name="l01884"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a508b13326647eaa46806ca7999d303f2">01884</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01885"></a>01885                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01886"></a>01886                       <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01887"></a>01887                       <span class="keywordtype">int</span> StopVal, std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley,
<a name="l01888"></a>01888                       <span class="keywordtype">int</span> simNum)
<a name="l01889"></a>01889     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a508b13326647eaa46806ca7999d303f2">prioritySplitWithTotalVar</a>(compTest, he, logging, 0, minVolB, rgsl, 
<a name="l01890"></a>01890                 maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01891"></a>01891 
<a name="l01893"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39888154b396a7eb5fd6be1ff200a414">01893</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01894"></a>01894                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01895"></a>01895                       <span class="keywordtype">int</span> StopVal, std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley,
<a name="l01896"></a>01896                       <span class="keywordtype">int</span> simNum)
<a name="l01897"></a>01897     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39888154b396a7eb5fd6be1ff200a414">prioritySplitWithTotalVar</a>(compTest, he, logging, 0, 0.0, rgsl, 
<a name="l01898"></a>01898             maxLeafNodes, StopVal, HistAtValley, simNum); }
<a name="l01899"></a>01899 
<a name="l01901"></a>01901     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01902"></a>01902                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01903"></a>01903                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl,
<a name="l01904"></a>01904                <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal, 
<a name="l01905"></a>01905                std::vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum);
<a name="l01907"></a>01907    
<a name="l01908"></a>01908    <span class="comment">// gloria addition for prioritySplit with switches</span>
<a name="l01913"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">01913</a> <span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01914"></a>01914                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01915"></a>01915                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l01916"></a>01916     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compTest, he, logging, minChildPoints, 0.0, 
<a name="l01917"></a>01917                     maxLeafNodes, removeBox); }
<a name="l01918"></a>01918 
<a name="l01920"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0cd2e3af29feaad65d4a0a36738dcc15">01920</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01921"></a>01921                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01922"></a>01922                       <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l01923"></a>01923     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0cd2e3af29feaad65d4a0a36738dcc15">prioritySplitWithSwitches</a>(compTest, he, logging, 0, minVolB, 
<a name="l01924"></a>01924               maxLeafNodes, removeBox); }
<a name="l01925"></a>01925 
<a name="l01927"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39ff221f6d3dad036ba6d4f5ec0ae819">01927</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01928"></a>01928                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l01929"></a>01929     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39ff221f6d3dad036ba6d4f5ec0ae819">prioritySplitWithSwitches</a>(compTest, he, logging, 0, 0.0, 
<a name="l01930"></a>01930                 maxLeafNodes, removeBox); }
<a name="l01931"></a>01931 
<a name="l01933"></a>01933     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01934"></a>01934                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01935"></a>01935                <span class="keywordtype">double</span> minVolB, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox);
<a name="l01936"></a>01936 
<a name="l01938"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5299ade7c1d409621b2204a1986dabd8">01938</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01939"></a>01939                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01940"></a>01940                       <span class="keywordtype">size_t</span> minChildPoints, gsl_rng * rgsl, 
<a name="l01941"></a>01941                <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l01942"></a>01942     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5299ade7c1d409621b2204a1986dabd8">prioritySplitWithSwitches</a>(compTest, he, logging, minChildPoints, 0.0, rgsl,
<a name="l01943"></a>01943                     maxLeafNodes, removeBox); }
<a name="l01944"></a>01944 
<a name="l01946"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2ae1c64a519c1d5f32f81d39210b738">01946</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01947"></a>01947                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01948"></a>01948                       <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01949"></a>01949                       <span class="keywordtype">int</span> removeBox)
<a name="l01950"></a>01950     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2ae1c64a519c1d5f32f81d39210b738">prioritySplitWithSwitches</a>(compTest, he, logging, 0, minVolB, rgsl, 
<a name="l01951"></a>01951                 maxLeafNodes, removeBox); }
<a name="l01952"></a>01952 
<a name="l01954"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af9317b285f9a4f2753b1c9099347fe6f">01954</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01955"></a>01955                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l01956"></a>01956                       <span class="keywordtype">int</span> removeBox)
<a name="l01957"></a>01957     { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af9317b285f9a4f2753b1c9099347fe6f">prioritySplitWithSwitches</a>(compTest, he, logging, 0, 0.0, rgsl, 
<a name="l01958"></a>01958             maxLeafNodes, removeBox); }
<a name="l01959"></a>01959 
<a name="l01961"></a>01961     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l01962"></a>01962                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l01963"></a>01963                       <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl,
<a name="l01964"></a>01964                <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox);
<a name="l01966"></a>01966    
<a name="l01969"></a>01969     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a438e2252f954f0556fa2bd7c2e105dbe">checkStopCrit</a>(<span class="keywordtype">double</span> StopCritCurrent, <span class="keywordtype">double</span> StopCritPrevious, <span class="keywordtype">int</span>&amp; Prev); 
<a name="l01970"></a>01970     
<a name="l01971"></a>01971     <span class="comment">//src_truk_0701</span>
<a name="l01978"></a>01978 <span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh); <span class="comment">// throw()</span>
<a name="l01979"></a>01979 
<a name="l01980"></a>01980 
<a name="l01981"></a>01981 
<a name="l01982"></a>01982 }; <span class="comment">// end of AdaptiveHistogram class declarations</span>
<a name="l01983"></a>01983 
<a name="l01984"></a>01984 
<a name="l01987"></a><a class="code" href="classsubpavings_1_1HistException.shtml">01987</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a> : <span class="keyword">public</span> std::exception
<a name="l01988"></a>01988 {
<a name="l01989"></a><a class="code" href="classsubpavings_1_1HistException.shtml#a0fa63652ca7c257562f3c590805d5d06">01989</a>    std::string <a class="code" href="classsubpavings_1_1HistException.shtml#a0fa63652ca7c257562f3c590805d5d06">s</a>;
<a name="l01990"></a>01990    <span class="keyword">public</span>:
<a name="l01991"></a>01991    <a class="code" href="classsubpavings_1_1HistException.shtml#a30a3ad6d38a4913062edf162382fbe54">HistException</a>(std::string ss);
<a name="l01992"></a>01992    <a class="code" href="classsubpavings_1_1HistException.shtml#acdc02a56739daf196a7d44e48951d83c">~HistException</a> () throw ();
<a name="l01993"></a>01993    virtual const <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>() const throw();
<a name="l01994"></a>01994 };
<a name="l01995"></a>01995 
<a name="l01996"></a>01996 
<a name="l01997"></a>01997 
<a name="l02008"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml">02008</a> class <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a> {
<a name="l02009"></a>02009 <span class="keyword">private</span>:
<a name="l02012"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">02012</a>     std::string <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>;
<a name="l02013"></a>02013 
<a name="l02016"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a3f246c1b82fb69929ec3761480c934b9">02016</a>     <span class="keyword">mutable</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml#a3f246c1b82fb69929ec3761480c934b9">goodString</a>;
<a name="l02017"></a>02017 
<a name="l02018"></a>02018 
<a name="l02019"></a>02019 <span class="keyword">public</span>:
<a name="l02022"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#aa037991228f9fc3595310b7d9a645a6b">02022</a>     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml#aa037991228f9fc3595310b7d9a645a6b" title="Default constructor.">HistDescription</a>() : depthString(<span class="stringliteral">&quot;&quot;</span>), goodString(true) {}
<a name="l02023"></a>02023 
<a name="l02026"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#adacde2a48f78ab90db0bdd251f0d13ab">02026</a>     <span class="keyword">explicit</span> HistDescription(std::string str) : depthString(str),
<a name="l02027"></a>02027                                                 goodString(true) {}
<a name="l02028"></a>02028 
<a name="l02031"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a132244f2567c62a6b481ec3fa93ebe5e">02031</a>     <span class="keyword">explicit</span> HistDescription(<span class="keyword">const</span> HistDescription&amp; other)
<a name="l02032"></a>02032                 : depthString(other.depthString),
<a name="l02033"></a>02033                   goodString(other.goodString) {}
<a name="l02034"></a>02034 
<a name="l02037"></a>02037     HistDescription&amp; operator=(<span class="keyword">const</span> HistDescription&amp; rhs);
<a name="l02038"></a>02038 
<a name="l02041"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#ade9e4041c1ca6de14b2b82ff7c7465e1">02041</a>     <span class="keywordtype">void</span> setIsGood(<span class="keywordtype">bool</span> b)
<a name="l02042"></a>02042     { goodString = b; }
<a name="l02043"></a>02043 
<a name="l02046"></a>02046     <span class="keywordtype">int</span> peekFirst() <span class="keyword">const</span>;
<a name="l02047"></a>02047 
<a name="l02050"></a>02050     <span class="keywordtype">bool</span> popFirst();
<a name="l02051"></a>02051 
<a name="l02054"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a4c48acd03fc56cb6e8b3d2645ee35c31">02054</a>     <span class="keywordtype">bool</span> getIsGood()<span class="keyword"> const</span>
<a name="l02055"></a>02055 <span class="keyword">    </span>{ <span class="keywordflow">return</span> goodString; }
<a name="l02056"></a>02056 
<a name="l02059"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a35a0b15e904f1987b6603c7ffeb22f75">02059</a>     std::string getDepthString()<span class="keyword"> const</span>
<a name="l02060"></a>02060 <span class="keyword">    </span>{ <span class="keywordflow">return</span> depthString; }
<a name="l02061"></a>02061 
<a name="l02062"></a>02062 };
<a name="l02063"></a>02063 
<a name="l02064"></a>02064 
<a name="l02065"></a>02065 
<a name="l02066"></a>02066 <span class="comment">// ----------  declarations of non-member functions ----------------------</span>
<a name="l02067"></a>02067 
<a name="l02070"></a>02070 std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l02071"></a>02071                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; hd);
<a name="l02072"></a>02072 
<a name="l02075"></a>02075 <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a91aca11d8ef070d592dcd968dd82d89d" title="Comparison operator for the histogram description.">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; lhs,
<a name="l02076"></a>02076                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; rhs);
<a name="l02077"></a>02077 
<a name="l02078"></a>02078 
<a name="l02084"></a>02084 std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh);
<a name="l02085"></a>02085 
<a name="l02086"></a>02086 <span class="comment">//=====================end of non-member functions declarations=================</span>
<a name="l02087"></a>02087 
<a name="l02088"></a>02088 } <span class="comment">// end of namespace subpavings</span>
<a name="l02089"></a>02089 
<a name="l02091"></a>02091 <span class="keyword">namespace </span>std
<a name="l02092"></a>02092 {
<a name="l02093"></a>02093   <span class="keyword">template</span> &lt;&gt;
<a name="l02094"></a>02094   <span class="keywordtype">void</span> swap (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">subpavings::AdaptiveHistogram</a> &amp; a1, 
<a name="l02095"></a>02095       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">subpavings::AdaptiveHistogram</a> &amp; a2);
<a name="l02096"></a>02096 }
<a name="l02097"></a>02097 
<a name="l02098"></a>02098 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogram_8hpp.shtml">adaptivehistogram.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:10 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
