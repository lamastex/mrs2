<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPTesting.hpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPTesting_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MappedSPTesting.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>declarations for testing MappedSP nodes  
<a href="#details">More...</a></p>

<p><a href="MappedSPTesting_8hpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml">subpavings</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><p>The namespace subpavings. </p>
<br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPTesting_8hpp.shtml#a686d2f9fde8869851f8c1806db2a94de">testingInts</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPTesting_8hpp.shtml#af4f8f9d67560d931c3a6cf99a8ca2cb2">testingReals</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPTesting_8hpp.shtml#a2078ccf7a3182fc91c84636c22eafc5e">testingIntervals</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPTesting_8hpp.shtml#a98c77f0cb3cafad5b5b5054aceaee80c">testingRvectors</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPTesting_8hpp.shtml#aef79ccce3ac1806a24d3b4b84156ffdd">mappedAbsDiffTest</a> (const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">subpavings::RealMappedSPnode</a> *const lhs, const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">subpavings::RealMappedSPnode</a> *const rhs)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>declarations for testing MappedSP nodes </p>

<p>Definition in file <a class="el" href="MappedSPTesting_8hpp_source.shtml">MappedSPTesting.hpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="aef79ccce3ac1806a24d3b4b84156ffdd"></a><!-- doxytag: member="MappedSPTesting.hpp::mappedAbsDiffTest" ref="aef79ccce3ac1806a24d3b4b84156ffdd" args="(const subpavings::RealMappedSPnode *const lhs, const subpavings::RealMappedSPnode *const rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting_8hpp.shtml#aef79ccce3ac1806a24d3b4b84156ffdd">mappedAbsDiffTest</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">subpavings::RealMappedSPnode</a> *const&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">subpavings::RealMappedSPnode</a> *const&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00014">14</a> of file <a class="el" href="MappedSPTesting_8cpp_source.shtml">MappedSPTesting.cpp</a>.</p>

<p>Referenced by <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">testingReals()</a>.</p>
<div class="fragment"><pre class="fragment">{
    cout &lt;&lt; <span class="stringliteral">&quot;Trying to find absolute value of difference&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; endl;

    cxsc::real diff = lhs-&gt;absDiff(*rhs);

    cout &lt;&lt; <span class="stringliteral">&quot;difference is &quot;</span> &lt;&lt; diff &lt;&lt; endl;
    cout &lt;&lt; endl;

} <span class="comment">// end of absdiff test</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a2078ccf7a3182fc91c84636c22eafc5e"></a><!-- doxytag: member="MappedSPTesting.hpp::testingIntervals" ref="a2078ccf7a3182fc91c84636c22eafc5e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting_8hpp.shtml#a2078ccf7a3182fc91c84636c22eafc5e">testingIntervals</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00189">189</a> of file <a class="el" href="MappedSPTesting_8cpp_source.shtml">MappedSPTesting.cpp</a>.</p>

<p>References <a class="el" href="mappedspnode_8hpp_source.shtml#l00299">subpavings::MappedSPnode&lt; T &gt;::allocateRanges()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00030">mappedAdditionTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00108">mappedProductTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00143">mappedScalarMultTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00017">printTestTrees()</a>, and <a class="el" href="mappedspnode_8hpp_source.shtml#l00373">subpavings::MappedSPnode&lt; T &gt;::splitToShape()</a>.</p>

<p>Referenced by <a class="el" href="MappedSP_8cpp_source.shtml#l00017">main()</a>.</p>
<div class="fragment"><pre class="fragment">{

    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>

    <span class="keywordflow">try</span> {
        <span class="comment">// testing for intervals</span>

        cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as intervals\n&quot;</span> &lt;&lt; endl;

        <span class="keywordtype">int</span> dims = 1;
        ivector pavingBox(dims);
        interval pavingInterval(-4,4);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;


        nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
        nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>

        <span class="comment">// split the nodes to particular shapes</span>
        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>

        <span class="comment">// allocate ranges for nodeOne</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a>  rangeOne1(interval(1.0,5.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeOne2(interval(1.5,3.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeOne3(interval(2.5,4.0));

        vector&lt; RangeCollectionClass&lt;interval&gt; &gt; rangesOne;
        rangesOne.push_back(rangeOne1);
        rangesOne.push_back(rangeOne2);
        rangesOne.push_back(rangeOne3);

        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);


        <span class="comment">// allocate ranges for nodeTwo</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo1(interval(1.0,6.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo2(interval(2.0,5.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo3(interval(2.5,3.5));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo4(interval(3.0,4.5));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo5(interval(1.5,5.5));

        vector&lt; RangeCollectionClass&lt;interval&gt; &gt; rangesTwo;
        rangesTwo.push_back(rangeTwo1);
        rangesTwo.push_back(rangeTwo2);
        rangesTwo.push_back(rangeTwo3);
        rangesTwo.push_back(rangeTwo4);
        rangesTwo.push_back(rangeTwo5);

        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);

        interval multiplier(1.0,4.0); <span class="comment">// supply a multiplier of the right type</span>

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);

        <span class="keyword">delete</span> nodeOne;
        <span class="keyword">delete</span> nodeTwo;
        nodeOne = NULL; nodeTwo = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e){
        <span class="keywordflow">if</span> (NULL == nodeOne) {
            <span class="keyword">delete</span> nodeOne;
            nodeOne = NULL;}
        <span class="keywordflow">if</span> (NULL == nodeTwo) {
            <span class="keyword">delete</span> nodeTwo;
            nodeTwo = NULL;}
        <span class="keywordflow">throw</span>;
    }


} <span class="comment">// end of test for intervals</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a686d2f9fde8869851f8c1806db2a94de"></a><!-- doxytag: member="MappedSPTesting.hpp::testingInts" ref="a686d2f9fde8869851f8c1806db2a94de" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting_8hpp.shtml#a686d2f9fde8869851f8c1806db2a94de">testingInts</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00028">28</a> of file <a class="el" href="MappedSPTesting_8cpp_source.shtml">MappedSPTesting.cpp</a>.</p>

<p>References <a class="el" href="mappedspnode_8hpp_source.shtml#l00299">subpavings::MappedSPnode&lt; T &gt;::allocateRanges()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00030">mappedAdditionTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00108">mappedProductTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00143">mappedScalarMultTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00017">printTestTrees()</a>, and <a class="el" href="mappedspnode_8hpp_source.shtml#l00373">subpavings::MappedSPnode&lt; T &gt;::splitToShape()</a>.</p>

<p>Referenced by <a class="el" href="MappedSP_8cpp_source.shtml#l00017">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>

    <span class="keywordflow">try</span> {
        <span class="comment">// testing for ints</span>

        cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as ints\n&quot;</span> &lt;&lt; endl;

        <span class="keywordtype">int</span> dims = 1;
        ivector pavingBox(dims);
        interval pavingInterval(-4,4);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;


        nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
        nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>

        <span class="comment">// split the nodes to particular shapes</span>
        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>

        <span class="comment">// allocate ranges for nodeOne</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne1(4);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne2(1);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne3(3);

        vector&lt; RangeCollectionClass&lt;int&gt; &gt; rangesOne;
        rangesOne.push_back(rangeOne1);
        rangesOne.push_back(rangeOne2);
        rangesOne.push_back(rangeOne3);

        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);


        <span class="comment">// allocate ranges for nodeTwo</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo1(5);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo2(3);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo3(1);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo4(2);
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo5(4);

        vector&lt; RangeCollectionClass&lt;int&gt; &gt; rangesTwo;
        rangesTwo.push_back(rangeTwo1);
        rangesTwo.push_back(rangeTwo2);
        rangesTwo.push_back(rangeTwo3);
        rangesTwo.push_back(rangeTwo4);
        rangesTwo.push_back(rangeTwo5);

        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);

        <span class="keywordtype">int</span> multiplier = 4; <span class="comment">// supply a multiplier of the right type</span>

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);

        <span class="keyword">delete</span> nodeOne;
        <span class="keyword">delete</span> nodeTwo;
        nodeOne = NULL; nodeTwo = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordflow">if</span> (NULL == nodeOne) {
            <span class="keyword">delete</span> nodeOne;
            nodeOne = NULL;}
        <span class="keywordflow">if</span> (NULL == nodeTwo) {
            <span class="keyword">delete</span> nodeTwo;
            nodeTwo = NULL;}
        <span class="keywordflow">throw</span>;
    }



} <span class="comment">// end of test for ints</span>
</pre></div>
</div>
</div>
<a class="anchor" id="af4f8f9d67560d931c3a6cf99a8ca2cb2"></a><!-- doxytag: member="MappedSPTesting.hpp::testingReals" ref="af4f8f9d67560d931c3a6cf99a8ca2cb2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting_8hpp.shtml#af4f8f9d67560d931c3a6cf99a8ca2cb2">testingReals</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">108</a> of file <a class="el" href="MappedSPTesting_8cpp_source.shtml">MappedSPTesting.cpp</a>.</p>

<p>References <a class="el" href="mappedspnode_8hpp_source.shtml#l00299">subpavings::MappedSPnode&lt; T &gt;::allocateRanges()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00014">mappedAbsDiffTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00030">mappedAdditionTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00108">mappedProductTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00143">mappedScalarMultTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00017">printTestTrees()</a>, and <a class="el" href="mappedspnode_8hpp_source.shtml#l00373">subpavings::MappedSPnode&lt; T &gt;::splitToShape()</a>.</p>

<p>Referenced by <a class="el" href="MappedSP_8cpp_source.shtml#l00017">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodeOne; <span class="comment">// make a RealMappedSPnode object</span>
    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>

    <span class="keywordflow">try</span> {

        <span class="comment">// testing for reals</span>

        cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as csxc::reals\n&quot;</span> &lt;&lt; endl;

        <span class="keywordtype">int</span> dims = 1;
        ivector pavingBox(dims);
        interval pavingInterval(-4,4);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;


        nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
        nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>

        <span class="comment">// split the nodes to particular shapes</span>
        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>

        <span class="comment">// allocate ranges for nodeOne</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne1(real(4.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne2(real(1.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne3(real(3.0));

        vector&lt; RangeCollectionClass&lt;real&gt; &gt; rangesOne;
        rangesOne.push_back(rangeOne1);
        rangesOne.push_back(rangeOne2);
        rangesOne.push_back(rangeOne3);

        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);


        <span class="comment">// allocate ranges for nodeTwo</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo1(real(5.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo2(real(3.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo3(real(1.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo4(real(2.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo5(real(4.0));

        vector&lt; RangeCollectionClass&lt;real&gt; &gt; rangesTwo;
        rangesTwo.push_back(rangeTwo1);
        rangesTwo.push_back(rangeTwo2);
        rangesTwo.push_back(rangeTwo3);
        rangesTwo.push_back(rangeTwo4);
        rangesTwo.push_back(rangeTwo5);

        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
        <a class="code" href="MappedSPTesting_8cpp.shtml#af217d9f0e1cfa7845c6515c418acc7a2">mappedAbsDiffTest</a>(nodeOne, nodeTwo);
        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);

        real multiplier(4.0); <span class="comment">// supply a multiplier of the right type</span>

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);

        <span class="keyword">delete</span> nodeOne;
        <span class="keyword">delete</span> nodeTwo;
        nodeOne = NULL; nodeTwo = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordflow">if</span> (NULL == nodeOne) {
            <span class="keyword">delete</span> nodeOne;
            nodeOne = NULL;}
        <span class="keywordflow">if</span> (NULL == nodeTwo) {
            <span class="keyword">delete</span> nodeTwo;
            nodeTwo = NULL;}
        <span class="keywordflow">throw</span>;
    }


} <span class="comment">// end of test for ints</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a98c77f0cb3cafad5b5b5054aceaee80c"></a><!-- doxytag: member="MappedSPTesting.hpp::testingRvectors" ref="a98c77f0cb3cafad5b5b5054aceaee80c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting_8hpp.shtml#a98c77f0cb3cafad5b5b5054aceaee80c">testingRvectors</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00277">277</a> of file <a class="el" href="MappedSPTesting_8cpp_source.shtml">MappedSPTesting.cpp</a>.</p>

<p>References <a class="el" href="mappedspnode_8hpp_source.shtml#l00299">subpavings::MappedSPnode&lt; T &gt;::allocateRanges()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00268">make2Drvector()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00030">mappedAdditionTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00108">mappedProductTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00143">mappedScalarMultTest()</a>, <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00017">printTestTrees()</a>, and <a class="el" href="mappedspnode_8hpp_source.shtml#l00373">subpavings::MappedSPnode&lt; T &gt;::splitToShape()</a>.</p>

<p>Referenced by <a class="el" href="MappedSP_8cpp_source.shtml#l00017">main()</a>.</p>
<div class="fragment"><pre class="fragment">{

    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>

    <span class="keywordflow">try</span> {

        <span class="comment">// testing for rvectors</span>

        cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as rvectors\n&quot;</span> &lt;&lt; endl;

        <span class="keywordtype">int</span> dims = 2;
        ivector pavingBox(dims);
        interval pavingInterval(-4,4);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;


        nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
        nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>

        <span class="comment">// split the nodes to particular shapes</span>
        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>

        <span class="comment">// allocate ranges for nodeOne</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a>  rangeOne1(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,5.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeOne2(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.5,3.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeOne3(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.5,4.0));

        vector&lt; RangeCollectionClass&lt;rvector&gt; &gt; rangesOne;
        rangesOne.push_back(rangeOne1);
        rangesOne.push_back(rangeOne2);
        rangesOne.push_back(rangeOne3);

        nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);


        <span class="comment">// allocate ranges for nodeTwo</span>
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo1(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,6.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo2(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.0,5.0));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo3(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.5,3.5));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo4(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(3.0,4.5));
        <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo5(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.5,5.5));

        vector&lt; RangeCollectionClass&lt;rvector&gt; &gt; rangesTwo;
        rangesTwo.push_back(rangeTwo1);
        rangesTwo.push_back(rangeTwo2);
        rangesTwo.push_back(rangeTwo3);
        rangesTwo.push_back(rangeTwo4);
        rangesTwo.push_back(rangeTwo5);

        nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);

        rvector multiplier = <a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,4.0); <span class="comment">// supply a multiplier of the right type</span>

        <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);

        <span class="keyword">delete</span> nodeOne;
        <span class="keyword">delete</span> nodeTwo;
        nodeOne = NULL; nodeTwo = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordflow">if</span> (NULL == nodeOne) {
            <span class="keyword">delete</span> nodeOne;
            nodeOne = NULL;}
        <span class="keywordflow">if</span> (NULL == nodeTwo) {
            <span class="keyword">delete</span> nodeTwo;
            nodeTwo = NULL;}
        <span class="keywordflow">throw</span>;
    }


} <span class="comment">// end of test for intervals</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPTesting_8hpp.shtml">MappedSPTesting.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
