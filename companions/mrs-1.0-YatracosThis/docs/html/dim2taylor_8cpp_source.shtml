<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: dim2taylor.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('dim2taylor_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">dim2taylor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="dim2taylor_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">**  Copyright (C) 1999-2006 F. Blomquist, M. Braeuer, M. Grimmer,</span>
<a name="l00003"></a>00003 <span class="comment">**                          W. Hofschuster, W. Kraemer</span>
<a name="l00004"></a>00004 <span class="comment">**                          Wiss. Rechnen/Softwaretechnologie</span>
<a name="l00005"></a>00005 <span class="comment">**                          Universitaet Wuppertal, Germany   </span>
<a name="l00006"></a>00006 <span class="comment">**</span>
<a name="l00007"></a>00007 <span class="comment">**  This library is free software; you can redistribute it and/or</span>
<a name="l00008"></a>00008 <span class="comment">**  modify it under the terms of the GNU Library General Public</span>
<a name="l00009"></a>00009 <span class="comment">**  License as published by the Free Software Foundation; either</span>
<a name="l00010"></a>00010 <span class="comment">**  version 2 of the License, or (at your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">**</span>
<a name="l00012"></a>00012 <span class="comment">**  This library is distributed in the hope that it will be useful,</span>
<a name="l00013"></a>00013 <span class="comment">**  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">**  Library General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">**</span>
<a name="l00017"></a>00017 <span class="comment">**  You should have received a copy of the GNU Library General Public</span>
<a name="l00018"></a>00018 <span class="comment">**  License along with this library; if not, write to the Free</span>
<a name="l00019"></a>00019 <span class="comment">**  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00023"></a>00023 <span class="comment">//     Updated by F. Blomquist, M. Grimmer</span>
<a name="l00024"></a>00024 <span class="comment">//     Extended version 05.03.2006 by M. Grimmer</span>
<a name="l00026"></a>00026 <span class="comment"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="dim2taylor_8hpp.shtml">dim2taylor.hpp</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">using namespace </span>std;
<a name="l00030"></a>00030 <span class="keyword">using namespace </span>cxsc;
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// class dim2taylor: 2-dim. Taylor arithmetic </span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="namespacetaylor.shtml">00039</a> <span class="keyword">namespace </span>taylor{
<a name="l00040"></a>00040 <span class="comment">// Constructors:</span>
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">00042</a> dim2taylor::dim2taylor()
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044  p=0;
<a name="l00045"></a>00045  dat=<span class="keyword">new</span> ivector[p+1];
<a name="l00046"></a>00046  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p; i++) Resize(dat[i], 0, p-i);
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">//-----------------------------------------------------------------------</span>
<a name="l00050"></a>00050 
<a name="l00051"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#ad7ee9b4029a65ec750e8be8f2a4241d2">00051</a> dim2taylor::dim2taylor(<span class="keywordtype">int</span> order)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053  p=order;
<a name="l00054"></a>00054  dat=<span class="keyword">new</span> ivector[p+1];
<a name="l00055"></a>00055  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p; i++) Resize(dat[i], 0, p-i);
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00059"></a>00059 
<a name="l00060"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#a95930d83a52a47f2547591fce0283c16">00060</a> dim2taylor::dim2taylor(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062  p=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00063"></a>00063  dat=<span class="keyword">new</span> ivector[p+1];
<a name="l00064"></a>00064  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p ;i++) dat[i]=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i];
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#a910e9d2b6f8df7e08c6993039475b8b3">00068</a> dim2taylor::~dim2taylor()
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070  <span class="keyword">delete</span>[] dat;
<a name="l00071"></a>00071  dat=NULL;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00075"></a>00075 <span class="comment">// Assignment operator:</span>
<a name="l00076"></a>00076 
<a name="l00077"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#aadd57620043591d41cd62f6b28299d8f">00077</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; dim2taylor::operator=(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079  <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;s)
<a name="l00080"></a>00080  {
<a name="l00081"></a>00081   <span class="keyword">delete</span>[] dat;
<a name="l00082"></a>00082   dat=NULL;
<a name="l00083"></a>00083   p=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00084"></a>00084   dat=<span class="keyword">new</span> ivector[p+1];
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p ; i++) dat[i]=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i]; 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088  }
<a name="l00089"></a>00089  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#ab8e423651b66d8d139153d6cc33efbd7">00094</a> ivector&amp; dim2taylor::operator[](<span class="keywordtype">int</span> n)<span class="keyword"> const</span>
<a name="l00095"></a>00095 <span class="keyword"></span>{
<a name="l00096"></a>00096     <span class="keywordflow">return</span> dat[n];
<a name="l00097"></a>00097 } 
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00100"></a>00100   
<a name="l00101"></a><a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">00101</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(<span class="keywordtype">int</span> order, <span class="keywordtype">int</span> nr, <span class="keyword">const</span> interval&amp; value)
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103 
<a name="l00104"></a>00104  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t(order);
<a name="l00105"></a>00105 
<a name="l00106"></a>00106  <span class="keywordflow">if</span>( (nr&lt;1) &amp;&amp; (nr&gt;2) ) std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor::init_var&quot;</span> 
<a name="l00107"></a>00107                                   &lt;&lt; std::endl;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109  t[0][0]=value;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111  <span class="keywordflow">if</span>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l00112"></a>00112   {
<a name="l00113"></a>00113    <span class="keywordflow">if</span>(nr==1) t[1][0]=interval(1.0);
<a name="l00114"></a>00114    <span class="keywordflow">else</span> t[1][0]=interval(0.0);
<a name="l00115"></a>00115 
<a name="l00116"></a>00116    <span class="keywordflow">if</span>(nr==2) t[0][1]=interval(1.0);
<a name="l00117"></a>00117    <span class="keywordflow">else</span> t[0][1]=interval(0.0);
<a name="l00118"></a>00118    
<a name="l00119"></a>00119    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) {t[0][i]=interval(0.0);}   <span class="comment">// Rest 0. line</span>
<a name="l00120"></a>00120    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-1; i++) {t[1][i]=interval(0.0);} <span class="comment">// Rest 1. line  </span>
<a name="l00121"></a>00121 
<a name="l00122"></a>00122    <span class="comment">// remaining elements</span>
<a name="l00123"></a>00123    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=2; j&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00124"></a>00124      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) t[j][i]=interval(0.0);       
<a name="l00125"></a>00125   }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127  <span class="keywordflow">return</span> t;
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">00132</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(<span class="keywordtype">int</span> order, <span class="keyword">const</span> interval&amp; value)
<a name="l00133"></a>00133 {
<a name="l00134"></a>00134 
<a name="l00135"></a>00135  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t(order);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137  <span class="keywordflow">if</span>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l00138"></a>00138   {
<a name="l00139"></a>00139    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00140"></a>00140      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) t[j][i]=interval(0.0);       
<a name="l00141"></a>00141   }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143  t[0][0]=value;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145  <span class="keywordflow">return</span> t;
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00149"></a>00149 
<a name="l00150"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#a36fc3e017a76b47429978bf04580809c">00150</a> <span class="keywordtype">void</span> dim2taylor::print_dim2taylor() <span class="comment">// debug</span>
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=p ; j++) 
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p-j ; i++) std::cout &lt;&lt; dat[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00155"></a>00155   std::cout &lt;&lt; std::endl;
<a name="l00156"></a>00156     }
<a name="l00157"></a>00157     std::cout &lt;&lt; std::endl;
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00161"></a>00161 
<a name="l00162"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#a9ab021c4d972c15bf8785d54cb827f09">00162</a> <span class="keywordtype">void</span> dim2taylor::print_dim2taylor(std::ostream&amp; os) 
<a name="l00163"></a>00163                                  <span class="comment">// overloaded for ostream parameter,</span>
<a name="l00164"></a>00164                                  <span class="comment">// mg2005-08/2005-11</span>
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=p ; j++) 
<a name="l00167"></a>00167   {
<a name="l00168"></a>00168    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p-j ; i++) std::cout &lt;&lt; dat[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00169"></a>00169    os &lt;&lt; std::endl;
<a name="l00170"></a>00170   }
<a name="l00171"></a>00171  os &lt;&lt; std::endl;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00175"></a>00175 
<a name="l00176"></a><a class="code" href="namespacetaylor.shtml#a23cd9841df525cfac085fbeb62bf52a9">00176</a> std::ostream&amp; <a class="code" href="adaptivehistogram_8cpp.shtml#ae2f172a2081430943222aff00bd4d1e8" title="Output the HistDescription object.">operator&lt;&lt; </a>(std::ostream&amp; os, <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>)
<a name="l00177"></a>00177                                  <span class="comment">// added, mg2005-08/2005-11</span>
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179  os &lt;&lt;<span class="stringliteral">&quot;[dim2taylor object, order &quot;</span> &lt;&lt; d2t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
<a name="l00180"></a>00180  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=d2t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00181"></a>00181   {
<a name="l00182"></a>00182    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=d2t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) std::cout &lt;&lt; d2t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00183"></a>00183    os &lt;&lt; std::endl;
<a name="l00184"></a>00184   }
<a name="l00185"></a>00185  os &lt;&lt; std::endl;
<a name="l00186"></a>00186  <span class="keywordflow">return</span> os;
<a name="l00187"></a>00187 }                                 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="comment">// Overloading of the elementary operators </span>
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00195"></a>00195 
<a name="l00196"></a><a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">00196</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198  <span class="keywordtype">int</span> order=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00199"></a>00199  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(order);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00202"></a>00202   {
<a name="l00203"></a>00203    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) erg[j][i]=-s[j][i];
<a name="l00204"></a>00204   }
<a name="l00205"></a>00205  
<a name="l00206"></a>00206  <span class="keywordflow">return</span> erg;
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00210"></a>00210 
<a name="l00211"></a><a class="code" href="namespacetaylor.shtml#a729ed4a1540f3e481333c864233cd8ad">00211</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t) 
<a name="l00212"></a>00212 {
<a name="l00213"></a>00213  <span class="keywordtype">int</span> order1=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00214"></a>00214  <span class="keywordtype">int</span> order2=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216  <span class="keywordflow">if</span>(order1 != order2)
<a name="l00217"></a>00217    {
<a name="l00218"></a>00218      std::cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator- : Operands with different orders&quot;</span>;
<a name="l00219"></a>00219      std::cerr &lt;&lt; std::endl;
<a name="l00220"></a>00220      exit(1);
<a name="l00221"></a>00221    }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(order1);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00226"></a>00226   {
<a name="l00227"></a>00227    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) erg[j][i]=s[j][i]-t[j][i];
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229  
<a name="l00230"></a>00230  <span class="keywordflow">return</span> erg;
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00234"></a>00234 
<a name="l00235"></a><a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">00235</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00236"></a>00236 {
<a name="l00237"></a>00237 <span class="keywordtype">int</span> order1=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00238"></a>00238 <span class="keywordtype">int</span> order2=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240  <span class="keywordflow">if</span>(order1 != order2)
<a name="l00241"></a>00241    {
<a name="l00242"></a>00242      cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator+ : Operands with different orders&quot;</span>;
<a name="l00243"></a>00243      cerr &lt;&lt; endl;
<a name="l00244"></a>00244      exit(1);
<a name="l00245"></a>00245    }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(order1);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
<a name="l00250"></a>00250   {
<a name="l00251"></a>00251    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) erg[j][i]=s[j][i]+t[j][i];
<a name="l00252"></a>00252   }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254  <span class="keywordflow">return</span> erg;
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00258"></a>00258 
<a name="l00259"></a><a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">00259</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261  <span class="keywordtype">int</span> order1=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00262"></a>00262  <span class="keywordtype">int</span> order2=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00263"></a>00263 
<a name="l00264"></a>00264  <span class="keywordflow">if</span>(order1 != order2)
<a name="l00265"></a>00265    {
<a name="l00266"></a>00266      cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator* : Operands with different orders&quot;</span>;
<a name="l00267"></a>00267      cerr &lt;&lt; endl;
<a name="l00268"></a>00268      exit(1);
<a name="l00269"></a>00269    }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(order1);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273  idotprecision sum_idot;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++)
<a name="l00276"></a>00276   {
<a name="l00277"></a>00277     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l00278"></a>00278      {
<a name="l00279"></a>00279       sum_idot=interval(0.0);
<a name="l00280"></a>00280 
<a name="l00281"></a>00281       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// calculating erg(i,k-i)</span>
<a name="l00282"></a>00282   {
<a name="l00283"></a>00283    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l00284"></a>00284     {
<a name="l00285"></a>00285       accumulate(sum_idot, s[l][m], t[i-l][k-i-m]);
<a name="l00286"></a>00286     } 
<a name="l00287"></a>00287   }  
<a name="l00288"></a>00288 
<a name="l00289"></a>00289       rnd(sum_idot, erg[i][k-i]);      
<a name="l00290"></a>00290      }
<a name="l00291"></a>00291   }
<a name="l00292"></a>00292 
<a name="l00293"></a>00293  <span class="keywordflow">return</span> erg;
<a name="l00294"></a>00294 }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00297"></a>00297 
<a name="l00298"></a><a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">00298</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00299"></a>00299 {
<a name="l00300"></a>00300  <span class="keywordtype">int</span> order1=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00301"></a>00301  <span class="keywordtype">int</span> order2=t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303  <span class="keywordflow">if</span>(order1 != order2)
<a name="l00304"></a>00304    {
<a name="l00305"></a>00305      cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : Operands with different orders&quot;</span>;
<a name="l00306"></a>00306      cerr &lt;&lt; endl;
<a name="l00307"></a>00307      exit(1);
<a name="l00308"></a>00308    }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(order1);
<a name="l00311"></a>00311 
<a name="l00312"></a>00312  idotprecision sum_idot;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314  interval h, sum;
<a name="l00315"></a>00315 
<a name="l00316"></a>00316  <span class="keywordflow">if</span>(0.0 &lt;= t[0][0]) 
<a name="l00317"></a>00317   {
<a name="l00318"></a>00318     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : 0 in denominator&quot;</span> &lt;&lt; endl;
<a name="l00319"></a>00319     exit(1);
<a name="l00320"></a>00320   }
<a name="l00321"></a>00321  h=interval(1.0)/t[0][0];
<a name="l00322"></a>00322  
<a name="l00323"></a>00323 
<a name="l00324"></a>00324  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++) <span class="comment">// calculating erg(i,k-i)</span>
<a name="l00325"></a>00325   {
<a name="l00326"></a>00326     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l00327"></a>00327      {
<a name="l00328"></a>00328       sum_idot=interval(0.0);
<a name="l00329"></a>00329 
<a name="l00330"></a>00330       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// Without Coeff. (l,m)=(0,0)</span>
<a name="l00331"></a>00331   {
<a name="l00332"></a>00332    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k-i; m++) <span class="comment">// m &gt;= 1</span>
<a name="l00333"></a>00333     {
<a name="l00334"></a>00334       accumulate(sum_idot, t[l][m], erg[i-l][k-i-m]);
<a name="l00335"></a>00335     }  <span class="comment">//for m</span>
<a name="l00336"></a>00336   }    <span class="comment">//for l</span>
<a name="l00337"></a>00337 
<a name="l00338"></a>00338       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i; l++) <span class="comment">//  m=0, l!=0</span>
<a name="l00339"></a>00339   {
<a name="l00340"></a>00340    accumulate(sum_idot, t[l][0], erg[i-l][k-i]);
<a name="l00341"></a>00341   }  <span class="comment">// for l</span>
<a name="l00342"></a>00342 
<a name="l00343"></a>00343       rnd(sum_idot, sum);  
<a name="l00344"></a>00344       erg[i][k-i]=h*(s[i][k-i]-sum);
<a name="l00345"></a>00345      }
<a name="l00346"></a>00346   }
<a name="l00347"></a>00347  <span class="keywordflow">return</span> erg;
<a name="l00348"></a>00348 }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00351"></a>00351 
<a name="l00352"></a><a class="code" href="namespacetaylor.shtml#a6d905ffff19d4d823f32782893096d4a">00352</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> interval&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00353"></a>00353 {
<a name="l00354"></a>00354  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00355"></a>00355  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, s);
<a name="l00356"></a>00356 
<a name="l00357"></a>00357  erg=s_ty-t;
<a name="l00358"></a>00358  <span class="keywordflow">return</span> erg;
<a name="l00359"></a>00359 }
<a name="l00360"></a>00360 
<a name="l00361"></a><a class="code" href="namespacetaylor.shtml#a2a26f996b068d51e9ee8d146d0dbcf19">00361</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> interval&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00362"></a>00362 {
<a name="l00363"></a>00363  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00364"></a>00364  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, s);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366  erg = s_ty + t;
<a name="l00367"></a>00367  <span class="keywordflow">return</span> erg;
<a name="l00368"></a>00368 }
<a name="l00369"></a>00369 
<a name="l00370"></a><a class="code" href="namespacetaylor.shtml#a773f854b7253664683fcdc3c2c31279a">00370</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> interval&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00371"></a>00371 {
<a name="l00372"></a>00372  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00373"></a>00373  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, s);
<a name="l00374"></a>00374 
<a name="l00375"></a>00375  erg=s_ty*t;
<a name="l00376"></a>00376  <span class="keywordflow">return</span> erg;
<a name="l00377"></a>00377 }
<a name="l00378"></a>00378 
<a name="l00379"></a><a class="code" href="namespacetaylor.shtml#ac0269d08341f74bef9f161ce04311b99">00379</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> interval&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00380"></a>00380 {
<a name="l00381"></a>00381  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00382"></a>00382  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, s);
<a name="l00383"></a>00383 
<a name="l00384"></a>00384  erg=s_ty/t;
<a name="l00385"></a>00385  <span class="keywordflow">return</span> erg;
<a name="l00386"></a>00386 }
<a name="l00387"></a>00387 
<a name="l00388"></a>00388 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00389"></a>00389 
<a name="l00390"></a><a class="code" href="namespacetaylor.shtml#a27893615a38a300f3a98f155f97554ab">00390</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> interval&amp; t)
<a name="l00391"></a>00391 {
<a name="l00392"></a>00392  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00393"></a>00393  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, t);
<a name="l00394"></a>00394 
<a name="l00395"></a>00395  erg=s-t_ty;
<a name="l00396"></a>00396  <span class="keywordflow">return</span> erg;
<a name="l00397"></a>00397 }
<a name="l00398"></a>00398 
<a name="l00399"></a><a class="code" href="namespacetaylor.shtml#a84b7a1ad831a7d8ff885b7d62c12776c">00399</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> interval&amp; t)
<a name="l00400"></a>00400 {
<a name="l00401"></a>00401  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00402"></a>00402  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, t);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404  erg=s+t_ty;
<a name="l00405"></a>00405  <span class="keywordflow">return</span> erg;
<a name="l00406"></a>00406 }
<a name="l00407"></a>00407 
<a name="l00408"></a><a class="code" href="namespacetaylor.shtml#a4cf47e58467d78b59fb31fe7d4a03ec6">00408</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> interval&amp; t)
<a name="l00409"></a>00409 {
<a name="l00410"></a>00410  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00411"></a>00411  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, t);
<a name="l00412"></a>00412 
<a name="l00413"></a>00413  erg=s*t_ty;
<a name="l00414"></a>00414  <span class="keywordflow">return</span> erg;
<a name="l00415"></a>00415 }
<a name="l00416"></a>00416 
<a name="l00417"></a><a class="code" href="namespacetaylor.shtml#a20f576697e1b2eb2a4247ffe570c4f69">00417</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> interval&amp; t)
<a name="l00418"></a>00418 {
<a name="l00419"></a>00419  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00420"></a>00420  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>, t);
<a name="l00421"></a>00421 
<a name="l00422"></a>00422  erg=s/t_ty;
<a name="l00423"></a>00423  <span class="keywordflow">return</span> erg;
<a name="l00424"></a>00424 }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00427"></a>00427 
<a name="l00428"></a><a class="code" href="namespacetaylor.shtml#ad8414f5a1f2b7470dbac63025f7b60b7">00428</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> real&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00429"></a>00429 {   
<a name="l00430"></a>00430     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00431"></a>00431     interval s_i(s);
<a name="l00432"></a>00432     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);
<a name="l00433"></a>00433     erg = s_ty - t; 
<a name="l00434"></a>00434     <span class="keywordflow">return</span> erg;
<a name="l00435"></a>00435 }
<a name="l00436"></a>00436 
<a name="l00437"></a>00437 <span class="comment">// -------------------------------------------------------</span>
<a name="l00438"></a>00438 
<a name="l00439"></a><a class="code" href="namespacetaylor.shtml#a4cd1e6c0c0f68726e5b5e95dfd562a70">00439</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> real&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00440"></a>00440 {    
<a name="l00441"></a>00441     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00442"></a>00442     interval s_i(s);
<a name="l00443"></a>00443     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);
<a name="l00444"></a>00444     erg = s_ty + t;
<a name="l00445"></a>00445     <span class="keywordflow">return</span> erg;
<a name="l00446"></a>00446 }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 
<a name="l00449"></a><a class="code" href="namespacetaylor.shtml#a778ece51c4eb943bcb8fefc1c98c66f4">00449</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> real&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00450"></a>00450 {   
<a name="l00451"></a>00451     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00452"></a>00452     interval s_i(s);
<a name="l00453"></a>00453     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i); 
<a name="l00454"></a>00454     erg = s_ty * t; 
<a name="l00455"></a>00455     <span class="keywordflow">return</span> erg;
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 
<a name="l00458"></a><a class="code" href="namespacetaylor.shtml#a627c5d5998ccdab6c81f898f33b3a0a3">00458</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> real&amp; s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00459"></a>00459 {   
<a name="l00460"></a>00460     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00461"></a>00461     interval s_i(s);
<a name="l00462"></a>00462     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);  
<a name="l00463"></a>00463     erg = s_ty / t; 
<a name="l00464"></a>00464     <span class="keywordflow">return</span> erg;
<a name="l00465"></a>00465 }
<a name="l00466"></a>00466 
<a name="l00467"></a>00467 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00468"></a>00468 
<a name="l00469"></a><a class="code" href="namespacetaylor.shtml#a583320e2035ee35796b1dc51d126a40e">00469</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> real&amp; t)
<a name="l00470"></a>00470 {   
<a name="l00471"></a>00471     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00472"></a>00472     interval t_i(t);
<a name="l00473"></a>00473     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00474"></a>00474     erg = s - t_ty; 
<a name="l00475"></a>00475  <span class="keywordflow">return</span> erg;
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00478"></a><a class="code" href="namespacetaylor.shtml#a6aba8d7ae778ad5a8def497a81f93492">00478</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> real&amp; t)
<a name="l00479"></a>00479 {   
<a name="l00480"></a>00480     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00481"></a>00481     interval t_i(t);
<a name="l00482"></a>00482     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00483"></a>00483     erg = s + t_ty; 
<a name="l00484"></a>00484     <span class="keywordflow">return</span> erg;
<a name="l00485"></a>00485 }
<a name="l00486"></a>00486 
<a name="l00487"></a><a class="code" href="namespacetaylor.shtml#a3fab97783f44e1f70ee6a7b8ac7be6b9">00487</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> real&amp; t)
<a name="l00488"></a>00488 {   
<a name="l00489"></a>00489     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00490"></a>00490     interval t_i(t);
<a name="l00491"></a>00491     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00492"></a>00492     erg = s * t_ty;
<a name="l00493"></a>00493     <span class="keywordflow">return</span> erg;
<a name="l00494"></a>00494 }
<a name="l00495"></a>00495 
<a name="l00496"></a><a class="code" href="namespacetaylor.shtml#a83601375c928236047d6b8dc3158825c">00496</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> real&amp; t)
<a name="l00497"></a>00497 {   
<a name="l00498"></a>00498     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00499"></a>00499     interval t_i(t);
<a name="l00500"></a>00500     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00501"></a>00501     erg = s / t_ty; 
<a name="l00502"></a>00502     <span class="keywordflow">return</span> erg;
<a name="l00503"></a>00503 }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00506"></a>00506 
<a name="l00507"></a><a class="code" href="namespacetaylor.shtml#a75af8bfdf49bcf4578549a97b6516967">00507</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keywordtype">int</span> s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00508"></a>00508 {   
<a name="l00509"></a>00509     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00510"></a>00510     interval s_i(s);
<a name="l00511"></a>00511     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);
<a name="l00512"></a>00512     erg = s_ty - t; 
<a name="l00513"></a>00513     <span class="keywordflow">return</span> erg;
<a name="l00514"></a>00514 }
<a name="l00515"></a>00515 
<a name="l00516"></a><a class="code" href="namespacetaylor.shtml#a0700323b633a69c7be77f26b66949859">00516</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keywordtype">int</span> s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00517"></a>00517 {    
<a name="l00518"></a>00518     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00519"></a>00519     interval s_i(s);
<a name="l00520"></a>00520     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);
<a name="l00521"></a>00521     erg = s_ty + t;
<a name="l00522"></a>00522     <span class="keywordflow">return</span> erg;
<a name="l00523"></a>00523 }
<a name="l00524"></a>00524 
<a name="l00525"></a>00525 
<a name="l00526"></a><a class="code" href="namespacetaylor.shtml#a8437d42cd673464c45a80ba9550e6940">00526</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keywordtype">int</span> s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00527"></a>00527 {   
<a name="l00528"></a>00528     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00529"></a>00529     interval s_i(s);
<a name="l00530"></a>00530     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i); 
<a name="l00531"></a>00531     erg = s_ty * t; 
<a name="l00532"></a>00532     <span class="keywordflow">return</span> erg;
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a><a class="code" href="namespacetaylor.shtml#a7ad8547d33175b25f92470ef452be7e4">00535</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keywordtype">int</span> s, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; t)
<a name="l00536"></a>00536 {   
<a name="l00537"></a>00537     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00538"></a>00538     interval s_i(s);
<a name="l00539"></a>00539     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,s_i);  
<a name="l00540"></a>00540     erg = s_ty / t; 
<a name="l00541"></a>00541     <span class="keywordflow">return</span> erg;
<a name="l00542"></a>00542 }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00545"></a>00545 
<a name="l00546"></a><a class="code" href="namespacetaylor.shtml#aa5a95b7e47b25250650f42f3aa9d3804">00546</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> t)
<a name="l00547"></a>00547 {   
<a name="l00548"></a>00548     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00549"></a>00549     interval t_i(t);
<a name="l00550"></a>00550     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00551"></a>00551     erg = s - t_ty; 
<a name="l00552"></a>00552  <span class="keywordflow">return</span> erg;
<a name="l00553"></a>00553 }
<a name="l00554"></a>00554 
<a name="l00555"></a><a class="code" href="namespacetaylor.shtml#a59f1aebf6bfff7b2b294cd5d50f11f15">00555</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> t)
<a name="l00556"></a>00556 {   
<a name="l00557"></a>00557     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00558"></a>00558     interval t_i(t);
<a name="l00559"></a>00559     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00560"></a>00560     erg = s + t_ty; 
<a name="l00561"></a>00561     <span class="keywordflow">return</span> erg;
<a name="l00562"></a>00562 }
<a name="l00563"></a>00563 
<a name="l00564"></a><a class="code" href="namespacetaylor.shtml#a7c14e8a638ba74fc191880a4eae70174">00564</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> t)
<a name="l00565"></a>00565 {   
<a name="l00566"></a>00566     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00567"></a>00567     interval t_i(t);
<a name="l00568"></a>00568     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00569"></a>00569     erg = s * t_ty;
<a name="l00570"></a>00570     <span class="keywordflow">return</span> erg;
<a name="l00571"></a>00571 }
<a name="l00572"></a>00572 
<a name="l00573"></a><a class="code" href="namespacetaylor.shtml#afed918a308085255f702c43ce94eb87d">00573</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> t)
<a name="l00574"></a>00574 {   
<a name="l00575"></a>00575     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00576"></a>00576     interval t_i(t);
<a name="l00577"></a>00577     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>,t_i);  
<a name="l00578"></a>00578     erg = s / t_ty; 
<a name="l00579"></a>00579     <span class="keywordflow">return</span> erg;
<a name="l00580"></a>00580 }
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00584"></a>00584 
<a name="l00585"></a>00585 <span class="comment">// Overloading the elementary functions</span>
<a name="l00586"></a>00586 
<a name="l00587"></a>00587 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00588"></a>00588 
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00591"></a>00591 
<a name="l00592"></a><a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">00592</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00593"></a>00593 {
<a name="l00594"></a>00594  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00595"></a>00595  
<a name="l00596"></a>00596  idotprecision sum_idot;
<a name="l00597"></a>00597  interval sum1=interval(0.0);
<a name="l00598"></a>00598  interval sum2=interval(0.0);
<a name="l00599"></a>00599 
<a name="l00600"></a>00600  erg[0][0]=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s[0][0]); <span class="comment">//Koeff. (0,0)</span>
<a name="l00601"></a>00601 
<a name="l00602"></a>00602  <span class="keywordflow">if</span>(erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> &gt; 0)
<a name="l00603"></a>00603   {
<a name="l00604"></a>00604     
<a name="l00605"></a>00605     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++) <span class="comment">// calculating the remaining coefficients</span>
<a name="l00606"></a>00606       {
<a name="l00607"></a>00607   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l00608"></a>00608     {
<a name="l00609"></a>00609       <span class="keywordflow">if</span>(i%2==1) <span class="comment">// i: odd</span>
<a name="l00610"></a>00610         {
<a name="l00611"></a>00611     sum_idot=interval(0.0);
<a name="l00612"></a>00612     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
<a name="l00613"></a>00613       {
<a name="l00614"></a>00614         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l00615"></a>00615           {
<a name="l00616"></a>00616       accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
<a name="l00617"></a>00617           } <span class="comment">//for m</span>
<a name="l00618"></a>00618       }     <span class="comment">//for l</span>
<a name="l00619"></a>00619 
<a name="l00620"></a>00620     rnd(sum_idot, sum1);
<a name="l00621"></a>00621     erg[i][k-i]=interval(2.0)*sum1;     
<a name="l00622"></a>00622         }
<a name="l00623"></a>00623       <span class="keywordflow">else</span> <span class="comment">//i%2==0: i: even </span>
<a name="l00624"></a>00624         {
<a name="l00625"></a>00625     <span class="keywordflow">if</span>( (k-i)%2==1 ) <span class="comment">//k-i: odd</span>
<a name="l00626"></a>00626       {
<a name="l00627"></a>00627         sum_idot=interval(0.0); 
<a name="l00628"></a>00628         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
<a name="l00629"></a>00629           {
<a name="l00630"></a>00630       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l00631"></a>00631         {
<a name="l00632"></a>00632           accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
<a name="l00633"></a>00633         } <span class="comment">//for m</span>
<a name="l00634"></a>00634           }     <span class="comment">//for l</span>
<a name="l00635"></a>00635         rnd(sum_idot, sum1);
<a name="l00636"></a>00636        
<a name="l00637"></a>00637         sum_idot=interval(0.0);
<a name="l00638"></a>00638         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-1)/2; m++)
<a name="l00639"></a>00639           {
<a name="l00640"></a>00640       accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
<a name="l00641"></a>00641           }<span class="comment">//for m</span>
<a name="l00642"></a>00642         rnd(sum_idot, sum2);
<a name="l00643"></a>00643 
<a name="l00644"></a>00644         erg[i][k-i]=interval(2.0)*(sum1+sum2);  
<a name="l00645"></a>00645              
<a name="l00646"></a>00646       }
<a name="l00647"></a>00647     <span class="keywordflow">else</span> <span class="comment">//(k-i)%2==0: k-i even</span>
<a name="l00648"></a>00648       {
<a name="l00649"></a>00649         sum_idot=interval(0.0); 
<a name="l00650"></a>00650         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
<a name="l00651"></a>00651           {
<a name="l00652"></a>00652       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l00653"></a>00653         {
<a name="l00654"></a>00654           accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
<a name="l00655"></a>00655         } <span class="comment">// for m</span>
<a name="l00656"></a>00656           }     <span class="comment">// for l</span>
<a name="l00657"></a>00657         rnd(sum_idot, sum1);
<a name="l00658"></a>00658        
<a name="l00659"></a>00659         sum_idot=interval(0.0);
<a name="l00660"></a>00660         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-2)/2; m++)
<a name="l00661"></a>00661           {
<a name="l00662"></a>00662       accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
<a name="l00663"></a>00663           } <span class="comment">// for m</span>
<a name="l00664"></a>00664         rnd(sum_idot, sum2);
<a name="l00665"></a>00665 
<a name="l00666"></a>00666         erg[i][k-i]=interval(2.0)*(sum1+sum2);
<a name="l00667"></a>00667         erg[i][k-i]=erg[i][k-i]+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s[i/2][(k-i)/2]);   
<a name="l00668"></a>00668       }
<a name="l00669"></a>00669         }
<a name="l00670"></a>00670     } <span class="comment">// for i</span>
<a name="l00671"></a>00671       }     <span class="comment">// for k</span>
<a name="l00672"></a>00672   }
<a name="l00673"></a>00673  <span class="keywordflow">return</span> erg;
<a name="l00674"></a>00674 }
<a name="l00675"></a>00675 
<a name="l00676"></a>00676 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00677"></a>00677 
<a name="l00678"></a><a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">00678</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00679"></a>00679 <span class="comment">// New fast version, Blomquist 17.10.2005;</span>
<a name="l00680"></a>00680 <span class="comment">// In the sum (5.25) of Braeuers thesis by twos summands are equal,</span>
<a name="l00681"></a>00681 <span class="comment">// so the evaluation can be simplified. The first and the last</span>
<a name="l00682"></a>00682 <span class="comment">// summands are equal and must not be added. After the simplification</span>
<a name="l00683"></a>00683 <span class="comment">// only the first summand must not be added, see:</span>
<a name="l00684"></a>00684 <span class="comment">// if (z==1) continue; e.g. skipping the first summand.</span>
<a name="l00685"></a>00685 { 
<a name="l00686"></a>00686  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00687"></a>00687  idotprecision sum_idot;
<a name="l00688"></a>00688  interval sum(0.0);
<a name="l00689"></a>00689 
<a name="l00690"></a>00690  erg[0][0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(s[0][0]);  <span class="comment">// Coeff. (0,0) --&gt; function value</span>
<a name="l00691"></a>00691   
<a name="l00692"></a>00692   <span class="keywordflow">if</span>(erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> &gt; 0)
<a name="l00693"></a>00693   { 
<a name="l00694"></a>00694    <span class="keywordflow">if</span>(0.0 &lt;= erg[0][0])
<a name="l00695"></a>00695       {
<a name="l00696"></a>00696   cout &lt;&lt; <span class="stringliteral">&quot;error here: &quot;</span> &lt;&lt; erg[0][0] &lt;&lt; endl;
<a name="l00697"></a>00697    
<a name="l00698"></a>00698   cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrt: 0 in argument interval&quot;</span>;
<a name="l00699"></a>00699   cerr &lt;&lt; endl;
<a name="l00700"></a>00700   exit(1);
<a name="l00701"></a>00701       }
<a name="l00702"></a>00702       
<a name="l00703"></a>00703     
<a name="l00704"></a>00704     interval h = erg[0][0]; 
<a name="l00705"></a>00705     times2pown(h,1); <span class="comment">// fast multiplication with 2;</span>
<a name="l00706"></a>00706     <span class="keywordtype">int</span> ki,il,z;
<a name="l00707"></a>00707     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++) <span class="comment">// calculating all other coefficients</span>
<a name="l00708"></a>00708     {   
<a name="l00709"></a>00709   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l00710"></a>00710   {   
<a name="l00711"></a>00711       sum_idot=interval(0.0);
<a name="l00712"></a>00712     <span class="comment">// do not sum (l,m)=(0,0) and (l,m)=(i,k-i), see continue assignments</span>
<a name="l00713"></a>00713       ki = k-i;   z = 0; <span class="comment">// z: Numbering the following summands </span>
<a name="l00714"></a>00714       <span class="keywordflow">if</span> (i%2==1) <span class="comment">// i: odd</span>
<a name="l00715"></a>00715       { 
<a name="l00716"></a>00716     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) 
<a name="l00717"></a>00717     {
<a name="l00718"></a>00718         il = i-l;   
<a name="l00719"></a>00719         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
<a name="l00720"></a>00720         {
<a name="l00721"></a>00721       z++; <span class="comment">// Numbering the summands, z = 1,2,3,...</span>
<a name="l00722"></a>00722       <span class="comment">// (l,m) = (0,0) is the first summand (z=1),</span>
<a name="l00723"></a>00723       <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>; <span class="comment">// skipping accumulate(...)</span>
<a name="l00724"></a>00724       accumulate(sum_idot, erg[l][m], erg[il][ki-m]);
<a name="l00725"></a>00725         }
<a name="l00726"></a>00726     }
<a name="l00727"></a>00727     rnd(sum_idot,sum);
<a name="l00728"></a>00728     times2pown(sum,1);
<a name="l00729"></a>00729     erg[i][ki] = (s[i][ki]-sum)/h;
<a name="l00730"></a>00730       }
<a name="l00731"></a>00731       <span class="keywordflow">else</span> <span class="comment">// i: even</span>
<a name="l00732"></a>00732       {
<a name="l00733"></a>00733     <span class="keywordflow">if</span> (ki%2==1) <span class="comment">// ki=k-i: odd</span>
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) 
<a name="l00736"></a>00736         {
<a name="l00737"></a>00737       il = i-l;
<a name="l00738"></a>00738       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
<a name="l00739"></a>00739       {
<a name="l00740"></a>00740           z++;
<a name="l00741"></a>00741           <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
<a name="l00742"></a>00742           accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
<a name="l00743"></a>00743       }
<a name="l00744"></a>00744         }
<a name="l00745"></a>00745         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-1)/2; m++)
<a name="l00746"></a>00746         {
<a name="l00747"></a>00747       z++;
<a name="l00748"></a>00748       <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
<a name="l00749"></a>00749       accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
<a name="l00750"></a>00750         }
<a name="l00751"></a>00751         rnd(sum_idot,sum);
<a name="l00752"></a>00752         times2pown(sum,1);
<a name="l00753"></a>00753         erg[i][ki] = (s[i][ki]-sum)/h;
<a name="l00754"></a>00754     }
<a name="l00755"></a>00755     <span class="keywordflow">else</span> <span class="comment">// ki=k-i: even</span>
<a name="l00756"></a>00756     {
<a name="l00757"></a>00757         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++)
<a name="l00758"></a>00758         {
<a name="l00759"></a>00759       il = i-l;
<a name="l00760"></a>00760       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
<a name="l00761"></a>00761       {
<a name="l00762"></a>00762           z++;
<a name="l00763"></a>00763           <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
<a name="l00764"></a>00764           accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
<a name="l00765"></a>00765       }
<a name="l00766"></a>00766         }
<a name="l00767"></a>00767         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-2)/2; m++)
<a name="l00768"></a>00768         {
<a name="l00769"></a>00769       z++;
<a name="l00770"></a>00770       <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
<a name="l00771"></a>00771       accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
<a name="l00772"></a>00772         }
<a name="l00773"></a>00773         rnd(sum_idot,sum);
<a name="l00774"></a>00774         times2pown(sum,1);
<a name="l00775"></a>00775         sum += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg[i/2][ki/2]);
<a name="l00776"></a>00776         erg[i][ki] = (s[i][ki]-sum)/h;
<a name="l00777"></a>00777     }
<a name="l00778"></a>00778       }
<a name="l00779"></a>00779   } <span class="comment">// for i</span>
<a name="l00780"></a>00780       }   <span class="comment">// for k</span>
<a name="l00781"></a>00781   }
<a name="l00782"></a>00782 
<a name="l00783"></a>00783  <span class="keywordflow">return</span> erg;
<a name="l00784"></a>00784  }
<a name="l00785"></a>00785 
<a name="l00786"></a>00786 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00787"></a>00787 
<a name="l00788"></a><a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">00788</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; x){
<a name="l00789"></a>00789     <span class="comment">// sqrt(1+x^2);</span>
<a name="l00790"></a>00790     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg;
<a name="l00791"></a>00791     <span class="keywordflow">if</span> (Inf(x[0][0])&gt;1) erg = x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x));
<a name="l00792"></a>00792     <span class="keywordflow">else</span> 
<a name="l00793"></a>00793   <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-1)
<a name="l00794"></a>00794       erg = -x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x));
<a name="l00795"></a>00795   <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
<a name="l00796"></a>00796     <span class="keywordflow">return</span> erg; 
<a name="l00797"></a>00797 }
<a name="l00798"></a>00798 
<a name="l00799"></a>00799 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00800"></a>00800 
<a name="l00801"></a><a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">00801</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; x){
<a name="l00802"></a>00802     <span class="comment">// sqrt(x^2-1);</span>
<a name="l00803"></a>00803     <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg;
<a name="l00804"></a>00804     <span class="keywordflow">if</span> (Inf(x[0][0])&gt;4) erg = x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( 1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x) );
<a name="l00805"></a>00805     <span class="keywordflow">else</span> 
<a name="l00806"></a>00806   <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-4)
<a name="l00807"></a>00807       erg = -x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( 1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x) );
<a name="l00808"></a>00808   <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x)-1);
<a name="l00809"></a>00809     <span class="keywordflow">return</span> erg; 
<a name="l00810"></a>00810     }
<a name="l00811"></a>00811 
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00814"></a>00814 
<a name="l00815"></a><a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">00815</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keyword">const</span> interval&amp; alpha)
<a name="l00816"></a>00816 {
<a name="l00817"></a>00817  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00818"></a>00818 
<a name="l00819"></a>00819  idotprecision sum_idot;
<a name="l00820"></a>00820  interval sum1, sum2, h;
<a name="l00821"></a>00821 
<a name="l00822"></a>00822  erg[0][0]=<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(s[0][0], alpha); 
<a name="l00823"></a>00823  
<a name="l00824"></a>00824  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; j++)
<a name="l00825"></a>00825    {
<a name="l00826"></a>00826      sum_idot=interval(0.0);
<a name="l00827"></a>00827      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l00828"></a>00828        {
<a name="l00829"></a>00829    h=alpha*(interval(j)-interval(i))-interval(i);
<a name="l00830"></a>00830    accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
<a name="l00831"></a>00831        }
<a name="l00832"></a>00832      rnd(sum_idot, sum1);
<a name="l00833"></a>00833      erg[0][j]=sum1/interval(j)/s[0][0];
<a name="l00834"></a>00834    }
<a name="l00835"></a>00835 
<a name="l00836"></a>00836  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
<a name="l00837"></a>00837   {
<a name="l00838"></a>00838     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i; k++)
<a name="l00839"></a>00839      {
<a name="l00840"></a>00840       sum_idot=interval(0.0);
<a name="l00841"></a>00841 
<a name="l00842"></a>00842       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
<a name="l00843"></a>00843   {
<a name="l00844"></a>00844    h=alpha*(interval(i)-interval(l))-interval(l);
<a name="l00845"></a>00845 
<a name="l00846"></a>00846    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
<a name="l00847"></a>00847     {
<a name="l00848"></a>00848       accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
<a name="l00849"></a>00849     }
<a name="l00850"></a>00850   }
<a name="l00851"></a>00851       rnd(sum_idot, sum1); 
<a name="l00852"></a>00852         
<a name="l00853"></a>00853       sum_idot=interval(0.0);
<a name="l00854"></a>00854       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
<a name="l00855"></a>00855   {
<a name="l00856"></a>00856    accumulate(sum_idot, s[0][m], erg[i][k-m]);
<a name="l00857"></a>00857   }
<a name="l00858"></a>00858       rnd(sum_idot, sum2); 
<a name="l00859"></a>00859 
<a name="l00860"></a>00860       erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
<a name="l00861"></a>00861      }
<a name="l00862"></a>00862   } 
<a name="l00863"></a>00863  
<a name="l00864"></a>00864  <span class="keywordflow">return</span> erg;
<a name="l00865"></a>00865 }
<a name="l00866"></a>00866 
<a name="l00867"></a>00867 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00868"></a>00868 
<a name="l00869"></a><a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">00869</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> n)
<a name="l00870"></a>00870 {
<a name="l00871"></a>00871  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00872"></a>00872 
<a name="l00873"></a>00873  idotprecision sum_idot;
<a name="l00874"></a>00874  interval sum1, sum2, h;
<a name="l00875"></a>00875 
<a name="l00876"></a>00876  erg[0][0]=<a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(s[0][0], n); 
<a name="l00877"></a>00877  
<a name="l00878"></a>00878  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; j++)
<a name="l00879"></a>00879    {
<a name="l00880"></a>00880      sum_idot=interval(0.0);
<a name="l00881"></a>00881      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
<a name="l00882"></a>00882        {
<a name="l00883"></a>00883    h=interval(n)*(interval(j)-interval(i))-interval(i);
<a name="l00884"></a>00884    accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
<a name="l00885"></a>00885        }
<a name="l00886"></a>00886      rnd(sum_idot, sum1);
<a name="l00887"></a>00887      erg[0][j]=sum1/interval(j)/s[0][0];
<a name="l00888"></a>00888    }
<a name="l00889"></a>00889 
<a name="l00890"></a>00890  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
<a name="l00891"></a>00891   {
<a name="l00892"></a>00892     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i; k++)
<a name="l00893"></a>00893      {
<a name="l00894"></a>00894       sum_idot=interval(0.0);
<a name="l00895"></a>00895 
<a name="l00896"></a>00896       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
<a name="l00897"></a>00897   {
<a name="l00898"></a>00898    h=interval(n)*(interval(i)-interval(l))-interval(l);
<a name="l00899"></a>00899 
<a name="l00900"></a>00900    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
<a name="l00901"></a>00901     {
<a name="l00902"></a>00902       accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
<a name="l00903"></a>00903     }
<a name="l00904"></a>00904   }
<a name="l00905"></a>00905       rnd(sum_idot, sum1); 
<a name="l00906"></a>00906         
<a name="l00907"></a>00907       sum_idot=interval(0.0);
<a name="l00908"></a>00908       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
<a name="l00909"></a>00909   {
<a name="l00910"></a>00910    accumulate(sum_idot, s[0][m], erg[i][k-m]);
<a name="l00911"></a>00911   }
<a name="l00912"></a>00912       rnd(sum_idot, sum2); 
<a name="l00913"></a>00913 
<a name="l00914"></a>00914       erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
<a name="l00915"></a>00915      }
<a name="l00916"></a>00916   } 
<a name="l00917"></a>00917  
<a name="l00918"></a>00918  <span class="keywordflow">return</span> erg;
<a name="l00919"></a>00919 }
<a name="l00920"></a>00920 
<a name="l00921"></a>00921 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00922"></a>00922 
<a name="l00923"></a><a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">00923</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00924"></a>00924 {
<a name="l00925"></a>00925  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00926"></a>00926 
<a name="l00927"></a>00927  idotprecision sum_idot;
<a name="l00928"></a>00928  interval sum;
<a name="l00929"></a>00929 
<a name="l00930"></a>00930  erg[0][0]=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(s[0][0]);
<a name="l00931"></a>00931 
<a name="l00932"></a>00932  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l00933"></a>00933    {
<a name="l00934"></a>00934      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++)
<a name="l00935"></a>00935        {
<a name="l00936"></a>00936    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l00937"></a>00937      {
<a name="l00938"></a>00938        sum_idot=interval(0.0);
<a name="l00939"></a>00939 
<a name="l00940"></a>00940        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
<a name="l00941"></a>00941          {
<a name="l00942"></a>00942      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l00943"></a>00943        { 
<a name="l00944"></a>00944          interval h=interval(k)-interval(l)-interval(m);
<a name="l00945"></a>00945          accumulate(sum_idot, h*erg[l][m], s[i-l][k-i-m]);
<a name="l00946"></a>00946        } <span class="comment">// for m</span>
<a name="l00947"></a>00947          }     <span class="comment">// for l</span>
<a name="l00948"></a>00948 
<a name="l00949"></a>00949        rnd(sum_idot, sum);  
<a name="l00950"></a>00950        erg[i][k-i]=sum/interval(k);
<a name="l00951"></a>00951      }
<a name="l00952"></a>00952        }
<a name="l00953"></a>00953    }
<a name="l00954"></a>00954 
<a name="l00955"></a>00955  <span class="keywordflow">return</span> erg;
<a name="l00956"></a>00956 }
<a name="l00957"></a>00957 
<a name="l00958"></a>00958 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00959"></a>00959 
<a name="l00960"></a><a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">00960</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00961"></a>00961 {
<a name="l00962"></a>00962  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00963"></a>00963 
<a name="l00964"></a>00964  <span class="keywordflow">if</span>(0&lt;=s[0][0])
<a name="l00965"></a>00965    {
<a name="l00966"></a>00966      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor ln : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l00967"></a>00967      exit(1);
<a name="l00968"></a>00968    }
<a name="l00969"></a>00969  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(f, s, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>);
<a name="l00970"></a>00970  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l00971"></a>00971 }
<a name="l00972"></a>00972 
<a name="l00973"></a>00973 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00974"></a>00974 
<a name="l00975"></a><a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">00975</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00976"></a>00976 {
<a name="l00977"></a>00977  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00978"></a>00978  g = interval(1) + s;
<a name="l00979"></a>00979 
<a name="l00980"></a>00980  <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
<a name="l00981"></a>00981    {
<a name="l00982"></a>00982      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor lnp1 : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l00983"></a>00983      exit(1);
<a name="l00984"></a>00984    }
<a name="l00985"></a>00985  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>);
<a name="l00986"></a>00986  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l00987"></a>00987 }
<a name="l00988"></a>00988  
<a name="l00989"></a>00989 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l00990"></a>00990 
<a name="l00991"></a><a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">00991</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l00992"></a>00992 {
<a name="l00993"></a>00993  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l00994"></a>00994  g = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+s);;
<a name="l00995"></a>00995 
<a name="l00996"></a>00996  <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
<a name="l00997"></a>00997    {
<a name="l00998"></a>00998      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrtp1m1 : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l00999"></a>00999      exit(1);
<a name="l01000"></a>01000    }
<a name="l01001"></a>01001  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>);
<a name="l01002"></a>01002  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01003"></a>01003 }
<a name="l01004"></a>01004  
<a name="l01005"></a>01005 
<a name="l01006"></a>01006 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01007"></a>01007 
<a name="l01008"></a><a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">01008</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01009"></a>01009 {
<a name="l01010"></a>01010  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg1(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), erg2(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>); 
<a name="l01011"></a>01011 
<a name="l01012"></a>01012  idotprecision sum_idot1, sum_idot2;
<a name="l01013"></a>01013  interval sum1, sum2;
<a name="l01014"></a>01014 
<a name="l01015"></a>01015  erg1[0][0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s[0][0]);
<a name="l01016"></a>01016  erg2[0][0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s[0][0]);
<a name="l01017"></a>01017 
<a name="l01018"></a>01018  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01019"></a>01019    {
<a name="l01020"></a>01020      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
<a name="l01021"></a>01021        {
<a name="l01022"></a>01022    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l01023"></a>01023      {
<a name="l01024"></a>01024        sum_idot1=interval(0.0);
<a name="l01025"></a>01025        sum_idot2=interval(0.0);
<a name="l01026"></a>01026 
<a name="l01027"></a>01027        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
<a name="l01028"></a>01028          {
<a name="l01029"></a>01029      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l01030"></a>01030        { 
<a name="l01031"></a>01031          interval h=interval(k)-interval(l)-interval(m);
<a name="l01032"></a>01032          accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
<a name="l01033"></a>01033          accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
<a name="l01034"></a>01034        } <span class="comment">// for m</span>
<a name="l01035"></a>01035          }     <span class="comment">// for l</span>
<a name="l01036"></a>01036 
<a name="l01037"></a>01037        rnd(sum_idot1, sum1);  
<a name="l01038"></a>01038        rnd(sum_idot2, sum2);
<a name="l01039"></a>01039 
<a name="l01040"></a>01040        erg1[i][k-i]=sum1/interval(k);
<a name="l01041"></a>01041        erg2[i][k-i]=-sum2/interval(k);
<a name="l01042"></a>01042      }
<a name="l01043"></a>01043        }
<a name="l01044"></a>01044    }
<a name="l01045"></a>01045 
<a name="l01046"></a>01046  <span class="keywordflow">return</span> erg1;
<a name="l01047"></a>01047 }
<a name="l01048"></a>01048 
<a name="l01049"></a>01049 
<a name="l01050"></a>01050 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01051"></a>01051 
<a name="l01052"></a><a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">01052</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01053"></a>01053 {
<a name="l01054"></a>01054  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg1(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), erg2(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>); 
<a name="l01055"></a>01055 
<a name="l01056"></a>01056  idotprecision sum_idot1, sum_idot2;
<a name="l01057"></a>01057  interval sum1, sum2;
<a name="l01058"></a>01058 
<a name="l01059"></a>01059  erg1[0][0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s[0][0]);
<a name="l01060"></a>01060  erg2[0][0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s[0][0]);
<a name="l01061"></a>01061 
<a name="l01062"></a>01062  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01063"></a>01063    {
<a name="l01064"></a>01064      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
<a name="l01065"></a>01065        {
<a name="l01066"></a>01066    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l01067"></a>01067      {
<a name="l01068"></a>01068        sum_idot1=interval(0.0);
<a name="l01069"></a>01069        sum_idot2=interval(0.0);
<a name="l01070"></a>01070 
<a name="l01071"></a>01071        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
<a name="l01072"></a>01072          {
<a name="l01073"></a>01073      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l01074"></a>01074        { 
<a name="l01075"></a>01075          interval h=interval(k)-interval(l)-interval(m);
<a name="l01076"></a>01076          accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
<a name="l01077"></a>01077          accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
<a name="l01078"></a>01078        } <span class="comment">// for m</span>
<a name="l01079"></a>01079          }     <span class="comment">// for l</span>
<a name="l01080"></a>01080 
<a name="l01081"></a>01081        rnd(sum_idot1, sum1);  
<a name="l01082"></a>01082        rnd(sum_idot2, sum2);
<a name="l01083"></a>01083 
<a name="l01084"></a>01084        erg1[i][k-i]=sum1/interval(k);
<a name="l01085"></a>01085        erg2[i][k-i]=-sum2/interval(k);
<a name="l01086"></a>01086      }
<a name="l01087"></a>01087        }
<a name="l01088"></a>01088    }
<a name="l01089"></a>01089 
<a name="l01090"></a>01090  <span class="keywordflow">return</span> erg2;
<a name="l01091"></a>01091 }
<a name="l01092"></a>01092 
<a name="l01093"></a>01093 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01094"></a>01094 
<a name="l01095"></a><a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">01095</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01096"></a>01096 {
<a name="l01097"></a>01097  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01098"></a>01098 
<a name="l01099"></a>01099  g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s));
<a name="l01100"></a>01100 
<a name="l01101"></a>01101  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01102"></a>01102    {
<a name="l01103"></a>01103      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tan : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01104"></a>01104      exit(1);
<a name="l01105"></a>01105    }
<a name="l01106"></a>01106  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>);
<a name="l01107"></a>01107  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01108"></a>01108 }
<a name="l01109"></a>01109 
<a name="l01110"></a>01110 
<a name="l01111"></a>01111 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01112"></a>01112 
<a name="l01113"></a><a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">01113</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01114"></a>01114 {
<a name="l01115"></a>01115  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01116"></a>01116 
<a name="l01117"></a>01117  g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s));
<a name="l01118"></a>01118 
<a name="l01119"></a>01119  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01120"></a>01120    {
<a name="l01121"></a>01121      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor cot : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01122"></a>01122      exit(1);
<a name="l01123"></a>01123    }
<a name="l01124"></a>01124  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>);
<a name="l01125"></a>01125  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01126"></a>01126 }
<a name="l01127"></a>01127 
<a name="l01128"></a>01128 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01129"></a>01129 
<a name="l01130"></a><a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">01130</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01131"></a>01131 {
<a name="l01132"></a>01132  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg1(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), erg2(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>); 
<a name="l01133"></a>01133 
<a name="l01134"></a>01134  idotprecision sum_idot1, sum_idot2;
<a name="l01135"></a>01135  interval sum1, sum2;
<a name="l01136"></a>01136 
<a name="l01137"></a>01137  erg1[0][0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s[0][0]);
<a name="l01138"></a>01138  erg2[0][0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s[0][0]);
<a name="l01139"></a>01139 
<a name="l01140"></a>01140  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01141"></a>01141    {
<a name="l01142"></a>01142      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
<a name="l01143"></a>01143        {
<a name="l01144"></a>01144    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l01145"></a>01145      {
<a name="l01146"></a>01146        sum_idot1=interval(0.0);
<a name="l01147"></a>01147        sum_idot2=interval(0.0);
<a name="l01148"></a>01148 
<a name="l01149"></a>01149        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
<a name="l01150"></a>01150          {
<a name="l01151"></a>01151      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l01152"></a>01152        { 
<a name="l01153"></a>01153          interval h=interval(k)-interval(l)-interval(m);
<a name="l01154"></a>01154          accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
<a name="l01155"></a>01155          accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
<a name="l01156"></a>01156        }  <span class="comment">// for m</span>
<a name="l01157"></a>01157          }      <span class="comment">// for l</span>
<a name="l01158"></a>01158 
<a name="l01159"></a>01159        rnd(sum_idot1, sum1);  
<a name="l01160"></a>01160        rnd(sum_idot2, sum2);
<a name="l01161"></a>01161 
<a name="l01162"></a>01162        erg1[i][k-i]=sum1/interval(k);
<a name="l01163"></a>01163        erg2[i][k-i]=sum2/interval(k);
<a name="l01164"></a>01164      }
<a name="l01165"></a>01165        }
<a name="l01166"></a>01166    }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168  <span class="keywordflow">return</span> erg1;
<a name="l01169"></a>01169 }
<a name="l01170"></a>01170 
<a name="l01171"></a>01171 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01172"></a>01172 
<a name="l01173"></a><a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">01173</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01174"></a>01174 {
<a name="l01175"></a>01175  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg1(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), erg2(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>); 
<a name="l01176"></a>01176 
<a name="l01177"></a>01177  idotprecision sum_idot1, sum_idot2;
<a name="l01178"></a>01178  interval sum1, sum2;
<a name="l01179"></a>01179 
<a name="l01180"></a>01180  erg1[0][0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s[0][0]);
<a name="l01181"></a>01181  erg2[0][0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s[0][0]);
<a name="l01182"></a>01182 
<a name="l01183"></a>01183  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01184"></a>01184    {
<a name="l01185"></a>01185      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
<a name="l01186"></a>01186        {
<a name="l01187"></a>01187    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l01188"></a>01188      {
<a name="l01189"></a>01189        sum_idot1=interval(0.0);
<a name="l01190"></a>01190        sum_idot2=interval(0.0);
<a name="l01191"></a>01191 
<a name="l01192"></a>01192        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
<a name="l01193"></a>01193          {
<a name="l01194"></a>01194      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l01195"></a>01195        { 
<a name="l01196"></a>01196          interval h=interval(k)-interval(l)-interval(m);
<a name="l01197"></a>01197          accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
<a name="l01198"></a>01198          accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
<a name="l01199"></a>01199        } <span class="comment">// for m</span>
<a name="l01200"></a>01200          }     <span class="comment">// for l</span>
<a name="l01201"></a>01201 
<a name="l01202"></a>01202        rnd(sum_idot1, sum1);  
<a name="l01203"></a>01203        rnd(sum_idot2, sum2);
<a name="l01204"></a>01204 
<a name="l01205"></a>01205        erg1[i][k-i]=sum1/interval(k);
<a name="l01206"></a>01206        erg2[i][k-i]=sum2/interval(k);
<a name="l01207"></a>01207      }
<a name="l01208"></a>01208        }
<a name="l01209"></a>01209    }
<a name="l01210"></a>01210 
<a name="l01211"></a>01211  <span class="keywordflow">return</span> erg2;
<a name="l01212"></a>01212 }
<a name="l01213"></a>01213 
<a name="l01214"></a>01214 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01215"></a>01215 
<a name="l01216"></a><a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">01216</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01217"></a>01217 {
<a name="l01218"></a>01218  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01219"></a>01219 
<a name="l01220"></a>01220  g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s));
<a name="l01221"></a>01221 
<a name="l01222"></a>01222  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01223"></a>01223    {
<a name="l01224"></a>01224      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tanh : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01225"></a>01225      exit(1);
<a name="l01226"></a>01226    }
<a name="l01227"></a>01227  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>);
<a name="l01228"></a>01228  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01229"></a>01229 }
<a name="l01230"></a>01230 
<a name="l01231"></a>01231 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01232"></a>01232 
<a name="l01233"></a><a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">01233</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01234"></a>01234 {
<a name="l01235"></a>01235  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01236"></a>01236 
<a name="l01237"></a>01237  g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s));
<a name="l01238"></a>01238 
<a name="l01239"></a>01239  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01240"></a>01240    {
<a name="l01241"></a>01241      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor coth : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01242"></a>01242      exit(1);
<a name="l01243"></a>01243    }
<a name="l01244"></a>01244  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>);
<a name="l01245"></a>01245  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01246"></a>01246 }
<a name="l01247"></a>01247 
<a name="l01248"></a>01248 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01249"></a>01249 
<a name="l01250"></a><a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">01250</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01251"></a>01251 {
<a name="l01252"></a>01252  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01253"></a>01253 
<a name="l01254"></a>01254  g=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s) );
<a name="l01255"></a>01255 
<a name="l01256"></a>01256  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01257"></a>01257    {
<a name="l01258"></a>01258      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asin : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01259"></a>01259      exit(1);
<a name="l01260"></a>01260    }
<a name="l01261"></a>01261  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>);
<a name="l01262"></a>01262  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01263"></a>01263 }
<a name="l01264"></a>01264 
<a name="l01265"></a>01265 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01266"></a>01266 
<a name="l01267"></a><a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">01267</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01268"></a>01268 {
<a name="l01269"></a>01269  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01270"></a>01270 
<a name="l01271"></a>01271  g=-<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s) );
<a name="l01272"></a>01272 
<a name="l01273"></a>01273  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01274"></a>01274    {
<a name="l01275"></a>01275      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acos : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01276"></a>01276      exit(1);
<a name="l01277"></a>01277    }
<a name="l01278"></a>01278  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>);
<a name="l01279"></a>01279  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01280"></a>01280 }
<a name="l01281"></a>01281 
<a name="l01282"></a>01282 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01283"></a>01283 
<a name="l01284"></a><a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">01284</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01285"></a>01285 {
<a name="l01286"></a>01286  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01287"></a>01287 
<a name="l01288"></a>01288  g=interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);
<a name="l01289"></a>01289 
<a name="l01290"></a>01290  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01291"></a>01291    {
<a name="l01292"></a>01292      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atan : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01293"></a>01293      exit(1);
<a name="l01294"></a>01294    }
<a name="l01295"></a>01295  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>);
<a name="l01296"></a>01296  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01297"></a>01297 }
<a name="l01298"></a>01298 
<a name="l01299"></a>01299 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01300"></a>01300 
<a name="l01301"></a><a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">01301</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01302"></a>01302 {
<a name="l01303"></a>01303  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01304"></a>01304 
<a name="l01305"></a>01305  g=-(interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s));
<a name="l01306"></a>01306 
<a name="l01307"></a>01307  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01308"></a>01308    {
<a name="l01309"></a>01309      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acot : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01310"></a>01310      exit(1);
<a name="l01311"></a>01311    }
<a name="l01312"></a>01312  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>);
<a name="l01313"></a>01313  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01314"></a>01314 }
<a name="l01315"></a>01315 
<a name="l01316"></a>01316 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01317"></a>01317 
<a name="l01318"></a><a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">01318</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01319"></a>01319 {
<a name="l01320"></a>01320  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01321"></a>01321 
<a name="l01322"></a>01322 <span class="comment">// g=sqrt(interval(1.0)+sqr(s));</span>
<a name="l01323"></a>01323  g = <a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>
<a name="l01324"></a>01324 
<a name="l01325"></a>01325  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01326"></a>01326    {
<a name="l01327"></a>01327      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asinh : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01328"></a>01328      exit(1);
<a name="l01329"></a>01329    }
<a name="l01330"></a>01330  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>);
<a name="l01331"></a>01331  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01332"></a>01332 }
<a name="l01333"></a>01333 
<a name="l01334"></a>01334 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01335"></a>01335 
<a name="l01336"></a><a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">01336</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01337"></a>01337 {
<a name="l01338"></a>01338  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01339"></a>01339 
<a name="l01340"></a>01340 <span class="comment">// g=sqrt(sqr(s)-interval(1.0));</span>
<a name="l01341"></a>01341  g = <a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>
<a name="l01342"></a>01342 
<a name="l01343"></a>01343  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01344"></a>01344    {
<a name="l01345"></a>01345      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acosh : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01346"></a>01346      exit(1);
<a name="l01347"></a>01347    }
<a name="l01348"></a>01348  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>);
<a name="l01349"></a>01349  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01350"></a>01350 }
<a name="l01351"></a>01351 
<a name="l01352"></a>01352 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01353"></a>01353 
<a name="l01354"></a><a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">01354</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01355"></a>01355 {
<a name="l01356"></a>01356  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01357"></a>01357 
<a name="l01358"></a>01358  g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);
<a name="l01359"></a>01359 
<a name="l01360"></a>01360  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01361"></a>01361    {
<a name="l01362"></a>01362      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atanh : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01363"></a>01363      exit(1);
<a name="l01364"></a>01364    }
<a name="l01365"></a>01365  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>);
<a name="l01366"></a>01366  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01367"></a>01367 }
<a name="l01368"></a>01368 
<a name="l01369"></a>01369 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01370"></a>01370 
<a name="l01371"></a><a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">01371</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01372"></a>01372 {
<a name="l01373"></a>01373  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>), g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01374"></a>01374 
<a name="l01375"></a>01375  g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);
<a name="l01376"></a>01376 
<a name="l01377"></a>01377  <span class="keywordflow">if</span>(0&lt;=g[0][0])
<a name="l01378"></a>01378    {
<a name="l01379"></a>01379      cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acoth : 0 in interval&quot;</span> &lt;&lt; endl;
<a name="l01380"></a>01380      exit(1);
<a name="l01381"></a>01381    }
<a name="l01382"></a>01382  <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>);
<a name="l01383"></a>01383  <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l01384"></a>01384 }
<a name="l01385"></a>01385 
<a name="l01386"></a>01386 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01387"></a>01387 
<a name="l01388"></a>01388 <span class="comment">//Error function &quot;erf&quot; //added, mg2006-03</span>
<a name="l01389"></a><a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">01389</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01390"></a>01390 {
<a name="l01391"></a>01391  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01392"></a>01392 
<a name="l01393"></a>01393  idotprecision sum_idot;
<a name="l01394"></a>01394  interval sum;
<a name="l01395"></a>01395 
<a name="l01396"></a>01396  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> g(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01397"></a>01397 
<a name="l01398"></a>01398  g=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s));
<a name="l01399"></a>01399 
<a name="l01400"></a>01400  erg[0][0]=<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(s[0][0]);
<a name="l01401"></a>01401 
<a name="l01402"></a>01402  <span class="keywordflow">if</span>(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01403"></a>01403    {
<a name="l01404"></a>01404      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++)
<a name="l01405"></a>01405        {
<a name="l01406"></a>01406    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
<a name="l01407"></a>01407      {
<a name="l01408"></a>01408        sum_idot=interval(0.0);
<a name="l01409"></a>01409 
<a name="l01410"></a>01410        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
<a name="l01411"></a>01411                                      <span class="comment">// equiv. to erg(k1,k2) in Braeuer Thesis</span>
<a name="l01412"></a>01412          {
<a name="l01413"></a>01413      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
<a name="l01414"></a>01414        { 
<a name="l01415"></a>01415          interval h=interval(k)-interval(l)-interval(m);
<a name="l01416"></a>01416          accumulate(sum_idot, h*g[l][m], s[i-l][k-i-m]);
<a name="l01417"></a>01417                                              <span class="comment">//Braeuer:s[k1-j1][k2-j2]</span>
<a name="l01418"></a>01418        } <span class="comment">// for m</span>
<a name="l01419"></a>01419          }     <span class="comment">// for l</span>
<a name="l01420"></a>01420 
<a name="l01421"></a>01421        rnd(sum_idot, sum);  
<a name="l01422"></a>01422        erg[i][k-i]=interval(2)*sum/(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
<a name="l01423"></a>01423      }
<a name="l01424"></a>01424        }
<a name="l01425"></a>01425    }
<a name="l01426"></a>01426 
<a name="l01427"></a>01427  <span class="keywordflow">return</span> erg;
<a name="l01428"></a>01428 
<a name="l01429"></a>01429 }
<a name="l01430"></a>01430 
<a name="l01431"></a>01431 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01432"></a>01432 
<a name="l01433"></a>01433 <span class="comment">//Complementary Error function &quot;erfc&quot; //added, mg2006-03</span>
<a name="l01434"></a><a class="code" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">01434</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="code" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">erfc</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s)
<a name="l01435"></a>01435 {
<a name="l01436"></a>01436  <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> erg(s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>);
<a name="l01437"></a>01437 
<a name="l01438"></a>01438  erg=interval(1)-<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(s);
<a name="l01439"></a>01439 
<a name="l01440"></a>01440  <span class="keywordflow">return</span> erg;
<a name="l01441"></a>01441 
<a name="l01442"></a>01442 }
<a name="l01443"></a>01443 
<a name="l01444"></a>01444 
<a name="l01445"></a>01445 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01446"></a>01446 
<a name="l01447"></a><a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">01447</a> <span class="keywordtype">void</span> <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; g, <span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; u,
<a name="l01448"></a>01448      <span class="keywordtype">int</span> _fkt) 
<a name="l01449"></a>01449 {
<a name="l01450"></a>01450  idotprecision sum_idot;
<a name="l01451"></a>01451 
<a name="l01452"></a>01452  interval sum1, sum2;
<a name="l01453"></a>01453  
<a name="l01454"></a>01454  <span class="keywordflow">switch</span>(_fkt)   { 
<a name="l01455"></a>01455    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>:       {f[0][0]=<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(u[0][0]);       <span class="keywordflow">break</span>;}
<a name="l01456"></a>01456    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>:     {f[0][0]=<a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(u[0][0]);     <span class="keywordflow">break</span>;}
<a name="l01457"></a>01457    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>: {f[0][0]=<a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(u[0][0]); <span class="keywordflow">break</span>;}
<a name="l01458"></a>01458    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>:      {f[0][0]=<a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(u[0][0]);      <span class="keywordflow">break</span>;}
<a name="l01459"></a>01459    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>:      {f[0][0]=<a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(u[0][0]);      <span class="keywordflow">break</span>;}
<a name="l01460"></a>01460 
<a name="l01461"></a>01461    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01462"></a>01462    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01463"></a>01463    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01464"></a>01464    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01465"></a>01465 
<a name="l01466"></a>01466    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01467"></a>01467    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01468"></a>01468 
<a name="l01469"></a>01469    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01470"></a>01470    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01471"></a>01471    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01472"></a>01472    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>:  {f[0][0]=<a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(u[0][0]);  <span class="keywordflow">break</span>;}
<a name="l01473"></a>01473    } 
<a name="l01474"></a>01474 
<a name="l01475"></a>01475  <span class="keywordflow">if</span>(f.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>&gt;0)
<a name="l01476"></a>01476    {
<a name="l01477"></a>01477      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=f.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; k++)
<a name="l01478"></a>01478        {
<a name="l01479"></a>01479    sum_idot=interval(0.0);
<a name="l01480"></a>01480 
<a name="l01481"></a>01481    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
<a name="l01482"></a>01482      {
<a name="l01483"></a>01483        accumulate(sum_idot, interval(j)*f[0][j], g[0][k-j]);
<a name="l01484"></a>01484      }
<a name="l01485"></a>01485    rnd(sum_idot, sum1);
<a name="l01486"></a>01486    f[0][k]=(u[0][k]-sum1/interval(k))/g[0][0];
<a name="l01487"></a>01487        }
<a name="l01488"></a>01488 
<a name="l01489"></a>01489      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=f.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) <span class="comment">// now calculating the remainding f(i,j)</span>
<a name="l01490"></a>01490        {
<a name="l01491"></a>01491    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=f.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i; j++)
<a name="l01492"></a>01492      {
<a name="l01493"></a>01493        sum_idot=interval(0.0);
<a name="l01494"></a>01494        
<a name="l01495"></a>01495        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i-1; l++) 
<a name="l01496"></a>01496          {
<a name="l01497"></a>01497      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=j; m++)
<a name="l01498"></a>01498       {
<a name="l01499"></a>01499       accumulate(sum_idot, interval(l)*f[l][m], g[i-l][j-m]);
<a name="l01500"></a>01500       }
<a name="l01501"></a>01501          }
<a name="l01502"></a>01502        rnd(sum_idot, sum1); 
<a name="l01503"></a>01503        
<a name="l01504"></a>01504        sum_idot=interval(0.0);
<a name="l01505"></a>01505        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=j; m++) 
<a name="l01506"></a>01506          {
<a name="l01507"></a>01507      accumulate(sum_idot, g[0][m], f[i][j-m]);
<a name="l01508"></a>01508          }
<a name="l01509"></a>01509        rnd(sum_idot, sum2); 
<a name="l01510"></a>01510        
<a name="l01511"></a>01511        f[i][j]=(u[i][j]-sum1/interval(i)-sum2)/g[0][0];
<a name="l01512"></a>01512      }
<a name="l01513"></a>01513        } 
<a name="l01514"></a>01514    }
<a name="l01515"></a>01515 }
<a name="l01516"></a>01516 
<a name="l01517"></a>01517 
<a name="l01518"></a>01518 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01519"></a>01519 
<a name="l01520"></a>01520 <span class="comment">// Class dim2taylor_vector</span>
<a name="l01521"></a>01521 
<a name="l01522"></a>01522 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01523"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#ae66d5856cc67052bf2be5e47394ca885">01523</a> dim2taylor_vector::dim2taylor_vector() <span class="comment">// Default constructor</span>
<a name="l01524"></a>01524 {
<a name="l01525"></a>01525     dim=2;
<a name="l01526"></a>01526     lb=1;
<a name="l01527"></a>01527     ub=2;
<a name="l01528"></a>01528     p_el=1;
<a name="l01529"></a>01529     comp = <span class="keyword">new</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>[dim];   
<a name="l01530"></a>01530     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;dim; i++)
<a name="l01531"></a>01531       comp[i]=<a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>(p_el);
<a name="l01532"></a>01532     <span class="comment">// dim constructors of the form</span>
<a name="l01533"></a>01533     <span class="comment">// dim2taylor(int p_el)  are called to create a block (an array) of</span>
<a name="l01534"></a>01534     <span class="comment">// dim elements of type  dim2taylor.</span>
<a name="l01535"></a>01535 }
<a name="l01536"></a>01536 
<a name="l01537"></a>01537 
<a name="l01538"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a3d44ea6f7d2982fa1699c2caa0b4e76c">01538</a> dim2taylor_vector::dim2taylor_vector(<span class="keywordtype">int</span> ordnung, <span class="keywordtype">int</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>, <span class="keywordtype">int</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>)
<a name="l01539"></a>01539 {
<a name="l01540"></a>01540     lb=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>;
<a name="l01541"></a>01541     ub=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>;
<a name="l01542"></a>01542     dim=ub-lb+1;
<a name="l01543"></a>01543     p_el=ordnung;
<a name="l01544"></a>01544     comp = <span class="keyword">new</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>[dim];   
<a name="l01545"></a>01545     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;dim; i++)
<a name="l01546"></a>01546       comp[i]=<a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>(p_el);
<a name="l01547"></a>01547     <span class="comment">// dim constructors of the form</span>
<a name="l01548"></a>01548     <span class="comment">// dim2taylor(int p_el)  are called to create a block (an array) of</span>
<a name="l01549"></a>01549     <span class="comment">// dim elements of type  dim2taylor.</span>
<a name="l01550"></a>01550 }
<a name="l01551"></a>01551 
<a name="l01552"></a>01552 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01553"></a>01553 
<a name="l01554"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a2b3e7577d753127cbdc2ab82ad2b109a">01554</a> dim2taylor_vector::dim2taylor_vector(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&amp; s)
<a name="l01555"></a>01555 {
<a name="l01556"></a>01556  dim=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#ad0142b9b4011a426806f09f16217c443">dim</a>;
<a name="l01557"></a>01557  lb=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a2ba35c1941839c74ae6e29477df56163">lb</a>;
<a name="l01558"></a>01558  ub=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a5a1d2347123e0bbc823b57a8d6f4d74c">ub</a>;
<a name="l01559"></a>01559  p_el=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#abf767a36fd0b0fc7658b018cb1a29e55">p_el</a>;
<a name="l01560"></a>01560  comp=<span class="keyword">new</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>[dim]; 
<a name="l01561"></a>01561           <span class="comment">//Taylor order p_el and memory are handled by dim2taylor.operator=</span>
<a name="l01562"></a>01562  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;dim; i++) comp[i]=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a8637ab0d24f55f1b12f1a8f1dad4b060">comp</a>[i];
<a name="l01563"></a>01563 }
<a name="l01564"></a>01564 
<a name="l01565"></a>01565 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01566"></a>01566 
<a name="l01567"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#ab42c03cc479b30ea13e216b331f03efc">01567</a> dim2taylor_vector::~dim2taylor_vector()
<a name="l01568"></a>01568 {
<a name="l01569"></a>01569  <span class="keyword">delete</span>[] comp;
<a name="l01570"></a>01570  comp=NULL;
<a name="l01571"></a>01571 }
<a name="l01572"></a>01572 
<a name="l01573"></a>01573 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01574"></a>01574 
<a name="l01575"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#ac987c494c6b550d4b1c82a5c48e7f83e">01575</a> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&amp; dim2taylor_vector::operator=(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&amp; s)
<a name="l01576"></a>01576 {
<a name="l01577"></a>01577  <span class="keywordflow">if</span>(<span class="keyword">this</span>!=&amp;s)
<a name="l01578"></a>01578  {
<a name="l01579"></a>01579   <span class="keyword">delete</span>[] comp;
<a name="l01580"></a>01580 
<a name="l01581"></a>01581   p_el=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#abf767a36fd0b0fc7658b018cb1a29e55">p_el</a>;
<a name="l01582"></a>01582   dim=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#ad0142b9b4011a426806f09f16217c443">dim</a>;
<a name="l01583"></a>01583   lb=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a2ba35c1941839c74ae6e29477df56163">lb</a>;
<a name="l01584"></a>01584   ub=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a5a1d2347123e0bbc823b57a8d6f4d74c">ub</a>;
<a name="l01585"></a>01585 
<a name="l01586"></a>01586  comp=<span class="keyword">new</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>[dim]; 
<a name="l01587"></a>01587           <span class="comment">//Taylor order p_el and memory are handled by dim2taylor.operator=</span>
<a name="l01588"></a>01588   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;dim ; i++) comp[i]=s.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a8637ab0d24f55f1b12f1a8f1dad4b060">comp</a>[i];
<a name="l01589"></a>01589  }
<a name="l01590"></a>01590 
<a name="l01591"></a>01591  <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01592"></a>01592 }
<a name="l01593"></a>01593 
<a name="l01594"></a>01594 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01595"></a>01595 
<a name="l01596"></a><a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a9eb10e5f55f3d07160b79a605aba276e">01596</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; dim2taylor_vector::operator[](<span class="keywordtype">int</span> n)<span class="keyword"> const</span>
<a name="l01597"></a>01597 <span class="keyword"></span>{
<a name="l01598"></a>01598     <span class="keywordflow">return</span> comp[n-lb];  <span class="comment">// allowed indices: n = lb,lb+1,...,ub;</span>
<a name="l01599"></a>01599 } 
<a name="l01600"></a>01600 
<a name="l01601"></a>01601 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01602"></a>01602 
<a name="l01603"></a><a class="code" href="namespacetaylor.shtml#ac56dff7aa717d97652479e90f605ab2e">01603</a> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a> <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(<span class="keywordtype">int</span> order, ivector&amp; values)
<a name="l01604"></a>01604 {
<a name="l01605"></a>01605  <span class="keywordtype">int</span> dimension = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)-<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)+1;
<a name="l01606"></a>01606 
<a name="l01607"></a>01607  <span class="keywordflow">if</span>(dimension != 2) 
<a name="l01608"></a>01608   {
<a name="l01609"></a>01609    cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor_vector::init_var&quot;</span> &lt;&lt; endl;
<a name="l01610"></a>01610    cerr &lt;&lt; <span class="stringliteral">&quot;! 2-dimensional Taylor arithmetic !&quot;</span> &lt;&lt; endl; 
<a name="l01611"></a>01611    exit(1);
<a name="l01612"></a>01612   } 
<a name="l01613"></a>01613 
<a name="l01614"></a>01614  <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a> erg(order, <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values), <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values));
<a name="l01615"></a>01615 
<a name="l01616"></a>01616  erg[<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)] = <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(order,1,values[<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)]);
<a name="l01617"></a>01617  erg[<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)] = <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(order,2,values[<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)]);
<a name="l01618"></a>01618 
<a name="l01619"></a>01619  <span class="keywordflow">return</span> erg;
<a name="l01620"></a>01620 }
<a name="l01621"></a>01621 
<a name="l01622"></a>01622 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01623"></a>01623 
<a name="l01624"></a><a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">01624</a> <span class="keywordtype">int</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&amp; <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a>)  <span class="comment">//added, mg2005</span>
<a name="l01625"></a>01625 {
<a name="l01626"></a>01626   <span class="keywordflow">return</span> d2tv.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a2ba35c1941839c74ae6e29477df56163">lb</a>;
<a name="l01627"></a>01627 }
<a name="l01628"></a>01628 
<a name="l01629"></a><a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">01629</a> <span class="keywordtype">int</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&amp; <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a>)  <span class="comment">//added, mg2005</span>
<a name="l01630"></a>01630 {
<a name="l01631"></a>01631   <span class="keywordflow">return</span> d2tv.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a5a1d2347123e0bbc823b57a8d6f4d74c">ub</a>;
<a name="l01632"></a>01632 }
<a name="l01633"></a>01633 
<a name="l01634"></a>01634 
<a name="l01635"></a>01635 <span class="comment">//NEW: By T. Johnson</span>
<a name="l01636"></a>01636 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01637"></a>01637 
<a name="l01638"></a><a class="code" href="classtaylor_1_1dim2taylor.shtml#a7216581b3f89d2ef618e1ec3412056c2">01638</a> dim2taylor::dim2taylor(<span class="keyword">const</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&amp; s, <span class="keywordtype">int</span> n)
<a name="l01639"></a>01639 {
<a name="l01640"></a>01640  p=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1;
<a name="l01641"></a>01641  dat=<span class="keyword">new</span> ivector[p+1];
<a name="l01642"></a>01642  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=p-1 ;i++) {
<a name="l01643"></a>01643    dat[i]=s.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i];
<a name="l01644"></a>01644    Resize(dat[i], 0, p-i);
<a name="l01645"></a>01645    dat[i][p-i]=0.0;
<a name="l01646"></a>01646  }
<a name="l01647"></a>01647  Resize(dat[p],0,0);
<a name="l01648"></a>01648  dat[p][0]=0.0;
<a name="l01649"></a>01649  
<a name="l01650"></a>01650 }
<a name="l01651"></a>01651 <span class="comment">//------------------------------------------------------------------------</span>
<a name="l01652"></a>01652 
<a name="l01653"></a>01653 
<a name="l01654"></a>01654 } <span class="comment">// end of namespace taylor</span>
<a name="l01655"></a>01655 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dim2taylor_8cpp.shtml">dim2taylor.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
