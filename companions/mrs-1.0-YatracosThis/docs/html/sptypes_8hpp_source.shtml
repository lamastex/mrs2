<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: sptypes.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sptypes_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">sptypes.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="sptypes_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef ___SPTYPES_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define ___SPTYPES_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="comment">// to use ivectors and reals</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="cxsc_8hpp.shtml">cxsc.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// to use std::list</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use std::vector</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// to use std::set</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// to use std::map</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// to use iterators</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00042"></a>00042 
<a name="l00054"></a>00054 <span class="keyword">namespace </span>subpavings {
<a name="l00055"></a>00055 
<a name="l00057"></a>00057     <span class="keyword">class </span>SPnode;
<a name="l00058"></a>00058     <span class="keyword">class </span>SPSnode;
<a name="l00059"></a>00059     <span class="keyword">class </span>SPSVnode;
<a name="l00060"></a>00060     <span class="keyword">class </span>CollatorSPnode;
<a name="l00061"></a>00061     <span class="keyword">class </span>CollatorSPVnode;
<a name="l00062"></a>00062     <span class="keyword">class </span>SPMinimalnode;
<a name="l00063"></a>00063 
<a name="l00074"></a><a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6">00074</a>     <span class="keyword">typedef</span> <span class="keyword">enum</span> {<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>,<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>,<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>} <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a>;
<a name="l00075"></a>00075 
<a name="l00082"></a><a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98">00082</a>     <span class="keyword">typedef</span> <span class="keyword">enum</span>{<a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a> = -1, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a> = 1, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a> = 0} <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a>;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00093"></a><a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">00093</a>     <span class="keyword">typedef</span> <span class="keyword">enum</span>{<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a> = 0, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a> = 1, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a> = 2, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a01fa38b021a34fb52083fdc234ab8eff">GRAPHSAMPLES</a> = 3,
<a name="l00094"></a><a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">00094</a>                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a> = 4, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089afec51793a7c8838aa61a4e1b21d1245d">LOGANDGRAPHSAMPLES</a> = 5} <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00098"></a>00098 
<a name="l00115"></a><a class="code" href="namespacesubpavings.shtml#a4ca48fac31a3dcc26d5b51b1ee3cd0d9">00115</a>     <span class="keyword">typedef</span> <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> (*<a class="code" href="namespacesubpavings.shtml#a4ca48fac31a3dcc26d5b51b1ee3cd0d9" title="Define type &quot;Pointer to an interval boolean test&quot;.">PIBT</a>)(<span class="keyword">const</span> ivector&amp; x,
<a name="l00116"></a>00116                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn);
<a name="l00117"></a>00117 
<a name="l00124"></a><a class="code" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22">00124</a>     <span class="keyword">typedef</span> ivector (*<a class="code" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22" title="Define type &quot;Pointer to an interval vector function&quot;.">PIVF</a>)(<span class="keyword">const</span> ivector&amp; x);
<a name="l00125"></a>00125 
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 
<a name="l00132"></a>00132 
<a name="l00135"></a><a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e">00135</a>     <span class="keyword">typedef</span> std::vector&lt;int&gt; <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>;
<a name="l00136"></a>00136 
<a name="l00139"></a><a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137">00139</a>     <span class="keyword">typedef</span> IntVec::iterator <a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137" title="Define type IntVecItr as iterator over IntVec.">IntVecItr</a>;
<a name="l00140"></a>00140 
<a name="l00143"></a><a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81">00143</a>     <span class="keyword">typedef</span> std::vector&lt;size_t&gt; <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>;
<a name="l00144"></a>00144 
<a name="l00147"></a><a class="code" href="namespacesubpavings.shtml#a764c7dafc0022ded276050b8cd056904">00147</a>     <span class="keyword">typedef</span> IntVec::iterator <a class="code" href="namespacesubpavings.shtml#a764c7dafc0022ded276050b8cd056904" title="Define type Size_tVecItr as iterator over Size_tVec.">Size_tVecItr</a>;
<a name="l00148"></a>00148 
<a name="l00151"></a><a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">00151</a>     <span class="keyword">typedef</span> std::vector&lt;real&gt; <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>;
<a name="l00152"></a>00152 
<a name="l00155"></a><a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1">00155</a>     <span class="keyword">typedef</span> RealVec::iterator <a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a>;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00160"></a><a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">00160</a>     <span class="keyword">typedef</span> std::vector&lt;rvector&gt; <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;
<a name="l00161"></a>00161 
<a name="l00164"></a><a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec">00164</a>     <span class="keyword">typedef</span> RVecData::const_iterator <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a>;
<a name="l00165"></a>00165 
<a name="l00168"></a><a class="code" href="namespacesubpavings.shtml#aa990935cb163d8eb54f28df1a3508af0">00168</a>     <span class="keyword">typedef</span> RVecData::iterator <a class="code" href="namespacesubpavings.shtml#aa990935cb163d8eb54f28df1a3508af0" title="Define type RVecDataItr as iterator over RVecData.">RVecDataItr</a>;
<a name="l00169"></a>00169 
<a name="l00172"></a><a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49">00172</a>     <span class="keyword">typedef</span> std::vector&lt;SPnode*&gt; <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a>;
<a name="l00173"></a>00173 
<a name="l00176"></a><a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6">00176</a>     <span class="keyword">typedef</span> SPnodePtrs::iterator <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> ;
<a name="l00177"></a>00177     
<a name="l00180"></a><a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6">00180</a>     <span class="keyword">typedef</span> std::vector&lt;const SPnode*&gt; <a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6" title="Define type SPnodeConstPtrs as container of pointers to const SPnodes.">SPnodeConstPtrs</a>;
<a name="l00181"></a>00181 
<a name="l00184"></a><a class="code" href="namespacesubpavings.shtml#a4a185637f88fb7f6b082fca3a8d90537">00184</a>     <span class="keyword">typedef</span> SPnodeConstPtrs::const_iterator <a class="code" href="namespacesubpavings.shtml#a4a185637f88fb7f6b082fca3a8d90537" title="Define type SPnodeConstPtrsItr as an iterator over SPnodeConstPtrs.">SPnodeConstPtrsItr</a> ;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 
<a name="l00189"></a><a class="code" href="namespacesubpavings.shtml#ad21343865a1d93618e0fad6b4b08e53e">00189</a>     <span class="keyword">typedef</span> std::vector&lt;SPMinimalnode*&gt; <a class="code" href="namespacesubpavings.shtml#ad21343865a1d93618e0fad6b4b08e53e" title="Define type SPMinimalnodePtrs as container of pointers to SPMinimalnodes.">SPMinimalnodePtrs</a>;
<a name="l00190"></a>00190 
<a name="l00193"></a><a class="code" href="namespacesubpavings.shtml#a0799ad5c6a6d3cd3b7afef68e5dfce51">00193</a>     <span class="keyword">typedef</span> SPMinimalnodePtrs::iterator <a class="code" href="namespacesubpavings.shtml#a0799ad5c6a6d3cd3b7afef68e5dfce51" title="Define type SPMinimalnodePtrsItr as an iterator over SPMinimalnodePtrs.">SPMinimalnodePtrsItr</a> ;
<a name="l00194"></a>00194     
<a name="l00195"></a>00195 
<a name="l00198"></a><a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623">00198</a>     <span class="keyword">typedef</span> std::vector&lt;ivector&gt; <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>;
<a name="l00199"></a>00199 
<a name="l00202"></a><a class="code" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483">00202</a>     <span class="keyword">typedef</span> BoxVec::iterator <a class="code" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483" title="Define type BoxVecItr as iterator over BoxVec.">BoxVecItr</a>;
<a name="l00203"></a>00203 
<a name="l00208"></a><a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d">00208</a>     <span class="keyword">typedef</span> std::list&lt;ivector&gt; <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>;
<a name="l00209"></a>00209 
<a name="l00212"></a><a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00">00212</a>     <span class="keyword">typedef</span> ImageList::iterator <a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00" title="Define type iterator over ImageList.">ImageListItr</a>;
<a name="l00213"></a>00213 
<a name="l00216"></a><a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923">00216</a>     <span class="keyword">typedef</span> std::vector&lt;SPSnode*&gt; <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>;
<a name="l00217"></a>00217 
<a name="l00220"></a><a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9">00220</a>     <span class="keyword">typedef</span> SPSnodePtrs::iterator <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> ;
<a name="l00221"></a>00221 
<a name="l00224"></a><a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9">00224</a>     <span class="keyword">typedef</span> std::vector&lt;SPSVnode*&gt; <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>;
<a name="l00225"></a>00225 
<a name="l00228"></a><a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0">00228</a>     <span class="keyword">typedef</span> SPSVnodePtrs::iterator <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> ;
<a name="l00229"></a>00229     
<a name="l00232"></a><a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3">00232</a>     <span class="keyword">typedef</span> std::list&lt;SPSnode*&gt; <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>;
<a name="l00233"></a>00233 
<a name="l00236"></a><a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2">00236</a>     <span class="keyword">typedef</span> SPSnodeList::iterator <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> ;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00248"></a><a class="code" href="namespacesubpavings.shtml#aa79f33663da92502ce1a37f3fd1f3d85">00248</a>     <span class="keyword">typedef</span> std::list&lt;rvector&gt; <a class="code" href="namespacesubpavings.shtml#aa79f33663da92502ce1a37f3fd1f3d85" title="Define type BigData Collection as a container for data.">BigDataCollection</a>;
<a name="l00249"></a>00249 
<a name="l00252"></a><a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a">00252</a>     <span class="keyword">typedef</span> BigDataCollection::iterator <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a>;
<a name="l00253"></a>00253 
<a name="l00258"></a><a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30">00258</a>     <span class="keyword">typedef</span> std::vector&lt;BigDataItr&gt; <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>;
<a name="l00259"></a>00259 
<a name="l00262"></a><a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff">00262</a>     <span class="keyword">typedef</span> NodeData::iterator <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a>;
<a name="l00263"></a>00263 
<a name="l00271"></a><a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605">00271</a>     <span class="keyword">typedef</span> std::vector&lt;dotprecision&gt; <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a>;
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     
<a name="l00277"></a><a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173">00277</a>     <span class="keyword">typedef</span> VecDotPrec::iterator <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a>;
<a name="l00278"></a>00278     
<a name="l00281"></a><a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37">00281</a>     <span class="keyword">typedef</span> std::vector&lt;double&gt; <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a>;
<a name="l00282"></a>00282 
<a name="l00285"></a><a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab">00285</a>     <span class="keyword">typedef</span> VecDbl::iterator <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a>;
<a name="l00286"></a>00286 
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 } <span class="comment">// end namespace subpavings</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sptypes_8hpp.shtml">sptypes.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
