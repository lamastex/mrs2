<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: realmappedspnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('realmappedspnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">realmappedspnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="realmappedspnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2010, 2011, 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">/*!/ \file</span>
<a name="l00022"></a>00022 <span class="comment">\brief RealMappedSPnode definitions.</span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span> <span class="comment">//gsl_isnan(), isinf</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">//#define MARG_OUTPUT // for console output from marginalisation</span>
<a name="l00030"></a>00030 <span class="comment">//#define SLICE_OUTPUT // for console output from slice</span>
<a name="l00031"></a>00031 <span class="comment">//#define DEBUG_L1</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">using namespace </span>subpavings;
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>std;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// ------------------------ public member functions ----------------</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">// Destructor.</span>
<a name="l00040"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a55594a45ac82b31b5ae7592143079794">00040</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a55594a45ac82b31b5ae7592143079794">RealMappedSPnode::~RealMappedSPnode</a>()  {}
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// no-argument constructor,</span>
<a name="l00044"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6">00044</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>()
<a name="l00045"></a>00045   : <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt;() {}   <span class="comment">// uses the base SPnode class default constructor</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">// initialised constructor</span>
<a name="l00049"></a>00049 <span class="comment">// initialised with a box</span>
<a name="l00050"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f2de173f1eb55690cafb07020bfa5e5">00050</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00051"></a>00051             <span class="keyword">const</span> ivector&amp; v)
<a name="l00052"></a>00052   : <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt;(v, real(0.0)) {}
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055  <span class="comment">// initialised constructor</span>
<a name="l00056"></a>00056 <span class="comment">// initialised with a labeled box</span>
<a name="l00057"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a6ca684686609263ecb8579a95276e2bf">00057</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00058"></a>00058             <span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb)
<a name="l00059"></a>00059   : <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt;(lb, real(0.0)) {}
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">// initialised constructor</span>
<a name="l00064"></a>00064 <span class="comment">// initialised with a box, a value for the range,</span>
<a name="l00065"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a77bada00301c6333863d80ca002fd86c">00065</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00066"></a>00066             <span class="keyword">const</span> ivector&amp; v, <span class="keyword">const</span> cxsc::real&amp; range)
<a name="l00067"></a>00067   : <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt;(v, range) {}
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">// initialised constructor</span>
<a name="l00072"></a>00072 <span class="comment">// initialised with a labeled box and a value for the range</span>
<a name="l00073"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a12af9b0be5c63f0e1af1849d70b1b647">00073</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00074"></a>00074             <span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keyword">const</span> cxsc::real&amp; range)
<a name="l00075"></a>00075   : <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt;(lb, range) {}
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">// Copy constructor</span>
<a name="l00079"></a>00079 <span class="comment">// copies from given node downwards</span>
<a name="l00080"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#add6e4bba67a9d900ebebf07f420ad813">00080</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00081"></a>00081             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; spn)
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083   <span class="keywordflow">if</span> (!spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { 
<a name="l00084"></a>00084     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00085"></a>00085   }
<a name="l00086"></a>00086   <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00087"></a>00087   <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = 0.0;
<a name="l00088"></a>00088   
<a name="l00089"></a>00089   <span class="comment">//recursion on the children</span>
<a name="l00090"></a>00090   <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00091"></a>00091     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00092"></a>00092       *(spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00093"></a>00093   }
<a name="l00094"></a>00094   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00097"></a>00097     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00098"></a>00098       *(spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="comment">// Copy constructor</span>
<a name="l00105"></a>00105 <span class="comment">// copies from given node downwards</span>
<a name="l00106"></a>00106 <span class="comment">// adjusts for volume but does not &quot;normalise&quot; </span>
<a name="l00107"></a>00107 <span class="comment">//ie does not divide by total counter (which it does not know)</span>
<a name="l00108"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4ec458c112685446a703ae73fe812b84">00108</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00109"></a>00109             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn)
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111   <span class="keywordflow">if</span> (!spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { 
<a name="l00112"></a>00112     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00113"></a>00113   }
<a name="l00114"></a>00114   <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00115"></a>00115   <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = (1.0*spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/<a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>());
<a name="l00116"></a>00116   
<a name="l00117"></a>00117   <span class="comment">//recursion on the children</span>
<a name="l00118"></a>00118   <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00119"></a>00119     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00120"></a>00120       *(spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00125"></a>00125     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00126"></a>00126       *(spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00127"></a>00127   }
<a name="l00128"></a>00128   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="comment">// Copy constructor</span>
<a name="l00133"></a>00133 <span class="comment">// copies from given node downwards</span>
<a name="l00134"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea3c023626616315bdf71aaee45fa32f">00134</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00135"></a>00135             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; other)
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137   
<a name="l00138"></a>00138   <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00139"></a>00139     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00140"></a>00140   }
<a name="l00141"></a>00141   <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00142"></a>00142   <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l00143"></a>00143   
<a name="l00144"></a>00144   <span class="comment">//recursion on the children</span>
<a name="l00145"></a>00145   <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00146"></a>00146     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00147"></a>00147       *(other.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00148"></a>00148   }
<a name="l00149"></a>00149   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00152"></a>00152     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00153"></a>00153       *(other.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00154"></a>00154   }
<a name="l00155"></a>00155   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="comment">// Copy constructor</span>
<a name="l00160"></a>00160 <span class="comment">// copies from given node downwards</span>
<a name="l00161"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#afcd2676e416102b713d9ce735bc27889">00161</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode::RealMappedSPnode</a>(
<a name="l00162"></a>00162             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode&lt;cxsc::real&gt;</a>&amp; other)
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164   <span class="keywordflow">if</span> (!other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00165"></a>00165     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector( other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() );
<a name="l00166"></a>00166   }
<a name="l00167"></a>00167   <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00168"></a>00168   <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> = other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l00169"></a>00169   
<a name="l00170"></a>00170   <span class="comment">//recursion on the children</span>
<a name="l00171"></a>00171   <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00172"></a>00172     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00173"></a>00173       *(other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a31cc4a453d0c821592096b1829e43093" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00174"></a>00174   }
<a name="l00175"></a>00175   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00178"></a>00178     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00179"></a>00179       *(other.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3d15d4b64a8c01fbfabdb66c37c89ad9" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00180"></a>00180   }
<a name="l00181"></a>00181   <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00182"></a>00182 }
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">// Copy assignment operator</span>
<a name="l00186"></a>00186 <span class="comment">// copies from given node downwards</span>
<a name="l00187"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8c4a201d04c81a5f21301d6a325e740d">00187</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8c4a201d04c81a5f21301d6a325e740d" title="Copy assignment operator.">RealMappedSPnode::operator=</a>(
<a name="l00188"></a>00188             <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> rhs)
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190   rhs.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(*<span class="keyword">this</span>); <span class="comment">// make sure we use our version of swap</span>
<a name="l00191"></a>00191   <span class="keywordflow">return</span>(*<span class="keyword">this</span>);
<a name="l00192"></a>00192 }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">// Copy assignment operator</span>
<a name="l00195"></a>00195 <span class="comment">// copies from given node downwards</span>
<a name="l00196"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad6a86d365ae237d96c7a8f842700af96">00196</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8c4a201d04c81a5f21301d6a325e740d" title="Copy assignment operator.">RealMappedSPnode::operator=</a>(
<a name="l00197"></a>00197             <a class="code" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode&lt;cxsc::real&gt;</a> rhs)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199   rhs.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a4375171ab30bfe88e4a3306f321d3e24" title="Swap the properties of this and another.">swapMSPSR</a>(*<span class="keyword">this</span>); <span class="comment">// make sure we use our version of swap</span>
<a name="l00200"></a>00200   <span class="keywordflow">return</span>(*<span class="keyword">this</span>);
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="comment">// parent and child accessors have to hide the base class implementation</span>
<a name="l00206"></a>00206 <span class="comment">// this is not good but otherwise we get the base class return type</span>
<a name="l00207"></a>00207 <span class="comment">// I&#39;ve asked around and I can&#39;t find a way around it ...</span>
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="comment">// Accessor for the parent of a node.</span>
<a name="l00210"></a>00210 <span class="comment">//Returns a copy of the pointer to parent node.</span>
<a name="l00211"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd">00211</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">RealMappedSPnode::getParent</a>()<span class="keyword"> const</span>
<a name="l00212"></a>00212 <span class="keyword"></span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 <span class="comment">// Accessor for the left child of a node.</span>
<a name="l00216"></a>00216 <span class="comment">// Returns a copy of the pointer to leftChild node, cast to this type</span>
<a name="l00217"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4">00217</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">RealMappedSPnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00218"></a>00218 <span class="keyword"></span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 <span class="comment">// Accessor for the right child of a node.</span>
<a name="l00222"></a>00222 <span class="comment">// Returns a copy of the pointer to rightChild node, cast this type</span>
<a name="l00223"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9">00223</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">RealMappedSPnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l00224"></a>00224 <span class="keyword"></span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 <span class="comment">// return true if there is a negative range in the tree rooted at this.</span>
<a name="l00227"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4cadaec6d96f2a315218dc16a082f8a">00227</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4cadaec6d96f2a315218dc16a082f8a">RealMappedSPnode::hasNegativeRangeInTree</a>()<span class="keyword"> const</span>
<a name="l00228"></a>00228 <span class="keyword"></span>{
<a name="l00229"></a>00229   <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00230"></a>00230   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt; real(0.0)) {
<a name="l00231"></a>00231     retValue = <span class="keyword">true</span>;
<a name="l00232"></a>00232   }
<a name="l00233"></a>00233   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00234"></a>00234     retValue = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4cadaec6d96f2a315218dc16a082f8a">hasNegativeRangeInTree</a>();
<a name="l00235"></a>00235     <span class="keywordflow">if</span> (!retValue) retValue = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4cadaec6d96f2a315218dc16a082f8a">hasNegativeRangeInTree</a>();
<a name="l00236"></a>00236   }
<a name="l00237"></a>00237   <span class="keywordflow">return</span> retValue;
<a name="l00238"></a>00238   
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="comment">// return true if there is an infinite range in the tree rooted at this.</span>
<a name="l00242"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">00242</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">RealMappedSPnode::hasInfiniteRangeInTree</a>()<span class="keyword"> const</span>
<a name="l00243"></a>00243 <span class="keyword"></span>{
<a name="l00244"></a>00244   <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00245"></a>00245   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> == cxsc::Infinity) {
<a name="l00246"></a>00246     retValue = <span class="keyword">true</span>;
<a name="l00247"></a>00247   }
<a name="l00248"></a>00248   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00249"></a>00249     retValue = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>();
<a name="l00250"></a>00250     <span class="keywordflow">if</span> (!retValue) retValue = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>();
<a name="l00251"></a>00251   }
<a name="l00252"></a>00252   <span class="keywordflow">return</span> retValue;
<a name="l00253"></a>00253   
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a1ac4214b1e335289374edece1b5d8c43">00256</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a1ac4214b1e335289374edece1b5d8c43" title="Less-than operator.">RealMappedSPnode::operator&lt;</a>(
<a name="l00257"></a>00257     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rhs)<span class="keyword"> const</span>
<a name="l00258"></a>00258 <span class="keyword"></span>{
<a name="l00259"></a>00259   <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>() &lt; rhs.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>());
<a name="l00260"></a>00260 }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 <span class="comment">// Find where data should be </span>
<a name="l00263"></a>00263 <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l00264"></a>00264 <span class="comment">// throws exception if node has no box</span>
<a name="l00265"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9409b660d7a7f1f35fc7f2d1904386c2">00265</a> <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9409b660d7a7f1f35fc7f2d1904386c2">RealMappedSPnode::findContainingNode</a>(
<a name="l00266"></a>00266                 <span class="keyword">const</span> cxsc::rvector&amp; pt,
<a name="l00267"></a>00267                 <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd)<span class="keyword"> const</span>
<a name="l00268"></a>00268 <span class="keyword"></span>{
<a name="l00269"></a>00269   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00270"></a>00270     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l00271"></a>00271     <span class="stringliteral">&quot;RealMappedSPnode::findContainingNode(const cxsc::rvector&amp;, OPERATIONS_ON)&quot;</span>);
<a name="l00272"></a>00272   }
<a name="l00273"></a>00273   <span class="comment">// start at the top</span>
<a name="l00274"></a>00274   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* retObj = NULL;
<a name="l00275"></a>00275   
<a name="l00276"></a>00276   <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(pt, childInd)) {
<a name="l00277"></a>00277     
<a name="l00278"></a>00278     <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00279"></a>00279 
<a name="l00280"></a>00280       <span class="comment">// give this node as return value</span>
<a name="l00281"></a>00281       retObj = <span class="keyword">this</span>;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     } <span class="comment">// end of isLeaf</span>
<a name="l00284"></a>00284 
<a name="l00285"></a>00285     <span class="comment">// if not a leaf and contains data</span>
<a name="l00286"></a>00286     <span class="comment">// recurse on the children if any</span>
<a name="l00287"></a>00287     <span class="keywordflow">else</span> {
<a name="l00288"></a>00288 
<a name="l00289"></a>00289       <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()){
<a name="l00290"></a>00290         
<a name="l00291"></a>00291         retObj =
<a name="l00292"></a>00292         (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9409b660d7a7f1f35fc7f2d1904386c2">findContainingNode</a>(
<a name="l00293"></a>00293           pt, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>);
<a name="l00294"></a>00294         
<a name="l00295"></a>00295       }
<a name="l00296"></a>00296       <span class="comment">// only try left if we did not find on the right</span>
<a name="l00297"></a>00297       <span class="keywordflow">if</span>(retObj == NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00298"></a>00298         retObj =
<a name="l00299"></a>00299         (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9409b660d7a7f1f35fc7f2d1904386c2">findContainingNode</a>(
<a name="l00300"></a>00300           pt, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>);
<a name="l00301"></a>00301         
<a name="l00302"></a>00302       }
<a name="l00303"></a>00303     }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   } <span class="comment">// end if node contains</span>
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   <span class="comment">// will return null if does not contain the data</span>
<a name="l00308"></a>00308   
<a name="l00309"></a>00309   <span class="keywordflow">return</span> retObj;
<a name="l00310"></a>00310 }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00314"></a>00314 <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00315"></a>00315 <span class="comment">// split the box in half normal to dimension set by comp</span>
<a name="l00316"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4d0129dda149a950a06e9d2e3ff802c4">00316</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f" title="Add two sibling child nodes to this provided this is a leaf.">RealMappedSPnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l00317"></a>00317 {
<a name="l00318"></a>00318   <span class="comment">// can only expand if there is a box</span>
<a name="l00319"></a>00319   <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) {
<a name="l00320"></a>00320     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(<span class="stringliteral">&quot;RealMappedSPnode::nodeExpand(int)&quot;</span>);
<a name="l00321"></a>00321   }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323   <span class="comment">// only do something if this node is a leaf</span>
<a name="l00324"></a>00324   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00325"></a>00325     
<a name="l00326"></a>00326     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* newLC = NULL;
<a name="l00327"></a>00327     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* newRC = NULL;
<a name="l00328"></a>00328     
<a name="l00329"></a>00329     <span class="keywordflow">try</span> {
<a name="l00330"></a>00330 
<a name="l00331"></a>00331       <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00332"></a>00332       ivector lC, rC;
<a name="l00333"></a>00333       <span class="comment">// Call Lower() and Upper() to put split boxes</span>
<a name="l00334"></a>00334       <span class="comment">// into lC and rC respectively</span>
<a name="l00335"></a>00335       <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), lC, comp);
<a name="l00336"></a>00336       <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rC, comp);
<a name="l00337"></a>00337 
<a name="l00338"></a>00338       <span class="comment">// make and add the new children</span>
<a name="l00339"></a>00339       newLC = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(lC, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00340"></a>00340       newRC = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(rC, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00341"></a>00341       
<a name="l00342"></a>00342       <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(newLC);
<a name="l00343"></a>00343       <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(newRC);
<a name="l00344"></a>00344       <span class="comment">// both children get the same range as this</span>
<a name="l00345"></a>00345       
<a name="l00346"></a>00346       <span class="comment">//name the new children</span>
<a name="l00347"></a>00347       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00348"></a>00348       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350       <span class="comment">// new children have summary from this</span>
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352     <span class="keywordflow">catch</span>(std::exception&amp; e) {
<a name="l00353"></a>00353     <span class="comment">// overkill, but try to deal with all eventualities...</span>
<a name="l00354"></a>00354       <span class="keywordflow">try</span> {
<a name="l00355"></a>00355         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL) {
<a name="l00356"></a>00356           <span class="keyword">delete</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00357"></a>00357           <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00358"></a>00358         }
<a name="l00359"></a>00359         
<a name="l00360"></a>00360         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>() != NULL) {
<a name="l00361"></a>00361           <span class="keyword">delete</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00362"></a>00362           <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00363"></a>00363         }
<a name="l00364"></a>00364         <span class="keywordflow">if</span> (newLC != NULL) {
<a name="l00365"></a>00365           <span class="keyword">delete</span> newLC;
<a name="l00366"></a>00366           newLC = NULL;
<a name="l00367"></a>00367         }
<a name="l00368"></a>00368         <span class="keywordflow">if</span> (newRC != NULL) {
<a name="l00369"></a>00369           <span class="keyword">delete</span> newRC;
<a name="l00370"></a>00370           newRC = NULL;
<a name="l00371"></a>00371         }
<a name="l00372"></a>00372       }
<a name="l00373"></a>00373       <span class="keywordflow">catch</span>(std::exception&amp; e) {} <span class="comment">//catch and swallow</span>
<a name="l00374"></a>00374       
<a name="l00375"></a>00375       <span class="keywordflow">throw</span>; <span class="comment">// rethrow original exception</span>
<a name="l00376"></a>00376     }
<a name="l00377"></a>00377   }
<a name="l00378"></a>00378 }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00383"></a>00383 <span class="comment">// finds its own comp argument then calls nodeExpand(int comp)</span>
<a name="l00384"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f">00384</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f" title="Add two sibling child nodes to this provided this is a leaf.">RealMappedSPnode::nodeExpand</a>()
<a name="l00385"></a>00385 {
<a name="l00386"></a>00386   <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00387"></a>00387   <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00388"></a>00388   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f" title="Add two sibling child nodes to this provided this is a leaf.">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l00389"></a>00389 }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391 <span class="comment">// maximum range in the tree (range of this if this is a leaf)</span>
<a name="l00392"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#abae5bea82b46019e23d98756973c6860">00392</a> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#abae5bea82b46019e23d98756973c6860" title="Get maximum value of the range for any of the leaves of the tree rooted at this.">RealMappedSPnode::getMaxRangeForLeavesInTree</a>()<span class="keyword"> const</span>
<a name="l00393"></a>00393 <span class="keyword"></span>{
<a name="l00394"></a>00394   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00395"></a>00395     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l00396"></a>00396   }
<a name="l00397"></a>00397   <span class="keywordflow">else</span> {
<a name="l00398"></a>00398     cxsc::real rLC = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#abae5bea82b46019e23d98756973c6860" title="Get maximum value of the range for any of the leaves of the tree rooted at this.">getMaxRangeForLeavesInTree</a>();
<a name="l00399"></a>00399     cxsc::real rRC = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#abae5bea82b46019e23d98756973c6860" title="Get maximum value of the range for any of the leaves of the tree rooted at this.">getMaxRangeForLeavesInTree</a>();
<a name="l00400"></a>00400     <span class="keywordflow">return</span> (rLC &gt; rRC? rLC : rRC);
<a name="l00401"></a>00401   }
<a name="l00402"></a>00402 }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="comment">// Marginalise</span>
<a name="l00406"></a>00406 <span class="comment">// marginalise from given node downwards</span>
<a name="l00407"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#acf2399376e990903e5787b0a68eb350c">00407</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#acf2399376e990903e5787b0a68eb350c" title="Marginalise this.">RealMappedSPnode::marginalise</a>(
<a name="l00408"></a>00408     <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims)
<a name="l00409"></a>00409 {
<a name="l00410"></a>00410   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>() != NULL ) {
<a name="l00411"></a>00411     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">NonRootNode_Error</a>(
<a name="l00412"></a>00412       <span class="stringliteral">&quot;RealMappedSPnode::marginalise(const std::vector&lt;int&gt;&amp;)&quot;</span>);
<a name="l00413"></a>00413   }
<a name="l00414"></a>00414   
<a name="l00415"></a>00415   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f2a09e57bff1fd459e8bf631019b07f" title="Non-public version of marginalisation to have only the required dimensions.">_start_marginalise</a>(reqDims);
<a name="l00416"></a>00416 }
<a name="l00417"></a>00417 
<a name="l00418"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ab3ac1ccd24132d04f136a0fab3d0b610">00418</a> <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ab3ac1ccd24132d04f136a0fab3d0b610" title="Make a marginalised version of this.">RealMappedSPnode::makeMarginalised</a>(
<a name="l00419"></a>00419               <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims)<span class="keyword"> const</span>
<a name="l00420"></a>00420 <span class="keyword"></span>{
<a name="l00421"></a>00421   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> result = *<span class="keyword">this</span>;
<a name="l00422"></a>00422 
<a name="l00423"></a>00423   result.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f2a09e57bff1fd459e8bf631019b07f" title="Non-public version of marginalisation to have only the required dimensions.">_start_marginalise</a>(reqDims);
<a name="l00424"></a>00424   
<a name="l00425"></a>00425   <span class="keywordflow">return</span> result;
<a name="l00426"></a>00426 }
<a name="l00427"></a>00427 
<a name="l00428"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8b02632446a3c28a352f15f511e35caa">00428</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8b02632446a3c28a352f15f511e35caa" title="Normalise this.">RealMappedSPnode::normalise</a>()
<a name="l00429"></a>00429 {
<a name="l00430"></a>00430   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>() != NULL ) {
<a name="l00431"></a>00431     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">NonRootNode_Error</a>(
<a name="l00432"></a>00432       <span class="stringliteral">&quot;RealMappedSPnode::normalise()&quot;</span>);
<a name="l00433"></a>00433   }
<a name="l00434"></a>00434   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a185405d2c7b3231a75b33ec249292e2d" title="Non-public version of normalisation.">_normalise</a>();
<a name="l00435"></a>00435 }
<a name="l00436"></a>00436     
<a name="l00437"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a66a8b6deef3ba770a80a5b0b0418f5fc">00437</a> <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a66a8b6deef3ba770a80a5b0b0418f5fc" title="Make a normalised version of this.">RealMappedSPnode::makeNormalised</a>()<span class="keyword"> const</span>
<a name="l00438"></a>00438 <span class="keyword"></span>{
<a name="l00439"></a>00439   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> result = *<span class="keyword">this</span>;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   result.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a185405d2c7b3231a75b33ec249292e2d" title="Non-public version of normalisation.">_normalise</a>();
<a name="l00442"></a>00442   
<a name="l00443"></a>00443   <span class="keywordflow">return</span> result;
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 <span class="comment">// overide base class</span>
<a name="l00447"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac674f3231fb03622048986a2a855b224">00447</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac674f3231fb03622048986a2a855b224" title="Slice this.">RealMappedSPnode::slice</a>(
<a name="l00448"></a>00448       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00449"></a>00449       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts)
<a name="l00450"></a>00450 {
<a name="l00451"></a>00451   
<a name="l00452"></a>00452 <span class="preprocessor">  #ifdef SLICE_OUTPUT</span>
<a name="l00453"></a>00453 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;In RealMappedSPnode::slice, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00454"></a>00454 <span class="preprocessor">  #endif</span>
<a name="l00455"></a>00455 <span class="preprocessor"></span>
<a name="l00456"></a>00456   std::vector&lt;cxsc::real&gt; fullSlicePts = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44" title="Check slice parameters and return a full vector of slice points.">sliceCheck</a>(sliceDims, slicePts);
<a name="l00457"></a>00457   
<a name="l00458"></a>00458   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> temp(*<span class="keyword">this</span>);
<a name="l00459"></a>00459   temp.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">_slice</a>(sliceDims, fullSlicePts);
<a name="l00460"></a>00460   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(temp);
<a name="l00461"></a>00461 
<a name="l00462"></a>00462 }
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 
<a name="l00465"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2541f9ce5af2fcb753644d1f7e1f9297">00465</a> <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2541f9ce5af2fcb753644d1f7e1f9297" title="Make a RealMappedSPnode that is a slice of this.">RealMappedSPnode::makeSlice</a>(
<a name="l00466"></a>00466       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00467"></a>00467       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts)<span class="keyword"> const</span>
<a name="l00468"></a>00468 <span class="keyword"></span>{
<a name="l00469"></a>00469   
<a name="l00470"></a>00470   std::vector&lt;cxsc::real&gt; fullSlicePts = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a24ca6f695181dd45e5cf05d22042bb44" title="Check slice parameters and return a full vector of slice points.">sliceCheck</a>(sliceDims, slicePts);
<a name="l00471"></a>00471   
<a name="l00472"></a>00472   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> result(*<span class="keyword">this</span>);
<a name="l00473"></a>00473   result.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a54fec3e936497db34a821b9138b4ad7b">_slice</a>(sliceDims, fullSlicePts);
<a name="l00474"></a>00474   <span class="keywordflow">return</span> result;
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00478"></a>00478 <span class="comment">// get distance between two pavings</span>
<a name="l00479"></a>00479 <span class="comment">// checks boxes match</span>
<a name="l00480"></a>00480 <span class="comment">// throws exception if this is empty, or if rhs empty</span>
<a name="l00481"></a>00481 <span class="comment">// if both have no data, distance is 0</span>
<a name="l00482"></a>00482 <span class="comment">// if one has data and the other no data, distance is integral over the </span>
<a name="l00483"></a>00483 <span class="comment">// one with data</span>
<a name="l00484"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af243ad67d0ff141d345e800b651a87e1">00484</a> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af243ad67d0ff141d345e800b651a87e1">RealMappedSPnode::getL1Distance</a>(
<a name="l00485"></a>00485           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; other)<span class="keyword"> const</span>
<a name="l00486"></a>00486 <span class="keyword"></span>{
<a name="l00487"></a>00487   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00488"></a>00488     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l00489"></a>00489       <span class="stringliteral">&quot;RealMappedSPnode::getL1Distance(const RealMappedSPnode&amp;)&quot;</span>);
<a name="l00490"></a>00490   }
<a name="l00491"></a>00491   
<a name="l00492"></a>00492   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) {
<a name="l00493"></a>00493     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00494"></a>00494       <span class="stringliteral">&quot;RealMappedSPnode::getL1Distance(const RealMappedSPnode&amp;)&quot;</span>);
<a name="l00495"></a>00495   }
<a name="l00496"></a>00496   
<a name="l00497"></a>00497   
<a name="l00498"></a>00498   
<a name="l00499"></a>00499   cxsc::dotprecision retDP(0.0);
<a name="l00500"></a>00500   
<a name="l00501"></a>00501   <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp; other) retDP = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747" title="Accumulate L1 distance between leaf descendents of this and leaf descendents of node pointed to by ot...">_getL1distance</a>(retDP, &amp;other);
<a name="l00502"></a>00502   
<a name="l00503"></a>00503   <span class="keywordflow">return</span> cxsc::rnd(retDP);
<a name="l00504"></a>00504     
<a name="l00505"></a>00505 }
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="comment">// NEW JUNE 2012 for log posteriors</span>
<a name="l00508"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a116f7a6b92d5c442be9d8393b6e0e73f">00508</a> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a116f7a6b92d5c442be9d8393b6e0e73f" title="Get a &#39;log likelihood&#39; using positive values from this and counts from spn.">RealMappedSPnode::getLogLikelihood</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn)<span class="keyword"> const</span>
<a name="l00509"></a>00509 <span class="keyword"></span>{
<a name="l00510"></a>00510   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00511"></a>00511     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l00512"></a>00512       <span class="stringliteral">&quot;RealMappedSPnode::getLogLikelihood(const SPSnode&amp;)&quot;</span>);
<a name="l00513"></a>00513   }
<a name="l00514"></a>00514   
<a name="l00515"></a>00515   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ) {
<a name="l00516"></a>00516     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l00517"></a>00517       <span class="stringliteral">&quot;RealMappedSPnode::getLogLikelihood(const SPSnode&amp;)&quot;</span>);
<a name="l00518"></a>00518   }
<a name="l00519"></a>00519   cxsc::real result(0.0);
<a name="l00520"></a>00520   
<a name="l00521"></a>00521   <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt; 0) {
<a name="l00522"></a>00522     
<a name="l00523"></a>00523     cxsc::dotprecision loglik(0.0);
<a name="l00524"></a>00524     
<a name="l00525"></a>00525     <span class="keywordtype">int</span> isnan = 0;
<a name="l00526"></a>00526     <span class="keywordtype">int</span> isposinf =0;
<a name="l00527"></a>00527     <span class="keywordtype">int</span> isneginf =0; <span class="comment">// all these 3 changed by ref</span>
<a name="l00528"></a>00528     
<a name="l00529"></a>00529     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d" title="Accumulate log likelihood using positive values from this and counts from spn.">_getLogLikelihood</a>(loglik, isnan, isposinf, isneginf, &amp;spn);
<a name="l00530"></a>00530     
<a name="l00531"></a>00531     <span class="comment">/*nan if nan flag is set*/</span>
<a name="l00532"></a>00532     <span class="keywordflow">if</span> (isnan ) result = cxsc::SignalingNaN;
<a name="l00533"></a>00533     <span class="keywordflow">else</span> result = cxsc::rnd(loglik);
<a name="l00534"></a>00534     <span class="comment">/* result could be -inf if there are 0 ranges in tree where spn </span>
<a name="l00535"></a>00535 <span class="comment">     * has points or inf if there are inf ranges in tree where spn has points*/</span> 
<a name="l00536"></a>00536   }
<a name="l00537"></a>00537 
<a name="l00538"></a>00538   <span class="keywordflow">return</span> result;
<a name="l00539"></a>00539 }
<a name="l00540"></a>00540     
<a name="l00541"></a>00541 <span class="comment">/*Volume of box represented by this multiplied by</span>
<a name="l00542"></a>00542 <span class="comment">real range of this.*/</span>
<a name="l00543"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a153b19ceeba356f0ada4e27dfcf6ab37">00543</a> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a153b19ceeba356f0ada4e27dfcf6ab37" title="Get the &quot;area&quot; of the range and the box of this.">RealMappedSPnode::getRealAreaRangeWithBox</a>()<span class="keyword"> const</span>
<a name="l00544"></a>00544 <span class="keyword"></span>{
<a name="l00545"></a>00545   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>() * <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>();
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 <span class="comment">/*Volume of box represented by this multiplied by</span>
<a name="l00549"></a>00549 <span class="comment">real range of this.*/</span>
<a name="l00550"></a>00550 cxsc::dotprecision 
<a name="l00551"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f083e792f8980eec67298253428c5c9">00551</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f083e792f8980eec67298253428c5c9" title="Get the &quot;area&quot; of the range and the box of this as a dotprecision type.">RealMappedSPnode::getDotPrecisionAreaRangeWithBox</a>()<span class="keyword"> const</span>
<a name="l00552"></a>00552 <span class="keyword"></span>{
<a name="l00553"></a>00553   cxsc::dotprecision result(0.0);
<a name="l00554"></a>00554   cxsc::accumulate(result, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>(), <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>());
<a name="l00555"></a>00555   <span class="keywordflow">return</span> result;
<a name="l00556"></a>00556 }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 cxsc::real 
<a name="l00559"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a23ef95e66b4b920f205739d9cf42f96f">00559</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a23ef95e66b4b920f205739d9cf42f96f" title="Get the total &quot;area&quot; for the leaves of this of the real ranges and boxes.">RealMappedSPnode::getTotalLeafAreaRangeWithBox</a>()<span class="keyword"> const</span>
<a name="l00560"></a>00560 <span class="keyword"></span>{
<a name="l00561"></a>00561   cxsc::real total = cxsc::Infinity;
<a name="l00562"></a>00562   
<a name="l00563"></a>00563   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>()) {
<a name="l00564"></a>00564     total = rnd(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998" title="Get the total &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionLeafAreaRangeWithBox</a>());
<a name="l00565"></a>00565   }
<a name="l00566"></a>00566   
<a name="l00567"></a>00567   <span class="keywordflow">return</span> total;
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 cxsc::dotprecision 
<a name="l00572"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998">00572</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998" title="Get the total &quot;area&quot; of the range and the box of this as a dotprecision type.">RealMappedSPnode::getTotalDotPrecisionLeafAreaRangeWithBox</a>()<span class="keyword"></span>
<a name="l00573"></a>00573 <span class="keyword">                                    const</span>
<a name="l00574"></a>00574 <span class="keyword"></span>{
<a name="l00575"></a>00575   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f083e792f8980eec67298253428c5c9" title="Get the &quot;area&quot; of the range and the box of this as a dotprecision type.">getDotPrecisionAreaRangeWithBox</a>();
<a name="l00576"></a>00576   <span class="keywordflow">else</span> {
<a name="l00577"></a>00577     <span class="keywordflow">return</span> ( <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998" title="Get the total &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionLeafAreaRangeWithBox</a>()
<a name="l00578"></a>00578       + <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998" title="Get the total &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionLeafAreaRangeWithBox</a>() );
<a name="l00579"></a>00579   }
<a name="l00580"></a>00580 }
<a name="l00581"></a>00581 
<a name="l00582"></a>00582 cxsc::real 
<a name="l00583"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a972c5dbc0bedd9cad3af4f2af43be277">00583</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a972c5dbc0bedd9cad3af4f2af43be277" title="Get the total absolute &quot;area&quot; for the leaves of this of the real ranges and boxes.">RealMappedSPnode::getTotalAbsLeafAreaRangeWithBox</a>()<span class="keyword"> const</span>
<a name="l00584"></a>00584 <span class="keyword"></span>{
<a name="l00585"></a>00585   cxsc::real total = cxsc::Infinity;
<a name="l00586"></a>00586   
<a name="l00587"></a>00587   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>()) {
<a name="l00588"></a>00588     total = rnd(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>());
<a name="l00589"></a>00589   }
<a name="l00590"></a>00590   
<a name="l00591"></a>00591   <span class="keywordflow">return</span> total;
<a name="l00592"></a>00592 }
<a name="l00593"></a>00593 
<a name="l00594"></a>00594 cxsc::dotprecision 
<a name="l00595"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda">00595</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">RealMappedSPnode::getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>()<span class="keyword"></span>
<a name="l00596"></a>00596 <span class="keyword">                                    const</span>
<a name="l00597"></a>00597 <span class="keyword"></span>{
<a name="l00598"></a>00598   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) <span class="keywordflow">return</span> cxsc::abs(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f083e792f8980eec67298253428c5c9" title="Get the &quot;area&quot; of the range and the box of this as a dotprecision type.">getDotPrecisionAreaRangeWithBox</a>());
<a name="l00599"></a>00599   <span class="keywordflow">else</span> {
<a name="l00600"></a>00600     <span class="keywordflow">return</span> ( <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>()
<a name="l00601"></a>00601       + <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>() );
<a name="l00602"></a>00602   }
<a name="l00603"></a>00603 }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605 cxsc::real 
<a name="l00606"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a0660b7981cce44ca09c2e0d68a6c1a21">00606</a>   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a0660b7981cce44ca09c2e0d68a6c1a21" title="Get the total over the leaves of the absolute value of the difference between the leaf &quot;area&quot; for thi...">RealMappedSPnode::getTotalAbsDiffLeafAreaRangeWithBox</a>(
<a name="l00607"></a>00607             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rmsp)<span class="keyword"> const</span>
<a name="l00608"></a>00608 <span class="keyword"></span>{
<a name="l00609"></a>00609   cxsc::real total = cxsc::Infinity;
<a name="l00610"></a>00610   
<a name="l00611"></a>00611   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>() &amp;&amp; !rmsp.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>()) {
<a name="l00612"></a>00612     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> diff = *<span class="keyword">this</span> - rmsp;
<a name="l00613"></a>00613     total = diff.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a972c5dbc0bedd9cad3af4f2af43be277" title="Get the total absolute &quot;area&quot; for the leaves of this of the real ranges and boxes.">getTotalAbsLeafAreaRangeWithBox</a>();
<a name="l00614"></a>00614     
<a name="l00615"></a>00615   }
<a name="l00616"></a>00616   <span class="keywordflow">return</span> total;
<a name="l00617"></a>00617 }
<a name="l00618"></a>00618 
<a name="l00619"></a>00619 cxsc::dotprecision 
<a name="l00620"></a>00620   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a74ba255a0781497c5dc76e8458969278" title="Get the total over the leaves of the absolute value of the difference between the leaf &quot;area&quot; for thi...">RealMappedSPnode::</a>
<a name="l00621"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a74ba255a0781497c5dc76e8458969278">00621</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a74ba255a0781497c5dc76e8458969278" title="Get the total over the leaves of the absolute value of the difference between the leaf &quot;area&quot; for thi...">		getTotalDotPrecisionAbsDiffLeafAreaRangeWithBox</a>(
<a name="l00622"></a>00622             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rmsp)<span class="keyword"> const</span>
<a name="l00623"></a>00623 <span class="keyword"></span>{
<a name="l00624"></a>00624   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> diff = *<span class="keyword">this</span> - rmsp;
<a name="l00625"></a>00625   <span class="keywordflow">return</span> diff.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>();
<a name="l00626"></a>00626 }
<a name="l00627"></a>00627 
<a name="l00628"></a>00628 <span class="comment">/* Return a reference to a container of nodes.</span>
<a name="l00629"></a>00629 <span class="comment"> </span>
<a name="l00630"></a>00630 <span class="comment">Contents of container are the leaves descended from this, </span>
<a name="l00631"></a>00631 <span class="comment">or this if this is a leaf, left to right order. */</span>
<a name="l00632"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a866601879aed0044333a5f28a773f677">00632</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">RealMappedSPnode::Ptrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a866601879aed0044333a5f28a773f677" title="Return a reference to a container of nodes.">RealMappedSPnode::getLeaves</a>(
<a name="l00633"></a>00633       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">RealMappedSPnode::Ptrs</a>&amp; leaves)
<a name="l00634"></a>00634 {
<a name="l00635"></a>00635   <span class="comment">//if children, recurse on the children</span>
<a name="l00636"></a>00636   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00637"></a>00637     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a866601879aed0044333a5f28a773f677" title="Return a reference to a container of nodes.">getLeaves</a>(leaves);
<a name="l00638"></a>00638   }
<a name="l00639"></a>00639 
<a name="l00640"></a>00640   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00641"></a>00641     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a866601879aed0044333a5f28a773f677" title="Return a reference to a container of nodes.">getLeaves</a>(leaves);
<a name="l00642"></a>00642   }
<a name="l00643"></a>00643 
<a name="l00644"></a>00644   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) { <span class="comment">// this is a leaf</span>
<a name="l00645"></a>00645     leaves.push_back(<span class="keyword">this</span>);
<a name="l00646"></a>00646   }
<a name="l00647"></a>00647   <span class="keywordflow">return</span> leaves;
<a name="l00648"></a>00648 }
<a name="l00649"></a>00649 
<a name="l00650"></a>00650 
<a name="l00651"></a>00651   
<a name="l00652"></a>00652 <span class="comment">/* Return a reference to a container of const nodes.</span>
<a name="l00653"></a>00653 <span class="comment"> </span>
<a name="l00654"></a>00654 <span class="comment">Contents of container are the leaves descended from this, </span>
<a name="l00655"></a>00655 <span class="comment">or this if this is a leaf, left to right order. */</span>
<a name="l00656"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea6a4c6aa2fe8eb944000db6790f9d8c">00656</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">RealMappedSPnode::ConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea6a4c6aa2fe8eb944000db6790f9d8c" title="Return a reference to a container of const nodes.">RealMappedSPnode::getConstLeaves</a>(
<a name="l00657"></a>00657       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">RealMappedSPnode::ConstPtrs</a>&amp; leaves)<span class="keyword"> const</span>
<a name="l00658"></a>00658 <span class="keyword"></span>{
<a name="l00659"></a>00659   <span class="comment">//if children, recurse on the children</span>
<a name="l00660"></a>00660   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00661"></a>00661     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea6a4c6aa2fe8eb944000db6790f9d8c" title="Return a reference to a container of const nodes.">getConstLeaves</a>(leaves);
<a name="l00662"></a>00662   }
<a name="l00663"></a>00663 
<a name="l00664"></a>00664   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00665"></a>00665     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea6a4c6aa2fe8eb944000db6790f9d8c" title="Return a reference to a container of const nodes.">getConstLeaves</a>(leaves);
<a name="l00666"></a>00666   }
<a name="l00667"></a>00667 
<a name="l00668"></a>00668   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) { <span class="comment">// this is a leaf</span>
<a name="l00669"></a>00669     leaves.push_back(<span class="keyword">this</span>);
<a name="l00670"></a>00670   }
<a name="l00671"></a>00671   <span class="keywordflow">return</span> leaves;
<a name="l00672"></a>00672 }
<a name="l00673"></a>00673 
<a name="l00674"></a>00674 <span class="comment">/* Return a reference to a container of nodes.</span>
<a name="l00675"></a>00675 <span class="comment"> </span>
<a name="l00676"></a>00676 <span class="comment">Contents of container are the sub-leaves descended from this, </span>
<a name="l00677"></a>00677 <span class="comment">or this if this is a sub-leaf, left to right order. </span>
<a name="l00678"></a>00678 <span class="comment"></span>
<a name="l00679"></a>00679 <span class="comment">A sub-leaf (aka &quot;cherry&quot;) is a node with two leaf child nodes.*/</span>
<a name="l00680"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a561d20d602eafff9592fdd0ee912ffcc">00680</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">RealMappedSPnode::Ptrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a561d20d602eafff9592fdd0ee912ffcc" title="Return a reference to a container of nodes.">RealMappedSPnode::getSubLeaves</a>(
<a name="l00681"></a>00681       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">RealMappedSPnode::Ptrs</a>&amp; subleaves)
<a name="l00682"></a>00682 {
<a name="l00683"></a>00683   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) { <span class="comment">// this is a subleaf</span>
<a name="l00684"></a>00684     subleaves.push_back(<span class="keyword">this</span>);
<a name="l00685"></a>00685   }
<a name="l00686"></a>00686   
<a name="l00687"></a>00687   <span class="comment">//if children, recurse on the children</span>
<a name="l00688"></a>00688   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00689"></a>00689     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a561d20d602eafff9592fdd0ee912ffcc" title="Return a reference to a container of nodes.">getSubLeaves</a>(subleaves);
<a name="l00690"></a>00690     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a561d20d602eafff9592fdd0ee912ffcc" title="Return a reference to a container of nodes.">getSubLeaves</a>(subleaves);
<a name="l00691"></a>00691   }
<a name="l00692"></a>00692 
<a name="l00693"></a>00693   <span class="keywordflow">return</span> subleaves;
<a name="l00694"></a>00694   
<a name="l00695"></a>00695 }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 <span class="comment">/* Return a reference to a container of const nodes.</span>
<a name="l00698"></a>00698 <span class="comment"> </span>
<a name="l00699"></a>00699 <span class="comment">Contents of container are the sub-leaves descended from this, </span>
<a name="l00700"></a>00700 <span class="comment">or this if this is a sub-leaf, left to right order. </span>
<a name="l00701"></a>00701 <span class="comment"></span>
<a name="l00702"></a>00702 <span class="comment">A sub-leaf (aka &quot;cherry&quot;) is a node with two leaf child nodes.*/</span>
<a name="l00703"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac6e092c4b19b8747f154eefd56d3e864">00703</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">RealMappedSPnode::ConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac6e092c4b19b8747f154eefd56d3e864" title="Return a reference to a container of const nodes.">RealMappedSPnode::getConstSubLeaves</a>(
<a name="l00704"></a>00704       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">RealMappedSPnode::ConstPtrs</a>&amp; subleaves)<span class="keyword"> const</span>
<a name="l00705"></a>00705 <span class="keyword"></span>{
<a name="l00706"></a>00706   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) { <span class="comment">// this is a subleaf</span>
<a name="l00707"></a>00707     subleaves.push_back(<span class="keyword">this</span>);
<a name="l00708"></a>00708   }
<a name="l00709"></a>00709   <span class="comment">//if children, recurse on the children</span>
<a name="l00710"></a>00710   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00711"></a>00711     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac6e092c4b19b8747f154eefd56d3e864" title="Return a reference to a container of const nodes.">getConstSubLeaves</a>(subleaves);
<a name="l00712"></a>00712     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac6e092c4b19b8747f154eefd56d3e864" title="Return a reference to a container of const nodes.">getConstSubLeaves</a>(subleaves);
<a name="l00713"></a>00713   }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715   
<a name="l00716"></a>00716   <span class="keywordflow">return</span> subleaves;
<a name="l00717"></a>00717   
<a name="l00718"></a>00718 }
<a name="l00719"></a>00719 
<a name="l00720"></a>00720 
<a name="l00721"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">00721</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">RealMappedSPnode::swapRMSPSR</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; spn) <span class="comment">//throw() // don&#39;t hide base class version</span>
<a name="l00722"></a>00722 {
<a name="l00723"></a>00723   <span class="comment">/* theBox, parent, leftChild,</span>
<a name="l00724"></a>00724 <span class="comment">  rightChild and nodeName are inherited from base class */</span>
<a name="l00725"></a>00725   <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode &lt; cxsc::real &gt;::swapMSPSR</a>(spn); <span class="comment">// use the MSP version</span>
<a name="l00726"></a>00726 }
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 
<a name="l00729"></a>00729 <span class="comment">// Marginalise</span>
<a name="l00730"></a>00730 <span class="comment">// sort out outDims from reqDims</span>
<a name="l00731"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f2a09e57bff1fd459e8bf631019b07f">00731</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f2a09e57bff1fd459e8bf631019b07f" title="Non-public version of marginalisation to have only the required dimensions.">RealMappedSPnode::_start_marginalise</a>(
<a name="l00732"></a>00732     <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims)
<a name="l00733"></a>00733 {
<a name="l00734"></a>00734   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00735"></a>00735     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l00736"></a>00736     <span class="stringliteral">&quot;RealMappedSPnode::_start_marginalise(const std::vector&lt;int&gt;&amp;)&quot;</span>);
<a name="l00737"></a>00737   }
<a name="l00738"></a>00738   
<a name="l00739"></a>00739   
<a name="l00740"></a>00740   <span class="keywordflow">if</span> (reqDims.empty()) {
<a name="l00741"></a>00741     <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l00742"></a>00742       <span class="stringliteral">&quot;RealMappedSPnode::_start_marginalise(const std::vector&lt;int&gt;&amp;) : reqDims.empty()&quot;</span>);
<a name="l00743"></a>00743   }
<a name="l00744"></a>00744   
<a name="l00745"></a>00745   <span class="comment">// want to find what dimensions to take out given required dimensions</span>
<a name="l00746"></a>00746   ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00747"></a>00747   <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l00748"></a>00748   <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l00749"></a>00749   <span class="keywordtype">int</span> boxUB = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box);
<a name="l00750"></a>00750   <span class="comment">//each of the required dims must be there</span>
<a name="l00751"></a>00751   std::vector&lt;int&gt; sorted = reqDims;
<a name="l00752"></a>00752   sort(sorted.begin(), sorted.end());
<a name="l00753"></a>00753   
<a name="l00754"></a>00754   <span class="comment">// remove any duplicates</span>
<a name="l00755"></a>00755   vector&lt;int&gt;::iterator it = unique (sorted.begin(), sorted.end());
<a name="l00756"></a>00756   sorted.resize( it - sorted.begin() );
<a name="l00757"></a>00757 
<a name="l00758"></a>00758   <span class="keywordflow">if</span> ( (*(sorted.begin()) &lt; 1)) {
<a name="l00759"></a>00759     <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l00760"></a>00760     <span class="stringliteral">&quot;RealMappedSPnode::_start_marginalise(const std::vector&lt;int&gt;&amp;) : Dimensions &lt; 1&quot;</span>);
<a name="l00761"></a>00761   }
<a name="l00762"></a>00762   
<a name="l00763"></a>00763   <span class="keywordflow">if</span> (*(sorted.rbegin()) &gt; boxUB - boxLB + 1)  {
<a name="l00764"></a>00764     <span class="keywordflow">throw</span> std::invalid_argument(
<a name="l00765"></a>00765     <span class="stringliteral">&quot;RealMappedSPnode::_start_marginalise(const std::vector&lt;int&gt;&amp;) : Dimension too large for box&quot;</span>);
<a name="l00766"></a>00766   }
<a name="l00767"></a>00767   <span class="comment">// could use min and max, but we want the not-req dims anyway</span>
<a name="l00768"></a>00768   std::vector&lt;int&gt; outDims;
<a name="l00769"></a>00769   
<a name="l00770"></a>00770   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= dim; i++) {
<a name="l00771"></a>00771     <span class="keywordflow">if</span> (!(find(reqDims.begin(), reqDims.end(), i) &lt; reqDims.end())) {
<a name="l00772"></a>00772       <span class="comment">// dim of box was not in reqDims </span>
<a name="l00773"></a>00773       outDims.push_back(i);
<a name="l00774"></a>00774     }
<a name="l00775"></a>00775   }
<a name="l00776"></a>00776   
<a name="l00777"></a>00777   <span class="comment">// now we have the dimensions to take out</span>
<a name="l00778"></a>00778   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b" title="Non-public version of marginalisation to take out the unwanted dimensions.">_marginalise</a>(outDims); <span class="comment">// use internal version</span>
<a name="l00779"></a>00779 }
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 <span class="comment">// Marginalise, internal version</span>
<a name="l00782"></a>00782 <span class="comment">// marginalise this from the given node down</span>
<a name="l00783"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b">00783</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b" title="Non-public version of marginalisation to take out the unwanted dimensions.">RealMappedSPnode::_marginalise</a>(
<a name="l00784"></a>00784     <span class="keyword">const</span> std::vector&lt;int&gt;&amp; outDims)
<a name="l00785"></a>00785 {
<a name="l00786"></a>00786 <span class="preprocessor">  #ifdef MARG_OUTPUT</span>
<a name="l00787"></a>00787 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00788"></a>00788 <span class="preprocessor">  #endif</span>
<a name="l00789"></a>00789 <span class="preprocessor"></span>  
<a name="l00790"></a>00790   ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00791"></a>00791   
<a name="l00792"></a>00792   <span class="comment">// find if this node split on one of the given dimensions</span>
<a name="l00793"></a>00793   <span class="comment">// returns -1 if no split</span>
<a name="l00794"></a>00794   <span class="comment">// make sure we do this before fiddling with the children!</span>
<a name="l00795"></a>00795   <span class="keywordtype">int</span> splitDim = <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>();
<a name="l00796"></a>00796   
<a name="l00797"></a>00797   <span class="comment">// deal with children first</span>
<a name="l00798"></a>00798   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00799"></a>00799     
<a name="l00800"></a>00800 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00801"></a>00801 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;not a leaf - marginalising children\n&quot;</span> &lt;&lt; std::endl;
<a name="l00802"></a>00802 <span class="preprocessor">    #endif</span>
<a name="l00803"></a>00803 <span class="preprocessor"></span>  
<a name="l00804"></a>00804     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b" title="Non-public version of marginalisation to take out the unwanted dimensions.">_marginalise</a>(outDims);    
<a name="l00805"></a>00805     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b" title="Non-public version of marginalisation to take out the unwanted dimensions.">_marginalise</a>(outDims); 
<a name="l00806"></a>00806   }               
<a name="l00807"></a>00807           
<a name="l00808"></a>00808   <span class="comment">// now deal with this node itself</span>
<a name="l00809"></a>00809 <span class="preprocessor">  #ifdef MARG_OUTPUT</span>
<a name="l00810"></a>00810 <span class="preprocessor"></span>    <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) std::cout &lt;&lt; <span class="stringliteral">&quot;\nback in &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00811"></a>00811     std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy split dimension is &quot;</span> &lt;&lt; splitDim &lt;&lt; std::endl;
<a name="l00812"></a>00812 <span class="preprocessor">  #endif</span>
<a name="l00813"></a>00813 <span class="preprocessor"></span>  
<a name="l00814"></a>00814   std::vector&lt;int&gt;::const_iterator found 
<a name="l00815"></a>00815       = find (outDims.begin(), outDims.end(), splitDim);
<a name="l00816"></a>00816   
<a name="l00817"></a>00817   <span class="comment">/* if we split on any of the given dimensions</span>
<a name="l00818"></a>00818 <span class="comment">   then we drop this from the tree entirely and</span>
<a name="l00819"></a>00819 <span class="comment">   replace it with the result</span>
<a name="l00820"></a>00820 <span class="comment">   of adding the two new children together */</span>
<a name="l00821"></a>00821   <span class="keywordflow">if</span> (found &lt; outDims.end()) { <span class="comment">// split on one of the outDims</span>
<a name="l00822"></a>00822     <span class="comment">// so this will become the result of adding together</span>
<a name="l00823"></a>00823     <span class="comment">// the two marginlised children</span>
<a name="l00824"></a>00824     <span class="comment">// note - can never be in here if this is a leaf</span>
<a name="l00825"></a>00825     
<a name="l00826"></a>00826 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00827"></a>00827 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy split dim is one of the dimensions to be removed&quot;</span> &lt;&lt; std::endl;
<a name="l00828"></a>00828 <span class="preprocessor">    #endif</span>
<a name="l00829"></a>00829 <span class="preprocessor"></span>    
<a name="l00830"></a>00830     <span class="comment">// save who our parent is</span>
<a name="l00831"></a>00831     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* savedParent = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>();
<a name="l00832"></a>00832     
<a name="l00833"></a>00833     <span class="comment">// and detach ourselves from parent</span>
<a name="l00834"></a>00834     <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = NULL;
<a name="l00835"></a>00835     
<a name="l00836"></a>00836     <span class="comment">// make a copy of the addition left and</span>
<a name="l00837"></a>00837     <span class="comment">// right children - use the copy constructor to</span>
<a name="l00838"></a>00838     <span class="comment">// make a temporary, do addition and then just swap </span>
<a name="l00839"></a>00839     
<a name="l00840"></a>00840     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> temp(*<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00841"></a>00841     
<a name="l00842"></a>00842     <span class="comment">// keep the same number of elements in the range collection</span>
<a name="l00843"></a>00843     temp += (*<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00844"></a>00844     
<a name="l00845"></a>00845     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(temp); <span class="comment">//swap me and temp</span>
<a name="l00846"></a>00846     
<a name="l00847"></a>00847 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00848"></a>00848 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tre-made me out of parallel addition collation of my children:&quot;</span> 
<a name="l00849"></a>00849                   &lt;&lt; std::endl;
<a name="l00850"></a>00850       std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy range collection is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00851"></a>00851       std::cout &lt;&lt; <span class="stringliteral">&quot;\tand my box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l00852"></a>00852       <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l00853"></a>00853         std::cout &lt;&lt; <span class="stringliteral">&quot;\tand my children (before renaming) are:&quot;</span> &lt;&lt; std::endl;
<a name="l00854"></a>00854         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">oneLineOutput</a>(std::cout, 2);
<a name="l00855"></a>00855         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">oneLineOutput</a>(std::cout, 2);
<a name="l00856"></a>00856       }
<a name="l00857"></a>00857 <span class="preprocessor">    #endif</span>
<a name="l00858"></a>00858 <span class="preprocessor"></span>    
<a name="l00859"></a>00859     <span class="comment">// restore relationship to parent</span>
<a name="l00860"></a>00860     <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = savedParent;
<a name="l00861"></a>00861     
<a name="l00862"></a>00862   }
<a name="l00863"></a>00863   <span class="keywordflow">else</span> { <span class="comment">// did not split on an outdim or is a leaf</span>
<a name="l00864"></a>00864     <span class="comment">// have to contract this</span>
<a name="l00865"></a>00865     <span class="comment">// marginalised children (if any) will still be attached</span>
<a name="l00866"></a>00866     
<a name="l00867"></a>00867 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00868"></a>00868 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tI did not split on a dimension to take out, or I am a leaf, so need to contract box&quot;</span> &lt;&lt; std::endl;
<a name="l00869"></a>00869       std::cout &lt;&lt; <span class="stringliteral">&quot;\tmy box is &quot;</span> &lt;&lt; box &lt;&lt; std::endl;
<a name="l00870"></a>00870 <span class="preprocessor">    #endif</span>
<a name="l00871"></a>00871 <span class="preprocessor"></span>    
<a name="l00872"></a>00872     <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l00873"></a>00873     <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l00874"></a>00874   
<a name="l00875"></a>00875     <span class="keywordtype">int</span> newDims = dim - outDims.size();
<a name="l00876"></a>00876     ivector newBox = ivector(newDims); 
<a name="l00877"></a>00877     <span class="keywordtype">int</span> index = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(newBox);
<a name="l00878"></a>00878     <span class="keywordtype">int</span> oldindex = boxLB;
<a name="l00879"></a>00879   
<a name="l00880"></a>00880     <span class="comment">// put in the upper and lower bounds for the new box</span>
<a name="l00881"></a>00881     <span class="comment">// for each dimension that stays  </span>
<a name="l00882"></a>00882     <span class="keywordflow">for</span> (; oldindex &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box); oldindex++) {
<a name="l00883"></a>00883       std::vector&lt;int&gt;::const_iterator fit 
<a name="l00884"></a>00884       = find (outDims.begin(), outDims.end(), (oldindex - boxLB + 1));
<a name="l00885"></a>00885       <span class="keywordflow">if</span> (!(fit &lt; outDims.end())) { <span class="comment">// keep this one</span>
<a name="l00886"></a>00886         newBox[index] = box[oldindex];
<a name="l00887"></a>00887         index++;
<a name="l00888"></a>00888       }
<a name="l00889"></a>00889     }
<a name="l00890"></a>00890     
<a name="l00891"></a>00891     <span class="comment">// find the volume we missed</span>
<a name="l00892"></a>00892     cxsc::real missingVol = <a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(box)/<a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(newBox);
<a name="l00893"></a>00893     
<a name="l00894"></a>00894 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00895"></a>00895 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tnew box is &quot;</span> &lt;&lt; newBox &lt;&lt; std::endl;
<a name="l00896"></a>00896       std::cout &lt;&lt; <span class="stringliteral">&quot;\tmissing volume is &quot;</span> &lt;&lt; missingVol &lt;&lt; std::endl;
<a name="l00897"></a>00897 <span class="preprocessor">    #endif</span>
<a name="l00898"></a>00898 <span class="preprocessor"></span>    
<a name="l00899"></a>00899     <span class="comment">//store the child node locations and then temporarily detach them</span>
<a name="l00900"></a>00900     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* savedLC = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l00901"></a>00901     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* savedRC = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00902"></a>00902     <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00903"></a>00903     <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00904"></a>00904     
<a name="l00905"></a>00905     <span class="comment">// also need to store parent</span>
<a name="l00906"></a>00906     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* savedParent = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>();
<a name="l00907"></a>00907     <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = NULL;
<a name="l00908"></a>00908     
<a name="l00909"></a>00909 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00910"></a>00910 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tcurrent range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00911"></a>00911 <span class="preprocessor">    #endif</span>
<a name="l00912"></a>00912 <span class="preprocessor"></span>  
<a name="l00913"></a>00913     cxsc::real temp = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l00914"></a>00914     
<a name="l00915"></a>00915     temp *= missingVol;
<a name="l00916"></a>00916     
<a name="l00917"></a>00917 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00918"></a>00918 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;scaled up range is &quot;</span> &lt;&lt; temp &lt;&lt; std::endl;
<a name="l00919"></a>00919 <span class="preprocessor">    #endif</span>
<a name="l00920"></a>00920 <span class="preprocessor"></span>    
<a name="l00921"></a>00921     <span class="comment">// replace contents of this with contents of a newly made node  </span>
<a name="l00922"></a>00922     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> 
<a name="l00923"></a>00923         tempNode( <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(newBox, temp) );
<a name="l00924"></a>00924     this-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(tempNode);
<a name="l00925"></a>00925     
<a name="l00926"></a>00926 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00927"></a>00927 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\tafter contracting, my box is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l00928"></a>00928       std::cout &lt;&lt; <span class="stringliteral">&quot;\tand after scaling up my range ,&quot;</span>;
<a name="l00929"></a>00929       std::cout &lt;&lt; <span class="stringliteral">&quot;\n\tmy range is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a> &lt;&lt; std::endl;
<a name="l00930"></a>00930 <span class="preprocessor">    #endif</span>
<a name="l00931"></a>00931 <span class="preprocessor"></span>    
<a name="l00932"></a>00932     <span class="comment">// put the child pointers back, and reattach to parent</span>
<a name="l00933"></a>00933     <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = savedLC;
<a name="l00934"></a>00934     <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = savedRC;
<a name="l00935"></a>00935     <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = savedParent;
<a name="l00936"></a>00936     
<a name="l00937"></a>00937   } <span class="comment">// finished else</span>
<a name="l00938"></a>00938   
<a name="l00939"></a>00939   <span class="comment">//if we are the root, recursively rename everything</span>
<a name="l00940"></a>00940   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>() == NULL) {
<a name="l00941"></a>00941     <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l00942"></a>00942 <span class="preprocessor">    #ifdef MARG_OUTPUT</span>
<a name="l00943"></a>00943 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;\nNow recursively rename everything from me down\n\n&quot;</span> &lt;&lt; std::endl;
<a name="l00944"></a>00944 <span class="preprocessor">    #endif</span>
<a name="l00945"></a>00945 <span class="preprocessor"></span>  }
<a name="l00946"></a>00946 }
<a name="l00947"></a>00947 
<a name="l00948"></a>00948 
<a name="l00949"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a185405d2c7b3231a75b33ec249292e2d">00949</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a185405d2c7b3231a75b33ec249292e2d" title="Non-public version of normalisation.">RealMappedSPnode::_normalise</a>()
<a name="l00950"></a>00950 {
<a name="l00951"></a>00951   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00952"></a>00952     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l00953"></a>00953       <span class="stringliteral">&quot;RealMappedSPnode::_normalise()&quot;</span>);
<a name="l00954"></a>00954   }
<a name="l00955"></a>00955   
<a name="l00956"></a>00956   cxsc::real normaliser = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a972c5dbc0bedd9cad3af4f2af43be277" title="Get the total absolute &quot;area&quot; for the leaves of this of the real ranges and boxes.">getTotalAbsLeafAreaRangeWithBox</a>();
<a name="l00957"></a>00957   <span class="keywordflow">if</span> (normaliser == cxsc::Infinity) {
<a name="l00958"></a>00958     <span class="keywordflow">throw</span> std::runtime_error(
<a name="l00959"></a>00959       <span class="stringliteral">&quot;RealMappedSPnode::_normalise() : Normalising constant is Infinity&quot;</span>);
<a name="l00960"></a>00960   }
<a name="l00961"></a>00961   <span class="keywordflow">if</span> (normaliser &lt;= 0.0) {
<a name="l00962"></a>00962     <span class="keywordflow">throw</span> std::runtime_error(
<a name="l00963"></a>00963       <span class="stringliteral">&quot;RealMappedSPnode::_normalise() : Normalising constant is &lt;= 0.0&quot;</span>);
<a name="l00964"></a>00964   }
<a name="l00965"></a>00965   (*this) /= normaliser;
<a name="l00966"></a>00966 }
<a name="l00967"></a>00967 
<a name="l00968"></a>00968 <span class="comment">// L1 distance between this and another node, with the root counters for normalisers</span>
<a name="l00969"></a>00969 <span class="comment">// no checks on boxes since this should done by another function that calls this one</span>
<a name="l00970"></a>00970 <span class="comment">// no checks null, empty extra - will just explode if there is a problem</span>
<a name="l00971"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747">00971</a> cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747" title="Accumulate L1 distance between leaf descendents of this and leaf descendents of node pointed to by ot...">RealMappedSPnode::_getL1distance</a>(
<a name="l00972"></a>00972         cxsc::dotprecision&amp; disL1,
<a name="l00973"></a>00973         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> * <span class="keyword">const</span> other)<span class="keyword"> const</span>
<a name="l00974"></a>00974 <span class="keyword"></span>{
<a name="l00975"></a>00975 <span class="preprocessor">  #ifdef DEBUG_L1</span>
<a name="l00976"></a>00976 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;\nIn _getL1distance, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00977"></a>00977 <span class="preprocessor">  #endif</span>
<a name="l00978"></a>00978 <span class="preprocessor"></span>  
<a name="l00979"></a>00979   <span class="comment">// other is not a leaf</span>
<a name="l00980"></a>00980   <span class="keywordflow">if</span> (!other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00981"></a>00981     
<a name="l00982"></a>00982 <span class="preprocessor">    #ifdef DEBUG_L1</span>
<a name="l00983"></a>00983 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;Other is not a leaf, other name is &quot;</span> &lt;&lt; other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l00984"></a>00984 <span class="preprocessor">    #endif</span>
<a name="l00985"></a>00985 <span class="preprocessor"></span>    
<a name="l00986"></a>00986     <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l00987"></a>00987       
<a name="l00988"></a>00988 <span class="preprocessor">      #ifdef DEBUG_L1</span>
<a name="l00989"></a>00989 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;I am a leaf&quot;</span> &lt;&lt; std::endl;
<a name="l00990"></a>00990 <span class="preprocessor">      #endif</span>
<a name="l00991"></a>00991 <span class="preprocessor"></span>    
<a name="l00992"></a>00992       <span class="comment">// turn it around and use nodeL1Distance with other</span>
<a name="l00993"></a>00993       other-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">nodeL1Distance</a>(disL1, <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>());
<a name="l00994"></a>00994     }
<a name="l00995"></a>00995     
<a name="l00996"></a>00996     <span class="keywordflow">else</span> { <span class="comment">// I am not a leaf, so recurse</span>
<a name="l00997"></a>00997     
<a name="l00998"></a>00998 <span class="preprocessor">      #ifdef DEBUG_L1</span>
<a name="l00999"></a>00999 <span class="preprocessor"></span>        std::cout &lt;&lt; <span class="stringliteral">&quot;I am not a leaf: recursing&quot;</span> &lt;&lt; std::endl;
<a name="l01000"></a>01000 <span class="preprocessor">      #endif</span>
<a name="l01001"></a>01001 <span class="preprocessor"></span>      
<a name="l01002"></a>01002       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747" title="Accumulate L1 distance between leaf descendents of this and leaf descendents of node pointed to by ot...">_getL1distance</a>(disL1, other-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01003"></a>01003       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747" title="Accumulate L1 distance between leaf descendents of this and leaf descendents of node pointed to by ot...">_getL1distance</a>(disL1, other-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01004"></a>01004     }
<a name="l01005"></a>01005   }
<a name="l01006"></a>01006   
<a name="l01007"></a>01007   <span class="keywordflow">else</span> { <span class="comment">// other is a leaf</span>
<a name="l01008"></a>01008   
<a name="l01009"></a>01009 <span class="preprocessor">    #ifdef DEBUG_L1</span>
<a name="l01010"></a>01010 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;Other is a leaf, other name is &quot;</span> &lt;&lt; other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01011"></a>01011 <span class="preprocessor">    #endif</span>
<a name="l01012"></a>01012 <span class="preprocessor"></span>    
<a name="l01013"></a>01013     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">nodeL1Distance</a>(disL1, other-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>());
<a name="l01014"></a>01014   
<a name="l01015"></a>01015   }
<a name="l01016"></a>01016   
<a name="l01017"></a>01017   <span class="keywordflow">return</span> disL1;
<a name="l01018"></a>01018 }
<a name="l01019"></a>01019 
<a name="l01020"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a">01020</a> cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">RealMappedSPnode::nodeL1Distance</a>(
<a name="l01021"></a>01021                 cxsc::dotprecision&amp; disL1,
<a name="l01022"></a>01022                 cxsc::real other_v)<span class="keyword"> const</span>
<a name="l01023"></a>01023 <span class="keyword"></span>{
<a name="l01024"></a>01024 <span class="preprocessor">  #ifdef DEBUG_L1</span>
<a name="l01025"></a>01025 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;\nIn nodeL1distance, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() 
<a name="l01026"></a>01026     &lt;&lt; <span class="stringliteral">&quot;, and disL1 is &quot;</span> &lt;&lt; (rnd(disL1)) &lt;&lt; endl;
<a name="l01027"></a>01027     std::cout &lt;&lt; <span class="stringliteral">&quot;\nother_v is &quot;</span> &lt;&lt; other_v &lt;&lt; std::endl;
<a name="l01028"></a>01028 <span class="preprocessor">  #endif</span>
<a name="l01029"></a>01029 <span class="preprocessor"></span>    
<a name="l01030"></a>01030   <span class="comment">// this is not a leaf</span>
<a name="l01031"></a>01031   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l01032"></a>01032     
<a name="l01033"></a>01033 <span class="preprocessor">    #ifdef DEBUG_L1</span>
<a name="l01034"></a>01034 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;I am not a leaf&quot;</span> &lt;&lt; std::endl;
<a name="l01035"></a>01035 <span class="preprocessor">    #endif</span>
<a name="l01036"></a>01036 <span class="preprocessor"></span>    
<a name="l01037"></a>01037     disL1 = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">nodeL1Distance</a>(disL1,  other_v );
<a name="l01038"></a>01038     disL1 = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">nodeL1Distance</a>(disL1, other_v );
<a name="l01039"></a>01039   }
<a name="l01040"></a>01040   <span class="keywordflow">else</span> { <span class="comment">// this is a leaf</span>
<a name="l01041"></a>01041   
<a name="l01042"></a>01042     <span class="comment">// for me, calculate difference to other_v</span>
<a name="l01043"></a>01043     accumulate(disL1, 
<a name="l01044"></a>01044         cxsc::abs(cxsc::abs(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>) - cxsc::abs(other_v)),
<a name="l01045"></a>01045         <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>() );
<a name="l01046"></a>01046       
<a name="l01047"></a>01047 <span class="preprocessor">    #ifdef DEBUG_L1</span>
<a name="l01048"></a>01048 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;I am a leaf, my range value is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>() &lt;&lt; endl;
<a name="l01049"></a>01049       std::cout &lt;&lt; <span class="stringliteral">&quot;, and other value is &quot;</span> &lt;&lt; other_v &lt;&lt; std::endl;
<a name="l01050"></a>01050       std::cout &lt;&lt; <span class="stringliteral">&quot;my volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>() &lt;&lt; endl;
<a name="l01051"></a>01051       std::cout &lt;&lt; <span class="stringliteral">&quot;adding the following to disL1: &quot;</span>;
<a name="l01052"></a>01052       std::cout &lt;&lt; (cxsc::abs(cxsc::abs(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>) - cxsc::abs(other_v))*<a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>()) &lt;&lt; std::endl;
<a name="l01053"></a>01053 <span class="preprocessor">    #endif</span>
<a name="l01054"></a>01054 <span class="preprocessor"></span>    
<a name="l01055"></a>01055   }
<a name="l01056"></a>01056   
<a name="l01057"></a>01057 <span class="preprocessor">  #ifdef DEBUG_L1</span>
<a name="l01058"></a>01058 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;disL1 is now: &quot;</span> &lt;&lt; (rnd(disL1)) &lt;&lt; std::endl;
<a name="l01059"></a>01059 <span class="preprocessor">  #endif</span>
<a name="l01060"></a>01060 <span class="preprocessor"></span>  
<a name="l01061"></a>01061   <span class="keywordflow">return</span> disL1;
<a name="l01062"></a>01062 }
<a name="l01063"></a>01063 
<a name="l01064"></a>01064 <span class="comment">// NEW JUNE 2012 for log posteriors</span>
<a name="l01065"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d">01065</a> cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d" title="Accumulate log likelihood using positive values from this and counts from spn.">RealMappedSPnode::_getLogLikelihood</a>(
<a name="l01066"></a>01066                 cxsc::dotprecision&amp; loglik,
<a name="l01067"></a>01067                 <span class="keywordtype">int</span>&amp; isnan, <span class="keywordtype">int</span>&amp; isposinf, <span class="keywordtype">int</span>&amp; isneginf,
<a name="l01068"></a>01068                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)<span class="keyword"> const</span>
<a name="l01069"></a>01069 <span class="keyword"></span>{
<a name="l01070"></a>01070 <span class="preprocessor">  #ifdef DEBUG_LL</span>
<a name="l01071"></a>01071 <span class="preprocessor"></span>    std::cout &lt;&lt; <span class="stringliteral">&quot;\nIn _getLogLikelihood, I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() 
<a name="l01072"></a>01072     &lt;&lt; <span class="stringliteral">&quot;, and loglik is &quot;</span> &lt;&lt; (rnd(loglik)) &lt;&lt; endl;
<a name="l01073"></a>01073     &lt;&lt; <span class="stringliteral">&quot;, and isnan is &quot;</span> &lt;&lt; isnan &lt;&lt; <span class="stringliteral">&quot;, and isinf is &quot;</span> &lt;&lt; isinf &lt;&lt;  &lt;&lt; endl;
<a name="l01074"></a>01074     std::cout &lt;&lt; <span class="stringliteral">&quot;\nspn is &quot;</span> &lt;&lt; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; std::endl;
<a name="l01075"></a>01075 <span class="preprocessor">  #endif</span>
<a name="l01076"></a>01076 <span class="preprocessor"></span>  
<a name="l01077"></a>01077   <span class="comment">// not already nan , and neither this nor spn is a leaf, so we recurse</span>
<a name="l01078"></a>01078   <span class="keywordflow">if</span> (!isnan &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l01079"></a>01079     
<a name="l01080"></a>01080 <span class="preprocessor">    #ifdef DEBUG_LL</span>
<a name="l01081"></a>01081 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;All okay and neither I nor spn is a leaf&quot;</span> &lt;&lt; std::endl;
<a name="l01082"></a>01082 <span class="preprocessor">    #endif</span>
<a name="l01083"></a>01083 <span class="preprocessor"></span>    
<a name="l01084"></a>01084     loglik = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d" title="Accumulate log likelihood using positive values from this and counts from spn.">_getLogLikelihood</a>(loglik, 
<a name="l01085"></a>01085                 isnan, isposinf, isneginf,
<a name="l01086"></a>01086                 spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>() );
<a name="l01087"></a>01087     <span class="keywordflow">if</span> (!isnan) { <span class="comment">// check again on isnan</span>
<a name="l01088"></a>01088       loglik = <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d" title="Accumulate log likelihood using positive values from this and counts from spn.">_getLogLikelihood</a>(loglik, 
<a name="l01089"></a>01089                 isnan, isposinf, isneginf,
<a name="l01090"></a>01090                 spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>() );
<a name="l01091"></a>01091     }
<a name="l01092"></a>01092   }
<a name="l01093"></a>01093   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!isnan) { <span class="comment">// this is a leaf OR spn is a leaf - can already be inf</span>
<a name="l01094"></a>01094   
<a name="l01095"></a>01095     <span class="comment">// add in nj*log(hj) for me</span>
<a name="l01096"></a>01096     <span class="keywordtype">size_t</span> n = spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01097"></a>01097     
<a name="l01098"></a>01098 <span class="preprocessor">    #ifdef DEBUG_LL</span>
<a name="l01099"></a>01099 <span class="preprocessor"></span>      std::cout &lt;&lt; <span class="stringliteral">&quot;I am a leaf, my range value is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>() &lt;&lt; endl;
<a name="l01100"></a>01100       std::cout &lt;&lt; <span class="stringliteral">&quot;, and spn-&gt;getCounter is &quot;</span> &lt;&lt; n &lt;&lt; std::endl;
<a name="l01101"></a>01101 <span class="preprocessor">    #endif</span>
<a name="l01102"></a>01102 <span class="preprocessor"></span>      
<a name="l01103"></a>01103     <span class="keywordflow">if</span> (n &gt; 0) {
<a name="l01104"></a>01104       
<a name="l01105"></a>01105       <span class="comment">/* if already +infinity we can reset this to nan (- range) or -infinity (0 range)</span>
<a name="l01106"></a>01106 <span class="comment">      * if already -infinity we can reset this to nan (-range) */</span>
<a name="l01107"></a>01107     
<a name="l01108"></a>01108       real rng = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>();
<a name="l01109"></a>01109       
<a name="l01110"></a>01110       <span class="keywordflow">if</span> (rng &lt; 0.0) { <span class="comment">// nan whenever we find a negative range even if n ==0;</span>
<a name="l01111"></a>01111         isnan = 1; <span class="comment">// change by ref</span>
<a name="l01112"></a>01112 <span class="preprocessor">        #ifdef DEBUG_LL</span>
<a name="l01113"></a>01113 <span class="preprocessor"></span>          std::cout &lt;&lt; <span class="stringliteral">&quot;rng &lt; 0.0: adding nothing to log lik, &quot;</span>;
<a name="l01114"></a>01114           std::cout &lt;&lt; <span class="stringliteral">&quot;and isnan = &quot;</span> &lt;&lt; isnan &lt;&lt; std::endl;
<a name="l01115"></a>01115           std::cout &lt;&lt; <span class="stringliteral">&quot;loglik is now: &quot;</span> &lt;&lt; (rnd(loglik)) &lt;&lt; std::endl;
<a name="l01116"></a>01116 <span class="preprocessor">        #endif</span>
<a name="l01117"></a>01117 <span class="preprocessor"></span>      }
<a name="l01118"></a>01118       
<a name="l01119"></a>01119       <span class="comment">// -inf will be &lt; 0 and also IsInfinity so the else if gives +infs</span>
<a name="l01120"></a>01120       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!isneginf) {
<a name="l01121"></a>01121         <span class="keywordflow">if</span> ( gsl_isinf(_double(rng)) ) {
<a name="l01122"></a>01122           <span class="keywordflow">if</span> (!isposinf ) {
<a name="l01123"></a>01123             <span class="comment">// only reset to +ve infinity if not already infinity (+ve or n-ve)</span>
<a name="l01124"></a>01124             isposinf = 1; <span class="comment">// change by ref</span>
<a name="l01125"></a>01125             loglik = cxsc::dotprecision(cxsc::Infinity);
<a name="l01126"></a>01126 <span class="preprocessor">            #ifdef DEBUG_LL</span>
<a name="l01127"></a>01127 <span class="preprocessor"></span>              std::cout &lt;&lt; <span class="stringliteral">&quot;rng is Infinity: log lik = inf, &quot;</span>;
<a name="l01128"></a>01128               std::cout &lt;&lt; <span class="stringliteral">&quot;and isposinf = &quot;</span> &lt;&lt; isposinf &lt;&lt; std::endl;
<a name="l01129"></a>01129               std::cout &lt;&lt; <span class="stringliteral">&quot;loglik is now: &quot;</span> &lt;&lt; (rnd(loglik)) &lt;&lt; std::endl;
<a name="l01130"></a>01130 <span class="preprocessor">            #endif</span>
<a name="l01131"></a>01131 <span class="preprocessor"></span>          }
<a name="l01132"></a>01132         }
<a name="l01133"></a>01133         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (rng &gt; 0.0) { <span class="comment">// not +ve infinity</span>
<a name="l01134"></a>01134           <span class="keywordflow">if</span> (!isposinf) {
<a name="l01135"></a>01135             accumulate(loglik, (1.0*n), <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">cxsc::ln</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3e5c6ff11f8640c1a7b3a363e9f841bd" title="Accessor for the range.">getRange</a>()));
<a name="l01136"></a>01136 <span class="preprocessor">            #ifdef DEBUG_LL</span>
<a name="l01137"></a>01137 <span class="preprocessor"></span>              std::cout &lt;&lt; <span class="stringliteral">&quot;adding the following to log lik: &quot;</span>;
<a name="l01138"></a>01138               std::cout &lt;&lt; (n * <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">cxsc::ln</a>(rng)) &lt;&lt; std::endl;
<a name="l01139"></a>01139 <span class="preprocessor">            #endif</span>
<a name="l01140"></a>01140 <span class="preprocessor"></span>          }
<a name="l01141"></a>01141         }
<a name="l01142"></a>01142         <span class="keywordflow">else</span> { <span class="comment">// range must be 0.0 </span>
<a name="l01143"></a>01143           isneginf = 1; <span class="comment">// change by ref</span>
<a name="l01144"></a>01144           loglik = cxsc::dotprecision(-cxsc::Infinity);
<a name="l01145"></a>01145 <span class="preprocessor">          #ifdef DEBUG_LL</span>
<a name="l01146"></a>01146 <span class="preprocessor"></span>            std::cout &lt;&lt; <span class="stringliteral">&quot;rng is 0.0: log lik = -inf, &quot;</span>;
<a name="l01147"></a>01147             std::cout &lt;&lt; <span class="stringliteral">&quot;and isneginf = &quot;</span> &lt;&lt; isneginf &lt;&lt; std::endl;
<a name="l01148"></a>01148             std::cout &lt;&lt; <span class="stringliteral">&quot;loglik is now: &quot;</span> &lt;&lt; (rnd(loglik)) &lt;&lt; std::endl;
<a name="l01149"></a>01149 <span class="preprocessor">          #endif</span>
<a name="l01150"></a>01150 <span class="preprocessor"></span>        }
<a name="l01151"></a>01151       }
<a name="l01152"></a>01152     }
<a name="l01153"></a>01153       
<a name="l01154"></a>01154   }
<a name="l01155"></a>01155   
<a name="l01156"></a>01156   <span class="keywordflow">return</span> loglik;
<a name="l01157"></a>01157 }
<a name="l01158"></a>01158 
<a name="l01159"></a>01159 
<a name="l01160"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc">01160</a> std::ostream&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">RealMappedSPnode::oneLineOutput</a>(std::ostream&amp; os, <span class="keywordtype">int</span> level)<span class="keyword"> const</span>
<a name="l01161"></a>01161 <span class="keyword"></span>{
<a name="l01162"></a>01162   <span class="comment">// do me</span>
<a name="l01163"></a>01163   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; ++i) { os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>; }
<a name="l01164"></a>01164   os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; <span class="stringliteral">&quot;\tRange: &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>;
<a name="l01165"></a>01165   os &lt;&lt; <span class="stringliteral">&quot;\tbox: &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() &lt;&lt; std::endl;
<a name="l01166"></a>01166   
<a name="l01167"></a>01167   <span class="comment">// do children</span>
<a name="l01168"></a>01168   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">oneLineOutput</a>(os, level+1);
<a name="l01169"></a>01169   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">oneLineOutput</a>(os, level+1);
<a name="l01170"></a>01170   
<a name="l01171"></a>01171   <span class="keywordflow">return</span> os;
<a name="l01172"></a>01172 }
<a name="l01173"></a>01173 
<a name="l01174"></a>01174 <span class="comment">// uses comparison operator for nodes</span>
<a name="l01175"></a><a class="code" href="namespacesubpavings.shtml#ab16dccf5fd03eee9a6071072432e38bc">01175</a> <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#ab16dccf5fd03eee9a6071072432e38bc" title="Less-than operator using pointers.">subpavings::nodePtrCompare</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a>* lhs,
<a name="l01176"></a>01176       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a>* rhs)
<a name="l01177"></a>01177 {
<a name="l01178"></a>01178   <span class="keywordflow">return</span> ((*lhs) &lt; (*rhs));
<a name="l01179"></a>01179 } 
<a name="l01180"></a>01180 
<a name="l01181"></a>01181 <span class="comment">// Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l01182"></a>01182 <span class="keyword">template</span> &lt;&gt;
<a name="l01183"></a>01183 <span class="keywordtype">void</span> std::swap(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a> &amp; s1, 
<a name="l01184"></a>01184       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a> &amp; s2) <span class="comment">// throw ()</span>
<a name="l01185"></a>01185   {
<a name="l01186"></a>01186     s1.<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(s2);
<a name="l01187"></a>01187   }
<a name="l01188"></a>01188 
<a name="l01189"></a>01189 
<a name="l01190"></a>01190 
<a name="l01191"></a>01191 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="realmappedspnode_8cpp.shtml">realmappedspnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
