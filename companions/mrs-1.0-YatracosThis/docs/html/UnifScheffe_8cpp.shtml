<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: UnifScheffe.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('UnifScheffe_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">UnifScheffe.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="UnifScheffe_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="UnifScheffe_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="UnifScheffe.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="UnifScheffe_8cpp_source.shtml#l00043">43</a> of file <a class="el" href="UnifScheffe_8cpp_source.shtml">UnifScheffe.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00548">subpavings::AdaptiveHistogramValidation::getRootVcounter()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00641">subpavings::AdaptiveHistogramValidation::insertFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03367">subpavings::AdaptiveHistogramValidation::outputToTxtTabs()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
  <span class="keywordflow">if</span> ( argc != 9 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UnifScheffe n d dataSeed mixShape simNum critLeaves maxCheck validDataFrac&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[3]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> shape = atoi(argv[4]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[5]); <span class="comment">//which data set </span>
   <span class="keywordtype">int</span> critLeaves = atoi(argv[6]);
  <span class="keywordtype">int</span> maxCheck = atoi(argv[7]);
  <span class="keywordtype">double</span> validDataFrac = atof(argv[8]);

   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   std::ostringstream stm;
  stm &lt;&lt; simNum;
  
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }


   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="keywordtype">double</span> rootBoxVol = (myPart.getSubPaving())-&gt;nodeVolume();
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="keywordtype">size_t</span> PartSize;
   vector&lt;int&gt; holesLoc;

   <span class="comment">// mixture shape</span>
   <span class="keywordtype">string</span> mixShape;
  <span class="keywordflow">if</span> (shape == 1) { 
    mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; 
    holesLoc.push_back(1);
    holesLoc.push_back(1);
  }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape == 2) {
    mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>;
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 7; i++) { holesLoc.push_back(1);} 
  }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==3) { 
    mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>; 
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 7; i++) { holesLoc.push_back(1);}
    holesLoc[1]=0;
    holesLoc[3]=0;
    holesLoc[5]=0;
  } 
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==4) {
    mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; 
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 63 ; i++) { holesLoc.push_back(1);}
    holesLoc[6]=0;
    holesLoc[8]=0;
    holesLoc[10]=0;
    holesLoc[17]=0;
    holesLoc[20]=0;
    holesLoc[24]=0;
    holesLoc[34]=0;
    holesLoc[40]=0;
    holesLoc[44]=0;
    holesLoc[47]=0;
    holesLoc[51]=0;
    holesLoc[55]=0;
    holesLoc[59]=0;
    holesLoc[62]=0;
  }       

  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture   </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
   myPart.getSubPaving()-&gt;getLeaves(trueLeaves); <span class="comment">// fill the container</span>
   
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; holesLoc.size(); i++) {
    <span class="keywordflow">if</span> (holesLoc[i] == 1) {
      Pboxes.push_back(trueLeaves[i]-&gt;getBox());
    }
  }
  PartSize = Pboxes.size();
  <span class="comment">// get weight of mixture components</span>
  <span class="keywordtype">double</span> weight = 1.0/(1.0*PartSize); 

  cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> validData;
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> trainData;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (n + int(n*validDataFrac)); i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
         <span class="keywordflow">if</span> ( i &gt;= <span class="keywordtype">int</span>(n*validDataFrac) &amp;&amp; i &lt; n) {trainData.push_back(thisrv); }
         <span class="keywordflow">if</span> ( i&gt;= n ) {validData.push_back(thisrv);} 
   }  <span class="comment">// data  should be in theData</span>
   cout &lt;&lt; <span class="stringliteral">&quot;Training data: &quot;</span> &lt;&lt; trainData.size() &lt;&lt; <span class="stringliteral">&quot; Validation data: &quot;</span> &lt;&lt; validData.size() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
   
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; int(n/3); i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        
   }  <span class="comment">// data  should be in theData</span>
   
   
   
<span class="comment">//==================Hold-out MDE===========================================</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
  <span class="comment">//containers for output needed</span>
  vector&lt;real&gt; IAEV;
  vector&lt;int&gt; NumLeafNodesV;
  vector&lt;double&gt; timings;
  <span class="keywordtype">double</span> timing = 0;
  
  <span class="comment">// stopping criteria </span>
  <span class="keywordtype">bool</span> stopCrit = <span class="keyword">true</span>;
  <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
  
  <span class="comment">//maximum number of leaf nodes allowed</span>
  <span class="keywordtype">int</span> holdOutCount = int(n*validDataFrac);
  <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
  <span class="comment">//cout &lt;&lt; n-holdOutCount &lt;&lt; &quot; training data and &quot; </span>
  <span class="comment">//    &lt;&lt; holdOutCount &lt;&lt; &quot; validation data inserted.&quot; &lt;&lt; endl; </span>
  <span class="comment">//size_t maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); // temporarily</span>
  <span class="keywordtype">size_t</span> maxLeafNodes = n;
  <span class="comment">//cout &lt;&lt; &quot;max leaf nodes: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>

  <span class="comment">// indicators</span>
   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion5 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion6 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion7 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion8 = <span class="keyword">false</span>;
   
   
   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit5 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit6 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit7 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit8 = <span class="keyword">false</span>;
   
   
   <span class="comment">// comparison objects</span>
   <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> compCount;
   <a class="code" href="classsubpavings_1_1CompVolVal.shtml" title="Class comparing on volume of box of node.">CompVolVal</a> compVol;
   <a class="code" href="classsubpavings_1_1CompAreaVal.shtml" title="Class comparing the area of a histogram.">CompAreaVal</a> compArea;
   <a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMassVal</a> compMeanMass;
   <a class="code" href="classsubpavings_1_1CompCovarVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarVal</a> compCovarMass;
   <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassVal</a> compH;
   <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiamVal</a> compHD;
   <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   

  
  <span class="keywordtype">int</span> finalK = 1;
  <span class="comment">//CritLargestCountVal_LTE critCount(finalK);</span>
  <span class="keywordtype">size_t</span> minChildPoints = 0;
  CritLeavesVal_GTE critCount(critLeaves);

  <span class="comment">//container for scheffe tournament candidates</span>
  vector&lt;AdaptiveHistogramValidation&gt; optHist;

  cout &lt;&lt; <span class="stringliteral">&quot;-----PQ1------&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal1(pavingBox);
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist1(pavingBox);
  <span class="keywordtype">int</span> m = 1;
  successfulInsertion1 = myHistVal1.insertFromRVec(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion1) {
    clock_t start, end;
    start = clock();

    cout &lt;&lt; n-myHistVal1.getRootVcounter() &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
    &lt;&lt; myHistVal1.getRootVcounter() &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
  
    <span class="comment">//make sure later that the data inserted and counter/statistics computations are correct</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Total data: &quot;</span> &lt;&lt; myHistVal1.getDataCollection().size() &lt;&lt; endl;

    <span class="comment">//successfulPQSplit1 = myHistVal1.prioritySplitAndEstimate(compVol, </span>
    <span class="comment">//                    critCount, NOLOG, minChildPoints, </span>
    <span class="comment">//                     0.0, stopCrit, myPart, weight, holesLoc, </span>
    <span class="comment">//                     m, simNum, </span>
    <span class="comment">//                     maxLeafNodes, maxCheck, optHist1);</span>
    end = clock();
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit1) { 
      <span class="keywordtype">string</span> hist = <span class="stringliteral">&quot;HistPQ1&quot;</span>;
      <span class="comment">//hist += stm.str();</span>
      hist += <span class="stringliteral">&quot;.txt&quot;</span>;
      optHist1.outputToTxtTabs(hist);
      optHist.push_back(optHist1); timings.push_back(timing); }
  }
  
  <span class="comment">/*</span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ2 &quot; &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal2(pavingBox);</span>
<span class="comment">  AdaptiveHistogramValidation optHist2(pavingBox);   </span>
<span class="comment">  m=2;</span>
<span class="comment">  successfulInsertion2 = myHistVal2.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  if (successfulInsertion2) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    successfulPQSplit2 = myHistVal2.prioritySplitAndEstimate(compVol, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc,</span>
<span class="comment">                         m, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist2);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit2) { </span>
<span class="comment">      optHist2.outputToTxtTabs(&quot;HistPQ2.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist2); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ3&quot; &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal3(pavingBox);   </span>
<span class="comment">  AdaptiveHistogramValidation optHist3(pavingBox);</span>
<span class="comment">  successfulInsertion3 = myHistVal3.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  if (successfulInsertion3) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    m=3;</span>
<span class="comment">    successfulPQSplit3 = myHistVal3.prioritySplitAndEstimateWithSwitch(compVol, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc,  </span>
<span class="comment">                         m, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist3);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit3) { </span>
<span class="comment">      optHist3.outputToTxtTabs(&quot;HistPQ3.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist3); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ4&quot; &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal4(pavingBox);</span>
<span class="comment">  AdaptiveHistogramValidation optHist4(pavingBox);</span>
<span class="comment">  successfulInsertion4 = myHistVal4.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment"></span>
<span class="comment">  if (successfulInsertion4) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    successfulPQSplit4 = myHistVal4.prioritySplitAndEstimateWithSwitch(compArea, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc, </span>
<span class="comment">                         4, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist4);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit4) { </span>
<span class="comment">      optHist4.outputToTxtTabs(&quot;HistPQ4.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist4); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ5&quot; &lt;&lt;  endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal5(pavingBox, holdAllStats);   </span>
<span class="comment">  AdaptiveHistogramValidation optHist5(pavingBox, holdAllStats);</span>
<span class="comment">  successfulInsertion5 = myHistVal5.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  //cout &lt;&lt; myHistVal5.getHoldAllStats() &lt;&lt; endl;</span>
<span class="comment">  //cout &lt;&lt; myHistVal5.getSubPaving() &lt;&lt; endl;</span>
<span class="comment">  if (successfulInsertion5) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    int m = 5;</span>
<span class="comment">    successfulPQSplit5 = myHistVal5.prioritySplitAndEstimateWithSwitch(compMeanMass, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         minChildPoints, 0.0, stopCrit,myPart, weight, holesLoc, </span>
<span class="comment">                         m, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist5);</span>
<span class="comment"> </span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit5) { </span>
<span class="comment">      optHist5.outputToTxtTabs(&quot;HistPQ5.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist5); timings.push_back(timing);</span>
<span class="comment">    }</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ6&quot; &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal6(pavingBox, holdAllStats); </span>
<span class="comment">  AdaptiveHistogramValidation  optHist6(pavingBox, holdAllStats);</span>
<span class="comment">  successfulInsertion6 = myHistVal6.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  if (successfulInsertion6) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    successfulPQSplit6 = myHistVal6.prioritySplitAndEstimateWithSwitch(compCovarMass, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc, </span>
<span class="comment">                         6, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist6);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit6) { </span>
<span class="comment">      optHist6.outputToTxtTabs(&quot;HistPQ6.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist6); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ7&quot; &lt;&lt; endl &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal7(pavingBox, holdAllStats);   </span>
<span class="comment">  AdaptiveHistogramValidation optHist7(pavingBox, holdAllStats);</span>
<span class="comment">  </span>
<span class="comment">  successfulInsertion7 = myHistVal7.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  if (successfulInsertion7) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    successfulPQSplit7 = myHistVal7.prioritySplitAndEstimateWithSwitch(compH, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc,</span>
<span class="comment">                         7, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist7);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit7) { </span>
<span class="comment">      optHist7.outputToTxtTabs(&quot;HistPQ7.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist7); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;\nPQ8&quot; &lt;&lt; endl;</span>
<span class="comment">  // Put the data from the container into the histogram  </span>
<span class="comment">  AdaptiveHistogramValidation myHistVal8(pavingBox, holdAllStats);</span>
<span class="comment">  AdaptiveHistogramValidation optHist8(pavingBox, holdAllStats);</span>
<span class="comment">  successfulInsertion8 = myHistVal8.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment">  if (successfulInsertion8) {</span>
<span class="comment">    clock_t start, end;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    successfulPQSplit8 = myHistVal8.prioritySplitAndEstimateWithSwitch(compHD, </span>
<span class="comment">                        critCount, NOLOG, </span>
<span class="comment">                         0, 0.0, stopCrit, myPart, weight, holesLoc,</span>
<span class="comment">                         8, simNum, </span>
<span class="comment">                         maxLeafNodes, maxCheck, optHist8);</span>
<span class="comment">    end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    if (successfulPQSplit8) { </span>
<span class="comment">      optHist8.outputToTxtTabs(&quot;HistPQ8.txt&quot;);</span>
<span class="comment">      optHist.push_back(optHist8); timings.push_back(timing);}</span>
<span class="comment">  }</span>
<span class="comment">  </span>
<span class="comment">//================start the Scheffe tournament======================//</span>
<span class="comment">//  if (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3 &amp;&amp;</span>
<span class="comment">//    successfulPQSplit4 &amp;&amp; successfulPQSplit5 &amp;&amp; successfulPQSplit6 &amp;&amp;</span>
<span class="comment">//    successfulPQSplit7 &amp;&amp; successfulPQSplit8) {</span>
<span class="comment">  </span>
<span class="comment">  ofstream os;         // ofstream object</span>
<span class="comment">  os &lt;&lt; scientific;  // set formatting for input to oss</span>
<span class="comment">  os.precision(5);</span>
<span class="comment"></span>
<span class="comment">  vector&lt;real&gt; TrueDelta;</span>
<span class="comment">  AdaptiveHistogramVCollator coll;</span>
<span class="comment">  size_t agg = 0;</span>
<span class="comment">  vector&lt;real&gt; IAEMDE;</span>
<span class="comment">  vector&lt;real&gt; IAEMDEFull;</span>
<span class="comment"></span>
<span class="comment">  AdaptiveHistogramCollator collF;</span>
<span class="comment">  </span>
<span class="comment">  for (size_t i = 0; i &lt; optHist.size(); i++) {</span>
<span class="comment">    IAEMDE.push_back(optHist[i].getUnifIAE(myPart, weight, holesLoc, 0));</span>
<span class="comment">    IAEMDEFull.push_back(optHist[i].getUnifIAE(myPart, weight, holesLoc, 1));</span>
<span class="comment">    coll.addToCollationWithVal(optHist[i], 1, agg);</span>
<span class="comment"></span>
<span class="comment">    string shape = optHist[i].getLeafLevelsString();</span>
<span class="comment">    AdaptiveHistogram temp(pavingBox);</span>
<span class="comment">    temp.splitToShape(shape);</span>
<span class="comment">    temp.insertFromRVec(trainData, NOLOG);</span>
<span class="comment">    collF.addToCollation(temp);</span>
<span class="comment">  }</span>
<span class="comment"></span>
<span class="comment">  string thisShape = collF.getLeafLevelsString();</span>
<span class="comment">  AdaptiveHistogram validHist(pavingBox);</span>
<span class="comment">  validHist.splitToShape(thisShape);</span>
<span class="comment">  validHist.insertFromRVec(validData, NOLOG);</span>
<span class="comment">  collF.addToCollation(validHist);</span>
<span class="comment"></span>
<span class="comment">  cout &lt;&lt; &quot;Get the Yatracos set for theorem checks: &quot; &lt;&lt; endl;</span>
<span class="comment">  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecYatSet;</span>
<span class="comment"></span>
<span class="comment">  vector&lt;double&gt; maxDelta;</span>
<span class="comment">  vector&lt;double&gt;::iterator it;</span>
<span class="comment">  clock_t start, end;</span>
<span class="comment">  start = clock();</span>
<span class="comment">  coll.getMinDistEst(maxDelta, vecYatSet);</span>
<span class="comment">  end = clock();  </span>
<span class="comment">  timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">  cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">  timings.push_back(timing);  </span>
<span class="comment">  </span>
<span class="comment">  double minMaxDelta = 100;</span>
<span class="comment">  real minMinIAE = 100;</span>
<span class="comment">  int minPosIAE; </span>
<span class="comment">  int minPosDelta;</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;IAEMDE&quot; &lt;&lt; endl;</span>
<span class="comment">  for (size_t i = 0; i &lt; coll.getNumberCollated(); i++) {</span>
<span class="comment">    cout &lt;&lt; maxDelta[i] &lt;&lt; &quot;\t&quot; &lt;&lt; IAEMDE[i] &lt;&lt; endl;</span>
<span class="comment">    if (maxDelta[i] &lt; minMaxDelta) { minPosDelta = i+1; minMaxDelta = maxDelta[i]; }</span>
<span class="comment">    if (IAEMDE[i] &lt; minMinIAE) { minPosIAE = i+1; minMinIAE = IAEMDE[i]; }</span>
<span class="comment">  }</span>
<span class="comment"></span>
<span class="comment">  cout &lt;&lt; &quot;Min IAE at candidate &quot; &lt;&lt; minPosIAE &lt;&lt; endl;</span>
<span class="comment">  cout &lt;&lt; &quot;Min delta max at candidate &quot; &lt;&lt; minPosDelta &lt;&lt; endl;</span>
<span class="comment"></span>
<span class="comment">  vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; vecYatSetF;</span>
<span class="comment">  vector&lt;double&gt; maxDeltaF;</span>
<span class="comment">  collF.getMinDistEst(maxDeltaF, vecYatSetF);</span>
<span class="comment">  </span>
<span class="comment">  double minMaxDeltaF = 100;</span>
<span class="comment">  real minMinIAEF = 100;</span>
<span class="comment">  minPosIAE = 0; </span>
<span class="comment">  minPosDelta = 0;</span>
<span class="comment">  </span>
<span class="comment">  cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;IAEMDE&quot; &lt;&lt; endl;</span>
<span class="comment">  for (size_t i = 0; i &lt; coll.getNumberCollated(); i++) {</span>
<span class="comment">    cout &lt;&lt; maxDeltaF[i] &lt;&lt; &quot;\t&quot; &lt;&lt; IAEMDE[i] &lt;&lt; endl;</span>
<span class="comment">    if (maxDeltaF[i] &lt; minMaxDeltaF) { minPosDelta = i+1; minMaxDeltaF = maxDeltaF[i]; }</span>
<span class="comment">    if (IAEMDE[i] &lt; minMinIAEF) { minPosIAE = i+1; minMinIAEF = IAEMDE[i]; }</span>
<span class="comment">  }</span>
<span class="comment"></span>
<span class="comment">  cout &lt;&lt; &quot;Min IAE at candidate &quot; &lt;&lt; minPosIAE &lt;&lt; endl;</span>
<span class="comment">  cout &lt;&lt; &quot;Min delta max at candidate &quot; &lt;&lt; minPosDelta &lt;&lt; endl;</span>
<span class="comment">  </span>
<span class="comment">  </span>
<span class="comment"></span>
<span class="comment"></span>
<span class="comment">  //get the true Delta</span>
<span class="comment">  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator vecYatSetIt;</span>
<span class="comment">  real trueDelta = 0.0;</span>
<span class="comment">  if (!vecYatSet.empty()) {</span>
<span class="comment">    for (vecYatSetIt = vecYatSet.begin(); vecYatSetIt &lt; vecYatSet.end(); vecYatSetIt++) {</span>
<span class="comment">      real trueDeltaR = getUnifTrueDelta(myPart, weight, holesLoc, *vecYatSetIt);</span>
<span class="comment">      trueDeltaR = abs(trueDeltaR);</span>
<span class="comment">      //cout &lt;&lt; trueDeltaR &lt;&lt; &quot;\t&quot;;</span>
<span class="comment">      trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;</span>
<span class="comment">      //cout &lt;&lt; trueDelta &lt;&lt; endl; </span>
<span class="comment">    }</span>
<span class="comment">    cout &lt;&lt; &quot;Delta over the Yatracos set: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<span class="comment">  }</span>
<span class="comment">  else { trueDelta = -1; }</span>
<span class="comment">  </span>
<span class="comment">  string deltaFile;</span>
<span class="comment">  deltaFile = &quot;TrueDeltaAll&quot;;</span>
<span class="comment">  deltaFile += stm.str();</span>
<span class="comment">  deltaFile += &quot;.txt&quot;;</span>
<span class="comment">  os.open(deltaFile.c_str());</span>
<span class="comment">  os &lt;&lt; trueDelta &lt;&lt; endl;</span>
<span class="comment">  os &lt;&lt; flush;</span>
<span class="comment">  os.close();</span>
<span class="comment"></span>
<span class="comment"></span>
<span class="comment">  string IAEMDEFile = &quot;IAEMDEandDeltaMax&quot;;</span>
<span class="comment">  IAEMDEFile += stm.str();</span>
<span class="comment">  IAEMDEFile += &quot;.txt&quot;;</span>
<span class="comment">  os.open(IAEMDEFile.c_str());</span>
<span class="comment">  for (size_t i = 0; i &lt; IAEMDE.size(); i++) {</span>
<span class="comment">    os &lt;&lt; IAEMDE[i] &lt;&lt; &quot;\t&quot; &lt;&lt; IAEMDEFull[i] &lt;&lt; &quot;\t&quot; &lt;&lt; maxDelta[i] &lt;&lt; endl;</span>
<span class="comment">  }</span>
<span class="comment">  os &lt;&lt; flush;</span>
<span class="comment">  os.close();</span>
<span class="comment"></span>
<span class="comment">  string TimeFile = &quot;Times&quot;;</span>
<span class="comment">  TimeFile += stm.str();</span>
<span class="comment">  TimeFile += &quot;.txt&quot;;</span>
<span class="comment">  os.open(TimeFile.c_str());</span>
<span class="comment">  for (size_t i = 0; i &lt; timings.size(); i++) {</span>
<span class="comment">    os &lt;&lt; timings[i] &lt;&lt; endl;</span>
<span class="comment">  }</span>
<span class="comment">  os &lt;&lt; flush;</span>
<span class="comment">  os.close();</span>
<span class="comment">*/</span>

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="UnifScheffe_8cpp.shtml">UnifScheffe.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
