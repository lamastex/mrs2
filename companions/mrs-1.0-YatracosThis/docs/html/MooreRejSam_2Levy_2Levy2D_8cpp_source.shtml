<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Levy2D.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MooreRejSam_2Levy_2Levy2D_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MooreRejSam/Levy/Levy2D.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MooreRejSam_2Levy_2Levy2D_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> * </span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>   <span class="comment">// Include interval arithmetic package</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>    <span class="comment">// Include interval standard functions</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>    <span class="comment">// Include real standard functions</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;intvector.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;rvector.hpp&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;imatrix.hpp&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include&lt;algorithm&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include&lt;numeric&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;ctype.h&gt;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>std;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>cxsc;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="FLevy2D_8hpp.shtml" title="Declarations for example function class FLevy2D (Levy function, 2 dimensions).">FLevy2D.hpp</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keywordtype">void</span>
<a name="l00063"></a><a class="code" href="MooreRejSam_2Levy_2Levy2D_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">00063</a> <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(<a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> &amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keywordtype">int</span> n_boxes, <span class="keywordtype">int</span> n_samples, 
<a name="l00064"></a>00064                  <span class="keywordtype">double</span> Alb, <span class="keywordtype">unsigned</span> seed, <span class="keywordtype">bool</span> use_f_scale) 
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066   ofstream out (<span class="stringliteral">&quot;MRS_Levy2D.samples&quot;</span>);<span class="comment">//file to store the i.i.d samples</span>
<a name="l00067"></a>00067   clock_t T1 = clock (), T2, T3;
<a name="l00068"></a>00068   <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
<a name="l00069"></a>00069   <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (f, n_boxes, Alb, seed, (use_f_scale == 1));
<a name="l00070"></a>00070   <span class="comment">//MRSampler theSampler(f, n_boxes, 0, Alb, seed);  </span>
<a name="l00071"></a>00071   <span class="comment">/* // To print out the partition of the domain</span>
<a name="l00072"></a>00072 <span class="comment">  cout &lt;&lt; &quot;Domain Partition: \n&quot; ;</span>
<a name="l00073"></a>00073 <span class="comment">  theSampler.Print_Domain_Partition();</span>
<a name="l00074"></a>00074 <span class="comment">  theSampler.PrintBoxes(0);</span>
<a name="l00075"></a>00075 <span class="comment">  getchar(); // press enter to continue...</span>
<a name="l00076"></a>00076 <span class="comment">  */</span>
<a name="l00077"></a>00077   
<a name="l00078"></a>00078   <span class="comment">// To realize a file output of the RangeDomainSet </span>
<a name="l00079"></a>00079   ofstream os(<span class="stringliteral">&quot;Levy2DOutput.txt&quot;</span>);         <span class="comment">// Filename</span>
<a name="l00080"></a>00080   os &lt;&lt; theSampler &lt;&lt; endl;                   
<a name="l00081"></a>00081   cout &lt;&lt; <span class="stringliteral">&quot;The output has been written to Levy2DOutput&quot;</span> &lt;&lt; endl &lt;&lt; endl;
<a name="l00082"></a>00082   
<a name="l00083"></a>00083   T2 = clock ();
<a name="l00084"></a>00084   <span class="keywordtype">double</span> Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;
<a name="l00085"></a>00085   
<a name="l00086"></a>00086   <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
<a name="l00087"></a>00087   cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
<a name="l00088"></a>00088   cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
<a name="l00089"></a>00089   theSampler.<a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">RejectionSampleMany</a> (n_samples, rs_sample);
<a name="l00090"></a>00090   cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
<a name="l00091"></a>00091   <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
<a name="l00092"></a>00092   cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
<a name="l00093"></a>00093        &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
<a name="l00094"></a>00094   cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
<a name="l00095"></a>00095   cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
<a name="l00096"></a>00096   rs_sample.<a class="code" href="classRSSample.shtml#ae38d39be1ed34d9a06df7f3d76ab2962" title="Print sampled labeled points in Samples as a matrix with TAB padding.">Print</a>(out);
<a name="l00097"></a>00097   
<a name="l00098"></a>00098   cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af" title="Get number of interval function calls.">get_interval_calls</a> () &lt;&lt; endl;
<a name="l00099"></a>00099   cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7" title="Get number of real function calls.">get_real_calls</a> () &lt;&lt; endl;
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00102"></a>00102   T3 = clock ();
<a name="l00103"></a>00103   <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
<a name="l00104"></a>00104   cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> 
<a name="l00105"></a>00105        &lt;&lt; Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
<a name="l00106"></a>00106   cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate: &quot;</span> 
<a name="l00107"></a>00107        &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (n_samples) &lt;&lt; endl;
<a name="l00108"></a>00108   
<a name="l00109"></a>00109   
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keywordtype">int</span>
<a name="l00113"></a><a class="code" href="MooreRejSam_2Levy_2Levy2D_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00113</a> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115   ios::sync_with_stdio ();  <span class="comment">// call this function so iostream works with stdio</span>
<a name="l00116"></a>00116   cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>
<a name="l00117"></a>00117   
<a name="l00118"></a>00118   
<a name="l00119"></a>00119   <span class="keywordtype">int</span> n_dimensions = 2; 
<a name="l00120"></a>00120   <span class="keywordtype">int</span> n_boxes = 1000;
<a name="l00121"></a>00121   <span class="keywordtype">int</span> n_samples = 10000;
<a name="l00122"></a>00122   <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
<a name="l00123"></a>00123   <span class="keywordtype">unsigned</span> theSeed = 0;
<a name="l00124"></a>00124   
<a name="l00125"></a>00125   
<a name="l00126"></a>00126   <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>;
<a name="l00127"></a>00127   <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">true</span>;
<a name="l00128"></a>00128   
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (argc &gt;= 2)
<a name="l00130"></a>00130   {
<a name="l00131"></a>00131     sscanf (argv[1], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
<a name="l00132"></a>00132     <span class="keywordflow">if</span> (argc &gt;= 3)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134       sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);
<a name="l00135"></a>00135       <span class="keywordflow">if</span> (argc &gt;= 4){
<a name="l00136"></a>00136         sscanf (argv[3], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theSeed);
<a name="l00137"></a>00137       }
<a name="l00138"></a>00138       <span class="keywordflow">if</span> (argc &gt;= 5)
<a name="l00139"></a>00139         cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00140"></a>00140              &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142     
<a name="l00143"></a>00143     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00144"></a>00144               &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
<a name="l00145"></a>00145   }
<a name="l00146"></a>00146   
<a name="l00147"></a>00147   cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes 
<a name="l00148"></a>00148        &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed  
<a name="l00149"></a>00149        &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00150"></a>00150   
<a name="l00151"></a>00151   <span class="comment">//Parameters specific to the Levy target</span>
<a name="l00152"></a>00152   real <a class="code" href="LevyFobj2D_8cpp.shtml#ae3d1dc6c8ff5f4490d10dd105dfce9a7">Temperature</a> = 40.0;
<a name="l00153"></a>00153   real <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> = 1.42513; 
<a name="l00154"></a>00154   real <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> = 0.80032; 
<a name="l00155"></a>00155   real <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> = 176.14;
<a name="l00156"></a>00156   real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a> = 10.0;  <span class="comment">//0.999999999999999;</span>
<a name="l00157"></a>00157   UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00158"></a>00158   
<a name="l00159"></a>00159   <span class="comment">// make the function object</span>
<a name="l00160"></a>00160   <a class="code" href="classFLevy2D.shtml" title="two-dimensional Levy density as a function object class">FLevy2D</a> F_Levy_Temp_2D(Temperature, GlobalMax, 
<a name="l00161"></a>00161                          Center1, Center2, DomainLimit, UseLogPi);
<a name="l00162"></a>00162   
<a name="l00163"></a>00163   <span class="comment">// produce the samples</span>
<a name="l00164"></a>00164   <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(F_Levy_Temp_2D, n_boxes, n_samples, 
<a name="l00165"></a>00165                    Alb, theSeed, use_f_scale);
<a name="l00166"></a>00166   
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="keywordflow">return</span> 0;     <span class="comment">// end main statement</span>
<a name="l00169"></a>00169 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MooreRejSam_2Levy_2Levy2D_8cpp.shtml">Levy2D.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
