<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AHABCObsMCMCL1.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AHABCObsMCMCL1_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AHABCObsMCMCL1.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;iomanip&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &quot;<a class="el" href="SmallClasses_8hpp_source.shtml">SmallClasses.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MCMCGRtools_8hpp_source.shtml">MCMCGRtools.hpp</a>&quot;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
</div>
<p><a href="AHABCObsMCMCL1_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AHABCObsMCMCL1_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AHABCObsMCMCL1_8cpp.shtml#a0263b55ed3691eb49251cd058f57ddfb">doMCMCGRAuto</a> (string dirName, string simDataFiles, string obsDataFile, double wt, double dx, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol, int minPoints)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AHABCObsMCMCL1_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a38cc676e6c9f06e021b17e537b7bba1d"></a><!-- doxytag: member="AHABCObsMCMCL1.cpp::MYDEBUG" ref="a38cc676e6c9f06e021b17e537b7bba1d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml#l00045">45</a> of file <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml">AHABCObsMCMCL1.cpp</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0263b55ed3691eb49251cd058f57ddfb"></a><!-- doxytag: member="AHABCObsMCMCL1.cpp::doMCMCGRAuto" ref="a0263b55ed3691eb49251cd058f57ddfb" args="(string dirName, string simDataFiles, string obsDataFile, double wt, double dx, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol, int minPoints)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#aea9f4a954dda6cf104fccfbb15d2f704">doMCMCGRAuto</a> </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>dirName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>simDataFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>obsDataFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>wt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxLoops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>samplesNeeded</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thinout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>tol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>minPoints</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml#l00126">126</a> of file <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml">AHABCObsMCMCL1.cpp</a>.</p>

<p>References <a class="el" href="MCMCGRtools_8cpp_source.shtml#l00113">addDataPtrs()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00454">subpavings::AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00798">subpavings::AdaptiveHistogramCollator::getNumberCollated()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01023">subpavings::AdaptiveHistogram::insertFromRSSample()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="sptools_8cpp_source.shtml#l01207">subpavings::labelDataFromFilter()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00094">subpavings::LOGSAMPLES</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">subpavings::AdaptiveHistogramCollator::makeAverage()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00827">subpavings::AdaptiveHistogramCollator::outputAverageToTxtTabs()</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, <a class="el" href="MCMCGRtools_8cpp_source.shtml#l00047">outputToFileVertical()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="sptools_8cpp_source.shtml#l01190">subpavings::pointMassFilter()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00868">subpavings::AdaptiveHistogramCollator::publicOutputLog()</a>, <a class="el" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6">subpavings::readRvectorsFromTxt()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//=========Some preliminaries for AHABC==================================//</span>
   <span class="comment">//set formatting fors input to oss</span>
    ofstream os;         <span class="comment">// ofstream object</span>
    os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    os.precision(16);
   
   <span class="comment">// set up a random number generator for uniform rvs in priority queue</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    <span class="keywordtype">long</span> s = time (NULL) * getpid();
    gsl_rng_set(r, s);

   <span class="comment">//-------Setup to read in data files------------------------------------//</span>
   <span class="comment">//Read in simulated files</span>
  <span class="comment">//create a vector object to store the filenames of simulated data</span>
  vector&lt;string&gt; simDataFilesVec;
  <span class="keywordtype">string</span> fileName;
  cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
  ifstream file; <span class="comment">// create file for input</span>
  file.open(simDataFiles.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
    <span class="comment">// else read in the filenames</span>
  <span class="comment">// store the filenames in the vector simDataFilesVec</span>
  <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
    file &gt;&gt; fileName;
    cout &lt;&lt; fileName &lt;&lt; endl; 
    simDataFilesVec.push_back(fileName);
  }
  <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
  simDataFilesVec.pop_back();
  
  <span class="comment">//Read in observed files</span>
  <span class="comment">//create a container to keep observed data</span>
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> obsData;
  
  <span class="comment">//container to keep individual data containers</span>
  vector&lt;RVecData&gt; unlabDataVec; <span class="comment">//unlabelled data</span>

   <span class="comment">//container to keep both simulated and observed data to make root box</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
  dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>; 
  
  <span class="comment">// put all simulated data into container pointed to by dataPtr</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nPut simulated data in a container to get rootbox: &quot;</span> &lt;&lt; endl;   
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; simDataFilesVec.size(); i++) {
    cout &lt;&lt; simDataFilesVec[i] &lt;&lt; endl;
    <span class="comment">//read into allData</span>
    <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), simDataFilesVec[i], 0);
    <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
      cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
        &lt;&lt; endl;
      exit(1);
    } 
      <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr at iteration &quot; &lt;&lt; i &lt;&lt; endl;</span>
    <span class="comment">//Then read each data set and push into unlabDataVec </span>
     cout &lt;&lt; <span class="stringliteral">&quot;\nPut simulated data in container for filtering and labelling: &quot;</span> &lt;&lt; endl;
    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> unlabIndData;
    <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(unlabIndData, simDataFilesVec[i], 0);
    unlabDataVec.push_back(unlabIndData);
  }
  
  <span class="comment">//put observed data into container pointed to by dataPtr</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nPut observed data in container with simulated data to get rootbox:&quot;</span> 
      &lt;&lt; endl;
  <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), obsDataFile, 0);
  <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
      cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; obsDataFile &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
        &lt;&lt; endl;
      exit(1);
  }
  <span class="comment">//find the data dimensions from the first datapoint</span>
  <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
  cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;

  <span class="comment">//also read into obsData container</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nPut observed data in container for observed data only&quot;</span> &lt;&lt; endl;
  <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(obsData, obsDataFile, 0);
  <span class="comment">//point mass filtering and data labelling for observed data</span>
  <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labObsData;
  <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// only filter for 1D</span>
    map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
    <span class="comment">//run a point mass filter to get &quot;atomic&quot; points</span>
    cout &lt;&lt; <span class="stringliteral">&quot;run point mass filter over observed data:&quot;</span> &lt;&lt; endl;
    <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>(obsData, CountsMap);
    <span class="comment">//EMFMap is not needed anymore actually - will see how i can turn it off or do something else</span>
       <span class="comment">//TODO: see TODO comment in &quot;../../../src/sptools.cpp&quot; 1220ish Line</span>
    map&lt;rvector, double, less&lt;rvector&gt; &gt; EMFMap; 
    cout &lt;&lt; <span class="stringliteral">&quot;label data&quot;</span> &lt;&lt; endl;
    <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>(obsData, labObsData, CountsMap, EMFMap);
  }
  <span class="keywordflow">else</span> { <span class="comment">// for now make RVecData into RSSample object for higher dim</span>
     <span class="comment">//TODO: This can be done (not for GT&#39;s PhD necessarily) &quot;trans-dimensional density estimation!&quot;</span>
     <span class="comment">//this is a beautiful extension of estimating axis-parallel low-dimensional atomic densities </span>
     <span class="comment">//inside root box in R^d or other subsets specified by prior constraints</span>
    RVecData::iterator it;
    <span class="keywordflow">for</span> (it = obsData.begin(); it &lt; obsData.end(); it++) {
        <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> labThisData;
        labThisData.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = (*it);
        labThisData.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = 1;
        <span class="comment">//labThisData.Print(cout);</span>
        labObsData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back(labThisData);
    }
  } <span class="comment">// end of labelling observed data</span>
    
  <span class="comment">//Make root box from ALL the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
  histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
   <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr AFTER iteration &quot;  &lt;&lt; endl;</span>
  histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
  ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
  
  <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
  <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
  <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
  
  <span class="comment">//----go through each RVecData in unlabData for the following:------------//</span>
  <span class="comment">//1. point mass filtering</span>
  <span class="comment">//2. build histogram  </span>
  <span class="comment">//3. put observed data into histogram</span>
  <span class="comment">//4. get estimated log-likelihood</span>
  
  <span class="comment">//Set up containers to contain weights for each mixture model</span>
  vector&lt; map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt; WeightPMVec;<span class="comment">//for point mass</span>
  vector&lt;double&gt; WeightHistVec; <span class="comment">//for histogram</span>
  
  <span class="comment">//Set up containers to contain log-likelihood for the observed data</span>
  <span class="comment">//for each histogram </span>
  vector&lt;real&gt; logLikVec;
  
  <span class="comment">//Now loop through each RVecData</span>
  vector&lt;RVecData&gt;::iterator unlabDataIt;
  RVecData::iterator dataIt;
  <span class="keywordtype">size_t</span> D = 0;
  <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
      unlabDataIt++) 
  {
    ostringstream stmD;
    stmD &lt;&lt; D+1;
    cout &lt;&lt; <span class="stringliteral">&quot;==============Simulated Data &quot;</span> &lt;&lt; D+1 &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
    <span class="comment">//---------point mass filtering and data labelling-------------//</span>
    <span class="comment">//simulated data</span>
    <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labData; <span class="comment">//for point mass filtering </span>
    <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">//for now, do this only in 1D</span>
      <span class="comment">//make a map for value of x (the key) and each of its respective </span>
      <span class="comment">//counts (the value)</span>
      map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
      <span class="comment">//run a point mass filtering to get &quot;atomic&quot; points</span>
      <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>((*unlabDataIt), CountsMap);
      <span class="comment">//Is there a more efficient way for the labelling:</span>
      <span class="comment">//Iterate through the data set again. Label point-mass with 0 and </span>
      <span class="comment">//the rest with 1.</span>
      <span class="comment">//Also get a map for the EMF of  point mass data</span>
      map&lt;rvector,double, less&lt;rvector&gt; &gt; EMFMap;
      map&lt;rvector, double, less&lt;rvector&gt; &gt;::iterator EMFMapIt;
      <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>((*unlabDataIt), labData, CountsMap, EMFMap);
            
      <span class="comment">/*optional: output RSSample this to .txt</span>
<span class="comment">      vector&lt;LabPnt&gt;::iterator LabPntIt; //to iterate over labData.Samples</span>
<span class="comment">      string fileName = &quot;Labelled&quot;;</span>
<span class="comment">      fileName += simDataFilesVec[D];</span>
<span class="comment">      oftream os;</span>
<span class="comment">      os.open(fileName.c_str());</span>
<span class="comment">      for (LabPntIt = labData.Samples.begin(); LabPntIt &lt; labData.Samples.end();</span>
<span class="comment">          LabPntIt++) {</span>
<span class="comment">        (*LabPntIt).Print(os);</span>
<span class="comment">      }</span>
<span class="comment">      os &lt;&lt; flush;</span>
<span class="comment">      */</span> <span class="comment">//end of optional output</span>
      
      <span class="comment">//Store the weights</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Atomic points and their EMFs&quot;</span> &lt;&lt; endl;
      <span class="keywordtype">double</span> pmWeight = 0.0;
      <span class="keywordtype">double</span> MaxpmWeight = 0.0;
      rvector AtomWithMaxpm = EMFMap.begin()-&gt;first;
      <span class="keywordflow">for</span> (EMFMapIt = EMFMap.begin(); EMFMapIt != EMFMap.end(); EMFMapIt++) {
        <span class="keywordflow">if</span>(EMFMapIt-&gt;second &gt; MaxpmWeight) 
          {<span class="comment">//a messy way to keep the max atom and weight...</span>
           MaxpmWeight=EMFMapIt-&gt;second;
           AtomWithMaxpm = EMFMapIt-&gt;first;
          }
        pmWeight += EMFMapIt-&gt;second;
        <span class="keywordflow">if</span>( EMFMapIt-&gt;second &lt; 0.0)<span class="comment">// use &lt; to skip the ? below</span>
          {
           cout &lt;&lt; setprecision(16) &lt;&lt; EMFMapIt-&gt;first 
           &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; EMFMapIt-&gt;second &lt;&lt; endl;
           cout &lt;&lt; <span class="stringliteral">&quot;is this atomic in your experimental precision?&quot;</span> &lt;&lt; endl; 
           getchar();
          }
      }
      cout &lt;&lt; <span class="stringliteral">&quot;Maximum Weight of a set of Atoms of size &quot;</span>&lt;&lt; EMFMap.size() 
        &lt;&lt; <span class="stringliteral">&quot; is &quot;</span> &lt;&lt; MaxpmWeight &lt;&lt; <span class="stringliteral">&quot; at &quot;</span> &lt;&lt; AtomWithMaxpm &lt;&lt; endl;
      WeightHistVec.push_back(1.0 - pmWeight);
      WeightPMVec.push_back(EMFMap);
      
       <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
        <span class="comment">//and the normalised histogram</span>
        <span class="keywordtype">string</span> weightFileName = dirName;
        weightFileName += <span class="stringliteral">&quot;Weights&quot;</span>;
      ostringstream stm1;
      stm1 &lt;&lt; D;
      weightFileName += stm1.str();
      weightFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      os.open(weightFileName.c_str());
      map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
      <span class="keywordflow">for</span> (mapIt = (EMFMap).begin(); mapIt != (EMFMap).end(); mapIt++) {
        os &lt;&lt; mapIt-&gt;second &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;first;
      }
       os &lt;&lt; endl;
      os &lt;&lt; flush;
       os.close();
       cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
       cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;
    
    } <span class="comment">// end of point mass filtering for 1D</span>

    cout &lt;&lt; <span class="stringliteral">&quot;\nMaking histogram for simulated data in &quot;</span> &lt;&lt; simDataFilesVec[D] 
        &lt;&lt; endl;
<span class="comment">// start by making the histograms that are the starting points for our chains</span>
    <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
    <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
    <span class="comment">// the starting points are chosen to be widely dispersed</span>
    <span class="keywordtype">bool</span> successfulInsertionFirst, successfulInsertionSecond, successfulInsertionThird;
    <span class="keywordtype">bool</span> successfulPQSplitSecond;

    <span class="comment">//pointers to Adaptivehistogram objects as starting conditions</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistThird;
    <span class="keywordflow">if</span> (dataDim == 1) {
      <span class="comment">//histogram 1</span>
      myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
      <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
      successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
      
      <span class="comment">//histogram 2</span>
      myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
      <span class="comment">// the same data into the second histogram</span>
      successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
      successfulPQSplitSecond = <span class="keyword">false</span>;
      <span class="keywordflow">if</span> (successfulInsertionSecond) {
        <span class="comment">// set up function objects for a priority split</span>
        <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
        <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
        <span class="keywordtype">size_t</span> minLeaves = 10;
        <span class="comment">//size_t minLeaves = (labData.Samples.size()/50); // 20 when n = 1000</span>
        <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
        <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
        <span class="comment">// do the priority split</span>
        successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
             critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
      }
      
    } <span class="comment">//end of making starting conditions for dataDim = 1</span>
    
    <span class="keywordflow">else</span> { <span class="comment">// at current i do not have a point-mass filter set up for data with &gt; 1. </span>
         <span class="comment">// But should bring in Jenny&#39;s code for filtering.</span>
      <span class="comment">//histogram 1</span>
      myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
      <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
      successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
      
      <span class="comment">//histogram 2</span>
      myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
      <span class="comment">// the same data into the second histogram</span>
      successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
      successfulPQSplitSecond = <span class="keyword">false</span>;
      <span class="keywordflow">if</span> (successfulInsertionSecond) {
        <span class="comment">// set up function objects for a priority split</span>
        <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
        <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
        <span class="comment">//size_t minLeaves = 50;</span>
        <span class="keywordtype">size_t</span> minLeaves = ((*unlabDataIt).size()/50); <span class="comment">// 20 when n = 1000</span>
        <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
        <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
        <span class="comment">// do the priority split</span>
        successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
             critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
      }
    } <span class="comment">// end of making histograms for dataDim &gt; 1</span>

<span class="preprocessor">    #ifdef FORCEFAILINSERTION</span>
<span class="preprocessor"></span>      <span class="comment">// debugging - force a failure here to check what program does</span>
      successfulInsertionThird = <span class="keyword">false</span>;
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>
    <span class="comment">// set up for MCMC</span>
    <span class="comment">// our return object, if all goes well</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* myCollPtr;
    myCollPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; 
  
    <span class="comment">//set up for output</span>
    <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
    <span class="keywordtype">int</span> prec = 15;
    cout &lt;&lt; cxsc::SaveOpt;
    cout &lt;&lt; cxsc::Variable;
    cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
  
    <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond) {
      <span class="comment">// containers for adaptive histograms</span>
      <span class="comment">// the starting points of the chains</span>
      vector&lt; AdaptiveHistogram* &gt; hists;
      hists.push_back(myHistFirst);
      hists.push_back(myHistSecond);
  
      <span class="comment">// how many chains are to be run = number starting histograms</span>
      <span class="keywordtype">size_t</span> chains = hists.size(); 
      
      <span class="keywordflow">if</span> (chains &lt; 2) {
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
      }
  
      <span class="comment">// set up ingredients for MCMC</span>
      <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal; <span class="comment">// set up proposal distribution object</span>
      <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior; <span class="comment">// set up prior distribution object</span>
  
      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
  
      gsl_rng * rgsl = NULL;
  
      <span class="comment">// should check that each hist to be done has a paving</span>
  
      <span class="comment">// set up a random number generator for uniform rvs</span>
      <span class="keyword">const</span> gsl_rng_type * tgsl;
      <span class="comment">// set the library variables *gsl_rng_default and</span>
      <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
      gsl_rng_env_setup();
      tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
      rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
      
      <span class="comment">// set a seed for the data</span>
      <span class="keywordtype">int</span> mcmcSeed = 1234;
      gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
  
      <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
      vector&lt;SPSnodeList&gt; nodeLists(chains);
      <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
      <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
  
      vector&lt;string&gt; sequenceStateFilenames(chains);
      vector&lt;string&gt; sequenceAverageFilenames(chains);
      vector&lt;string&gt; sequenceCollationFilenames(chains);
      vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
      vector&lt;string&gt; L1ColNames(chains);
      vector&lt;string&gt; L1RunningSumColNames(chains);
      vector&lt;string&gt; L1SampleVarianceColNames(chains);
      
      std::string baseSequenceStateFilename = dirName;
      baseSequenceStateFilename += <span class="stringliteral">&quot;SequenceStates&quot;</span>;
      baseSequenceStateFilename += stmD.str();
      std::string baseSequenceStateCollationFilename = dirName;
      baseSequenceStateCollationFilename += <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
      baseSequenceStateCollationFilename +=  stmD.str();
      std::string baseSequenceStateAverageFilename = dirName; 
      baseSequenceStateAverageFilename += <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
      baseSequenceStateAverageFilename += stmD.str();
      std::string baseSequenceStateDiffsToAverageFilename = dirName; 
      baseSequenceStateDiffsToAverageFilename += <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
      baseSequenceStateDiffsToAverageFilename += stmD.str();
      
      std::string  baseL1ColName = dirName;
      baseL1ColName += <span class="stringliteral">&quot;L1_&quot;</span>;
      std::string baseL1RunningSumColName = dirName; 
      baseL1RunningSumColName += <span class="stringliteral">&quot;L1Sum_&quot;</span>;
      std::string baseL1SampleVarianceColName = dirName;
      baseL1SampleVarianceColName += <span class="stringliteral">&quot;L1Var_&quot;</span>;
      std::string overallL1RunningSumColName = dirName;
      overallL1RunningSumColName += <span class="stringliteral">&quot;OverallL1Sum&quot;</span>;
      
      <span class="comment">// files for outputing samples</span>
      std::string samplesCollFilename = dirName;
      samplesCollFilename += <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto&quot;</span>;
      samplesCollFilename += stmD.str();
      samplesCollFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
      std::string samplesLogFilename = dirName;
      samplesLogFilename += <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto&quot;</span>;
      samplesLogFilename += stmD.str();
      samplesLogFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
      <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollFilename);
      
      <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
      <span class="comment">// but at the moment I have not done anything about graphing</span>
      <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
        <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
      }
      
      <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
      <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
      
      <span class="comment">// a name for the file of diagnostics </span>
      std::string GRL1Filename = dirName;
      GRL1Filename += <span class="stringliteral">&quot;GelmanRubinL1Scalar&quot;</span>;
      GRL1Filename += stmD.str();
      GRL1Filename += <span class="stringliteral">&quot;.txt&quot;</span>;
      <span class="comment">//outputFileStart(GRL1Filename);</span>
      
      <span class="comment">// a name for the file of working calculations for the diagnostics </span>
      std::string GRL1WorkingCalcsFilename = dirName;
      GRL1WorkingCalcsFilename+=  <span class="stringliteral">&quot;GelmanRubinL1ScalarWorkingCalcs&quot;</span>;
      GRL1WorkingCalcsFilename += stmD.str();
      GRL1WorkingCalcsFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
      <span class="comment">//outputFileStart(GRL1WorkingCalcsFilename);</span>
  
      <span class="comment">/* containers for summaries for the </span>
<span class="comment">      * L1-distances-to-average scalar convergence diagnostics */</span>

      <span class="comment">/* for each chain we need a container for current L1-distances-to-average </span>
<span class="comment">       * relative to the current average for all histogram states in the chain so far.</span>
<span class="comment">       * This is reused and overwritten each time a state is added to the chain</span>
<span class="comment">       * and is just a working-space to facilitate getting the L1s we want. */</span>
      std::vector &lt; RealVec &gt; currentL1s(chains); 
  
      <span class="comment">// one vector of L1-distances-to-average as a RealVec for each chain</span>
      std::vector &lt; RealVec &gt;* distancesL1Ptr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
  
      <span class="comment">/* vector containing one running sum of L1-distances-to-average for each chain</span>
<span class="comment">      we can work out the average v = L1 for each chain so far from this</span>
<span class="comment">      start with a running sum of 0.0 for each chain */</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
      
      <span class="comment">/* vector containing one running sum of </span>
<span class="comment">      squared-L1-distances-to-average for each chain</span>
<span class="comment">      we can work out the average of the squared v&#39;s ie v^2 = L1^2</span>
<span class="comment">      for each chain so far from this</span>
<span class="comment">      start with a running sum of 0.0 for each chain.</span>
<span class="comment">      (Use a dotprecision for each running sum to keep accuracy </span>
<span class="comment">      when accumulating products of reals) */</span>
      <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumL1Squared(chains, cxsc::dotprecision(0.0));
  
      <span class="comment">/* value of running sum of L1-distances-to-average over all chains</span>
<span class="comment">      we can work out the average v = L1 over all chains so far from this */</span>
      real runningSumL1AllChains = cxsc::real(0.0);
      
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="comment">// keep a vector of all the overall running sums as well</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1OverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
        <span class="comment">// keep a vector of the runningsums for each chain as well</span>
        std::vector &lt; RealVec &gt;* runningSumL1ChainsPtr 
                  = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
        <span class="comment">// keep a vector of the sample variances for each chain as well</span>
        std::vector &lt; RealVec &gt;* sampleVariancesPtr 
                  = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
        <span class="comment">/* keep a vector of the flag for L1 convergence</span>
<span class="comment">         * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatL1FlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
        
        <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<span class="comment">         * (not a real, but easier to output it if we treat it like one) */</span>
        <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>  
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Ws_L1</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Bs_L1</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the estimated var(v)</span>
      <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sqrtRhat_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the sqrtRhats</span>
  
      <span class="comment">// container of each state at each sequence</span>
      vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
  
      <span class="comment">//container for the collation of the averages over each sequence at each state</span>
      <span class="comment">//vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;</span>
  
      <span class="comment">//AdaptiveHistogramCollator masterCollator; // not newed so no need to delete</span>
  
      <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
  
      <span class="comment">// this loop is just setting up containers of file names</span>
      <span class="comment">// and getting info from the starting histograms that is</span>
      <span class="comment">// needed to start the chains</span>
      <span class="comment">// and a container of collators, one for each chain,</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
        
        <span class="comment">// do not comment these out</span>
        std::ostringstream stm1;
        stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
        sequenceStateFilenames[ci] = stm1.str();
        <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
  
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceCollationFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceAverageFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
            sequenceDiffsToAverageFilenames[ci] = stm.str();
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseL1ColName &lt;&lt; ci;
            L1ColNames[ci] = stm.str();
          }
          {
            std::ostringstream stm;
            stm &lt;&lt; baseL1RunningSumColName &lt;&lt; ci;
            L1RunningSumColNames[ci] = stm.str();
          }
          
          {
            std::ostringstream stm;
            stm &lt;&lt; baseL1SampleVarianceColName &lt;&lt; ci;
            L1SampleVarianceColNames[ci] = stm.str();
          }
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<span class="comment">        * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<span class="comment">        * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<span class="comment">        * change.  */</span>
        
        <span class="comment">// set up a container for the leaf children</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
        <span class="comment">// set up a container for the subleaf children</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
  
        <span class="keywordtype">size_t</span> numLeaves = 0;
        <span class="keywordtype">size_t</span> numCherries = 0;
  
        <span class="comment">// fill the container with the leaf children</span>
        hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
        <span class="comment">// fill the container with the subleaf children</span>
        hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
  
        numCherries = cherryVec.size();
  
        <span class="comment">// check if node is still splittable</span>
        <span class="keywordflow">if</span> (!leafVec.empty()) {
           <span class="comment">// but only put into the container the leaves which, if split,</span>
           <span class="comment">// would have at least minPoints data points associated with them</span>
           <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
           <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
              <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
                ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
                   <span class="comment">// leaf can go into container</span>
                   nodeLists[ci].push_back(*lit);
                   numLeaves++;
              }
           }
        }
  
        <span class="comment">// no need to check on cherries - they can all go in</span>
        <span class="keywordflow">if</span> (numCherries &gt; 0)
           nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
                           cherryVec.end());
        <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
           cancontinue = <span class="keyword">false</span>;
           <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
           std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
                   &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
                   &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
        }
  
        numLeavesVec[ci] = numLeaves;
        numCherriesVec[ci] = numCherries;
  
        <span class="comment">// set up one collator for each chain, starting it with the first histogram state</span>
        sequenceCollators[ci] = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] );
      
        <span class="comment">// collect the calculations for the starting points</span>
        
        <span class="comment">// one vector of L1s for each chain</span>
        distancesL1Ptr-&gt;at(ci).push_back( cxsc::real(0.0) ); 
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          sampleVariancesPtr-&gt;at(ci).push_back(cxsc::real(0.0) );
          runningSumL1ChainsPtr-&gt;at(ci).push_back( cxsc::real(0.0) );
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">/* running sum of L1s for each chain, held in runningSumL1Ptr</span>
<span class="comment">        are all initialised to 0.0 already </span>
<span class="comment">        * </span>
<span class="comment">        * running sum of squared L1s for each chain, held in  runningSumL1SquaredPtr</span>
<span class="comment">        are all initialised to 0.0 already</span>
<span class="comment">        */</span> 
<span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>          <span class="comment">// make files for current average and current collations</span>
        {
          sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
          
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
                      = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
          colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
          
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
                      = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">makeDifferencesToAverage</a>();
          colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
        } <span class="comment">// temp objects go out of scope here  </span>
          
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>      
      } <span class="comment">// end loop through chains setting up things to be able to start</span>
      
      <span class="comment">/* the overall running sum runningSumL1AllChains </span>
<span class="comment">       * was initialised to 0.0 </span>
<span class="comment">       * and #ifdef MYDEBUG, runningSumL1Overall was initialised to contain one 0.0 </span>
<span class="comment">       * and similarly rhatL1FlagPtr was initialised to contain one 0.0*/</span>
      
      
      <span class="comment">/* start with the convergence statistics for chains with just one state in*/</span>
      <span class="comment">// the Ws_L1</span>
      Ws_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
      <span class="comment">// the Bs_L1</span>
      Bs_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
      <span class="comment">// the estimated var(v)</span>
      estVarV_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
      <span class="comment">// the sqrtRhats</span>
      sqrtRhat_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
  
      <span class="keywordtype">bool</span> goodLoop = cancontinue;
      
      <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
  
      <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>

      <span class="keywordtype">int</span> samplesSoFar = 0;
      
      <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far </span>
<span class="comment">                because  we already have the initial histograms */</span>
      
      <span class="comment">/* varibles for monitoring convergence</span>
<span class="comment">       * we only have one scalar value at the moment (L1-distance-to-average) but</span>
<span class="comment">       * we might have more - might want convergence on all diagnostics */</span>
      <span class="keywordtype">int</span> rhatFlagCounter = 0;
      <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<span class="comment">                        * diagnostic within limits for sampling to start?</span>
<span class="comment">                        * usually this would probably be the number</span>
<span class="comment">                        * of scalar values being used? */</span>
      <span class="keywordtype">int</span> rhatL1Flag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value</span>
      <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
      
      <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
      
      <span class="comment">// counter to keep track of loops</span>
      <span class="keywordtype">int</span> loopCounter = 0;
      
      <span class="comment">/* We also need a collator for the samples*/</span>
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
      
      <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) {
        
<span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;****** Change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        loopCounter++;
        <span class="comment">// a collator for the averages for this loop</span>
        <span class="comment">//AdaptiveHistogramCollator* avgColl = new AdaptiveHistogramCollator;</span>
  
        <span class="comment">/* we want to accumulate the sample variance of the scalar summary</span>
<span class="comment">         * for each chain up to the point reached in this loop */</span>
        cxsc::real sumOfSampleVariancesOverChains(0.0);
        
        <span class="comment">/* also accumulate sum over all chains of the square of </span>
<span class="comment">         * the running sum of L1-distances-to-average </span>
<span class="comment">         * for each chain up to the point reached in this loop */</span>
        cxsc::real sumOfSquaresOfRunningSums(0.0);
        
        <span class="comment">// for each histogram in turn, change the state</span>
        <span class="comment">/* this is all a fudge - changeMCMCstate should just be a private</span>
<span class="comment">         * method of the histograms but I think I made it public so that</span>
<span class="comment">         * I could use it here in the example as a first step to being</span>
<span class="comment">         * able to make all of this chain convergence stuff back into</span>
<span class="comment">         * a method of the histograms themselves</span>
<span class="comment">         */</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
          
<span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          
          <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<span class="comment">           * in the comments inside this loop */</span>
  
          <span class="comment">// changeMCMCState for the chain</span>
          <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
          goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
                 numLeavesVec[ci], numCherriesVec[ci],
                 proposal, logPrior, minPoints,
                 rgsl, loggingInChangeStates,
                 sequenceStateFilenames[ci], states);
                 
<span class="preprocessor">          #ifdef FORCEFAILMCMCLOOP</span>
<span class="preprocessor"></span>            <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
            <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<span class="preprocessor">          #endif </span>
<span class="preprocessor"></span>
          <span class="keywordflow">if</span> (!goodLoop) {
            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
            <span class="comment">// stop if we aren&#39;t happy</span>
          }
          
          <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
          }
          
          <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
          
          <span class="comment">// collate the current sample state in the chain</span>
          sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));

          <span class="comment">// collect the L1 distances and update the runnings sums</span>
          
          <span class="comment">// update our collection of L1s to average for all histogram states in the chain</span>
          currentL1s[ci] = sequenceCollators[ci]-&gt;getL1DistancesToAverage(currentL1s[ci]);
          <span class="comment">/* we actually only want the L1 for the last state in the chain,</span>
<span class="comment">           * which we collect in the right vector for this chain in distancesL1 */</span>
          cxsc::real lastStateL1 = currentL1s[ci].back();
          distancesL1Ptr-&gt;at(ci).push_back( lastStateL1 );  
          
          
          <span class="comment">// update the running sum of L1s for the chain, held in runningSumL1</span>
          cxsc::real newRunningSum = runningSumL1Ptr-&gt;at(ci) + lastStateL1;
          runningSumL1Ptr-&gt;at(ci) = newRunningSum;
          
          <span class="comment">// accumulate the square of the running sum of L1s </span>
          sumOfSquaresOfRunningSums += newRunningSum*newRunningSum;
          
          <span class="comment">/* update the running sum of squared L1s over this chain</span>
<span class="comment">           *  held in runningSumL1Squared as a dot precision */</span>
          cxsc::accumulate( runningSumL1Squared[ci], lastStateL1, lastStateL1 );
          
          <span class="comment">// update  the overall running sum runningSumL1AllChains </span>
          runningSumL1AllChains += lastStateL1;
          
          <span class="comment">/* how many histograms have we got so far?</span>
<span class="comment">           * this chain should have states+1 states in it.</span>
<span class="comment">           * because we have not yet incremented states.*/</span>
          <span class="keywordtype">size_t</span> n = sequenceCollators[ci]-&gt;getNumberCollated();
          assert(n == states + 1);
          
          <span class="comment">/* and n should be at least 2 because we started with the </span>
<span class="comment">           * starting histogram and have now added another state.*/</span>
          assert(n &gt; 1);
          <span class="comment">/* could just use n - 1 = states + 1 - 1 = states in formula below</span>
<span class="comment">           * once we are happy it is all working!</span>
<span class="comment">          </span>
<span class="comment">          /* accumulate the sample variance for this chain: </span>
<span class="comment">           * sample variance for the scalar summary v = L1-to-average</span>
<span class="comment">           * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<span class="comment">           * which equals (sum of squares - square of sums/n)/(n-1) */</span>
          cxsc::real thisSampleVariance( ( 1.0/(n-1) )*( cxsc::rnd(runningSumL1Squared[ci])
                    -  (newRunningSum*newRunningSum/(n * 1.0)) ) );
          sumOfSampleVariancesOverChains += thisSampleVariance;
          
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            sampleVariancesPtr-&gt;at(ci).push_back( thisSampleVariance );
            runningSumL1ChainsPtr-&gt;at(ci).push_back (newRunningSum);
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>  
<span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>            <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
            <span class="comment">// distancesL1[ci] has the v_ij for each chain i</span>
            assert( n == distancesL1[ci].size() );
            cxsc::real acc(0.0);
            <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
              acc+= (*it);
            }
            cxsc::real av = acc/(n * 1.0);
            cxsc::dotprecision accDiffs(0.0);
            <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
              cxsc::real thisDiff = (*it) - av;
              <span class="comment">// sum up the squares of the differences compared to overall average</span>
              cxsc::accumulate(accDiffs, thisDiff, thisDiff);
            }
            cxsc::real altVar = rnd(accDiffs)/( n - 1.0 );
            
            cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance is\t&quot;</span> &lt;&lt; thisSampleVariance &lt;&lt; endl;
            cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
            <span class="comment">//assert(cxsc::_double(thisSampleVariance) == cxsc::_double(altVar) );</span>
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          
<span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>            <span class="comment">// make files for current average and current collations</span>
            sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], states + 1);
          
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
                        = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
            colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], states + 1);
            
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
                        = sequenceCollators[ci]-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">makeDifferencesToAverage</a>();
            colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], states + 1);
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>            
        } <span class="comment">// end change state for each histogram in turn</span>
  
        <span class="comment">/* each chain now has a new state which has been collated into</span>
<span class="comment">         * its collator and info for L1 distances-to-average have been collected</span>
<span class="comment">         * and the sample variance of the scalar summary for each chain</span>
<span class="comment">         * has been put into sampleVariances, so we can now work out the</span>
<span class="comment">         * convergence diagnostics */</span>
  
        <span class="comment">// increment number of states   </span>
        states++;

<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">// store the current runningSumL1AllChains as well</span>
          runningSumL1OverallPtr-&gt;push_back(runningSumL1AllChains);
          
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>  
        <span class="comment">// the Ws_L1: average, over chains, of sample variance of scalar value</span>
        cxsc::real thisW = sumOfSampleVariancesOverChains/(chains * 1.0); 
        Ws_L1Ptr-&gt;push_back(thisW); 
        <span class="comment">// the Bs_L1</span>
        cxsc::real thisB = (1.0/( (chains - 1) * states ) 
                  * ( sumOfSquaresOfRunningSums 
                  - (runningSumL1AllChains 
                  * runningSumL1AllChains/(chains * 1.0)) ) );
        Bs_L1Ptr-&gt;push_back(thisB); 
        
<span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>          <span class="comment">//check thisB is correct, doing it the long way</span>
          <span class="comment">// runningSumL1 has one running sum for each chain</span>
          <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
          cxsc::real accRunningSums(0.0);
          <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumL1.begin(); it &lt; runningSumL1.end(); ++it) {
            cxsc::real thisChainRunningSum = (*it);
            cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
            chainAverages.push_back(thisChainAv);
            accRunningSums+=thisChainRunningSum;
          }
          cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
          cxsc::dotprecision accDiffs(0.0);
          <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
            cxsc::real thisDiff = (*it) - overallAv;
            <span class="comment">// sum up the squares of the differences compared to overall average</span>
            cxsc::accumulate(accDiffs, thisDiff, thisDiff);
          }
          cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
          
          cout &lt;&lt; <span class="stringliteral">&quot;\nthisB is\t&quot;</span> &lt;&lt; thisB &lt;&lt; endl;
          cout &lt;&lt; <span class="stringliteral">&quot;altB is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
          <span class="comment">//assert(thisB == altB);</span>
        
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">// the estimated var(v)</span>
        cxsc::real thisVarV = states/(states-1.0) * thisW + (1.0/states)*thisB;
        estVarV_L1Ptr-&gt;push_back(thisVarV); 
        <span class="comment">// the sqrtRhats</span>
        cxsc::real thisSqrtRhat_L1 = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">cxsc::sqrt</a>(thisVarV/thisW);
        sqrtRhat_L1Ptr-&gt;push_back(thisSqrtRhat_L1); 
        
        <span class="comment">// check on the diagnostics</span>
        <span class="keywordflow">if</span> (thisSqrtRhat_L1 &lt;= 1.0 + tol &amp;&amp; thisSqrtRhat_L1 &gt;= 1.0 - tol) {
          <span class="comment">//flagRhat++; //increment the flagRhat counter</span>
          
          <span class="comment">// if we have not been converged before on this scalar value</span>
          <span class="keywordflow">if</span> (!rhatL1Flag)  {
<span class="preprocessor">            #ifdef MYDEBUG</span>
<span class="preprocessor"></span>              
              cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test satisfied at &quot;</span> 
                  &lt;&lt; states &lt;&lt; endl;
              
<span class="preprocessor">            #endif</span>
<span class="preprocessor"></span>          
            <span class="comment">// set the flag for this scalar value</span>
            rhatL1Flag = 1;
            
            <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
            rhatFlagCounter ++; 
          }
        }
        <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
          
          <span class="comment">// if we were okay on this scalar value before</span>
          <span class="keywordflow">if</span> (rhatL1Flag) {
<span class="preprocessor">            #ifdef MYDEBUG</span>
<span class="preprocessor"></span>              cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test NOT now satisfied at &quot;</span> 
                &lt;&lt; states &lt;&lt; endl;
          
<span class="preprocessor">            #endif</span>
<span class="preprocessor"></span>            rhatL1Flag = 0; <span class="comment">// update the flag</span>
            rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
          }     
        }
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">// store the L1flag as well, as a real, which is a fudge...</span>
          rhatL1FlagPtr-&gt;push_back(rhatL1Flag);
          
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">/* we&#39;d do this for all other scalar values as well, if applicable, then ...*/</span>
          
        <span class="comment">// check if we have enough flags to consider ourselves burntin</span>
        <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
          
          burntin = 1; 
          burntinReachedState = states;
          
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            <span class="comment">// if we have not been burntin, give a message</span>
             cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
                &lt;&lt; burntinReachedState &lt;&lt; endl;
            
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>        }
        
        <span class="comment">// but it may be that we were burntin and no longer are</span>
        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
          
          burntin = 0; 
          burntinReachedState = 0;
          
          <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
          samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
          
          samplesSoFar = 0;
          
          <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
          cxsc::real newVal(0.0);
          
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
              std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          
          <span class="comment">// restart the log file if we are logging</span>
          <span class="comment">// note nothing done here yet about logging graphs as well  </span>
          <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
            <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
          }   
          
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
                &lt;&lt; states &lt;&lt; endl;
            
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>        }
        
        <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<span class="comment">         * the thinout specified </span>
<span class="comment">         * note - we will only be in the loop at all if we still need more samples*/</span>
        <span class="keywordflow">if</span> (burntin &amp;&amp; ((states-burntinReachedState)%thinout == 0)) {
          
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;sampling at state &quot;</span> &lt;&lt; states &lt;&lt; endl;
            sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
  
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          
          <span class="comment">// take one sample from each chain until we have enough samples</span>
          <span class="comment">// and increment samplesSoFar for each one taken</span>
          vector&lt;AdaptiveHistogram*&gt;::iterator ait;
          <span class="keywordflow">for</span> (ait = hists.begin(); 
              (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
              ++ait) {
            
            samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
            
            samplesSoFar++;
            
            <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
              (*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);
            }
            
          }
          
        } <span class="comment">// finished taking samples for this loop</span>
        <span class="keywordflow">else</span> {
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            
            sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>        }
        
        assert(samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar);
        
        <span class="comment">// back into loop</span>
<span class="preprocessor">        #if !defined(MYDEBUG_OUTPUT)</span>
<span class="preprocessor"></span><span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
            <span class="keywordflow">if</span> (loopCounter%100 == 0) {
              cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
            }
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>  
      }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
      
      cancontinue = goodLoop;
      
<span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops loopCounter = &quot;</span> &lt;&lt; loopCounter &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;number of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>  
      <span class="comment">// free the random number generator</span>
      gsl_rng_free (rgsl);
  
      cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>

      <span class="comment">/* is all okay with the loop</span>
<span class="comment">       * and we have all our samples */</span>
      <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {  
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          <span class="comment">// output the overall collator</span>
          samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        
        <span class="comment">// make the return object be the average of the samples</span>
        *myCollPtr = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();

        <span class="comment">// optional output for histogram</span>
        <span class="keywordtype">string</span> histFileName = dirName;
        histFileName += <span class="stringliteral">&quot;AverageMCMC&quot;</span>;
        histFileName += stmD.str();
        histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
        myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(histFileName);
        <span class="comment">// end of optional output for histogram</span>
        
        <span class="comment">//get estimated log-likelihood for observed data</span>
        real estLogLik;
        <span class="keywordflow">if</span> (dataDim == 1) {
          estLogLik=myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">getEstLogLikelihoodFromRSSample</a>(
          labObsData, dx, wt, WeightHistVec[D], WeightPMVec[D]);
        }
        <span class="keywordflow">else</span> {
          estLogLik=myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">getEstLogLikelihoodFromRSSample</a>(
          labObsData, dx, wt);
        }
        cout &lt;&lt; setprecision(16) &lt;&lt;<span class="stringliteral">&quot;Estimated lik for Hist: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
        logLikVec.push_back(estLogLik);

        <span class="comment">// output the convergence diagnostics</span>
        <span class="comment">/*</span>
<span class="comment">        outputFile(GRL1Filename, &quot;\n\n\n Final diagnostics&quot;);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;W&quot;, Ws_L1);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;B&quot;, Bs_L1);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;estVarV&quot;, estVarV_L1);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;sqrtRhat&quot;,sqrtRhat_L1);</span>
<span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<span class="comment">        */</span>
        {
          std::vector &lt; std::string &gt; colNames;
          colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
          colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
          colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
          colNames.push_back(<span class="stringliteral">&quot;sqrtRhat&quot;</span>);
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            colNames.push_back(<span class="stringliteral">&quot;rhatL1Flag&quot;</span>);
            colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          std::vector &lt; RealVec* &gt; data;
          data.push_back(Ws_L1Ptr);
          data.push_back(Bs_L1Ptr);
          data.push_back(estVarV_L1Ptr);
          data.push_back(sqrtRhat_L1Ptr);
<span class="preprocessor">          #ifdef MYDEBUG</span>
<span class="preprocessor"></span>            data.push_back(rhatL1FlagPtr);
            data.push_back(sampledIndPtr);
<span class="preprocessor">          #endif</span>
<span class="preprocessor"></span>          <span class="keywordtype">int</span> precData = 5;
          <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1Filename, precData);
        } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
        
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        {
          <span class="comment">/* output working calcs: all L1s for each chain, </span>
<span class="comment">           * running sums for each chain, sample variances,</span>
<span class="comment">           * overall running sums */</span>
          std::vector &lt; std::string &gt; colNames;
          colNames.insert(colNames.end(), L1ColNames.begin(), L1ColNames.end());
          colNames.insert(colNames.end(), L1RunningSumColNames.begin(), L1RunningSumColNames.end());
          colNames.insert(colNames.end(), L1SampleVarianceColNames.begin(), L1SampleVarianceColNames.end());
          colNames.push_back(overallL1RunningSumColName);
          
          std::vector &lt; RealVec* &gt; data;
          data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *distancesL1Ptr);
          data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumL1ChainsPtr);
          data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesPtr);
          data.push_back(runningSumL1OverallPtr);
          
          <span class="keywordtype">int</span> precData = 10;
          <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1WorkingCalcsFilename, precData);
        }
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>
        cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Check output files &quot;</span> &lt;&lt; GRL1Filename
                &lt;&lt; <span class="stringliteral">&quot; for diagnostics&quot;</span> &lt;&lt; endl;
        <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
          cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
              &lt;&lt; <span class="stringliteral">&quot; for log of samples&quot;</span> &lt;&lt;endl;
        }
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename
              &lt;&lt; <span class="stringliteral">&quot; for working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
              &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
              &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        cout &lt;&lt; endl;
      }
      
      <span class="comment">/* clean up the newed stuff</span>
<span class="comment">       * </span>
<span class="comment">       * note that this does not get cleaned up if we throw an exception in the while loop</span>
<span class="comment">       * - should probably deal with that at some point but all the newed memory will be </span>
<span class="comment">       * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<span class="comment">       * it will be okay for the moment */</span>

      vector&lt;AdaptiveHistogram*&gt;::iterator ait;
      <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
        <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
      }
  
      vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
      <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
        <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
      }
      <span class="comment">/*</span>
<span class="comment">      for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<span class="comment">        if (NULL != *acit) delete (*acit);</span>
<span class="comment">      }</span>
<span class="comment">      */</span>

      <span class="keyword">delete</span> samplesColl;
  
      <span class="keyword">delete</span> distancesL1Ptr;  
  
      <span class="keyword">delete</span> runningSumL1Ptr;
      
<span class="preprocessor">      #ifdef MYDEBUG</span>
<span class="preprocessor"></span>        <span class="keyword">delete</span> runningSumL1OverallPtr;
        <span class="keyword">delete</span> runningSumL1ChainsPtr;
        <span class="keyword">delete</span> sampleVariancesPtr;
        <span class="keyword">delete</span> rhatL1FlagPtr;
        <span class="keyword">delete</span> sampledIndPtr;
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>  
      <span class="keyword">delete</span> Ws_L1Ptr;
      <span class="keyword">delete</span> Bs_L1Ptr;
      <span class="keyword">delete</span> estVarV_L1Ptr;
      <span class="keyword">delete</span> sqrtRhat_L1Ptr;
            
      <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<span class="comment">       *  really the only reason for failing here is that we did not get the right </span>
<span class="comment">       * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
      <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
        cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
              &lt;&lt; GRL1Filename;
<span class="preprocessor">        #ifdef MYDEBUG</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; samplesLogFilename;
        }
<span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
          &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
          &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span>;
<span class="preprocessor">        #endif</span>
<span class="preprocessor"></span>        cout &lt;&lt; endl;
        
        <span class="keywordflow">if</span> (!cancontinue) {
          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
        }
        <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
          <span class="comment">// we have not been able to get the required samples - need to give up</span>
          <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
        }
      }
    } <span class="comment">// end check on successful insertion of data into histograms</span>
  
    <span class="keywordflow">else</span> {
      <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
    }


    D++; <span class="comment">// counter to go through unlabDataVec</span>
  } <span class="comment">// end of going through unlabDataVec</span>
  
  <span class="comment">//-----------output the estimated likelihood  to .txt file------------//</span>
  <span class="keywordtype">string</span> EstLikOut = dirName;
  EstLikOut += <span class="stringliteral">&quot;ObsEstLkl.txt&quot;</span>;
  os.open(EstLikOut.c_str());
  vector&lt;real&gt;::iterator it;  
  <span class="keywordflow">for</span> (it = logLikVec.begin(); it &lt; logLikVec.end(); it++) {
      os &lt;&lt; (*it) &lt;&lt; endl;
  } 
  os &lt;&lt; flush;
  os.close();
  cout &lt;&lt; <span class="stringliteral">&quot;Likelihood ratios output to &quot;</span> &lt;&lt; EstLikOut &lt;&lt; endl; 
  cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;  
  

   <span class="comment">//free the random generator</span>
  gsl_rng_free(r);
  
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
  <span class="keywordflow">return</span> coll;
} <span class="comment">// end of AHABC</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="AHABCObsMCMCL1.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml#l00062">62</a> of file <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml">AHABCObsMCMCL1.cpp</a>.</p>

<p>References <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//--------------input parameters for AHABC--------------------------------//</span>
   <span class="comment">//directory to store files in</span>
  <span class="keywordtype">string</span> dirName = argv[1];

  <span class="comment">// names of files</span>
  <span class="keywordtype">string</span> simDataFiles = argv[2]; <span class="comment">// this is a row vector of filenames</span>
   <span class="keywordtype">string</span> obsDataFile = argv[3];

  <span class="comment">//parameters for log-likelihood estimation</span>
  <span class="keywordtype">double</span> wt = atof(argv[4]); <span class="comment">//mass to ensure positive density </span>
                     <span class="comment">//everywhere in domain</span>
  <span class="keywordtype">double</span> dx = atof(argv[5]); <span class="comment">//1 for non-atomic densities</span>

   <span class="comment">//--------------end of input parameters----------------------------------//</span>

  <span class="comment">//========user-defined parameters for MCMC====================//</span>
  <span class="keywordtype">int</span> maxLoops = atoi(argv[6]); <span class="comment">// maximum changes of state from initial state to try</span>
  <span class="keywordtype">int</span> samplesNeeded = atoi(argv[7]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
  <span class="keywordtype">int</span> thinout = atoi(argv[8]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
  
  <span class="comment">/* note that all chains will be sampled in parallel, once burnin has happened,</span>
<span class="comment">   * eg if we want 100 samples and have 4 chains and thinout 5, then we will sample</span>
<span class="comment">   * the last state from each chain as soon as convergence has been achieved </span>
<span class="comment">   * (and thus get 4 samples), and then wait 5-1 = 4 states, and on the 5th, again </span>
<span class="comment">   * sample from all 4 chains (assuming that convergence is still okay), etc etc</span>
<span class="comment">   * so it will take 1 + (100-4)/4*5 = 1 + 25*5 = 1 + 120 = 121 states from burnin inclusive</span>
<span class="comment">   * of the burnin state itself to get the full sample */</span>

  <span class="keywordtype">double</span> tol = atof(argv[9]); <span class="comment">//tolerance for automated burn in criteria</span>
  <span class="keywordtype">int</span> minPoints = atoi(argv[10]); <span class="comment">//minPoints</span>

  <span class="comment">//========Hardcoded parameters====================================//</span>
  <span class="comment">//int maxLoops = 5000; // maximum changes of state from initial state to try</span>
  <span class="comment">//int samplesNeeded = 10; // how many samples do we want (ie once chains have burned in)</span>
  <span class="comment">//int thinout = 5; // sample every thinout state, ie thinout-1 states between samples</span>
  <span class="comment">//cxsc::real tol(0.1); //tolerance for automated burn in criteria</span>
  
  <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
  <span class="keywordflow">if</span> (thinout &lt; 1 ) {
    <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
  }
  <span class="comment">//===========done with working on parameters==========================//</span>
  
  <span class="keywordflow">try</span> {
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(dirName, simDataFiles,
        obsDataFile, wt, dx,
        maxLoops, samplesNeeded, thinout, tol, minPoints);

    std::string samplesCollAverageFilename = dirName;
    samplesCollAverageFilename += <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
  
    avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
    
    <span class="keywordflow">return</span> 0;
  }
  <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
    cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
      &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  }
} 
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AHABCObsMCMCL1_8cpp.shtml">AHABCObsMCMCL1.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:18 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
