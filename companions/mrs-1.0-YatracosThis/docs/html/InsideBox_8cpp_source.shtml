<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: InsideBox.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('InsideBox_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">InsideBox.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="InsideBox_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// to use std::vector</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="comment">// to use iterators</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00030"></a>00030 <span class="comment">// to use valarray</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include&lt;map&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>cxsc;
<a name="l00043"></a>00043 <span class="keyword">using namespace </span>std;
<a name="l00044"></a>00044 
<a name="l00047"></a>00047 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00048"></a>00048 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050   <span class="keyword">public</span>:
<a name="l00051"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00051</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00052"></a>00052       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00053"></a>00053       <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055 };
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="InsideBox_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00057</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// box to use    </span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00065"></a>00065     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00066"></a>00066     gsl_rng * r;
<a name="l00067"></a>00067     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00068"></a>00068     gsl_rng_env_setup();
<a name="l00069"></a>00069     T = gsl_rng_default;
<a name="l00070"></a>00070     r = gsl_rng_alloc (T);
<a name="l00071"></a>00071     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00072"></a>00072     gsl_rng_set(r, s);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="keywordtype">string</span> fileName; <span class="comment">// create a name for the file to use</span>
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="comment">// ----------------   example to create multiple histograms -------------------</span>
<a name="l00078"></a>00078    
<a name="l00079"></a>00079     <span class="keywordtype">int</span>  numHist = 1; <span class="comment">// the number of histograms to make</span>
<a name="l00080"></a>00080     <span class="keywordtype">int</span> minLeaves = 1; <span class="comment">// for number of leaves pq splitting stopping criteria</span>
<a name="l00081"></a>00081     <span class="keywordtype">int</span> MINLeaves = 1; <span class="comment">// for number of leaves pq splitting stopping criteria</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="comment">// a map for counting visits to states of Histograms encoded</span>
<a name="l00084"></a>00084     <span class="comment">// as OrderedLeafDepths</span>
<a name="l00085"></a>00085     <span class="keyword">typedef</span> map&lt;vector&lt;int&gt;,int,<a class="code" href="classLexicoSorting.shtml">LexicoSorting&lt;vector&lt;int&gt;</a> &gt; &gt; <a class="code" href="multitreemanager_8cpp.shtml#a3ea630ec466288ccd6a700e1693615a7">OrdLeafDepthsMap</a>;
<a name="l00086"></a>00086     vector&lt; OrdLeafDepthsMap &gt; AnOrdLfDpMapVec(MINLeaves-minLeaves+1);
<a name="l00087"></a>00087     <span class="comment">//OrdLeafDepthsMap AnOrdLfDpMap;</span>
<a name="l00088"></a>00088     OrdLeafDepthsMap::iterator OrdLeafDepthsMap_Iter;
<a name="l00089"></a>00089     std::pair&lt;OrdLeafDepthsMap::iterator, bool&gt; OrdLeafDepthsMap_bool;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00092"></a>00092     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00093"></a>00093     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00094"></a>00094     oss.precision(5);
<a name="l00095"></a>00095     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00096"></a>00096     <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00097"></a>00097     <span class="keywordtype">bool</span> successfulPQMerge = <span class="keyword">false</span>;
<a name="l00098"></a>00098     <span class="keywordtype">bool</span> Mixture_bool = <span class="keyword">false</span>;<span class="comment">//using mixture or not</span>
<a name="l00099"></a>00099     <span class="comment">//----data generating partition----------------------------------------</span>
<a name="l00100"></a>00100         <span class="keywordtype">int</span> d = 1; <span class="comment">// dimension of the uniform hypercube to sample data from</span>
<a name="l00101"></a>00101         ivector pavingBox(d);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="comment">// domain is a hypercube</span>
<a name="l00104"></a>00104         interval pavingInterval(0,1);
<a name="l00105"></a>00105         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) pavingBox[i] = pavingInterval;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00108"></a>00108         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00109"></a>00109         <span class="comment">// a container for the boxes</span>
<a name="l00110"></a>00110         vector&lt;ivector&gt; Pboxes;
<a name="l00111"></a>00111         <span class="keywordtype">size_t</span> PartSize;
<a name="l00112"></a>00112 <span class="keywordflow">if</span> (Mixture_bool) {
<a name="l00113"></a>00113         <span class="comment">//not working bool successfulInstruction = myPart.splitToShape(&quot;0&quot;);// uniform</span>
<a name="l00114"></a>00114         <span class="comment">//bool successfulInstruction = myPart.splitToShape(&quot;1,1&quot;);// uniform mixture</span>
<a name="l00115"></a>00115         <span class="keywordtype">bool</span> successfulInstruction = myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>);<span class="comment">// uniform mixture</span>
<a name="l00116"></a>00116         <span class="comment">//bool successfulInstruction = myPart.splitToShape(&quot;3,3, 2, 1&quot;);</span>
<a name="l00117"></a>00117         cout &lt;&lt; <span class="stringliteral">&quot;result is &quot;</span> &lt;&lt; successfulInstruction &lt;&lt; endl;
<a name="l00118"></a>00118         cout &lt;&lt; <span class="stringliteral">&quot;Level string for new partition is &quot;</span>
<a name="l00119"></a>00119              &lt;&lt; myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>() &lt;&lt; endl;
<a name="l00120"></a>00120         <span class="comment">// we can keep splitting if the state is reachable</span>
<a name="l00121"></a>00121         <span class="comment">/*</span>
<a name="l00122"></a>00122 <span class="comment">        if (successfulInstruction) {</span>
<a name="l00123"></a>00123 <span class="comment">          successfulInstruction = myPart.splitToShape(&quot;3, 4,4, 2,2, 3,3&quot;);</span>
<a name="l00124"></a>00124 <span class="comment">          cout &lt;&lt; &quot;result is &quot; &lt;&lt; successfulInstruction &lt;&lt; endl;</span>
<a name="l00125"></a>00125 <span class="comment">          cout &lt;&lt; &quot;Level string for new partition is &quot;</span>
<a name="l00126"></a>00126 <span class="comment">               &lt;&lt; myPart.getLeafLevelsString() &lt;&lt; endl;</span>
<a name="l00127"></a>00127 <span class="comment">        // We could also have put the data from the container into</span>
<a name="l00128"></a>00128 <span class="comment">        // the histogram with the splitToShape partition, no splitting here</span>
<a name="l00129"></a>00129 <span class="comment">        // successfulInsertion = myPart.insertFromRVec(theData);</span>
<a name="l00130"></a>00130 <span class="comment">        }</span>
<a name="l00131"></a>00131 <span class="comment">        */</span>
<a name="l00132"></a>00132         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00133"></a>00133         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00134"></a>00134         myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(Pleaves); <span class="comment">// fill the container</span>
<a name="l00135"></a>00135         <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00136"></a>00136         <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
<a name="l00137"></a>00137             <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00138"></a>00138             <span class="comment">//get the counts in all the Pleaves</span>
<a name="l00139"></a>00139             <span class="comment">//get the boxes from all the Pleaves</span>
<a name="l00140"></a>00140             Pboxes.push_back((*it)-&gt;getBox());
<a name="l00141"></a>00141         }
<a name="l00142"></a>00142         PartSize = Pboxes.size();
<a name="l00143"></a>00143     <span class="comment">//----end of data generating partition----------------------------------------</span>
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt;= numHist; j++)
<a name="l00146"></a>00146     { <span class="comment">// loop to make histograms</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         <span class="comment">//cout &lt;&lt; &quot;Doing hist number &quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l00149"></a>00149         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00150"></a>00150         <span class="comment">// make a simulated data set allData to sample from</span>
<a name="l00151"></a>00151         <span class="keywordtype">int</span> n = 20; <span class="comment">// total points from random number generator</span>
<a name="l00152"></a>00152         <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00153"></a>00153         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00154"></a>00154             rvector thisrv(d);
<a name="l00155"></a>00155             <span class="keywordflow">if</span>(Mixture_bool) {
<a name="l00156"></a>00156               <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00157"></a>00157               <span class="comment">//cout &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
<a name="l00158"></a>00158               thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);
<a name="l00159"></a>00159             }
<a name="l00160"></a>00160             <span class="keywordflow">else</span> {
<a name="l00161"></a>00161               <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
<a name="l00162"></a>00162                   thisrv[i]  = gsl_rng_uniform(r);
<a name="l00163"></a>00163               }
<a name="l00164"></a>00164             }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166             <span class="comment">// put points generated into container</span>
<a name="l00167"></a>00167             <span class="comment">//cout &lt;&lt; thisrv;</span>
<a name="l00168"></a>00168             theData.push_back(thisrv);
<a name="l00169"></a>00169         }  <span class="comment">// data  should be in theData</span>
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="comment">// make an Adaptive Histogram object with a specified box</span>
<a name="l00172"></a>00172         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         <span class="comment">// put the data from the container into the histogram, no splitting here</span>
<a name="l00175"></a>00175         successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> L=minLeaves; L&lt;=MINLeaves; L++)
<a name="l00178"></a>00178         {
<a name="l00179"></a>00179 
<a name="l00180"></a>00180           <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(5);
<a name="l00181"></a>00181           <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
<a name="l00182"></a>00182           <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(L);
<a name="l00183"></a>00183           <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00184"></a>00184               <span class="comment">// now split with priority queue</span>
<a name="l00185"></a>00185               <span class="comment">// split node wth most pointsin first (compCount)</span>
<a name="l00186"></a>00186               <span class="comment">// until leaves &gt;= minLeaves (critLeaves_GTE)</span>
<a name="l00187"></a>00187               <span class="comment">// no minPoints or minVolB limitations on splittable nodes</span>
<a name="l00188"></a>00188               successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount,
<a name="l00189"></a>00189                                 critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r); <span class="comment">// no logs</span>
<a name="l00190"></a>00190           }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192           <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00193"></a>00193             <span class="comment">//</span>
<a name="l00194"></a>00194             <span class="comment">// optional - if you want to get a txt output of each histogram</span>
<a name="l00195"></a>00195             <span class="comment">// create a name for the file to output</span>
<a name="l00196"></a>00196              fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00197"></a>00197             <span class="comment">//convert j to a string</span>
<a name="l00198"></a>00198              std::ostringstream stm2;
<a name="l00199"></a>00199              stm2 &lt;&lt; j;
<a name="l00200"></a>00200             <span class="comment">// add the stringed j to the filename</span>
<a name="l00201"></a>00201              fileName += stm2.str();
<a name="l00202"></a>00202              fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00203"></a>00203             <span class="comment">// To realize a file output</span>
<a name="l00204"></a>00204              myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00205"></a>00205             <span class="comment">//myHist.outputToTxtTabsWithEMPs(fileName);</span>
<a name="l00206"></a>00206 
<a name="l00207"></a>00207             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00208"></a>00208             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00209"></a>00209             myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l00210"></a>00210             <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00211"></a>00211 
<a name="l00212"></a>00212             <span class="comment">// a container for the counts</span>
<a name="l00213"></a>00213             <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l00214"></a>00214                             <span class="comment">// the iterator is typedefed as IntVecItr</span>
<a name="l00215"></a>00215             <span class="comment">// a container for the boxes</span>
<a name="l00216"></a>00216             vector&lt;ivector&gt; boxes;
<a name="l00217"></a>00217             <span class="comment">// a container for the volumes</span>
<a name="l00218"></a>00218             vector&lt;double&gt; volumes;
<a name="l00219"></a>00219             <span class="comment">// a valarray container for the node levels, sized to fit</span>
<a name="l00220"></a>00220             valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()));
<a name="l00221"></a>00221 
<a name="l00222"></a>00222             <span class="keywordtype">int</span> v=0;
<a name="l00223"></a>00223             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00224"></a>00224 <span class="comment">//               // remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00225"></a>00225                 <span class="comment">// cout &lt;&lt; &quot;Leaf: &quot; &lt;&lt; *it &lt;&lt; endl;</span>
<a name="l00226"></a>00226                 <span class="comment">//get the counts in all the leaves</span>
<a name="l00227"></a>00227                 counts.push_back((*it)-&gt;getCounter());
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="comment">//                //get the boxes from all the leaves</span>
<a name="l00230"></a>00230                 boxes.push_back((*it)-&gt;getBox());
<a name="l00231"></a>00231               cout &lt;&lt; <span class="stringliteral">&quot;=============&quot;</span> &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">//                //get the volumes of all the leaves</span>
<a name="l00234"></a>00234 <span class="comment">//                volumes.push_back((*it)-&gt;nodeVolume());</span>
<a name="l00235"></a>00235 <span class="comment">//                //get the levels of the leaves</span>
<a name="l00236"></a>00236 <span class="comment">//                levels[v] = (*it)-&gt;getNodeDepth();</span>
<a name="l00237"></a>00237 <span class="comment">//                v++;</span>
<a name="l00238"></a>00238 
<a name="l00239"></a>00239             }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 ivector query(d);
<a name="l00243"></a>00243 query[1]=interval(0.1, 0.6);
<a name="l00244"></a>00244 cout &lt;&lt; myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>() &lt;&lt; endl;
<a name="l00245"></a>00245 cout &lt;&lt; <span class="stringliteral">&quot;spsContains&quot;</span> &lt;&lt; endl;
<a name="l00246"></a>00246 <span class="keywordtype">int</span> total = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988" title="Get the number of points in any box.">spsContains</a>(query, 0, 0);
<a name="l00247"></a>00247 cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Total: &quot;</span> &lt;&lt; total &lt;&lt; endl;
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250             <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> altLevels = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a70f9af80f0ee875d6dcbfd4cafb53813">getLeafLevels</a>();
<a name="l00251"></a>00251 <span class="comment">//</span>
<a name="l00252"></a>00252           <span class="comment">//  copy (altLevels.begin(), altLevels.end(),</span>
<a name="l00253"></a>00253             <span class="comment">//        ostream_iterator&lt;int&gt;(cout, &quot;\t&quot;));</span>
<a name="l00254"></a>00254            <span class="comment">// cout &lt;&lt; &#39;\n&#39;;</span>
<a name="l00255"></a>00255            <span class="comment">// copy (counts.begin(), counts.end(), ostream_iterator&lt;int&gt;(cout, &quot;\t&quot;));</span>
<a name="l00256"></a>00256            <span class="comment">// cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l00257"></a>00257 
<a name="l00258"></a>00258             OrdLeafDepthsMap_bool = AnOrdLfDpMapVec[L-minLeaves].insert(make_pair(altLevels,1));
<a name="l00259"></a>00259             <span class="keywordflow">if</span>(!(OrdLeafDepthsMap_bool.second)) {
<a name="l00260"></a>00260                 (OrdLeafDepthsMap_bool.first)-&gt;second +=1;
<a name="l00261"></a>00261             }
<a name="l00262"></a>00262             <span class="comment">//  This is where you&#39;d have to use/manipulate/store/whatever</span>
<a name="l00263"></a>00263             <span class="comment">//    the stuff you have from the containers for each hist</span>
<a name="l00264"></a>00264             <span class="comment">//</span>
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00267"></a>00267           }<span class="comment">//end of PQSplit</span>
<a name="l00268"></a>00268         }<span class="comment">//end of leaf level pecific splitting loop</span>
<a name="l00269"></a>00269     } <span class="comment">// end of loop for histograms</span>
<a name="l00270"></a>00270     <span class="comment">// free the random number generator</span>
<a name="l00271"></a>00271     gsl_rng_free (r);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274     cout &lt;&lt; <span class="stringliteral">&quot;empirical histogram frequencies\n&quot;</span>;
<a name="l00275"></a>00275     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> L=minLeaves; L&lt;=MINLeaves; L++)
<a name="l00276"></a>00276     {
<a name="l00277"></a>00277       cout &lt;&lt; <span class="stringliteral">&quot;L : &quot;</span> &lt;&lt; <span class="charliteral">&#39;\t&#39;</span> &lt;&lt; L &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
<a name="l00278"></a>00278       <span class="keywordflow">for</span>(OrdLeafDepthsMap_Iter=AnOrdLfDpMapVec[L-minLeaves].begin();
<a name="l00279"></a>00279           OrdLeafDepthsMap_Iter != AnOrdLfDpMapVec[L-minLeaves].end();
<a name="l00280"></a>00280           ++OrdLeafDepthsMap_Iter){
<a name="l00281"></a>00281               <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> altLevels = OrdLeafDepthsMap_Iter-&gt;first;
<a name="l00282"></a>00282               cout &lt;&lt; OrdLeafDepthsMap_Iter-&gt;second &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; <span class="charliteral">&#39;\t&#39;</span>;
<a name="l00283"></a>00283               copy (altLevels.begin(), altLevels.end(),
<a name="l00284"></a>00284                      ostream_iterator&lt;int&gt;(cout, <span class="stringliteral">&quot;;&quot;</span>));
<a name="l00285"></a>00285               cout &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
<a name="l00286"></a>00286       }
<a name="l00287"></a>00287     }
<a name="l00288"></a>00288     <span class="comment">//  All the histograms done, you&#39;ve somehow stored some summary from each,</span>
<a name="l00289"></a>00289     <span class="comment">//  you can now do something with the summary</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 
<a name="l00292"></a>00292     <span class="keywordflow">return</span> 0;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 } <span class="comment">// end of histrogram report test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="InsideBox_8cpp.shtml">InsideBox.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
