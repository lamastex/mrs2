<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Rosenbrock.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MooreRejSam/Rosenbrock/Rosenbrock.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>MRS example using Rosenbrock function Using an example function object class with <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> class.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;iostream&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;math.h&gt;</code><br/>
<code>#include &lt;getopt.h&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &quot;interval.hpp&quot;</code><br/>
<code>#include &quot;imath.hpp&quot;</code><br/>
<code>#include &quot;rmath.hpp&quot;</code><br/>
<code>#include &quot;intvector.hpp&quot;</code><br/>
<code>#include &quot;ivector.hpp&quot;</code><br/>
<code>#include &quot;rvector.hpp&quot;</code><br/>
<code>#include &quot;imatrix.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_rng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;numeric&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;ctype.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="SmallClasses_8hpp_source.shtml">SmallClasses.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="FRosenbrock_8hpp_source.shtml">FRosenbrock.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>&quot;</code><br/>
</div>
<p><a href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a> (<a class="el" href="classFobj.shtml">Fobj</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, int n_boxes, int n_samples, double Alb, unsigned seed, bool use_f_scale)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>MRS example using Rosenbrock function Using an example function object class with <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> class. </p>

<p>Definition in file <a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml">MooreRejSam/Rosenbrock/Rosenbrock.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="MooreRejSam/Rosenbrock/Rosenbrock.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml#l00119">119</a> of file <a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml">MooreRejSam/Rosenbrock/Rosenbrock.cpp</a>.</p>

<p>References <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00018">Height</a>, <a class="el" href="MooreImpSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">ProduceMRSamples()</a>, and <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00017">Tinverse</a>.</p>
<div class="fragment"><pre class="fragment">{
  ios::sync_with_stdio ();  <span class="comment">// call this function so iostream works with stdio</span>
  cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>
  
  <span class="comment">// set default values</span>
  <span class="keywordtype">int</span> n_dimensions = 2; 
  <span class="keywordtype">int</span> n_boxes = 100;
  <span class="keywordtype">int</span> n_samples = 50;
  <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
  <span class="keywordtype">unsigned</span> theSeed = 0;
  
  <span class="comment">//Parameters specific to the Rosenbrock target</span>
  real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
  real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
  real RosenDomainLimit = 10.0;
  
  <span class="comment">/*</span>
<span class="comment">  if (argc &gt;= 2)</span>
<span class="comment">  {</span>
<span class="comment">    sscanf (argv[1], &quot;%i&quot;, &amp;n_dimensions);</span>
<span class="comment">    if (argc &gt;= 3)</span>
<span class="comment">    {</span>
<span class="comment">      sscanf (argv[2], &quot;%i&quot;, &amp;n_boxes);</span>
<span class="comment">      </span>
<span class="comment">      if (argc &gt;= 4)</span>
<span class="comment">        sscanf (argv[3], &quot;%i&quot;, &amp;n_samples);</span>
<span class="comment">      if (argc &gt;= 5) </span>
<span class="comment">        sscanf (argv[4], &quot;%ui&quot;, &amp;theSeed);</span>
<span class="comment">      if (argc &gt;= 6)</span>
<span class="comment">        cout &lt;&lt; &quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<span class="comment">             &lt;&lt; &quot;extra arguments ignored.\n&quot;;</span>
<span class="comment">    }</span>
<span class="comment">    </span>
<span class="comment">    else cout &lt;&lt; &quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<span class="comment">              &lt;&lt; &quot;extra arguments ignored.\n&quot;;</span>
<span class="comment">    </span>
<span class="comment">  }</span>
<span class="comment">  */</span>
  
  cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes 
       &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed  
       &lt;&lt; endl; <span class="comment">//getchar();</span>
  
  <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
  <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
  
  <span class="comment">// make the function object</span>
  <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> FRosen (n_dimensions, 
                      Tinverse, Height, RosenDomainLimit, UseLogPi);
  
  <span class="comment">// produce the samples</span>
  <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FRosen, n_boxes, n_samples, 
                   Alb, theSeed, use_f_scale);
  
  <span class="keywordflow">return</span> 0;     <span class="comment">// end main statement</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a631ece91d072eb67cffd058e11c49468"></a><!-- doxytag: member="MooreRejSam/Rosenbrock/Rosenbrock.cpp::ProduceMRSamples" ref="a631ece91d072eb67cffd058e11c49468" args="(Fobj &amp;f, int n_boxes, int n_samples, double Alb, unsigned seed, bool use_f_scale)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="SEBPQFunctionSimRosen_8cpp.shtml#a0c0402be9ebd7abad750822814d38f99">ProduceMRSamples</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFobj.shtml">Fobj</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n_samples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>Alb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_f_scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml#l00063">63</a> of file <a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp_source.shtml">MooreRejSam/Rosenbrock/Rosenbrock.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00238">RSSample::EnvelopeIntegral</a>, <a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">Fobj::get_interval_calls()</a>, <a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">Fobj::get_real_calls()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00245">RSSample::IntegralEstimate()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00260">RSSample::Mean()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00336">RSSample::Print()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">MRSampler::RejectionSampleMany()</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>.</p>
<div class="fragment"><pre class="fragment">{
  ofstream out (<span class="stringliteral">&quot;MRS_Rosenbrock.samples&quot;</span>);<span class="comment">//file to store the i.i.d samples</span>
  clock_t T1 = clock (), T2, T3;
  <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
  <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (f, n_boxes, Alb, seed, (use_f_scale == 1));
  
        <span class="comment">//--comment this printing block if not needed</span>
        <span class="comment">// To print out the partition of the domain</span>
        <span class="comment">//cout &lt;&lt; &quot;Domain Partition: \n&quot; ;</span>
        <span class="comment">//ofstream Partout (&quot;MRS_RosenbrockDomain.txt&quot;); //Filename</span>
        <span class="comment">//theSampler.Print_Domain_Partition(Partout);</span>
        <span class="comment">//cout &lt;&lt; &quot;The output has been written to MRS_IsIt1or2CoinsDomain.txt&quot; </span>
        <span class="comment">//     &lt;&lt; endl &lt;&lt; endl;</span>
 
        <span class="comment">// To realize a file output of the RangeDomainSet</span>
        ofstream os(<span class="stringliteral">&quot;MRS_RosenbrockRangeDomainSet.txt&quot;</span>);         <span class="comment">// Filename</span>
        os &lt;&lt; theSampler &lt;&lt; endl;                   
        cout &lt;&lt; <span class="stringliteral">&quot;output has been written to MRS_IsIt1or2CoinsRangeDomainSet.txt&quot;</span> 
             &lt;&lt; endl &lt;&lt; endl;
        <span class="comment">//--end of printing block</span>
<span class="comment"></span>  <span class="comment">// To print out the partition of the domain</span>
  
  T2 = clock ();
  <span class="keywordtype">double</span> Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;
  
  <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
  cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
  cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
  theSampler.RejectionSampleMany (n_samples, rs_sample);
  cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
  <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
  cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
       &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
  rs_sample.<a class="code" href="classRSSample.shtml#ae38d39be1ed34d9a06df7f3d76ab2962" title="Print sampled labeled points in Samples as a matrix with TAB padding.">Print</a>(out);
  
  cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af" title="Get number of interval function calls.">get_interval_calls</a> () &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7" title="Get number of real function calls.">get_real_calls</a> () &lt;&lt; endl;
  
  <span class="comment">//----------------------------------------------------------------------------</span>
  T3 = clock ();
  <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> 
       &lt;&lt; Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate: &quot;</span> 
       &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (n_samples) &lt;&lt; endl;
  
  
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MooreRejSam_2Rosenbrock_2Rosenbrock_8cpp.shtml">Rosenbrock.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:22 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
