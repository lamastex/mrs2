<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: taylor::dim2taylor Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classtaylor_1_1dim2taylor.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">taylor::dim2taylor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="taylor::dim2taylor" -->
<p><code>#include &lt;<a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>&gt;</code></p>

<p><a href="classtaylor_1_1dim2taylor-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ad7ee9b4029a65ec750e8be8f2a4241d2">dim2taylor</a> (int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a95930d83a52a47f2547591fce0283c16">dim2taylor</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a7216581b3f89d2ef618e1ec3412056c2">dim2taylor</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a910e9d2b6f8df7e08c6993039475b8b3">~dim2taylor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aadd57620043591d41cd62f6b28299d8f">operator=</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ab8e423651b66d8d139153d6cc33efbd7">operator[]</a> (int n) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a060b69225e4e25f12c4366cd5d626500">get_p</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">order</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a36fc3e017a76b47429978bf04580809c">print_dim2taylor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a9ab021c4d972c15bf8785d54cb827f09">print_dim2taylor</a> (std::ostream &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a70d5bbe4a35c69b21f57e4924153029a">rescale</a> (int i, int j, interval factor)</td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a8c0fa623afa0bd7232383a92323034b9">init_var</a> (int, int, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a> (int, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aab904a95a98e21b21ee031059cac17e8">operator&lt;&lt;</a> (std::ostream &amp;, <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a3bcec54e79e69c21c13d7172eb7f1e80">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#acadb11c640820dd3e04df8a76df68847">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ad28973bf323c013e9b2408e545d73340">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a0128fad9ad560b136628b54b2db20f8a">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a3b317bf23d21b4e71893fd523f73e961">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a2957c8c107e41f10212695f7cc4e67b3">operator-</a> (const interval &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a94f1681d271c24986e505d2cab8672b3">operator+</a> (const interval &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#abc89439f8317a6edbdcb10f0985a6a45">operator*</a> (const interval &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ac8e54bc904ea5484d3396718abb1f11b">operator/</a> (const interval &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af606a5ebad7f118ee1a76a5ab4e0726a">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aa933d2b6b2551cbc590f399f49411eac">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a9d529379a2fb41cb1d82891fc27f9a7a">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ab207e289fba8f39a622b2413b80663dc">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a0514d94015d5aa559812f43086cdea02">operator-</a> (const real &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a6d1538c756688160d8c101f3df990e6c">operator+</a> (const real &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a4e87158c70647066f1c4d6b32f91ee10">operator*</a> (const real &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ab7c059a521398354da079fbe16472b58">operator/</a> (const real &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a76bdb636ad6d8d93153e4eb536b63dfc">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const real &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a90620b246015f13f1e2b4465e94d2a2c">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const real &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af7ee67d9c68cbcc00272dabf4217147e">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const real &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a6e797966e808641e8bac96bf139c3171">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const real &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a877e3ffa1e63ba74cfd3fbe2d55c21ef">operator-</a> (int, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a550701a8d2eb556725616d7d6eda9c32">operator+</a> (int, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a0f140f0d741024645798a527ff01b042">operator*</a> (int, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#acf30d0d4be12a38fef863cd8fd59b5b0">operator/</a> (int, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a40a2fbde540b34e912071fa7ec7ebc40">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a98134295941b50ca9a1bb27653d8c66d">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ac6fe62a3f83125b97038c34d8bb70e0f">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ac66f42b7e2992aaa02b88898cd1da51f">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a0ee48b960b16cd8d2ecbafeb58420022">sqrt1px2</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a91a86e0655561bafd6c1609ab75ce13e">sqrtx2m1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a43d67bd8644d997c3acb7ec15302d543">sqrtp1m1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#abdf82637f3423a00d9f6537e0e24b1ec">pow</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a56014cfe86271f3c7381f38719840488">power</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#add076ca02a1a206d45cdba3c3975f482">exp</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#afeceb1f35bc0ddad1298ba9d7ad6058e">ln</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aedce903fbdae780d0747f98d3df97999">lnp1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#adc5c16c2f29f77a66a9bc58da67cb836">sin</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a5664e8bd2886b7a7cb182d0de6cc8488">cos</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#ae1512635633c3f04275139d114882992">tan</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a1bc5d172758d7c1778e68fd3f49e023e">cot</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aeac682b730862bff598a6fb0206b5764">sinh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a66716209543861cf0e04cc0e1f92b29a">cosh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a418b70a725a6518ff77e7c8d6c169144">tanh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a4f29b432dc4e82bb9bbd7ef9a1d8cd8c">coth</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a2482f3c0537187553577cc066bc7be02">asin</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a998947a4015cc752416339e96be56bcd">acos</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a356054c59d1ee1a4a04c377b1029c773">atan</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#addd4a90845a5143e8b9e6950a32d0618">acot</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#aff3dc8ab9145b558b7f60ae455fa0fdb">asinh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a90e7380360f327ec4acc83f8ee851710">acosh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a721ffaeb7fe159ba485eca03a00bbe56">atanh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af5ee0d6bc989b885c069e24afb9a545b">acoth</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af895bd87e20ec4e15cba89fb56806188">erf</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a42349afab7dd4af2f8853fce8aa6e168">erfc</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;, int)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00056">56</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af42deea4555d3e27017799d98c889d19"></a><!-- doxytag: member="taylor::dim2taylor::dim2taylor" ref="af42deea4555d3e27017799d98c889d19" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">taylor::dim2taylor::dim2taylor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00042">42</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>=0;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=<span class="keyword">new</span> ivector[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1];
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) Resize(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i], 0, <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad7ee9b4029a65ec750e8be8f2a4241d2"></a><!-- doxytag: member="taylor::dim2taylor::dim2taylor" ref="ad7ee9b4029a65ec750e8be8f2a4241d2" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">taylor::dim2taylor::dim2taylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00051">51</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>=<a class="code" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">order</a>;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=<span class="keyword">new</span> ivector[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1];
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>; i++) Resize(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i], 0, <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a95930d83a52a47f2547591fce0283c16"></a><!-- doxytag: member="taylor::dim2taylor::dim2taylor" ref="a95930d83a52a47f2547591fce0283c16" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">taylor::dim2taylor::dim2taylor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00060">60</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00060">dat</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>=s.p;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=<span class="keyword">new</span> ivector[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1];
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ;i++) <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i]=s.dat[i];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7216581b3f89d2ef618e1ec3412056c2"></a><!-- doxytag: member="taylor::dim2taylor::dim2taylor" ref="a7216581b3f89d2ef618e1ec3412056c2" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">taylor::dim2taylor::dim2taylor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01638">1638</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00060">dat</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>=s.p+1;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=<span class="keyword">new</span> ivector[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1];
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-1 ;i++) {
   <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i]=s.dat[i];
   Resize(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i], 0, <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i);
   <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i][<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-i]=0.0;
 }
 Resize(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>],0,0);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>][0]=0.0;
 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a910e9d2b6f8df7e08c6993039475b8b3"></a><!-- doxytag: member="taylor::dim2taylor::~dim2taylor" ref="a910e9d2b6f8df7e08c6993039475b8b3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml#a910e9d2b6f8df7e08c6993039475b8b3">taylor::dim2taylor::~dim2taylor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00068">68</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keyword">delete</span>[] <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=NULL;
}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a060b69225e4e25f12c4366cd5d626500"></a><!-- doxytag: member="taylor::dim2taylor::get_p" ref="a060b69225e4e25f12c4366cd5d626500" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1dim2taylor.shtml#a060b69225e4e25f12c4366cd5d626500">taylor::dim2taylor::get_p</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00080">80</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;};
</pre></div>
</div>
</div>
<a class="anchor" id="aadd57620043591d41cd62f6b28299d8f"></a><!-- doxytag: member="taylor::dim2taylor::operator=" ref="aadd57620043591d41cd62f6b28299d8f" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp; taylor::dim2taylor::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00077">77</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00060">dat</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(<span class="keyword">this</span> != &amp;s)
 {
  <span class="keyword">delete</span>[] <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>;
  <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=NULL;
  <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>=s.p;
  <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>=<span class="keyword">new</span> ivector[<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>+1];

  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; i++) <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i]=s.dat[i]; 

 }
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8e423651b66d8d139153d6cc33efbd7"></a><!-- doxytag: member="taylor::dim2taylor::operator[]" ref="ab8e423651b66d8d139153d6cc33efbd7" args="(int n) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector &amp; taylor::dim2taylor::operator[] </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00094">94</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[n];
} 
</pre></div>
</div>
</div>
<a class="anchor" id="afd9dcb9af56af0136cf009c039542fc9"></a><!-- doxytag: member="taylor::dim2taylor::order" ref="afd9dcb9af56af0136cf009c039542fc9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">taylor::dim2taylor::order</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00081">81</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>;}  <span class="comment">//added, mg2005-08/2005-11</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a36fc3e017a76b47429978bf04580809c"></a><!-- doxytag: member="taylor::dim2taylor::print_dim2taylor" ref="a36fc3e017a76b47429978bf04580809c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1dim2taylor.shtml#a36fc3e017a76b47429978bf04580809c">taylor::dim2taylor::print_dim2taylor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00150">150</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
    {
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) std::cout &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
  std::cout &lt;&lt; std::endl;
    }
    std::cout &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ab021c4d972c15bf8785d54cb827f09"></a><!-- doxytag: member="taylor::dim2taylor::print_dim2taylor" ref="a9ab021c4d972c15bf8785d54cb827f09" args="(std::ostream &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1dim2taylor.shtml#a36fc3e017a76b47429978bf04580809c">taylor::dim2taylor::print_dim2taylor</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00162">162</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) std::cout &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
   os &lt;&lt; std::endl;
  }
 os &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70d5bbe4a35c69b21f57e4924153029a"></a><!-- doxytag: member="taylor::dim2taylor::rescale" ref="a70d5bbe4a35c69b21f57e4924153029a" args="(int i, int j, interval factor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1dim2taylor.shtml#a70d5bbe4a35c69b21f57e4924153029a">taylor::dim2taylor::rescale</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interval&#160;</td>
          <td class="paramname"><em>factor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00172">172</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[i][j]*=factor;}
</pre></div>
</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a998947a4015cc752416339e96be56bcd"></a><!-- doxytag: member="taylor::dim2taylor::acos" ref="a998947a4015cc752416339e96be56bcd" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a998947a4015cc752416339e96be56bcd">acos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">1267</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>( interval(1.0)-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s) );

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acos : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a90e7380360f327ec4acc83f8ee851710"></a><!-- doxytag: member="taylor::dim2taylor::acosh" ref="a90e7380360f327ec4acc83f8ee851710" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a90e7380360f327ec4acc83f8ee851710">acosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">1336</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

<span class="comment">// g=sqrt(sqr(s)-interval(1.0));</span>
 g = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a91a86e0655561bafd6c1609ab75ce13e">sqrtx2m1</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acosh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="addd4a90845a5143e8b9e6950a32d0618"></a><!-- doxytag: member="taylor::dim2taylor::acot" ref="addd4a90845a5143e8b9e6950a32d0618" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#addd4a90845a5143e8b9e6950a32d0618">acot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">1301</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-(interval(1.0)+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acot : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af5ee0d6bc989b885c069e24afb9a545b"></a><!-- doxytag: member="taylor::dim2taylor::acoth" ref="af5ee0d6bc989b885c069e24afb9a545b" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#af5ee0d6bc989b885c069e24afb9a545b">acoth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">1371</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acoth : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2482f3c0537187553577cc066bc7be02"></a><!-- doxytag: member="taylor::dim2taylor::asin" ref="a2482f3c0537187553577cc066bc7be02" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a2482f3c0537187553577cc066bc7be02">asin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">1250</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>( interval(1.0)-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s) );

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asin : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aff3dc8ab9145b558b7f60ae455fa0fdb"></a><!-- doxytag: member="taylor::dim2taylor::asinh" ref="aff3dc8ab9145b558b7f60ae455fa0fdb" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#aff3dc8ab9145b558b7f60ae455fa0fdb">asinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">1318</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

<span class="comment">// g=sqrt(interval(1.0)+sqr(s));</span>
 g = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a0ee48b960b16cd8d2ecbafeb58420022">sqrt1px2</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asinh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a356054c59d1ee1a4a04c377b1029c773"></a><!-- doxytag: member="taylor::dim2taylor::atan" ref="a356054c59d1ee1a4a04c377b1029c773" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a356054c59d1ee1a4a04c377b1029c773">atan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">1284</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atan : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a721ffaeb7fe159ba485eca03a00bbe56"></a><!-- doxytag: member="taylor::dim2taylor::atanh" ref="a721ffaeb7fe159ba485eca03a00bbe56" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a721ffaeb7fe159ba485eca03a00bbe56">atanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">1354</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atanh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5664e8bd2886b7a7cb182d0de6cc8488"></a><!-- doxytag: member="taylor::dim2taylor::cos" ref="a5664e8bd2886b7a7cb182d0de6cc8488" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a5664e8bd2886b7a7cb182d0de6cc8488">cos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">1052</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#adc5c16c2f29f77a66a9bc58da67cb836">sin</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a5664e8bd2886b7a7cb182d0de6cc8488">cos</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=-sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a66716209543861cf0e04cc0e1f92b29a"></a><!-- doxytag: member="taylor::dim2taylor::cosh" ref="a66716209543861cf0e04cc0e1f92b29a" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a66716209543861cf0e04cc0e1f92b29a">cosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">1173</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#aeac682b730862bff598a6fb0206b5764">sinh</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a66716209543861cf0e04cc0e1f92b29a">cosh</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1bc5d172758d7c1778e68fd3f49e023e"></a><!-- doxytag: member="taylor::dim2taylor::cot" ref="a1bc5d172758d7c1778e68fd3f49e023e" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a1bc5d172758d7c1778e68fd3f49e023e">cot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">1113</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml#adc5c16c2f29f77a66a9bc58da67cb836">sin</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor cot : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f29b432dc4e82bb9bbd7ef9a1d8cd8c"></a><!-- doxytag: member="taylor::dim2taylor::coth" ref="a4f29b432dc4e82bb9bbd7ef9a1d8cd8c" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a4f29b432dc4e82bb9bbd7ef9a1d8cd8c">coth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">1233</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml#aeac682b730862bff598a6fb0206b5764">sinh</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor coth : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af895bd87e20ec4e15cba89fb56806188"></a><!-- doxytag: member="taylor::dim2taylor::erf" ref="af895bd87e20ec4e15cba89fb56806188" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#af895bd87e20ec4e15cba89fb56806188">erf</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">1389</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);

 idotprecision sum_idot;
 interval sum;

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> g(s.p);

 g=<a class="code" href="classtaylor_1_1dim2taylor.shtml#add076ca02a1a206d45cdba3c3975f482">exp</a>(-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s));

 erg[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#af895bd87e20ec4e15cba89fb56806188">erf</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
                                     <span class="comment">// equiv. to erg(k1,k2) in Braeuer Thesis</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot, h*g[l][m], s[i-l][k-i-m]);
                                             <span class="comment">//Braeuer:s[k1-j1][k2-j2]</span>
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot, sum);  
       erg[i][k-i]=interval(2)*sum/(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
     }
       }
   }

 <span class="keywordflow">return</span> erg;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a42349afab7dd4af2f8853fce8aa6e168"></a><!-- doxytag: member="taylor::dim2taylor::erfc" ref="a42349afab7dd4af2f8853fce8aa6e168" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a42349afab7dd4af2f8853fce8aa6e168">erfc</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01434">1434</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);

 erg=interval(1)-<a class="code" href="classtaylor_1_1dim2taylor.shtml#af895bd87e20ec4e15cba89fb56806188">erf</a>(s);

 <span class="keywordflow">return</span> erg;

}
</pre></div>
</div>
</div>
<a class="anchor" id="add076ca02a1a206d45cdba3c3975f482"></a><!-- doxytag: member="taylor::dim2taylor::exp" ref="add076ca02a1a206d45cdba3c3975f482" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#add076ca02a1a206d45cdba3c3975f482">exp</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">923</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);

 idotprecision sum_idot;
 interval sum;

 erg[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#add076ca02a1a206d45cdba3c3975f482">exp</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot, h*erg[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot, sum);  
       erg[i][k-i]=sum/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1990d432f619f0945b84ef4bdf5aa89b"></a><!-- doxytag: member="taylor::dim2taylor::f_g_u" ref="a1990d432f619f0945b84ef4bdf5aa89b" args="(const dim2taylor &amp;, const dim2taylor &amp;, const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>_fkt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">1447</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 idotprecision sum_idot;

 interval sum1, sum2;
 
 <span class="keywordflow">switch</span>(_fkt)   { 
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>:       {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#afeceb1f35bc0ddad1298ba9d7ad6058e">ln</a>(u[0][0]);       <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>:     {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#aedce903fbdae780d0747f98d3df97999">lnp1</a>(u[0][0]);     <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>: {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a43d67bd8644d997c3acb7ec15302d543">sqrtp1m1</a>(u[0][0]); <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>:      {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#ae1512635633c3f04275139d114882992">tan</a>(u[0][0]);      <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>:      {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1bc5d172758d7c1778e68fd3f49e023e">cot</a>(u[0][0]);      <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a2482f3c0537187553577cc066bc7be02">asin</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a998947a4015cc752416339e96be56bcd">acos</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a356054c59d1ee1a4a04c377b1029c773">atan</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#addd4a90845a5143e8b9e6950a32d0618">acot</a>(u[0][0]);  <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a418b70a725a6518ff77e7c8d6c169144">tanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a4f29b432dc4e82bb9bbd7ef9a1d8cd8c">coth</a>(u[0][0]);  <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#aff3dc8ab9145b558b7f60ae455fa0fdb">asinh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a90e7380360f327ec4acc83f8ee851710">acosh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a721ffaeb7fe159ba485eca03a00bbe56">atanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#af5ee0d6bc989b885c069e24afb9a545b">acoth</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   } 

 <span class="keywordflow">if</span>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p; k++)
       {
   sum_idot=interval(0.0);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
     {
       accumulate(sum_idot, interval(j)*<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][j], g[0][k-j]);
     }
   rnd(sum_idot, sum1);
   <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][k]=(u[0][k]-sum1/interval(k))/g[0][0];
       }

     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p; i++) <span class="comment">// now calculating the remainding f(i,j)</span>
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p-i; j++)
     {
       sum_idot=interval(0.0);
       
       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i-1; l++) 
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=j; m++)
      {
      accumulate(sum_idot, interval(l)*<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[l][m], g[i-l][j-m]);
      }
         }
       rnd(sum_idot, sum1); 
       
       sum_idot=interval(0.0);
       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=j; m++) 
         {
     accumulate(sum_idot, g[0][m], <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[i][j-m]);
         }
       rnd(sum_idot, sum2); 
       
       <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[i][j]=(u[i][j]-sum1/interval(i)-sum2)/g[0][0];
     }
       } 
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1e38ee90f5a7748279910deb6bb5a18c"></a><!-- doxytag: member="taylor::dim2taylor::init_const" ref="a1e38ee90f5a7748279910deb6bb5a18c" args="(int, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">132</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t(<a class="code" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">order</a>);

 <span class="keywordflow">if</span>(t.p&gt;0)
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=t.p ; j++) 
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.p-j ; i++) t[j][i]=interval(0.0);       
  }

 t[0][0]=value;

 <span class="keywordflow">return</span> t;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8c0fa623afa0bd7232383a92323034b9"></a><!-- doxytag: member="taylor::dim2taylor::init_var" ref="a8c0fa623afa0bd7232383a92323034b9" args="(int, int, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a8c0fa623afa0bd7232383a92323034b9">init_var</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00101">101</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t(<a class="code" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">order</a>);

 <span class="keywordflow">if</span>( (nr&lt;1) &amp;&amp; (nr&gt;2) ) std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor::init_var&quot;</span> 
                                  &lt;&lt; std::endl;

 t[0][0]=value;

 <span class="keywordflow">if</span>(t.p&gt;0)
  {
   <span class="keywordflow">if</span>(nr==1) t[1][0]=interval(1.0);
   <span class="keywordflow">else</span> t[1][0]=interval(0.0);

   <span class="keywordflow">if</span>(nr==2) t[0][1]=interval(1.0);
   <span class="keywordflow">else</span> t[0][1]=interval(0.0);
   
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=t.p; i++) {t[0][i]=interval(0.0);}   <span class="comment">// Rest 0. line</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=t.p-1; i++) {t[1][i]=interval(0.0);} <span class="comment">// Rest 1. line  </span>

   <span class="comment">// remaining elements</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=2; j&lt;=t.p ; j++) 
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.p-j ; i++) t[j][i]=interval(0.0);       
  }

 <span class="keywordflow">return</span> t;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afeceb1f35bc0ddad1298ba9d7ad6058e"></a><!-- doxytag: member="taylor::dim2taylor::ln" ref="afeceb1f35bc0ddad1298ba9d7ad6058e" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#afeceb1f35bc0ddad1298ba9d7ad6058e">ln</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">960</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p);

 <span class="keywordflow">if</span>(0&lt;=s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor ln : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, s, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aedce903fbdae780d0747f98d3df97999"></a><!-- doxytag: member="taylor::dim2taylor::lnp1" ref="aedce903fbdae780d0747f98d3df97999" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#aedce903fbdae780d0747f98d3df97999">lnp1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">975</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);
 g = interval(1) + s;

 <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor lnp1 : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0128fad9ad560b136628b54b2db20f8a"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="a0128fad9ad560b136628b54b2db20f8a" args="(const dim2taylor &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00259">259</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator* : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(order1);

 idotprecision sum_idot;

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++)
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// calculating erg(i,k-i)</span>
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
    {
      accumulate(sum_idot, s[l][m], t[i-l][k-i-m]);
    } 
  }  

      rnd(sum_idot, erg[i][k-i]);      
     }
  }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abc89439f8317a6edbdcb10f0985a6a45"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="abc89439f8317a6edbdcb10f0985a6a45" args="(const interval &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00370">370</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p, s);

 erg=s_ty*t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9d529379a2fb41cb1d82891fc27f9a7a"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="a9d529379a2fb41cb1d82891fc27f9a7a" args="(const dim2taylor &amp;, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00408">408</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p, t);

 erg=s*t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4e87158c70647066f1c4d6b32f91ee10"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="a4e87158c70647066f1c4d6b32f91ee10" args="(const real &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00449">449</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i); 
    erg = s_ty * t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af7ee67d9c68cbcc00272dabf4217147e"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="af7ee67d9c68cbcc00272dabf4217147e" args="(const dim2taylor &amp;, const real &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00487">487</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s * t_ty;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0f140f0d741024645798a527ff01b042"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="a0f140f0d741024645798a527ff01b042" args="(int, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00526">526</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i); 
    erg = s_ty * t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac6fe62a3f83125b97038c34d8bb70e0f"></a><!-- doxytag: member="taylor::dim2taylor::operator*" ref="ac6fe62a3f83125b97038c34d8bb70e0f" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00564">564</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s * t_ty;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad28973bf323c013e9b2408e545d73340"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="ad28973bf323c013e9b2408e545d73340" args="(const dim2taylor &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00235">235</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">int</span> order1=s.p;
<span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator+ : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(order1);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=s[j][i]+t[j][i];
  }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a94f1681d271c24986e505d2cab8672b3"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="a94f1681d271c24986e505d2cab8672b3" args="(const interval &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00361">361</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p, s);

 erg = s_ty + t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa933d2b6b2551cbc590f399f49411eac"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="aa933d2b6b2551cbc590f399f49411eac" args="(const dim2taylor &amp;, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00399">399</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p, t);

 erg=s+t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6d1538c756688160d8c101f3df990e6c"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="a6d1538c756688160d8c101f3df990e6c" args="(const real &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00439">439</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{    
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);
    erg = s_ty + t;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a90620b246015f13f1e2b4465e94d2a2c"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="a90620b246015f13f1e2b4465e94d2a2c" args="(const dim2taylor &amp;, const real &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00478">478</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s + t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a550701a8d2eb556725616d7d6eda9c32"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="a550701a8d2eb556725616d7d6eda9c32" args="(int, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00516">516</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{    
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);
    erg = s_ty + t;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a98134295941b50ca9a1bb27653d8c66d"></a><!-- doxytag: member="taylor::dim2taylor::operator+" ref="a98134295941b50ca9a1bb27653d8c66d" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00555">555</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s + t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3bcec54e79e69c21c13d7172eb7f1e80"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a3bcec54e79e69c21c13d7172eb7f1e80" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00196">196</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml#afd9dcb9af56af0136cf009c039542fc9">order</a>=s.p;
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(order);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=-s[j][i];
  }
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acadb11c640820dd3e04df8a76df68847"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="acadb11c640820dd3e04df8a76df68847" args="(const dim2taylor &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00211">211</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     std::cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator- : Operands with different orders&quot;</span>;
     std::cerr &lt;&lt; std::endl;
     exit(1);
   }

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(order1);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=s[j][i]-t[j][i];
  }
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2957c8c107e41f10212695f7cc4e67b3"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a2957c8c107e41f10212695f7cc4e67b3" args="(const interval &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00352">352</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p, s);

 erg=s_ty-t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af606a5ebad7f118ee1a76a5ab4e0726a"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="af606a5ebad7f118ee1a76a5ab4e0726a" args="(const dim2taylor &amp;, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00390">390</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p, t);

 erg=s-t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0514d94015d5aa559812f43086cdea02"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a0514d94015d5aa559812f43086cdea02" args="(const real &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00428">428</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);
    erg = s_ty - t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a76bdb636ad6d8d93153e4eb536b63dfc"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a76bdb636ad6d8d93153e4eb536b63dfc" args="(const dim2taylor &amp;, const real &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00469">469</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s - t_ty; 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a877e3ffa1e63ba74cfd3fbe2d55c21ef"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a877e3ffa1e63ba74cfd3fbe2d55c21ef" args="(int, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00507">507</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);
    erg = s_ty - t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a40a2fbde540b34e912071fa7ec7ebc40"></a><!-- doxytag: member="taylor::dim2taylor::operator&#45;" ref="a40a2fbde540b34e912071fa7ec7ebc40" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00546">546</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s - t_ty; 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3b317bf23d21b4e71893fd523f73e961"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="a3b317bf23d21b4e71893fd523f73e961" args="(const dim2taylor &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00298">298</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(order1);

 idotprecision sum_idot;

 interval h, sum;

 <span class="keywordflow">if</span>(0.0 &lt;= t[0][0]) 
  {
    cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : 0 in denominator&quot;</span> &lt;&lt; endl;
    exit(1);
  }
 h=interval(1.0)/t[0][0];
 

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++) <span class="comment">// calculating erg(i,k-i)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// Without Coeff. (l,m)=(0,0)</span>
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k-i; m++) <span class="comment">// m &gt;= 1</span>
    {
      accumulate(sum_idot, t[l][m], erg[i-l][k-i-m]);
    }  <span class="comment">//for m</span>
  }    <span class="comment">//for l</span>

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i; l++) <span class="comment">//  m=0, l!=0</span>
  {
   accumulate(sum_idot, t[l][0], erg[i-l][k-i]);
  }  <span class="comment">// for l</span>

      rnd(sum_idot, sum);  
      erg[i][k-i]=h*(s[i][k-i]-sum);
     }
  }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac8e54bc904ea5484d3396718abb1f11b"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="ac8e54bc904ea5484d3396718abb1f11b" args="(const interval &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00379">379</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p, s);

 erg=s_ty/t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab207e289fba8f39a622b2413b80663dc"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="ab207e289fba8f39a622b2413b80663dc" args="(const dim2taylor &amp;, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00417">417</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p, t);

 erg=s/t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab7c059a521398354da079fbe16472b58"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="ab7c059a521398354da079fbe16472b58" args="(const real &amp;, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00458">458</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);  
    erg = s_ty / t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6e797966e808641e8bac96bf139c3171"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="a6e797966e808641e8bac96bf139c3171" args="(const dim2taylor &amp;, const real &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00496">496</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s / t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acf30d0d4be12a38fef863cd8fd59b5b0"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="acf30d0d4be12a38fef863cd8fd59b5b0" args="(int, const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00535">535</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(t.p);
    interval s_i(s);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> s_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(t.p,s_i);  
    erg = s_ty / t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac66f42b7e2992aaa02b88898cd1da51f"></a><!-- doxytag: member="taylor::dim2taylor::operator/" ref="ac66f42b7e2992aaa02b88898cd1da51f" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00573">573</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{   
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
    interval t_i(t);
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> t_ty = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1e38ee90f5a7748279910deb6bb5a18c">init_const</a>(s.p,t_i);  
    erg = s / t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aab904a95a98e21b21ee031059cac17e8"></a><!-- doxytag: member="taylor::dim2taylor::operator&lt;&lt;" ref="aab904a95a98e21b21ee031059cac17e8" args="(std::ostream &amp;, dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>d2t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00176">176</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;[dim2taylor object, order &quot;</span> &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) std::cout &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
   os &lt;&lt; std::endl;
  }
 os &lt;&lt; std::endl;
 <span class="keywordflow">return</span> os;
}                                 
</pre></div>
</div>
</div>
<a class="anchor" id="abdf82637f3423a00d9f6537e0e24b1ec"></a><!-- doxytag: member="taylor::dim2taylor::pow" ref="abdf82637f3423a00d9f6537e0e24b1ec" args="(const dim2taylor &amp;, const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#abdf82637f3423a00d9f6537e0e24b1ec">pow</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">815</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);

 idotprecision sum_idot;
 interval sum1, sum2, h;

 erg[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#abdf82637f3423a00d9f6537e0e24b1ec">pow</a>(s[0][0], alpha); 
 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.p; j++)
   {
     sum_idot=interval(0.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
       {
   h=alpha*(interval(j)-interval(i))-interval(i);
   accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
       }
     rnd(sum_idot, sum1);
     erg[0][j]=sum1/interval(j)/s[0][0];
   }

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.p; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p-i; k++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
  {
   h=alpha*(interval(i)-interval(l))-interval(l);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
    {
      accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
    }
  }
      rnd(sum_idot, sum1); 
        
      sum_idot=interval(0.0);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
  {
   accumulate(sum_idot, s[0][m], erg[i][k-m]);
  }
      rnd(sum_idot, sum2); 

      erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
     }
  } 
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a56014cfe86271f3c7381f38719840488"></a><!-- doxytag: member="taylor::dim2taylor::power" ref="a56014cfe86271f3c7381f38719840488" args="(const dim2taylor &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a56014cfe86271f3c7381f38719840488">power</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00869">869</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);

 idotprecision sum_idot;
 interval sum1, sum2, h;

 erg[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a56014cfe86271f3c7381f38719840488">power</a>(s[0][0], n); 
 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.p; j++)
   {
     sum_idot=interval(0.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
       {
   h=interval(n)*(interval(j)-interval(i))-interval(i);
   accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
       }
     rnd(sum_idot, sum1);
     erg[0][j]=sum1/interval(j)/s[0][0];
   }

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.p; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p-i; k++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
  {
   h=interval(n)*(interval(i)-interval(l))-interval(l);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
    {
      accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
    }
  }
      rnd(sum_idot, sum1); 
        
      sum_idot=interval(0.0);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
  {
   accumulate(sum_idot, s[0][m], erg[i][k-m]);
  }
      rnd(sum_idot, sum2); 

      erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
     }
  } 
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="adc5c16c2f29f77a66a9bc58da67cb836"></a><!-- doxytag: member="taylor::dim2taylor::sin" ref="adc5c16c2f29f77a66a9bc58da67cb836" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#adc5c16c2f29f77a66a9bc58da67cb836">sin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">1008</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#adc5c16c2f29f77a66a9bc58da67cb836">sin</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a5664e8bd2886b7a7cb182d0de6cc8488">cos</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=-sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aeac682b730862bff598a6fb0206b5764"></a><!-- doxytag: member="taylor::dim2taylor::sinh" ref="aeac682b730862bff598a6fb0206b5764" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#aeac682b730862bff598a6fb0206b5764">sinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">1130</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#aeac682b730862bff598a6fb0206b5764">sinh</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a66716209543861cf0e04cc0e1f92b29a">cosh</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       }  <span class="comment">// for m</span>
         }      <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0918e81021192eed36a5b0fb102247ea"></a><!-- doxytag: member="taylor::dim2taylor::sqr" ref="a0918e81021192eed36a5b0fb102247ea" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">592</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 
 idotprecision sum_idot;
 interval sum1=interval(0.0);
 interval sum2=interval(0.0);

 erg[0][0]=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s[0][0]); <span class="comment">//Koeff. (0,0)</span>

 <span class="keywordflow">if</span>(erg.p &gt; 0)
  {
    
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++) <span class="comment">// calculating the remaining coefficients</span>
      {
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
    {
      <span class="keywordflow">if</span>(i%2==1) <span class="comment">// i: odd</span>
        {
    sum_idot=interval(0.0);
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
      {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
          {
      accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
          } <span class="comment">//for m</span>
      }     <span class="comment">//for l</span>

    rnd(sum_idot, sum1);
    erg[i][k-i]=interval(2.0)*sum1;     
        }
      <span class="keywordflow">else</span> <span class="comment">//i%2==0: i: even </span>
        {
    <span class="keywordflow">if</span>( (k-i)%2==1 ) <span class="comment">//k-i: odd</span>
      {
        sum_idot=interval(0.0); 
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
          {
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
        {
          accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
        } <span class="comment">//for m</span>
          }     <span class="comment">//for l</span>
        rnd(sum_idot, sum1);
       
        sum_idot=interval(0.0);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-1)/2; m++)
          {
      accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
          }<span class="comment">//for m</span>
        rnd(sum_idot, sum2);

        erg[i][k-i]=interval(2.0)*(sum1+sum2);  
             
      }
    <span class="keywordflow">else</span> <span class="comment">//(k-i)%2==0: k-i even</span>
      {
        sum_idot=interval(0.0); 
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
          {
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
        {
          accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
        } <span class="comment">// for m</span>
          }     <span class="comment">// for l</span>
        rnd(sum_idot, sum1);
       
        sum_idot=interval(0.0);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-2)/2; m++)
          {
      accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
          } <span class="comment">// for m</span>
        rnd(sum_idot, sum2);

        erg[i][k-i]=interval(2.0)*(sum1+sum2);
        erg[i][k-i]=erg[i][k-i]+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(s[i/2][(k-i)/2]);   
      }
        }
    } <span class="comment">// for i</span>
      }     <span class="comment">// for k</span>
  }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2d7a004d2ee48a630edfc41746512d93"></a><!-- doxytag: member="taylor::dim2taylor::sqrt" ref="a2d7a004d2ee48a630edfc41746512d93" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">678</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{ 
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg(s.p);
 idotprecision sum_idot;
 interval sum(0.0);

 erg[0][0] = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(s[0][0]);  <span class="comment">// Coeff. (0,0) --&gt; function value</span>
  
  <span class="keywordflow">if</span>(erg.p &gt; 0)
  { 
   <span class="keywordflow">if</span>(0.0 &lt;= erg[0][0])
      {
  cout &lt;&lt; <span class="stringliteral">&quot;error here: &quot;</span> &lt;&lt; erg[0][0] &lt;&lt; endl;
   
  cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrt: 0 in argument interval&quot;</span>;
  cerr &lt;&lt; endl;
  exit(1);
      }
      
    
    interval h = erg[0][0]; 
    times2pown(h,1); <span class="comment">// fast multiplication with 2;</span>
    <span class="keywordtype">int</span> ki,il,z;
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++) <span class="comment">// calculating all other coefficients</span>
    {   
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
  {   
      sum_idot=interval(0.0);
    <span class="comment">// do not sum (l,m)=(0,0) and (l,m)=(i,k-i), see continue assignments</span>
      ki = k-i;   z = 0; <span class="comment">// z: Numbering the following summands </span>
      <span class="keywordflow">if</span> (i%2==1) <span class="comment">// i: odd</span>
      { 
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) 
    {
        il = i-l;   
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
        {
      z++; <span class="comment">// Numbering the summands, z = 1,2,3,...</span>
      <span class="comment">// (l,m) = (0,0) is the first summand (z=1),</span>
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>; <span class="comment">// skipping accumulate(...)</span>
      accumulate(sum_idot, erg[l][m], erg[il][ki-m]);
        }
    }
    rnd(sum_idot,sum);
    times2pown(sum,1);
    erg[i][ki] = (s[i][ki]-sum)/h;
      }
      <span class="keywordflow">else</span> <span class="comment">// i: even</span>
      {
    <span class="keywordflow">if</span> (ki%2==1) <span class="comment">// ki=k-i: odd</span>
    {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) 
        {
      il = i-l;
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
      {
          z++;
          <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
          accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
      }
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-1)/2; m++)
        {
      z++;
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
      accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
        }
        rnd(sum_idot,sum);
        times2pown(sum,1);
        erg[i][ki] = (s[i][ki]-sum)/h;
    }
    <span class="keywordflow">else</span> <span class="comment">// ki=k-i: even</span>
    {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++)
        {
      il = i-l;
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
      {
          z++;
          <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
          accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
      }
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-2)/2; m++)
        {
      z++;
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
      accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
        }
        rnd(sum_idot,sum);
        times2pown(sum,1);
        sum += <a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(erg[i/2][ki/2]);
        erg[i][ki] = (s[i][ki]-sum)/h;
    }
      }
  } <span class="comment">// for i</span>
      }   <span class="comment">// for k</span>
  }

 <span class="keywordflow">return</span> erg;
 }
</pre></div>
</div>
</div>
<a class="anchor" id="a0ee48b960b16cd8d2ecbafeb58420022"></a><!-- doxytag: member="taylor::dim2taylor::sqrt1px2" ref="a0ee48b960b16cd8d2ecbafeb58420022" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a0ee48b960b16cd8d2ecbafeb58420022">sqrt1px2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">788</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                        {
    <span class="comment">// sqrt(1+x^2);</span>
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg;
    <span class="keywordflow">if</span> (Inf(x[0][0])&gt;1) erg = x * <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(1+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(1/x));
    <span class="keywordflow">else</span> 
  <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-1)
      erg = -x * <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(1+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(1/x));
  <span class="keywordflow">else</span> erg = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(1+<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(x));
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a43d67bd8644d997c3acb7ec15302d543"></a><!-- doxytag: member="taylor::dim2taylor::sqrtp1m1" ref="a43d67bd8644d997c3acb7ec15302d543" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a43d67bd8644d997c3acb7ec15302d543">sqrtp1m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">991</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);
 g = 2*<a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(1+s);;

 <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrtp1m1 : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91a86e0655561bafd6c1609ab75ce13e"></a><!-- doxytag: member="taylor::dim2taylor::sqrtx2m1" ref="a91a86e0655561bafd6c1609ab75ce13e" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a91a86e0655561bafd6c1609ab75ce13e">sqrtx2m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">801</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                        {
    <span class="comment">// sqrt(x^2-1);</span>
    <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> erg;
    <span class="keywordflow">if</span> (Inf(x[0][0])&gt;4) erg = x * <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>( 1-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(1/x) );
    <span class="keywordflow">else</span> 
  <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-4)
      erg = -x * <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>( 1-<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(1/x) );
  <span class="keywordflow">else</span> erg = <a class="code" href="classtaylor_1_1dim2taylor.shtml#a2d7a004d2ee48a630edfc41746512d93">sqrt</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(x)-1);
    <span class="keywordflow">return</span> erg; 
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ae1512635633c3f04275139d114882992"></a><!-- doxytag: member="taylor::dim2taylor::tan" ref="ae1512635633c3f04275139d114882992" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#ae1512635633c3f04275139d114882992">tan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">1095</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a5664e8bd2886b7a7cb182d0de6cc8488">cos</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tan : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a418b70a725a6518ff77e7c8d6c169144"></a><!-- doxytag: member="taylor::dim2taylor::tanh" ref="a418b70a725a6518ff77e7c8d6c169144" args="(const dim2taylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="classtaylor_1_1dim2taylor.shtml#a418b70a725a6518ff77e7c8d6c169144">tanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">1216</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#af42deea4555d3e27017799d98c889d19">dim2taylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="classtaylor_1_1dim2taylor.shtml#a0918e81021192eed36a5b0fb102247ea">sqr</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml#a66716209543861cf0e04cc0e1f92b29a">cosh</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tanh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="classtaylor_1_1dim2taylor.shtml#a1990d432f619f0945b84ef4bdf5aa89b">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a831423b7ae2f1d7595c7786029612942"></a><!-- doxytag: member="taylor::dim2taylor::dat" ref="a831423b7ae2f1d7595c7786029612942" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector* <a class="el" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">taylor::dim2taylor::dat</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00060">60</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l00060">dim2taylor()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00176">taylor::operator&lt;&lt;()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00077">operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="a68bb1d15f4bee8bf2a437d1558c9b28b"></a><!-- doxytag: member="taylor::dim2taylor::p" ref="a68bb1d15f4bee8bf2a437d1558c9b28b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">taylor::dim2taylor::p</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">59</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">taylor::acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">taylor::acosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">taylor::acot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">taylor::acoth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">taylor::asin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">taylor::asinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">taylor::atan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">taylor::atanh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">taylor::cos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">taylor::cosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">taylor::cot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">taylor::coth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00060">dim2taylor()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">taylor::erf()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01434">taylor::erfc()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">taylor::f_g_u()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">taylor::init_const()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00101">taylor::init_var()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">taylor::lnp1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00259">taylor::operator*()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00235">taylor::operator+()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00196">taylor::operator-()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00298">taylor::operator/()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00176">taylor::operator&lt;&lt;()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00077">operator=()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00869">taylor::power()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">taylor::sinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">taylor::sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">taylor::sqrtp1m1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">taylor::tan()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">taylor::tanh()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a></li>
<li><a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacetaylor.shtml">taylor</a>      </li>
      <li class="navelem"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:43 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
