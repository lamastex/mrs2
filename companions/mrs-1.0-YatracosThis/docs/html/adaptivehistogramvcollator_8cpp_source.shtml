<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogramvcollator.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogramvcollator_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogramvcollator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogramvcollator_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramvcollator_8hpp.shtml" title="AdaptiveHistogramVCollator declarations.">adaptivehistogramvcollator.hpp</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>   <span class="comment">// to use the C++ string class</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>   <span class="comment">// to use stl::vector container</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;set&gt;</span>      <span class="comment">// to use the stl::multiset container</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;list&gt;</span>     <span class="comment">// to use stl:: lists</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;exception&gt;</span> <span class="comment">// use exceptions</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to use the gsl random number generator</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;math.h&gt;</span> <span class="comment">// math library</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00041"></a>00041 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="comment">//to use subpavings</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="spalgorithms_8hpp.shtml" title="SPnode (SubPaving) algorithm function declarations.">spalgorithms.hpp</a>&quot;</span>
<a name="l00048"></a>00048 <span class="comment">// to use stats subpavings</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="spsvnode_8hpp.shtml">spsvnode.hpp</a>&quot;</span> <span class="comment">// includes spnode.hpp includes sptypes.hpp</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="collatorspvnode_8hpp.shtml">collatorspvnode.hpp</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramvalidation_8hpp.shtml" title="AdaptiveHistogramValidation declarations.">adaptivehistogramvalidation.hpp</a>&quot;</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>subpavings;
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>std;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">// ---------- implementation of AdaptiveHistogramVCollator class -------------</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// ----------------private methods</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">// initialised constructor, initialised with a subpaving pointer</span>
<a name="l00063"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1c28c75c070df4a922a066092cd7427e">00063</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator::AdaptiveHistogramVCollator</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * spn)
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065     <span class="keywordflow">if</span> (NULL == spn) {
<a name="l00066"></a>00066         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Null CollatorSPVnode pointer in constructor&quot;</span>);
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068     rootVCollator = spn;
<a name="l00069"></a>00069 }    
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">// --------------- end private methods</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="comment">// ---------------- public methods</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">// default constructor</span>
<a name="l00076"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2">00076</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator::AdaptiveHistogramVCollator</a>()
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078     <span class="keywordflow">try</span> {
<a name="l00079"></a>00079         rootVCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>();
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00082"></a>00082         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00083"></a>00083         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00084"></a>00084                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00085"></a>00085         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">// initialised constructor, initialised with an AdaptiveHistogramVal object</span>
<a name="l00091"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a28798e968c6693434cd189a64b185b96">00091</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator::AdaptiveHistogramVCollator</a>(
<a name="l00092"></a>00092                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; adh,
<a name="l00093"></a>00093                                         <span class="keywordtype">int</span> whatSum)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095     <span class="keywordflow">try</span> {
<a name="l00096"></a>00096         rootVCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>(), whatSum);
<a name="l00097"></a>00097     }
<a name="l00098"></a>00098     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00099"></a>00099         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00100"></a>00100         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00101"></a>00101                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00102"></a>00102         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">// copy constructor</span>
<a name="l00107"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab2c174cc93b8d61a5dae5d698a47e392">00107</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator::AdaptiveHistogramVCollator</a>(
<a name="l00108"></a>00108                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; other)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110     <span class="keywordflow">try</span> {
<a name="l00111"></a>00111         rootVCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>));
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00114"></a>00114         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00115"></a>00115         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00116"></a>00116                                             &lt;&lt; msg &lt;&lt; std:: endl;
<a name="l00117"></a>00117         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00120"></a>00120         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00121"></a>00121         std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00122"></a>00122                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00123"></a>00123         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
<a name="l00124"></a>00124     }
<a name="l00125"></a>00125     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00126"></a>00126         <span class="keywordtype">string</span> msg(e.what());
<a name="l00127"></a>00127         std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00128"></a>00128                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00129"></a>00129         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="comment">// copy constructor</span>
<a name="l00134"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#af0f2129ebf8fc93357f877c5bac8e5b8">00134</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator::AdaptiveHistogramVCollator</a>(
<a name="l00135"></a>00135                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; other, <span class="keywordtype">int</span> toSubtract)
<a name="l00136"></a>00136 {
<a name="l00137"></a>00137     <span class="keywordflow">try</span> {
<a name="l00138"></a>00138         rootVCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>), toSubtract);
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00141"></a>00141         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00142"></a>00142         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00143"></a>00143                                             &lt;&lt; msg &lt;&lt; std:: endl;
<a name="l00144"></a>00144         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00147"></a>00147         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00148"></a>00148         std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00149"></a>00149                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00150"></a>00150         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00153"></a>00153         <span class="keywordtype">string</span> msg(e.what());
<a name="l00154"></a>00154         std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00155"></a>00155                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00156"></a>00156         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
<a name="l00157"></a>00157     }
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">// assignment operator</span>
<a name="l00161"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a06855795e0d1d9c5a268ec91153346d4">00161</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a06855795e0d1d9c5a268ec91153346d4" title="Copy assignment operator.">AdaptiveHistogramVCollator::operator=</a>(<span class="keyword">const</span>
<a name="l00162"></a>00162     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs)
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164     <span class="keywordflow">try</span> {
<a name="l00165"></a>00165 
<a name="l00166"></a>00166         <span class="comment">// we have to make sure we delete the current paving</span>
<a name="l00167"></a>00167         <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00168"></a>00168             <span class="keyword">delete</span> rootVCollator;
<a name="l00169"></a>00169             rootVCollator = NULL;
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         <span class="keywordflow">if</span> (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>)
<a name="l00173"></a>00173             rootVCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>));
<a name="l00174"></a>00174     }
<a name="l00175"></a>00175     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00176"></a>00176         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00177"></a>00177         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in assignment: original error &quot;</span>
<a name="l00178"></a>00178                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00179"></a>00179         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00182"></a>00182         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00183"></a>00183         std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in assignment: original error &quot;</span>
<a name="l00184"></a>00184                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00185"></a>00185         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in assignment: &quot;</span> + msg);
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00188"></a>00188         <span class="keywordtype">string</span> msg(e.what());
<a name="l00189"></a>00189         std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in assignment: original error &quot;</span>
<a name="l00190"></a>00190                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00191"></a>00191         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in assignment: &quot;</span> + msg);
<a name="l00192"></a>00192     }
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="comment">// increment addition operator</span>
<a name="l00196"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ae8856c3f66db77b6f0ce896ff4f54ce5">00196</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ae8856c3f66db77b6f0ce896ff4f54ce5">AdaptiveHistogramVCollator::operator+=</a>(<span class="keyword">const</span>
<a name="l00197"></a>00197     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199     <span class="keywordflow">try</span> {
<a name="l00200"></a>00200         <span class="comment">// get the subpaving out of rhs to form a new CollatorSPnode</span>
<a name="l00201"></a>00201         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> toAdd(*rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">getSubPaving</a>());
<a name="l00202"></a>00202         <span class="comment">// add the new CollatorSPnode into the collation</span>
<a name="l00203"></a>00203         <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
<a name="l00204"></a>00204         <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>
<a name="l00205"></a>00205         rootVCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(&amp;toAdd);
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00209"></a>00209         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00210"></a>00210         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
<a name="l00211"></a>00211                                             + oldmsg;
<a name="l00212"></a>00212         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00215"></a>00215         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00216"></a>00216         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00217"></a>00217         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00220"></a>00220         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00221"></a>00221         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00222"></a>00222         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00225"></a>00225         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00226"></a>00226         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00227"></a>00227         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 <span class="comment">// subtraction operator</span>
<a name="l00233"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a56acb0f59cd7c99a5ef8db73fd2b3294">00233</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">AdaptiveHistogramVCollator::operator-</a>(<span class="keyword">const</span>
<a name="l00234"></a>00234     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs)<span class="keyword"> const</span>
<a name="l00235"></a>00235 <span class="keyword"></span>{
<a name="l00236"></a>00236     <span class="keywordflow">if</span> ((NULL != rootVCollator) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>) &amp;&amp;
<a name="l00237"></a>00237     ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rootVCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l00238"></a>00238     || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rootVCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
<a name="l00239"></a>00239         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Histogram collators have unequal dimensions&quot;</span>);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241        <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* newnode = NULL;
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keywordflow">try</span> {
<a name="l00244"></a>00244       <span class="keywordtype">double</span> c = -1.0;
<a name="l00245"></a>00245          newnode =
<a name="l00246"></a>00246             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab662ab5025178c145b83b386ef475415" title="Subtract one collator subpavings from another together.">CollatorSPVnode::subtractPavings</a>(rootVCollator, rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>, c);
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00249"></a>00249         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00250"></a>00250         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in subtraction: original error &quot;</span>
<a name="l00251"></a>00251                                     &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00252"></a>00252         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in subtraction: &quot;</span> + msg);
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00255"></a>00255         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00256"></a>00256         std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in subtraction: original error &quot;</span>
<a name="l00257"></a>00257                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00258"></a>00258         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in subtraction: &quot;</span> + msg);
<a name="l00259"></a>00259     }
<a name="l00260"></a>00260     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00261"></a>00261         <span class="keywordtype">string</span> msg(e.what());
<a name="l00262"></a>00262         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in subtraction: original error &quot;</span>
<a name="l00263"></a>00263                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00264"></a>00264         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in subtraction: &quot;</span> + msg);
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> newCollatorHist(newnode);
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keywordflow">return</span> newCollatorHist;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="comment">// Destructor.</span>
<a name="l00276"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7fdc8a90199d4b39d4fb9179a8aada56">00276</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7fdc8a90199d4b39d4fb9179a8aada56" title="Destructor.">AdaptiveHistogramVCollator::~AdaptiveHistogramVCollator</a>()
<a name="l00277"></a>00277 { <span class="keyword">delete</span> rootVCollator; }
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 <span class="comment">// averaging method</span>
<a name="l00280"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1d9fe1618884a4cdbfc211a04dcd4a65">00280</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1d9fe1618884a4cdbfc211a04dcd4a65">AdaptiveHistogramVCollator::makeAverage</a>()<span class="keyword"> const</span>
<a name="l00281"></a>00281 <span class="keyword"></span>{
<a name="l00282"></a>00282     <span class="keywordflow">if</span> (NULL == rootVCollator) {
<a name="l00283"></a>00283             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: rootVCollator is NULL&quot;</span>;
<a name="l00284"></a>00284             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00285"></a>00285     }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     <span class="comment">//average only makes sense if all values in the summary are positive</span>
<a name="l00288"></a>00288     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = rootVCollator-&gt;getSummary();
<a name="l00289"></a>00289 
<a name="l00290"></a>00290     <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(), <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#af83155cd50512e4cbad3f931370478ee" title="Find if double is negative.">isNegative</a>);
<a name="l00291"></a>00291     <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l00292"></a>00292             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
<a name="l00293"></a>00293             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00294"></a>00294     }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> newCollator;
<a name="l00297"></a>00297     <span class="keywordflow">try</span> {
<a name="l00298"></a>00298         newCollator.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a> = (getSubPaving())-&gt;makeAverageCollation();
<a name="l00299"></a>00299     }
<a name="l00300"></a>00300     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00301"></a>00301         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00302"></a>00302         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory making average.  Orginal error: &quot;</span>
<a name="l00303"></a>00303                                             + oldmsg;
<a name="l00304"></a>00304         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00307"></a>00307         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00308"></a>00308         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00309"></a>00309         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00310"></a>00310     }
<a name="l00311"></a>00311     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00312"></a>00312         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00313"></a>00313         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00314"></a>00314         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00315"></a>00315     }
<a name="l00316"></a>00316     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00317"></a>00317         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00318"></a>00318         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00319"></a>00319         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00320"></a>00320     }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322     <span class="keywordflow">return</span> newCollator;
<a name="l00323"></a>00323 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="comment">// Return a pointer to the CollatorPSnode this manages</span>
<a name="l00326"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e">00326</a> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">AdaptiveHistogramVCollator::getSubPaving</a>()<span class="keyword"> const</span>
<a name="l00327"></a>00327 <span class="keyword"></span>{<span class="keywordflow">return</span> rootVCollator;} <span class="comment">// boost::shared_ptr might be better</span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 <span class="comment">// make a .dot file for the histogram</span>
<a name="l00330"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a6cbc7efc97efaa397a6ed5c38b817e3a">00330</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a6cbc7efc97efaa397a6ed5c38b817e3a" title="Make a .dot graph file from collated histogram structure.">AdaptiveHistogramVCollator::outputGraphDot</a>()<span class="keyword"> const</span>
<a name="l00331"></a>00331 <span class="keyword"></span>{
<a name="l00332"></a>00332     <span class="keywordflow">if</span> (NULL == rootVCollator) {
<a name="l00333"></a>00333 
<a name="l00334"></a>00334         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for graph output&quot;</span>);
<a name="l00335"></a>00335     }
<a name="l00336"></a>00336     <span class="keywordtype">bool</span> success = rootVCollator-&gt;outputGraphDot();
<a name="l00337"></a>00337     <span class="keywordflow">return</span> success;
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 <span class="comment">// Get the number of Adaptive Histogram objects collated.</span>
<a name="l00341"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173">00341</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">AdaptiveHistogramVCollator::getNumberCollated</a>()<span class="keyword"> const</span>
<a name="l00342"></a>00342 <span class="keyword"></span>{ <span class="keywordflow">return</span> rootVCollator-&gt;getNumberSummarised(); }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="comment">// Output the collated normalised histogram heights and bins data to a txt file</span>
<a name="l00345"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe">00345</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">AdaptiveHistogramVCollator::outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s)<span class="keyword"> const</span>
<a name="l00346"></a>00346 <span class="keyword"></span>{
<a name="l00347"></a>00347     <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00348"></a>00348     ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00349"></a>00349 
<a name="l00350"></a>00350     rootVCollator-&gt;leavesOutputTabs(os);
<a name="l00351"></a>00351     std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogramVCollator has been &quot;</span>
<a name="l00352"></a>00352         &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 
<a name="l00355"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a3a6ff433649c11815e6be5dbd04977bf">00355</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">AdaptiveHistogramVCollator::outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, 
<a name="l00356"></a>00356                                       <span class="keywordtype">int</span> whichColl)<span class="keyword"> const</span>
<a name="l00357"></a>00357 <span class="keyword"></span>{
<a name="l00358"></a>00358     <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00359"></a>00359     ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00360"></a>00360 
<a name="l00361"></a>00361     rootVCollator-&gt;leavesOutputTabs(os, whichColl);
<a name="l00362"></a>00362     std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogramVCollator has been &quot;</span>
<a name="l00363"></a>00363         &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00364"></a>00364 }
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 <span class="comment">// Output the average data over the collation to a txt file</span>
<a name="l00368"></a>00368 <span class="comment">// this outputs the normalised average histogram heights and bins</span>
<a name="l00369"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#af05a34e32911a81b2af37529994bae57">00369</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#af05a34e32911a81b2af37529994bae57" title="Output average normalised histogram over collation to a txt file.">AdaptiveHistogramVCollator::outputAverageToTxtTabs</a>(<span class="keyword">const</span>
<a name="l00370"></a>00370     std::string&amp; s)<span class="keyword"> const</span>
<a name="l00371"></a>00371 <span class="keyword"></span>{
<a name="l00372"></a>00372     <span class="keywordflow">try</span> {
<a name="l00373"></a>00373 
<a name="l00374"></a>00374         <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00375"></a>00375 
<a name="l00376"></a>00376             <span class="comment">//average only makes sense if all values in the summary are positive</span>
<a name="l00377"></a>00377             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = rootVCollator-&gt;getSummary();
<a name="l00378"></a>00378 
<a name="l00379"></a>00379             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(), <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#af83155cd50512e4cbad3f931370478ee" title="Find if double is negative.">isNegative</a>);
<a name="l00380"></a>00380             <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l00381"></a>00381                     <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
<a name="l00382"></a>00382                     std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; msg &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; std::endl;
<a name="l00383"></a>00383             }
<a name="l00384"></a>00384             <span class="keywordflow">else</span> {
<a name="l00385"></a>00385                 <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00386"></a>00386                 ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00387"></a>00387 
<a name="l00388"></a>00388                 <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00389"></a>00389                     rootVCollator-&gt;leavesAverageOutputTabs(os);
<a name="l00390"></a>00390                     std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the average AdaptiveHistogram has been &quot;</span>
<a name="l00391"></a>00391                         &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00392"></a>00392                 }
<a name="l00393"></a>00393                 <span class="keywordflow">else</span> {
<a name="l00394"></a>00394                     std::cout &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to average&quot;</span>
<a name="l00395"></a>00395                         &lt;&lt; std::endl;
<a name="l00396"></a>00396                 }
<a name="l00397"></a>00397             }
<a name="l00398"></a>00398         }
<a name="l00399"></a>00399     }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00402"></a>00402         std::cout &lt;&lt; <span class="stringliteral">&quot;Problem averaging: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;
<a name="l00403"></a>00403     }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 <span class="comment">// Output the accumulated data over the collation to a txt file</span>
<a name="l00408"></a>00408 <span class="comment">// this outputs the sum over the collation summary</span>
<a name="l00409"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b">00409</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b" title="Output the accumulated data over the collation to a txt file.">AdaptiveHistogramVCollator::outputAccumulationToTxtTabs</a>(<span class="keyword">const</span>
<a name="l00410"></a>00410     std::string&amp; s)<span class="keyword"> const</span>
<a name="l00411"></a>00411 <span class="keyword"></span>{
<a name="l00412"></a>00412     <span class="keywordflow">try</span> {
<a name="l00413"></a>00413 
<a name="l00414"></a>00414         <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00415"></a>00415 
<a name="l00416"></a>00416             <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00417"></a>00417             ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00418"></a>00418 
<a name="l00419"></a>00419             <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00420"></a>00420                 rootVCollator-&gt;leavesAccumulationOutputTabs(os);
<a name="l00421"></a>00421                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the accumulated AdaptiveHistograms &quot;</span>
<a name="l00422"></a>00422                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00423"></a>00423             }
<a name="l00424"></a>00424             <span class="keywordflow">else</span> {
<a name="l00425"></a>00425                 std::cout &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to accumulate&quot;</span>
<a name="l00426"></a>00426                     &lt;&lt; std::endl;
<a name="l00427"></a>00427             }
<a name="l00428"></a>00428         }
<a name="l00429"></a>00429     }
<a name="l00430"></a>00430     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
<a name="l00431"></a>00431         std::cout &lt;&lt; <span class="stringliteral">&quot;Problem acccumulating: &quot;</span> &lt;&lt; e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>() &lt;&lt; std::endl;
<a name="l00432"></a>00432     }
<a name="l00433"></a>00433 
<a name="l00434"></a>00434 }
<a name="l00435"></a>00435 
<a name="l00436"></a>00436 <span class="comment">// Output the accumulated data over the collation to a txt file</span>
<a name="l00437"></a>00437 <span class="comment">// this outputs the sum over the collation summary</span>
<a name="l00438"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ac58c3f7d536168d4c9c8cbceb95b1908">00438</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ac58c3f7d536168d4c9c8cbceb95b1908">AdaptiveHistogramVCollator::outputDifferenceToTxtTabs</a>(<span class="keyword">const</span>
<a name="l00439"></a>00439     std::string&amp; s)<span class="keyword"> const</span>
<a name="l00440"></a>00440 <span class="keyword"></span>{
<a name="l00441"></a>00441     <span class="keywordflow">try</span> {
<a name="l00442"></a>00442 
<a name="l00443"></a>00443         <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00444"></a>00444 
<a name="l00445"></a>00445             <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00446"></a>00446             ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00447"></a>00447 
<a name="l00448"></a>00448             <span class="keywordflow">if</span> (NULL != rootVCollator) {
<a name="l00449"></a>00449                 rootVCollator-&gt;leavesDifferenceOutputTabs(os);
<a name="l00450"></a>00450                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the accumulated AdaptiveHistograms &quot;</span>
<a name="l00451"></a>00451                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00452"></a>00452             }
<a name="l00453"></a>00453             <span class="keywordflow">else</span> {
<a name="l00454"></a>00454                 std::cout &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to accumulate&quot;</span>
<a name="l00455"></a>00455                     &lt;&lt; std::endl;
<a name="l00456"></a>00456             }
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458     }
<a name="l00459"></a>00459     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
<a name="l00460"></a>00460         std::cout &lt;&lt; <span class="stringliteral">&quot;Problem acccumulating: &quot;</span> &lt;&lt; e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>() &lt;&lt; std::endl;
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 
<a name="l00463"></a>00463 }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465 <span class="comment">// Add an AdaptiveHistogram into the collation with Vcounter only</span>
<a name="l00466"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02">00466</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">AdaptiveHistogramVCollator::addToCollationWithVal</a>(
<a name="l00467"></a>00467                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; adh,
<a name="l00468"></a>00468                                         <span class="keywordtype">int</span> whatSum,
<a name="l00469"></a>00469                            <span class="keywordtype">size_t</span> &amp; agg)
<a name="l00470"></a>00470 {
<a name="l00471"></a>00471      <span class="keywordflow">try</span> {
<a name="l00472"></a>00472         <span class="comment">// make the AdaptiveHistogram into a new CollatorSPVnode</span>
<a name="l00473"></a>00473         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> toAdd(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>(), whatSum);
<a name="l00474"></a>00474         <span class="comment">// add the new CollatorSPVnode into the collation</span>
<a name="l00475"></a>00475         <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
<a name="l00476"></a>00476         <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>
<a name="l00477"></a>00477         <span class="keywordtype">bool</span> successfullyAdded = rootVCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(&amp;toAdd);
<a name="l00478"></a>00478       
<a name="l00479"></a>00479       <span class="comment">//for space complexity purposes</span>
<a name="l00480"></a>00480       agg = <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(rootVCollator);
<a name="l00481"></a>00481       
<a name="l00482"></a>00482         <span class="keywordflow">if</span> (!successfullyAdded) { <span class="comment">// addition returned false</span>
<a name="l00483"></a>00483             std::cout &lt;&lt; <span class="stringliteral">&quot;Nothing added - check console output &quot;</span>
<a name="l00484"></a>00484                 &lt;&lt; <span class="stringliteral">&quot;for error messages&quot;</span> &lt;&lt; std::endl;
<a name="l00485"></a>00485         }
<a name="l00486"></a>00486     }
<a name="l00487"></a>00487     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00488"></a>00488         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00489"></a>00489         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
<a name="l00490"></a>00490                                             + oldmsg;
<a name="l00491"></a>00491         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00492"></a>00492     }
<a name="l00493"></a>00493     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00494"></a>00494         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00495"></a>00495         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00496"></a>00496         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00499"></a>00499         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00500"></a>00500         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00501"></a>00501         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00502"></a>00502     }
<a name="l00503"></a>00503     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00504"></a>00504         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00505"></a>00505         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00506"></a>00506         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00507"></a>00507     }
<a name="l00508"></a>00508 }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment">// Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split </span>
<a name="l00511"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36">00511</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">AdaptiveHistogramVCollator::getSplitNodePtr</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* &amp;splitCollNode, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * spn)
<a name="l00512"></a>00512 {
<a name="l00513"></a>00513   <span class="keywordtype">bool</span> success = rootVCollator-&gt;getSplitNodePtrCSPV(splitCollNode, spn);
<a name="l00514"></a>00514    <span class="keywordflow">if</span> (!success) { <span class="comment">// no pointers obtained</span>
<a name="l00515"></a>00515             cerr &lt;&lt; <span class="stringliteral">&quot;No pointers obtained.&quot;</span> &lt;&lt; std::endl;
<a name="l00516"></a>00516             exit(0);
<a name="l00517"></a>00517   }
<a name="l00518"></a>00518 }
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">// Obtain the Yatracos set </span>
<a name="l00521"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd">00521</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">AdaptiveHistogramVCollator::getYatracosClassAll</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> splitNode,
<a name="l00522"></a>00522 vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecRowYatSet,
<a name="l00523"></a>00523 vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecColYatSet,
<a name="l00524"></a>00524 list&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listYatSet )
<a name="l00525"></a>00525 {
<a name="l00526"></a>00526   <span class="comment">//================setting up containers====================================//</span>
<a name="l00527"></a>00527    <span class="comment">//iterator for vector of sets</span>
<a name="l00528"></a>00528    vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator vecIt;
<a name="l00529"></a>00529    set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; emptySetCSP; <span class="comment">//empty set</span>
<a name="l00530"></a>00530    set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt;::iterator setIt; <span class="comment">//iterator</span>
<a name="l00531"></a>00531    
<a name="l00532"></a>00532   <span class="comment">//=============initializations============================================//</span>
<a name="l00533"></a>00533   <span class="keywordtype">int</span> numAdd = getNumberCollated(); <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l00534"></a>00534   <span class="keywordtype">size_t</span> theta = numAdd-1; <span class="comment">// the current number of splits</span>
<a name="l00535"></a>00535 
<a name="l00536"></a>00536   <span class="comment">// initialize the vecRowYatSet and vecColYatSet if split node is root box</span>
<a name="l00537"></a>00537    <span class="keywordflow">if</span> ( splitNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == getRootBox() ) { 
<a name="l00538"></a>00538     <span class="comment">//cout &lt;&lt; &quot;initialize with empty set &quot; &lt;&lt; endl;</span>
<a name="l00539"></a>00539     <span class="comment">//initialize vecRowYatSet and vecColYatSet with the empty set (by definition)</span>
<a name="l00540"></a>00540       vecRowYatSet.push_back(emptySetCSP);
<a name="l00541"></a>00541       vecColYatSet.push_back(emptySetCSP); 
<a name="l00542"></a>00542   }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544   <span class="comment">//cout &lt;&lt; &quot;get the left and right children of: &quot; &lt;&lt; splitNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l00545"></a>00545    <span class="comment">// get the left and right children of the split node</span>
<a name="l00546"></a>00546   <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * lChild = splitNode-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>(); 
<a name="l00547"></a>00547   <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * rChild = splitNode-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00548"></a>00548   <span class="comment">//cout &lt;&lt; lChild-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rChild-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l00549"></a>00549 
<a name="l00550"></a>00550   <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l00551"></a>00551   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k=0; k &lt; theta; k++) {
<a name="l00552"></a>00552     <span class="comment">//cout &lt;&lt; &quot;k= &quot; &lt;&lt; k &lt;&lt; &quot;\t theta = &quot; &lt;&lt; theta &lt;&lt; endl;</span>
<a name="l00553"></a>00553     <span class="comment">// insert the previous vecRowYatSet and vecColYatSet into listYatSet</span>
<a name="l00554"></a>00554     <span class="comment">// remove the node that was split from vecRowYatSet/vecColYatSet </span>
<a name="l00555"></a>00555       <span class="keywordflow">if</span> (!(vecRowYatSet[k]).empty()) {
<a name="l00556"></a>00556       listYatSet.push_back(vecRowYatSet[k]);  
<a name="l00557"></a>00557       <span class="comment">// cout &lt;&lt; &quot;YatRowSet:&quot; &lt;&lt; endl;</span>
<a name="l00558"></a>00558       <span class="comment">//for (setIt = vecRowYatSet[k].begin(); setIt != vecRowYatSet[k].end(); setIt++) { </span>
<a name="l00559"></a>00559       <span class="comment">//cout &lt;&lt; (*setIt)-&gt;getNodeName() &lt;&lt; endl; }</span>
<a name="l00560"></a>00560       vecRowYatSet[k].erase(splitNode);
<a name="l00561"></a>00561     }  
<a name="l00562"></a>00562       <span class="keywordflow">if</span> (!(vecColYatSet[k]).empty()) {
<a name="l00563"></a>00563       listYatSet.push_back(vecColYatSet[k]);
<a name="l00564"></a>00564       <span class="comment">//cout &lt;&lt; &quot;YatColSet: &quot; &lt;&lt; endl;</span>
<a name="l00565"></a>00565       <span class="comment">//for (setIt = vecColYatSet[k].begin(); setIt != vecColYatSet[k].end(); setIt++) { </span>
<a name="l00566"></a>00566       <span class="comment">//cout &lt;&lt; (*setIt)-&gt;getNodeName() &lt;&lt; endl; }</span>
<a name="l00567"></a>00567       vecColYatSet[k].erase(splitNode);
<a name="l00568"></a>00568     }
<a name="l00569"></a>00569 
<a name="l00570"></a>00570       <span class="comment">// check summaries of lChild and rChild for row</span>
<a name="l00571"></a>00571     <span class="comment">//cout &lt;&lt; &quot;check row: &quot; &lt;&lt; endl;</span>
<a name="l00572"></a>00572     <span class="keywordtype">bool</span> leftRowInd = lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">nodeCheckRowSummary</a>(theta, k);
<a name="l00573"></a>00573       <span class="keywordtype">bool</span> rightRowInd = rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">nodeCheckRowSummary</a>(theta, k);
<a name="l00574"></a>00574       <span class="comment">// insert the node into vecRowYat Set if return true</span>
<a name="l00575"></a>00575       <span class="keywordflow">if</span> (leftRowInd) { 
<a name="l00576"></a>00576       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; lChild-&gt;getNodeName() &lt;&lt; &quot; into vecRowYatSet&quot; &lt;&lt; endl; </span>
<a name="l00577"></a>00577       vecRowYatSet[k].insert(lChild);
<a name="l00578"></a>00578     }
<a name="l00579"></a>00579     <span class="keywordflow">if</span> (rightRowInd) { 
<a name="l00580"></a>00580       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; rChild-&gt;getNodeName() &lt;&lt; &quot; into vecRowYatSet&quot; &lt;&lt; endl; </span>
<a name="l00581"></a>00581       vecRowYatSet[k].insert(rChild);
<a name="l00582"></a>00582     }
<a name="l00583"></a>00583     
<a name="l00584"></a>00584     <span class="comment">// check summaries of lChild and rChild for columns</span>
<a name="l00585"></a>00585     <span class="comment">//cout &lt;&lt; &quot;check col: &quot; &lt;&lt; endl;</span>
<a name="l00586"></a>00586     <span class="keywordtype">bool</span> leftColInd = lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">nodeCheckColSummary</a>(theta, k);
<a name="l00587"></a>00587     <span class="keywordtype">bool</span> rightColInd = rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">nodeCheckColSummary</a>(theta, k);
<a name="l00588"></a>00588       <span class="comment">// insert the node into vecColYat Set if return true</span>
<a name="l00589"></a>00589         <span class="keywordflow">if</span> (leftColInd) { 
<a name="l00590"></a>00590       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; lChild-&gt;getNodeName() &lt;&lt; &quot; into vecColYatSet&quot; &lt;&lt; endl; </span>
<a name="l00591"></a>00591       vecColYatSet[k].insert(lChild);
<a name="l00592"></a>00592     }
<a name="l00593"></a>00593     <span class="keywordflow">if</span> (rightColInd) { 
<a name="l00594"></a>00594       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; rChild-&gt;getNodeName() &lt;&lt; &quot; into vecColYatSet&quot; &lt;&lt; endl; </span>
<a name="l00595"></a>00595       vecColYatSet[k].insert(rChild);
<a name="l00596"></a>00596     }    
<a name="l00597"></a>00597   } <span class="comment">// end of pairwise comparisons</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599    <span class="comment">// checking the length of vecRowYatSet and vecColYatSet</span>
<a name="l00600"></a>00600    <span class="keywordflow">if</span> ( vecColYatSet.size() != (theta) || vecRowYatSet.size() != theta) {
<a name="l00601"></a>00601      cerr &lt;&lt; <span class="stringliteral">&quot;Length of vecRowYatSet and/or vecColYatSet is incorrect. Should have length &quot;</span> &lt;&lt; numAdd &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l00602"></a>00602     exit(0); 
<a name="l00603"></a>00603    }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605   <span class="comment">//cout &lt;&lt; &quot;push back empty sets in index theta.&quot; &lt;&lt; endl;</span>
<a name="l00606"></a>00606   <span class="comment">//push back empty sets at index theta (because that corresponds to theta-theta comparison)</span>
<a name="l00607"></a>00607   vecColYatSet.push_back(emptySetCSP); 
<a name="l00608"></a>00608   vecRowYatSet.push_back(emptySetCSP);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   <span class="comment">//cout &lt;&lt; &quot;Getting rid of repetitions&quot; &lt;&lt; endl;</span>
<a name="l00611"></a>00611    <span class="comment">// get rid of repeated nodes/unions of nodes by sorting the list and </span>
<a name="l00612"></a>00612    <span class="comment">// checking for uniqueness</span>
<a name="l00613"></a>00613   listYatSet.sort();
<a name="l00614"></a>00614   listYatSet.unique();
<a name="l00615"></a>00615   <span class="comment">/*</span>
<a name="l00616"></a>00616 <span class="comment">  list&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;     </span>
<a name="l00617"></a>00617 <span class="comment">  cout &lt;&lt; &quot;**Current Yatracos set has &quot; &lt;&lt; listYatSet.size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l00618"></a>00618 <span class="comment">  for (listIt = (listYatSet).begin(); listIt != (listYatSet).end(); listIt++) {</span>
<a name="l00619"></a>00619 <span class="comment">    for (setIt = (*listIt).begin(); setIt != (*listIt).end(); setIt++) {</span>
<a name="l00620"></a>00620 <span class="comment">      cout &lt;&lt; (*setIt)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l00621"></a>00621 <span class="comment">    }</span>
<a name="l00622"></a>00622 <span class="comment">  }*/</span>
<a name="l00623"></a>00623 } <span class="comment">// end of function getYatracos</span>
<a name="l00624"></a>00624 
<a name="l00625"></a>00625 <span class="comment">// get delta for each node(or union of nodes). </span>
<a name="l00626"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a174349942bc7f76e6804aeb3714d1f3b">00626</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a174349942bc7f76e6804aeb3714d1f3b" title="Get the delta value for each Yatracos element at the specified split number.">AdaptiveHistogramVCollator::getNodesDelta</a>(
<a name="l00627"></a>00627 <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSet, <span class="keywordtype">int</span> thisTheta)
<a name="l00628"></a>00628 {
<a name="l00629"></a>00629   <span class="comment">// iterator for Yatracos set</span>
<a name="l00630"></a>00630   set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt;::iterator YatSetIt;  
<a name="l00631"></a>00631 
<a name="l00632"></a>00632   <span class="comment">//gloria - think about dotprecision summation</span>
<a name="l00633"></a>00633   
<a name="l00634"></a>00634   <span class="comment">//initialization</span>
<a name="l00635"></a>00635   <span class="keywordtype">double</span> delta = 0;
<a name="l00636"></a>00636   <span class="comment">//dotprecision deltaDP = 0;</span>
<a name="l00637"></a>00637   
<a name="l00638"></a>00638   <span class="comment">//go through each node in this set to get delta</span>
<a name="l00639"></a>00639   <span class="keywordflow">for</span> (YatSetIt = YatSet.begin(); YatSetIt != YatSet.end(); YatSetIt++) {
<a name="l00640"></a>00640     <span class="comment">//cout &lt;&lt; (*YatSetIt)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l00641"></a>00641     <span class="comment">//cout &lt;&lt; &quot;union &quot; &lt;&lt; endl;</span>
<a name="l00642"></a>00642     delta += (*YatSetIt)-&gt;getNodeDelta(thisTheta);
<a name="l00643"></a>00643     <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
<a name="l00644"></a>00644    }
<a name="l00645"></a>00645    <span class="comment">//cout &lt;&lt; &quot;end of union&quot; &lt;&lt; endl;</span>
<a name="l00646"></a>00646 
<a name="l00647"></a>00647   <span class="comment">// take the absolute value of the sums</span>
<a name="l00648"></a>00648   <span class="comment">//cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; fabs(delta) &lt;&lt; endl;</span>
<a name="l00649"></a>00649   <span class="keywordflow">return</span> fabs(delta);
<a name="l00650"></a>00650 }
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 <span class="comment">// get delta for each node(or union of nodes). </span>
<a name="l00653"></a>00653 <span class="comment">//think about dotprecision summation</span>
<a name="l00654"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a045c1338ed19503f5485f40ee7d2e218">00654</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a045c1338ed19503f5485f40ee7d2e218">AdaptiveHistogramVCollator::getNodesMaxDelta</a>(
<a name="l00655"></a>00655       vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecYatSet, 
<a name="l00656"></a>00656       <span class="keywordtype">int</span> thisTheta)
<a name="l00657"></a>00657 {
<a name="l00658"></a>00658   <span class="comment">// iterators  </span>
<a name="l00659"></a>00659   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator YatSetIt;  
<a name="l00660"></a>00660 
<a name="l00661"></a>00661   <span class="keywordtype">double</span> DeltaMax = 0;
<a name="l00662"></a>00662   <span class="comment">//dotprecision deltaDP = 0;</span>
<a name="l00663"></a>00663   set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; YatSet;
<a name="l00664"></a>00664   
<a name="l00665"></a>00665   <span class="comment">//go through each node in this set to get delta</span>
<a name="l00666"></a>00666   <span class="keywordflow">for</span> (YatSetIt = vecYatSet.begin(); YatSetIt &lt; vecYatSet.end(); YatSetIt++){
<a name="l00667"></a>00667     <span class="keywordtype">double</span> delta = getNodesDelta((*YatSetIt), thisTheta);
<a name="l00668"></a>00668     <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
<a name="l00669"></a>00669     delta = fabs(delta);
<a name="l00670"></a>00670     DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
<a name="l00671"></a>00671     <span class="comment">//cout &lt;&lt; &quot;DeltaMax: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
<a name="l00672"></a>00672   }
<a name="l00673"></a>00673 
<a name="l00674"></a>00674   <span class="comment">// take the absolute value of the sums</span>
<a name="l00675"></a>00675   <span class="keywordflow">return</span> fabs(DeltaMax);
<a name="l00676"></a>00676   
<a name="l00677"></a>00677 }
<a name="l00678"></a>00678 
<a name="l00679"></a>00679 <span class="comment">// get delta_theta for all theta</span>
<a name="l00680"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419">00680</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">AdaptiveHistogramVCollator::getYatracosDelta</a>(
<a name="l00681"></a>00681 list&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listYatSet, 
<a name="l00682"></a>00682 vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecRowYatSet, 
<a name="l00683"></a>00683 vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecColYatSet, 
<a name="l00684"></a>00684 vector&lt; vector&lt;double&gt; &gt; &amp; vecMaxDeltaVec)
<a name="l00685"></a>00685 {
<a name="l00686"></a>00686   <span class="comment">// iterators</span>
<a name="l00687"></a>00687   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator listYatSetIt;
<a name="l00688"></a>00688   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator vecIt;
<a name="l00689"></a>00689   
<a name="l00690"></a>00690   <span class="comment">//set for CollatorSPVnode*</span>
<a name="l00691"></a>00691   set &lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; YatSet; 
<a name="l00692"></a>00692   
<a name="l00693"></a>00693   <span class="keywordtype">double</span> delta = 0; <span class="comment">// the delta value</span>
<a name="l00694"></a>00694   <span class="keywordtype">double</span> DeltaMax = 0; <span class="comment">// the maximum delta</span>
<a name="l00695"></a>00695   <span class="keywordtype">size_t</span> theta = getNumberCollated() - 1;  <span class="comment">// number of splits up to now</span>
<a name="l00696"></a>00696    
<a name="l00697"></a>00697     <span class="comment">// check that the size of vecMaxDeltaVec is theta   </span>
<a name="l00698"></a>00698   <span class="keywordflow">if</span> (vecMaxDeltaVec.size() != theta) {
<a name="l00699"></a>00699     cerr &lt;&lt; <span class="stringliteral">&quot;Size of vecMaxDeltaVec before getting delta should be &quot;</span> &lt;&lt; theta 
<a name="l00700"></a>00700          &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l00701"></a>00701     exit(0);
<a name="l00702"></a>00702   }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704   <span class="comment">//initialize vecMaxDeltaVec at the largest index</span>
<a name="l00705"></a>00705 <span class="comment">//  cout &lt;&lt; &quot;initialize vecMaxDeltaVec at the largest index: &quot; &lt;&lt; endl;</span>
<a name="l00706"></a>00706   vector&lt;double&gt; dummyTheta;
<a name="l00707"></a>00707   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;=theta; i++) {
<a name="l00708"></a>00708     dummyTheta.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); <span class="comment">// supremum of an empty set is -infinity</span>
<a name="l00709"></a>00709   }
<a name="l00710"></a>00710   vecMaxDeltaVec.push_back(dummyTheta);
<a name="l00711"></a>00711 
<a name="l00712"></a>00712     <span class="comment">// go through each histogram i to update DeltaMax for the new Scheffe </span>
<a name="l00713"></a>00713     <span class="comment">// sets in vecRowYatSet and vecColYatSet </span>
<a name="l00714"></a>00714     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;= theta; i++) {
<a name="l00715"></a>00715       <span class="comment">//cout &lt;&lt; &quot;\n =====Checking histogram  &quot; &lt;&lt; i &lt;&lt; &quot; for the &quot; &lt;&lt; theta &lt;&lt; &quot;-th split======&quot; &lt;&lt; endl;</span>
<a name="l00716"></a>00716       <span class="keywordflow">if</span> ( i &lt; theta) { <span class="comment">// only can compare with deltas in indices from 0:theta-1</span>
<a name="l00717"></a>00717         DeltaMax = vecMaxDeltaVec[theta-1][i];
<a name="l00718"></a>00718         <span class="comment">//cout &lt;&lt; &quot;The previous Delta is: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
<a name="l00719"></a>00719       }
<a name="l00720"></a>00720       <span class="keywordflow">else</span> {
<a name="l00721"></a>00721         DeltaMax = vecMaxDeltaVec[theta][theta];
<a name="l00722"></a>00722         <span class="comment">//cout &lt;&lt; &quot;The previous Delta is: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;  </span>
<a name="l00723"></a>00723       }
<a name="l00724"></a>00724 
<a name="l00725"></a>00725       <span class="comment">//go through each node/union of nodes in the Yatracos set</span>
<a name="l00726"></a>00726       <span class="keywordflow">for</span> (vecIt = vecRowYatSet.begin(); vecIt &lt; vecRowYatSet.end(); vecIt++){
<a name="l00727"></a>00727         YatSet = *(vecIt); <span class="comment">//dereference the pointer to set of CollatorSPVnode</span>
<a name="l00728"></a>00728            <span class="keywordflow">if</span> (!YatSet.empty()) {
<a name="l00729"></a>00729           <span class="comment">//  cout &lt;&lt; &quot;this set is not empty&quot; &lt;&lt;endl;</span>
<a name="l00730"></a>00730             <span class="comment">//get delta</span>
<a name="l00731"></a>00731               delta = getNodesDelta(YatSet, i);
<a name="l00732"></a>00732             <span class="comment">//cout &lt;&lt; &quot;delta for this node/union of nodes is: &quot; &lt;&lt; delta &lt;&lt; endl;</span>
<a name="l00733"></a>00733             <span class="comment">//DeltaMax is delta if delta &gt; DeltaPrev; else DeltaMax is still DeltaPrev</span>
<a name="l00734"></a>00734             <span class="comment">//cout &lt;&lt; &quot;Delta now: &quot; &lt;&lt; delta &lt;&lt; &quot;\tPrev Delta: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
<a name="l00735"></a>00735             DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
<a name="l00736"></a>00736             <span class="comment">//cout &lt;&lt; &quot;Checking the comparisons of maximums: &quot; &lt;&lt; endl;</span>
<a name="l00737"></a>00737             <span class="comment">//cout &lt;&lt; delta &lt;&lt; &quot;\t&quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
<a name="l00738"></a>00738           }
<a name="l00739"></a>00739       <span class="comment">//   else { cout &lt;&lt; &quot; i am empty!&quot; &lt;&lt; endl; } </span>
<a name="l00740"></a>00740       } <span class="comment">// end of going through each YatSet in vecRowYatSet for histogram i</span>
<a name="l00741"></a>00741 
<a name="l00742"></a>00742        <span class="comment">//cout &lt;&lt; &quot;DeltaMax after going through VecRowYatSet: &quot; &lt;&lt; DeltaMax &lt;&lt; endl; </span>
<a name="l00743"></a>00743       <span class="comment">//go through each node/union of nodes in the Yatracos set</span>
<a name="l00744"></a>00744       <span class="keywordflow">for</span> (vecIt = vecColYatSet.begin(); vecIt &lt; vecColYatSet.end(); vecIt++){
<a name="l00745"></a>00745         YatSet = *(vecIt); <span class="comment">//dereference the pointer to set of CollatorSPVnode</span>
<a name="l00746"></a>00746         
<a name="l00747"></a>00747         <span class="keywordflow">if</span> (!YatSet.empty()) {
<a name="l00748"></a>00748         <span class="comment">//  cout &lt;&lt; &quot;this set is not empty&quot; &lt;&lt;endl;</span>
<a name="l00749"></a>00749           <span class="comment">//get delta</span>
<a name="l00750"></a>00750           delta = getNodesDelta(YatSet, i);
<a name="l00751"></a>00751           <span class="comment">//cout &lt;&lt; &quot;delta for this node/union of nodes is: &quot; &lt;&lt; delta &lt;&lt; endl;</span>
<a name="l00752"></a>00752             
<a name="l00753"></a>00753           <span class="comment">//DeltaMax is delta if delta &gt; DeltaPrev; else DeltaMax is still DeltaPrev</span>
<a name="l00754"></a>00754           DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
<a name="l00755"></a>00755           <span class="comment">//cout &lt;&lt; &quot;Checking the comparisons of maximums: &quot; &lt;&lt; endl;</span>
<a name="l00756"></a>00756           <span class="comment">//cout &lt;&lt; delta &lt;&lt; &quot;\t&quot; &lt;&lt; DeltaMax &lt;&lt; endl;           </span>
<a name="l00757"></a>00757         }
<a name="l00758"></a>00758         
<a name="l00759"></a>00759       <span class="comment">//  else { cout &lt;&lt; &quot; i am empty!&quot; &lt;&lt; endl; }</span>
<a name="l00760"></a>00760       } <span class="comment">// end of going through each YatSet in vecColYatSet for histogram i</span>
<a name="l00761"></a>00761       
<a name="l00762"></a>00762       <span class="comment">// keep the updated DeltaMax in vecMaxDeltaVec at the [theta][i] position </span>
<a name="l00763"></a>00763        <span class="comment">//cout &lt;&lt; &quot;the updated DeltaMax for the edges is: &quot; &lt;&lt; DeltaMax &lt;&lt;endl;  </span>
<a name="l00764"></a>00764       vecMaxDeltaVec[theta][i] = DeltaMax;
<a name="l00765"></a>00765   } <span class="comment">// end of going through each histogram</span>
<a name="l00766"></a>00766       
<a name="l00767"></a>00767   <span class="comment">// now go through listYatSet for the histogram at the largest index theta</span>
<a name="l00768"></a>00768   <span class="keywordflow">if</span> (!(listYatSet.empty())) { <span class="comment">//listYatSet is not empty</span>
<a name="l00769"></a>00769        DeltaMax = vecMaxDeltaVec[theta][theta];
<a name="l00770"></a>00770        <span class="comment">//cout &lt;&lt; &quot;\n =====Checking histogram  &quot; &lt;&lt; theta &lt;&lt; &quot;for listYatSet=====&quot; &lt;&lt; endl;</span>
<a name="l00771"></a>00771        <span class="comment">// go through each node/unions of nodes in listYatSet</span>
<a name="l00772"></a>00772        <span class="keywordflow">for</span> (listYatSetIt = listYatSet.begin(); listYatSetIt != listYatSet.end(); listYatSetIt++) {
<a name="l00773"></a>00773       YatSet = *(listYatSetIt);
<a name="l00774"></a>00774         <span class="comment">//get delta</span>
<a name="l00775"></a>00775          delta = getNodesDelta(YatSet, theta);
<a name="l00776"></a>00776             <span class="comment">//cout &lt;&lt; &quot;delta for this node/union of nodes is: &quot; &lt;&lt; delta &lt;&lt; endl;</span>
<a name="l00777"></a>00777             
<a name="l00778"></a>00778             <span class="comment">//DeltaMax is delta if delta &gt; DeltaPrev; else DeltaMax is still DeltaPrev</span>
<a name="l00779"></a>00779             DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
<a name="l00780"></a>00780             <span class="comment">//cout &lt;&lt; &quot;Checking the comparisons of maximums: &quot; &lt;&lt; endl;</span>
<a name="l00781"></a>00781             <span class="comment">//cout &lt;&lt; delta &lt;&lt; &quot;\t&quot; &lt;&lt; DeltaMax &lt;&lt; endl;   </span>
<a name="l00782"></a>00782     } <span class="comment">// end of going through listYatSet</span>
<a name="l00783"></a>00783     <span class="comment">//cout &lt;&lt; &quot;the updated DeltaMax for the edges is: &quot; &lt;&lt; DeltaMax &lt;&lt;endl; </span>
<a name="l00784"></a>00784      vecMaxDeltaVec[theta][theta] = DeltaMax; 
<a name="l00785"></a>00785   } <span class="comment">// end of if listYatSet is not empty     </span>
<a name="l00786"></a>00786 } <span class="comment">// end of method getYatracosDelta</span>
<a name="l00787"></a>00787 
<a name="l00788"></a>00788 
<a name="l00789"></a>00789 <span class="comment">// get delta_theta for all theta</span>
<a name="l00790"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4b3830bf47fe4738c22f4a53858d90fc">00790</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4b3830bf47fe4738c22f4a53858d90fc">AdaptiveHistogramVCollator::getScheffeWinner</a>(
<a name="l00791"></a>00791     vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecScheffeSet, 
<a name="l00792"></a>00792     vector&lt; std::vector&lt;int&gt; &gt; &amp; vecWinnerVec,
<a name="l00793"></a>00793     vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaWinnerVec)
<a name="l00794"></a>00794 { 
<a name="l00795"></a>00795   <span class="comment">//  cout &lt;&lt; &quot;Get Scheffe Winner&quot; &lt;&lt; endl;</span>
<a name="l00796"></a>00796     <span class="keywordtype">size_t</span> theta = getNumberCollated() - 1;  <span class="comment">// number of splits up to now</span>
<a name="l00797"></a>00797 
<a name="l00798"></a>00798     <span class="comment">// check that the size of vecMaxDeltaVec is theta   </span>
<a name="l00799"></a>00799     <span class="keywordflow">if</span> (vecDeltaWinnerVec.size() != theta) {
<a name="l00800"></a>00800       cerr &lt;&lt; <span class="stringliteral">&quot;Size of vecDeltaWinnerVec before getting delta should be &quot;</span> 
<a name="l00801"></a>00801            &lt;&lt; theta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l00802"></a>00802       exit(0);
<a name="l00803"></a>00803     }
<a name="l00804"></a>00804     <span class="keywordflow">if</span> (vecWinnerVec.size() != theta) {
<a name="l00805"></a>00805       cerr &lt;&lt; <span class="stringliteral">&quot;Size of vecWinnerVec before running tournament should be &quot;</span>
<a name="l00806"></a>00806            &lt;&lt; theta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l00807"></a>00807       exit(0);
<a name="l00808"></a>00808     } 
<a name="l00809"></a>00809   
<a name="l00810"></a>00810    <span class="comment">//check if the ScheffeSet for pair {theta-1, theta} is empty</span>
<a name="l00811"></a>00811   <span class="keywordflow">if</span> ( vecScheffeSet[theta-1].empty() ) {
<a name="l00812"></a>00812     <span class="comment">//initialize vecDeltaWinnerVec at the largest index</span>
<a name="l00813"></a>00813     vector&lt;double&gt; dummyTheta;
<a name="l00814"></a>00814     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;=theta; i++) {
<a name="l00815"></a>00815       dummyTheta.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l00816"></a>00816       <span class="comment">// supremum of an empty set is -infinity</span>
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818     vecDeltaWinnerVec.push_back(dummyTheta);
<a name="l00819"></a>00819     <span class="comment">//initialize at the previous indices</span>
<a name="l00820"></a>00820     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; theta; i++){
<a name="l00821"></a>00821       vecDeltaWinnerVec[i].push_back(-1*(numeric_limits&lt;double&gt;::infinity()));
<a name="l00822"></a>00822     }   
<a name="l00823"></a>00823     <span class="comment">//push back 0 in vecWinnerVec at the largest index</span>
<a name="l00824"></a>00824     vector&lt;int&gt; vecWinner;
<a name="l00825"></a>00825     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;=theta; i++) {
<a name="l00826"></a>00826       vecWinner.push_back(0); 
<a name="l00827"></a>00827     }
<a name="l00828"></a>00828     vecWinnerVec.push_back(vecWinner);
<a name="l00829"></a>00829     <span class="comment">//push back 0 in vecWinnerVec at the previous indices</span>
<a name="l00830"></a>00830     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; theta; i++){
<a name="l00831"></a>00831       vecWinnerVec[i].push_back(0);
<a name="l00832"></a>00832     }
<a name="l00833"></a>00833   } <span class="comment">// end of vecScheffeSet[theta-1] is empty </span>
<a name="l00834"></a>00834   
<a name="l00835"></a>00835   <span class="keywordflow">else</span> {
<a name="l00836"></a>00836     <span class="comment">// iterators</span>
<a name="l00837"></a>00837     vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator vecIt;
<a name="l00838"></a>00838     set &lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt;::iterator setIt; 
<a name="l00839"></a>00839 
<a name="l00840"></a>00840     <span class="comment">//initialize vecDeltaWinnerVec at the largest index</span>
<a name="l00841"></a>00841     vector&lt;double&gt; dummyTheta;
<a name="l00842"></a>00842     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;=theta; i++) {
<a name="l00843"></a>00843       dummyTheta.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l00844"></a>00844       <span class="comment">// supremum of an empty set is -infinity</span>
<a name="l00845"></a>00845     }
<a name="l00846"></a>00846     vecDeltaWinnerVec.push_back(dummyTheta);
<a name="l00847"></a>00847     <span class="comment">//initialize at the previous indices</span>
<a name="l00848"></a>00848     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; theta; i++){
<a name="l00849"></a>00849       vecDeltaWinnerVec[i].push_back(-1*(numeric_limits&lt;double&gt;::infinity()));
<a name="l00850"></a>00850     }
<a name="l00851"></a>00851     
<a name="l00852"></a>00852     <span class="comment">//initialize vecWinnerVec at the largest index</span>
<a name="l00853"></a>00853     vector&lt;int&gt; vecWinner;
<a name="l00854"></a>00854     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt;=theta; i++) {
<a name="l00855"></a>00855       vecWinner.push_back(0); 
<a name="l00856"></a>00856     }
<a name="l00857"></a>00857     vecWinnerVec.push_back(vecWinner);    
<a name="l00858"></a>00858     <span class="comment">//initialize vecWinnerVec at the previous indices</span>
<a name="l00859"></a>00859     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; theta; i++){
<a name="l00860"></a>00860       vecWinnerVec[i].push_back(0);
<a name="l00861"></a>00861     }
<a name="l00862"></a>00862         
<a name="l00863"></a>00863     <span class="comment">//get the current theta     </span>
<a name="l00864"></a>00864     <span class="keywordtype">double</span> deltaTheta = getNodesDelta(vecScheffeSet[theta-1], theta);    
<a name="l00865"></a>00865     
<a name="l00866"></a>00866     <span class="comment">// go through each histogram i to get the winner</span>
<a name="l00867"></a>00867     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; theta; i++) {
<a name="l00868"></a>00868         <span class="keywordflow">if</span> (!(vecScheffeSet[i]).empty()) {        
<a name="l00869"></a>00869           <span class="comment">//get delta</span>
<a name="l00870"></a>00870           <span class="keywordtype">double</span> delta = getNodesDelta(vecScheffeSet[theta-1], i);
<a name="l00871"></a>00871           <span class="comment">//perform competition</span>
<a name="l00872"></a>00872           <span class="keywordtype">bool</span> i_win = delta &lt; deltaTheta;
<a name="l00873"></a>00873           <span class="keywordflow">if</span> ( i_win == <span class="keyword">true</span> ) {
<a name="l00874"></a>00874             cout &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; delta &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; theta &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; deltaTheta &lt;&lt; endl;
<a name="l00875"></a>00875             cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; i &lt;&lt; endl;
<a name="l00876"></a>00876             <span class="comment">// winner is i</span>
<a name="l00877"></a>00877             vecWinnerVec[theta][i]=(0);   
<a name="l00878"></a>00878             vecWinnerVec[i][theta]=(1);               
<a name="l00879"></a>00879             vecDeltaWinnerVec[theta][i]=(deltaTheta);   
<a name="l00880"></a>00880             vecDeltaWinnerVec[i][theta]=(delta);      
<a name="l00881"></a>00881           }
<a name="l00882"></a>00882           <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( i_win == <span class="keyword">false</span> ) { 
<a name="l00883"></a>00883             cout &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; delta &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; theta &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; deltaTheta &lt;&lt; endl;
<a name="l00884"></a>00884             cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; theta &lt;&lt; endl;
<a name="l00885"></a>00885             <span class="comment">// winner is theta</span>
<a name="l00886"></a>00886             vecWinnerVec[i][theta]=(0);
<a name="l00887"></a>00887             vecWinnerVec[theta][i]=(0);           
<a name="l00888"></a>00888             vecDeltaWinnerVec[i][theta]=(delta);    
<a name="l00889"></a>00889             vecDeltaWinnerVec[theta][i]=(deltaTheta);   
<a name="l00890"></a>00890           }
<a name="l00891"></a>00891           <span class="keywordflow">else</span> { <span class="comment">// deltaTheta = delta </span>
<a name="l00892"></a>00892              cout &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; delta &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; theta &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; deltaTheta &lt;&lt; endl;
<a name="l00893"></a>00893             cout &lt;&lt; <span class="stringliteral">&quot;tie&quot;</span> &lt;&lt; endl;
<a name="l00894"></a>00894             vecWinnerVec[theta][i]=(0);
<a name="l00895"></a>00895             vecWinnerVec[i][theta]=(0);           
<a name="l00896"></a>00896             vecDeltaWinnerVec[theta][i] = (delta);    
<a name="l00897"></a>00897             vecDeltaWinnerVec[i][theta]= (delta);               
<a name="l00898"></a>00898           }  <span class="comment">// end of competition</span>
<a name="l00899"></a>00899         } <span class="comment">// end of ScheffeSet not empty                   </span>
<a name="l00900"></a>00900     } <span class="comment">// end of going through each histogram        </span>
<a name="l00901"></a>00901   } <span class="comment">// end of vecScheffeSet[theta-1] not empty   </span>
<a name="l00902"></a>00902 } <span class="comment">// end of getScheffeDelta</span>
<a name="l00903"></a>00903 
<a name="l00904"></a>00904 <span class="comment">//get the theta of the minimum of delta_theta</span>
<a name="l00905"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a78eefcadb3a5247ce6712493b85976f9">00905</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a78eefcadb3a5247ce6712493b85976f9" title="Get the thetas that gives the minimum distance. Get the thetas that gives the minimum distance...">AdaptiveHistogramVCollator::getMinDistTheta</a>(                 
<a name="l00906"></a>00906             std::vector&lt; std::vector&lt;int&gt; &gt; &amp; vecMinDistTheta, 
<a name="l00907"></a>00907    std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecMaxDeltaVec, <span class="keywordtype">int</span> n)
<a name="l00908"></a>00908 {  
<a name="l00909"></a>00909 <span class="comment">//   cout &lt;&lt; &quot;Get the minimum:&quot; &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l00910"></a>00910   <span class="comment">//want the vector of DeltaMax at the last entry of vecMaxDeltaVec </span>
<a name="l00911"></a>00911    vector&lt;double&gt; vecDeltaMax = vecMaxDeltaVec.back();
<a name="l00912"></a>00912    <span class="keywordtype">double</span> DeltaInf = *(min_element(vecDeltaMax.begin(), vecDeltaMax.end()));
<a name="l00913"></a>00913    <span class="comment">//cout &lt;&lt; DeltaInf &lt;&lt; endl;</span>
<a name="l00914"></a>00914   <span class="comment">//double upperLimit = DeltaInf + 1.0/n*1.0;</span>
<a name="l00915"></a>00915 
<a name="l00916"></a>00916    <span class="comment">// keep the associated theta in a vector and then push back in the bigger vector</span>
<a name="l00917"></a>00917    vector&lt;int&gt; minDistTheta;
<a name="l00918"></a>00918    
<a name="l00919"></a>00919      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; vecDeltaMax.size(); i++) {
<a name="l00920"></a>00920       <span class="comment">//   cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; DeltaInf &lt;&lt; &quot; vs &quot; &lt;&lt; vecDeltaMax[i] &lt;&lt; endl;</span>
<a name="l00921"></a>00921          <span class="keywordflow">if</span> (vecDeltaMax[i] == DeltaInf) { 
<a name="l00922"></a>00922       <span class="comment">//if (vecDeltaMax[i] &lt; upperLimit) </span>
<a name="l00923"></a>00923       <span class="comment">//       cout &lt;&lt; &quot;this is at split &quot; &lt;&lt; i &lt;&lt; endl;</span>
<a name="l00924"></a>00924              minDistTheta.push_back(i); 
<a name="l00925"></a>00925       }  
<a name="l00926"></a>00926     }
<a name="l00927"></a>00927     vecMinDistTheta.push_back(minDistTheta);
<a name="l00928"></a>00928  } 
<a name="l00929"></a>00929 
<a name="l00930"></a>00930 <span class="comment">// get delta_theta for all theta</span>
<a name="l00931"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1ea3cb0ee5fea756fc45445fec2db166">00931</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1ea3cb0ee5fea756fc45445fec2db166">AdaptiveHistogramVCollator::getHistScheffeWinner</a>(
<a name="l00932"></a>00932     vector&lt; vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec, 
<a name="l00933"></a>00933     vector&lt; std::vector&lt;int&gt; &gt; &amp; vecWinnerVec,
<a name="l00934"></a>00934     vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaWinnerVec)
<a name="l00935"></a>00935 { 
<a name="l00936"></a>00936   <span class="comment">// go through each ordered pair to get the winner</span>
<a name="l00937"></a>00937   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecScheffeSetVec.size(); i++) {
<a name="l00938"></a>00938     
<a name="l00939"></a>00939     vector&lt;int&gt; WinnerVec(vecScheffeSetVec[i].size());
<a name="l00940"></a>00940     vector&lt;double&gt; DeltaVec;
<a name="l00941"></a>00941 
<a name="l00942"></a>00942     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; vecScheffeSetVec[i].size(); j++) {
<a name="l00943"></a>00943 
<a name="l00944"></a>00944       <span class="keywordflow">if</span> ( vecScheffeSetVec[i][j].empty() ) {
<a name="l00945"></a>00945         <span class="comment">//size_t cand1 = i;</span>
<a name="l00946"></a>00946         <span class="comment">//size_t cand2 = j+i+1;</span>
<a name="l00947"></a>00947         WinnerVec[j] = (-1);
<a name="l00948"></a>00948         DeltaVec.push_back(-1*(numeric_limits&lt;double&gt;::infinity()));
<a name="l00949"></a>00949         <span class="comment">//cout &lt;&lt; &quot;no scheffe set at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l00950"></a>00950         <span class="comment">//cout &lt;&lt; &quot;========&quot; &lt;&lt; endl;</span>
<a name="l00951"></a>00951       } 
<a name="l00952"></a>00952     
<a name="l00953"></a>00953       <span class="keywordflow">else</span> {
<a name="l00954"></a>00954         <span class="comment">//cout &lt;&lt; &quot;scheffe at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l00955"></a>00955         <span class="keywordtype">size_t</span> cand1 = i;
<a name="l00956"></a>00956         <span class="keywordtype">size_t</span> cand2 = j+i+1;
<a name="l00957"></a>00957         cout &lt;&lt; cand1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; cand2 &lt;&lt; endl;
<a name="l00958"></a>00958 
<a name="l00959"></a>00959         <span class="comment">//cout &lt;&lt; &quot;----------get delta for &quot; &lt;&lt; cand1 &lt;&lt; endl;</span>
<a name="l00960"></a>00960         <span class="keywordtype">double</span> deltaI = getNodesDelta(vecScheffeSetVec[i][j], cand1);
<a name="l00961"></a>00961         <span class="comment">//cout &lt;&lt; &quot;---------get delta for &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l00962"></a>00962         <span class="keywordtype">double</span> deltaJ = getNodesDelta(vecScheffeSetVec[i][j], cand2);
<a name="l00963"></a>00963 
<a name="l00964"></a>00964         <span class="comment">// perform competition</span>
<a name="l00965"></a>00965         <span class="keywordflow">if</span> ( deltaI &lt; deltaJ ) {
<a name="l00966"></a>00966           <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
<a name="l00967"></a>00967           <span class="comment">//cout &lt;&lt; &quot;Winner is: &quot; &lt;&lt; cand1 &lt;&lt; endl;</span>
<a name="l00968"></a>00968           <span class="comment">// winner is i</span>
<a name="l00969"></a>00969           WinnerVec[j] = (1);
<a name="l00970"></a>00970           DeltaVec.push_back(deltaI);
<a name="l00971"></a>00971         }
<a name="l00972"></a>00972         <span class="keywordflow">else</span> { <span class="comment">// deltaTheta &gt;= delta </span>
<a name="l00973"></a>00973           <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
<a name="l00974"></a>00974           <span class="comment">//cout &lt;&lt; &quot;Winner is: &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l00975"></a>00975           WinnerVec[j] = (0);
<a name="l00976"></a>00976           DeltaVec.push_back(deltaJ);
<a name="l00977"></a>00977         }  <span class="comment">// end</span>
<a name="l00978"></a>00978       } <span class="comment">// end of set not empty</span>
<a name="l00979"></a>00979     } <span class="comment">// end of going through j</span>
<a name="l00980"></a>00980     vecWinnerVec.push_back(WinnerVec);
<a name="l00981"></a>00981     vecDeltaWinnerVec.push_back(DeltaVec);
<a name="l00982"></a>00982   } <span class="comment">// end of going through vecScheffeSet</span>
<a name="l00983"></a>00983 
<a name="l00984"></a>00984 } <span class="comment">// end of getHistScheffeWinner</span>
<a name="l00985"></a>00985 
<a name="l00986"></a>00986 
<a name="l00987"></a>00987 
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 <span class="comment">//get the minimum delta_theta</span>
<a name="l00990"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">00990</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">AdaptiveHistogramVCollator::getMinDelta</a>(<span class="keywordtype">int</span> maxCheck,
<a name="l00991"></a>00991                         vector&lt; vector&lt;double&gt; &gt; &amp; vecMaxDeltaVec)
<a name="l00992"></a>00992 {
<a name="l00993"></a>00993   <span class="comment">//want the vector of DeltaMax at the last entry of vecMaxDeltaVec </span>
<a name="l00994"></a>00994   vector&lt;double&gt; vecDeltaMax = vecMaxDeltaVec.back();
<a name="l00995"></a>00995   <span class="keywordtype">double</span> minDelta = *(min_element(vecDeltaMax.begin(), vecDeltaMax.end()));
<a name="l00996"></a>00996   <span class="keywordtype">size_t</span> minPos = -1;
<a name="l00997"></a>00997   
<a name="l00998"></a>00998   vector&lt;bool&gt; signs;
<a name="l00999"></a>00999   <span class="comment">//subtract each element from vecDeltaMax</span>
<a name="l01000"></a>01000   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecDeltaMax.size(); i++) {
<a name="l01001"></a>01001 <span class="comment">//    cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; vecDeltaMax[i] &lt;&lt; &quot;\t&quot; &lt;&lt; minDelta &lt;&lt; endl;</span>
<a name="l01002"></a>01002     <span class="keywordflow">if</span> ( vecDeltaMax[i]  &gt; minDelta ) { signs.push_back(1); }
<a name="l01003"></a>01003     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( vecDeltaMax[i] == minDelta ) {  
<a name="l01004"></a>01004       signs.push_back(0); 
<a name="l01005"></a>01005       <span class="comment">// get the position at which the first time this happens</span>
<a name="l01006"></a>01006       <span class="keywordflow">if</span> ( minPos == -1 ) { minPos = i; }
<a name="l01007"></a>01007     }
<a name="l01008"></a>01008 
<a name="l01009"></a>01009     <span class="keywordflow">if</span> ( vecDeltaMax[i] &lt; minDelta ) {
<a name="l01010"></a>01010       cerr &lt;&lt; <span class="stringliteral">&quot;vecDeltaMax[i] &lt; minDelta!&quot;</span> &lt;&lt; endl;
<a name="l01011"></a>01011       exit(0);
<a name="l01012"></a>01012     }
<a name="l01013"></a>01013   }
<a name="l01014"></a>01014   
<a name="l01015"></a>01015 <span class="comment">//  cout &lt;&lt; &quot;Min Delta at position &quot; &lt;&lt; minPos &lt;&lt; endl;</span>
<a name="l01016"></a>01016 
<a name="l01017"></a>01017   <span class="keywordtype">bool</span> toStop = <span class="keyword">false</span>;
<a name="l01018"></a>01018 
<a name="l01019"></a>01019   <span class="comment">//if the infimum is at the last theta - continue splitting</span>
<a name="l01020"></a>01020 <span class="comment">//  cout &lt;&lt; &quot;======check if minDelta is at the last row====&quot; &lt;&lt; endl;</span>
<a name="l01021"></a>01021   <span class="keywordflow">if</span> ( minPos == (getNumberCollated()-1) ) { 
<a name="l01022"></a>01022 <span class="comment">//    cout &lt;&lt; &quot;continue splitting&quot; &lt;&lt; endl;</span>
<a name="l01023"></a>01023     <span class="keywordflow">return</span> toStop;
<a name="l01024"></a>01024   }
<a name="l01025"></a>01025   
<a name="l01026"></a>01026   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( (getNumberCollated()-1) != minPos ) {
<a name="l01027"></a>01027 <span class="comment">//  cout &lt;&lt; &quot;======minDelta is not in the last row, check all the following deltas====&quot; &lt;&lt; endl;</span>
<a name="l01028"></a>01028 <span class="comment">//  cout &lt;&lt; &quot;=======now check if at least k of the following deltas are equal or greater =====&quot; &lt;&lt; endl;</span>
<a name="l01029"></a>01029     <span class="keywordtype">int</span> flag = 0;
<a name="l01030"></a>01030     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = (minPos+1); i &lt; signs.size(); i++) {
<a name="l01031"></a>01031 <span class="comment">//      cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot; sign: &quot; &lt;&lt; signs[i] &lt;&lt; endl;</span>
<a name="l01032"></a>01032       flag++;
<a name="l01033"></a>01033       cout &lt;&lt; <span class="stringliteral">&quot;flag:&quot;</span>  &lt;&lt; flag &lt;&lt; endl;
<a name="l01034"></a>01034     }
<a name="l01035"></a>01035   
<a name="l01036"></a>01036     <span class="keywordflow">if</span> ( flag &gt;= maxCheck ) { <span class="keywordflow">return</span> toStop = <span class="keyword">true</span>;}
<a name="l01037"></a>01037     <span class="keywordflow">else</span> { <span class="keywordflow">return</span> toStop = <span class="keyword">false</span>; }
<a name="l01038"></a>01038   } <span class="comment">// end of else if</span>
<a name="l01039"></a>01039 } <span class="comment">// end of function</span>
<a name="l01040"></a>01040 
<a name="l01041"></a>01041  <span class="comment">// Get infimum delta_theta</span>
<a name="l01042"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab121bb960439438575c2115944990724">01042</a>  vector&lt;double&gt; <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab121bb960439438575c2115944990724" title="Get the infimum delta value for all thetas.">AdaptiveHistogramVCollator::getInfDelta</a>(
<a name="l01043"></a>01043                         vector&lt;double&gt; &amp; vecInfDelta, 
<a name="l01044"></a>01044                         vector&lt; vector&lt;double&gt; &gt; &amp; vecMaxDeltaVec, 
<a name="l01045"></a>01045                         <span class="keywordtype">int</span> n)
<a name="l01046"></a>01046  {
<a name="l01047"></a>01047    <span class="comment">//want the vector of DeltaMax at the last entry of vecMaxDeltaVec </span>
<a name="l01048"></a>01048    vector&lt;double&gt; vecDeltaMax = vecMaxDeltaVec.back();
<a name="l01049"></a>01049 
<a name="l01050"></a>01050   <span class="comment">//  cout &lt;&lt; &quot;getting the upper limit&quot; &lt;&lt; endl;</span>
<a name="l01051"></a>01051   <span class="comment">//  double DeltaInf = *(min_element(vecDeltaMax.begin(), vecDeltaMax.end()));</span>
<a name="l01052"></a>01052     <span class="keywordtype">double</span> DeltaInf = *(min_element(vecDeltaMax.begin(), vecDeltaMax.end()));
<a name="l01053"></a>01053     
<a name="l01054"></a>01054     vecInfDelta.push_back(DeltaInf);      
<a name="l01055"></a>01055     
<a name="l01056"></a>01056     <span class="keywordflow">return</span> vecInfDelta;
<a name="l01057"></a>01057 }
<a name="l01058"></a>01058 
<a name="l01059"></a>01059 <span class="comment">// get the root box of the collator</span>
<a name="l01060"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a53105611d6db4dc208275fd049475cd6">01060</a> ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a53105611d6db4dc208275fd049475cd6" title="Get the root box. Get the root box of the AdaptiveHistogramVCollator object.">AdaptiveHistogramVCollator::getRootBox</a>() 
<a name="l01061"></a>01061 {
<a name="l01062"></a>01062   ivector rootBox = rootVCollator-&gt;getBox();  
<a name="l01063"></a>01063   <span class="keywordflow">return</span> rootBox;
<a name="l01064"></a>01064 }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066 <span class="comment">// Get Scheffe Tournament All Winner</span>
<a name="l01067"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aa66a678df6a370f60bb7141ddb28a043">01067</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aa66a678df6a370f60bb7141ddb28a043">AdaptiveHistogramVCollator::getScheffeSetAll</a>(
<a name="l01068"></a>01068                         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> splitNode,
<a name="l01069"></a>01069     vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecScheffeSet,
<a name="l01070"></a>01070     list&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listScheffeSet)
<a name="l01071"></a>01071 {
<a name="l01072"></a>01072   <span class="comment">//================setting up containers====================================//</span>
<a name="l01073"></a>01073   <span class="comment">// cout &lt;&lt; &quot;set up containers&quot; &lt;&lt; endl;</span>
<a name="l01074"></a>01074   <span class="comment">//iterator for vector</span>
<a name="l01075"></a>01075    vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator vecIt;
<a name="l01076"></a>01076     
<a name="l01077"></a>01077    <span class="comment">//set for CollatorSPVnode* and iterator for sets</span>
<a name="l01078"></a>01078    set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; setCSP;
<a name="l01079"></a>01079    set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt;::iterator setIt;
<a name="l01080"></a>01080     
<a name="l01081"></a>01081    <span class="comment">//empty set</span>
<a name="l01082"></a>01082    set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; emptySetCSP;
<a name="l01083"></a>01083    <span class="comment">//=============end of setting up containers================================//</span>
<a name="l01084"></a>01084   <span class="comment">//cout &lt;&lt; &quot;getNumberCollated: &quot; &lt;&lt; endl;  </span>
<a name="l01085"></a>01085   <span class="keywordtype">int</span> numAdd = getNumberCollated(); <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l01086"></a>01086   <span class="keywordtype">size_t</span> theta = numAdd-1; <span class="comment">// the current number of splits</span>
<a name="l01087"></a>01087   
<a name="l01088"></a>01088    <span class="comment">// initialize the vecScheffeSet</span>
<a name="l01089"></a>01089    <span class="keywordflow">if</span> ( splitNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == getRootBox() ) { <span class="comment">//initialize vecScheffeSet with the empty set (by definition)</span>
<a name="l01090"></a>01090       setCSP.insert(splitNode); <span class="comment">// urm what is this for?</span>
<a name="l01091"></a>01091       vecScheffeSet.push_back(emptySetCSP); 
<a name="l01092"></a>01092   }
<a name="l01093"></a>01093   <span class="comment">//cout &lt;&lt; &quot;get the left and right children of: &quot; &lt;&lt; splitNode-&gt;getNodeName() &lt;&lt; endl;   </span>
<a name="l01094"></a>01094    <span class="comment">// get the left and right children of the split node</span>
<a name="l01095"></a>01095     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * lChild = splitNode-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>(); 
<a name="l01096"></a>01096     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * rChild = splitNode-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l01097"></a>01097     <span class="comment">//cout &lt;&lt; lChild-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rChild-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01098"></a>01098   
<a name="l01099"></a>01099     <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l01100"></a>01100     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k=0; k &lt; theta; k++) {  
<a name="l01101"></a>01101    <span class="comment">//   cout &lt;&lt; &quot;k= &quot; &lt;&lt; k &lt;&lt; endl;      </span>
<a name="l01102"></a>01102      <span class="comment">// insert the previous vecScheffeSet into listScheffeSet and</span>
<a name="l01103"></a>01103     <span class="comment">// remove the node that was split from vecScheffeSet </span>
<a name="l01104"></a>01104       <span class="keywordflow">if</span> (!(vecScheffeSet[k]).empty()) {
<a name="l01105"></a>01105          listScheffeSet.push_back(vecScheffeSet[k]);  
<a name="l01106"></a>01106       <span class="comment">//  for (setIt = vecScheffeSet[k].begin(); setIt != vecScheffeSet[k].end(); setIt++) { cout &lt;&lt; (*setIt)-&gt;getNodeName() &lt;&lt; endl; }</span>
<a name="l01107"></a>01107       vecScheffeSet[k].erase(splitNode);
<a name="l01108"></a>01108     }  
<a name="l01109"></a>01109    
<a name="l01110"></a>01110      <span class="comment">// check summaries of lChild and rChild for row</span>
<a name="l01111"></a>01111     <span class="keywordtype">bool</span> leftRowInd = lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">getScheffeNode</a>(k, theta);
<a name="l01112"></a>01112       <span class="keywordtype">bool</span> rightRowInd = rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">getScheffeNode</a>(k, theta);
<a name="l01113"></a>01113       <span class="comment">// insert the node into vecScheffeSet if return true</span>
<a name="l01114"></a>01114       <span class="keywordflow">if</span> (leftRowInd) { 
<a name="l01115"></a>01115   <span class="comment">//    cout &lt;&lt; &quot;inserting &quot; &lt;&lt; lChild-&gt;getNodeName() &lt;&lt; &quot; into vecScheffeSet&quot; &lt;&lt; endl; </span>
<a name="l01116"></a>01116       vecScheffeSet[k].insert(lChild);
<a name="l01117"></a>01117     }
<a name="l01118"></a>01118     <span class="keywordflow">if</span> (rightRowInd) { 
<a name="l01119"></a>01119   <span class="comment">//    cout &lt;&lt; &quot;inserting &quot; &lt;&lt; rChild-&gt;getNodeName() &lt;&lt; &quot; into vecScheffeSet&quot; &lt;&lt; endl; </span>
<a name="l01120"></a>01120       vecScheffeSet[k].insert(rChild);
<a name="l01121"></a>01121     }
<a name="l01122"></a>01122   } <span class="comment">// end of pairwise comparisons</span>
<a name="l01123"></a>01123 
<a name="l01124"></a>01124    <span class="comment">// checking the length of vecRowYatSet and vecColYatSet</span>
<a name="l01125"></a>01125    <span class="keywordflow">if</span> ( vecScheffeSet.size() != theta) {
<a name="l01126"></a>01126      cerr &lt;&lt; <span class="stringliteral">&quot;Length of vecRowYatSet is incorrect. Should have length &quot;</span> &lt;&lt; numAdd &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l01127"></a>01127     exit(0); 
<a name="l01128"></a>01128    }
<a name="l01129"></a>01129     
<a name="l01130"></a>01130   <span class="comment">//push back empty sets at index theta (because that corresponds to theta-theta comparison)</span>
<a name="l01131"></a>01131   vecScheffeSet.push_back(emptySetCSP); 
<a name="l01132"></a>01132          
<a name="l01133"></a>01133    <span class="comment">// get rid of repeated nodes/unions of nodes</span>
<a name="l01134"></a>01134     <span class="comment">// sort the list</span>
<a name="l01135"></a>01135     listScheffeSet.sort();
<a name="l01136"></a>01136   
<a name="l01137"></a>01137   <span class="comment">// check for uniqueness</span>
<a name="l01138"></a>01138   listScheffeSet.unique();
<a name="l01139"></a>01139   
<a name="l01140"></a>01140 } <span class="comment">// end of function getScheffeSetAll</span>
<a name="l01141"></a>01141 
<a name="l01142"></a>01142 
<a name="l01143"></a>01143 <span class="comment">// Get Scheffe set from sub-pavings.</span>
<a name="l01144"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a8f7b4de816404be827c1b201aa0d6edc">01144</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a8f7b4de816404be827c1b201aa0d6edc">AdaptiveHistogramVCollator::getHistScheffeSet</a>(
<a name="l01145"></a>01145     vector &lt; vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec)
<a name="l01146"></a>01146 {
<a name="l01147"></a>01147    <span class="comment">//=============end of setting up containers================================// </span>
<a name="l01148"></a>01148   <span class="keywordtype">int</span> numAdd = getNumberCollated(); <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l01149"></a>01149   <span class="comment">//cout &lt;&lt; &quot;getNumberCollated: &quot; &lt;&lt; numAdd &lt;&lt; endl;</span>
<a name="l01150"></a>01150   <span class="keywordtype">size_t</span> theta = numAdd-1; <span class="comment">// the current number of splits</span>
<a name="l01151"></a>01151 
<a name="l01152"></a>01152     <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l01153"></a>01153     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k=0; k &lt; numAdd; k++) {
<a name="l01154"></a>01154     vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecScheffeSet;
<a name="l01155"></a>01155       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt; numAdd; j++) {
<a name="l01156"></a>01156       <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k &lt; j) ) {
<a name="l01157"></a>01157         set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; currentScheffeSet;
<a name="l01158"></a>01158         cout &lt;&lt; <span class="stringliteral">&quot;k= &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;theta = &quot;</span> &lt;&lt; j &lt;&lt; endl;
<a name="l01159"></a>01159         getSubPaving()-&gt;getScheffeSet(currentScheffeSet, k, j);
<a name="l01160"></a>01160         <span class="comment">//if (currentScheffeSet.empty()) { cout &lt;&lt; &quot;nothing here&quot; &lt;&lt; endl; }</span>
<a name="l01161"></a>01161         vecScheffeSet.push_back(currentScheffeSet);
<a name="l01162"></a>01162       }
<a name="l01163"></a>01163     }
<a name="l01164"></a>01164     vecScheffeSetVec.push_back(vecScheffeSet);
<a name="l01165"></a>01165   } <span class="comment">// end of pairwise comparisons</span>
<a name="l01166"></a>01166 } <span class="comment">// end of function getHistScheffeSet</span>
<a name="l01167"></a>01167 
<a name="l01168"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a596a34b5f83f532160c5ab9104d6aa00">01168</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a596a34b5f83f532160c5ab9104d6aa00">AdaptiveHistogramVCollator::getHistYatSet</a>(
<a name="l01169"></a>01169     vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecYatSet)
<a name="l01170"></a>01170 {
<a name="l01171"></a>01171    <span class="comment">//=============end of setting up containers================================// </span>
<a name="l01172"></a>01172   <span class="keywordtype">int</span> numAdd = getNumberCollated(); <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l01173"></a>01173   <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l01174"></a>01174   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k= 0; k &lt; numAdd; k++) {
<a name="l01175"></a>01175     <span class="comment">// get A_ij</span>
<a name="l01176"></a>01176       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; numAdd; j++) {
<a name="l01177"></a>01177       <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k&lt;j) ) {
<a name="l01178"></a>01178         set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; RowSet;
<a name="l01179"></a>01179         set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; ColSet;
<a name="l01180"></a>01180         <span class="comment">//cout &lt;&lt; &quot;k= &quot; &lt;&lt; k &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;theta = &quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l01181"></a>01181         getSubPaving()-&gt;getYatSet(RowSet, ColSet, k, j);
<a name="l01182"></a>01182         vecYatSet.push_back(RowSet);
<a name="l01183"></a>01183         vecYatSet.push_back(ColSet);
<a name="l01184"></a>01184       }
<a name="l01185"></a>01185     }
<a name="l01186"></a>01186   } <span class="comment">// end of pairwise comparisons</span>
<a name="l01187"></a>01187 } <span class="comment">// end of function getHistScheffeSet</span>
<a name="l01188"></a>01188 
<a name="l01189"></a>01189 <span class="comment">// Get winner of the knock out.</span>
<a name="l01190"></a>01190 <span class="comment">/*</span>
<a name="l01191"></a>01191 <span class="comment">void AdaptiveHistogramVCollator::getBisectionSearchEstimate(</span>
<a name="l01192"></a>01192 <span class="comment">                            int method,</span>
<a name="l01193"></a>01193 <span class="comment">                            std::vector&lt;size_t&gt; &amp; winner, </span>
<a name="l01194"></a>01194 <span class="comment">                            std::vector&lt;size_t&gt; &amp; loser,</span>
<a name="l01195"></a>01195 <span class="comment">                            std::vector&lt;double&gt; &amp; deltaWinner,</span>
<a name="l01196"></a>01196 <span class="comment">                            std::vector&lt;double&gt; &amp; deltaLoser)</span>
<a name="l01197"></a>01197 <span class="comment">{</span>
<a name="l01198"></a>01198 <span class="comment">  //growing Yatracos list </span>
<a name="l01199"></a>01199 <span class="comment">  list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;  </span>
<a name="l01200"></a>01200 <span class="comment">  //iterators</span>
<a name="l01201"></a>01201 <span class="comment">  set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt;::iterator setIt;</span>
<a name="l01202"></a>01202 <span class="comment">     </span>
<a name="l01203"></a>01203 <span class="comment">   //initialize candidates</span>
<a name="l01204"></a>01204 <span class="comment">   //always let cand1 be winner and cand2 be updated</span>
<a name="l01205"></a>01205 <span class="comment">   size_t cand1 = 0, cand2 = getNumberCollated() - 1;</span>
<a name="l01206"></a>01206 <span class="comment">   int finalWinner;</span>
<a name="l01207"></a>01207 <span class="comment">   </span>
<a name="l01208"></a>01208 <span class="comment">  //start the match   </span>
<a name="l01209"></a>01209 <span class="comment">   while ( (cand1 &gt;= 1 &amp;&amp; cand2 &lt;= (getNumberCollated()-2)) || </span>
<a name="l01210"></a>01210 <span class="comment">        (cand2 &gt;= 1 &amp;&amp; cand1 &lt;= (getNumberCollated()-2)) ) {  </span>
<a name="l01211"></a>01211 <span class="comment">    if (cand1 != cand2) {</span>
<a name="l01212"></a>01212 <span class="comment">      cout &lt;&lt; &quot;----------------------------------------------------&quot; &lt;&lt; endl;   </span>
<a name="l01213"></a>01213 <span class="comment">      cout &lt;&lt; &quot;Cand1: &quot; &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;Cand2: &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01214"></a>01214 <span class="comment">      //set up a vector for the Yatracos set  </span>
<a name="l01215"></a>01215 <span class="comment">      set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; ScheffeSet;</span>
<a name="l01216"></a>01216 <span class="comment">      set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; YatSetRow;  </span>
<a name="l01217"></a>01217 <span class="comment">      set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; YatSetCol;</span>
<a name="l01218"></a>01218 <span class="comment">            </span>
<a name="l01219"></a>01219 <span class="comment">      if (method==1) {</span>
<a name="l01220"></a>01220 <span class="comment">        //get the Scheffe set</span>
<a name="l01221"></a>01221 <span class="comment">        if (cand1 &gt; cand2) { //for the sake of definition</span>
<a name="l01222"></a>01222 <span class="comment">          (*this).getSubPaving()-&gt;getScheffeSet(ScheffeSet, cand2, cand1);</span>
<a name="l01223"></a>01223 <span class="comment">        }</span>
<a name="l01224"></a>01224 <span class="comment">        else { </span>
<a name="l01225"></a>01225 <span class="comment">          (*this).getSubPaving()-&gt;getScheffeSet(ScheffeSet, cand1, cand2); </span>
<a name="l01226"></a>01226 <span class="comment">        }</span>
<a name="l01227"></a>01227 <span class="comment">      }</span>
<a name="l01228"></a>01228 <span class="comment">      else if (method==2) {</span>
<a name="l01229"></a>01229 <span class="comment">        //get the Yatracos set</span>
<a name="l01230"></a>01230 <span class="comment">        (*this).getSubPaving()-&gt;getYatSet(YatSetRow, YatSetCol, cand1, cand2);</span>
<a name="l01231"></a>01231 <span class="comment">        listYatSet.push_back(YatSetRow);</span>
<a name="l01232"></a>01232 <span class="comment">        listYatSet.push_back(YatSetCol);</span>
<a name="l01233"></a>01233 <span class="comment">        listYatSet.sort();</span>
<a name="l01234"></a>01234 <span class="comment">        listYatSet.unique();</span>
<a name="l01235"></a>01235 <span class="comment">      }</span>
<a name="l01236"></a>01236 <span class="comment">      </span>
<a name="l01237"></a>01237 <span class="comment">      if ( YatSetRow.empty() &amp;&amp; YatSetCol.empty() &amp;&amp; ScheffeSet.empty() ) { // check if it&#39;s empty</span>
<a name="l01238"></a>01238 <span class="comment">        cout &lt;&lt; &quot;No Scheffe/Yatracos set for this round. Bisect again.&quot; &lt;&lt; endl;</span>
<a name="l01239"></a>01239 <span class="comment">        size_t temp = ceil((cand2+cand1)/2.0);</span>
<a name="l01240"></a>01240 <span class="comment">      //  cout &lt;&lt; &quot;Potential candidate is: &quot; &lt;&lt; temp &lt;&lt; endl;</span>
<a name="l01241"></a>01241 <span class="comment">        if ( cand1 == temp || cand2 == temp ) {  </span>
<a name="l01242"></a>01242 <span class="comment">            cout &lt;&lt; &quot;cand1 == temp || cand2 == temp. Cannot compete &quot; &lt;&lt;</span>
<a name="l01243"></a>01243 <span class="comment">                  &quot;against ownself. Tournament ended.&quot; &lt;&lt; endl;</span>
<a name="l01244"></a>01244 <span class="comment">            break; </span>
<a name="l01245"></a>01245 <span class="comment">        } // to prevent repeating candidates</span>
<a name="l01246"></a>01246 <span class="comment">        else {</span>
<a name="l01247"></a>01247 <span class="comment">          cand2 = temp;</span>
<a name="l01248"></a>01248 <span class="comment">        //  cout &lt;&lt; &quot;New candidate is: &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01249"></a>01249 <span class="comment">        } </span>
<a name="l01250"></a>01250 <span class="comment">      }</span>
<a name="l01251"></a>01251 <span class="comment">      else {</span>
<a name="l01252"></a>01252 <span class="comment">        double deltaCand1, deltaCand2;</span>
<a name="l01253"></a>01253 <span class="comment">        if (method==1) {</span>
<a name="l01254"></a>01254 <span class="comment">          //get delta for cand1</span>
<a name="l01255"></a>01255 <span class="comment">          deltaCand1 = getNodesDelta(ScheffeSet, cand1);</span>
<a name="l01256"></a>01256 <span class="comment">          //get delta for cand2</span>
<a name="l01257"></a>01257 <span class="comment">          deltaCand2 = getNodesDelta(ScheffeSet, cand2);</span>
<a name="l01258"></a>01258 <span class="comment">        }</span>
<a name="l01259"></a>01259 <span class="comment">         else if (method==2) {          </span>
<a name="l01260"></a>01260 <span class="comment">          //get max delta for cand1       </span>
<a name="l01261"></a>01261 <span class="comment">        //  cout &lt;&lt; &quot;\nMaxDelta for &quot; &lt;&lt; cand1 &lt;&lt; endl;   </span>
<a name="l01262"></a>01262 <span class="comment">          deltaCand1 = getNodesMaxDelta(listYatSet, cand1);         </span>
<a name="l01263"></a>01263 <span class="comment">          //get max delta for cand2</span>
<a name="l01264"></a>01264 <span class="comment">        //  cout &lt;&lt; &quot;\nMaxDelta for &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01265"></a>01265 <span class="comment">          deltaCand2 = getNodesMaxDelta(listYatSet, cand2);</span>
<a name="l01266"></a>01266 <span class="comment">        }</span>
<a name="l01267"></a>01267 <span class="comment">                    </span>
<a name="l01268"></a>01268 <span class="comment">        //get the minimum of deltaCand1 and deltaCand2 along with the </span>
<a name="l01269"></a>01269 <span class="comment">        //corresponding theta that gave the minimum</span>
<a name="l01270"></a>01270 <span class="comment">        if ( deltaCand1 &lt; deltaCand2 ) { </span>
<a name="l01271"></a>01271 <span class="comment">          cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01272"></a>01272 <span class="comment">          cout &lt;&lt; deltaCand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaCand2 &lt;&lt; endl;</span>
<a name="l01273"></a>01273 <span class="comment">          cout &lt;&lt; &quot;Winner is &quot; &lt;&lt; cand1 &lt;&lt; endl;</span>
<a name="l01274"></a>01274 <span class="comment">          </span>
<a name="l01275"></a>01275 <span class="comment">          //put into containers</span>
<a name="l01276"></a>01276 <span class="comment">          winner.push_back(cand1);</span>
<a name="l01277"></a>01277 <span class="comment">          loser.push_back(cand2);</span>
<a name="l01278"></a>01278 <span class="comment">          deltaWinner.push_back(deltaCand1);</span>
<a name="l01279"></a>01279 <span class="comment">          deltaLoser.push_back(deltaCand2);</span>
<a name="l01280"></a>01280 <span class="comment">                          </span>
<a name="l01281"></a>01281 <span class="comment">          //winner = cand1 so change cand2</span>
<a name="l01282"></a>01282 <span class="comment">          size_t temp = ceil((cand2+cand1)/2.0);</span>
<a name="l01283"></a>01283 <span class="comment">        //  cout &lt;&lt; &quot;Potential candidate is: &quot; &lt;&lt; temp &lt;&lt; endl;</span>
<a name="l01284"></a>01284 <span class="comment">          if ( cand1 == temp || cand2 == temp ) { break; } // to prevent repeating candidates</span>
<a name="l01285"></a>01285 <span class="comment">          else {</span>
<a name="l01286"></a>01286 <span class="comment">            finalWinner = cand1;</span>
<a name="l01287"></a>01287 <span class="comment">            cand2 = temp;</span>
<a name="l01288"></a>01288 <span class="comment">        //    cout &lt;&lt; &quot;New candidate, cand2 is: &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01289"></a>01289 <span class="comment">          } </span>
<a name="l01290"></a>01290 <span class="comment">        }</span>
<a name="l01291"></a>01291 <span class="comment">        else if ( deltaCand2 &lt; deltaCand1 ) { </span>
<a name="l01292"></a>01292 <span class="comment">          cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01293"></a>01293 <span class="comment">          cout &lt;&lt; deltaCand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaCand2 &lt;&lt; endl;</span>
<a name="l01294"></a>01294 <span class="comment">          cout &lt;&lt; &quot;Winner is &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01295"></a>01295 <span class="comment">          </span>
<a name="l01296"></a>01296 <span class="comment">          //put into containers</span>
<a name="l01297"></a>01297 <span class="comment">          winner.push_back(cand2);</span>
<a name="l01298"></a>01298 <span class="comment">          loser.push_back(cand1);</span>
<a name="l01299"></a>01299 <span class="comment">          deltaWinner.push_back(deltaCand2);</span>
<a name="l01300"></a>01300 <span class="comment">          deltaLoser.push_back(deltaCand1);                   </span>
<a name="l01301"></a>01301 <span class="comment">          </span>
<a name="l01302"></a>01302 <span class="comment">          //winner = cand2 so change cand1</span>
<a name="l01303"></a>01303 <span class="comment">          size_t temp = ceil((cand2+cand1)/2.0);</span>
<a name="l01304"></a>01304 <span class="comment">        //   cout &lt;&lt; &quot;Potential candidate is: &quot; &lt;&lt; temp &lt;&lt; endl;</span>
<a name="l01305"></a>01305 <span class="comment">          if ( cand1 == temp || cand2 == temp ) { break; } // to prevent repeating candidates</span>
<a name="l01306"></a>01306 <span class="comment">          else {</span>
<a name="l01307"></a>01307 <span class="comment">            cand1 = cand2; //let cand1 be the winner</span>
<a name="l01308"></a>01308 <span class="comment">            cand2 = temp;  //let cand2 be the updated candidate</span>
<a name="l01309"></a>01309 <span class="comment">            finalWinner = cand1;            </span>
<a name="l01310"></a>01310 <span class="comment">        //    cout &lt;&lt; &quot;New candidate is: &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01311"></a>01311 <span class="comment">          } </span>
<a name="l01312"></a>01312 <span class="comment">        }</span>
<a name="l01313"></a>01313 <span class="comment">        //maybe can use this as stopping criteria</span>
<a name="l01314"></a>01314 <span class="comment">        else {</span>
<a name="l01315"></a>01315 <span class="comment">          cout &lt;&lt; &quot;Both deltas are the same.&quot; &lt;&lt; endl;</span>
<a name="l01316"></a>01316 <span class="comment">          //bisect again</span>
<a name="l01317"></a>01317 <span class="comment">          size_t temp = ceil((cand2+cand1)/2.0);</span>
<a name="l01318"></a>01318 <span class="comment">        //  cout &lt;&lt; &quot;Potential candidate is: &quot; &lt;&lt; temp &lt;&lt; endl;</span>
<a name="l01319"></a>01319 <span class="comment">          if ( cand1 == temp || cand2 == temp ) {  </span>
<a name="l01320"></a>01320 <span class="comment">            cout &lt;&lt; &quot;cand1 == temp || cand2 == temp. Cannot compete &quot; &lt;&lt;</span>
<a name="l01321"></a>01321 <span class="comment">                  &quot;against ownself. Tournament ended.&quot; &lt;&lt; endl;</span>
<a name="l01322"></a>01322 <span class="comment">            break;</span>
<a name="l01323"></a>01323 <span class="comment">          } // to prevent repeating candidates</span>
<a name="l01324"></a>01324 <span class="comment">          else {          </span>
<a name="l01325"></a>01325 <span class="comment">            //cand1 should be the one with the smallest index (break ties by taking the smallest index)         </span>
<a name="l01326"></a>01326 <span class="comment">            if ( cand1 &gt; cand2) { cand1 = cand2; }          </span>
<a name="l01327"></a>01327 <span class="comment">            cand2 = temp;</span>
<a name="l01328"></a>01328 <span class="comment">        //      cout &lt;&lt; &quot;New candidate is: &quot; &lt;&lt; cand2 &lt;&lt; endl;        </span>
<a name="l01329"></a>01329 <span class="comment">          } </span>
<a name="l01330"></a>01330 <span class="comment">        }    </span>
<a name="l01331"></a>01331 <span class="comment">      } // end of if Yatracos set not empty</span>
<a name="l01332"></a>01332 <span class="comment">    } // end of cand1 != cand2</span>
<a name="l01333"></a>01333 <span class="comment">  } // end of while loop</span>
<a name="l01334"></a>01334 <span class="comment">}</span>
<a name="l01335"></a>01335 <span class="comment">*/</span>
<a name="l01336"></a>01336 
<a name="l01337"></a>01337 <span class="comment">//make minimal sub-pavings</span>
<a name="l01338"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">01338</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">AdaptiveHistogramVCollator::makeMinimal</a>()
<a name="l01339"></a>01339 {
<a name="l01340"></a>01340   <span class="keywordflow">try</span> {
<a name="l01341"></a>01341       rootVCollator-&gt;nodesReunite();    
<a name="l01342"></a>01342    }
<a name="l01343"></a>01343    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01344"></a>01344         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01345"></a>01345         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
<a name="l01346"></a>01346                                             + oldmsg;
<a name="l01347"></a>01347         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01348"></a>01348     }
<a name="l01349"></a>01349     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01350"></a>01350         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01351"></a>01351         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l01352"></a>01352         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01353"></a>01353     }
<a name="l01354"></a>01354     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01355"></a>01355         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01356"></a>01356         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l01357"></a>01357         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01358"></a>01358     }
<a name="l01359"></a>01359     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01360"></a>01360         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01361"></a>01361         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l01362"></a>01362         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01363"></a>01363     }
<a name="l01364"></a>01364 }
<a name="l01365"></a>01365      
<a name="l01366"></a>01366    <span class="comment">// Get a string of the leaf node levels.</span>
<a name="l01367"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a503d9bbe2f7854466570bad4fd2d0d42">01367</a>     std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a503d9bbe2f7854466570bad4fd2d0d42" title="get leaf levels string">AdaptiveHistogramVCollator::getLeafLevelsString</a>()<span class="keyword"> const</span>
<a name="l01368"></a>01368 <span class="keyword">   </span>{
<a name="l01369"></a>01369     <span class="keywordtype">string</span> retValue = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01370"></a>01370     <span class="keywordflow">if</span> (NULL != rootVCollator)
<a name="l01371"></a>01371         retValue = rootVCollator-&gt;getLeafNodeLevelsString();
<a name="l01372"></a>01372 
<a name="l01373"></a>01373     <span class="keywordflow">return</span> retValue;
<a name="l01374"></a>01374   }
<a name="l01375"></a>01375 
<a name="l01376"></a>01376   <span class="comment">//get total number of nodes</span>
<a name="l01377"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">01377</a>   <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">AdaptiveHistogramVCollator::getTotalNodes</a>()
<a name="l01378"></a>01378   {
<a name="l01379"></a>01379     <span class="keywordtype">size_t</span> numNodes = 0;
<a name="l01380"></a>01380     <span class="keywordflow">if</span> (NULL != rootVCollator)
<a name="l01381"></a>01381         numNodes = <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(rootVCollator);
<a name="l01382"></a>01382     
<a name="l01383"></a>01383     <span class="keywordflow">return</span> numNodes;
<a name="l01384"></a>01384   }
<a name="l01385"></a>01385 
<a name="l01386"></a>01386 
<a name="l01387"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a130f3418c9610b38030221924a846011">01387</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a130f3418c9610b38030221924a846011">AdaptiveHistogramVCollator::getMinDistEst</a>(vector&lt;double&gt; &amp; maxDelta,   vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecYatSet)
<a name="l01388"></a>01388 {
<a name="l01389"></a>01389   <span class="comment">//get the yatracos class for ALL the candidates</span>
<a name="l01390"></a>01390   getHistYatSet(vecYatSet); 
<a name="l01391"></a>01391   
<a name="l01392"></a>01392   <span class="comment">//get the maximum delta at each &quot;theta&quot; - here theta refers to the position of the</span>
<a name="l01393"></a>01393   <span class="comment">//candidate in the collator</span>
<a name="l01394"></a>01394   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; getNumberCollated(); i++) {
<a name="l01395"></a>01395     <span class="comment">//get the maximum delta at this candidate</span>
<a name="l01396"></a>01396     <span class="keywordtype">double</span> deltaMax = getNodesMaxDelta(vecYatSet, i);
<a name="l01397"></a>01397     maxDelta.push_back(deltaMax);
<a name="l01398"></a>01398   }
<a name="l01399"></a>01399 
<a name="l01400"></a>01400 }
<a name="l01401"></a>01401   
<a name="l01402"></a>01402 <span class="comment">// ---------- end implementation of AdaptiveHistogramVCollators -----------</span>
<a name="l01403"></a>01403 
<a name="l01404"></a>01404 <span class="comment">//Output all boxes in AdaptiveHistogramVCollator adhc</span>
<a name="l01405"></a><a class="code" href="adaptivehistogramvcollator_8hpp.shtml#aa95682245eddbfef1ca00e65bba76e61">01405</a> std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l01406"></a>01406                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; adhc)
<a name="l01407"></a>01407 {
<a name="l01408"></a>01408     <span class="keywordflow">if</span> (NULL != adhc.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">getSubPaving</a>()) {
<a name="l01409"></a>01409         os &lt;&lt; (adhc.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">getSubPaving</a>())-&gt;nodesAllOutput(os, 1) &lt;&lt; std::endl;
<a name="l01410"></a>01410     }
<a name="l01411"></a>01411 
<a name="l01412"></a>01412     <span class="keywordflow">return</span> os;
<a name="l01413"></a>01413 }
<a name="l01414"></a>01414 
<a name="l01415"></a>01415     <span class="comment">// function for for_each algorithm</span>
<a name="l01416"></a><a class="code" href="adaptivehistogramvcollator_8hpp.shtml#af83155cd50512e4cbad3f931370478ee">01416</a>     <span class="keywordtype">double</span> <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#af83155cd50512e4cbad3f931370478ee" title="Find if double is negative.">isNegative</a>(<span class="keywordtype">double</span> d)
<a name="l01417"></a>01417     {
<a name="l01418"></a>01418         <span class="keywordflow">return</span> (d&lt;0.0);
<a name="l01419"></a>01419     }
<a name="l01420"></a>01420 
<a name="l01421"></a>01421 
<a name="l01422"></a>01422    <span class="comment">//output all boxes in collator to text file</span>
<a name="l01423"></a><a class="code" href="adaptivehistogramvcollator_8hpp.shtml#a86c8969687067aefde2c68c806c3bf28">01423</a>    <span class="keywordtype">void</span> <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#a39dfa308727bd7dc5fcd538fa199ca49" title="Output all boxes in collator to text file.">outputAllNodesToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; adhc) 
<a name="l01424"></a>01424    {
<a name="l01425"></a>01425     <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l01426"></a>01426     ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l01427"></a>01427 
<a name="l01428"></a>01428     adhc.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, 1);
<a name="l01429"></a>01429     std::cout &lt;&lt; <span class="stringliteral">&quot;The output of ALL the nodes of the AdaptiveHistogramVCollator has been &quot;</span>
<a name="l01430"></a>01430         &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l01431"></a>01431     }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogramvcollator_8cpp.shtml">adaptivehistogramvcollator.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
