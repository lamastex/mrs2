<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1AdaptiveHistogram.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::AdaptiveHistogram Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a40e81bf270e245055b487e3f9fa28a7f">AdaptiveHistogram</a>(SPSnode *spn, bool as)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [explicit, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e">AdaptiveHistogram</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8155be0403adb23fe8c4232f95eb47f6">AdaptiveHistogram</a>(bool as)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a54d9dd37b5a2d71ee4e94f2154140b44">AdaptiveHistogram</a>(ivector &amp;v, bool as=false)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a512fa91574e1dbb992a6edcb77bf56c1">AdaptiveHistogram</a>(const AdaptiveHistogram &amp;other)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2e95f7f1a9dab963a28a7d3a655e0e8f">changeMCMCState</a>(SPSnodeList &amp;nodes, size_t &amp;numLeaves, size_t &amp;numCherries, MCMCProposal &amp;proposal, LogMCMCPrior &amp;logPrior, size_t minPoints, gsl_rng *rgsl, LOGGING_LEVEL logging, std::string s, int i)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4ff31f6b6d944c0c1e71ae4e7586cc2a">changeStateForMerge</a>(SPSnode *target, SPSnodeList &amp;nodes, size_t &amp;numLeaves, size_t &amp;numCherries, size_t minPoints)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1544712de53718450f5f13fee5738a92">changeStateForSplit</a>(SPSnode *target, SPSnodeList &amp;nodes, size_t &amp;numLeaves, size_t &amp;numCherries, size_t minPoints)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a">checkNodeCountForSplit</a>(const SPSnode *const spn, bool volChecking, double minVol, size_t minChildPoints)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a438e2252f954f0556fa2bd7c2e105dbe">checkStopCrit</a>(double StopCritCurrent, double StopCritPrevious, int &amp;Prev)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7">completeDataInsertionFromVec</a>(const RVecData &amp;theData, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59">creationString</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214">dataCollection</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae2df56ec733843dffcc6af094637758d">decisionMCMCMerge</a>(SPSnode *target, const MCMCProposal &amp;proposal, const LogMCMCPrior &amp;logPrior, gsl_rng *rgsl, size_t numLeaves, size_t numCherries, size_t minPoints, LOGGING_LEVEL logging, const std::string &amp;s, int i) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a89aa9c37916fcac47cf273f512bca019">decisionMCMCSplit</a>(SPSnode *target, const MCMCProposal &amp;proposal, const LogMCMCPrior &amp;logPrior, gsl_rng *rgsl, size_t numLeaves, size_t numCherries, size_t minPoints, LOGGING_LEVEL logging, const std::string &amp;s, int i) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa0b81dd06668d2ce34e3fe983a2a2913">findDensityRegion</a>(double cov, double weightPM, vector&lt; SPSnode * &gt; &amp;covNodes, string covFileName)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">get2DIAE</a>(taylor::dim2taylor(*testpnt)(taylor::dim2taylor_vector, interval))</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b">getEMPScoreAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec">getEMPScoreCOPERR</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">getEstLogLikelihoodFromRSSample</a>(RSSample &amp;labSampledData, double dx, double wt)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca5143d5da261357d7f8d7eec45d1a5c">getEstLogLikelihoodFromRSSample</a>(RSSample &amp;labSampledData, double dx, double wt, double WeightHist, std::map&lt; rvector, double, std::less&lt; rvector &gt; &gt; &amp;WeightsPM)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a368e5e9ed8cf0a3e82b30291c4a54d24">getFinMixIAE</a>(FinMix &amp;mixt)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(FinMix &amp;mixt, double tol, int deg)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1">getHoldAllStats</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">getIAE</a>(int distr)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#adc2a97bb7f8fc3c543f90ba876515ca1">getLabel</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(double tol, int deg)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaffb116a24a6de03482a8bfd9625b07f">getLeafCounts</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a70f9af80f0ee875d6dcbfd4cafb53813">getLeafLevels</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(double tol, int deg)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f">getMinVol</a>(double minVolB) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765">getPENValue</a>(const PenObj &amp;pen, int deltaLeaf=0) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc">getRootBox</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11">getRootCounter</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35">getRootLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91">getRootPavingMean</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f">getRootPavingVarCovar</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ac7f7cb4d5aea17c967afec84e1159f9b">getRootSumLeafCountOverVol</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3">getScoreAIC</a>(const PenObj &amp;pen, bool verbose=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad">getScoreCOPERR</a>(const PenObj &amp;pen, bool verbose=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb">getSubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">getUnifIAE</a>(AdaptiveHistogram &amp;myPart, double weight, std::vector&lt; int &gt; holesLoc)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">getUnifIAE</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784">hasSubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab5d45e2f1966bd43a7bb8bf041ea29db">haveMadePaving</a>(const RVecData &amp;theData, const size_t dim)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17">holdAllStats</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0eaca3eebf10b3d251ed284f0317c593">insertDataFromContainer</a>(const RVecData &amp;theData, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3705758c35dbfe8745a2e34c83b7f619">insertDoublesFromTxt</a>(const std::string &amp;s, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3e03076ea91599538bcc69f47084f649">insertDoublesFromTxt</a>(const std::string &amp;s, const SplitDecisionObj &amp;boolTest, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(const RSSample &amp;rss, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a20ee07940112174415c391b4ed385ba1">insertFromRSSample</a>(const RSSample &amp;rss, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(const RVecData &amp;rvec, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b8604eb7b87dd03d09736a2f9e4b96a">insertFromRVec</a>(const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aafef86d6e4482aef11de75b83cfb4345">insertOne</a>(rvector newdata, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">insertOneDimDataFromTxt</a>(const std::string &amp;s, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aef10187eeb8d449b8692c355960aefe0">insertOneDimDataFromTxt</a>(const std::string &amp;s, const SplitDecisionObj &amp;boolTest, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(const std::string &amp;s, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5decf91161cbddd77c21e3b25dd12689">insertRvectorsFromTxt</a>(const std::string &amp;s, const SplitDecisionObj &amp;boolTest, const std::size_t headerlines=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(size_t samplesize, gsl_rng *rgsl, const RSSample &amp;rss, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab41e19cc570fa35d9c867413a7398edc">insertSampleFromRSSample</a>(size_t samplesize, int seed, const RSSample &amp;rss, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a9468b46a614470017cc09cadd7699af8">insertSampleFromRSSample</a>(size_t samplesize, const RSSample &amp;rss, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad002844c2b0ef25eeb5fbc845fd8a000">insertSampleFromRSSample</a>(size_t samplesize, gsl_rng *rgsl, const RSSample &amp;rss, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8437c7aa645e4edc21a5bc4ec02db5ef">insertSampleFromRSSample</a>(size_t samplesize, int seed, const RSSample &amp;rss, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a78dd377090622826dd80734395fba635">insertSampleFromRSSample</a>(size_t samplesize, const RSSample &amp;rss, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging, int label=0)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(size_t samplesize, gsl_rng *rgsl, const RVecData &amp;rvec, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a754142aca6681e39debd7167146a7e1c">insertSampleFromRVec</a>(size_t samplesize, int seed, const RVecData &amp;rvec, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aeca515a5f969a1f368ba1fe0390aa047">insertSampleFromRVec</a>(size_t samplesize, const RVecData &amp;rvec, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2f6d7ee0d83ea148f57543f64905170d">insertSampleFromRVec</a>(size_t samplesize, gsl_rng *rgsl, const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8db299e8725f5170475a4c77524140dc">insertSampleFromRVec</a>(size_t samplesize, int seed, const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab889a33f8caa8fb44836f756c0be342d">insertSampleFromRVec</a>(size_t samplesize, const RVecData &amp;rvec, const SplitDecisionObj &amp;boolTest, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350">logMCMCDeltas</a>(std::string s, int i, real deltaL, real deltaP, real deltaQ, real deltaPi, double randChange)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e40497a24ce0807235196e17ca21456">makeBox</a>(const RVecData &amp;theData, const size_t dim)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4">makeEmpty</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a733cc04938b2236087cbbe0384985c3d">MCMC</a>(unsigned int loops, unsigned int burnin, unsigned int thinout, MCMCProposal &amp;proposal, LogMCMCPrior &amp;logPrior, size_t minPoints=0, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a10fc830a1dd32fe83aa3846a6fb2af35">MCMCLogFinalState</a>(std::string s, int i)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9">MCMCsamples</a>(std::vector&lt; AdaptiveHistogram &gt; &amp;samples, unsigned int loops, unsigned int burnin, unsigned int thinout, MCMCProposal &amp;proposal, LogMCMCPrior &amp;logPrior, size_t minPoints, LOGGING_LEVEL logging)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#adf589f52a0cd3e2371c288aa6bca7d37">MCMCStartLogFile</a>(std::string s, int i, const MCMCProposal &amp;proposal, const LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a745b6edb93463e227edb9c9aa1dcb505">mergeUp</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a962f179df0a65d5f179930d00e65b70e">operator+</a>(const AdaptiveHistogram &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3adb7a4fce51ec497ef30dea633249fd">operator=</a>(const AdaptiveHistogram &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f">outputLog</a>(const std::string &amp;s, const int i) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9">outputLogEMPAIC</a>(const std::string &amp;s) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879">outputLogEMPCOPERR</a>(const std::string &amp;s) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa73a46279c3f591d298a0180d99723a5">outputLogPlain</a>(const std::string &amp;s, const int i) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b">outputLogStart</a>(const std::string &amp;s) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e7d34aea502906cb2230c0732d752b3">outputMCMCStateSample</a>(int i)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a35416eefb965755a846e1bb64c882439">outputRootToTxt</a>(const std::string &amp;s, bool confirm=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106">outputToTxtTabs</a>(const std::string &amp;s, bool confirm=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290">outputToTxtTabsWithEMPs</a>(const std::string &amp;s, bool confirm=false) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09">padding</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712">priorityMerge</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging=NOLOG)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a123e69c185cb450a05ecdc7101c71548">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a04219b243723859e2939216181cbaddc">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab28cddbe199adccec104b223f8848712">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aea0d424449b7d93babef81d49bbbdb70">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, gsl_rng *rgsl, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad6a946d5c729b0f49d78962680d5d659">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a630b400683794cd527173b18eb126f84">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, gsl_rng *rgsl, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2154185722cd1d4f61f65c7d84d77f2b">prioritySplit</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab3416e49bbb37e982e2e2f6a1ef13850">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3eab9e09fee0aa81bd19bf170cf23aea">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#afee0931f38335b1d797680a0c9b6cfe5">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#af4e1c9c71ca8835f8ee3a78204f63d49">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a761f68d3b8f183d4fda926732fda70f9">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8654a1a779b1c0e6d0dcec82f436efd6">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a36a5db0649767e9045cf985f52f985ca">prioritySplitGet</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; AdaptiveHistogram &gt; &amp;States, std::vector&lt; size_t &gt; &amp;Sampled)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a024499e93cb4ca592c78b860d09cef79">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c890ee5d86fc4cfd45c0ea2667b4a4f">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab4acf5596236ac6fa272cb3abe80bee8">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab38788117602e87f4e53a72b6c62747a">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8e2052a043fc9969084719da4338678">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#af6cd725ab063a5c3af80d42315d99ddc">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5e8e56baf547e75fe1701b455fa92efb">prioritySplitMCMC</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, std::vector&lt; real &gt; &amp;Posterior, LogMCMCPrior &amp;logPrior)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0cd2e3af29feaad65d4a0a36738dcc15">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39ff221f6d3dad036ba6d4f5ec0ae819">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa1b1ab0c522e46bc4bd0ab45547dea6b">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5299ade7c1d409621b2204a1986dabd8">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, gsl_rng *rgsl, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2ae1c64a519c1d5f32f81d39210b738">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#af9317b285f9a4f2753b1c9099347fe6f">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, gsl_rng *rgsl, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6eb39e1e4524e415b8eff1ba4a4fc4b0">prioritySplitWithSwitches</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, int removeBox)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c7ccb75b629b131c7a448579386c6a9">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a435e13db001d1b919489507b81cb49ad">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7e68baa3f16fafe3774df1f570aadcc">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae80f3d62957c9c70a2b7eed4b1e11810">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, gsl_rng *rgsl, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a508b13326647eaa46806ca7999d303f2">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a39888154b396a7eb5fd6be1ff200a414">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, gsl_rng *rgsl, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#acab027b9f4718b0ba077b142375a05cb">prioritySplitWithTotalVar</a>(const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, LOGGING_LEVEL logging, size_t minChildPoints, double minVolB, gsl_rng *rgsl, size_t maxLeafNodes, int StopVal, std::vector&lt; AdaptiveHistogram &gt; &amp;HistAtValley, int simNum)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7f23176e9afea24c51c6a37cbcc4b0a">proposeChangeMCMCState</a>(const MCMCProposal &amp;proposal, SPSnodeList &amp;nodes, size_t numLeaves, size_t numCherries, gsl_rng *rgsl, bool &amp;haveNode)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#af41faeb2742df1aaa5108f17dee54d71">publicLogMCMCSample</a>(std::string s, int i)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0163eb023d0db24e0d91864a38acd562">publicOutputMCMCStateSample</a>(int ci, int i, bool confirm=false)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa">recalcScaledEMPSumAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9">recalcScaledEMPSumCOPERR</a>() const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e">reshapeToUnion</a>(const PiecewiseConstantFunction &amp;other)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a9e30e2969e3ad675b8659470200219d4">reshapeToUnion</a>(const PiecewiseConstantFunction &amp;other, size_t minChildPoints)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6">rootBox</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a">rootPaving</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89">scaledEMPSumAIC</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [mutable, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96">scaledEMPSumCOPERR</a></td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [mutable, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676">splitToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47">swap</a>(AdaptiveHistogram &amp;adh)</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a79fe01c35fba2bbdb1df5e8eb1d3a78b">updateScaledEMPSumAIC</a>(dotprecision change) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71122bfe1d3dfad1f2b55585326334ac">updateScaledEMPSumCOPERR</a>(dotprecision change) const </td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa11b3ed173c858fec6234c7e0b9d9829">~AdaptiveHistogram</a>()</td><td><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">subpavings::AdaptiveHistogram</a></td><td></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:31 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
