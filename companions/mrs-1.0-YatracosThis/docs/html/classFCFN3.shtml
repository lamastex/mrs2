<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FCFN3 Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classFCFN3.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">FCFN3 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="FCFN3" --><!-- doxytag: inherits="Fobj" -->
<p>1,2,3-trans-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class  
 <a href="classFCFN3.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for FCFN3:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFCFN3__inherit__graph.png" border="0" usemap="#FCFN3_inherit__map" alt="Inheritance graph"/></div>
<map name="FCFN3_inherit__map" id="FCFN3_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for FCFN3:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFCFN3__coll__graph.png" border="0" usemap="#FCFN3_coll__map" alt="Collaboration graph"/></div>
<map name="FCFN3_coll__map" id="FCFN3_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classFCFN3-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ae05483641a5893ee95d3158343cf9259">FCFN3</a> (int <a class="el" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884">Cxxx</a>, int <a class="el" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0">Cxxy</a>, int <a class="el" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538">Cyxx</a>, int <a class="el" href="classFCFN3.shtml#a60144493a83a2555c774cf7dfa4c9ec0">Cxyx</a>, interval Domain, bool LogPi, int Prior)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A constructor.  <a href="#ae05483641a5893ee95d3158343cf9259"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#aec0a3534e5961954300b910f7a7401da">operator()</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;X) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">interval function object  <a href="#aec0a3534e5961954300b910f7a7401da"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a922aacaa4b75d80ef6a08ae3243e63fc">operator()</a> (const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;X) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">real function object  <a href="#a922aacaa4b75d80ef6a08ae3243e63fc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ae16fa2a68755b135ac0d4f9faea41b20">LabBoxVolume</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Volume of rooted tree boxes is implemented here and NOT inherited from <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>.  <a href="#ae16fa2a68755b135ac0d4f9faea41b20"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#acfca28a02e2f9dbcf8ff115a8bb4f262">get_interval_calls</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of interval function calls.  <a href="#acfca28a02e2f9dbcf8ff115a8bb4f262"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#acc6f4fb7f07f280fe124499e9c5062ab">get_real_calls</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of real function calls.  <a href="#acc6f4fb7f07f280fe124499e9c5062ab"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884">Cxxx</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Count of sites with pattern xxx (minimal suffcient stats)  <a href="#a70ede8e738b72b8bea0ba6eb5e44e884"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0">Cxxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Count of sites with pattern xxy (minimal suffcient stats)  <a href="#a1a5c9deec90452588e2f57f5291881b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538">Cyxx</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Count of sites with pattern yxx (minimal suffcient stats)  <a href="#a4e3aae643d4c68030d916df7ac71b538"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a60144493a83a2555c774cf7dfa4c9ec0">Cxyx</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ad9e40b33eda0764e3a289dd6be269be3">Cid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cid = count of invariant sites (minimal suffcient stats for star tree)  <a href="#ad9e40b33eda0764e3a289dd6be269be3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a8ef5d6f9df7caa72a6dd86d65c22eb3c">Cnid</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cnid = count of variant sites (minimal suffcient stats for star tree)  <a href="#a8ef5d6f9df7caa72a6dd86d65c22eb3c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a7555e90b5424a3989f51e1afbb76a36e">f0</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fraction of invariant sites, f0 := Cid/(Cid+Cnid)  <a href="#a7555e90b5424a3989f51e1afbb76a36e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ae3655e04a444781c13aac711f1672785">fxxx</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fraction of sites with pattern xxx, Cxxx/TotSites.  <a href="#ae3655e04a444781c13aac711f1672785"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a28619051be14083932e8c9f8018543d5">fxxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fraction of sites with pattern xxy, Cxxy/TotSites.  <a href="#a28619051be14083932e8c9f8018543d5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#af6590c09108db59f2d7116837fb68917">fyxx</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fraction of sites with pattern yxx, Cyxx/TotSites.  <a href="#af6590c09108db59f2d7116837fb68917"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a59030dc1b324e8dd4f236b97d78d69cd">fxyx</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Fraction of sites with pattern xyx, Cxyx/TotSites.  <a href="#a59030dc1b324e8dd4f236b97d78d69cd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ac61db05a36bdc21a29f38afed405c188">TotSites</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00">PositiveProbInterval</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Representable interval without complete interval arithmetic.  <a href="#a53e77ef0b53f0fea50abd6e87f8a1c00"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; real &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a50eac3a5d427bffc05f729ff3375a0ca">vol_labelled_domain</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Volume of each labelled domain box.  <a href="#a50eac3a5d427bffc05f729ff3375a0ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#ac37ffd255223c75b83ea8805c9ca314d">n_interval_calls</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Track number of interval function calls.  <a href="#ac37ffd255223c75b83ea8805c9ca314d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFCFN3.shtml#a6af9c2e333d52639535dc61516f8f984">n_real_calls</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Track number of real function calls.  <a href="#a6af9c2e333d52639535dc61516f8f984"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>1,2,3-trans-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00182">182</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae05483641a5893ee95d3158343cf9259"></a><!-- doxytag: member="FCFN3::FCFN3" ref="ae05483641a5893ee95d3158343cf9259" args="(int Cxxx, int Cxxy, int Cyxx, int Cxyx, interval Domain, bool LogPi, int Prior)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classFCFN3.shtml#ae05483641a5893ee95d3158343cf9259">FCFN3::FCFN3</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Cxxx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Cxxy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Cyxx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Cxyx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interval&#160;</td>
          <td class="paramname"><em>Domain</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>LogPi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Prior</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A constructor. </p>
<p>replace vol_labelled_domain with integral of prior over labelled domain use LabDomainPriorIntegralList</p>
<p>For each topology label, Sampling domain is a rectangle with sides given by the interval Domain</p>

<p>Definition at line <a class="el" href="FCFN3_8cpp_source.shtml#l00395">395</a> of file <a class="el" href="FCFN3_8cpp_source.shtml">FCFN3.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00189">Cid</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00191">Cnid</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00184">Cxxx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00185">Cxxy</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00187">Cxyx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00186">Cyxx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00193">fxxx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00194">fxxy</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00196">fxyx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00195">fyxx</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00052">Fobj::LabDomainList</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00055">Fobj::LabDomainPriorIntegralList</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00203">n_interval_calls</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00205">n_real_calls</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00199">PositiveProbInterval</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00058">Fobj::PriorType</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00101">Fobj::SetupLabDomainPriorIntegralList()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00190">Fobj::setUsingLogDensity()</a>.</p>
<div class="fragment"><pre class="fragment">:
                    <span class="comment">// , PriorType(Prior)</span>
<a class="code" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884" title="Count of sites with pattern xxx (minimal suffcient stats)">Cxxx</a> (Countxxx), <a class="code" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0" title="Count of sites with pattern xxy (minimal suffcient stats)">Cxxy</a> (Countxxy), <a class="code" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538" title="Count of sites with pattern yxx (minimal suffcient stats)">Cyxx</a> (Countyxx), <a class="code" href="classFCFN3.shtml#a60144493a83a2555c774cf7dfa4c9ec0">Cxyx</a> (Countxyx)
{
  <a class="code" href="classFCFN3.shtml#ac37ffd255223c75b83ea8805c9ca314d" title="Track number of interval function calls.">n_interval_calls</a> = 0;
  <a class="code" href="classFCFN3.shtml#a6af9c2e333d52639535dc61516f8f984" title="Track number of real function calls.">n_real_calls</a> = 0;
  <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
  <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;
  <a class="code" href="classFCFN3.shtml#ad9e40b33eda0764e3a289dd6be269be3" title="Cid = count of invariant sites (minimal suffcient stats for star tree)">Cid</a>=<a class="code" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884" title="Count of sites with pattern xxx (minimal suffcient stats)">Cxxx</a>;
  <a class="code" href="classFCFN3.shtml#a8ef5d6f9df7caa72a6dd86d65c22eb3c" title="Cnid = count of variant sites (minimal suffcient stats for star tree)">Cnid</a>=<a class="code" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0" title="Count of sites with pattern xxy (minimal suffcient stats)">Cxxy</a> + <a class="code" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538" title="Count of sites with pattern yxx (minimal suffcient stats)">Cyxx</a> + <a class="code" href="classFCFN3.shtml#a60144493a83a2555c774cf7dfa4c9ec0">Cxyx</a>;
  <span class="comment">// TotSites = real(Cxxx + Cxxy + Cyxx + Cxyx);</span>
  Inf(<a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>)=1.e-300;
  Sup(<a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>)=1.0;
  <span class="comment">// f0 = real(Cid)// /TotSites;</span>
  <a class="code" href="classFCFN3.shtml#ae3655e04a444781c13aac711f1672785" title="Fraction of sites with pattern xxx, Cxxx/TotSites.">fxxx</a> = real(<a class="code" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884" title="Count of sites with pattern xxx (minimal suffcient stats)">Cxxx</a>);<span class="comment">// /TotSites;</span>
  <a class="code" href="classFCFN3.shtml#a28619051be14083932e8c9f8018543d5" title="Fraction of sites with pattern xxy, Cxxy/TotSites.">fxxy</a> = real(<a class="code" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0" title="Count of sites with pattern xxy (minimal suffcient stats)">Cxxy</a>);<span class="comment">// /TotSites;</span>
  <a class="code" href="classFCFN3.shtml#af6590c09108db59f2d7116837fb68917" title="Fraction of sites with pattern yxx, Cyxx/TotSites.">fyxx</a> = real(<a class="code" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538" title="Count of sites with pattern yxx (minimal suffcient stats)">Cyxx</a>);<span class="comment">// /TotSites;</span>
  <a class="code" href="classFCFN3.shtml#a59030dc1b324e8dd4f236b97d78d69cd" title="Fraction of sites with pattern xyx, Cxyx/TotSites.">fxyx</a> = real(Cxyx);<span class="comment">// /TotSites;</span>
  <span class="keyword">const</span> <span class="keywordtype">int</span> n_dimensions_of_label[] = {1,2,2,2,3};
  <span class="comment">//  vol_labelled_domain.reserve(5);</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> TopLab = 0; TopLab &lt; 5; TopLab++)
  {
    ivector domain (1, n_dimensions_of_label[TopLab]);
    <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain; 
    <span class="comment">//   vol_labelled_domain[TopLab]=1.0;</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n_dimensions_of_label[TopLab]; i++)
    {
      domain[i] = Domain;
      <span class="comment">//   vol_labelled_domain[TopLab] *= diam(Domain);</span>
    }
    Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
    Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = TopLab;
    <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
  }
  <span class="comment">// PriorType = 1; // 0 -&gt; uniform prior, otherwise exponential</span>
  <a class="code" href="classFobj.shtml#a8e3160c380ff77e60fd90c9d5f608fd1" title="set up the prior integral over the list of labeled domain boxes">SetupLabDomainPriorIntegralList</a>();
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;5; i++)
  {
    cout &lt;&lt; <span class="stringliteral">&quot;label, domain vol1,2: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> 
         &lt;&lt; <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>[i] &lt;&lt; endl;
  }

}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="acfca28a02e2f9dbcf8ff115a8bb4f262"></a><!-- doxytag: member="FCFN3::get_interval_calls" ref="acfca28a02e2f9dbcf8ff115a8bb4f262" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#acfca28a02e2f9dbcf8ff115a8bb4f262">FCFN3::get_interval_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of interval function calls. </p>

<p>Implements <a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00221">221</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>References <a class="el" href="FCFN3_8hpp_source.shtml#l00203">n_interval_calls</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFCFN3.shtml#ac37ffd255223c75b83ea8805c9ca314d" title="Track number of interval function calls.">n_interval_calls</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="acc6f4fb7f07f280fe124499e9c5062ab"></a><!-- doxytag: member="FCFN3::get_real_calls" ref="acc6f4fb7f07f280fe124499e9c5062ab" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#acc6f4fb7f07f280fe124499e9c5062ab">FCFN3::get_real_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of real function calls. </p>

<p>Implements <a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00226">226</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>References <a class="el" href="FCFN3_8hpp_source.shtml#l00205">n_real_calls</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFCFN3.shtml#a6af9c2e333d52639535dc61516f8f984" title="Track number of real function calls.">n_real_calls</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ae16fa2a68755b135ac0d4f9faea41b20"></a><!-- doxytag: member="FCFN3::LabBoxVolume" ref="ae16fa2a68755b135ac0d4f9faea41b20" args="(const LabBox &amp;LB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#ae16fa2a68755b135ac0d4f9faea41b20">FCFN3::LabBoxVolume</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Volume of rooted tree boxes is implemented here and NOT inherited from <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>. </p>
<p>Volume of rooted tree boxes specialised in our embedding (implemented and NOT inherited) </p>

<p>Implements <a class="el" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FCFN3_8cpp_source.shtml#l00448">448</a> of file <a class="el" href="FCFN3_8cpp_source.shtml">FCFN3.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span>(LB.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>==0) <span class="keywordflow">return</span> diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1]);
  <span class="keywordflow">else</span> <span class="keywordflow">if</span>(LB.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>==4)
  {
    real volume = 1.0;
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= VecLen(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++) volume *= diam (LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]);
    <span class="keywordflow">return</span> volume;
  }
  <span class="keywordflow">else</span>
  {
    real volume = diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1]);
    <span class="comment">//return (volume * (volume + diam (LB.Box[2])));</span>
                    <span class="comment">//same as inherited LabBoxVolume--CORRECT</span>
    <span class="keywordflow">return</span> (volume * diam (LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]));
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aec0a3534e5961954300b910f7a7401da"></a><!-- doxytag: member="FCFN3::operator()" ref="aec0a3534e5961954300b910f7a7401da" args="(const LabBox &amp;X) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval FCFN3::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>X</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>interval function object </p>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000018">Todo:</a></b></dt><dd>divide by volume of labelled domain -- volume of rooted trees need transformation (specalise <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> member function get_volume_LabBox) </dd></dl>
<p>Star Tree (123)</p>
<p>UnRooted Tree (1:,2:,3:)</p>
<p>Tree ((12)3)</p>
<p>Tree ((23)1)</p>
<p>Tree ((13)2) </p>

<p>Implements <a class="el" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FCFN3_8cpp_source.shtml#l00467">467</a> of file <a class="el" href="FCFN3_8cpp_source.shtml">FCFN3.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00189">Cid</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00191">Cnid</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00046">FATTEN_THIN_INTERVAL_RE</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00193">fxxx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00194">fxxy</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00196">fxyx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00195">fyxx</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00055">Fobj::LabDomainPriorIntegralList</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00203">n_interval_calls</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00199">PositiveProbInterval</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00049">Fobj::UsingLogDensity</a>.</p>
<div class="fragment"><pre class="fragment">{ 
  <span class="comment">// cout &lt;&lt; &quot;interval FCFN3&quot; &lt;&lt; endl;</span>
  <a class="code" href="classFCFN3.shtml#ac37ffd255223c75b83ea8805c9ca314d" title="Track number of interval function calls.">n_interval_calls</a>++;
  interval result;
  <span class="keywordflow">if</span> (X.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>==0)       
  {
<span class="preprocessor">    #ifdef TESTDIMS</span>
<span class="preprocessor"></span>    <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 1 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 1)
    {
      cerr &lt;&lt; <span class="stringliteral">&quot;dimensions !=1 OR start-index != 1... exiting. &quot;</span> 
           &lt;&lt; endl; exit (EXIT_FAILURE);
    }
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>    interval em4t = (<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-4.0 * X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1])) ;
    result = <a class="code" href="classFCFN3.shtml#ad9e40b33eda0764e3a289dd6be269be3" title="Cid = count of invariant sites (minimal suffcient stats for star tree)">Cid</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( ((1.0 + (3.0*em4t)) / 8.0)) + 
             (<a class="code" href="classFCFN3.shtml#a8ef5d6f9df7caa72a6dd86d65c22eb3c" title="Cnid = count of variant sites (minimal suffcient stats for star tree)">Cnid</a>)*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( ((1.0 - em4t) / 8.0)) ;
  }
  <span class="keywordflow">else</span>      <span class="comment">// un/rooted trees with &gt; 1 distinct branch length</span>
  {
    interval lxxx;
    interval lxxy;
    interval lyxx;
    interval lxyx;
    interval em2t1plust2;
    interval em2t2plust3;
    interval em2t1plust3;
    <span class="keywordflow">if</span> (X.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>==4)     
    {
<span class="preprocessor">      #ifdef TESTDIMS</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 3 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 1)
      {
        cout &lt;&lt; <span class="stringliteral">&quot;dimensions !=3 OR start-index != 1. exiting. &quot;</span> 
             &lt;&lt; endl; exit (EXIT_FAILURE);
      }
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1]+X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]));
      em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]+X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[3]));
      em2t1plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1]+X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[3]));
      <span class="comment">//cout &lt;&lt; lxxx &lt;&lt; lxxy &lt;&lt; lyxx &lt;&lt; lxyx &lt;&lt; endl; getchar();</span>
    }
    <span class="keywordflow">else</span>            <span class="comment">// Rooted trees</span>
    {
<span class="preprocessor">      #ifdef TESTDIMS</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 2 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) != 1)
      {
        cout &lt;&lt; <span class="stringliteral">&quot;dimensions !=2 OR start-index != 1. exiting. &quot;</span> 
             &lt;&lt; endl; exit (EXIT_FAILURE);
      }
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (X.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> == 1) 
      {
        interval B12 = 2.0 * X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0 * B12);
        em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B12 + X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]));
                    <span class="comment">//exp(-2.0*(B12 + X.Box[2]));</span>
        em2t1plust3 = em2t2plust3;
      }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (X.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> == 2)
      {
        interval B23 = 2.0 * X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B23 + X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]));
        em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0* B23);
                    <span class="comment">//exp(-2.0*(B23 + X.Box[2]));</span>
        em2t1plust3 = em2t1plust2;
      }
      <span class="keywordflow">else</span>          
      {
        interval B13 = 2.0 * X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B13 + X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[2]));
        em2t2plust3 = em2t1plust2;
        em2t1plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0* B13);
      }
    }
    lxxx = ((1.0 + em2t1plust2 + em2t2plust3 + em2t1plust3) / 8.0);
    lxxy = ((1.0 + em2t1plust2 - em2t2plust3 - em2t1plust3) / 8.0);
    lyxx = ((1.0 - em2t1plust2 + em2t2plust3 - em2t1plust3) / 8.0);
    lxyx = ((1.0 - em2t1plust2 - em2t2plust3 + em2t1plust3) / 8.0);
    <span class="keywordflow">if</span>(Inf(lxxx)&lt;=0.0) lxxx = lxxx &amp; <a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>;
    <span class="keywordflow">if</span>(Inf(lxxy)&lt;=0.0) lxxy = lxxy &amp; <a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>;
    <span class="keywordflow">if</span>(Inf(lyxx)&lt;=0.0) lyxx = lyxx &amp; <a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>;
    <span class="keywordflow">if</span>(Inf(lxyx)&lt;=0.0) lxyx = lxyx &amp; <a class="code" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00" title="Representable interval without complete interval arithmetic.">PositiveProbInterval</a>;
    result = <a class="code" href="classFCFN3.shtml#ae3655e04a444781c13aac711f1672785" title="Fraction of sites with pattern xxx, Cxxx/TotSites.">fxxx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxxx) + <a class="code" href="classFCFN3.shtml#a28619051be14083932e8c9f8018543d5" title="Fraction of sites with pattern xxy, Cxxy/TotSites.">fxxy</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxxy) + <a class="code" href="classFCFN3.shtml#af6590c09108db59f2d7116837fb68917" title="Fraction of sites with pattern yxx, Cyxx/TotSites.">fyxx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lyxx) + <a class="code" href="classFCFN3.shtml#a59030dc1b324e8dd4f236b97d78d69cd" title="Fraction of sites with pattern xyx, Cxyx/TotSites.">fxyx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxyx) ;
  }
  <span class="comment">//result = exp(TotSites*result);</span>
  <span class="comment">//cout &lt;&lt; X.Box[a] &lt;&lt; &#39;\t&#39; &lt;&lt; result &lt;&lt; &#39;\n&#39;; getchar();</span>
  <span class="comment">//return (UsingLogDensity) ? ln(result) : (result);</span>
  <span class="comment">// result = (TotSites*result);</span>
  <span class="comment">//   cout &lt;&lt; &quot;interval result: &quot; &lt;&lt; result &lt;&lt; endl;</span>

  <span class="keywordflow">if</span>(<a class="code" href="FCFN3_8cpp.shtml#a9282482cb3e8429e118cff3dd045efd3">FATTEN_THIN_INTERVAL_RE</a>)
  {
    <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>)
    {
      Inf(result) -= 1.0e-5;
    }
    <span class="keywordflow">else</span>
    {
      Inf(result) *= (1.0 - 1.0e-5);
    }
  }
  <span class="comment">//</span>
  <span class="comment">//   cout &lt;&lt; &quot;X.L: &quot; &lt;&lt; X.L &lt;&lt; &quot;  result: &quot; &lt;&lt; result &lt;&lt; &quot;  ln(vollabdom): &quot; </span>
  <span class="comment">//   &lt;&lt;  ln(vol_labelled_domain[X.L]) &lt;&lt; endl;</span>
  <span class="comment">//   result = result - ln(vol_labelled_domain[X.L]);</span>
  <span class="comment">// The following line has to do with the prior - could this go in</span>
  <span class="comment">// Fobj for the basic (unif and exponential) priors?</span>
  result = result - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(<a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>[X.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>]);
  <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? (result) : <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(result);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a922aacaa4b75d80ef6a08ae3243e63fc"></a><!-- doxytag: member="FCFN3::operator()" ref="a922aacaa4b75d80ef6a08ae3243e63fc" args="(const LabPnt &amp;X) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real FCFN3::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;&#160;</td>
          <td class="paramname"><em>X</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>real function object </p>
<p>Star Tree (123)</p>
<p>UnRooted Tree (1:,2:,3:)</p>
<p>Tree ((12)3)</p>
<p>Tree ((23)1)</p>
<p>Tree ((13)2) </p>

<p>Implements <a class="el" href="classFobj.shtml#a7e89aa4918cf8e40683dde607257d1ee">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FCFN3_8cpp_source.shtml#l00583">583</a> of file <a class="el" href="FCFN3_8cpp_source.shtml">FCFN3.cpp</a>.</p>

<p>References <a class="el" href="FCFN3_8hpp_source.shtml#l00189">Cid</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00191">Cnid</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00193">fxxx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00194">fxxy</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00196">fxyx</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00195">fyxx</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00055">Fobj::LabDomainPriorIntegralList</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00205">n_real_calls</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00049">Fobj::UsingLogDensity</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//  cout &lt;&lt; &quot;real FCFN3, top&quot; &lt;&lt; endl;</span>
  <a class="code" href="classFCFN3.shtml#a6af9c2e333d52639535dc61516f8f984" title="Track number of real function calls.">n_real_calls</a>++;
  real result;
  <span class="keywordflow">if</span> (X.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>==0)       
  {
<span class="preprocessor">    #ifdef TESTDIMS</span>
<span class="preprocessor"></span>    <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 1 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 1)
    {
      cerr &lt;&lt; <span class="stringliteral">&quot;dimensions !=1 OR start-index != 1... exiting. &quot;</span> 
           &lt;&lt; endl; exit (EXIT_FAILURE);
    }
<span class="preprocessor">    #endif</span>
<span class="preprocessor"></span>    real em4t = (<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-4.0 * X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1])) ;
    result = <a class="code" href="classFCFN3.shtml#ad9e40b33eda0764e3a289dd6be269be3" title="Cid = count of invariant sites (minimal suffcient stats for star tree)">Cid</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( ((1.0 + (3.0*em4t)) / 8.0)) + 
             (<a class="code" href="classFCFN3.shtml#a8ef5d6f9df7caa72a6dd86d65c22eb3c" title="Cnid = count of variant sites (minimal suffcient stats for star tree)">Cnid</a>)*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>( ((1.0 - em4t) / 8.0)) ;
  }
  <span class="keywordflow">else</span>              <span class="comment">// un/rooted trees with &gt; 1 distinct branch length</span>
  {
    real lxxx;
    real lxxy;
    real lyxx;
    real lxyx;
    real em2t1plust2;
    real em2t2plust3;
    real em2t1plust3;
    <span class="keywordflow">if</span> (X.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>==4)     
    {
<span class="preprocessor">      #ifdef TESTDIMS</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 3 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 1)
      {
        cerr &lt;&lt; <span class="stringliteral">&quot;dimensions !=3 OR start-index != 1. exiting. &quot;</span> 
             &lt;&lt; endl; exit (EXIT_FAILURE);
      }
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1]+X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[2]));
      em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[2]+X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[3]));
      em2t1plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1]+X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[3]));
    }
    <span class="keywordflow">else</span>            <span class="comment">// Rooted trees</span>
    {
<span class="preprocessor">      #ifdef TESTDIMS</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 2 || <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>) != 1)
      {
        cout &lt;&lt; <span class="stringliteral">&quot;dimensions !=2 OR start-index != 1. exiting. &quot;</span> 
             &lt;&lt; endl; exit (EXIT_FAILURE);
      }
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>      <span class="keywordflow">if</span> (X.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> == 1) 
      {
        real B12 = 2.0 * X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0 * B12);
        em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B12 + X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[2]));
                    <span class="comment">//exp(-2.0*(B12 + X.Pnt[2]));</span>
        em2t1plust3 = em2t2plust3;
      }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (X.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> == 2)
      {
        real B23 = 2.0 * X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B23 + X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[2]));
        em2t2plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0* B23);
                    <span class="comment">//exp(-2.0*(B23 + X.Pnt[2]));</span>
        em2t1plust3 = em2t1plust2;
      }
      <span class="keywordflow">else</span>          
      {
        real B13 = 2.0 * X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[1];
        em2t1plust2 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0*(B13 + X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[2]));
        em2t2plust3 = em2t1plust2;
        em2t1plust3 = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-2.0* B13);
      }
    }
    lxxx = ((1.0 + em2t1plust2 + em2t2plust3 + em2t1plust3) / 8.0);
    lxxy = ((1.0 + em2t1plust2 - em2t2plust3 - em2t1plust3) / 8.0);
    lyxx = ((1.0 - em2t1plust2 + em2t2plust3 - em2t1plust3) / 8.0);
    lxyx = ((1.0 - em2t1plust2 - em2t2plust3 + em2t1plust3) / 8.0);
    <span class="comment">//  cout &lt;&lt; lxxx &lt;&lt; &quot;  &quot; &lt;&lt; lxxy &lt;&lt; &quot;  &quot; &lt;&lt; lyxx &lt;&lt; &quot;  &quot; &lt;&lt; lxyx &lt;&lt; &quot;  &quot; </span>
    <span class="comment">//       &lt;&lt; endl; getchar();</span>
    <span class="comment">//  cout &lt;&lt; fxxx &lt;&lt; &quot;  &quot; &lt;&lt; fxxy &lt;&lt; &quot;  &quot; &lt;&lt; fyxx &lt;&lt; &quot;  &quot; &lt;&lt; fxyx &lt;&lt; endl;</span>
    result = <a class="code" href="classFCFN3.shtml#ae3655e04a444781c13aac711f1672785" title="Fraction of sites with pattern xxx, Cxxx/TotSites.">fxxx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxxx) + <a class="code" href="classFCFN3.shtml#a28619051be14083932e8c9f8018543d5" title="Fraction of sites with pattern xxy, Cxxy/TotSites.">fxxy</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxxy) + <a class="code" href="classFCFN3.shtml#af6590c09108db59f2d7116837fb68917" title="Fraction of sites with pattern yxx, Cyxx/TotSites.">fyxx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lyxx) + <a class="code" href="classFCFN3.shtml#a59030dc1b324e8dd4f236b97d78d69cd" title="Fraction of sites with pattern xyx, Cxyx/TotSites.">fxyx</a>*<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(lxyx) ;
  }
  <span class="comment">//result = exp(TotSites*result);</span>
  <span class="comment">//  cout &lt;&lt; X.Pnt &lt;&lt; &#39;\t&#39; &lt;&lt; result &lt;&lt; &#39;\n&#39;; getchar();</span>
  <span class="comment">//return (UsingLogDensity) ? ln(result) : (result);</span>
  <span class="comment">// result = (TotSites*result);</span>
  <span class="comment">//  cout &lt;&lt; &quot;real result: &quot; &lt;&lt; result &lt;&lt; endl;</span>
  <span class="comment">//   cout &lt;&lt; &quot;X.L:  &quot; &lt;&lt; X.L &lt;&lt; &quot; result: &quot; &lt;&lt; result &lt;&lt; &quot;  ln(vollabdom): &quot; </span>
  <span class="comment">//        &lt;&lt;  ln(vol_labelled_domain[X.L]) &lt;&lt; endl;</span>
  <span class="comment">// result = result - ln(vol_labelled_domain[X.L]);</span>
  result = result - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(<a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>[X.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>]);
  <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? (result) : <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(result);
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ad9e40b33eda0764e3a289dd6be269be3"></a><!-- doxytag: member="FCFN3::Cid" ref="ad9e40b33eda0764e3a289dd6be269be3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#ad9e40b33eda0764e3a289dd6be269be3">FCFN3::Cid</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Cid = count of invariant sites (minimal suffcient stats for star tree) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00189">189</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a8ef5d6f9df7caa72a6dd86d65c22eb3c"></a><!-- doxytag: member="FCFN3::Cnid" ref="a8ef5d6f9df7caa72a6dd86d65c22eb3c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a8ef5d6f9df7caa72a6dd86d65c22eb3c">FCFN3::Cnid</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Cnid = count of variant sites (minimal suffcient stats for star tree) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00191">191</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a70ede8e738b72b8bea0ba6eb5e44e884"></a><!-- doxytag: member="FCFN3::Cxxx" ref="a70ede8e738b72b8bea0ba6eb5e44e884" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a70ede8e738b72b8bea0ba6eb5e44e884">FCFN3::Cxxx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Count of sites with pattern xxx (minimal suffcient stats) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00184">184</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>.</p>

</div>
</div>
<a class="anchor" id="a1a5c9deec90452588e2f57f5291881b0"></a><!-- doxytag: member="FCFN3::Cxxy" ref="a1a5c9deec90452588e2f57f5291881b0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a1a5c9deec90452588e2f57f5291881b0">FCFN3::Cxxy</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Count of sites with pattern xxy (minimal suffcient stats) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00185">185</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>.</p>

</div>
</div>
<a class="anchor" id="a60144493a83a2555c774cf7dfa4c9ec0"></a><!-- doxytag: member="FCFN3::Cxyx" ref="a60144493a83a2555c774cf7dfa4c9ec0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a60144493a83a2555c774cf7dfa4c9ec0">FCFN3::Cxyx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Count of sites with pattern xyx (minimal suffcient stats) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00187">187</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>.</p>

</div>
</div>
<a class="anchor" id="a4e3aae643d4c68030d916df7ac71b538"></a><!-- doxytag: member="FCFN3::Cyxx" ref="a4e3aae643d4c68030d916df7ac71b538" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a4e3aae643d4c68030d916df7ac71b538">FCFN3::Cyxx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Count of sites with pattern yxx (minimal suffcient stats) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00186">186</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>.</p>

</div>
</div>
<a class="anchor" id="a7555e90b5424a3989f51e1afbb76a36e"></a><!-- doxytag: member="FCFN3::f0" ref="a7555e90b5424a3989f51e1afbb76a36e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#a7555e90b5424a3989f51e1afbb76a36e">FCFN3::f0</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fraction of invariant sites, f0 := Cid/(Cid+Cnid) </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00192">192</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae3655e04a444781c13aac711f1672785"></a><!-- doxytag: member="FCFN3::fxxx" ref="ae3655e04a444781c13aac711f1672785" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#ae3655e04a444781c13aac711f1672785">FCFN3::fxxx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fraction of sites with pattern xxx, Cxxx/TotSites. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00193">193</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a28619051be14083932e8c9f8018543d5"></a><!-- doxytag: member="FCFN3::fxxy" ref="a28619051be14083932e8c9f8018543d5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#a28619051be14083932e8c9f8018543d5">FCFN3::fxxy</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fraction of sites with pattern xxy, Cxxy/TotSites. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00194">194</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a59030dc1b324e8dd4f236b97d78d69cd"></a><!-- doxytag: member="FCFN3::fxyx" ref="a59030dc1b324e8dd4f236b97d78d69cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#a59030dc1b324e8dd4f236b97d78d69cd">FCFN3::fxyx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fraction of sites with pattern xyx, Cxyx/TotSites. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00196">196</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="af6590c09108db59f2d7116837fb68917"></a><!-- doxytag: member="FCFN3::fyxx" ref="af6590c09108db59f2d7116837fb68917" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#af6590c09108db59f2d7116837fb68917">FCFN3::fyxx</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Fraction of sites with pattern yxx, Cyxx/TotSites. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00195">195</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="ac37ffd255223c75b83ea8805c9ca314d"></a><!-- doxytag: member="FCFN3::n_interval_calls" ref="ac37ffd255223c75b83ea8805c9ca314d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#ac37ffd255223c75b83ea8805c9ca314d">FCFN3::n_interval_calls</a><code> [mutable, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Track number of interval function calls. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00203">203</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00221">get_interval_calls()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a6af9c2e333d52639535dc61516f8f984"></a><!-- doxytag: member="FCFN3::n_real_calls" ref="a6af9c2e333d52639535dc61516f8f984" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFCFN3.shtml#a6af9c2e333d52639535dc61516f8f984">FCFN3::n_real_calls</a><code> [mutable, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Track number of real function calls. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00205">205</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, <a class="el" href="FCFN3_8hpp_source.shtml#l00226">get_real_calls()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00583">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a53e77ef0b53f0fea50abd6e87f8a1c00"></a><!-- doxytag: member="FCFN3::PositiveProbInterval" ref="a53e77ef0b53f0fea50abd6e87f8a1c00" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval <a class="el" href="classFCFN3.shtml#a53e77ef0b53f0fea50abd6e87f8a1c00">FCFN3::PositiveProbInterval</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Representable interval without complete interval arithmetic. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00199">199</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3()</a>, and <a class="el" href="FCFN3_8cpp_source.shtml#l00467">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="ac61db05a36bdc21a29f38afed405c188"></a><!-- doxytag: member="FCFN3::TotSites" ref="ac61db05a36bdc21a29f38afed405c188" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFCFN3.shtml#ac61db05a36bdc21a29f38afed405c188">FCFN3::TotSites</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Total number of sites </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00197">197</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a50eac3a5d427bffc05f729ff3375a0ca"></a><!-- doxytag: member="FCFN3::vol_labelled_domain" ref="a50eac3a5d427bffc05f729ff3375a0ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;real&gt; <a class="el" href="classFCFN3.shtml#a50eac3a5d427bffc05f729ff3375a0ca">FCFN3::vol_labelled_domain</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Volume of each labelled domain box. </p>

<p>Definition at line <a class="el" href="FCFN3_8hpp_source.shtml#l00201">201</a> of file <a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a></li>
<li><a class="el" href="FCFN3_8cpp_source.shtml">FCFN3.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classFCFN3.shtml">FCFN3</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:24 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
