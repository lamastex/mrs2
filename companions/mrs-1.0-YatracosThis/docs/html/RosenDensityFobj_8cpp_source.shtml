<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: RosenDensityFobj.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('RosenDensityFobj_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">RosenDensityFobj.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="RosenDensityFobj_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;<a class="code" href="RosenDensityFobj_8hpp.shtml" title="Rosenbrock density target.">RosenDensityFobj.hpp</a>&quot;</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="keyword">using namespace </span>cxsc;
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>std;
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="comment">//#define MYDEBUG</span>
<a name="l00015"></a>00015 <span class="preprocessor">#ifdef MYDEBUG</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">  #include &lt;iostream&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#endif</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 
<a name="l00020"></a><a class="code" href="classRosenDensityFobj.shtml#add387cdd9b69b03274a28cb74fc4e6c5">00020</a> <a class="code" href="classRosenDensityFobj.shtml#add387cdd9b69b03274a28cb74fc4e6c5" title="no argument constructor">RosenDensityFobj::RosenDensityFobj</a>() : tInverse(1.0), height(100.0) {}
<a name="l00021"></a>00021 
<a name="l00022"></a><a class="code" href="classRosenDensityFobj.shtml#a93f28152158f39add7f42b334e16bf3f">00022</a> <a class="code" href="classRosenDensityFobj.shtml#add387cdd9b69b03274a28cb74fc4e6c5" title="no argument constructor">RosenDensityFobj::RosenDensityFobj</a>(real ti, real h) : tInverse(ti), height(h) {}
<a name="l00023"></a>00023 
<a name="l00024"></a><a class="code" href="classRosenDensityFobj.shtml#a8895f069880101743b15ca3b452bb777">00024</a> interval <a class="code" href="classRosenDensityFobj.shtml#a8895f069880101743b15ca3b452bb777" title="declare function for interval image of a box">RosenDensityFobj::operator()</a>(<span class="keyword">const</span> cxsc::ivector&amp; ivec)<span class="keyword"> const</span>
<a name="l00025"></a>00025 <span class="keyword"></span>{
<a name="l00026"></a>00026   interval result(0.0, 0.0);
<a name="l00027"></a>00027   
<a name="l00028"></a>00028   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(ivec), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(ivec);
<a name="l00029"></a>00029   
<a name="l00030"></a>00030   <span class="keywordflow">if</span> (a == z)
<a name="l00031"></a>00031   {
<a name="l00032"></a>00032     result = (<a class="code" href="classRosenDensityFobj.shtml#a56ff0d36a15509cbbb0cf1182c90f675">height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (1.0 - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (ivec[a])) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (ivec[a] - 1.0));
<a name="l00033"></a>00033   }
<a name="l00034"></a>00034    
<a name="l00035"></a>00035   <span class="keywordflow">else</span> {
<a name="l00036"></a>00036     
<a name="l00037"></a>00037     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = a + 1; i &lt;= z; ++i) {
<a name="l00038"></a>00038       result = result + (<a class="code" href="classRosenDensityFobj.shtml#a56ff0d36a15509cbbb0cf1182c90f675">height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (ivec[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (ivec[i - 1])) +
<a name="l00039"></a>00039                 <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (ivec[i - 1] - 1.0));
<a name="l00040"></a>00040     }
<a name="l00041"></a>00041   }
<a name="l00042"></a>00042   
<a name="l00043"></a>00043 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Rosen(ivector ) result is: &quot;</span> &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;
<a name="l00045"></a>00045 <span class="preprocessor">  #endif</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>  
<a name="l00047"></a>00047   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">cxsc::exp</a> (-(<a class="code" href="classRosenDensityFobj.shtml#a9c10e3721ba9e7534d20a22af31cbc2a">tInverse</a> * result));
<a name="l00048"></a>00048     
<a name="l00049"></a>00049 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Result afer exp is: &quot;</span> &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;
<a name="l00051"></a>00051 <span class="preprocessor">  #endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053   
<a name="l00054"></a>00054   <span class="keywordflow">return</span> result;
<a name="l00055"></a>00055   
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="classRosenDensityFobj.shtml#afbc72b00926e0b6c9ad073bbb4823aba">00059</a> real <a class="code" href="classRosenDensityFobj.shtml#a8895f069880101743b15ca3b452bb777" title="declare function for interval image of a box">RosenDensityFobj::operator()</a>(<span class="keyword">const</span> cxsc::rvector&amp; r)<span class="keyword"> const</span>
<a name="l00060"></a>00060 <span class="keyword"></span>{   
<a name="l00061"></a>00061   real result = 0.0;
<a name="l00062"></a>00062    
<a name="l00063"></a>00063     <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(r), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(r);
<a name="l00064"></a>00064   
<a name="l00065"></a>00065   <span class="keywordflow">if</span> (a == z)
<a name="l00066"></a>00066   {
<a name="l00067"></a>00067     result = (<a class="code" href="classRosenDensityFobj.shtml#a56ff0d36a15509cbbb0cf1182c90f675">height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (1.0 - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (r[a])) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (r[a] - 1.0));
<a name="l00068"></a>00068   }
<a name="l00069"></a>00069    
<a name="l00070"></a>00070   <span class="keywordflow">else</span> {
<a name="l00071"></a>00071     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = a + 1; i &lt;= z; i++) {
<a name="l00072"></a>00072       result = result + (<a class="code" href="classRosenDensityFobj.shtml#a56ff0d36a15509cbbb0cf1182c90f675">height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (r[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (r[i - 1])) +
<a name="l00073"></a>00073               <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">cxsc::sqr</a> (r[i - 1] - 1.0));
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075   }
<a name="l00076"></a>00076   
<a name="l00077"></a>00077 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Rosen(rvector ) result is: &quot;</span> &lt;&lt; result &lt;&lt; endl &lt;&lt; endl; 
<a name="l00079"></a>00079 <span class="preprocessor">  #endif</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>  
<a name="l00081"></a>00081   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">cxsc::exp</a> (-(<a class="code" href="classRosenDensityFobj.shtml#a9c10e3721ba9e7534d20a22af31cbc2a">tInverse</a> * result));
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Result after exp is: &quot;</span> &lt;&lt; result &lt;&lt; endl &lt;&lt; endl; 
<a name="l00085"></a>00085 <span class="preprocessor">  #endif</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087 
<a name="l00088"></a>00088    <span class="keywordflow">return</span> result;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a><a class="code" href="classRosenDensityFobj.shtml#a292e8edb10388e7238ca728291889cee">00091</a> std::string <a class="code" href="classRosenDensityFobj.shtml#a292e8edb10388e7238ca728291889cee" title="a virtual function for the function name">RosenDensityFobj::getName</a>()<span class="keyword"> const</span>
<a name="l00092"></a>00092 <span class="keyword"></span>{
<a name="l00093"></a>00093   <span class="keywordflow">return</span> std::string(<span class="stringliteral">&quot;RosenDensity&quot;</span>);
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a><a class="code" href="classRosenDensityFobj.shtml#aad064f3b16c4c747ad690eeabb75984d">00096</a> <a class="code" href="classRosenDensityFobj.shtml#aad064f3b16c4c747ad690eeabb75984d" title="Destructor.">RosenDensityFobj::~RosenDensityFobj</a>(){}
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="RosenDensityFobj_8cpp.shtml">RosenDensityFobj.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
