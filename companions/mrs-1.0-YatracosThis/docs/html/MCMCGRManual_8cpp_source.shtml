<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRManual.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRManual_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCGRManual.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCGRManual_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGR_2dataprep_8hpp.shtml">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>cxsc;
<a name="l00036"></a>00036 <span class="keyword">using namespace </span>std;
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="MCMCGRManual_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00038</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040    <span class="comment">//========user-defined parameters====================//</span>
<a name="l00041"></a>00041    <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number to generate</span>
<a name="l00042"></a>00042    <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00043"></a>00043    <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//mix</span>
<a name="l00044"></a>00044    <span class="keywordtype">double</span> tol = atof(argv[7]); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00045"></a>00045   
<a name="l00046"></a>00046    <span class="comment">//======set up for output========================================//    </span>
<a name="l00047"></a>00047    <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00048"></a>00048    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00049"></a>00049    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00050"></a>00050    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00051"></a>00051    oss.precision(5);
<a name="l00052"></a>00052 
<a name="l00053"></a>00053    <span class="comment">//===========prepare to generate some data for the tests ================//</span>
<a name="l00054"></a>00054    <span class="comment">// set up a random number generator</span>
<a name="l00055"></a>00055    <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00056"></a>00056    gsl_rng * r;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060    gsl_rng_env_setup();
<a name="l00061"></a>00061    T = gsl_rng_default;
<a name="l00062"></a>00062    r = gsl_rng_alloc (T);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064    <span class="comment">//-------define the root box--------------------</span>
<a name="l00065"></a>00065    ivector pavingBox(d);
<a name="l00066"></a>00066    interval pavingInterval(0,1);
<a name="l00067"></a>00067    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069    <span class="comment">//------------data generating partition-------------</span>
<a name="l00070"></a>00070    <span class="comment">//data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00071"></a>00071    <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00072"></a>00072    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00073"></a>00073    <span class="comment">// a container for the boxes</span>
<a name="l00074"></a>00074    vector&lt;ivector&gt; Pboxes;
<a name="l00075"></a>00075    <span class="comment">//mixture shape</span>
<a name="l00076"></a>00076    <span class="keywordtype">string</span> mixShape;
<a name="l00077"></a>00077    <span class="keywordflow">if</span> (mix == 1) {mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }<span class="comment">// this is the basic uniform</span>
<a name="l00078"></a>00078    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix == 2) { mixShape = <span class="stringliteral">&quot;1,2,2&quot;</span>; }
<a name="l00079"></a>00079    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==3) { mixShape = <span class="stringliteral">&quot;2,3,4,4,3,4,4,2&quot;</span>; }   
<a name="l00080"></a>00080    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==4) {mixShape =             <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }    
<a name="l00081"></a>00081    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture     </span>
<a name="l00082"></a>00082    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00083"></a>00083    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00084"></a>00084    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(Pleaves); <span class="comment">// fill the container</span>
<a name="l00085"></a>00085    
<a name="l00086"></a>00086    <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00087"></a>00087    <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
<a name="l00088"></a>00088       Pboxes.push_back((*it)-&gt;getBox());
<a name="l00089"></a>00089    }
<a name="l00090"></a>00090    <span class="keywordtype">size_t</span> PartSize = Pboxes.size();
<a name="l00091"></a>00091 
<a name="l00092"></a>00092    <span class="comment">//--------------generate data-----------------------------------------</span>
<a name="l00093"></a>00093     cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
<a name="l00094"></a>00094     <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00095"></a>00095     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE   </span>
<a name="l00096"></a>00096     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00097"></a>00097     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00098"></a>00098       rvector thisrv(d);
<a name="l00099"></a>00099       <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00100"></a>00100       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
<a name="l00101"></a>00101         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);
<a name="l00102"></a>00102       }
<a name="l00103"></a>00103       <span class="comment">// put points generated into container</span>
<a name="l00104"></a>00104       theData.push_back(thisrv);
<a name="l00105"></a>00105     }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107    <span class="comment">// free the random number generator</span>
<a name="l00108"></a>00108    gsl_rng_free (r);
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="comment">/*  // output data to a file</span>
<a name="l00111"></a>00111 <span class="comment">   string dataFile = &quot;dataFile.txt&quot;;</span>
<a name="l00112"></a>00112 <span class="comment">   ofstream osd(dataFile.c_str());         // replace data</span>
<a name="l00113"></a>00113 <span class="comment">   if (osd.is_open()) {</span>
<a name="l00114"></a>00114 <span class="comment">      RVecDataItr dit;</span>
<a name="l00115"></a>00115 <span class="comment">      for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<a name="l00116"></a>00116 <span class="comment">        //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<a name="l00117"></a>00117 <span class="comment">        osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<a name="l00118"></a>00118 <span class="comment">      }</span>
<a name="l00119"></a>00119 <span class="comment">      osd.close();</span>
<a name="l00120"></a>00120 <span class="comment">   }</span>
<a name="l00121"></a>00121 <span class="comment">   else {</span>
<a name="l00122"></a>00122 <span class="comment">      std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<a name="l00123"></a>00123 <span class="comment">        &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<a name="l00124"></a>00124 <span class="comment">   }</span>
<a name="l00125"></a>00125 <span class="comment">  */</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127   <span class="comment">//================Gelman-Rubin method=========================//</span>
<a name="l00128"></a>00128    <span class="comment">// this is how many starting histograms we need</span>
<a name="l00129"></a>00129    <span class="keywordtype">size_t</span> chains = 3; <span class="comment">// how many chains to run</span>
<a name="l00130"></a>00130    <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00131"></a>00131    <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00132"></a>00132    <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">//------Starting histograms-------------------------------//</span>
<a name="l00135"></a>00135   <span class="comment">//histogram 1</span>
<a name="l00136"></a>00136   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
<a name="l00137"></a>00137    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00138"></a>00138   <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00139"></a>00139   <span class="keywordtype">bool</span> successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="comment">//histogram 2</span>
<a name="l00142"></a>00142   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
<a name="l00143"></a>00143   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00144"></a>00144   <span class="comment">// the same data into the second histogram</span>
<a name="l00145"></a>00145   <span class="keywordtype">bool</span> successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00146"></a>00146   <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00147"></a>00147   <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00148"></a>00148       <span class="comment">// set up function objects for a priority split</span>
<a name="l00149"></a>00149       <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00150"></a>00150       <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00151"></a>00151       <span class="keywordtype">size_t</span> minLeaves = 50;
<a name="l00152"></a>00152       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00153"></a>00153       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00154"></a>00154       <span class="comment">// do the priority split</span>
<a name="l00155"></a>00155       successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00156"></a>00156            critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00157"></a>00157    }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <span class="comment">//histogram 3</span>
<a name="l00160"></a>00160   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 3&quot;</span> &lt;&lt; endl;
<a name="l00161"></a>00161   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistThird = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00162"></a>00162   myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(<span class="stringliteral">&quot;1,2,2&quot;</span>); <span class="comment">// make a specific starting shape</span>
<a name="l00163"></a>00163   <span class="comment">// put in the data in a &#39;pulse&#39; with no further splitting</span>
<a name="l00164"></a>00164   <span class="keywordtype">bool</span> successfulInsertionThird = myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="comment">//--------Start the MCMC------------------------------------------------//</span>
<a name="l00167"></a>00167    <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond &amp;&amp; successfulInsertionThird) 
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169      <span class="comment">// set up proposal distribution object</span>
<a name="l00170"></a>00170      <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00171"></a>00171      <span class="comment">// set up prior distribution object</span>
<a name="l00172"></a>00172      <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174      <span class="keywordtype">int</span> loops = atoi(argv[4]);
<a name="l00175"></a>00175      <span class="keywordtype">int</span> burnin = atoi(argv[5]); <span class="comment">//want this to be automated</span>
<a name="l00176"></a>00176      <span class="keywordtype">int</span> thinout = atoi(argv[6]);
<a name="l00177"></a>00177      <span class="keywordtype">size_t</span> minPoints = 0;
<a name="l00178"></a>00178      <span class="keywordtype">bool</span> thinning = (thinout &gt; 0);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00181"></a>00181      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183      gsl_rng * rgsl = NULL;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185      <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00186"></a>00186 
<a name="l00187"></a>00187      <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00188"></a>00188      <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00189"></a>00189      <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00190"></a>00190      <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00191"></a>00191      gsl_rng_env_setup();
<a name="l00192"></a>00192      tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00193"></a>00193      rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00194"></a>00194 
<a name="l00195"></a>00195       <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00196"></a>00196       vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00197"></a>00197       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00198"></a>00198       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200       vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00201"></a>00201       vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00202"></a>00202       vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00203"></a>00203 
<a name="l00204"></a>00204       std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00205"></a>00205       std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00206"></a>00206       std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208       std::string overSequenceAvgCollFilename = <span class="stringliteral">&quot;CollationsOfAveragesOverSequences.txt&quot;</span>;
<a name="l00209"></a>00209       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(overSequenceAvgCollFilename);
<a name="l00210"></a>00210       std::string GRAreaFilename = <span class="stringliteral">&quot;GelmanRubinLog_AreaScalar.txt&quot;</span>;
<a name="l00211"></a>00211       std::string GRTotalHeightFilename = <span class="stringliteral">&quot;GelmanRubinLog_TotalHeightScalar.txt&quot;</span>;
<a name="l00212"></a>00212       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRAreaFilename);
<a name="l00213"></a>00213       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(GRTotalHeightFilename);
<a name="l00214"></a>00214 
<a name="l00215"></a>00215       <span class="comment">// containers for summaries for the Area-related scalar</span>
<a name="l00216"></a>00216       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceAreaVec; <span class="comment">// to hold the Ws</span>
<a name="l00217"></a>00217       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceAreaVec; <span class="comment">// to hold the Bs</span>
<a name="l00218"></a>00218       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVAreaVec; <span class="comment">// to hold the estimated var(v)</span>
<a name="l00219"></a>00219       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatAreaVec; <span class="comment">// to hold the sqrtRhats</span>
<a name="l00220"></a>00220 
<a name="l00221"></a>00221       <span class="comment">// containers for summaries for the total height scalar</span>
<a name="l00222"></a>00222       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> withinSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Ws</span>
<a name="l00223"></a>00223       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> betweenSequenceVarianceTotalHeightVec; <span class="comment">// to hold the Bs</span>
<a name="l00224"></a>00224       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> estVarVTotalHeightVec; <span class="comment">// to hold the estimated var(v)</span>
<a name="l00225"></a>00225       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sqrtRhatTotalHeightVec; <span class="comment">// to hold the sqrtRhats</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227       <span class="comment">// containers for adaptive histograms</span>
<a name="l00228"></a>00228       vector&lt;AdaptiveHistogram*&gt; hists;
<a name="l00229"></a>00229       hists.push_back(myHistFirst);
<a name="l00230"></a>00230       hists.push_back(myHistSecond);
<a name="l00231"></a>00231       hists.push_back(myHistThird);
<a name="l00232"></a>00232       <span class="comment">// there should be as many hists in hists as there are chains</span>
<a name="l00233"></a>00233       <span class="keywordflow">if</span> (hists.size() != chains) {
<a name="l00234"></a>00234         cout &lt;&lt; <span class="stringliteral">&quot;Wrong number of histograms&quot;</span> &lt;&lt; endl;
<a name="l00235"></a>00235         exit(1);
<a name="l00236"></a>00236       }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238       <span class="comment">// container of each state at each sequence</span>
<a name="l00239"></a>00239       vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241       <span class="comment">//container for the collation of the averages over each sequence at each state</span>
<a name="l00242"></a>00242       vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> masterCollator; <span class="comment">// not newed so no need to delete</span>
<a name="l00245"></a>00245 
<a name="l00246"></a>00246       <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248       <span class="keywordtype">size_t</span> ci = 0; <span class="comment">// indexing through chains</span>
<a name="l00249"></a>00249       <span class="keywordflow">for</span> (ci = 0; ci &lt; chains; ci++) {
<a name="l00250"></a>00250 
<a name="l00251"></a>00251         <span class="comment">// do not comment these out</span>
<a name="l00252"></a>00252         std::ostringstream stm1;
<a name="l00253"></a>00253         stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00254"></a>00254         sequenceStateFilenames[ci] = stm1.str();
<a name="l00255"></a>00255         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00256"></a>00256 
<a name="l00257"></a>00257         std::ostringstream stm3;
<a name="l00258"></a>00258         stm3 &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00259"></a>00259         sequenceCollationFilenames[ci] = stm3.str();
<a name="l00260"></a>00260         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00261"></a>00261 
<a name="l00262"></a>00262         std::ostringstream stm2;
<a name="l00263"></a>00263         stm2 &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00264"></a>00264         sequenceAverageFilenames[ci] = stm2.str();
<a name="l00265"></a>00265         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267         <span class="comment">// set up a container for the leaf children</span>
<a name="l00268"></a>00268         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00269"></a>00269         <span class="comment">// set up a container for the subleaf children</span>
<a name="l00270"></a>00270         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00273"></a>00273         <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         <span class="comment">// fill the container with the leaf children</span>
<a name="l00276"></a>00276         hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00277"></a>00277         <span class="comment">// fill the container with the subleaf children</span>
<a name="l00278"></a>00278         hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00279"></a>00279         
<a name="l00280"></a>00280         numCherries = cherryVec.size();
<a name="l00281"></a>00281 
<a name="l00282"></a>00282         <span class="comment">// check if node is still splittable</span>
<a name="l00283"></a>00283         <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00284"></a>00284            <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00285"></a>00285            <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00286"></a>00286            <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00287"></a>00287            <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00288"></a>00288               <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
<a name="l00289"></a>00289                 ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
<a name="l00290"></a>00290                    <span class="comment">// leaf can go into container</span>
<a name="l00291"></a>00291                    nodeLists[ci].push_back(*lit);
<a name="l00292"></a>00292                    numLeaves++;
<a name="l00293"></a>00293               }
<a name="l00294"></a>00294            }
<a name="l00295"></a>00295         }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297         <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00298"></a>00298         <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00299"></a>00299            nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00300"></a>00300                            cherryVec.end());
<a name="l00301"></a>00301         <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00302"></a>00302            cancontinue = <span class="keyword">false</span>;
<a name="l00303"></a>00303            <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00304"></a>00304            std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00305"></a>00305                    &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00306"></a>00306                    &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00307"></a>00307         }
<a name="l00308"></a>00308 
<a name="l00309"></a>00309         numLeavesVec[ci] = numLeaves;
<a name="l00310"></a>00310         numCherriesVec[ci] = numCherries;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* coll = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>;
<a name="l00313"></a>00313         sequenceCollators[ci] = coll;
<a name="l00314"></a>00314       }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316       <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l00317"></a>00317       <span class="keywordtype">int</span> i = 1;  <span class="comment">// keep track of states in the chain</span>
<a name="l00318"></a>00318       <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l00319"></a>00319 
<a name="l00320"></a>00320       <span class="keywordtype">int</span> sampleNumber = 1;
<a name="l00321"></a>00321       <span class="comment">// loop from here conditional on good loop and cancontinue</span>
<a name="l00322"></a>00322       <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loops &gt; 0) ) {
<a name="l00323"></a>00323         loops--;
<a name="l00324"></a>00324         <span class="comment">// a collator for the averages for this loop</span>
<a name="l00325"></a>00325         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* avgColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327         <span class="comment">// container for the S&#39;s for this loop</span>
<a name="l00328"></a>00328         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sampleVariancesArea(chains);
<a name="l00329"></a>00329         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> sampleVariancesTotalHeight(chains);
<a name="l00330"></a>00330 
<a name="l00331"></a>00331         cout &lt;&lt; <span class="stringliteral">&quot;for each histogram in turn change the state&quot;</span> &lt;&lt; endl;
<a name="l00332"></a>00332         <span class="comment">// for each histogram in turn, change the state</span>
<a name="l00333"></a>00333         <span class="keywordflow">for</span> (ci = 0; ci &lt; chains; ci++) {
<a name="l00334"></a>00334           cout &lt;&lt; <span class="stringliteral">&quot;chain &quot;</span> &lt;&lt; ci &lt;&lt; endl;
<a name="l00335"></a>00335            <span class="comment">// changeMCMCState updates nodes, numLeaves, numCherries, i</span>
<a name="l00336"></a>00336            goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l00337"></a>00337                    numLeavesVec[ci], numCherriesVec[ci],
<a name="l00338"></a>00338                    proposal, logPrior, minPoints,
<a name="l00339"></a>00339                    rgsl, loggingInChangeStates,
<a name="l00340"></a>00340                    sequenceStateFilenames[ci], i);
<a name="l00341"></a>00341 
<a name="l00342"></a>00342            <span class="keywordflow">if</span> (!goodLoop) <span class="keywordflow">break</span>; <span class="comment">// break out if we aren&#39;t happy</span>
<a name="l00343"></a>00343            <span class="keywordflow">else</span> {
<a name="l00344"></a>00344 
<a name="l00345"></a>00345               <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l00346"></a>00346                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l00347"></a>00347               }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349               <span class="comment">// if we are taking samples take the sample here</span>
<a name="l00350"></a>00350               <span class="keywordflow">if</span> (thinning &amp;&amp; (i &gt;= burnin) &amp;&amp;
<a name="l00351"></a>00351                    ((i-burnin)%thinout == 0)) {
<a name="l00352"></a>00352 
<a name="l00353"></a>00353                 <span class="comment">// output the sample state;</span>
<a name="l00354"></a>00354                 hists[ci]-&gt;publicOutputMCMCStateSample(ci, i);
<a name="l00355"></a>00355 
<a name="l00356"></a>00356                 <span class="comment">// collate the sample state;</span>
<a name="l00357"></a>00357                 sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));
<a name="l00358"></a>00358 
<a name="l00359"></a>00359                 <span class="comment">// now make the average over the collator</span>
<a name="l00360"></a>00360                 <span class="comment">// and collect that too!</span>
<a name="l00361"></a>00361                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00362"></a>00362                         = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00363"></a>00363                 (*avgColl) += colltempavg; <span class="comment">// add the average into the collation of averages</span>
<a name="l00364"></a>00364 
<a name="l00365"></a>00365                 <span class="comment">// store the sample variance (only applicable if i &gt; 1)</span>
<a name="l00366"></a>00366 
<a name="l00367"></a>00367                 real sampleVarArea = 0.0;
<a name="l00368"></a>00368                 real sampleVarTotalHeight = 0.0;
<a name="l00369"></a>00369                 <span class="keywordflow">if</span> (sampleNumber &gt; 1) {
<a name="l00370"></a>00370                    sampleVarArea =
<a name="l00371"></a>00371                       sequenceCollators[ci]-&gt;getSampleVarianceAreaScalar();
<a name="l00372"></a>00372                    sampleVarTotalHeight =
<a name="l00373"></a>00373                       sequenceCollators[ci]-&gt;getSampleVarianceTotalHeightScalar();
<a name="l00374"></a>00374                 }
<a name="l00375"></a>00375                 sampleVariancesArea[ci] = sampleVarArea;
<a name="l00376"></a>00376                 sampleVariancesTotalHeight[ci] = sampleVarTotalHeight;
<a name="l00377"></a>00377 
<a name="l00378"></a>00378                 <span class="comment">// log the sample as well</span>
<a name="l00379"></a>00379                 hists[ci]-&gt;publicLogMCMCSample(sequenceStateFilenames[ci], i);
<a name="l00380"></a>00380                 colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], i);
<a name="l00381"></a>00381                 sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], i);
<a name="l00382"></a>00382 
<a name="l00383"></a>00383                 <span class="comment">// add the sample variance to the collations file</span>
<a name="l00384"></a>00384                 std::ostringstream stm;
<a name="l00385"></a>00385                 stm &lt;&lt; <span class="stringliteral">&quot;Area scalar sample variance is \t&quot;</span> &lt;&lt; sampleVarArea
<a name="l00386"></a>00386                    &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00387"></a>00387                    &lt;&lt; <span class="stringliteral">&quot;Total height scalar sample variance is \t&quot;</span> &lt;&lt; sampleVarTotalHeight;
<a name="l00388"></a>00388                 <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(sequenceCollationFilenames[ci], stm.str());
<a name="l00389"></a>00389               }
<a name="l00390"></a>00390            }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392         } <span class="comment">// end change state for each histogram in turn</span>
<a name="l00393"></a>00393 
<a name="l00394"></a>00394         <span class="comment">// each histogram now has a new state which has been collated into</span>
<a name="l00395"></a>00395         <span class="comment">// its collator and its average has been updated</span>
<a name="l00396"></a>00396 
<a name="l00397"></a>00397         <span class="keywordflow">if</span> (thinning &amp;&amp; (i &gt;= burnin) &amp;&amp; ((i-burnin)%thinout == 0)) {
<a name="l00398"></a>00398            avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(overSequenceAvgCollFilename, i);
<a name="l00399"></a>00399            averageCollators.push_back(avgColl); <span class="comment">// keep the collation of averages</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401            real sumSequenceVariancesArea =
<a name="l00402"></a>00402                    avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e" title="Get the sum of the variances for an area-related scalar summary.">getSumVarianceAreaScalar</a>();
<a name="l00403"></a>00403            real sumSequenceVariancesTotalHeight =
<a name="l00404"></a>00404                    avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2" title="Get the sum of the variances for scalar summary total height.">getSumVarianceTotalHeightScalar</a>();
<a name="l00405"></a>00405 
<a name="l00406"></a>00406            <span class="comment">// add to the collation of averages log file</span>
<a name="l00407"></a>00407            std::ostringstream stm0;
<a name="l00408"></a>00408            stm0 &lt;&lt; <span class="stringliteral">&quot;Area scalar sum of variances of sequence averages \t&quot;</span>
<a name="l00409"></a>00409                 &lt;&lt; sumSequenceVariancesArea
<a name="l00410"></a>00410                 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00411"></a>00411                 &lt;&lt; <span class="stringliteral">&quot;Total height scalar sum of variances of sequence averages is \t&quot;</span>
<a name="l00412"></a>00412                 &lt;&lt; sumSequenceVariancesTotalHeight;
<a name="l00413"></a>00413 
<a name="l00414"></a>00414            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(overSequenceAvgCollFilename, stm0.str());
<a name="l00415"></a>00415 
<a name="l00416"></a>00416            <span class="comment">// now make the average over the collator of averages</span>
<a name="l00417"></a>00417            <span class="comment">// and collect that too!</span>
<a name="l00418"></a>00418            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> collavtemp = avgColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00419"></a>00419 
<a name="l00420"></a>00420            masterCollator += collavtemp; <span class="comment">// and collate it</span>
<a name="l00421"></a>00421 
<a name="l00422"></a>00422            <span class="comment">// W is the average sample variance over the sequences</span>
<a name="l00423"></a>00423            <span class="comment">// we have collected the sequence sample variances for our scalars</span>
<a name="l00424"></a>00424            real withinSequenceVarianceArea = 0.0;
<a name="l00425"></a>00425            real withinSequenceVarianceTotalHeight = 0.0;
<a name="l00426"></a>00426            <a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it;
<a name="l00427"></a>00427            <span class="keywordflow">for</span> (it = sampleVariancesArea.begin();
<a name="l00428"></a>00428                 it &lt; sampleVariancesArea.end(); it++) {
<a name="l00429"></a>00429               withinSequenceVarianceArea += *it;
<a name="l00430"></a>00430            }
<a name="l00431"></a>00431            withinSequenceVarianceArea /= (1.0*chains);
<a name="l00432"></a>00432 
<a name="l00433"></a>00433            <span class="keywordflow">for</span> (it = sampleVariancesTotalHeight.begin();
<a name="l00434"></a>00434                 it &lt; sampleVariancesTotalHeight.end(); it++) {
<a name="l00435"></a>00435               withinSequenceVarianceTotalHeight += *it;
<a name="l00436"></a>00436            }
<a name="l00437"></a>00437            withinSequenceVarianceTotalHeight /= (1.0*chains);
<a name="l00438"></a>00438 
<a name="l00439"></a>00439            <span class="comment">// B is n/(k-1)*sumSequenceVariances where n is number of states</span>
<a name="l00440"></a>00440            <span class="comment">// k is number of chains</span>
<a name="l00441"></a>00441            real betweenSequenceVarianceArea = 0.0;
<a name="l00442"></a>00442            real sampleVarianceOfSequenceAveragesArea = 0.0;
<a name="l00443"></a>00443            real betweenSequenceVarianceTotalHeight = 0.0;
<a name="l00444"></a>00444            real sampleVarianceOfSequenceAveragesTotalHeight = 0.0;
<a name="l00445"></a>00445 
<a name="l00446"></a>00446            <span class="keywordflow">if</span> (chains &gt; 1) {
<a name="l00447"></a>00447               betweenSequenceVarianceArea =
<a name="l00448"></a>00448                       sumSequenceVariancesArea*sampleNumber/(1.0*(chains-1));
<a name="l00449"></a>00449               sampleVarianceOfSequenceAveragesArea =
<a name="l00450"></a>00450                       sumSequenceVariancesArea/(1.0*(chains-1));
<a name="l00451"></a>00451 
<a name="l00452"></a>00452               betweenSequenceVarianceTotalHeight =
<a name="l00453"></a>00453                       sumSequenceVariancesTotalHeight*sampleNumber/(1.0*(chains-1));
<a name="l00454"></a>00454               sampleVarianceOfSequenceAveragesTotalHeight =
<a name="l00455"></a>00455                       sumSequenceVariancesTotalHeight/(1.0*(chains-1));
<a name="l00456"></a>00456            }
<a name="l00457"></a>00457 
<a name="l00458"></a>00458            <span class="comment">// estimated varV is (n-1)*W/n + B/n</span>
<a name="l00459"></a>00459            <span class="comment">// sqrt Rhat is sqrt(estimatedVarV/W)</span>
<a name="l00460"></a>00460            real estimatedVarVArea = 0.0;
<a name="l00461"></a>00461            real sqrtRhatArea = 0.0;
<a name="l00462"></a>00462            real estimatedVarVTotalHeight = 0.0;
<a name="l00463"></a>00463            real sqrtRhatTotalHeight = 0.0;
<a name="l00464"></a>00464 
<a name="l00465"></a>00465            <span class="keywordflow">if</span> (sampleNumber &gt; 1) {
<a name="l00466"></a>00466 
<a name="l00467"></a>00467               estimatedVarVArea =
<a name="l00468"></a>00468                 ((sampleNumber-1)*withinSequenceVarianceArea/(1.0*sampleNumber))
<a name="l00469"></a>00469                 + betweenSequenceVarianceArea/(1.0*sampleNumber);
<a name="l00470"></a>00470               <span class="keywordflow">if</span> (withinSequenceVarianceArea &gt; 0.0)
<a name="l00471"></a>00471                 sqrtRhatArea = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(estimatedVarVArea/withinSequenceVarianceArea);
<a name="l00472"></a>00472             
<a name="l00473"></a>00473                 estimatedVarVTotalHeight =
<a name="l00474"></a>00474                 ((sampleNumber-1)*withinSequenceVarianceTotalHeight/(1.0*sampleNumber))
<a name="l00475"></a>00475                 + betweenSequenceVarianceTotalHeight/(1.0*sampleNumber);
<a name="l00476"></a>00476             
<a name="l00477"></a>00477               <span class="keywordflow">if</span> (withinSequenceVarianceTotalHeight &gt; 0.0)
<a name="l00478"></a>00478                 sqrtRhatTotalHeight =
<a name="l00479"></a>00479                    <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(estimatedVarVTotalHeight/withinSequenceVarianceTotalHeight);
<a name="l00480"></a>00480            }
<a name="l00481"></a>00481 
<a name="l00482"></a>00482            <span class="comment">// store the convergence diagnostics</span>
<a name="l00483"></a>00483            withinSequenceVarianceAreaVec.push_back(withinSequenceVarianceArea);
<a name="l00484"></a>00484            betweenSequenceVarianceAreaVec.push_back(betweenSequenceVarianceArea);
<a name="l00485"></a>00485            estVarVAreaVec.push_back(estimatedVarVArea);
<a name="l00486"></a>00486            sqrtRhatAreaVec.push_back(sqrtRhatArea);
<a name="l00487"></a>00487 
<a name="l00488"></a>00488            withinSequenceVarianceTotalHeightVec.push_back(withinSequenceVarianceTotalHeight);
<a name="l00489"></a>00489            betweenSequenceVarianceTotalHeightVec.push_back(betweenSequenceVarianceTotalHeight);
<a name="l00490"></a>00490            estVarVTotalHeightVec.push_back(estimatedVarVTotalHeight);
<a name="l00491"></a>00491            sqrtRhatTotalHeightVec.push_back(sqrtRhatTotalHeight);
<a name="l00492"></a>00492 
<a name="l00493"></a>00493            std::ostringstream stm10;
<a name="l00494"></a>00494            stm10 &lt;&lt; <span class="stringliteral">&quot;Sample &quot;</span> &lt;&lt; sampleNumber &lt;&lt; <span class="stringliteral">&quot; (state &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;)\n&quot;</span>;
<a name="l00495"></a>00495            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, stm10.str());
<a name="l00496"></a>00496            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, stm10.str());
<a name="l00497"></a>00497 
<a name="l00498"></a>00498            <span class="comment">// log the sample variances</span>
<a name="l00499"></a>00499            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;Area scalar sample variances&quot;</span>,
<a name="l00500"></a>00500                            sampleVariancesArea);
<a name="l00501"></a>00501            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;Total height scalar sample variances&quot;</span>,
<a name="l00502"></a>00502                            sampleVariancesTotalHeight);
<a name="l00503"></a>00503 
<a name="l00504"></a>00504            <span class="comment">// and the rest</span>
<a name="l00505"></a>00505            std::ostringstream stm20;
<a name="l00506"></a>00506            stm20 &lt;&lt; <span class="stringliteral">&quot;Sum of variances of sequence averages \t&quot;</span> &lt;&lt; sumSequenceVariancesArea;
<a name="l00507"></a>00507            stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Sample variance of sequence averages \t&quot;</span>
<a name="l00508"></a>00508                                       &lt;&lt; sampleVarianceOfSequenceAveragesArea;
<a name="l00509"></a>00509            stm20  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Within sequence variance, W \t&quot;</span> &lt;&lt; withinSequenceVarianceArea;
<a name="l00510"></a>00510            stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Between sequence variance, B \t&quot;</span> &lt;&lt; betweenSequenceVarianceArea;
<a name="l00511"></a>00511            stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;estimated variance of v, var(v)  \t&quot;</span> &lt;&lt; estimatedVarVArea;
<a name="l00512"></a>00512            stm20 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;sqrtRhat  \t&quot;</span> &lt;&lt; sqrtRhatArea &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00513"></a>00513            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, stm20.str());
<a name="l00514"></a>00514 
<a name="l00515"></a>00515            std::ostringstream stm30;
<a name="l00516"></a>00516            stm30 &lt;&lt; <span class="stringliteral">&quot;Sum of variances of sequence averages \t&quot;</span> &lt;&lt;
<a name="l00517"></a>00517                 sumSequenceVariancesTotalHeight;
<a name="l00518"></a>00518            stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Sample variance of sequence averages \t&quot;</span> &lt;&lt;
<a name="l00519"></a>00519                 sampleVarianceOfSequenceAveragesTotalHeight;
<a name="l00520"></a>00520            stm30  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Within sequence variance, W \t&quot;</span> &lt;&lt;
<a name="l00521"></a>00521                 withinSequenceVarianceTotalHeight;
<a name="l00522"></a>00522            stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;Between sequence variance, B \t&quot;</span> &lt;&lt;
<a name="l00523"></a>00523                 betweenSequenceVarianceTotalHeight;
<a name="l00524"></a>00524            stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;estimated variance of v, var(v)  \t&quot;</span> &lt;&lt;
<a name="l00525"></a>00525                 estimatedVarVTotalHeight;
<a name="l00526"></a>00526            stm30 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="stringliteral">&quot;sqrtRhat  \t&quot;</span> &lt;&lt; sqrtRhatTotalHeight &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00527"></a>00527            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, stm30.str());
<a name="l00528"></a>00528 
<a name="l00529"></a>00529            sampleNumber++;
<a name="l00530"></a>00530            cout &lt;&lt; <span class="stringliteral">&quot;.&quot;</span>;
<a name="l00531"></a>00531         } <span class="comment">// finished logging</span>
<a name="l00532"></a>00532 
<a name="l00533"></a>00533         i++;
<a name="l00534"></a>00534 
<a name="l00535"></a>00535         <span class="comment">// back into loop</span>
<a name="l00536"></a>00536 
<a name="l00537"></a>00537       }    <span class="comment">// finished loop</span>
<a name="l00538"></a>00538       cancontinue = goodLoop;
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 
<a name="l00541"></a>00541       <span class="keywordflow">if</span> (cancontinue &amp;&amp; thinning) {
<a name="l00542"></a>00542         <span class="comment">// output the convergence diagnostics</span>
<a name="l00543"></a>00543         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;\n\n\n Final diagnostics&quot;</span>);
<a name="l00544"></a>00544         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;W&quot;</span>, withinSequenceVarianceAreaVec);
<a name="l00545"></a>00545         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00546"></a>00546         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;B&quot;</span>, betweenSequenceVarianceAreaVec);
<a name="l00547"></a>00547         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00548"></a>00548         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;estVarV&quot;</span>, estVarVAreaVec);
<a name="l00549"></a>00549         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00550"></a>00550         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;sqrtRhat&quot;</span>,sqrtRhatAreaVec);
<a name="l00551"></a>00551         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRAreaFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00552"></a>00552 
<a name="l00553"></a>00553         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;\n\n\n Final diagnostics&quot;</span>);
<a name="l00554"></a>00554         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;W&quot;</span>, withinSequenceVarianceTotalHeightVec);
<a name="l00555"></a>00555         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00556"></a>00556         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;B&quot;</span>, betweenSequenceVarianceTotalHeightVec);
<a name="l00557"></a>00557         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00558"></a>00558         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;estVarV&quot;</span>, estVarVTotalHeightVec);
<a name="l00559"></a>00559         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00560"></a>00560         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;sqrtRhat&quot;</span>,sqrtRhatTotalHeightVec);
<a name="l00561"></a>00561         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(GRTotalHeightFilename, <span class="stringliteral">&quot;&quot;</span>);
<a name="l00562"></a>00562       }
<a name="l00563"></a>00563 
<a name="l00564"></a>00564       <span class="comment">// free the random number generator</span>
<a name="l00565"></a>00565       gsl_rng_free (rgsl);
<a name="l00566"></a>00566 
<a name="l00567"></a>00567       <span class="comment">// check cancontinue;</span>
<a name="l00568"></a>00568 
<a name="l00569"></a>00569       <span class="keywordflow">if</span> (cancontinue) {
<a name="l00570"></a>00570         cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully&quot;</span> &lt;&lt; endl;
<a name="l00571"></a>00571         cout &lt;&lt; <span class="stringliteral">&quot;Check output files &quot;</span> &lt;&lt; GRAreaFilename
<a name="l00572"></a>00572                 &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; GRTotalHeightFilename
<a name="l00573"></a>00573                 &lt;&lt; <span class="stringliteral">&quot; for diagnostics&quot;</span> &lt;&lt; endl;
<a name="l00574"></a>00574         cout &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; overSequenceAvgCollFilename
<a name="l00575"></a>00575                 &lt;&lt; <span class="stringliteral">&quot; for averages over the squences&quot;</span> &lt;&lt; endl;
<a name="l00576"></a>00576         cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l00577"></a>00577               &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l00578"></a>00578               &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l00579"></a>00579               &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l00580"></a>00580       }
<a name="l00581"></a>00581       <span class="keywordflow">else</span> {
<a name="l00582"></a>00582         cout &lt;&lt; <span class="stringliteral">&quot;MCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l00583"></a>00583         cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore: \n:&quot;</span>
<a name="l00584"></a>00584               &lt;&lt; GRAreaFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00585"></a>00585               &lt;&lt; GRTotalHeightFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00586"></a>00586               &lt;&lt; overSequenceAvgCollFilename &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00587"></a>00587               &lt;&lt; baseSequenceStateFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n&quot;</span>
<a name="l00588"></a>00588               &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n&quot;</span>
<a name="l00589"></a>00589               &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
<a name="l00590"></a>00590       }
<a name="l00591"></a>00591 
<a name="l00592"></a>00592       vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l00593"></a>00593       <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ait++) {
<a name="l00594"></a>00594         <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l00595"></a>00595       }
<a name="l00596"></a>00596 
<a name="l00597"></a>00597       vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l00598"></a>00598       <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); acit++) {
<a name="l00599"></a>00599         <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l00600"></a>00600       }
<a name="l00601"></a>00601 
<a name="l00602"></a>00602       <span class="keywordflow">for</span> (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {
<a name="l00603"></a>00603         <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l00604"></a>00604       }
<a name="l00605"></a>00605    }
<a name="l00606"></a>00606 
<a name="l00607"></a>00607    <span class="keywordflow">return</span> 0;
<a name="l00608"></a>00608 
<a name="l00609"></a>00609   } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRManual_8cpp.shtml">MCMCGRManual.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
