<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: sp_check_visitor.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sp__check__visitor_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">sp_check_visitor.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="sp__check__visitor_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef __SP_CHECK_HPP__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define __SP_CHECK_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &quot;<a class="code" href="mappedFobj_8hpp.shtml" title="MappedFobj definition and declaration.">mappedFobj.hpp</a>&quot;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;real.hpp&quot;</span>
<a name="l00026"></a>00026 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>subpavings {
<a name="l00036"></a>00036 
<a name="l00037"></a>00037     <span class="keyword">class </span>SPnode;
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">00039</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a> {
<a name="l00040"></a>00040 
<a name="l00041"></a>00041         
<a name="l00042"></a>00042         <span class="keyword">public</span>:
<a name="l00043"></a>00043   
<a name="l00044"></a><a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml#a041470491ae2202032abc1f23293d5d0">00044</a>       <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml#a041470491ae2202032abc1f23293d5d0">~SPCheckVisitor</a>(){};
<a name="l00045"></a>00045   
<a name="l00047"></a>00047             <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml#ad5fd0bde6d256676290e790c6387f01a" title="The visit operation.">visit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span> = 0;
<a name="l00048"></a>00048       
<a name="l00053"></a>00053             <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml#a6ea58710e956211e24fe4997eed3d94f" title="Get the result of the visit operation.">getResult</a>() <span class="keyword">const</span> = 0;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056     };
<a name="l00057"></a>00057     <span class="comment">// end of SPCheckVisitor class</span>
<a name="l00058"></a>00058   
<a name="l00059"></a>00059   
<a name="l00066"></a><a class="code" href="classsubpavings_1_1SplittableCheck.shtml">00066</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplittableCheck.shtml" title="A type that visits  SPnodes to check if they are splittable.">SplittableCheck</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a> {
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         
<a name="l00069"></a>00069     <span class="keyword">public</span>:
<a name="l00070"></a>00070 
<a name="l00072"></a>00072       <a class="code" href="classsubpavings_1_1SplittableCheck.shtml#a267ba85ab1520b5f70dec3d3c049d467" title="Constructor.">SplittableCheck</a>();
<a name="l00073"></a>00073       
<a name="l00074"></a>00074       <a class="code" href="classsubpavings_1_1SplittableCheck.shtml#ab4597cc8f9818adfbf00074b5343f870">~SplittableCheck</a>();
<a name="l00075"></a>00075 
<a name="l00083"></a>00083       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SplittableCheck.shtml#a67b0655c14ae3573fd8f9c954491c51e" title="The visit operation.">visit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span>;
<a name="l00084"></a>00084       
<a name="l00086"></a>00086       <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplittableCheck.shtml#a9b48f6f958be90822fcb39b8ec053a09" title="Get the result of the visit operation.">getResult</a>() <span class="keyword">const</span>;
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="keyword">private</span>:
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classsubpavings_1_1SplittableCheck.shtml#aafe6ff513102db00eac0f1e5ed07e91c">00090</a>       <span class="keyword">mutable</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplittableCheck.shtml#aafe6ff513102db00eac0f1e5ed07e91c">result</a>;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093       
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   };
<a name="l00096"></a>00096   <span class="comment">// end of SplittableCheck class</span>
<a name="l00097"></a>00097   
<a name="l00119"></a><a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml">00119</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml" title="A type that visits  SPnodes to check if they meet an interval image tolerance requirement.">IntervalImageToleranceCheck</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a> {
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         
<a name="l00122"></a>00122         <span class="keyword">public</span>:
<a name="l00123"></a>00123   
<a name="l00130"></a>00130             <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a1d73890a63ae9fb7bc3e20840485bdd9">IntervalImageToleranceCheck</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, cxsc::real tol);
<a name="l00131"></a>00131       
<a name="l00132"></a>00132       <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#aff7db09958c3b8f16bcfd1656bec3771">~IntervalImageToleranceCheck</a>();
<a name="l00133"></a>00133 
<a name="l00145"></a>00145             <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a47430de6c645ae717791f17425764ea4" title="The visit operation.">visit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span>;
<a name="l00146"></a>00146       
<a name="l00148"></a>00148             <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a02946bab9ff32b818f246a418b6e5b96" title="Get the result of the visit operation.">getResult</a>() <span class="keyword">const</span>;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     <span class="keyword">private</span>:
<a name="l00151"></a>00151 
<a name="l00152"></a>00152       <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a1d73890a63ae9fb7bc3e20840485bdd9">IntervalImageToleranceCheck</a>();
<a name="l00153"></a>00153       
<a name="l00154"></a><a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a596c18c976319d44ac404059b89f6226">00154</a>       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a596c18c976319d44ac404059b89f6226">fobj</a>;
<a name="l00155"></a><a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a32e81664f6d68908ac63b89e5b24afa7">00155</a>             <span class="keyword">const</span> cxsc::real <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#a32e81664f6d68908ac63b89e5b24afa7">tolerance</a>;
<a name="l00156"></a>00156       
<a name="l00157"></a><a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#acde9d9bfcbfc1d39c3546aa3a1772374">00157</a>       <span class="keyword">mutable</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1IntervalImageToleranceCheck.shtml#acde9d9bfcbfc1d39c3546aa3a1772374">result</a>;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159     };
<a name="l00160"></a>00160     <span class="comment">// end of IntervalImageToleranceCheck class</span>
<a name="l00161"></a>00161   
<a name="l00189"></a><a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml">00189</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml" title="A type that visits  SPnodes to check if they meet a &#39;Reimann Difference&#39; tolerance requirement...">ReimannDiffToleranceCheck</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a> {
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         
<a name="l00192"></a>00192         <span class="keyword">public</span>:
<a name="l00193"></a>00193   
<a name="l00200"></a>00200             <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#aefe8d51eaccb256b3631296a6413a799">ReimannDiffToleranceCheck</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, cxsc::real tol);
<a name="l00201"></a>00201       
<a name="l00202"></a>00202       <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#a85ec1af41f9cb2d7a4b34ceda35be98b">~ReimannDiffToleranceCheck</a>();
<a name="l00203"></a>00203 
<a name="l00215"></a>00215             <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#a2b5d9ad63206b70e195b5044fec56e39" title="The visit operation.">visit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span>;
<a name="l00216"></a>00216       
<a name="l00218"></a>00218             <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#a61eb963b4e6767a29479f37b32c23ce8" title="Get the result of the visit operation.">getResult</a>() <span class="keyword">const</span>;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     <span class="keyword">private</span>:
<a name="l00221"></a>00221 
<a name="l00222"></a>00222       <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#aefe8d51eaccb256b3631296a6413a799">ReimannDiffToleranceCheck</a>();
<a name="l00223"></a>00223       
<a name="l00224"></a><a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#ad9e4145536f0654d9982cc86931c1f27">00224</a>       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#ad9e4145536f0654d9982cc86931c1f27">fobj</a>;
<a name="l00225"></a><a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#a169f5efe98a632fc95bc8bd39f963193">00225</a>             <span class="keyword">const</span> cxsc::real <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#a169f5efe98a632fc95bc8bd39f963193">tolerance</a>;
<a name="l00226"></a>00226       
<a name="l00227"></a><a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#ad750609be6399d2f013430a6651420ca">00227</a>       <span class="keyword">mutable</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1ReimannDiffToleranceCheck.shtml#ad750609be6399d2f013430a6651420ca">result</a>;
<a name="l00228"></a>00228 
<a name="l00229"></a>00229     };
<a name="l00230"></a>00230     <span class="comment">// end of ReimannDiffToleranceCheck class</span>
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 } <span class="comment">// end namespace subpavings</span>
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sp__check__visitor_8hpp.shtml">sp_check_visitor.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
