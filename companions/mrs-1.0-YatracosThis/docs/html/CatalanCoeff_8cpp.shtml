<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CatalanCoeff.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('CatalanCoeff_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">CatalanCoeff.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Definitions for Computing Catalan Coefficients and their Frequencies.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="CatalanCoeff_8hpp_source.shtml">CatalanCoeff.hpp</a>&quot;</code><br/>
</div>
<p><a href="CatalanCoeff_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">getStringState</a> (vector&lt; int &gt; intState)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">getNextState</a> (vector&lt; int &gt; currSState, int nodeI)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a> (int num)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">Catalan</a> (int num)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; vector&lt; int &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#a5f0f6ac6988917d707fc53d422077409">emptyStates</a> (vector&lt; vector&lt; int &gt; &gt; SStates)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CatalanCoeff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Definitions for Computing Catalan Coefficients and their Frequencies. </p>

<p>Definition in file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a6808f01fc81a71c5e3544ba056ce3af1"></a><!-- doxytag: member="CatalanCoeff.cpp::Catalan" ref="a6808f01fc81a71c5e3544ba056ce3af1" args="(int num)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long double <a class="el" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">Catalan</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to compute the Catalan number </p>

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00094">94</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>

<p>Referenced by <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00121">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> endNum = num-1;
  <span class="keywordtype">int</span> i;
  <span class="keywordtype">long</span> <span class="keywordtype">double</span> CatNum = 1;
  <span class="keywordflow">if</span>(num==0 || num==1)
  <span class="keywordflow">return</span> 1;
  <span class="keywordflow">for</span> (i=0; i &lt; endNum; i++)
  {
    CatNum *= (2.0*num - i)/(1.0*num - i);
  }
  <span class="keywordflow">return</span> CatNum;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5f0f6ac6988917d707fc53d422077409"></a><!-- doxytag: member="CatalanCoeff.cpp::emptyStates" ref="a5f0f6ac6988917d707fc53d422077409" args="(vector&lt; vector&lt; int &gt; &gt; SStates)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; vector&lt;int&gt; &gt; <a class="el" href="CatalanCoeff_8cpp.shtml#a5f0f6ac6988917d707fc53d422077409">emptyStates</a> </td>
          <td>(</td>
          <td class="paramtype">vector&lt; vector&lt; int &gt; &gt;&#160;</td>
          <td class="paramname"><em>SStates</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to empty vector&lt; vector&lt;int&gt; &gt; States </p>

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00110">110</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">while</span> ( !SStates.empty())
  SStates.pop_back();
  <span class="comment">/*</span>
<span class="comment">  if (SStates.empty())</span>
<span class="comment">  cout &lt;&lt; &quot;state space emptied&quot; &lt;&lt; endl;</span>
<span class="comment">  */</span>
  <span class="keywordflow">return</span> SStates;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a254b5f00927ec8c755c78a1c1a4092a1"></a><!-- doxytag: member="CatalanCoeff.cpp::factorial" ref="a254b5f00927ec8c755c78a1c1a4092a1" args="(int num)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long int <a class="el" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to compute factorials should use GSL factorial </p>

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00083">83</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>

<p>Referenced by <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00121">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (num==1 || num==0)
    <span class="keywordflow">return</span> 1;
  <span class="keywordflow">else</span>
    <span class="keywordflow">return</span> <a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a>(num-1)*num;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9627831e826937a7113bc8cd7b6b6f14"></a><!-- doxytag: member="CatalanCoeff.cpp::getNextState" ref="a9627831e826937a7113bc8cd7b6b6f14" args="(vector&lt; int &gt; currSState, int nodeI)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;int&gt; <a class="el" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">getNextState</a> </td>
          <td>(</td>
          <td class="paramtype">vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>currSState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nodeI</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to get next state after split </p>

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00050">50</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>

<p>Referenced by <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00121">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  vector&lt;int&gt; nextSState;
  <span class="keywordtype">int</span> i = nodeI;
  <span class="keywordtype">int</span> j;
  <span class="keywordtype">int</span> currSStateSize = currSState.size();
  <span class="keywordtype">int</span> currNode, nextNode;
  currNode = currSState[i];
  nextNode = currNode + 1;
  <span class="comment">//concatenate to get nextSState</span>
  <span class="keywordflow">for</span> (j=0; j &lt;i; j++)
  {
    nextSState.push_back(currSState[j]); 
  <span class="comment">//cout &lt;&lt; nextSState[j] &lt;&lt; endl;</span>
  }

  nextSState.push_back(nextNode);
  nextSState.push_back(nextNode);

  <span class="keywordflow">for</span> (j=(i+1); j &lt; currSStateSize; j++)
  {
    nextSState.push_back(currSState[j]); 
  <span class="comment">//cout &lt;&lt; nextSState[j] &lt;&lt; endl;</span>
  }
  <span class="comment">//while(!nextSState.empty())</span>
  <span class="comment">//nextSState.pop_back();</span>
  <span class="keywordflow">return</span> nextSState;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa461afbfcfb8c1fda93e7ca635f8e949"></a><!-- doxytag: member="CatalanCoeff.cpp::getStringState" ref="aa461afbfcfb8c1fda93e7ca635f8e949" args="(vector&lt; int &gt; intState)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">getStringState</a> </td>
          <td>(</td>
          <td class="paramtype">vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>intState</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Function to convert int state to string state </p>

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00034">34</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>

<p>References <a class="el" href="CatalanCoeff_8hpp_source.shtml#l00071">to_string()</a>.</p>

<p>Referenced by <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00121">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">string</span> stateString;
  vector&lt;int&gt;::iterator iterIntState;

  iterIntState = intState.begin();
  <span class="keywordflow">while</span> (iterIntState != intState.end())
  {
    <span class="keywordtype">int</span> c =  *iterIntState++;
    stateString += <a class="code" href="CatalanCoeff_8hpp.shtml#a6080956340fc2c25c8caf627e74ddbc3">to_string</a>(c);
  }
  <span class="keywordflow">return</span> stateString;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="CatalanCoeff.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00121">121</a> of file <a class="el" href="CatalanCoeff_8cpp_source.shtml">CatalanCoeff.cpp</a>.</p>

<p>References <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00094">Catalan()</a>, <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00083">factorial()</a>, <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00050">getNextState()</a>, and <a class="el" href="CatalanCoeff_8cpp_source.shtml#l00034">getStringState()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> i; <span class="comment">//for &#39;for&#39; loops</span>

  <span class="comment">//level to stop splitting</span>
  <span class="keywordtype">int</span> L, L1; <span class="comment">//this means each state has L leaves resulting from k splits</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Number of splits? &quot;</span>;
  cin &gt;&gt; L1;
  L = L1 + 1;

  <span class="comment">//number of splits</span>
  <span class="keywordtype">int</span> k;

  <span class="comment">//number of distinct states or Catalan number</span>
  <span class="keywordtype">long</span> <span class="keywordtype">double</span> Csplit[L];

  <span class="comment">//total number of possible paths to reach any state at level L</span>
  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> totalPaths[L];

  <span class="comment">//container for states</span>
  <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a> currStates, nextStates;
  States::iterator iterCurrStates;
  <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> currState, nextState;
  State::iterator iterCurrState;

  <span class="comment">// a map for the Catalan Coefficients</span>
  <span class="keyword">typedef</span> map&lt;State, int, LexicoSorting&lt;State&gt; &gt; StatesMap;
  StatesMap StateCount;
  StatesMap::iterator iterStateCount;
  std::pair&lt;StatesMap::iterator, bool&gt; boolStateCount;

  <span class="comment">//state space at 0 split</span>
  <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> state0;
  state0.push_back(0);

  StateCount.insert(make_pair(state0,1));

  Csplit[0]=1;
  totalPaths[0]=1;

  <span class="comment">//ofstream to output CatalanCoefficient and CatalanFrequencies to .txt.</span>
  ofstream oss;

  clock_t start, end;
  <span class="keywordtype">double</span> timeTaken;

  <span class="comment">//Loop to get Catalan coefficients and frequencies using L-R leaf-depth encoding</span>
  <span class="keywordflow">for</span> (k=1; k &lt; L; k++)  <span class="comment">//for a given number of splits</span>
  {
    <span class="comment">//Set up string for filename to output the Catalan coefficients and frequencies</span>
    <span class="keywordtype">string</span> fileNameCC, fileNameCF;
    fileNameCC = <span class="stringliteral">&quot;CatalanCoefficientSplit&quot;</span>;
    fileNameCF = <span class="stringliteral">&quot;CatalanFrequencySplit&quot;</span>;
    std::ostringstream stm1;  <span class="comment">//convert k to std::ostringstream</span>

    start=clock();  <span class="comment">//record the time taken to get the Catalan coefficient and frequencies </span>

    <span class="comment">//Get number of nodes, Catalan number and total possible paths for each split</span>
    Csplit[k] = <a class="code" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">Catalan</a>(k); 
    totalPaths[k] = <a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a>(k);
    cout &lt;&lt; <span class="stringliteral">&quot;========================================&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;At &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot; splits:&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; Csplit[k] &lt;&lt; <span class="stringliteral">&quot; distinct states &quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; totalPaths[k] &lt;&lt; <span class="stringliteral">&quot; possible paths &quot;</span> &lt;&lt; endl;

    <span class="comment">//Set up an empty map to store new states</span>
    StatesMap newStateCount;
    StatesMap::iterator iterNewStateCount;
    std::pair&lt;StatesMap::iterator, bool&gt; boolNewStateCount;

    <span class="comment">//for each state in current states map, StateCount</span>
    <span class="keywordflow">for</span> (iterStateCount=StateCount.begin(); iterStateCount != StateCount.end(); iterStateCount++)
    {
      currState = iterStateCount-&gt;first;  <span class="comment">//current state in current states map</span>
      <span class="comment">//cout &lt;&lt; &quot;Current state:&quot; &lt;&lt; getStringState(currState) &lt;&lt; endl;</span>

      <span class="comment">//for each node in current state</span>
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> node = 0; node &lt; currState.size(); node++)
      {
  <span class="comment">//get state for each node in current state</span>
  nextState = <a class="code" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">getNextState</a>(currState, node);
  <span class="comment">//cout &lt;&lt; &quot;Next state: &quot; &lt;&lt; getStringState(nextState) &lt;&lt; endl;</span>

  <span class="comment">//insert the new state into newStateMap</span>
  boolNewStateCount = newStateCount.insert(make_pair(nextState, 1));
  <span class="comment">//Check if insertion is successful - a unique set will render a successful insertion.</span>
  <span class="keywordflow">if</span>(!(boolNewStateCount.second)) <span class="comment">//if state is not unique</span>
  {
    <span class="comment">//increment by the Catalan coefficient of the current state producing this next state</span>
          newStateCount[nextState] += StateCount[currState];  
    <span class="comment">//cout &lt;&lt; &quot;this state already exist&quot;  &lt;&lt; endl;</span>
  }  <span class="comment">//end of &quot;non-unique state&quot;</span>
  <span class="keywordflow">else</span>
  {
          <span class="comment">//set the count of this next state as the Catalan coefficient of current state</span>
          newStateCount[nextState] = StateCount[currState];
          <span class="comment">//cout &lt;&lt; &quot;this is a unique state&quot; &lt;&lt; endl;</span>
  }  <span class="comment">//end of &quot;unique state&quot;</span>
      } <span class="comment">//end of looping over node in current state</span>
    } <span class="comment">//end of looping through all Ck states in current states map</span>

    cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; newStateCount.size() &lt;&lt; endl;
    <span class="comment">//cout &lt;&lt; &quot; distinct states with the following breakdown:&quot; &lt;&lt; endl; </span>

    <span class="comment">//Catalan Coefficients</span>
    <span class="comment">//Output states with corresponding counts in .txt.</span>
    stm1 &lt;&lt; k; <span class="comment">//name file according to the number of splits k</span>
    fileNameCC += stm1.str();
    fileNameCC += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(fileNameCC.c_str());

    <span class="comment">//set up a vector for the number of paths leading to each state in newStateCount</span>
    vector&lt;int&gt; StatePathVec;
    vector&lt;int&gt;::iterator iterStatePathVec;

    <span class="comment">//set up a map for the frequencies corresponding to state paths</span>
    map&lt;int, int, less&lt;int&gt; &gt; StateFreqMap;
    map&lt;int, int, less&lt;int&gt; &gt;::iterator iterStateFreqMap;
    std::pair&lt;map&lt;int, int, less&lt;int&gt; &gt;::iterator, <span class="keywordtype">bool</span>&gt; boolStateFreqMap;
    <span class="keywordtype">int</span> Path;

    <span class="keywordflow">for</span>(iterNewStateCount=newStateCount.begin(); 
        iterNewStateCount != newStateCount.end(); iterNewStateCount++)
    {
      <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> thisState = iterNewStateCount-&gt;first;
      <span class="comment">//cout &lt;&lt; getStringState(thisState) &lt;&lt; &quot;\t\t&quot; &lt;&lt; iterNewStateCount-&gt;second &lt;&lt; endl;</span>
      oss &lt;&lt; <a class="code" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">getStringState</a>(thisState) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (iterNewStateCount-&gt;second)&lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;

      <span class="comment">//Find frequencies for state paths</span>
      Path = iterNewStateCount-&gt;second;
      boolStateFreqMap = StateFreqMap.insert(make_pair(Path, 1));

      <span class="keywordflow">if</span> (!(boolStateFreqMap.second)) <span class="comment">//if there is more than one state with Path</span>
      {
        StateFreqMap[Path] += 1;
      }
    }

    <span class="comment">//close ostream for CatalanCoefficientSplitk.txt</span>
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;State counts output to &quot;</span> &lt;&lt; fileNameCC &lt;&lt; endl;


    <span class="comment">//output Catalan Frequencies to.txt</span>
    fileNameCF += stm1.str();
    fileNameCF += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(fileNameCF.c_str());
    oss &lt;&lt; <span class="stringliteral">&quot;Paths&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;States&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    <span class="comment">//Output to .txt</span>
    <span class="keywordflow">for</span> (iterStateFreqMap = StateFreqMap.begin(); iterStateFreqMap != StateFreqMap.end(); iterStateFreqMap++)
    {
      <span class="comment">//cout &lt;&lt; &quot;There are &quot; &lt;&lt; iterStateFreqMap-&gt;second &lt;&lt; &quot; states with &quot; </span>
      <span class="comment">//     &lt;&lt; iterStateFreqMap-&gt;first &lt;&lt; &quot; paths.&quot; &lt;&lt; endl;</span>
      oss &lt;&lt; iterStateFreqMap-&gt;first &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; iterStateFreqMap-&gt;second &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    }

    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;State frequencies output to &quot;</span> &lt;&lt; fileNameCF &lt;&lt; endl;


    <span class="comment">//Empty current states map</span>
    StateCount.clear();

    <span class="keywordflow">if</span> ( StateCount.empty())
    {
      <span class="comment">//set nextStateCount map to be StateCount to continue loop</span>
      <span class="comment">//cout &lt;&lt; &quot;space emptied&quot; &lt;&lt; endl;</span>
      StateCount = newStateCount;
    }
    <span class="keywordflow">else</span>
    {
      cout &lt;&lt; <span class="stringliteral">&quot;space not emptied. Should not proceed.&quot;</span> &lt;&lt; endl;
      <span class="keywordflow">break</span>;
    }

    end=clock();
    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
  }

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="CatalanCoeff_8cpp.shtml">CatalanCoeff.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
