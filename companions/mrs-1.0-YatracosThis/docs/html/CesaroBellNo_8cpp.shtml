<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CesaroBellNo.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('CesaroBellNo_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">CesaroBellNo.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>MRS example using CesaroBellNo function Using an example function object class with <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> class.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;iostream&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;math.h&gt;</code><br/>
<code>#include &lt;getopt.h&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &quot;interval.hpp&quot;</code><br/>
<code>#include &quot;imath.hpp&quot;</code><br/>
<code>#include &quot;rmath.hpp&quot;</code><br/>
<code>#include &quot;intvector.hpp&quot;</code><br/>
<code>#include &quot;ivector.hpp&quot;</code><br/>
<code>#include &quot;rvector.hpp&quot;</code><br/>
<code>#include &quot;imatrix.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_rng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;numeric&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;ctype.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="SmallClasses_8hpp_source.shtml">SmallClasses.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="FCesaroBellNo_8hpp_source.shtml">FCesaroBellNo.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>&quot;</code><br/>
</div>
<p><a href="CesaroBellNo_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="CesaroBellNo_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>MRS example using CesaroBellNo function Using an example function object class with <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> class. </p>

<p>Definition in file <a class="el" href="CesaroBellNo_8cpp_source.shtml">CesaroBellNo.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="CesaroBellNo.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000017">Todo:</a></b></dt><dd>replace with C-XSC constant PI </dd></dl>

<p>Definition at line <a class="el" href="CesaroBellNo_8cpp_source.shtml#l00063">63</a> of file <a class="el" href="CesaroBellNo_8cpp_source.shtml">CesaroBellNo.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="FCesaroBellNo_8hpp_source.shtml#l00061">FCesaroBellNo::get_interval_calls()</a>, <a class="el" href="MRSampler_8hpp_source.shtml#l00127">MRSampler::get_n_topologies()</a>, <a class="el" href="FCesaroBellNo_8hpp_source.shtml#l00062">FCesaroBellNo::get_real_calls()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00423">MRSampler::ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00537">MRSampler::ImportanceSampleManyQuasi()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00381">ISSample::IntegralEstimate()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00039">mean()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00403">ISSample::Mean()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00084">MSE()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00450">ISSample::PrintMeans()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="toolz_8cpp_source.shtml#l00055">var()</a>.</p>
<div class="fragment"><pre class="fragment">{
    ios::sync_with_stdio ();    <span class="comment">// call this function so iostream works with stdio</span>
    cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>

    <span class="comment">// set default values</span>
    <span class="keywordtype">int</span> n_boxes = 100;
    <span class="keywordtype">int</span> n_samples = 1000;
    <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
    <span class="keywordtype">unsigned</span> theSeed = 0;
  <span class="keywordtype">unsigned</span> theMethod = 0;
    <span class="keywordtype">bool</span> UseResidualSampling = <span class="keyword">false</span>;
  <span class="keywordtype">long</span> Nrep = 1;

    <span class="keywordflow">if</span> (argc &gt;= 2)
    {
        sscanf (argv[1], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
        <span class="keywordflow">if</span> (argc &gt;= 3)
        {
            sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);

            <span class="keywordflow">if</span> (argc &gt;= 4)
                sscanf (argv[3], <span class="stringliteral">&quot;%i&quot;</span>, &amp;theSeed);
            <span class="keywordflow">if</span> (argc &gt;= 5)
                sscanf (argv[4], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theMethod);  <span class="comment">//0 = IMPSAM-PseudoRnd, 1 = IMPSAM-QuasiRnd</span>
      <span class="keywordflow">if</span> (argc &gt;= 6)
        sscanf (argv[5], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;Nrep);

            <span class="keywordflow">if</span> (argc &gt;= 7)
                cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS  &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt; &lt;method(IS-pseudo/IS-quasi::0/1)&gt; &lt;Nrep&gt;; &quot;</span>
             &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
        }

        <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS  &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt; &lt;method(IS-pseudo/IS-quasi::0/1)&gt; &lt;Nrep&gt;; &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
    }

    cout &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes
       &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed
       &lt;&lt; endl; <span class="comment">//getchar();</span>
    cout &lt;&lt; <span class="stringliteral">&quot;theMethod: &quot;</span> &lt;&lt; theMethod &lt;&lt; <span class="stringliteral">&quot;Nreps: &quot;</span> &lt;&lt; Nrep &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;UseResidualSampling: &quot;</span> &lt;&lt; UseResidualSampling &lt;&lt; endl;

  <span class="keywordtype">bool</span> REJSAM = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> IMPSAM = <span class="keyword">true</span>;
  <span class="keywordtype">bool</span> PSEUDO = <span class="keyword">true</span>;       <span class="comment">//when false we use Quasi-random streams</span>

  <span class="keywordflow">if</span> (theMethod == 0)
  {
    REJSAM = <span class="keyword">false</span>;
    IMPSAM = <span class="keyword">true</span>;
    PSEUDO = <span class="keyword">true</span>;
  }
  <span class="keywordflow">if</span> (theMethod == 1)
  {
    REJSAM = <span class="keyword">false</span>;
    IMPSAM = <span class="keyword">true</span>;
    PSEUDO = <span class="keyword">false</span>;
  }

  <span class="comment">//Parameters specific to the CesaroBellNo target</span>
  real n_in_nthBellNo=2;
  interval DomainCesaroBellNo(0.0,3.14159265358979323846264338328); 
    <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
    <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;

    <span class="comment">// make the function object</span>
  <a class="code" href="classFCesaroBellNo.shtml">FCesaroBellNo</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(n_in_nthBellNo, DomainCesaroBellNo, UseLogPi);

  clock_t T1 = clock (), T2, T3;
    <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
    <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, n_boxes, Alb, theSeed, (use_f_scale == 1));
  T2 = clock ();

<span class="comment">//</span>
  <span class="keywordtype">double</span>  Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;
  vector&lt;double&gt; results(Nrep);
  vector&lt;double&gt; errests(Nrep);
  cout &lt;&lt; <span class="stringliteral">&quot;begin REPS ... \n&quot;</span> &lt;&lt; endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> irep = 0; irep &lt; Nrep; irep++)
  {

    <span class="keywordflow">if</span> (IMPSAM)
    {
      <a class="code" href="classISSample.shtml" title="A class for the status of an Importance Sampler.">ISSample</a> is_sample;
      <span class="keywordflow">if</span> (PSEUDO)
        {
          cout &lt;&lt; <span class="stringliteral">&quot;before ImportanceSampleMany&quot;</span> &lt;&lt; endl;
          theSampler.ImportanceSampleMany (n_samples, UseResidualSampling, 1, is_sample);
        }
      <span class="keywordflow">else</span>
        {
          cout &lt;&lt; <span class="stringliteral">&quot;before ImpSampleManyQuasi&quot;</span> &lt;&lt; endl;
          theSampler.ImportanceSampleManyQuasi (n_samples,
                                              UseResidualSampling,
                                              is_sample);
        }
      vector&lt;real&gt; integral_ests(theSampler.get_n_topologies());
      <span class="keywordtype">double</span> IntegralEstimate = _double (is_sample.<a class="code" href="classISSample.shtml#ab2913a50ee258c5b55d91202ac35ff00">IntegralEstimate</a> (integral_ests));
      results[irep] = IntegralEstimate;
      <span class="comment">//cout &lt;&lt; &quot;is_sample IU, N, N: &quot; &lt;&lt; is_sample.EnvelopeIntegral &lt;&lt; &quot; &quot; &lt;&lt; is_sample.Samples.size() &lt;&lt; &quot; &quot; &lt;&lt; is_sample.Samples.size() &lt;&lt; endl;</span>
      cout &lt;&lt; <span class="stringliteral">&quot;ISSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
      <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;size_t(theSampler.get_n_topologies()); i++){ cout &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; integral_ests[i] &lt;&lt; endl; }
      <span class="comment">//      cout &lt;&lt; &quot;ISSampleMany mean: \n&quot; &lt;&lt; is_sample.Mean () &lt;&lt; endl;</span>
      vector&lt;rvector&gt; means = is_sample.<a class="code" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972" title="Sample mean of lableled points.">Mean</a>();
      is_sample.<a class="code" href="classISSample.shtml#a38b62082187bfa35faa6564b0ce874f7" title="Print labeled means.">PrintMeans</a>(cout);
      <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;means.size(); i++){cout &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; i &lt;&lt; endl &lt;&lt; <span class="stringliteral">&quot;mean: &quot;</span> &lt;&lt; endl &lt;&lt; means[i] &lt;&lt; endl; }
      <span class="comment">//  cout &lt;&lt; &quot;ISSampleMany sample: \n&quot; ; is_sample.Print(cout); cout &lt;&lt; endl;</span>
    }
  }             <span class="comment">//REPS loop</span>

  cout &lt;&lt; <span class="stringliteral">&quot;after Reps loop &quot;</span> &lt;&lt; endl;

  cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.get_interval_calls () &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.get_real_calls () /
    (double) Nrep &lt;&lt; endl;

  <span class="keywordflow">if</span>(Nrep &gt; 1)
  {
    <span class="keywordtype">double</span> themean = <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (Nrep, (&amp;results[0]));
    <span class="keywordtype">double</span> thevar = <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a> (Nrep, (&amp;results[0]));
    <span class="keywordtype">double</span> mean_errest = <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (Nrep, (&amp;errests[0]));
    cout &lt;&lt; <span class="stringliteral">&quot;mean, stddev, stddev/mean, whMSE, whRMSE: &quot;</span> &lt;&lt; themean &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt;
      <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (thevar) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; (<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (thevar) / themean) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (1.0,
                                                                       Nrep,
                                                                       (&amp;results[0]))
      &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (<a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (1.0, Nrep, (&amp;results[0]))) &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;mean err est: &quot;</span> &lt;&lt; mean_errest &lt;&lt; endl;
  }

  <span class="comment">//---------------------------------------------------------------------------------- -</span>
  T3 = clock ();
  <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> &lt;&lt;
    Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per replication: &quot;</span> &lt;&lt; Ptime + Stime / (double) Nrep &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate per replication: &quot;</span> &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (Nrep*n_samples) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;# N interval function evals: &quot;</span> &lt;&lt; 2 *
    n_boxes &lt;&lt; <span class="stringliteral">&quot;   N real function evals: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Domain Partition: \n&quot;</span> ;

    <span class="keywordflow">return</span> 0;           <span class="comment">// end main statement</span>
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="CesaroBellNo_8cpp.shtml">CesaroBellNo.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
