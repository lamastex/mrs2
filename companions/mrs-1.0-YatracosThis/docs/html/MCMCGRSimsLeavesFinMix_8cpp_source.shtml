<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRSimsLeavesFinMix.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRSimsLeavesFinMix_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCGRSimsLeavesFinMix.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCGRSimsLeavesFinMix_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// tools to help </span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00046"></a>00046 <span class="comment">//#define MYDEBUG_CALCS // extra console output for calculations</span>
<a name="l00047"></a><a class="code" href="MCMCGRSimsLeavesFinMix_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">00047</a> <span class="preprocessor">#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="preprocessor">#endif</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>cxsc;
<a name="l00056"></a>00056 <span class="keyword">using namespace </span>subpavings;
<a name="l00057"></a>00057 <span class="keyword">using namespace </span>std;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, 
<a name="l00060"></a>00060         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, 
<a name="l00061"></a>00061         <span class="keywordtype">size_t</span> minPoints, <span class="keywordtype">int</span> dataSeed, <span class="keywordtype">int</span> maxLeaves, <span class="keywordtype">int</span> mix, <span class="keywordtype">double</span> temperature);
<a name="l00062"></a>00062 
<a name="l00063"></a><a class="code" href="MCMCGRSimsLeavesFinMix_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00063</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065   <span class="comment">//========user-defined parameters====================//</span>
<a name="l00066"></a>00066   <span class="keywordflow">if</span> ( argc != 12 ) {
<a name="l00067"></a>00067     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: MCMCGRSimsLeaves n d maxLoops samplesNeeded thinout &quot;</span>
<a name="l00068"></a>00068     &lt;&lt; <span class="stringliteral">&quot;tolerance minPoints maxLeaves dataSeed shape temperature&quot;</span> &lt;&lt; endl;
<a name="l00069"></a>00069     exit(0);
<a name="l00070"></a>00070   }
<a name="l00071"></a>00071   <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number of datapoints to generate for each histogram</span>
<a name="l00072"></a>00072   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00073"></a>00073   
<a name="l00074"></a>00074   <span class="keywordtype">int</span> maxLoops = atoi(argv[3]); <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00075"></a>00075   <span class="keywordtype">int</span> samplesNeeded = atoi(argv[4]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00076"></a>00076   <span class="keywordtype">int</span> thinout = atoi(argv[5]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00077"></a>00077   
<a name="l00078"></a>00078   real tolerance = atof(argv[6]);
<a name="l00079"></a>00079   cxsc::real tol(tolerance); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00080"></a>00080   
<a name="l00081"></a>00081   <span class="keywordtype">size_t</span> minPoints = atoi(argv[7]); <span class="comment">//minimum points needed for a node to be splittable</span>
<a name="l00082"></a>00082   <span class="keywordtype">int</span> maxLeaves = atoi(argv[8]); <span class="comment">// number of leaves allowed in the PQ histogram</span>
<a name="l00083"></a>00083                         <span class="comment">// used as one of the chains</span>
<a name="l00084"></a>00084                         
<a name="l00085"></a>00085   <span class="keywordtype">int</span> dataSeed = atoi(argv[9]); <span class="comment">//seed to generate data</span>
<a name="l00086"></a>00086   
<a name="l00087"></a>00087   <span class="keywordtype">int</span> mix = atoi(argv[10]);
<a name="l00088"></a>00088    
<a name="l00089"></a>00089   <span class="keywordtype">double</span> temperature = atof(argv[11]);
<a name="l00090"></a>00090   
<a name="l00091"></a>00091   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00092"></a>00092   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00093"></a>00093     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00094"></a>00094   }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="comment">//===========done with working on parameters==========================//</span>
<a name="l00097"></a>00097 
<a name="l00098"></a>00098   <span class="keywordflow">try</span> {
<a name="l00099"></a>00099     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(n, d, 
<a name="l00100"></a>00100         maxLoops, samplesNeeded, thinout, tol, minPoints, dataSeed,
<a name="l00101"></a>00101         maxLeaves, mix, temperature);
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     <span class="comment">/*</span>
<a name="l00104"></a>00104 <span class="comment">    std::string samplesCollAverageFilename = &quot;AveragedSamplesFromMCMCGRAuto.txt&quot;;</span>
<a name="l00105"></a>00105 <span class="comment">    outputFileStart(samplesCollAverageFilename);</span>
<a name="l00106"></a>00106 <span class="comment">  </span>
<a name="l00107"></a>00107 <span class="comment">    avg.outputToTxtTabs(samplesCollAverageFilename);</span>
<a name="l00108"></a>00108 <span class="comment">    */</span>
<a name="l00109"></a>00109     <span class="keywordflow">return</span> 0;
<a name="l00110"></a>00110   }
<a name="l00111"></a>00111   <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
<a name="l00112"></a>00112     cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
<a name="l00113"></a>00113       &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00114"></a>00114   }
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">//===============start the MCMC========================================//</span>
<a name="l00118"></a><a class="code" href="MCMCGRSimsLeavesFinMix_8cpp.shtml#aef8513f9339e040227e9e38b5e6edb99">00118</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, 
<a name="l00119"></a>00119         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, <span class="keywordtype">size_t</span> minPoints,
<a name="l00120"></a>00120         <span class="keywordtype">int</span> dataSeed, <span class="keywordtype">int</span> maxLeaves, <span class="keywordtype">int</span> mix, <span class="keywordtype">double</span> temperature)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122   <span class="comment">//======set up for output========================================//     </span>
<a name="l00123"></a>00123   <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00124"></a>00124   <span class="keywordtype">int</span> prec = 15;
<a name="l00125"></a>00125   cout &lt;&lt; cxsc::SaveOpt;
<a name="l00126"></a>00126   cout &lt;&lt; cxsc::Variable;
<a name="l00127"></a>00127   cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   ofstream os;
<a name="l00130"></a>00130   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00131"></a>00131   os.precision(5);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesAvg = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; <span class="comment">// our return object, if all goes well</span>
<a name="l00134"></a>00134   ostringstream stmH;
<a name="l00135"></a>00135   stmH &lt;&lt; dataSeed;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="comment">//===========prepare to generate some data for the tests ================//</span>
<a name="l00138"></a>00138   cout &lt;&lt; <span class="stringliteral">&quot;=============Generating data for simulation &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00139"></a>00139   <span class="comment">// set up a random number generator</span>
<a name="l00140"></a>00140   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00141"></a>00141   gsl_rng * r;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00144"></a>00144   gsl_rng_env_setup();
<a name="l00145"></a>00145   T = gsl_rng_default;
<a name="l00146"></a>00146   r = gsl_rng_alloc (T);
<a name="l00147"></a>00147   <span class="comment">// set a seed for the data</span>
<a name="l00148"></a>00148   gsl_rng_set(r, dataSeed);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="comment">//-------define the root box</span>
<a name="l00152"></a>00152   ivector pavingBox(d);
<a name="l00153"></a>00153   interval pavingInterval(-10,10);
<a name="l00154"></a>00154   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">//==============get distribution parameters==========================//</span>
<a name="l00157"></a>00157    <span class="comment">// read input from mix*.txt</span>
<a name="l00158"></a>00158    <span class="keywordtype">string</span> mixfileName;
<a name="l00159"></a>00159    mixfileName = <span class="stringliteral">&quot;../Coverage/MixtureFiles/mix&quot;</span>;
<a name="l00160"></a>00160   std::ostringstream stmMix;
<a name="l00161"></a>00161   stmMix &lt;&lt; mix;
<a name="l00162"></a>00162   mixfileName += stmMix.str();
<a name="l00163"></a>00163   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00164"></a>00164 
<a name="l00165"></a>00165   ifstream infile(mixfileName.c_str());
<a name="l00166"></a>00166   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00167"></a>00167   <span class="keywordtype">double</span> W, M, V;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00170"></a>00170   vector&lt;double&gt; Weight;
<a name="l00171"></a>00171   vector&lt;double&gt; Mean;
<a name="l00172"></a>00172   vector&lt;double&gt; Sigma;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00175"></a>00175   ifstream file; <span class="comment">// create file for input</span>
<a name="l00176"></a>00176   file.open(mixfileName.c_str());
<a name="l00177"></a>00177   <span class="comment">// check if this file exists or not</span>
<a name="l00178"></a>00178   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00179"></a>00179     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00180"></a>00180          &lt;&lt; endl;
<a name="l00181"></a>00181     exit(1);
<a name="l00182"></a>00182   }
<a name="l00183"></a>00183   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00184"></a>00184     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00185"></a>00185     W=Weight1/Weight2;
<a name="l00186"></a>00186     Weight.push_back(W);
<a name="l00187"></a>00187     M=Mean1/Mean2;
<a name="l00188"></a>00188     Mean.push_back(M);
<a name="l00189"></a>00189     V=Var1/Var2;
<a name="l00190"></a>00190     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00191"></a>00191   }
<a name="l00192"></a>00192   Weight.pop_back();
<a name="l00193"></a>00193   Mean.pop_back();
<a name="l00194"></a>00194   Sigma.pop_back();
<a name="l00195"></a>00195   
<a name="l00196"></a>00196   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00197"></a>00197   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00198"></a>00198   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00199"></a>00199   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <span class="comment">// ========prepare to generate some data for the tests ================//</span>
<a name="l00202"></a>00202    <span class="comment">//set up a random number generator for gaussian rvs</span>
<a name="l00203"></a>00203      <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00204"></a>00204      gsl_rng * r1;
<a name="l00205"></a>00205      gsl_rng_env_setup();
<a name="l00206"></a>00206      T1 = gsl_rng_default;
<a name="l00207"></a>00207      r1 = gsl_rng_alloc (T1);
<a name="l00208"></a>00208      gsl_rng_set(r1, dataSeed);
<a name="l00209"></a>00209      
<a name="l00210"></a>00210   <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
<a name="l00211"></a>00211   <span class="keywordtype">double</span> a=0, b=1;
<a name="l00212"></a>00212   vector&lt;double&gt; u;
<a name="l00213"></a>00213   <span class="keywordtype">int</span> j;
<a name="l00214"></a>00214   <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00215"></a>00215       u.push_back(gsl_ran_flat(r, a, b));
<a name="l00216"></a>00216   }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218   <span class="comment">// number of components</span>
<a name="l00219"></a>00219   <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00220"></a>00220   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="comment">// get cumulative sum of the weights</span>
<a name="l00223"></a>00223   <span class="keywordtype">double</span> WeightCum[comp];
<a name="l00224"></a>00224   <span class="comment">//initialize the array</span>
<a name="l00225"></a>00225   WeightCum[0] = Weight[0]; 
<a name="l00226"></a>00226   cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
<a name="l00227"></a>00227    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
<a name="l00228"></a>00228     WeightCum[j] = WeightCum[j-1] + Weight[j];
<a name="l00229"></a>00229   }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231   <span class="comment">//Create mixture data using component densities that are normal.</span>
<a name="l00232"></a>00232   cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
<a name="l00233"></a>00233   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theData = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container to keep the data</span>
<a name="l00234"></a>00234     <span class="comment">//find the number of members generated from each component.</span>
<a name="l00235"></a>00235     <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
<a name="l00236"></a>00236       <span class="keywordtype">int</span> ind=0;
<a name="l00237"></a>00237       cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
<a name="l00238"></a>00238       <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
<a name="l00239"></a>00239       cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
<a name="l00240"></a>00240       <span class="comment">//now generate the data</span>
<a name="l00241"></a>00241       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
<a name="l00242"></a>00242         rvector thisrv(1);
<a name="l00243"></a>00243         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
<a name="l00244"></a>00244         thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
<a name="l00245"></a>00245         theData-&gt;push_back(thisrv);
<a name="l00246"></a>00246       }
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248   <span class="comment">//===============finish generating data============================//</span>
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   <span class="comment">//================Gelman-Rubin method=========================//</span>
<a name="l00252"></a>00252    <span class="comment">// start by making the histograms that are the starting points for our chains</span>
<a name="l00253"></a>00253    
<a name="l00254"></a>00254    <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00255"></a>00255    <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00256"></a>00256    <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00257"></a>00257   
<a name="l00258"></a>00258   <span class="comment">//start recording cpu time here, which includes making the chains</span>
<a name="l00259"></a>00259   clock_t start, end;
<a name="l00260"></a>00260   <span class="keywordtype">double</span> timing; 
<a name="l00261"></a>00261   start = clock();
<a name="l00262"></a>00262   <span class="comment">//------Starting histograms-------------------------------//</span>
<a name="l00263"></a>00263   cout &lt;&lt; <span class="stringliteral">&quot;Starting the chains &quot;</span> &lt;&lt; endl;
<a name="l00264"></a>00264   <span class="comment">//histogram 1</span>
<a name="l00265"></a>00265   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
<a name="l00266"></a>00266    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00267"></a>00267   <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00268"></a>00268   <span class="keywordtype">bool</span> successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
<a name="l00269"></a>00269 
<a name="l00270"></a>00270   
<a name="l00271"></a>00271   <span class="comment">//histogram 2</span>
<a name="l00272"></a>00272   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
<a name="l00273"></a>00273   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00274"></a>00274   <span class="comment">// the same data into the second histogram</span>
<a name="l00275"></a>00275   <span class="keywordtype">bool</span> successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theData);
<a name="l00276"></a>00276   <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00277"></a>00277   <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00278"></a>00278     <span class="comment">// set up function objects for a priority split</span>
<a name="l00279"></a>00279     <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
<a name="l00280"></a>00280     <span class="comment">//CompCount compArea;</span>
<a name="l00281"></a>00281     <span class="comment">//CompVol compArea;</span>
<a name="l00282"></a>00282     <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00283"></a>00283     <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critVal(maxLeaves);
<a name="l00284"></a>00284     <span class="comment">// or split until each leaf node has at least minVal points</span>
<a name="l00285"></a>00285     <span class="comment">//CritLargestCount_LTE critVal(minVal);</span>
<a name="l00286"></a>00286     <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00287"></a>00287     <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, 0.9));  
<a name="l00288"></a>00288     <span class="comment">// do the priority split</span>
<a name="l00289"></a>00289     successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compArea,
<a name="l00290"></a>00290          critVal, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00291"></a>00291       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00292"></a>00292     (myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLeaves(leaves);
<a name="l00293"></a>00293     cout &lt;&lt; <span class="stringliteral">&quot;number of leaves in myHistSecond: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; endl;
<a name="l00294"></a>00294    }
<a name="l00295"></a>00295   
<a name="l00296"></a>00296   <span class="comment">/*  </span>
<a name="l00297"></a>00297 <span class="comment">  //histogram 3</span>
<a name="l00298"></a>00298 <span class="comment">  cout &lt;&lt; &quot;Histogram 3&quot; &lt;&lt; endl;</span>
<a name="l00299"></a>00299 <span class="comment">  AdaptiveHistogram* myHistThird = new AdaptiveHistogram(pavingBox);</span>
<a name="l00300"></a>00300 <span class="comment">  myHistThird-&gt;splitToShape(&quot;1,2,2&quot;); // make a specific starting shape</span>
<a name="l00301"></a>00301 <span class="comment">  // put in the data in a &#39;pulse&#39; with no further splitting</span>
<a name="l00302"></a>00302 <span class="comment">  bool successfulInsertionThird = myHistThird-&gt;insertFromRVec(theData);</span>
<a name="l00303"></a>00303 <span class="comment">  cout &lt;&lt; &quot;number of leaves in myHistThird: &quot; &lt;&lt; spLeaves(myHistThird-&gt;getSubPaving()) &lt;&lt; endl;</span>
<a name="l00304"></a>00304 <span class="comment">  */</span>
<a name="l00305"></a>00305   
<a name="l00306"></a>00306   <span class="comment">/*</span>
<a name="l00307"></a>00307 <span class="comment">  //histogram 4</span>
<a name="l00308"></a>00308 <span class="comment">  bool successfulPQSplitSecond = true;</span>
<a name="l00309"></a>00309 <span class="comment">  cout &lt;&lt; &quot;Histogram 4&quot; &lt;&lt; endl;</span>
<a name="l00310"></a>00310 <span class="comment">  AdaptiveHistogram* myHistSecond = new AdaptiveHistogram(pavingBox);</span>
<a name="l00311"></a>00311 <span class="comment">  myHistSecond-&gt;splitToShape(&quot;2,3,4,4,3,4,4,2&quot;); // make a specific starting shape</span>
<a name="l00312"></a>00312 <span class="comment">  // put in the data in a &#39;pulse&#39; with no further splitting</span>
<a name="l00313"></a>00313 <span class="comment">  bool successfulInsertionSecond = myHistSecond-&gt;insertFromRVec(*theData);</span>
<a name="l00314"></a>00314 <span class="comment">  //cout &lt;&lt; &quot;number of leaves in myHistFourth: &quot; &lt;&lt; spLeaves(myHistFourth-&gt;getSubPaving()) &lt;&lt; endl;</span>
<a name="l00315"></a>00315 <span class="comment">  */</span>
<a name="l00316"></a>00316   
<a name="l00317"></a>00317   <span class="comment">/*</span>
<a name="l00318"></a>00318 <span class="comment">  //histogram 5</span>
<a name="l00319"></a>00319 <span class="comment">  cout &lt;&lt; &quot;Histogram 5&quot; &lt;&lt; endl;</span>
<a name="l00320"></a>00320 <span class="comment">  AdaptiveHistogram* myHistFifth = new AdaptiveHistogram(pavingBox);</span>
<a name="l00321"></a>00321 <span class="comment">  myHistFifth-&gt;splitToShape(&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;); // make a specific starting shape</span>
<a name="l00322"></a>00322 <span class="comment">  // put in the data in a &#39;pulse&#39; with no further splitting</span>
<a name="l00323"></a>00323 <span class="comment">  bool successfulInsertionFifth = myHistFifth-&gt;insertFromRVec(theData);</span>
<a name="l00324"></a>00324 <span class="comment">  cout &lt;&lt; &quot;number of leaves in myHistFifth: &quot; &lt;&lt; spLeaves(myHistFifth-&gt;getSubPaving()) &lt;&lt; endl;</span>
<a name="l00325"></a>00325 <span class="comment">  */</span>
<a name="l00326"></a>00326   <span class="comment">/*</span>
<a name="l00327"></a>00327 <span class="comment">  #ifdef FORCEFAILINSERTION</span>
<a name="l00328"></a>00328 <span class="comment">    // debugging - force a failure here to check what program does</span>
<a name="l00329"></a>00329 <span class="comment">    successfulInsertionThird = false;</span>
<a name="l00330"></a>00330 <span class="comment">  #endif</span>
<a name="l00331"></a>00331 <span class="comment">  */</span>
<a name="l00332"></a>00332   
<a name="l00333"></a>00333   <span class="comment">// only proceed if successfully made histograms</span>
<a name="l00334"></a>00334   <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; 
<a name="l00335"></a>00335     successfulPQSplitSecond) { <span class="comment">// &amp;&amp; //) {  </span>
<a name="l00336"></a>00336     <span class="comment">//  successfulInsertionThird &amp;&amp; //) {</span>
<a name="l00337"></a>00337   <span class="comment">//   successfulInsertionFourth ) { </span>
<a name="l00338"></a>00338      <span class="comment">//&amp;&amp; successfulInsertionFifth) {</span>
<a name="l00339"></a>00339     
<a name="l00340"></a>00340     <span class="keyword">delete</span> theData; <span class="comment">// don&#39;t need this anymore</span>
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     <span class="comment">// Initializing containers etc.</span>
<a name="l00343"></a>00343     cout &lt;&lt; <span class="stringliteral">&quot;Initializing containers since successfully made histograms. &quot;</span> &lt;&lt; endl;
<a name="l00344"></a>00344     <span class="comment">// containers for adaptive histograms</span>
<a name="l00345"></a>00345     <span class="comment">// the starting points of the chains</span>
<a name="l00346"></a>00346     vector&lt; AdaptiveHistogram* &gt; hists;
<a name="l00347"></a>00347     hists.push_back(myHistFirst);
<a name="l00348"></a>00348     hists.push_back(myHistSecond);
<a name="l00349"></a>00349     <span class="comment">//hists.push_back(myHistThird);</span>
<a name="l00350"></a>00350     <span class="comment">//hists.push_back(myHistFourth);</span>
<a name="l00351"></a>00351     <span class="comment">//hists.push_back(myHistFifth);</span>
<a name="l00352"></a>00352     
<a name="l00353"></a>00353     <span class="comment">// how many chains are to be run = number starting histograms</span>
<a name="l00354"></a>00354     <span class="keywordtype">size_t</span> chains = hists.size(); 
<a name="l00355"></a>00355     
<a name="l00356"></a>00356     <span class="keywordflow">if</span> (chains &lt; 2) {
<a name="l00357"></a>00357       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
<a name="l00358"></a>00358     }
<a name="l00359"></a>00359 
<a name="l00360"></a>00360     <span class="comment">//container to keep the L1-error between each state and true density</span>
<a name="l00361"></a>00361     vector&lt; vector &lt;real&gt; &gt; stateL1(chains);
<a name="l00362"></a>00362     vector&lt; vector &lt;real&gt; &gt; avgStateL1(chains);
<a name="l00363"></a>00363     
<a name="l00364"></a>00364     <span class="comment">// set up proposal distribution object</span>
<a name="l00365"></a>00365     <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00366"></a>00366     <span class="comment">// set up prior distribution object</span>
<a name="l00367"></a>00367     <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00368"></a>00368 
<a name="l00369"></a>00369     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00370"></a>00370     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00371"></a>00371 
<a name="l00372"></a>00372     gsl_rng * rgsl = NULL;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374     <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00375"></a>00375 
<a name="l00376"></a>00376     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00377"></a>00377     <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00378"></a>00378     <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00379"></a>00379     <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00380"></a>00380     gsl_rng_env_setup();
<a name="l00381"></a>00381     tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00382"></a>00382     rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00383"></a>00383     
<a name="l00384"></a>00384     <span class="comment">// set a seed for the data</span>
<a name="l00385"></a>00385     <span class="keywordtype">int</span> mcmcSeed = 1234;
<a name="l00386"></a>00386     gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
<a name="l00387"></a>00387 
<a name="l00388"></a>00388     <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00389"></a>00389     vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00390"></a>00390     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00391"></a>00391     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00392"></a>00392 
<a name="l00393"></a>00393     vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00394"></a>00394     vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00395"></a>00395     vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00396"></a>00396     vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
<a name="l00397"></a>00397     
<a name="l00398"></a>00398     <span class="comment">// names for leaves related stuff</span>
<a name="l00399"></a>00399     vector&lt;string&gt; leavesColNames(chains);
<a name="l00400"></a>00400     vector&lt;string&gt; leavesRunningSumColNames(chains);
<a name="l00401"></a>00401     vector&lt;string&gt; leavesSampleVarianceColNames(chains);
<a name="l00402"></a>00402     std::string  baseLeavesColName = <span class="stringliteral">&quot;leaves_&quot;</span>;
<a name="l00403"></a>00403     std::string  baseLeavesRunningSumColName = <span class="stringliteral">&quot;leavesSum_&quot;</span>;
<a name="l00404"></a>00404     std::string  baseLeavesSampleVarianceColName = <span class="stringliteral">&quot;leavesVar_&quot;</span>;
<a name="l00405"></a>00405     std::string  overallLeavesRunningSumColName = <span class="stringliteral">&quot;OverallLeavesSum&quot;</span>;
<a name="l00406"></a>00406     
<a name="l00407"></a>00407     std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00408"></a>00408     std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00409"></a>00409     std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00410"></a>00410     std::string baseSequenceStateDiffsToAverageFilename = <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
<a name="l00411"></a>00411     
<a name="l00412"></a>00412     <span class="comment">// files for outputing samples</span>
<a name="l00413"></a>00413     std::string samplesCollFilename = <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00414"></a>00414     std::string samplesLogFilename = <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00415"></a>00415     <span class="comment">//outputFileStart(samplesCollFilename);</span>
<a name="l00416"></a>00416     
<a name="l00417"></a>00417     <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
<a name="l00418"></a>00418     <span class="comment">// but at the moment I have not done anything about graphing</span>
<a name="l00419"></a>00419     <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l00420"></a>00420       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00421"></a>00421     }
<a name="l00422"></a>00422     
<a name="l00423"></a>00423     <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
<a name="l00424"></a>00424     <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
<a name="l00425"></a>00425     
<a name="l00426"></a>00426     <span class="comment">// a name for the file of diagnostics  for leaves</span>
<a name="l00427"></a>00427     std::string GRLeavesFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalar&quot;</span>;
<a name="l00428"></a>00428     GRLeavesFilename += stmH.str();
<a name="l00429"></a>00429     GRLeavesFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00430"></a>00430   
<a name="l00431"></a>00431     <span class="comment">// a name for a file of the leaves v_ij scalars</span>
<a name="l00432"></a>00432     std::string GR_vij_as_Leaves_Filename  = <span class="stringliteral">&quot;LeavesScalar&quot;</span>;
<a name="l00433"></a>00433     GR_vij_as_Leaves_Filename += stmH.str();
<a name="l00434"></a>00434     GR_vij_as_Leaves_Filename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00435"></a>00435   
<a name="l00436"></a>00436     <span class="comment">// a name for the file of working calculations for the leaves scalar diagnostics </span>
<a name="l00437"></a>00437     std::string GRLeavesWorkingCalcsFilename = <span class="stringliteral">&quot;GelmanRubinLeavesScalarWorkingCalcs.txt&quot;</span>;
<a name="l00438"></a>00438     
<a name="l00439"></a>00439     <span class="comment">/* containers for summaries for the </span>
<a name="l00440"></a>00440 <span class="comment">    * Leaves-distances-to-average scalar convergence diagnostics */</span>
<a name="l00441"></a>00441   
<a name="l00442"></a>00442     <span class="comment">/* note we don&#39;t need this for leaves */</span>
<a name="l00443"></a>00443     <span class="comment">//std::vector &lt; RealVec &gt; currentLeaves(chains); </span>
<a name="l00444"></a>00444 
<a name="l00445"></a>00445     <span class="comment">// one vector of leaves as a RealVec for each chain</span>
<a name="l00446"></a>00446     std::vector &lt; RealVec &gt;* leavesPtr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="comment">/* vector containing one running sum of leaves for each chain</span>
<a name="l00449"></a>00449 <span class="comment">    we can work out the average v = leaves for each chain so far from this</span>
<a name="l00450"></a>00450 <span class="comment">    start with a running sum of 0.0 for each chain */</span>
<a name="l00451"></a>00451     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00452"></a>00452   
<a name="l00453"></a>00453     <span class="comment">/* vector containing one running sum of </span>
<a name="l00454"></a>00454 <span class="comment">    squared leaves for each chain</span>
<a name="l00455"></a>00455 <span class="comment">    we can work out the average of the squared v&#39;s ie v^2 = leaves^2</span>
<a name="l00456"></a>00456 <span class="comment">    for each chain so far from this</span>
<a name="l00457"></a>00457 <span class="comment">    start with a running sum of 0.0 for each chain.</span>
<a name="l00458"></a>00458 <span class="comment">    (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00459"></a>00459 <span class="comment">    when accumulating products of reals) */</span>
<a name="l00460"></a>00460     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumLeavesSquared(chains, cxsc::dotprecision(0.0));
<a name="l00461"></a>00461 
<a name="l00462"></a>00462     <span class="comment">/* value of running sum of leaves over all chains</span>
<a name="l00463"></a>00463 <span class="comment">    we can work out the average v = leaves over all chains so far from this */</span>
<a name="l00464"></a>00464     real runningSumLeavesAllChains = cxsc::real(0.0);
<a name="l00465"></a>00465     
<a name="l00466"></a>00466 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00467"></a>00467 <span class="preprocessor"></span>      <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00468"></a>00468       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesOverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>();
<a name="l00469"></a>00469       <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00470"></a>00470       std::vector &lt; RealVec &gt;* runningSumLeavesChainsPtr 
<a name="l00471"></a>00471                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00472"></a>00472       <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00473"></a>00473       std::vector &lt; RealVec &gt;* sampleVariancesLeavesPtr 
<a name="l00474"></a>00474                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains,
<a name="l00475"></a>00475                   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0)) );
<a name="l00476"></a>00476       <span class="comment">/* keep a vector of the flag for leaves convergence</span>
<a name="l00477"></a>00477 <span class="comment">       * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00478"></a>00478       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatLeavesFlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00479"></a>00479 <span class="preprocessor">    #endif</span>
<a name="l00480"></a>00480 <span class="preprocessor"></span>
<a name="l00481"></a>00481     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Ws_leaves</span>
<a name="l00482"></a>00482     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Bs_leaves</span>
<a name="l00483"></a>00483     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the estimated var(v) for leaves</span>
<a name="l00484"></a>00484     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhat_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the rhats for leaves</span>
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00487"></a>00487 <span class="preprocessor"></span>      <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<a name="l00488"></a>00488 <span class="comment">      * (not a real, but easier to output it if we treat it like one) */</span>
<a name="l00489"></a>00489       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00490"></a>00490 <span class="preprocessor">    #endif</span>
<a name="l00491"></a>00491 <span class="preprocessor"></span>
<a name="l00492"></a>00492     <span class="comment">// container of each state at each sequence</span>
<a name="l00493"></a>00493     vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
<a name="l00494"></a>00494     
<a name="l00495"></a>00495     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00496"></a>00496     
<a name="l00497"></a>00497     <span class="comment">/* need to accumulate sum over all chains of the square of </span>
<a name="l00498"></a>00498 <span class="comment">    * the running sum of leaves </span>
<a name="l00499"></a>00499 <span class="comment">    * for each chain for this starting state */</span>
<a name="l00500"></a>00500     cxsc::real initialSumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l00501"></a>00501 
<a name="l00502"></a>00502     <span class="comment">// this loop is just setting up containers of file names</span>
<a name="l00503"></a>00503     <span class="comment">// and getting info from the starting histograms that is</span>
<a name="l00504"></a>00504     <span class="comment">// needed to start the chains</span>
<a name="l00505"></a>00505     <span class="comment">// and a container of collators, one for each chain,</span>
<a name="l00506"></a>00506     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00507"></a>00507       
<a name="l00508"></a>00508       <span class="comment">// do not comment these out</span>
<a name="l00509"></a>00509       std::ostringstream stm1;
<a name="l00510"></a>00510       stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00511"></a>00511       sequenceStateFilenames[ci] = stm1.str();
<a name="l00512"></a>00512       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00513"></a>00513       
<a name="l00514"></a>00514       <span class="comment">// to output v_ij</span>
<a name="l00515"></a>00515       {
<a name="l00516"></a>00516         std::ostringstream stm;
<a name="l00517"></a>00517         stm &lt;&lt; baseLeavesColName &lt;&lt; ci;
<a name="l00518"></a>00518         leavesColNames[ci] = stm.str();
<a name="l00519"></a>00519       }
<a name="l00520"></a>00520 
<a name="l00521"></a>00521 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00522"></a>00522 <span class="preprocessor"></span>        {
<a name="l00523"></a>00523           std::ostringstream stm;
<a name="l00524"></a>00524           stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00525"></a>00525           sequenceCollationFilenames[ci] = stm.str();
<a name="l00526"></a>00526           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00527"></a>00527         }
<a name="l00528"></a>00528         {
<a name="l00529"></a>00529           std::ostringstream stm;
<a name="l00530"></a>00530           stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00531"></a>00531           sequenceAverageFilenames[ci] = stm.str();
<a name="l00532"></a>00532           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00533"></a>00533         }
<a name="l00534"></a>00534         {
<a name="l00535"></a>00535           std::ostringstream stm;
<a name="l00536"></a>00536           stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00537"></a>00537           sequenceDiffsToAverageFilenames[ci] = stm.str();
<a name="l00538"></a>00538           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
<a name="l00539"></a>00539         }
<a name="l00540"></a>00540         {
<a name="l00541"></a>00541           std::ostringstream stm;
<a name="l00542"></a>00542           stm &lt;&lt; baseLeavesRunningSumColName &lt;&lt; ci;
<a name="l00543"></a>00543           leavesRunningSumColNames[ci] = stm.str();
<a name="l00544"></a>00544         }
<a name="l00545"></a>00545         
<a name="l00546"></a>00546         {
<a name="l00547"></a>00547           std::ostringstream stm;
<a name="l00548"></a>00548           stm &lt;&lt; baseLeavesSampleVarianceColName &lt;&lt; ci;
<a name="l00549"></a>00549           leavesSampleVarianceColNames[ci] = stm.str();
<a name="l00550"></a>00550         }
<a name="l00551"></a>00551 <span class="preprocessor">        #endif</span>
<a name="l00552"></a>00552 <span class="preprocessor"></span>
<a name="l00553"></a>00553       <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<a name="l00554"></a>00554 <span class="comment">      * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<a name="l00555"></a>00555 <span class="comment">      * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<a name="l00556"></a>00556 <span class="comment">      * change.  */</span>
<a name="l00557"></a>00557       
<a name="l00558"></a>00558       <span class="comment">// set up a container for the leaf children</span>
<a name="l00559"></a>00559       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00560"></a>00560       <span class="comment">// set up a container for the subleaf children</span>
<a name="l00561"></a>00561       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00562"></a>00562 
<a name="l00563"></a>00563       <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00564"></a>00564       <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00565"></a>00565 
<a name="l00566"></a>00566       <span class="comment">// fill the container with the leaf children</span>
<a name="l00567"></a>00567       hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00568"></a>00568       <span class="comment">// fill the container with the subleaf children</span>
<a name="l00569"></a>00569       hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00570"></a>00570 
<a name="l00571"></a>00571       numCherries = cherryVec.size();
<a name="l00572"></a>00572 
<a name="l00573"></a>00573       cout &lt;&lt; <span class="stringliteral">&quot;check if node is still splittable&quot;</span> &lt;&lt; endl;
<a name="l00574"></a>00574       
<a name="l00575"></a>00575       <span class="comment">// check if node is still splittable</span>
<a name="l00576"></a>00576       <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00577"></a>00577         <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00578"></a>00578         <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00579"></a>00579         <span class="comment">// or could split with one child getting all the points</span>
<a name="l00580"></a>00580         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00581"></a>00581         <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00582"></a>00582           <span class="keywordflow">if</span> ((minPoints == 0)
<a name="l00583"></a>00583           || (  minPoints &gt; 0
<a name="l00584"></a>00584               &amp;&amp;
<a name="l00585"></a>00585               (((*lit)-&gt;getCounter() &gt;= minPoints) &amp;&amp;
<a name="l00586"></a>00586                 ( ((*lit)-&gt;getMinChildCountIfSplit() == 0)
<a name="l00587"></a>00587                   ||
<a name="l00588"></a>00588                   ((*lit)-&gt;getMinChildCountIfSplit() &gt;= minPoints) )
<a name="l00589"></a>00589               )
<a name="l00590"></a>00590             )
<a name="l00591"></a>00591           ) {
<a name="l00592"></a>00592             <span class="comment">// leaf can go into container</span>
<a name="l00593"></a>00593             nodeLists[ci].push_back(*lit);
<a name="l00594"></a>00594             numLeaves++;
<a name="l00595"></a>00595           }
<a name="l00596"></a>00596         }
<a name="l00597"></a>00597       }
<a name="l00598"></a>00598 
<a name="l00599"></a>00599       <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00600"></a>00600       <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00601"></a>00601          nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00602"></a>00602                          cherryVec.end());
<a name="l00603"></a>00603       <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00604"></a>00604          cancontinue = <span class="keyword">false</span>;
<a name="l00605"></a>00605          <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00606"></a>00606          std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00607"></a>00607                  &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00608"></a>00608                  &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00609"></a>00609       }
<a name="l00610"></a>00610 
<a name="l00611"></a>00611       numLeavesVec[ci] = numLeaves;
<a name="l00612"></a>00612       numCherriesVec[ci] = numCherries;
<a name="l00613"></a>00613 
<a name="l00614"></a>00614       <span class="comment">// initialise things for the collection of data on leaves</span>
<a name="l00615"></a>00615       
<a name="l00616"></a>00616       <span class="comment">// one vector of leaves for each chain</span>
<a name="l00617"></a>00617       <span class="comment">// record leaves for this first state</span>
<a name="l00618"></a>00618       cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l00619"></a>00619       leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l00620"></a>00620       
<a name="l00621"></a>00621       <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l00622"></a>00622       cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l00623"></a>00623       runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l00624"></a>00624           
<a name="l00625"></a>00625       <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l00626"></a>00626       initialSumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l00627"></a>00627           
<a name="l00628"></a>00628       <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l00629"></a>00629 <span class="comment">       *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l00630"></a>00630       cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l00631"></a>00631       
<a name="l00632"></a>00632       <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l00633"></a>00633       runningSumLeavesAllChains += lastStateLeaves;
<a name="l00634"></a>00634       
<a name="l00635"></a>00635 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00636"></a>00636 <span class="preprocessor"></span>        <span class="comment">//sampleVariancesLeavesPtr-&gt;at(ci) was initialised to 0.0</span>
<a name="l00637"></a>00637         runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l00638"></a>00638 <span class="preprocessor">      #endif</span>
<a name="l00639"></a>00639 <span class="preprocessor"></span>
<a name="l00640"></a>00640       <span class="comment">// initialise things using current histogram state</span>
<a name="l00641"></a>00641       <span class="comment">//cout &lt;&lt; &quot;set up collator for each chain: &quot; &lt;&lt; endl;</span>
<a name="l00642"></a>00642       <span class="comment">/* set up one collator for each chain, </span>
<a name="l00643"></a>00643 <span class="comment">       * starting it with the histogram state right now */</span>
<a name="l00644"></a>00644       sequenceCollators[ci] = ( <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] ) );
<a name="l00645"></a>00645       <span class="comment">// get the IAE of this first state</span>
<a name="l00646"></a>00646       <span class="comment">//stateL1[ci].push_back(hists[ci]-&gt;getUnifIAE());</span>
<a name="l00647"></a>00647 
<a name="l00648"></a>00648       <span class="comment">//cout &lt;&lt; &quot;get the averaged histogram at this state&quot; &lt;&lt; endl;</span>
<a name="l00649"></a>00649       <span class="comment">//moved this out from MYDEBUG_OUTPUT to get the IAE</span>
<a name="l00650"></a>00650       <span class="comment">//AdaptiveHistogramCollator colltempavg = </span>
<a name="l00651"></a>00651       <span class="comment">//                sequenceCollators[ci]-&gt;makeAverage();</span>
<a name="l00652"></a>00652       <span class="comment">//cout &lt;&lt; &quot;get the IAE &quot; &lt;&lt; endl;</span>
<a name="l00653"></a>00653       <span class="comment">//cout &lt;&lt; colltempavg.getUnifIAE() &lt;&lt; endl;</span>
<a name="l00654"></a>00654       <span class="comment">//avgStateL1[ci].push_back(colltempavg.getUnifIAE());</span>
<a name="l00655"></a>00655 
<a name="l00656"></a>00656 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l00657"></a>00657 <span class="preprocessor"></span>      {
<a name="l00658"></a>00658         sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
<a name="l00659"></a>00659         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg = 
<a name="l00660"></a>00660                       sequenceCollators[ci]-&gt;makeAverage();
<a name="l00661"></a>00661         colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
<a name="l00662"></a>00662         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00663"></a>00663                     = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00664"></a>00664         colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
<a name="l00665"></a>00665       } <span class="comment">// temp objects go out of scope here  </span>
<a name="l00666"></a>00666 <span class="preprocessor">      #endif</span>
<a name="l00667"></a>00667 <span class="preprocessor"></span>    } <span class="comment">// end loop through chains setting up things to be able to start</span>
<a name="l00668"></a>00668 
<a name="l00669"></a>00669     <span class="comment">/* the overall running sum runningSumLeavesAllChains </span>
<a name="l00670"></a>00670 <span class="comment">     * was initialised to 0.0 </span>
<a name="l00671"></a>00671 <span class="comment">     * and #ifdef MYDEBUG, runningSumLeavesOverall was initialised to contain one 0.0 </span>
<a name="l00672"></a>00672 <span class="comment">     * and similarly rhatLeavesFlagPtr was initialised to contain one 0.0*/</span>
<a name="l00673"></a>00673 
<a name="l00674"></a>00674     <span class="comment">/* and we started the convergence statistics for chains with just one state in</span>
<a name="l00675"></a>00675 <span class="comment">     * with one 0.0 in each (Ws, Bs, estVarsVs, rhats)</span>
<a name="l00676"></a>00676 <span class="comment">     * when we initialised */</span>
<a name="l00677"></a>00677 
<a name="l00678"></a>00678     <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l00679"></a>00679 
<a name="l00680"></a>00680     <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l00681"></a>00681 
<a name="l00682"></a>00682     <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
<a name="l00683"></a>00683     <span class="keywordtype">int</span> samplesSoFar = 0;
<a name="l00684"></a>00684     <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far,</span>
<a name="l00685"></a>00685 <span class="comment">            since state 1 is the initial histograms */</span>
<a name="l00686"></a>00686   
<a name="l00687"></a>00687     <span class="comment">// varibles for monitoring convergence</span>
<a name="l00688"></a>00688     <span class="keywordtype">int</span> rhatLeavesFlag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value </span>
<a name="l00689"></a>00689     <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
<a name="l00690"></a>00690     <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
<a name="l00691"></a>00691     <span class="keywordtype">int</span> rhatFlagCounter = 0;
<a name="l00692"></a>00692     <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<a name="l00693"></a>00693 <span class="comment">                      * diagnostic within limits for sampling to start?</span>
<a name="l00694"></a>00694 <span class="comment">                      * usually this would probably be the number</span>
<a name="l00695"></a>00695 <span class="comment">                      * of scalar values being used? */</span> 
<a name="l00696"></a>00696                       
<a name="l00697"></a>00697     <span class="comment">// counter to keep track of loops</span>
<a name="l00698"></a>00698     <span class="keywordtype">int</span> loopCounter = 0;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700     <span class="comment">/* We also need a collator for the samples*/</span>
<a name="l00701"></a>00701     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
<a name="l00702"></a>00702 
<a name="l00703"></a>00703     <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) 
<a name="l00704"></a>00704     {
<a name="l00705"></a>00705 <span class="preprocessor">      #ifdef MYDEBUG_CALCS</span>
<a name="l00706"></a>00706 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;****** Change from state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l00707"></a>00707 <span class="preprocessor">      #endif</span>
<a name="l00708"></a>00708 <span class="preprocessor"></span>
<a name="l00709"></a>00709       loopCounter++;
<a name="l00710"></a>00710 
<a name="l00711"></a>00711       <span class="comment">// do initial values for everything so far</span>
<a name="l00712"></a>00712       <span class="comment">/* we want to accumulate the sample variance of the scalar summary leaves</span>
<a name="l00713"></a>00713 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00714"></a>00714       cxsc::real sumOfSampleVariancesLeavesOverChains(0.0);
<a name="l00715"></a>00715       
<a name="l00716"></a>00716       <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l00717"></a>00717 <span class="comment">       * the running sum of leaves </span>
<a name="l00718"></a>00718 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00719"></a>00719       cxsc::real sumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l00720"></a>00720     
<a name="l00721"></a>00721       <span class="comment">// for each histogram in turn, change the state</span>
<a name="l00722"></a>00722       <span class="comment">/* </span>
<a name="l00723"></a>00723 <span class="comment">       * this is all a fudge - changeMCMCstate should just be a private</span>
<a name="l00724"></a>00724 <span class="comment">       * method of the histograms but I think I made it public so that</span>
<a name="l00725"></a>00725 <span class="comment">       * I could use it here in the example as a first step to being</span>
<a name="l00726"></a>00726 <span class="comment">       * able to make all of this chain convergence stuff back into</span>
<a name="l00727"></a>00727 <span class="comment">       * a method of the histograms themselves</span>
<a name="l00728"></a>00728 <span class="comment">      */</span>
<a name="l00729"></a>00729 
<a name="l00730"></a>00730       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00731"></a>00731       
<a name="l00732"></a>00732 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l00733"></a>00733 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<a name="l00734"></a>00734 <span class="preprocessor">        #endif</span>
<a name="l00735"></a>00735 <span class="preprocessor"></span>
<a name="l00736"></a>00736         <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<a name="l00737"></a>00737 <span class="comment">        * in the comments inside this loop */</span>
<a name="l00738"></a>00738 
<a name="l00739"></a>00739         <span class="comment">// changeMCMCState for the chain</span>
<a name="l00740"></a>00740         <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
<a name="l00741"></a>00741         goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l00742"></a>00742              numLeavesVec[ci], numCherriesVec[ci],
<a name="l00743"></a>00743              proposal, logPrior, minPoints,
<a name="l00744"></a>00744              rgsl, loggingInChangeStates,
<a name="l00745"></a>00745              sequenceStateFilenames[ci], states);
<a name="l00746"></a>00746              
<a name="l00747"></a>00747 <span class="preprocessor">        #ifdef FORCEFAILMCMCLOOP</span>
<a name="l00748"></a>00748 <span class="preprocessor"></span>          <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
<a name="l00749"></a>00749           <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<a name="l00750"></a>00750 <span class="preprocessor">        #endif </span>
<a name="l00751"></a>00751 <span class="preprocessor"></span>
<a name="l00752"></a>00752         <span class="keywordflow">if</span> (!goodLoop) {
<a name="l00753"></a>00753           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
<a name="l00754"></a>00754           <span class="comment">// stop if we aren&#39;t happy</span>
<a name="l00755"></a>00755         }
<a name="l00756"></a>00756       
<a name="l00757"></a>00757         <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l00758"></a>00758           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l00759"></a>00759         }
<a name="l00760"></a>00760       
<a name="l00761"></a>00761         <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
<a name="l00762"></a>00762 
<a name="l00763"></a>00763         <span class="comment">/* this chain should have states + 1 states in it</span>
<a name="l00764"></a>00764 <span class="comment">        * because we have not yet incremented the states variable.*/</span>
<a name="l00765"></a>00765         <span class="keywordtype">size_t</span> n_for_leaves = states + 1;
<a name="l00766"></a>00766           
<a name="l00767"></a>00767         <span class="comment">//dec 29</span>
<a name="l00768"></a>00768         <span class="comment">//collate the current sample state in the chain</span>
<a name="l00769"></a>00769         cout &lt;&lt; <span class="stringliteral">&quot;add current sample into collator: &quot;</span> &lt;&lt; endl;
<a name="l00770"></a>00770         sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));
<a name="l00771"></a>00771         
<a name="l00772"></a>00772         <span class="comment">/* and n_Leaves should be at least 2 because we started with the </span>
<a name="l00773"></a>00773 <span class="comment">        * starting histogram and have now added another state.*/</span>
<a name="l00774"></a>00774         assert(n_for_leaves &gt; 1);
<a name="l00775"></a>00775       
<a name="l00776"></a>00776         cout &lt;&lt; <span class="stringliteral">&quot;collect leaves scalar: &quot;</span> &lt;&lt; endl;
<a name="l00777"></a>00777         <span class="comment">// collect the leaves scalar and update the running sums for leaves</span>
<a name="l00778"></a>00778         {
<a name="l00779"></a>00779           <span class="comment">// update leaves for last histogram state in the chain</span>
<a name="l00780"></a>00780           cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l00781"></a>00781           leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l00782"></a>00782                   
<a name="l00783"></a>00783           <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l00784"></a>00784           cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l00785"></a>00785           runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l00786"></a>00786           
<a name="l00787"></a>00787           <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l00788"></a>00788           sumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l00789"></a>00789           
<a name="l00790"></a>00790           <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l00791"></a>00791 <span class="comment">           *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l00792"></a>00792           cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l00793"></a>00793           
<a name="l00794"></a>00794           <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l00795"></a>00795           runningSumLeavesAllChains += lastStateLeaves;
<a name="l00796"></a>00796           
<a name="l00797"></a>00797           <span class="comment">/* accumulate the sample variance for leaves for this chain: </span>
<a name="l00798"></a>00798 <span class="comment">           * sample variance for the scalar summary v = leaves</span>
<a name="l00799"></a>00799 <span class="comment">           * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l00800"></a>00800 <span class="comment">           * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l00801"></a>00801           cxsc::real thisSampleVarianceLeaves( ( 1.0/(n_for_leaves - 1) )
<a name="l00802"></a>00802               *( cxsc::rnd(runningSumLeavesSquared[ci])
<a name="l00803"></a>00803               -  (newRunningSumLeaves*newRunningSumLeaves/(n_for_leaves * 1.0)) ) );
<a name="l00804"></a>00804           sumOfSampleVariancesLeavesOverChains += thisSampleVarianceLeaves;
<a name="l00805"></a>00805           
<a name="l00806"></a>00806 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l00807"></a>00807 <span class="preprocessor"></span>            sampleVariancesLeavesPtr-&gt;at(ci).push_back( thisSampleVarianceLeaves );
<a name="l00808"></a>00808             runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l00809"></a>00809 <span class="preprocessor">          #endif</span>
<a name="l00810"></a>00810 <span class="preprocessor"></span>
<a name="l00811"></a>00811 <span class="preprocessor">          #ifdef MYDEBUG_CALCS</span>
<a name="l00812"></a>00812 <span class="preprocessor"></span>            <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l00813"></a>00813             <span class="comment">// leavesPtr[ci] has the v_ij for each chain i</span>
<a name="l00814"></a>00814             
<a name="l00815"></a>00815             assert( n_for_leaves == leavesPtr-&gt;at(ci).size() );
<a name="l00816"></a>00816             cxsc::real acc(0.0);
<a name="l00817"></a>00817             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l00818"></a>00818               acc+= (*it);
<a name="l00819"></a>00819             }
<a name="l00820"></a>00820             
<a name="l00821"></a>00821             cxsc::real av = acc/(n_for_leaves * 1.0);
<a name="l00822"></a>00822             cxsc::dotprecision accDiffs(0.0);
<a name="l00823"></a>00823             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l00824"></a>00824               cxsc::real thisDiff = (*it) - av;
<a name="l00825"></a>00825               <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00826"></a>00826               cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00827"></a>00827             }
<a name="l00828"></a>00828             cxsc::real altVar = rnd(accDiffs)/( n_for_leaves - 1.0 );
<a name="l00829"></a>00829             
<a name="l00830"></a>00830             cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance leaves is\t&quot;</span> &lt;&lt; thisSampleVarianceLeaves &lt;&lt; endl;
<a name="l00831"></a>00831             cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar leaves is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l00832"></a>00832             <span class="comment">//assert(cxsc::_double(thisSampleVarianceLeaves) == cxsc::_double(altVar) );</span>
<a name="l00833"></a>00833           
<a name="l00834"></a>00834 <span class="preprocessor">          #endif</span>
<a name="l00835"></a>00835 <span class="preprocessor"></span>        } <span class="comment">// end of collecting leaves scalar</span>
<a name="l00836"></a>00836     } <span class="comment">// end change state for each histogram in turn</span>
<a name="l00837"></a>00837     
<a name="l00838"></a>00838     <span class="comment">// increment number of states histograms have been through</span>
<a name="l00839"></a>00839     states++;
<a name="l00840"></a>00840 
<a name="l00841"></a>00841     <span class="comment">/* each chain now has a new state</span>
<a name="l00842"></a>00842 <span class="comment">     * and info for leaves scalar for diagnostics has been collected</span>
<a name="l00843"></a>00843 <span class="comment">     * and the sample variance of the leaves scalar for each chain </span>
<a name="l00844"></a>00844 <span class="comment">     * has been put into sampleVariancesLeaves vector,</span>
<a name="l00845"></a>00845 <span class="comment">     * and if we are doing full checks, the current histogram states have </span>
<a name="l00846"></a>00846 <span class="comment">     * has been collated into collators </span>
<a name="l00847"></a>00847 <span class="comment">     * and info for any other scalars for diagnostics has been collected</span>
<a name="l00848"></a>00848 <span class="comment">     * and the sample variance of these other scalar summaries for each chain </span>
<a name="l00849"></a>00849 <span class="comment">     * for each scalar value</span>
<a name="l00850"></a>00850 <span class="comment">     * have been put into sampleVariances vectors for each diagnostic,</span>
<a name="l00851"></a>00851 <span class="comment">     * so we can now work out the convergence diagnostics */</span>
<a name="l00852"></a>00852 
<a name="l00853"></a>00853 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00854"></a>00854 <span class="preprocessor"></span>      <span class="comment">// store the current runningSumLeavesAllChains as well</span>
<a name="l00855"></a>00855       runningSumLeavesOverallPtr-&gt;push_back(runningSumLeavesAllChains);
<a name="l00856"></a>00856 <span class="preprocessor">    #endif</span>
<a name="l00857"></a>00857 <span class="preprocessor"></span>    
<a name="l00858"></a>00858     <span class="comment">// convergence diagnostics calculations for leaves</span>
<a name="l00859"></a>00859     {
<a name="l00860"></a>00860       <span class="comment">// the Ws_leaves: average, over chains, of sample variance of scalar value</span>
<a name="l00861"></a>00861       cxsc::real thisW_leaves = sumOfSampleVariancesLeavesOverChains/(chains * 1.0); 
<a name="l00862"></a>00862       Ws_leavesPtr-&gt;push_back(thisW_leaves); 
<a name="l00863"></a>00863       <span class="comment">// the Bs_leaves</span>
<a name="l00864"></a>00864       cxsc::real thisB_leaves = (1.0/( (chains - 1) * states ) 
<a name="l00865"></a>00865                 * ( sumOfSquaresOfRunningSumsLeaves 
<a name="l00866"></a>00866                 - (runningSumLeavesAllChains 
<a name="l00867"></a>00867                 * runningSumLeavesAllChains/(chains * 1.0)) ) );
<a name="l00868"></a>00868       Bs_leavesPtr-&gt;push_back(thisB_leaves); 
<a name="l00869"></a>00869       
<a name="l00870"></a>00870 <span class="preprocessor">      #ifdef MYDEBUG_CALCS</span>
<a name="l00871"></a>00871 <span class="preprocessor"></span>        <span class="comment">//check thisB_leaves is correct, doing it the long way</span>
<a name="l00872"></a>00872         <span class="comment">// runningSumLeaves has one running sum for each chain</span>
<a name="l00873"></a>00873         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l00874"></a>00874         cxsc::real accRunningSums(0.0);
<a name="l00875"></a>00875         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumLeavesPtr-&gt;begin(); it &lt; runningSumLeavesPtr-&gt;end(); ++it) {
<a name="l00876"></a>00876           cxsc::real thisChainRunningSum = (*it);
<a name="l00877"></a>00877           cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
<a name="l00878"></a>00878           chainAverages.push_back(thisChainAv);
<a name="l00879"></a>00879           accRunningSums+=thisChainRunningSum;
<a name="l00880"></a>00880         }
<a name="l00881"></a>00881         cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
<a name="l00882"></a>00882         cxsc::dotprecision accDiffs(0.0);
<a name="l00883"></a>00883         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l00884"></a>00884           cxsc::real thisDiff = (*it) - overallAv;
<a name="l00885"></a>00885           <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00886"></a>00886           cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00887"></a>00887         }
<a name="l00888"></a>00888         cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
<a name="l00889"></a>00889         
<a name="l00890"></a>00890         cout &lt;&lt; <span class="stringliteral">&quot;\nthisB for leaves is\t&quot;</span> &lt;&lt; thisB_leaves &lt;&lt; endl;
<a name="l00891"></a>00891         cout &lt;&lt; <span class="stringliteral">&quot;altB for leaves is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l00892"></a>00892         <span class="comment">//assert(thisB_leaves == altB);</span>
<a name="l00893"></a>00893       
<a name="l00894"></a>00894 <span class="preprocessor">      #endif</span>
<a name="l00895"></a>00895 <span class="preprocessor"></span>      
<a name="l00896"></a>00896       <span class="comment">// the estimated var(v)</span>
<a name="l00897"></a>00897       cxsc::real thisVarV_leaves = states/(states-1.0) 
<a name="l00898"></a>00898               * thisW_leaves + (1.0/states)*thisB_leaves;
<a name="l00899"></a>00899       estVarV_leavesPtr-&gt;push_back(thisVarV_leaves); 
<a name="l00900"></a>00900       <span class="comment">// the rhats</span>
<a name="l00901"></a>00901       cxsc::real thisRhat_leaves(0.0);
<a name="l00902"></a>00902       <span class="comment">// allow division by 0 if w = 0 when var does not</span>
<a name="l00903"></a>00903       <span class="keywordflow">if</span> (thisW_leaves &gt; 0.0 || thisVarV_leaves &gt; 0.0) {
<a name="l00904"></a>00904         thisRhat_leaves = thisVarV_leaves/thisW_leaves;
<a name="l00905"></a>00905       }
<a name="l00906"></a>00906       rhat_leavesPtr-&gt;push_back(thisRhat_leaves); 
<a name="l00907"></a>00907     } <span class="comment">// end calculations for leaves</span>
<a name="l00908"></a>00908     
<a name="l00909"></a>00909     
<a name="l00910"></a>00910     <span class="comment">// check on the diagnostics for Leaves</span>
<a name="l00911"></a>00911     <span class="keywordflow">if</span> (rhat_leavesPtr-&gt;back() &lt;= 1.0 + tol 
<a name="l00912"></a>00912             &amp;&amp; rhat_leavesPtr-&gt;back() &gt;= 1.0 - tol) {
<a name="l00913"></a>00913       <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l00914"></a>00914       <span class="keywordflow">if</span> (!rhatLeavesFlag)  {
<a name="l00915"></a>00915 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00916"></a>00916 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\nleaves convergence test satisfied in state &quot;</span> 
<a name="l00917"></a>00917               &lt;&lt; states &lt;&lt; endl;
<a name="l00918"></a>00918 <span class="preprocessor">        #endif</span>
<a name="l00919"></a>00919 <span class="preprocessor"></span>        <span class="comment">// set the flag for this scalar value</span>
<a name="l00920"></a>00920         rhatLeavesFlag = 1;
<a name="l00921"></a>00921         <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l00922"></a>00922         rhatFlagCounter ++; 
<a name="l00923"></a>00923       }
<a name="l00924"></a>00924     } <span class="comment">// end of checking diagnostic for leaves</span>
<a name="l00925"></a>00925     <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
<a name="l00926"></a>00926       <span class="comment">// if we were okay on this scalar value before</span>
<a name="l00927"></a>00927       <span class="keywordflow">if</span> (rhatLeavesFlag) {
<a name="l00928"></a>00928 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00929"></a>00929 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\nLeaves convergence test now NOT satisfied in state &quot;</span> 
<a name="l00930"></a>00930             &lt;&lt; states &lt;&lt; endl;
<a name="l00931"></a>00931       
<a name="l00932"></a>00932 <span class="preprocessor">        #endif</span>
<a name="l00933"></a>00933 <span class="preprocessor"></span>        rhatLeavesFlag = 0; <span class="comment">// update the flag</span>
<a name="l00934"></a>00934         rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
<a name="l00935"></a>00935       } 
<a name="l00936"></a>00936     }
<a name="l00937"></a>00937 
<a name="l00938"></a>00938 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00939"></a>00939 <span class="preprocessor"></span>      <span class="comment">// store the Leavesflag as well, as a real, which is a fudge...</span>
<a name="l00940"></a>00940       rhatLeavesFlagPtr-&gt;push_back(rhatLeavesFlag);
<a name="l00941"></a>00941 <span class="preprocessor">    #endif</span>
<a name="l00942"></a>00942 <span class="preprocessor"></span>
<a name="l00943"></a>00943     <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
<a name="l00944"></a>00944       burntin = 1; 
<a name="l00945"></a>00945       burntinReachedState = states;
<a name="l00946"></a>00946       
<a name="l00947"></a>00947 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00948"></a>00948 <span class="preprocessor"></span>        <span class="comment">// if we have not been burntin, give a message</span>
<a name="l00949"></a>00949          cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
<a name="l00950"></a>00950             &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l00951"></a>00951 <span class="preprocessor">      #endif</span>
<a name="l00952"></a>00952 <span class="preprocessor"></span>    }
<a name="l00953"></a>00953     
<a name="l00954"></a>00954     <span class="comment">// but it may be that we were burntin and no longer are</span>
<a name="l00955"></a>00955     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
<a name="l00956"></a>00956       
<a name="l00957"></a>00957       burntin = 0; 
<a name="l00958"></a>00958       burntinReachedState = 0;
<a name="l00959"></a>00959       
<a name="l00960"></a>00960       <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
<a name="l00961"></a>00961       samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
<a name="l00962"></a>00962       
<a name="l00963"></a>00963       samplesSoFar = 0;
<a name="l00964"></a>00964       
<a name="l00965"></a>00965       <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
<a name="l00966"></a>00966       cxsc::real newVal(0.0);
<a name="l00967"></a>00967       
<a name="l00968"></a>00968 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00969"></a>00969 <span class="preprocessor"></span>        std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
<a name="l00970"></a>00970           std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<a name="l00971"></a>00971 <span class="preprocessor">      #endif</span>
<a name="l00972"></a>00972 <span class="preprocessor"></span>      
<a name="l00973"></a>00973       <span class="comment">// restart the log file if we are logging</span>
<a name="l00974"></a>00974       <span class="comment">// note nothing done here yet about logging graphs as well  </span>
<a name="l00975"></a>00975       <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l00976"></a>00976         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00977"></a>00977       }   
<a name="l00978"></a>00978       
<a name="l00979"></a>00979 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00980"></a>00980 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
<a name="l00981"></a>00981             &lt;&lt; states &lt;&lt; endl;
<a name="l00982"></a>00982         
<a name="l00983"></a>00983 <span class="preprocessor">      #endif</span>
<a name="l00984"></a>00984 <span class="preprocessor"></span>    }
<a name="l00985"></a>00985     
<a name="l00986"></a>00986     <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<a name="l00987"></a>00987 <span class="comment">     * the thinout specified </span>
<a name="l00988"></a>00988 <span class="comment">     * note - we will only be in the loop at all if we still need more samples*/</span>
<a name="l00989"></a>00989     <span class="keywordflow">if</span> (burntin &amp;&amp; (( states - burntinReachedState )%thinout == 0)) {
<a name="l00990"></a>00990       
<a name="l00991"></a>00991 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00992"></a>00992 <span class="preprocessor"></span>        <span class="comment">//cout &lt;&lt; &quot;sampling at state &quot; &lt;&lt; states &lt;&lt; endl;</span>
<a name="l00993"></a>00993         sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
<a name="l00994"></a>00994 
<a name="l00995"></a>00995 <span class="preprocessor">      #endif</span>
<a name="l00996"></a>00996 <span class="preprocessor"></span>      
<a name="l00997"></a>00997       <span class="comment">// take one sample from each chain until we have enough samples</span>
<a name="l00998"></a>00998       <span class="comment">// and increment samplesSoFar for each one taken</span>
<a name="l00999"></a>00999       vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01000"></a>01000 
<a name="l01001"></a>01001       <span class="keywordflow">for</span> (ait = hists.begin(); 
<a name="l01002"></a>01002           (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
<a name="l01003"></a>01003           ++ait) {
<a name="l01004"></a>01004         
<a name="l01005"></a>01005         <span class="comment">// get the IAE of this histogram</span>
<a name="l01006"></a>01006         <span class="comment">//stateL1[c].push_back((*ait)-&gt;getUnifIAE());</span>
<a name="l01007"></a>01007         <span class="comment">//cout &lt;&lt; &quot;#Leaves: &quot; &lt;&lt; spLeaves((*ait)-&gt;getSubPaving()) &lt;&lt; endl;</span>
<a name="l01008"></a>01008         
<a name="l01009"></a>01009         <span class="comment">// add the collation (this is the main collation to output the final averaged sample)</span>
<a name="l01010"></a>01010         samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
<a name="l01011"></a>01011         <span class="comment">//cout &lt;&lt; samplesColl-&gt;getNumberCollated() &lt;&lt; endl;</span>
<a name="l01012"></a>01012 
<a name="l01013"></a>01013         <span class="comment">//cout &lt;&lt; &quot;adding this sample to the collater for chain &quot; &lt;&lt; c &lt;&lt; endl;</span>
<a name="l01014"></a>01014         <span class="comment">// also add this to the collation associated with this chain</span>
<a name="l01015"></a>01015         <span class="comment">//sigh this is so stupid but i can&#39;t get the vector one to work</span>
<a name="l01016"></a>01016         <span class="comment">/*</span>
<a name="l01017"></a>01017 <span class="comment">        if (c==0) { </span>
<a name="l01018"></a>01018 <span class="comment">          coll1-&gt;addToCollation(**ait); </span>
<a name="l01019"></a>01019 <span class="comment">          //cout &lt;&lt; coll1-&gt;getNumberCollated() &lt;&lt; endl; </span>
<a name="l01020"></a>01020 <span class="comment">          // get the average of the collation associated with this chain</span>
<a name="l01021"></a>01021 <span class="comment">          AdaptiveHistogramCollator colltemp = coll1-&gt;makeAverage();</span>
<a name="l01022"></a>01022 <span class="comment">          // get the IAE</span>
<a name="l01023"></a>01023 <span class="comment">          avgStateL1[c].push_back(colltemp.getUnifIAE());</span>
<a name="l01024"></a>01024 <span class="comment">        }</span>
<a name="l01025"></a>01025 <span class="comment">        else {</span>
<a name="l01026"></a>01026 <span class="comment">          coll2-&gt;addToCollation(**ait); </span>
<a name="l01027"></a>01027 <span class="comment">          //cout &lt;&lt; coll2-&gt;getNumberCollated() &lt;&lt; endl; </span>
<a name="l01028"></a>01028 <span class="comment">          // get the average of the collation associated with this chain</span>
<a name="l01029"></a>01029 <span class="comment">          AdaptiveHistogramCollator colltemp = coll2-&gt;makeAverage();</span>
<a name="l01030"></a>01030 <span class="comment">          // get the IAE</span>
<a name="l01031"></a>01031 <span class="comment">          avgStateL1[c].push_back(colltemp.getUnifIAE());</span>
<a name="l01032"></a>01032 <span class="comment">        }</span>
<a name="l01033"></a>01033 <span class="comment"></span>
<a name="l01034"></a>01034 <span class="comment">        c++; //chain index</span>
<a name="l01035"></a>01035 <span class="comment">        */</span>
<a name="l01036"></a>01036         samplesSoFar++;
<a name="l01037"></a>01037         
<a name="l01038"></a>01038         <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01039"></a>01039           <span class="comment">//(*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);</span>
<a name="l01040"></a>01040         }
<a name="l01041"></a>01041       } <span class="comment">// finished iterating through samples to be taken</span>
<a name="l01042"></a>01042     } <span class="comment">// finished taking samples for this loop</span>
<a name="l01043"></a>01043     <span class="keywordflow">else</span> {
<a name="l01044"></a>01044 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01045"></a>01045 <span class="preprocessor"></span>        sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<a name="l01046"></a>01046 <span class="preprocessor">      #endif</span>
<a name="l01047"></a>01047 <span class="preprocessor"></span>    }
<a name="l01048"></a>01048     
<a name="l01049"></a>01049     assert( (samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar) );
<a name="l01050"></a>01050     
<a name="l01051"></a>01051     <span class="comment">// back into loop</span>
<a name="l01052"></a>01052 <span class="preprocessor">    #if !defined(MYDEBUG_CALCS)</span>
<a name="l01053"></a>01053 <span class="preprocessor"></span><span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01054"></a>01054 <span class="preprocessor"></span>        <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
<a name="l01055"></a>01055         <span class="keywordflow">if</span> (loopCounter%100 == 0) {
<a name="l01056"></a>01056           cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
<a name="l01057"></a>01057         }
<a name="l01058"></a>01058 <span class="preprocessor">      #endif</span>
<a name="l01059"></a>01059 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l01060"></a>01060 <span class="preprocessor"></span>  }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
<a name="l01061"></a>01061   
<a name="l01062"></a>01062   cancontinue = goodLoop;
<a name="l01063"></a>01063   
<a name="l01064"></a>01064   <span class="comment">// stop recording time here</span>
<a name="l01065"></a>01065   end = clock();  
<a name="l01066"></a>01066   timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l01067"></a>01067   cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l01068"></a>01068   
<a name="l01069"></a>01069 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l01070"></a>01070 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops, states counter is = &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l01071"></a>01071 <span class="preprocessor">  #endif</span>
<a name="l01072"></a>01072 <span class="preprocessor"></span>  
<a name="l01073"></a>01073   cout &lt;&lt; <span class="stringliteral">&quot;\nnumber of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l01074"></a>01074   
<a name="l01075"></a>01075   <span class="comment">// free the random number generator</span>
<a name="l01076"></a>01076   gsl_rng_free (rgsl);
<a name="l01077"></a>01077 
<a name="l01078"></a>01078   cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
<a name="l01079"></a>01079 
<a name="l01080"></a>01080   
<a name="l01081"></a>01081   <span class="comment">/* is all okay with the loop</span>
<a name="l01082"></a>01082 <span class="comment">   * and we have all our samples */</span>
<a name="l01083"></a>01083   <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {
<a name="l01084"></a>01084 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01085"></a>01085 <span class="preprocessor"></span>      <span class="comment">// output the overall collator</span>
<a name="l01086"></a>01086       samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<a name="l01087"></a>01087 <span class="preprocessor">    #endif</span>
<a name="l01088"></a>01088 <span class="preprocessor"></span>    
<a name="l01089"></a>01089     <span class="comment">// make the return object be the average of the samples</span>
<a name="l01090"></a>01090     *samplesAvg = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l01091"></a>01091       
<a name="l01092"></a>01092     <span class="comment">// output the convergence diagnostics</span>
<a name="l01093"></a>01093     
<a name="l01094"></a>01094     <span class="comment">//output file for leaves</span>
<a name="l01095"></a>01095     {
<a name="l01096"></a>01096       std::vector &lt; std::string &gt; colNames;
<a name="l01097"></a>01097       colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01098"></a>01098       colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01099"></a>01099       colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01100"></a>01100       colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<a name="l01101"></a>01101 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01102"></a>01102 <span class="preprocessor"></span>        colNames.push_back(<span class="stringliteral">&quot;rhatFlag&quot;</span>);
<a name="l01103"></a>01103         colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01104"></a>01104 <span class="preprocessor">      #endif</span>
<a name="l01105"></a>01105 <span class="preprocessor"></span>      std::vector &lt; RealVec* &gt; data;
<a name="l01106"></a>01106       data.push_back(Ws_leavesPtr);
<a name="l01107"></a>01107       data.push_back(Bs_leavesPtr);
<a name="l01108"></a>01108       data.push_back(estVarV_leavesPtr);
<a name="l01109"></a>01109       data.push_back(rhat_leavesPtr);
<a name="l01110"></a>01110 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01111"></a>01111 <span class="preprocessor"></span>        data.push_back(rhatLeavesFlagPtr);
<a name="l01112"></a>01112         data.push_back(sampledIndPtr);
<a name="l01113"></a>01113 <span class="preprocessor">      #endif</span>
<a name="l01114"></a>01114 <span class="preprocessor"></span>      <span class="keywordtype">int</span> precData = 5;
<a name="l01115"></a>01115       <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesFilename, precData);
<a name="l01116"></a>01116     } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01117"></a>01117     
<a name="l01118"></a>01118     
<a name="l01119"></a>01119     <span class="comment">// output the leaves  as v_ij&#39;s)</span>
<a name="l01120"></a>01120     {
<a name="l01121"></a>01121       std::vector &lt; std::string &gt; colNames;
<a name="l01122"></a>01122       colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01123"></a>01123       
<a name="l01124"></a>01124       std::vector &lt; RealVec* &gt; data;
<a name="l01125"></a>01125       data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01126"></a>01126       
<a name="l01127"></a>01127       <span class="keywordtype">int</span> precData = 10;
<a name="l01128"></a>01128       <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_Leaves_Filename, precData);
<a name="l01129"></a>01129     }
<a name="l01130"></a>01130 
<a name="l01131"></a>01131 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01132"></a>01132 <span class="preprocessor"></span>    {
<a name="l01133"></a>01133       <span class="comment">/* output working calcs: all leaves for each chain, </span>
<a name="l01134"></a>01134 <span class="comment">       * running sums for each chain, sample variances,</span>
<a name="l01135"></a>01135 <span class="comment">       * overall running sums */</span>
<a name="l01136"></a>01136       std::vector &lt; std::string &gt; colNames;
<a name="l01137"></a>01137       colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01138"></a>01138       colNames.insert(colNames.end(), leavesRunningSumColNames.begin(), leavesRunningSumColNames.end());
<a name="l01139"></a>01139       colNames.insert(colNames.end(), leavesSampleVarianceColNames.begin(), leavesSampleVarianceColNames.end());
<a name="l01140"></a>01140       colNames.push_back(overallLeavesRunningSumColName);
<a name="l01141"></a>01141       
<a name="l01142"></a>01142       std::vector &lt; RealVec* &gt; data;
<a name="l01143"></a>01143       data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01144"></a>01144       data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumLeavesChainsPtr);
<a name="l01145"></a>01145       data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesLeavesPtr);
<a name="l01146"></a>01146       data.push_back(runningSumLeavesOverallPtr);
<a name="l01147"></a>01147       
<a name="l01148"></a>01148       <span class="keywordtype">int</span> precData = 10;
<a name="l01149"></a>01149       <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesWorkingCalcsFilename, precData);
<a name="l01150"></a>01150     
<a name="l01151"></a>01151     }
<a name="l01152"></a>01152 <span class="preprocessor">    #endif</span>
<a name="l01153"></a>01153 <span class="preprocessor"></span>
<a name="l01154"></a>01154     cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
<a name="l01155"></a>01155     cout &lt;&lt; <span class="stringliteral">&quot;Check output files\n\t&quot;</span> &lt;&lt; GRLeavesFilename
<a name="l01156"></a>01156             &lt;&lt; <span class="stringliteral">&quot;\nfor diagnostics&quot;</span> &lt;&lt; endl;
<a name="l01157"></a>01157     cout &lt;&lt; <span class="stringliteral">&quot;and for scalar values\n\t&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01158"></a>01158     <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01159"></a>01159       cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
<a name="l01160"></a>01160           &lt;&lt; <span class="stringliteral">&quot;\nfor log of samples&quot;</span> &lt;&lt;endl;
<a name="l01161"></a>01161     }
<a name="l01162"></a>01162 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01163"></a>01163 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; GRLeavesWorkingCalcsFilename
<a name="l01164"></a>01164           &lt;&lt; <span class="stringliteral">&quot;\nfor working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<a name="l01165"></a>01165 <span class="preprocessor">    #endif</span>
<a name="l01166"></a>01166 <span class="preprocessor"></span><span class="preprocessor">    #ifdef MYDEBUG_OUTPUT</span>
<a name="l01167"></a>01167 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l01168"></a>01168           &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
<a name="l01169"></a>01169           &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l01170"></a>01170           &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l01171"></a>01171 <span class="preprocessor">    #endif</span>
<a name="l01172"></a>01172 <span class="preprocessor"></span>    cout &lt;&lt; endl;
<a name="l01173"></a>01173   }
<a name="l01174"></a>01174   
<a name="l01175"></a>01175   <span class="comment">/* clean up the newed stuff</span>
<a name="l01176"></a>01176 <span class="comment">   * </span>
<a name="l01177"></a>01177 <span class="comment">   * note that this does not get cleaned up if we throw an exception in the while loop</span>
<a name="l01178"></a>01178 <span class="comment">   * - should probably deal with that at some point but all the newed memory will be </span>
<a name="l01179"></a>01179 <span class="comment">   * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<a name="l01180"></a>01180 <span class="comment">   * it will be okay for the moment */</span>
<a name="l01181"></a>01181 
<a name="l01182"></a>01182   vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01183"></a>01183   <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
<a name="l01184"></a>01184     <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l01185"></a>01185   }
<a name="l01186"></a>01186 
<a name="l01187"></a>01187   vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l01188"></a>01188   <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
<a name="l01189"></a>01189     <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l01190"></a>01190   }
<a name="l01191"></a>01191 
<a name="l01192"></a>01192   <span class="comment">/*</span>
<a name="l01193"></a>01193 <span class="comment">  for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<a name="l01194"></a>01194 <span class="comment">    if (NULL != *acit) delete (*acit);</span>
<a name="l01195"></a>01195 <span class="comment">  }</span>
<a name="l01196"></a>01196 <span class="comment">  */</span>
<a name="l01197"></a>01197   
<a name="l01198"></a>01198   <span class="keyword">delete</span> samplesColl;
<a name="l01199"></a>01199   
<a name="l01200"></a>01200 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l01201"></a>01201 <span class="preprocessor"></span>    <span class="keyword">delete</span> sampledIndPtr;
<a name="l01202"></a>01202 <span class="preprocessor">  #endif</span>
<a name="l01203"></a>01203 <span class="preprocessor"></span>  
<a name="l01204"></a>01204   <span class="comment">// leaves stuff</span>
<a name="l01205"></a>01205   <span class="keyword">delete</span> leavesPtr;  
<a name="l01206"></a>01206   
<a name="l01207"></a>01207 <span class="preprocessor">  #ifdef MYDEBUG</span>
<a name="l01208"></a>01208 <span class="preprocessor"></span>    <span class="keyword">delete</span> runningSumLeavesOverallPtr;
<a name="l01209"></a>01209     <span class="keyword">delete</span> runningSumLeavesChainsPtr;
<a name="l01210"></a>01210     <span class="keyword">delete</span> sampleVariancesLeavesPtr;
<a name="l01211"></a>01211     <span class="keyword">delete</span> rhatLeavesFlagPtr;
<a name="l01212"></a>01212 <span class="preprocessor">  #endif</span>
<a name="l01213"></a>01213 <span class="preprocessor"></span>
<a name="l01214"></a>01214   <span class="keyword">delete</span> Ws_leavesPtr;
<a name="l01215"></a>01215   <span class="keyword">delete</span> Bs_leavesPtr;
<a name="l01216"></a>01216   <span class="keyword">delete</span> estVarV_leavesPtr;
<a name="l01217"></a>01217   <span class="keyword">delete</span> rhat_leavesPtr;
<a name="l01218"></a>01218 
<a name="l01219"></a>01219         
<a name="l01220"></a>01220   <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<a name="l01221"></a>01221 <span class="comment">   *  really the only reason for failing here is that we did not get the right </span>
<a name="l01222"></a>01222 <span class="comment">   * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
<a name="l01223"></a>01223   <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
<a name="l01224"></a>01224     cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l01225"></a>01225     cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
<a name="l01226"></a>01226         &lt;&lt; GRLeavesFilename
<a name="l01227"></a>01227         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01228"></a>01228     
<a name="l01229"></a>01229 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01230"></a>01230 <span class="preprocessor"></span>      cout &lt;&lt; GRLeavesWorkingCalcsFilename &lt;&lt; endl;
<a name="l01231"></a>01231 <span class="preprocessor">    #endif</span>
<a name="l01232"></a>01232 <span class="preprocessor"></span>    <span class="keywordflow">if</span> ( (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) ) {
<a name="l01233"></a>01233       cout &lt;&lt; samplesLogFilename &lt;&lt; endl;
<a name="l01234"></a>01234     }
<a name="l01235"></a>01235 <span class="preprocessor">    #ifdef MYDEBUG_OUTPUT</span>
<a name="l01236"></a>01236 <span class="preprocessor"></span>      cout &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01237"></a>01237       &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01238"></a>01238       &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
<a name="l01239"></a>01239 <span class="preprocessor">    #endif</span>
<a name="l01240"></a>01240 <span class="preprocessor"></span>    cout &lt;&lt; endl;
<a name="l01241"></a>01241     
<a name="l01242"></a>01242     <span class="keywordflow">if</span> (!cancontinue) {
<a name="l01243"></a>01243       <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
<a name="l01244"></a>01244     }
<a name="l01245"></a>01245     <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
<a name="l01246"></a>01246       <span class="comment">// we have not been able to get the required samples - need to give up</span>
<a name="l01247"></a>01247       <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
<a name="l01248"></a>01248     }
<a name="l01249"></a>01249   }
<a name="l01250"></a>01250     <span class="comment">/*</span>
<a name="l01251"></a>01251 <span class="comment">    // Output the L1 error of states</span>
<a name="l01252"></a>01252 <span class="comment">    vector&lt; vector&lt;real&gt; &gt;::iterator it1;</span>
<a name="l01253"></a>01253 <span class="comment">    vector&lt;real&gt;::iterator it2;</span>
<a name="l01254"></a>01254 <span class="comment">    string stateL1FileName = &quot;UnifStateL1FileName&quot;;</span>
<a name="l01255"></a>01255 <span class="comment">    stateL1FileName += stmH.str();</span>
<a name="l01256"></a>01256 <span class="comment">    stateL1FileName += &quot;.txt&quot;;</span>
<a name="l01257"></a>01257 <span class="comment">    os.open(stateL1FileName.c_str());</span>
<a name="l01258"></a>01258 <span class="comment">    for (it1 = stateL1.begin(); it1 &lt; stateL1.end(); it1++) { </span>
<a name="l01259"></a>01259 <span class="comment">      for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<a name="l01260"></a>01260 <span class="comment">        os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l01261"></a>01261 <span class="comment">      }</span>
<a name="l01262"></a>01262 <span class="comment">      os &lt;&lt; &quot;\n&quot;;</span>
<a name="l01263"></a>01263 <span class="comment">    }</span>
<a name="l01264"></a>01264 <span class="comment">    os &lt;&lt; flush;</span>
<a name="l01265"></a>01265 <span class="comment">    os.close();</span>
<a name="l01266"></a>01266 <span class="comment">    </span>
<a name="l01267"></a>01267 <span class="comment">    // Output the L1 error of avg states</span>
<a name="l01268"></a>01268 <span class="comment">    string avgL1FileName = &quot;UnifAvgL1FileName&quot;;</span>
<a name="l01269"></a>01269 <span class="comment">    avgL1FileName += stmH.str();</span>
<a name="l01270"></a>01270 <span class="comment">    avgL1FileName += &quot;.txt&quot;;</span>
<a name="l01271"></a>01271 <span class="comment">    os.open(avgL1FileName.c_str());</span>
<a name="l01272"></a>01272 <span class="comment">    for (it1 = avgStateL1.begin(); it1 &lt; avgStateL1.end(); it1++) { </span>
<a name="l01273"></a>01273 <span class="comment">      for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {</span>
<a name="l01274"></a>01274 <span class="comment">        os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l01275"></a>01275 <span class="comment">      }</span>
<a name="l01276"></a>01276 <span class="comment">      os &lt;&lt; &quot;\n&quot;;</span>
<a name="l01277"></a>01277 <span class="comment">    }</span>
<a name="l01278"></a>01278 <span class="comment">    os &lt;&lt; flush;</span>
<a name="l01279"></a>01279 <span class="comment">    os.close();</span>
<a name="l01280"></a>01280 <span class="comment">    cout &lt;&lt; &quot;L1-errors output to &quot; &lt;&lt; avgL1FileName &lt;&lt; &quot; and &quot; &lt;&lt; stateL1FileName &lt;&lt; endl;</span>
<a name="l01281"></a>01281 <span class="comment">    */</span>
<a name="l01282"></a>01282     
<a name="l01283"></a>01283     <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l01284"></a>01284     cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
<a name="l01285"></a>01285     <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l01286"></a>01286     
<a name="l01287"></a>01287     <span class="comment">// now get the IAE of samplesAvg</span>
<a name="l01288"></a>01288     real thisIAE = mid(samplesAvg-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2173c80c47c7758c67e5f014f92893e3">getFinMixIntervalIAE</a>(mixt, Tol, Deg)); 
<a name="l01289"></a>01289     <span class="comment">//output IAE to file</span>
<a name="l01290"></a>01290     <span class="keywordtype">string</span> IAEFileName;
<a name="l01291"></a>01291     IAEFileName = <span class="stringliteral">&quot;FinMixIAETime&quot;</span>;
<a name="l01292"></a>01292     IAEFileName += stmH.str();
<a name="l01293"></a>01293     IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01294"></a>01294     os.open(IAEFileName.c_str());
<a name="l01295"></a>01295     os &lt;&lt; thisIAE &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; timing &lt;&lt; endl;
<a name="l01296"></a>01296     os &lt;&lt; flush;
<a name="l01297"></a>01297     os.close();
<a name="l01298"></a>01298     cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; IAEFileName &lt;&lt; endl;
<a name="l01299"></a>01299 
<a name="l01300"></a>01300   } <span class="comment">// end check on successful insertion of data into histograms</span>
<a name="l01301"></a>01301   
<a name="l01302"></a>01302   <span class="keywordflow">else</span> {
<a name="l01303"></a>01303     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
<a name="l01304"></a>01304   }
<a name="l01305"></a>01305 
<a name="l01306"></a>01306   cout &lt;&lt; <span class="stringliteral">&quot;==========end of simulation &quot;</span> &lt;&lt; dataSeed &lt;&lt; <span class="stringliteral">&quot;===========&quot;</span> &lt;&lt; endl;
<a name="l01307"></a>01307 
<a name="l01308"></a>01308 <span class="comment">//free the random number generator</span>
<a name="l01309"></a>01309 gsl_rng_free(r);
<a name="l01310"></a>01310 gsl_rng_free(r1);
<a name="l01311"></a>01311 
<a name="l01312"></a>01312   std::string samplesCollAverageFilename = <span class="stringliteral">&quot;AveragedSamples&quot;</span>;
<a name="l01313"></a>01313   samplesCollAverageFilename += stmH.str();
<a name="l01314"></a>01314   samplesCollAverageFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01315"></a>01315   <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
<a name="l01316"></a>01316   samplesAvg-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
<a name="l01317"></a>01317 
<a name="l01318"></a>01318 <span class="keywordflow">return</span> *samplesAvg;
<a name="l01319"></a>01319 
<a name="l01320"></a>01320 } <span class="comment">// end of MCMC test program</span>
<a name="l01321"></a>01321 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRSimsLeavesFinMix_8cpp.shtml">MCMCGRSimsLeavesFinMix.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
