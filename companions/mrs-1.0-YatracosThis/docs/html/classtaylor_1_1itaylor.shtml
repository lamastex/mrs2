<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: taylor::itaylor Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classtaylor_1_1itaylor.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#pri-static-attribs">Static Private Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">taylor::itaylor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="taylor::itaylor" -->
<p><code>#include &lt;<a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>&gt;</code></p>

<p><a href="classtaylor_1_1itaylor-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a8ed680089fc56345b4f3408767099609">itaylor</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a887750e3c2930fedeebe83e693d71b6b">itaylor</a> (int <a class="el" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a680b6e9e675f47fc26241800635cde08">itaylor</a> (int <a class="el" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>, const real &amp;value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#af8c051a56aab85f0ab6fb9f38f7b34fc">itaylor</a> (int <a class="el" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>, const interval &amp;value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a9c5022ed34814f098555a3eae019932b">~itaylor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a7463aa323cd249c6c8cb4b008f3bd371">operator=</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad2d33ad63445ff588128c7c7ab81ddd2">operator=</a> (int)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ac1bb1fd6de6d9216fb753bd2ba7ffc78">operator=</a> (const real &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a34d9e7d9dadf9745471bfd5379bdc57e">operator=</a> (const interval &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3e9c0bf41e486a5c9c95f107ceba0b7c">operator=</a> (const ivector &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab0651bb54b7671f3443d3f939fbe2510">operator==</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aa7041b3ebe493a059d6dfaee28faf82c">operator!=</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a7b823770abba6bdcf6c2091caee5381d">operator&lt;=</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a5f4eaaa8772c9146900a951b8e53e2c6">operator&lt;</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#acaf2ba4e4dcb012aed6a469a30ad5682">operator&gt;=</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a47ca76c8135b9bd62998e85c427fb232">operator&gt;</a> (<a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3674126b2d14cc05e23c7150b52d0a8f">operator[]</a> (int n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">initialize</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a></td></tr>
<tr><td colspan="2"><h2><a name="pri-static-attribs"></a>
Static Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">initialized</a> = 0</td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad529aabfd4ddb7a266ac5398382a880e">var_itaylor</a> (int ord, const real &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad844d06e1838d2d4ddb723d8a3863591">var_itaylor</a> (int ord, const interval &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a5b0cf952f2ef0ca4bc353c461235be0c">const_itaylor</a> (int ord, const real &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab14712ac0c9330a71023eb14964e34c8">const_itaylor</a> (int ord, const interval &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#abd988b0bc6f50a3a888d43e4008d5d1e">get_all_coef</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a4f1cabe655848691aae55aa9e81744e1">get_j_coef</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad4ee00a6eb0637b14de2995b8a3cd214">print_itaylor</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a379a4a17eb84752d9a16e1e1b5343230">print_itaylor</a> (std::ostream &amp;os, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int width=0, int digits=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ac07b19edfa7978a5fc4c65ce136216f8">operator&lt;&lt;</a> (std::ostream &amp;, <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#afb753973c17006330c7c7418bc21f358">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a738113dbef62af2b3e5d02d81f0d80bf">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#abf63631b6c3b32cd83ffaed31f8a68e1">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab8e67cc898835ff637a15c47c428400f">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad48cedc38c3108eed1beaeb1bc25e622">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a49d69b2639d8a8bf6ba301c8ee1c3bdb">operator-</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3b295df49a3e613a7ae367e70f5541c3">operator+</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a1808edf7ebbeb846cda848363389ce94">operator*</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3327b8c63a96b31906c1882831aeea51">operator/</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a7bf24c7edf481b2cb1bc700704728805">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ac2c50431cad3b55e0fd6ecd0e49f15c2">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aac7006c7eef8c32b26dc2610d5d487c6">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aa9754401400a0551800495335c4997f4">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a2527a23e12002ac1e22143704babbbdc">operator-</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ae02d6346af134135469fbbf8cd5b0498">operator+</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a2161263e12cadbf1f5b44a6e50370d60">operator*</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a430a28502969167967b0a8344636624d">operator/</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad0cc7998df32baffaaa78019a3f8791a">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a1b991862783a37079712e79fd5ba2c52">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a996ffe24777fc20ee48b0754793f72d5">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab591d69abfbe913108d9ccea1183298f">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a96139ed4982a0e407e0187f1c9425cb4">operator-</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a6be136bb60c027951f94d54f9b8d0ff5">operator+</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a6b7bbd3af3ce5d85def7fcdbe95a06f8">operator*</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a70eabbfdbdec4404ab091ce00545e445">operator/</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ad3b9e1d94001b31dc4861877b3ec0600">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a98eab5582ff2ae2c7f6356a56d0122e8">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ab24d929f8b7e5d01e7458a10d90b3603">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aa6d4ea2601ec7cb03450f2816b05daa3">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#af0cb94a71f65eb8f77698f7df2ab403c">sqrt</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#afb2086a33961a372fdfddbc6f8c2bb19">sqrt1px2</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a1d4b5ebbb74084dcbbcdd5feb4980b79">sqrtp1m1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aa71646df2517a0c93f10ef9f936e3330">sqrtx2m1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a01ec110d820ad5da24c157ed72e10395">pow</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;alpha)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a0824022a2814fa1a57cd136336834ff3">expm1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3ab0c3d85fa92ed6881fa80ca0593e4a">ln</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#aae743e342c3929c1beca14adece530f7">lnp1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a146672640c9c6e4e37f566f551e12550">sin</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a61e4504f3507332a814007be5fc8cf9b">cos</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a5a9b67f02158013b52186777813f7f00">tan</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a55e0e1c12c8245130e5f9303f2742ff3">cot</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ae4dc5aee338add08c3b5226045650c3f">sinh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ac5c875cb97ac0f4f9bfd08db0bc20fb4">cosh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a1542dba0eedbc6fda7c8c1e75f380191">tanh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a42ec17cfca80578d13c0a75407882e0d">coth</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#ac3c299b9ddf883a98ab04f2d148b89f8">asin</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3630d8dc6096fe2d8bb96fbe344cd63a">acos</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a08e1af7fe8d116cb08c49f82a98904c6">atan</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#af40f32124cc364033a16c632af8ea138">acot</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a0481365c5de4d766820e0ab6c4b9899a">asinh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#abd30dcb5d1c37fba5101fa52e9353459">acosh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#af434e576d2afe390c574f173ea0fa3f6">atanh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3fec24ca249e42226e93bc9a52cb870e">acoth</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a21a0df49b5b7d917a7d61aec17fc3aac">erf</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a9e1716ae14b1f3444b40a4a07fb03c9a">erfc</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;g, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;u, int nb_function)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml#a3287f4b338adf498600372c2436539be">powerAtZero</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int n)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00103">103</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a265623bc1a74c5677c0b356317691808"></a><!-- doxytag: member="taylor::itaylor::itaylor" ref="a265623bc1a74c5677c0b356317691808" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00062">62</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00046">initialize()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00111">initialized</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8ed680089fc56345b4f3408767099609"></a><!-- doxytag: member="taylor::itaylor::itaylor" ref="a8ed680089fc56345b4f3408767099609" args="(const itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00085">85</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00046">initialize()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00111">initialized</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=s.p;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=s.tayl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a887750e3c2930fedeebe83e693d71b6b"></a><!-- doxytag: member="taylor::itaylor::itaylor" ref="a887750e3c2930fedeebe83e693d71b6b" args="(int order)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00069">69</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00046">initialize()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00111">initialized</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00150">order()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
 <span class="comment">/*if(order&lt;0 || order&gt;170) </span>
<span class="comment">  {</span>
<span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<span class="comment">              &lt;&lt; std::endl;</span>
<span class="comment">    exit(1);</span>
<span class="comment">  }</span>
<span class="comment"> */</span>
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a680b6e9e675f47fc26241800635cde08"></a><!-- doxytag: member="taylor::itaylor::itaylor" ref="a680b6e9e675f47fc26241800635cde08" args="(int order, const real &amp;value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00095">95</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00046">initialize()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00111">initialized</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00150">order()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
 <span class="comment">/*</span>
<span class="comment"> if(order&lt;0 || order&gt;170) </span>
<span class="comment">  {</span>
<span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<span class="comment">              &lt;&lt; std::endl;</span>
<span class="comment">    exit(1);</span>
<span class="comment">  }</span>
<span class="comment"> */</span>
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
 
 interval interval_value=interval(value);
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=interval_value;
 <span class="keywordflow">if</span>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>&gt;0)
   {
     <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1]=interval(1.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="af8c051a56aab85f0ab6fb9f38f7b34fc"></a><!-- doxytag: member="taylor::itaylor::itaylor" ref="af8c051a56aab85f0ab6fb9f38f7b34fc" args="(int order, const interval &amp;value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a265623bc1a74c5677c0b356317691808">itaylor::itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00120">120</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00046">initialize()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00111">initialized</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00150">order()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">if</span>(!<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>){<a class="code" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a>();<a class="code" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a>=1;};
 <span class="comment">/* </span>
<span class="comment">if(order&lt;0 || order&gt;170) </span>
<span class="comment">  {</span>
<span class="comment">    std::cerr &lt;&lt; &quot;itaylor::itaylor: incorrect order! 0&lt;=order&lt;=170&quot; </span>
<span class="comment">              &lt;&lt; std::endl;</span>
<span class="comment">    exit(1);</span>
<span class="comment">  }</span>
<span class="comment"> */</span>
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0]=value;
 <span class="keywordflow">if</span>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>&gt;0)
   { 
     <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[1]=interval(1.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>);i++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[i]=interval(0.0);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9c5022ed34814f098555a3eae019932b"></a><!-- doxytag: member="taylor::itaylor::~itaylor" ref="a9c5022ed34814f098555a3eae019932b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml#a9c5022ed34814f098555a3eae019932b">taylor::itaylor::~itaylor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00121">121</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{;};
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab017f8633627f482ed1f3cc405d62d36"></a><!-- doxytag: member="taylor::itaylor::initialize" ref="ab017f8633627f482ed1f3cc405d62d36" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1itaylor.shtml#ab017f8633627f482ed1f3cc405d62d36">itaylor::initialize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00046">46</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l00062">itaylor()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">/*</span>
<span class="comment"> Resize(itaylor::faks,0,170);</span>
<span class="comment"> itaylor::faks[0]=interval(1.0);</span>
<span class="comment"> itaylor::faks[1]=interval(1.0);</span>
<span class="comment"></span>
<span class="comment"> for(int i=2; i&lt;=170; i++)</span>
<span class="comment">   itaylor::faks[i]=itaylor::faks[i-1]*interval(i);</span>
<span class="comment">  */</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7041b3ebe493a059d6dfaee28faf82c"></a><!-- doxytag: member="taylor::itaylor::operator!=" ref="aa7041b3ebe493a059d6dfaee28faf82c" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00235">235</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> (!((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>==it.tayl)));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5f4eaaa8772c9146900a951b8e53e2c6"></a><!-- doxytag: member="taylor::itaylor::operator&lt;" ref="a5f4eaaa8772c9146900a951b8e53e2c6" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00245">245</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&lt;it.tayl));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7b823770abba6bdcf6c2091caee5381d"></a><!-- doxytag: member="taylor::itaylor::operator&lt;=" ref="a7b823770abba6bdcf6c2091caee5381d" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00240">240</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&lt;=it.tayl));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7463aa323cd249c6c8cb4b008f3bd371"></a><!-- doxytag: member="taylor::itaylor::operator=" ref="a7463aa323cd249c6c8cb4b008f3bd371" args="(const itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> itaylor::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00187">187</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=s.p;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,s.p);
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=s.tayl;
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad2d33ad63445ff588128c7c7ab81ddd2"></a><!-- doxytag: member="taylor::itaylor::operator=" ref="ad2d33ad63445ff588128c7c7ab81ddd2" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> itaylor::operator= </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00195">195</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(n);
 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac1bb1fd6de6d9216fb753bd2ba7ffc78"></a><!-- doxytag: member="taylor::itaylor::operator=" ref="ac1bb1fd6de6d9216fb753bd2ba7ffc78" args="(const real &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> itaylor::operator= </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00202">202</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = interval(x);
 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a34d9e7d9dadf9745471bfd5379bdc57e"></a><!-- doxytag: member="taylor::itaylor::operator=" ref="a34d9e7d9dadf9745471bfd5379bdc57e" args="(const interval &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> itaylor::operator= </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00209">209</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[0] = x;
 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>; j++) <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[j]=0.0;
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3e9c0bf41e486a5c9c95f107ceba0b7c"></a><!-- doxytag: member="taylor::itaylor::operator=" ref="a3e9c0bf41e486a5c9c95f107ceba0b7c" args="(const ivector &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> itaylor::operator= </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>iv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00216">216</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{ 
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>=VecLen(iv)-1;
 Resize(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>,0,<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>);
 <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>=iv;
 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab0651bb54b7671f3443d3f939fbe2510"></a><!-- doxytag: member="taylor::itaylor::operator==" ref="ab0651bb54b7671f3443d3f939fbe2510" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00230">230</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>==it.tayl));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a47ca76c8135b9bd62998e85c427fb232"></a><!-- doxytag: member="taylor::itaylor::operator&gt;" ref="a47ca76c8135b9bd62998e85c427fb232" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00255">255</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&gt;it.tayl));
}
</pre></div>
</div>
</div>
<a class="anchor" id="acaf2ba4e4dcb012aed6a469a30ad5682"></a><!-- doxytag: member="taylor::itaylor::operator&gt;=" ref="acaf2ba4e4dcb012aed6a469a30ad5682" args="(itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int itaylor::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00250">250</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">p</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> ((<a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>==it.p)&amp;&amp;(<a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>&gt;=it.tayl));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3674126b2d14cc05e23c7150b52d0a8f"></a><!-- doxytag: member="taylor::itaylor::operator[]" ref="a3674126b2d14cc05e23c7150b52d0a8f" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval &amp; itaylor::operator[] </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00264">264</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00107">tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">tayl</a>[n];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a1dadee94ddf7f4c48757c02a696996"></a><!-- doxytag: member="taylor::itaylor::order" ref="a8a1dadee94ddf7f4c48757c02a696996" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">taylor::itaylor::order</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00150">150</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l00069">itaylor()</a>.</p>
<div class="fragment"><pre class="fragment">{<span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">p</a>;}           <span class="comment">//added, mg2005-08</span>
</pre></div>
</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a3630d8dc6096fe2d8bb96fbe344cd63a"></a><!-- doxytag: member="taylor::itaylor::acos" ref="a3630d8dc6096fe2d8bb96fbe344cd63a" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a3630d8dc6096fe2d8bb96fbe344cd63a">acos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01373">1373</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g = -<a class="code" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acos : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abd30dcb5d1c37fba5101fa52e9353459"></a><!-- doxytag: member="taylor::itaylor::acosh" ref="abd30dcb5d1c37fba5101fa52e9353459" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#abd30dcb5d1c37fba5101fa52e9353459">acosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01443">1443</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#aa71646df2517a0c93f10ef9f936e3330">sqrtx2m1</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acosh : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af40f32124cc364033a16c632af8ea138"></a><!-- doxytag: member="taylor::itaylor::acot" ref="af40f32124cc364033a16c632af8ea138" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#af40f32124cc364033a16c632af8ea138">acot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01411">1411</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-(interval(1.0)+<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x));

    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3fec24ca249e42226e93bc9a52cb870e"></a><!-- doxytag: member="taylor::itaylor::acoth" ref="a3fec24ca249e42226e93bc9a52cb870e" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a3fec24ca249e42226e93bc9a52cb870e">acoth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01487">1487</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acoth : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  

    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac3c299b9ddf883a98ab04f2d148b89f8"></a><!-- doxytag: member="taylor::itaylor::asin" ref="ac3c299b9ddf883a98ab04f2d148b89f8" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#ac3c299b9ddf883a98ab04f2d148b89f8">asin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01351">1351</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, asin : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0481365c5de4d766820e0ab6c4b9899a"></a><!-- doxytag: member="taylor::itaylor::asinh" ref="a0481365c5de4d766820e0ab6c4b9899a" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a0481365c5de4d766820e0ab6c4b9899a">asinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01427">1427</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#afb2086a33961a372fdfddbc6f8c2bb19">sqrt1px2</a>(x);

    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a08e1af7fe8d116cb08c49f82a98904c6"></a><!-- doxytag: member="taylor::itaylor::atan" ref="a08e1af7fe8d116cb08c49f82a98904c6" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a08e1af7fe8d116cb08c49f82a98904c6">atan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01395">1395</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)+<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x);

    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af434e576d2afe390c574f173ea0fa3f6"></a><!-- doxytag: member="taylor::itaylor::atanh" ref="af434e576d2afe390c574f173ea0fa3f6" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#af434e576d2afe390c574f173ea0fa3f6">atanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01465">1465</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, atanh : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5b0cf952f2ef0ca4bc353c461235be0c"></a><!-- doxytag: member="taylor::itaylor::const_itaylor" ref="a5b0cf952f2ef0ca4bc353c461235be0c" args="(int ord, const real &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a5b0cf952f2ef0ca4bc353c461235be0c">const_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00162">162</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord);
 erg.tayl[0]=interval(c);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.tayl);i++) erg.tayl[i]=interval(0.0);
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab14712ac0c9330a71023eb14964e34c8"></a><!-- doxytag: member="taylor::itaylor::const_itaylor" ref="ab14712ac0c9330a71023eb14964e34c8" args="(int ord, const interval &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a5b0cf952f2ef0ca4bc353c461235be0c">const_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00172">172</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord);
 erg.tayl[0]=c;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.tayl);i++) erg.tayl[i]=interval(0.0);
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a61e4504f3507332a814007be5fc8cf9b"></a><!-- doxytag: member="taylor::itaylor::cos" ref="a61e4504f3507332a814007be5fc8cf9b" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a61e4504f3507332a814007be5fc8cf9b">cos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01185">1185</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);   <span class="comment">// sin</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);   <span class="comment">// cos</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a146672640c9c6e4e37f566f551e12550">sin</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
    erg2.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a61e4504f3507332a814007be5fc8cf9b">cos</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= real(-1.0)/interval(j)*s2;
    }
 <span class="keywordflow">return</span> erg2; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5c875cb97ac0f4f9bfd08db0bc20fb4"></a><!-- doxytag: member="taylor::itaylor::cosh" ref="ac5c875cb97ac0f4f9bfd08db0bc20fb4" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#ac5c875cb97ac0f4f9bfd08db0bc20fb4">cosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01285">1285</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>); <span class="comment">// sinh</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>); <span class="comment">// cosh</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#ae4dc5aee338add08c3b5226045650c3f">sinh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
    erg2.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#ac5c875cb97ac0f4f9bfd08db0bc20fb4">cosh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>

    <span class="comment">// remaining elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= s2/interval(j);
    }
    <span class="keywordflow">return</span> erg2; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a55e0e1c12c8245130e5f9303f2742ff3"></a><!-- doxytag: member="taylor::itaylor::cot" ref="a55e0e1c12c8245130e5f9303f2742ff3" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a55e0e1c12c8245130e5f9303f2742ff3">cot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01235">1235</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a146672640c9c6e4e37f566f551e12550">sin</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, cot : wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a42ec17cfca80578d13c0a75407882e0d"></a><!-- doxytag: member="taylor::itaylor::coth" ref="a42ec17cfca80578d13c0a75407882e0d" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a42ec17cfca80578d13c0a75407882e0d">coth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01329">1329</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#ae4dc5aee338add08c3b5226045650c3f">sinh</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, coth : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a21a0df49b5b7d917a7d61aec17fc3aac"></a><!-- doxytag: member="taylor::itaylor::erf" ref="a21a0df49b5b7d917a7d61aec17fc3aac" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a21a0df49b5b7d917a7d61aec17fc3aac">erf</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01509">1509</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a>(-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x));
   
    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a21a0df49b5b7d917a7d61aec17fc3aac">erf</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
        erg.tayl[k] = 0;
        
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*g.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] = 2*erg.tayl[k]/(<a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9e1716ae14b1f3444b40a4a07fb03c9a"></a><!-- doxytag: member="taylor::itaylor::erfc" ref="a9e1716ae14b1f3444b40a4a07fb03c9a" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a9e1716ae14b1f3444b40a4a07fb03c9a">erfc</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01533">1533</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    erg=interval(1)-<a class="code" href="classtaylor_1_1itaylor.shtml#a21a0df49b5b7d917a7d61aec17fc3aac">erf</a>(x); 

    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a41c38304f26d68b981ac0e668d242492"></a><!-- doxytag: member="taylor::itaylor::exp" ref="a41c38304f26d68b981ac0e668d242492" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01085">1085</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*erg.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] /= interval(k);
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0824022a2814fa1a57cd136336834ff3"></a><!-- doxytag: member="taylor::itaylor::expm1" ref="a0824022a2814fa1a57cd136336834ff3" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a0824022a2814fa1a57cd136336834ff3">expm1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01104">1104</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*erg.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] /= interval(k);
    }
    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a41c38304f26d68b981ac0e668d242492">exp</a>(x.tayl[0])-real(1); <span class="comment">// = expm1(x.tayl[0]); Blomi</span>
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a460a13e4d9a28ea5b39344c64ca4be48"></a><!-- doxytag: member="taylor::itaylor::f_g_u" ref="a460a13e4d9a28ea5b39344c64ca4be48" args="(const itaylor &amp;f, const itaylor &amp;g, const itaylor &amp;u, int nb_function)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nb_function</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00807">807</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(f);
 <span class="keywordtype">int</span> order2=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(g);
 <span class="keywordtype">int</span> order3=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(u);

 <span class="comment">// The following errors should be caught before </span>
 <span class="comment">// but for security here again:</span>
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error1 in f_g_u: different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <span class="keywordflow">if</span>(order3 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error2 in f_g_u: different orders &quot;</span> &lt;&lt; std::endl;
   exit(1);
  };

 <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in f_g_u : wrong argument &quot;</span> &lt;&lt; std::endl;
   exit(1);
  }; 

 <span class="keywordflow">switch</span>(nb_function) <span class="comment">// element No. 0</span>
   {
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a3ab0c3d85fa92ed6881fa80ca0593e4a">ln</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a5a9b67f02158013b52186777813f7f00">tan</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a55e0e1c12c8245130e5f9303f2742ff3">cot</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#ac3c299b9ddf883a98ab04f2d148b89f8">asin</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a3630d8dc6096fe2d8bb96fbe344cd63a">acos</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a08e1af7fe8d116cb08c49f82a98904c6">atan</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#af40f32124cc364033a16c632af8ea138">acot</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a1542dba0eedbc6fda7c8c1e75f380191">tanh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a42ec17cfca80578d13c0a75407882e0d">coth</a>(u.tayl[0]); <span class="keywordflow">break</span>; 

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a0481365c5de4d766820e0ab6c4b9899a">asinh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#abd30dcb5d1c37fba5101fa52e9353459">acosh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#af434e576d2afe390c574f173ea0fa3f6">atanh</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>:f.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a3fec24ca249e42226e93bc9a52cb870e">acoth</a>(u.tayl[0]); <span class="keywordflow">break</span>;
   }
 
 <span class="comment">// remaining elements:</span>
 interval sum; 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(f.tayl); j++) 
 {
     sum = interval(0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j-1; i++)
   sum += interval(i)*f.tayl[i]*g.tayl[j-i];
     f.tayl[j] = (u.tayl[j]-sum/interval(j)) / g.tayl[0];
 }
}
</pre></div>
</div>
</div>
<a class="anchor" id="abd988b0bc6f50a3a888d43e4008d5d1e"></a><!-- doxytag: member="taylor::itaylor::get_all_coef" ref="abd988b0bc6f50a3a888d43e4008d5d1e" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector <a class="el" href="classtaylor_1_1itaylor.shtml#abd988b0bc6f50a3a888d43e4008d5d1e">get_all_coef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00284">284</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.tayl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4f1cabe655848691aae55aa9e81744e1"></a><!-- doxytag: member="taylor::itaylor::get_j_coef" ref="a4f1cabe655848691aae55aa9e81744e1" args="(const itaylor &amp;x, int j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval <a class="el" href="classtaylor_1_1itaylor.shtml#a4f1cabe655848691aae55aa9e81744e1">get_j_coef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00292">292</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.tayl[j];
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a5c0c9343498de2b294fb171605a9ab"></a><!-- doxytag: member="taylor::itaylor::get_order" ref="a8a5c0c9343498de2b294fb171605a9ab" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00276">276</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.p;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ab0c3d85fa92ed6881fa80ca0593e4a"></a><!-- doxytag: member="taylor::itaylor::ln" ref="a3ab0c3d85fa92ed6881fa80ca0593e4a" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a3ab0c3d85fa92ed6881fa80ca0593e4a">ln</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01124">1124</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);

    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,x,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aae743e342c3929c1beca14adece530f7"></a><!-- doxytag: member="taylor::itaylor::lnp1" ref="aae743e342c3929c1beca14adece530f7" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#aae743e342c3929c1beca14adece530f7">lnp1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01137">1137</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>), g(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    g = interval(1) + x;
    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#aae743e342c3929c1beca14adece530f7">lnp1</a>(x.tayl[0]);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
      erg.tayl[k] += interval(j) * erg.tayl[j] * g.tayl[k-j];
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]/interval(k)) / g.tayl[0];
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab8e67cc898835ff637a15c47c428400f"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="ab8e67cc898835ff637a15c47c428400f" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00402">402</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator * : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 interval sum; 
 idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
 {
  sum_idot=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j; i++)
   {
    accumulate(sum_idot, x.tayl[i],y.tayl[j-i]);
   }
  rnd(sum_idot,sum);
  erg.tayl[j]= sum;
 }
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1808edf7ebbeb846cda848363389ce94"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="a1808edf7ebbeb846cda848363389ce94" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00494">494</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aac7006c7eef8c32b26dc2610d5d487c6"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="aac7006c7eef8c32b26dc2610d5d487c6" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00556">556</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]*y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2161263e12cadbf1f5b44a6e50370d60"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="a2161263e12cadbf1f5b44a6e50370d60" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00602">602</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a996ffe24777fc20ee48b0754793f72d5"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="a996ffe24777fc20ee48b0754793f72d5" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00664">664</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]*y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6b7bbd3af3ce5d85def7fcdbe95a06f8"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="a6b7bbd3af3ce5d85def7fcdbe95a06f8" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00714">714</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = interval(x)*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab24d929f8b7e5d01e7458a10d90b3603"></a><!-- doxytag: member="taylor::itaylor::operator*" ref="ab24d929f8b7e5d01e7458a10d90b3603" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00776">776</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]*interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abf63631b6c3b32cd83ffaed31f8a68e1"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="abf63631b6c3b32cd83ffaed31f8a68e1" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00384">384</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator + : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= x.tayl[j]+y.tayl[j];
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3b295df49a3e613a7ae367e70f5541c3"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="a3b295df49a3e613a7ae367e70f5541c3" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00483">483</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = y;
    erg.tayl[0] = x + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac2c50431cad3b55e0fd6ecd0e49f15c2"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="ac2c50431cad3b55e0fd6ecd0e49f15c2" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00545">545</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] + y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae02d6346af134135469fbbf8cd5b0498"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="ae02d6346af134135469fbbf8cd5b0498" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00591">591</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = y;
    erg.tayl[0] = x + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1b991862783a37079712e79fd5ba2c52"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="a1b991862783a37079712e79fd5ba2c52" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00653">653</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] + y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6be136bb60c027951f94d54f9b8d0ff5"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="a6be136bb60c027951f94d54f9b8d0ff5" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00703">703</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = y;
    erg.tayl[0] = interval(x) + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a98eab5582ff2ae2c7f6356a56d0122e8"></a><!-- doxytag: member="taylor::itaylor::operator+" ref="a98eab5582ff2ae2c7f6356a56d0122e8" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00765">765</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] + interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb753973c17006330c7c7418bc21f358"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="afb753973c17006330c7c7418bc21f358" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00354">354</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= -x.tayl[j];
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a738113dbef62af2b3e5d02d81f0d80bf"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="a738113dbef62af2b3e5d02d81f0d80bf" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00366">366</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator - : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= x.tayl[j]-y.tayl[j];
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a49d69b2639d8a8bf6ba301c8ee1c3bdb"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="a49d69b2639d8a8bf6ba301c8ee1c3bdb" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00472">472</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = -y;
    erg.tayl[0] = x - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7bf24c7edf481b2cb1bc700704728805"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="a7bf24c7edf481b2cb1bc700704728805" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00534">534</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] - y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2527a23e12002ac1e22143704babbbdc"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="a2527a23e12002ac1e22143704babbbdc" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00580">580</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = -y;
    erg.tayl[0] = x - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad0cc7998df32baffaaa78019a3f8791a"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="ad0cc7998df32baffaaa78019a3f8791a" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00642">642</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] - y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a96139ed4982a0e407e0187f1c9425cb4"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="a96139ed4982a0e407e0187f1c9425cb4" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00692">692</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = -y;
    erg.tayl[0] = interval(x) - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad3b9e1d94001b31dc4861877b3ec0600"></a><!-- doxytag: member="taylor::itaylor::operator&#45;" ref="ad3b9e1d94001b31dc4861877b3ec0600" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00754">754</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    erg = x;
    erg.tayl[0] = x.tayl[0] - interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad48cedc38c3108eed1beaeb1bc25e622"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="ad48cedc38c3108eed1beaeb1bc25e622" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00432">432</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
 <span class="keywordtype">int</span> order2(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };
 
 <span class="keywordflow">if</span>(0 &lt;= y.tayl[0]) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 interval sum; 
 idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
 {
  sum_idot=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j; i++)
   {
    accumulate(sum_idot, y.tayl[i],erg.tayl[j-i]);
   }
  rnd(sum_idot,sum);
  erg.tayl[j]= (x.tayl[j]-sum)/y.tayl[0];
 }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3327b8c63a96b31906c1882831aeea51"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="a3327b8c63a96b31906c1882831aeea51" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00504">504</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    w.tayl[0] = x / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa9754401400a0551800495335c4997f4"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="aa9754401400a0551800495335c4997f4" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00566">566</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]/y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a430a28502969167967b0a8344636624d"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="a430a28502969167967b0a8344636624d" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00612">612</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    w.tayl[0] = x / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab591d69abfbe913108d9ccea1183298f"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="ab591d69abfbe913108d9ccea1183298f" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00674">674</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (y==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]/y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a70eabbfdbdec4404ab091ce00545e445"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="a70eabbfdbdec4404ab091ce00545e445" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00724">724</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    w.tayl[0] = interval(x) / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa6d4ea2601ec7cb03450f2816b05daa3"></a><!-- doxytag: member="taylor::itaylor::operator/" ref="aa6d4ea2601ec7cb03450f2816b05daa3" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00786">786</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (y==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; j++) erg.tayl[j] = x.tayl[j]/interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac07b19edfa7978a5fc4c65ce136216f8"></a><!-- doxytag: member="taylor::itaylor::operator&lt;&lt;" ref="ac07b19edfa7978a5fc4c65ce136216f8" args="(std::ostream &amp;, itaylor &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00333">333</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;[itaylor object, order &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;
   os &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 os &lt;&lt; std::endl;
 <span class="keywordflow">return</span> os;
}                                
</pre></div>
</div>
</div>
<a class="anchor" id="a01ec110d820ad5da24c157ed72e10395"></a><!-- doxytag: member="taylor::itaylor::pow" ref="a01ec110d820ad5da24c157ed72e10395" args="(const itaylor &amp;x, const interval &amp;alpha)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a01ec110d820ad5da24c157ed72e10395">pow</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01057">1057</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    <span class="keywordflow">if</span> (0&lt;=x.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in interval x&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };

    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a01ec110d820ad5da24c157ed72e10395">pow</a>(x.tayl[0],alpha); <span class="comment">// element No. 0</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += (interval(k-j)*alpha-interval(j))
               * erg.tayl[j] * x.tayl[k-j];
  erg.tayl[k] /= (interval(k)*x.tayl[0]);
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3287f4b338adf498600372c2436539be"></a><!-- doxytag: member="taylor::itaylor::powerAtZero" ref="a3287f4b338adf498600372c2436539be" args="(const itaylor &amp;x, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a3287f4b338adf498600372c2436539be">powerAtZero</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01565">1565</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                             {
  <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
  <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
  
  <span class="keywordflow">if</span> (0&lt;=x.tayl[1])
    {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in the derivative of x&quot;</span> 
    &lt;&lt; std::endl;
      exit(1);
    };
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt;n; k++)
    erg.tayl[k]=0.0;

  erg.tayl[n] = <a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(x.tayl[1],n); <span class="comment">// element No. n</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=n+1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
      erg.tayl[k] = 0;
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1-n; j++)
  erg.tayl[k] += (interval(k-n-j)*n-interval(j))
               * erg.tayl[j+n] * x.tayl[k+1-n-j];
      erg.tayl[k] /= (interval(k-n)*x.tayl[1]);
    }
  <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad4ee00a6eb0637b14de2995b8a3cd214"></a><!-- doxytag: member="taylor::itaylor::print_itaylor" ref="ad4ee00a6eb0637b14de2995b8a3cd214" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1itaylor.shtml#ad4ee00a6eb0637b14de2995b8a3cd214">print_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00308">308</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 std::cerr &lt;&lt;<span class="stringliteral">&quot;Output itaylor of order &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span> &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 std::cerr &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a379a4a17eb84752d9a16e1e1b5343230"></a><!-- doxytag: member="taylor::itaylor::print_itaylor" ref="a379a4a17eb84752d9a16e1e1b5343230" args="(std::ostream &amp;os, const itaylor &amp;x, int width=0, int digits=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classtaylor_1_1itaylor.shtml#ad4ee00a6eb0637b14de2995b8a3cd214">print_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>digits</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00318">318</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;Ausgabe itaylor der Ordnung &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   os &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span>;
   <span class="keywordflow">if</span> (width&gt;0||digits&gt;0) os &lt;&lt; SetPrecision(width,digits);
   os &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 os &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a146672640c9c6e4e37f566f551e12550"></a><!-- doxytag: member="taylor::itaylor::sin" ref="a146672640c9c6e4e37f566f551e12550" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a146672640c9c6e4e37f566f551e12550">sin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01157">1157</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);   <span class="comment">// sin</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);   <span class="comment">// cos</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a146672640c9c6e4e37f566f551e12550">sin</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
    erg2.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a61e4504f3507332a814007be5fc8cf9b">cos</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= real(-1.0)/interval(j)*s2;
    }
    <span class="keywordflow">return</span> erg1; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae4dc5aee338add08c3b5226045650c3f"></a><!-- doxytag: member="taylor::itaylor::sinh" ref="ae4dc5aee338add08c3b5226045650c3f" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#ae4dc5aee338add08c3b5226045650c3f">sinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01257">1257</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);  <span class="comment">// sinh</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);  <span class="comment">// cosh</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#ae4dc5aee338add08c3b5226045650c3f">sinh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
    erg2.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#ac5c875cb97ac0f4f9bfd08db0bc20fb4">cosh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= s2/interval(j);
    }
    <span class="keywordflow">return</span> erg1; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="aea909b05cd5051da6dc84c98e3cf64eb"></a><!-- doxytag: member="taylor::itaylor::sqr" ref="aea909b05cd5051da6dc84c98e3cf64eb" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00868">868</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x.tayl[0]);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  m = (k+1) / 2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=m-1; j++) 
      accumulate(idot,x.tayl[j],x.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x.tayl[m]); <span class="comment">// k even </span>
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ef6e81a1ceb32ee143c301365a35980"></a><!-- doxytag: member="taylor::itaylor::sqrt" ref="a9ef6e81a1ceb32ee143c301365a35980" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00894">894</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">if</span> (0&lt;=x.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt: 0 in interval&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(x.tayl[0]);
    h = erg.tayl[0];
    times2pown(h,1);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  m = (k+1) / 2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]) / h;
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af0cb94a71f65eb8f77698f7df2ab403c"></a><!-- doxytag: member="taylor::itaylor::sqrt" ref="af0cb94a71f65eb8f77698f7df2ab403c" args="(const itaylor &amp;x, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00927">927</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keywordflow">if</span> (0&lt;=x.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt(x,n): 0 in interval&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(x.tayl[0],n); <span class="comment">// element No. 0</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += (interval(k-j)/real(n)-interval(j))
               * erg.tayl[j] * x.tayl[k-j];
  erg.tayl[k] /= (interval(k)*x.tayl[0]);
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2a029f70653490604efa8b4f08a9875d"></a><!-- doxytag: member="taylor::itaylor::sqrt1mx2" ref="a2a029f70653490604efa8b4f08a9875d" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00950">950</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>), g(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&lt;=-1 || Sup(x.tayl[0])&gt;=1)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt1mx2: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(real(1)-<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x.tayl[0])); <span class="comment">// =sqrt1mx2(x.tayl[0]); Blomi </span>
    h = real(-1)/erg.tayl[0];
    times2pown(h,-1);
    g = <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  m = (k+1)/2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
  erg.tayl[k] = (g.tayl[k]+erg.tayl[k])*h;
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb2086a33961a372fdfddbc6f8c2bb19"></a><!-- doxytag: member="taylor::itaylor::sqrt1px2" ref="afb2086a33961a372fdfddbc6f8c2bb19" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#afb2086a33961a372fdfddbc6f8c2bb19">sqrt1px2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01547">1547</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    <span class="keyword">const</span> real c = 500.0;

    <span class="keywordflow">if</span> (Inf(x.tayl[0]) &gt; c) erg = x*<a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(real(1)+real(1)/<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x));
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.tayl[0]) &lt; -c) erg = -x*<a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(real(1)+real(1)/<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x)); 
    <span class="keywordflow">else</span> erg = <a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(real(1)+<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x));  
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1d4b5ebbb74084dcbbcdd5feb4980b79"></a><!-- doxytag: member="taylor::itaylor::sqrtp1m1" ref="a1d4b5ebbb74084dcbbcdd5feb4980b79" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a1d4b5ebbb74084dcbbcdd5feb4980b79">sqrtp1m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01022">1022</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);
    idotprecision idot;
    interval h,Ne;

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&lt;=-1)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtp1m1: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };

    erg.tayl[0] = <a class="code" href="classtaylor_1_1itaylor.shtml#a1d4b5ebbb74084dcbbcdd5feb4980b79">sqrtp1m1</a>(x.tayl[0]);
    Ne = real(1.0)+erg.tayl[0];
    times2pown(Ne,1);

    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
    {
  m = (k+1)/2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++)
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,h);
  times2pown(h,1);
  erg.tayl[k] = h;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(erg.tayl[m]);
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]) / Ne; 
    }
    <span class="keywordflow">return</span> erg;
} <span class="comment">// sqrtp1m1</span>
</pre></div>
</div>
</div>
<a class="anchor" id="aa71646df2517a0c93f10ef9f936e3330"></a><!-- doxytag: member="taylor::itaylor::sqrtx2m1" ref="aa71646df2517a0c93f10ef9f936e3330" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#aa71646df2517a0c93f10ef9f936e3330">sqrtx2m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00984">984</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">const</span> real c = 30.0; 
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>), g(<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>);

    <span class="keywordflow">if</span> (Disjoint(x.tayl[0],interval(-1,1))==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtx2m1: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&gt;c) erg = x*<a class="code" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a>(real(1)/x);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.tayl[0])&lt;-c) erg = -x*<a class="code" href="classtaylor_1_1itaylor.shtml#a2a029f70653490604efa8b4f08a9875d">sqrt1mx2</a>(real(1)/x);
    <span class="keywordflow">else</span> {
  erg.tayl[0]=<a class="code" href="classtaylor_1_1itaylor.shtml#a9ef6e81a1ceb32ee143c301365a35980">sqrt</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x.tayl[0])-real(1)); <span class="comment">// =sqrtx2m1(x.tayl[0]); Blomi </span>
  g = <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(x);
  h = real(1)/erg.tayl[0];
  times2pown(h,-1);
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>; k++)
  {
      m = (k+1)/2;
      idot = 0;
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
    accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
      rnd(idot,sum);
      times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
      erg.tayl[k] = sum;
      <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
      erg.tayl[k] = (g.tayl[k]-erg.tayl[k])*h;
  }
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5a9b67f02158013b52186777813f7f00"></a><!-- doxytag: member="taylor::itaylor::tan" ref="a5a9b67f02158013b52186777813f7f00" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a5a9b67f02158013b52186777813f7f00">tan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01213">1213</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#a61e4504f3507332a814007be5fc8cf9b">cos</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, tan : wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1542dba0eedbc6fda7c8c1e75f380191"></a><!-- doxytag: member="taylor::itaylor::tanh" ref="a1542dba0eedbc6fda7c8c1e75f380191" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#a1542dba0eedbc6fda7c8c1e75f380191">tanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01313">1313</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> <a class="code" href="classtaylor_1_1itaylor.shtml#a8a1dadee94ddf7f4c48757c02a696996">order</a>=<a class="code" href="classtaylor_1_1itaylor.shtml#a8a5c0c9343498de2b294fb171605a9ab">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="classtaylor_1_1itaylor.shtml#aea909b05cd5051da6dc84c98e3cf64eb">sqr</a>(<a class="code" href="classtaylor_1_1itaylor.shtml#ac5c875cb97ac0f4f9bfd08db0bc20fb4">cosh</a>(x)); 
 
    <a class="code" href="classtaylor_1_1itaylor.shtml#a460a13e4d9a28ea5b39344c64ca4be48">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad529aabfd4ddb7a266ac5398382a880e"></a><!-- doxytag: member="taylor::itaylor::var_itaylor" ref="ad529aabfd4ddb7a266ac5398382a880e" args="(int ord, const real &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#ad529aabfd4ddb7a266ac5398382a880e">var_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00144">144</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord,x);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad844d06e1838d2d4ddb723d8a3863591"></a><!-- doxytag: member="taylor::itaylor::var_itaylor" ref="ad844d06e1838d2d4ddb723d8a3863591" args="(int ord, const interval &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="classtaylor_1_1itaylor.shtml#ad529aabfd4ddb7a266ac5398382a880e">var_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00152">152</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord,x);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="acf103bcde03b0ace044510e116ab3805"></a><!-- doxytag: member="taylor::itaylor::initialized" ref="acf103bcde03b0ace044510e116ab3805" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1itaylor.shtml#acf103bcde03b0ace044510e116ab3805">itaylor::initialized</a> = 0<code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00111">111</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l00062">itaylor()</a>.</p>

</div>
</div>
<a class="anchor" id="a4039cb1a204543dce7b572839609c890"></a><!-- doxytag: member="taylor::itaylor::p" ref="a4039cb1a204543dce7b572839609c890" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classtaylor_1_1itaylor.shtml#a4039cb1a204543dce7b572839609c890">taylor::itaylor::p</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00106">106</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l00276">taylor::get_order()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00069">itaylor()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00235">operator!=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00245">operator&lt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00333">taylor::operator&lt;&lt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00240">operator&lt;=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00187">operator=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00230">operator==()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00255">operator&gt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00250">operator&gt;=()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l00308">taylor::print_itaylor()</a>.</p>

</div>
</div>
<a class="anchor" id="a4df835280789a8639aed81fe83b272f8"></a><!-- doxytag: member="taylor::itaylor::tayl" ref="a4df835280789a8639aed81fe83b272f8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector <a class="el" href="classtaylor_1_1itaylor.shtml#a4df835280789a8639aed81fe83b272f8">taylor::itaylor::tayl</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00107">107</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l01373">taylor::acos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01443">taylor::acosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01487">taylor::acoth()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01351">taylor::asin()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01465">taylor::atanh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00162">taylor::const_itaylor()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01185">taylor::cos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01285">taylor::cosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01235">taylor::cot()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01329">taylor::coth()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01509">taylor::erf()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01085">taylor::exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01104">taylor::expm1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00807">taylor::f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00284">taylor::get_all_coef()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00292">taylor::get_j_coef()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00069">itaylor()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01137">taylor::lnp1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00235">operator!=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00402">taylor::operator*()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00384">taylor::operator+()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00354">taylor::operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00432">taylor::operator/()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00245">operator&lt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00333">taylor::operator&lt;&lt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00240">operator&lt;=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00187">operator=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00230">operator==()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00255">operator&gt;()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00250">operator&gt;=()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00264">operator[]()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01057">taylor::pow()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01565">taylor::powerAtZero()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00308">taylor::print_itaylor()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01157">taylor::sin()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01257">taylor::sinh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00868">taylor::sqr()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00894">taylor::sqrt()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">taylor::sqrt1mx2()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01547">taylor::sqrt1px2()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01022">taylor::sqrtp1m1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00984">taylor::sqrtx2m1()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01213">taylor::tan()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a></li>
<li><a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacetaylor.shtml">taylor</a>      </li>
      <li class="navelem"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:43 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
