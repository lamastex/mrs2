<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spsvnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spsvnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spsvnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spsvnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file:     SPSVnode.cpp</span>
<a name="l00023"></a>00023 <span class="comment">\brief SPSVnode (StatsSubPavingVal) definitions</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="spsvnode_8hpp.shtml">spsvnode.hpp</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// to use std input/output</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">// to use exceptions</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// include fstream so as to be able to output a file</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">// format manipulation on streams</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;iomanip&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">// to use SPSVnode splitting classes</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="splitdecisionobj_8hpp.shtml" title="classes for determining whether to split an SPSnode.">splitdecisionobj.hpp</a>&quot;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">// to get determinant and inverse of a matrix</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;gsl/gsl_linalg.h&quot;</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">// to access gsl_matrix elements</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;gsl/gsl_matrix.h&quot;</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">// to perform vector-matrix operations</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;gsl/gsl_blas.h&quot;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#include &quot;assert.h&quot;</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="keyword">using namespace </span>std;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="keyword">namespace </span>subpavings {
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="comment">// ---------------------- private member functions -------------------</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <span class="comment">// recalculate stats for hold out data</span>
<a name="l00071"></a>00071     <span class="comment">// recalculate the counter and accumulated sum</span>
<a name="l00072"></a>00072     <span class="comment">// and accumulated sumproducts</span>
<a name="l00073"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#af37c85866ee5bdb968faf84856b51291">00073</a>     <span class="keywordtype">void</span> SPSVnode::recalculateStats(rvector&amp; newdata, <span class="keywordtype">bool</span> boolVal)<span class="keyword"> const</span>
<a name="l00074"></a>00074 <span class="keyword">    </span>{
<a name="l00075"></a>00075         <span class="keywordflow">if</span> (boolVal==<span class="keyword">false</span>) { counter++; } <span class="comment">// update the counter  </span>
<a name="l00076"></a>00076       
<a name="l00077"></a>00077       <span class="keywordflow">else</span> { Vcounter++; } <span class="comment">// update  the Vcounter</span>
<a name="l00078"></a>00078       
<a name="l00079"></a>00079       <span class="comment">//cout &lt;&lt; &quot;incrementing counters for node &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l00080"></a>00080     
<a name="l00081"></a>00081       <span class="keywordflow">if</span> (!countsOnly) {
<a name="l00082"></a>00082             <span class="comment">//cout &lt;&lt; &quot;mean/var calc is on&quot; &lt;&lt; endl;</span>
<a name="l00083"></a>00083             <span class="keywordflow">if</span> (boolVal == <span class="keyword">false</span>) {
<a name="l00084"></a>00084           recalculateSums(newdata); <span class="comment">// update the sums</span>
<a name="l00085"></a>00085           recalculateSumProducts(newdata); <span class="comment">// update the sumproducts</span>
<a name="l00086"></a>00086       }
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089    
<a name="l00090"></a>00090     <span class="comment">// recalculate the accumulated sum</span>
<a name="l00091"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7590c8e3a8502b3b8a15bc2c4c494904">00091</a>     <span class="keywordtype">void</span> SPSVnode::recalculateSums(rvector&amp; newdata)<span class="keyword"> const</span>
<a name="l00092"></a>00092 <span class="keyword">    </span>{
<a name="l00093"></a>00093         <span class="keywordflow">if</span> (dpSums.empty()) {   <span class="comment">//nothing in the sums yet</span>
<a name="l00094"></a>00094             <span class="comment">// reserve space in dpSums for all elements of the mean</span>
<a name="l00095"></a>00095             dpSums.reserve(dimension);
<a name="l00096"></a>00096 
<a name="l00097"></a>00097             <span class="comment">// for each dimnsn of data, initialise element</span>
<a name="l00098"></a>00098             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; dimension; i++) {
<a name="l00099"></a>00099                 dotprecision dp;
<a name="l00100"></a>00100                 dp = 0.0;
<a name="l00101"></a>00101                 dpSums.push_back(dp);
<a name="l00102"></a>00102             }
<a name="l00103"></a>00103         }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         <span class="comment">// make a dot precision variable out of the ith element</span>
<a name="l00106"></a>00106         <span class="comment">// of the rvector of new data and store in dpSums</span>
<a name="l00107"></a>00107         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i&lt; dimension + 1; i++) {
<a name="l00108"></a>00108             <span class="comment">// rvectors indexed 1 to n, vectors indexed 0 to n-1</span>
<a name="l00109"></a>00109             accumulate(dpSums[i-1], newdata[i], 1.0);
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="comment">// recalculate the accumulated sumproducts</span>
<a name="l00114"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3df955b69f0e3d73efd0ccc3026fe0e7">00114</a>     <span class="keywordtype">void</span> SPSVnode::recalculateSumProducts(rvector&amp; newdata)<span class="keyword"> const</span>
<a name="l00115"></a>00115 <span class="keyword">    </span>{
<a name="l00116"></a>00116         <span class="comment">/* the sumproducts can be thought of as an nxn matrix,</span>
<a name="l00117"></a>00117 <span class="comment">        which is implemented here as a nxn element vector of</span>
<a name="l00118"></a>00118 <span class="comment">        dotprecision variables, using row-major order.</span>
<a name="l00119"></a>00119 <span class="comment">        Ie the m-th element (m = 0, . . . nxn-1) is in row floor(m/n)</span>
<a name="l00120"></a>00120 <span class="comment">        and column m-rowxn in the matrix configuration.</span>
<a name="l00121"></a>00121 <span class="comment">        Or, the sumproduct of elements i and j in an rvector,</span>
<a name="l00122"></a>00122 <span class="comment">        i,j = 0,...,n-1, is element m=(ixn+j) of the sumproducts</span>
<a name="l00123"></a>00123 <span class="comment">        vector. */</span>
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         <span class="keywordflow">if</span> (dpSumProducts.empty()) {    <span class="comment">//nothing there yet</span>
<a name="l00126"></a>00126             <span class="comment">// reserve space for all elements</span>
<a name="l00127"></a>00127             dpSums.reserve(dimension*dimension);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129             <span class="comment">// for each dimnsn^2 of data, initialise element</span>
<a name="l00130"></a>00130             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; (dimension*dimension); i++) {
<a name="l00131"></a>00131                 dotprecision dp;
<a name="l00132"></a>00132                 dp = 0.0;
<a name="l00133"></a>00133                 dpSumProducts.push_back(dp);
<a name="l00134"></a>00134             }
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         <span class="comment">// make a dot precision variable out of the ith element</span>
<a name="l00138"></a>00138         <span class="comment">// and jth element of the of the rvector of new data and</span>
<a name="l00139"></a>00139         <span class="comment">// store in dpSumProducts.</span>
<a name="l00140"></a>00140         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; dimension + 1; i++) {
<a name="l00141"></a>00141             <span class="comment">// only need to do columns 1 to i because of symmetry</span>
<a name="l00142"></a>00142             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j&lt; i + 1; j++) {
<a name="l00143"></a>00143 
<a name="l00144"></a>00144                 <span class="keywordtype">size_t</span> index = (i-1)*dimension + (j-1);
<a name="l00145"></a>00145                 <span class="comment">// rvectors indexed 1 to n</span>
<a name="l00146"></a>00146                 accumulate(dpSumProducts[index],
<a name="l00147"></a>00147                         newdata[i], newdata[j]);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149                 <span class="comment">//if not on the diagonal of the matrix,</span>
<a name="l00150"></a>00150                 <span class="comment">// we can also fill in the symmetric element</span>
<a name="l00151"></a>00151                 <span class="keywordflow">if</span> (i!=j) {
<a name="l00152"></a>00152                     <span class="keywordtype">size_t</span> sym_index = (j-1)*dimension
<a name="l00153"></a>00153                         + (i-1);
<a name="l00154"></a>00154                     dpSumProducts[sym_index] =
<a name="l00155"></a>00155                         dpSumProducts[index];
<a name="l00156"></a>00156                 } <span class="comment">// end if</span>
<a name="l00157"></a>00157             }<span class="comment">// end j-loop</span>
<a name="l00158"></a>00158         }<span class="comment">// end i-loop</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160         <span class="comment">// sumproducts has been updated for new datapoint</span>
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164    
<a name="l00165"></a>00165    
<a name="l00166"></a>00166     <span class="comment">// Only expand the node - no reallocation of data</span>
<a name="l00167"></a>00167     <span class="comment">// add two sibling nodes to this provided that this is a leaf</span>
<a name="l00168"></a>00168     <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00169"></a>00169     <span class="comment">// these functions split box in half normal to dimension set by comp</span>
<a name="l00170"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4">00170</a>     <span class="keywordtype">void</span> SPSVnode::nodeExpansionOnly(<span class="keywordtype">int</span> comp)
<a name="l00171"></a>00171     {
<a name="l00172"></a>00172         
<a name="l00173"></a>00173         <span class="keywordflow">try</span>
<a name="l00174"></a>00174         {
<a name="l00175"></a>00175             <span class="comment">// only do something if this SPSVnode is a leaf</span>
<a name="l00176"></a>00176             <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>()) {
<a name="l00177"></a>00177                 <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00178"></a>00178                 ivector lC, rC;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180                 <span class="comment">// Call Lower() and Upper() to put the split</span>
<a name="l00181"></a>00181                 <span class="comment">// boxes into lC and rC respectively</span>
<a name="l00182"></a>00182                 
<a name="l00183"></a>00183                    
<a name="l00184"></a>00184                 <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(getBox(), lC, comp);
<a name="l00185"></a>00185                 <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(getBox(), rC, comp);
<a name="l00186"></a>00186 
<a name="l00187"></a>00187                 <span class="comment">// when making new children, use constructor</span>
<a name="l00188"></a>00188                 <span class="comment">// that will give space indication (for data)</span>
<a name="l00189"></a>00189                 <span class="comment">// of the size of this node&#39;s dataItrs</span>
<a name="l00190"></a>00190                 <span class="keywordtype">size_t</span> space = dataItrs.size();
<a name="l00191"></a>00191                 
<a name="l00192"></a>00192                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(lC, space, countsOnly, label));
<a name="l00193"></a>00193                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(rC,space, countsOnly, label));
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00196"></a>00196                 <span class="comment">//name the new children</span>
<a name="l00197"></a>00197                 getLeftChild()-&gt;setNodeName(nodeName + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00198"></a>00198                 getRightChild()-&gt;setNodeName(nodeName + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200                 <span class="comment">// store the split dimension in this</span>
<a name="l00201"></a>00201                 splitDim = comp;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203                 <span class="comment">// store the split value in this</span>
<a name="l00204"></a>00204                 <span class="comment">// the split value is the infinum of interval</span>
<a name="l00205"></a>00205                 <span class="comment">// of right child box for dimension split on</span>
<a name="l00206"></a>00206                 splitValue = _double(Inf(
<a name="l00207"></a>00207                     ((getRightChild())-&gt;getBox())[comp]));
<a name="l00208"></a>00208             }
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00212"></a>00212         {
<a name="l00213"></a>00213             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00214"></a>00214                 &lt;&lt; <span class="stringliteral">&quot;SPSVnode::nodeExpansionOnly()&quot;</span> &lt;&lt; std::endl;
<a name="l00215"></a>00215             <span class="keywordflow">throw</span>;
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221    <span class="comment">// split both validation and training data between two new children</span>
<a name="l00222"></a>00222    <span class="comment">// uses a SplitDecisionObj to see if the children should be further split</span>
<a name="l00223"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad">00223</a>    <span class="keywordtype">void</span> SPSVnode::splitData(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">bool</span> boolVal)
<a name="l00224"></a>00224    {
<a name="l00225"></a>00225         <span class="comment">// check that both children exist</span>
<a name="l00226"></a>00226         <span class="keywordflow">if</span> (!hasLCwithBox() || !hasRCwithBox()) {
<a name="l00227"></a>00227             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot split data when there are not two &quot;</span>;
<a name="l00228"></a>00228             msg += <span class="stringliteral">&quot; children&quot;</span>;
<a name="l00229"></a>00229             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(msg);
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr; <span class="comment">// iterator</span>
<a name="l00233"></a>00233      
<a name="l00234"></a>00234         boolVal = <span class="keyword">false</span>;
<a name="l00235"></a>00235         <span class="keywordflow">for</span> (dataItr = dataItrs.begin();
<a name="l00236"></a>00236             dataItr!= dataItrs.end(); dataItr++) {
<a name="l00237"></a>00237             <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr = *dataItr;
<a name="l00238"></a>00238 
<a name="l00239"></a>00239             <span class="comment">//calls insertOneFind on the children of this node</span>
<a name="l00240"></a>00240             <span class="comment">// so stats are not recalculated for this node itself</span>
<a name="l00241"></a>00241             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* reinsertedInto = NULL;
<a name="l00242"></a>00242 
<a name="l00243"></a>00243             <span class="keywordflow">if</span>(rightChild!=NULL &amp;&amp; !rightChild-&gt;isEmpty()) {
<a name="l00244"></a>00244 
<a name="l00245"></a>00245                 reinsertedInto =
<a name="l00246"></a>00246                     (getRightChild())-&gt;insertOneFind(
<a name="l00247"></a>00247                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>, boolTest, boolVal);
<a name="l00248"></a>00248             }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250             <span class="comment">// only try the left if it&#39;s not on the right</span>
<a name="l00251"></a>00251             <span class="keywordflow">if</span>(reinsertedInto==NULL &amp;&amp; leftChild!=NULL
<a name="l00252"></a>00252             &amp;&amp; !leftChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                 reinsertedInto =
<a name="l00255"></a>00255                     (getLeftChild())-&gt;insertOneFind(
<a name="l00256"></a>00256                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>, boolTest, boolVal);
<a name="l00257"></a>00257             }
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         <span class="comment">//divide the data up amongst the children</span>
<a name="l00261"></a>00261          boolVal = <span class="keyword">true</span>;
<a name="l00262"></a>00262          <span class="keywordflow">for</span> (dataItr = VdataItrs.begin();
<a name="l00263"></a>00263             dataItr!= VdataItrs.end(); dataItr++) {
<a name="l00264"></a>00264             <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr = *dataItr;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266             <span class="comment">//calls insertOneFind on the children of this node</span>
<a name="l00267"></a>00267             <span class="comment">// so stats are not recalculated for this node itself</span>
<a name="l00268"></a>00268             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* reinsertedInto = NULL;
<a name="l00269"></a>00269 
<a name="l00270"></a>00270             <span class="keywordflow">if</span>(rightChild!=NULL &amp;&amp; !rightChild-&gt;isEmpty()) {
<a name="l00271"></a>00271 
<a name="l00272"></a>00272                 reinsertedInto =
<a name="l00273"></a>00273                     (getRightChild())-&gt;insertOneFind(
<a name="l00274"></a>00274                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>, boolTest, boolVal);
<a name="l00275"></a>00275             }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277             <span class="comment">// only try the left if it&#39;s not on the right</span>
<a name="l00278"></a>00278             <span class="keywordflow">if</span>(reinsertedInto==NULL &amp;&amp; leftChild!=NULL
<a name="l00279"></a>00279             &amp;&amp; !leftChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00280"></a>00280 
<a name="l00281"></a>00281                 reinsertedInto =
<a name="l00282"></a>00282                     (getLeftChild())-&gt;insertOneFind(
<a name="l00283"></a>00283                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>, boolTest, boolVal);
<a name="l00284"></a>00284             }
<a name="l00285"></a>00285         }
<a name="l00286"></a>00286         clearData();         <span class="comment">//clear the data in this node</span>
<a name="l00287"></a>00287         
<a name="l00288"></a>00288     }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="comment">// Print the data in a node if any</span>
<a name="l00292"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5868a7661363e2f3bd7d2e267c22ceb1">00292</a>     std::ostream&amp; SPSVnode::nodeDataPrint(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00293"></a>00293 <span class="keyword">    </span>{
<a name="l00294"></a>00294         <span class="keywordflow">if</span> (!dataItrs.empty()) {
<a name="l00295"></a>00295 
<a name="l00296"></a>00296             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298             os &lt;&lt; <span class="stringliteral">&quot;Data is&quot;</span> &lt;&lt; std::endl;
<a name="l00299"></a>00299             <span class="keywordflow">for</span> (dataItr = dataItrs.begin();
<a name="l00300"></a>00300                 dataItr!= dataItrs.end(); dataItr++) {
<a name="l00301"></a>00301 
<a name="l00302"></a>00302                 <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dataItr;
<a name="l00303"></a>00303                 rvector theData = *bigIt;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305                 <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; dimension + 1; i++) {
<a name="l00306"></a>00306                     os &lt;&lt; label; <span class="comment">// print the label</span>
<a name="l00307"></a>00307                     os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; theData[i]; <span class="comment">// print data</span>
<a name="l00308"></a>00308                 }   <span class="comment">// end loop through data elements</span>
<a name="l00309"></a>00309 
<a name="l00310"></a>00310                 os &lt;&lt; std::endl;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312             } <span class="comment">// end loop through data container</span>
<a name="l00313"></a>00313         } <span class="comment">// end if counter &gt; 0</span>
<a name="l00314"></a>00314         <span class="comment">// if no data, ie counter = 0, then just return os unaltered</span>
<a name="l00315"></a>00315 
<a name="l00316"></a>00316         <span class="keywordflow">return</span> os;
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319     <span class="comment">// Print the mean of the data in a node</span>
<a name="l00320"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a768f9507517be618970d19874b1ff992">00320</a>     std::ostream&amp; SPSVnode::nodeMeanPrint(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00321"></a>00321 <span class="keyword">    </span>{
<a name="l00322"></a>00322 
<a name="l00323"></a>00323         <span class="keywordflow">if</span> ((counter &gt; 0) &amp;&amp; !countsOnly) {
<a name="l00324"></a>00324 
<a name="l00325"></a>00325             os &lt;&lt; <span class="stringliteral">&quot;Mean is &quot;</span>;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327             <span class="comment">// loop through the elements in the dpSums vector</span>
<a name="l00328"></a>00328             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; dimension; i++) {
<a name="l00329"></a>00329                 <span class="comment">// default cxsc rounding of dotprecision</span>
<a name="l00330"></a>00330                 <span class="comment">// to rnd_next</span>
<a name="l00331"></a>00331                 os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (rnd(dpSums[i])/(1.0*counter));
<a name="l00332"></a>00332 
<a name="l00333"></a>00333             }<span class="comment">// end loop through the elements in dpSums</span>
<a name="l00334"></a>00334 
<a name="l00335"></a>00335             os &lt;&lt; std::endl;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337         } <span class="comment">// end if</span>
<a name="l00338"></a>00338         <span class="comment">// if no data, ie counter = 0, or if we are only keeping counts</span>
<a name="l00339"></a>00339         <span class="comment">// then just return os unaltered</span>
<a name="l00340"></a>00340 
<a name="l00341"></a>00341         <span class="keywordflow">return</span> os;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345     <span class="comment">// Print the variance covariance matrix of the data in a node</span>
<a name="l00346"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a096bff1081ceb308590aac8f2f3ee660">00346</a>     std::ostream&amp; SPSVnode::nodeVarCovarPrint(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00347"></a>00347 <span class="keyword">    </span>{
<a name="l00348"></a>00348         <span class="keywordflow">if</span> ((counter &gt; 0) &amp;&amp; !countsOnly) {
<a name="l00349"></a>00349 
<a name="l00350"></a>00350             <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> varCovar;
<a name="l00351"></a>00351             varCovar = getVarCovar(varCovar);
<a name="l00352"></a>00352 
<a name="l00353"></a>00353             <span class="comment">/* element k in the vector representing the</span>
<a name="l00354"></a>00354 <span class="comment">            variance-covariance matrix corresponds to</span>
<a name="l00355"></a>00355 <span class="comment">            row k/n, (row 0 to n-1) and column k-row*n (col 0 to n-1)</span>
<a name="l00356"></a>00356 <span class="comment">            in a matrix view variance-covariance */</span>
<a name="l00357"></a>00357 
<a name="l00358"></a>00358             os &lt;&lt; <span class="stringliteral">&quot;Variance Covariance is &quot;</span> &lt;&lt; std::endl;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360             <span class="comment">// loop through the elements and print as matrix</span>
<a name="l00361"></a>00361             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dimension; i++) {
<a name="l00362"></a>00362                 <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; dimension; j++) {
<a name="l00363"></a>00363                     os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; varCovar[(i*dimension)+j];
<a name="l00364"></a>00364                 }
<a name="l00365"></a>00365                 os &lt;&lt; std::endl;
<a name="l00366"></a>00366             }
<a name="l00367"></a>00367         }
<a name="l00368"></a>00368         <span class="keywordflow">return</span> os;
<a name="l00369"></a>00369 
<a name="l00370"></a>00370     }
<a name="l00371"></a>00371 
<a name="l00372"></a>00372     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00373"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a01b35db8ce4b99460ff352f6d25a529c">00373</a>     std::ostream&amp; SPSVnode::leafOutputTabs(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00374"></a>00374 <span class="keyword">    </span>{
<a name="l00375"></a>00375         <span class="keywordtype">int</span> prec = 5; <span class="comment">// precision for output</span>
<a name="l00376"></a>00376 
<a name="l00377"></a>00377         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00378"></a>00378 
<a name="l00379"></a>00379             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00380"></a>00380 
<a name="l00381"></a>00381             <span class="comment">// output the node name, nodeVolume, counter</span>
<a name="l00382"></a>00382             os &lt;&lt; nodeName;
<a name="l00383"></a>00383             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nodeVolume();
<a name="l00384"></a>00384             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00385"></a>00385             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Vcounter;
<a name="l00386"></a>00386             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00387"></a>00387             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00388"></a>00388 
<a name="l00389"></a>00389             streamsize oldPrec = os.precision();
<a name="l00390"></a>00390             os &lt;&lt; setprecision(prec);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00393"></a>00393 
<a name="l00394"></a>00394                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00395"></a>00395                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00396"></a>00396             }
<a name="l00397"></a>00397             os &lt;&lt; setprecision(oldPrec);
<a name="l00398"></a>00398 
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00403"></a>00403     <span class="comment">// includes the height = n/(N*vol) where n is count in this leaf node,</span>
<a name="l00404"></a>00404     <span class="comment">// N is count over whole histogram, vol is volume of this leaf node</span>
<a name="l00405"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6eff83d7095798158c0bc17ee70e54c0">00405</a>     std::ostream&amp; SPSVnode::leafOutputTabsWithHistHeight(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00406"></a>00406                             std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00407"></a>00407 <span class="keyword">    </span>{
<a name="l00408"></a>00408         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00411"></a>00411             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00412"></a>00412 
<a name="l00413"></a>00413             <span class="comment">// output the node name, nodeVolume, counter, counter/(bigN * vol)</span>
<a name="l00414"></a>00414             os &lt;&lt; nodeName;
<a name="l00415"></a>00415             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00416"></a>00416             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00417"></a>00417             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter/(vol * bigN);
<a name="l00418"></a>00418             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00419"></a>00419             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00420"></a>00420             streamsize oldPrec = os.precision();
<a name="l00421"></a>00421             os &lt;&lt; setprecision(prec);
<a name="l00422"></a>00422 
<a name="l00423"></a>00423             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00424"></a>00424 
<a name="l00425"></a>00425                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00426"></a>00426                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00427"></a>00427             }
<a name="l00428"></a>00428             os &lt;&lt; setprecision(oldPrec);
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430     }
<a name="l00431"></a>00431 
<a name="l00432"></a>00432     <span class="comment">// gather up all the data in children of a node</span>
<a name="l00433"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1">00433</a>     <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; SPSVnode::gatherData(<a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; container, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * spn)
<a name="l00434"></a>00434     {
<a name="l00435"></a>00435         <span class="keywordflow">if</span> (!spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00436"></a>00436             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00437"></a>00437                 container =
<a name="l00438"></a>00438                     gatherData(container,
<a name="l00439"></a>00439                             spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00440"></a>00440             }
<a name="l00441"></a>00441             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00442"></a>00442                 container =
<a name="l00443"></a>00443                     gatherData(container,
<a name="l00444"></a>00444                             spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00445"></a>00445             }
<a name="l00446"></a>00446         }
<a name="l00447"></a>00447         <span class="keywordflow">else</span> { <span class="comment">// is a leaf</span>
<a name="l00448"></a>00448             <span class="comment">// copy data from spn&#39;s dataItrs into temp container</span>
<a name="l00449"></a>00449             container.insert(container.end(),
<a name="l00450"></a>00450                             (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).begin(),
<a name="l00451"></a>00451                             (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).end());
<a name="l00452"></a>00452         }
<a name="l00453"></a>00453         <span class="keywordflow">return</span> container;
<a name="l00454"></a>00454     }
<a name="l00455"></a>00455 
<a name="l00456"></a>00456     <span class="comment">// set split dimension and split value in parent when children grafted on</span>
<a name="l00457"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d6459ebf84a81b4759a3dd6524df4cf">00457</a>     <span class="keywordtype">void</span> SPSVnode::setSplits()
<a name="l00458"></a>00458     {
<a name="l00459"></a>00459         <span class="comment">// set the split dimension and split value for this box</span>
<a name="l00460"></a>00460         <span class="comment">// based on the children which have been added</span>
<a name="l00461"></a>00461         ivector childBox;
<a name="l00462"></a>00462         <span class="keywordtype">bool</span> alreadyDone = <span class="keyword">false</span>;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464         <span class="keywordflow">if</span> (hasRCwithBox()) {
<a name="l00465"></a>00465             childBox = getRightChild()-&gt;getBox();
<a name="l00466"></a>00466         }
<a name="l00467"></a>00467         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hasLCwithBox()) {
<a name="l00468"></a>00468             childBox = getLeftChild()-&gt;getBox();
<a name="l00469"></a>00469         }
<a name="l00470"></a>00470         <span class="keywordtype">int</span> pLb = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theBox); <span class="comment">// parent box lower bound</span>
<a name="l00471"></a>00471         <span class="keywordtype">int</span> dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theBox) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theBox) + 1;
<a name="l00472"></a>00472         <span class="keywordtype">int</span> cLb = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(childBox); <span class="comment">// child box lower bound (should be = pLb)</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474         <span class="keywordflow">if</span> ( splitDim != -1 &amp;&amp;
<a name="l00475"></a>00475             (splitValue == Inf(childBox[splitDim - pLb + cLb])
<a name="l00476"></a>00476             || splitValue == Sup(childBox[splitDim - pLb + cLb])))
<a name="l00477"></a>00477                 alreadyDone = <span class="keyword">true</span>;
<a name="l00478"></a>00478 
<a name="l00479"></a>00479         <span class="keywordflow">if</span> (!alreadyDone) {
<a name="l00480"></a>00480             <span class="keywordtype">int</span> d = 1;
<a name="l00481"></a>00481             splitDim = -1;
<a name="l00482"></a>00482             <span class="keywordflow">while</span> ((d &lt;= dim) &amp;&amp; (splitDim == -1)) {
<a name="l00483"></a>00483                 <span class="keywordflow">if</span> (diam(childBox[d + cLb - 1]) &lt; diam((*theBox)[d])) {
<a name="l00484"></a>00484                     splitDim = d + pLb - 1; <span class="comment">// the split dimension</span>
<a name="l00485"></a>00485                 }
<a name="l00486"></a>00486                 d++;
<a name="l00487"></a>00487             }
<a name="l00488"></a>00488             <span class="comment">// split value is bottom of right child box on dth dim</span>
<a name="l00489"></a>00489             <span class="keywordflow">if</span> (hasRCwithBox()) {
<a name="l00490"></a>00490                 splitValue = Inf(childBox[splitDim - pLb + cLb]);
<a name="l00491"></a>00491             }
<a name="l00492"></a>00492             <span class="comment">// else split value is top of left child box on dth dim</span>
<a name="l00493"></a>00493             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hasLCwithBox()) {
<a name="l00494"></a>00494                 splitValue = Sup(childBox[splitDim - pLb + cLb]);
<a name="l00495"></a>00495             }
<a name="l00496"></a>00496         }
<a name="l00497"></a>00497     }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     <span class="comment">// add two non-minimal pavings in a union operation,</span>
<a name="l00500"></a>00500     <span class="comment">// return a pointer to a new non-minimal paving</span>
<a name="l00501"></a>00501     <span class="comment">// but with no data attached to it - up to the manager to add data</span>
<a name="l00502"></a>00502     <span class="comment">// label will be 0</span>
<a name="l00503"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ab79e2b1aa783e2df56abf8279c5dc564">00503</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* SPSVnode:: unionNoData(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00504"></a>00504                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)
<a name="l00505"></a>00505     {
<a name="l00506"></a>00506         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* newNode = NULL;
<a name="l00507"></a>00507 
<a name="l00508"></a>00508         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;  <span class="comment">// indicator for done adding</span>
<a name="l00509"></a>00509 
<a name="l00510"></a>00510         <span class="keywordflow">try</span> {
<a name="l00511"></a>00511 
<a name="l00512"></a>00512             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// we will return NULL</span>
<a name="l00513"></a>00513 
<a name="l00514"></a>00514             <span class="comment">// if the lhs is null or has no box, return a tree or node based on rhs</span>
<a name="l00515"></a>00515             <span class="keywordflow">if</span> (!done &amp;&amp; (lhs==NULL || ((lhs != NULL) &amp;&amp; (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())))) {
<a name="l00516"></a>00516 
<a name="l00517"></a>00517                 newNode = SPSVnode::strippedConstructor(rhs);
<a name="l00518"></a>00518                 done = <span class="keyword">true</span>;
<a name="l00519"></a>00519             }
<a name="l00520"></a>00520 
<a name="l00521"></a>00521             <span class="comment">// if the rhs is null or has no box, return a tree or node based on lhs</span>
<a name="l00522"></a>00522             <span class="keywordflow">if</span> (!done &amp;&amp; (rhs==NULL || ((rhs != NULL) &amp;&amp; (rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())))) {
<a name="l00523"></a>00523 
<a name="l00524"></a>00524                 newNode = SPSVnode::strippedConstructor(lhs);
<a name="l00525"></a>00525                 done = <span class="keyword">true</span>;
<a name="l00526"></a>00526             }
<a name="l00527"></a>00527 
<a name="l00528"></a>00528             <span class="comment">// by now, if we are not done, both pavings are not null and both have boxes</span>
<a name="l00529"></a>00529             <span class="comment">// we assume that the boxes are the same</span>
<a name="l00530"></a>00530 
<a name="l00531"></a>00531             <span class="comment">// we have to check who has children</span>
<a name="l00532"></a>00532 
<a name="l00533"></a>00533             <span class="comment">// if both are leaves we can just return a node based on say lhs</span>
<a name="l00534"></a>00534              <span class="comment">// if only rhs is leaf, lhs is not a leaf, return a node based on lhs</span>
<a name="l00535"></a>00535             <span class="keywordflow">if</span> (!done &amp;&amp; rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00536"></a>00536                 newNode = SPSVnode::strippedConstructor(lhs);
<a name="l00537"></a>00537                 done = <span class="keyword">true</span>;
<a name="l00538"></a>00538             }
<a name="l00539"></a>00539 
<a name="l00540"></a>00540             <span class="comment">// if only lhs is leaf, rhs is not a leaf, return a node based on rhs</span>
<a name="l00541"></a>00541             <span class="keywordflow">if</span> (!done &amp;&amp; lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00542"></a>00542                 newNode = SPSVnode::strippedConstructor(rhs);
<a name="l00543"></a>00543                 done = <span class="keyword">true</span>;
<a name="l00544"></a>00544             }
<a name="l00545"></a>00545 
<a name="l00546"></a>00546             <span class="comment">// if neither are leaves</span>
<a name="l00547"></a>00547             <span class="keywordflow">if</span> (!done &amp;&amp; !lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00548"></a>00548                 <span class="comment">// make a node based on one of them, and add on the results of</span>
<a name="l00549"></a>00549                 <span class="comment">// recursing on the children</span>
<a name="l00550"></a>00550                 ivector* newPermBox = <span class="keyword">new</span> ivector(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00551"></a>00551                 newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(*newPermBox);
<a name="l00552"></a>00552                 newNode-&gt;nodeAdoptRight(unionNoData(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l00553"></a>00553                                                             rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()));
<a name="l00554"></a>00554                 newNode-&gt;nodeAdoptLeft(unionNoData(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l00555"></a>00555                                                             rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()));
<a name="l00556"></a>00556             }
<a name="l00557"></a>00557         }
<a name="l00558"></a>00558         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00559"></a>00559             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00560"></a>00560             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00561"></a>00561             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00562"></a>00562             <span class="keywordflow">throw</span>;
<a name="l00563"></a>00563         }
<a name="l00564"></a>00564 
<a name="l00565"></a>00565         <span class="keywordflow">return</span> newNode;
<a name="l00566"></a>00566 
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569     <span class="comment">// ------------------------ public member functions -----------------</span>
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     <span class="comment">// Default constructor</span>
<a name="l00572"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52">00572</a>     SPSVnode::SPSVnode() :  Vcounter(0), justSplit(false)
<a name="l00573"></a>00573     {
<a name="l00574"></a>00574         <span class="keywordflow">try</span> {
<a name="l00575"></a>00575             <span class="comment">//invokes the base class default constructor</span>
<a name="l00576"></a>00576             <span class="comment">// then does additional data members</span>
<a name="l00577"></a>00577 
<a name="l00578"></a>00578             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00579"></a>00579             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00580"></a>00580 
<a name="l00581"></a>00581             <span class="comment">// reserve space</span>
<a name="l00582"></a>00582             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a>);
<a name="l00583"></a>00583             <span class="comment">// not sure whether to do this or not - leave for the moment</span>
<a name="l00584"></a>00584             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00585"></a>00585         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00586"></a>00586         }
<a name="l00587"></a>00587         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00588"></a>00588             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00589"></a>00589             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00590"></a>00590             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00591"></a>00591             <span class="keywordflow">throw</span>;
<a name="l00592"></a>00592         }
<a name="l00593"></a>00593 
<a name="l00594"></a>00594     }
<a name="l00595"></a>00595 
<a name="l00596"></a>00596     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00597"></a>00597     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00598"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a4d33a48a0510f2988d17ae9c1f56eb1a">00598</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab) : <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(v, lab),
<a name="l00599"></a>00599                                Vcounter(0), justSplit(false)
<a name="l00600"></a>00600     {
<a name="l00601"></a>00601         <span class="keywordflow">try</span> {
<a name="l00602"></a>00602             <span class="comment">//invokes the base class constructor with ivector &amp; label</span>
<a name="l00603"></a>00603             <span class="comment">// and then initialises additional data members</span>
<a name="l00604"></a>00604 
<a name="l00605"></a>00605             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00606"></a>00606             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00607"></a>00607 
<a name="l00608"></a>00608             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a>);
<a name="l00609"></a>00609             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00610"></a>00610             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00611"></a>00611         }
<a name="l00612"></a>00612         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00613"></a>00613             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00614"></a>00614             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00615"></a>00615             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00616"></a>00616             <span class="keywordflow">throw</span>;
<a name="l00617"></a>00617         }
<a name="l00618"></a>00618     }
<a name="l00619"></a>00619 
<a name="l00620"></a>00620     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00621"></a>00621     <span class="comment">// and value for countsOnly</span>
<a name="l00622"></a>00622     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00623"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a29413a70c5c7f01002665a8319971984">00623</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(ivector&amp; v, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab) : 
<a name="l00624"></a>00624                                                 <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(v, cntOnly, lab),
<a name="l00625"></a>00625                                 Vcounter(0), justSplit(false)
<a name="l00626"></a>00626     {
<a name="l00627"></a>00627         <span class="keywordflow">try</span> {
<a name="l00628"></a>00628             <span class="comment">//invokes the base class constructor with ivector, cntOnly &amp; label</span>
<a name="l00629"></a>00629             <span class="comment">// and then initialises additional data members</span>
<a name="l00630"></a>00630 
<a name="l00631"></a>00631             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00632"></a>00632             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00633"></a>00633 
<a name="l00634"></a>00634             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a>);
<a name="l00635"></a>00635             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00636"></a>00636             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00637"></a>00637         }
<a name="l00638"></a>00638         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00639"></a>00639             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00640"></a>00640             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00641"></a>00641             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00642"></a>00642             <span class="keywordflow">throw</span>;
<a name="l00643"></a>00643         }
<a name="l00644"></a>00644     }
<a name="l00645"></a>00645 
<a name="l00646"></a>00646     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00647"></a>00647     <span class="comment">// and max for spaceIndication</span>
<a name="l00648"></a>00648     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00649"></a>00649     <span class="comment">// countsOnly defaults to false</span>
<a name="l00650"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a62e88e96ee22be76109b387277ef6955">00650</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">int</span> lab) :
<a name="l00651"></a>00651         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(v, max, lab), Vcounter(0), justSplit(false)
<a name="l00652"></a>00652     {
<a name="l00653"></a>00653         <span class="keywordflow">try</span> {
<a name="l00654"></a>00654             <span class="comment">//invokes the base class constructor with ivector, max and label</span>
<a name="l00655"></a>00655             <span class="comment">// and then initialises additional data members</span>
<a name="l00656"></a>00656 
<a name="l00657"></a>00657             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00658"></a>00658             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00659"></a>00659 
<a name="l00660"></a>00660             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00661"></a>00661             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>+1);
<a name="l00662"></a>00662         }
<a name="l00663"></a>00663         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00664"></a>00664             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00665"></a>00665             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00666"></a>00666             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00667"></a>00667             <span class="keywordflow">throw</span>;
<a name="l00668"></a>00668         }
<a name="l00669"></a>00669     }
<a name="l00670"></a>00670 
<a name="l00671"></a>00671 
<a name="l00672"></a>00672     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00673"></a>00673     <span class="comment">// and max for spaceIndication and value for countsOnly</span>
<a name="l00674"></a>00674     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00675"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa91b89ffdb65468e88ab8cecf290a75d">00675</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab) :
<a name="l00676"></a>00676         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(v, max, cntOnly, lab), Vcounter(0), justSplit(false)
<a name="l00677"></a>00677     {
<a name="l00678"></a>00678         <span class="keywordflow">try</span> {
<a name="l00679"></a>00679             <span class="comment">//invokes the base class constructor with ivector, max, cntOnly and    </span>
<a name="l00680"></a>00680             <span class="comment">//label</span>
<a name="l00681"></a>00681             <span class="comment">//and then initialises additional data members</span>
<a name="l00682"></a>00682 
<a name="l00683"></a>00683             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00684"></a>00684             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00685"></a>00685 
<a name="l00686"></a>00686             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00687"></a>00687           <span class="comment">//  VdataItrs.reserve(spaceIndication+1); // this will somehow affect the constructor </span>
<a name="l00688"></a>00688         }
<a name="l00689"></a>00689         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00690"></a>00690             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in SPSVnode constructor&quot;</span> &lt;&lt; endl;
<a name="l00691"></a>00691             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00692"></a>00692             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00693"></a>00693             <span class="keywordflow">throw</span>;
<a name="l00694"></a>00694         }
<a name="l00695"></a>00695     }
<a name="l00696"></a>00696 
<a name="l00697"></a>00697     <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00698"></a>00698     <span class="comment">// and a max for spaceIndication</span>
<a name="l00699"></a>00699     <span class="comment">// and optionally with cntOnly for countsOnly, defaults to false</span>
<a name="l00700"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0652f353916bda77708ed26053a21789">00700</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly) : 
<a name="l00701"></a>00701       <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(lb, max, cntOnly), Vcounter(0), justSplit(false)
<a name="l00702"></a>00702     {
<a name="l00703"></a>00703         <span class="keywordflow">try</span> {
<a name="l00704"></a>00704 
<a name="l00705"></a>00705             <span class="comment">//invokes the base class constructor with LabBox, max and cntOnly</span>
<a name="l00706"></a>00706             <span class="comment">//and then initialises additional data members</span>
<a name="l00707"></a>00707 
<a name="l00708"></a>00708             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00709"></a>00709             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00710"></a>00710 
<a name="l00711"></a>00711             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00712"></a>00712             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>+1);
<a name="l00713"></a>00713         }
<a name="l00714"></a>00714         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00715"></a>00715             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00716"></a>00716             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00717"></a>00717             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00718"></a>00718             <span class="keywordflow">throw</span>;
<a name="l00719"></a>00719         }
<a name="l00720"></a>00720     }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722     <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00723"></a>00723     <span class="comment">// and optionally with cntOnly for countsOnly, defaults to false</span>
<a name="l00724"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a22251951e28c6876d4159e82bf2f36e1">00724</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">bool</span> cntOnly) : <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(lb, cntOnly), 
<a name="l00725"></a>00725                                   Vcounter(0), justSplit(false)
<a name="l00726"></a>00726     {
<a name="l00727"></a>00727         <span class="keywordflow">try</span> {
<a name="l00728"></a>00728             <span class="comment">//invokes the base class constructor with LabBox and cntOnly </span>
<a name="l00729"></a>00729             <span class="comment">//argument</span>
<a name="l00730"></a>00730             <span class="comment">// and then initialises additional data members</span>
<a name="l00731"></a>00731 
<a name="l00732"></a>00732             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00733"></a>00733             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00734"></a>00734 
<a name="l00735"></a>00735             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a>);
<a name="l00736"></a>00736             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00737"></a>00737             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00738"></a>00738         }
<a name="l00739"></a>00739         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00740"></a>00740             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00741"></a>00741             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00742"></a>00742             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00743"></a>00743             <span class="keywordflow">throw</span>;
<a name="l00744"></a>00744         }
<a name="l00745"></a>00745     }
<a name="l00746"></a>00746 
<a name="l00747"></a>00747     <span class="comment">// Copy constructor</span>
<a name="l00748"></a>00748     <span class="comment">// copies from given node downwards</span>
<a name="l00749"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac34ad69da8e0f3894b74f4027de2614b">00749</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode::SPSVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; other) : <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*(other.theBox),
<a name="l00750"></a>00750         other.label), Vcounter(other.Vcounter), justSplit(other.justSplit)
<a name="l00751"></a>00751     {
<a name="l00752"></a>00752         <span class="keywordflow">try</span> {
<a name="l00753"></a>00753         <span class="comment">// cout &lt;&lt; &quot;copy constructor for &quot; &lt;&lt; nodeName &lt;&lt; &quot; called:&quot; &lt;&lt; endl;</span>
<a name="l00754"></a>00754             <span class="comment">//reserve space</span>
<a name="l00755"></a>00755             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve((other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).size());
<a name="l00756"></a>00756          <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve((other.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>).size());
<a name="l00757"></a>00757 
<a name="l00758"></a>00758         <span class="comment">//dataItrs = other.dataItrs;</span>
<a name="l00759"></a>00759         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l00760"></a>00760         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = other.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>;
<a name="l00761"></a>00761             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>;
<a name="l00762"></a>00762             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>; 
<a name="l00763"></a>00763         <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00764"></a>00764             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00765"></a>00765         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>;
<a name="l00766"></a>00766         
<a name="l00767"></a>00767         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a> = other.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>;
<a name="l00768"></a>00768             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;;
<a name="l00769"></a>00769 
<a name="l00770"></a>00770             <span class="comment">//recursion on the children</span>
<a name="l00771"></a>00771             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00772"></a>00772                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(*(other.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00773"></a>00773             }
<a name="l00774"></a>00774             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00775"></a>00775 
<a name="l00776"></a>00776             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00777"></a>00777                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(*(other.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00778"></a>00778             }
<a name="l00779"></a>00779             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00780"></a>00780         }
<a name="l00781"></a>00781         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00782"></a>00782             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00783"></a>00783             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00784"></a>00784             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00785"></a>00785             <span class="keywordflow">throw</span>;
<a name="l00786"></a>00786         }
<a name="l00787"></a>00787     }
<a name="l00788"></a>00788 
<a name="l00789"></a>00789     <span class="comment">//copy assignment operator</span>
<a name="l00790"></a>00790     <span class="comment">//copies from this node downwards</span>
<a name="l00791"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad4e310986c60dcebb3fd3c54dab19c33">00791</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad4e310986c60dcebb3fd3c54dab19c33" title="Copy assignment operator.">SPSVnode::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; rhs)
<a name="l00792"></a>00792     {
<a name="l00793"></a>00793         <span class="keywordflow">try</span> {
<a name="l00794"></a>00794 
<a name="l00795"></a>00795           <span class="comment">//  cout &lt;&lt; &quot;copy assignment operator for node &quot; &lt;&lt; nodeName &lt;&lt; &quot; called:&quot; &lt;&lt; endl;</span>
<a name="l00796"></a>00796      
<a name="l00797"></a>00797             <span class="comment">// delete the current children (deletes their children as well)</span>
<a name="l00798"></a>00798             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) {
<a name="l00799"></a>00799                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l00800"></a>00800                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00801"></a>00801             }
<a name="l00802"></a>00802 
<a name="l00803"></a>00803             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) {
<a name="l00804"></a>00804                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00805"></a>00805                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00806"></a>00806             }
<a name="l00807"></a>00807             <span class="comment">// and delete the current box</span>
<a name="l00808"></a>00808             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00809"></a>00809                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00810"></a>00810                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = NULL;
<a name="l00811"></a>00811             }
<a name="l00812"></a>00812 
<a name="l00813"></a>00813             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>=NULL;
<a name="l00814"></a>00814             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00815"></a>00815             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00816"></a>00816             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00817"></a>00817             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00818"></a>00818 
<a name="l00819"></a>00819             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>;
<a name="l00820"></a>00820 
<a name="l00821"></a>00821             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l00822"></a>00822             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a> = rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a>;
<a name="l00823"></a>00823             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>;
<a name="l00824"></a>00824             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>;
<a name="l00825"></a>00825             <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00826"></a>00826             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00827"></a>00827             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>;
<a name="l00828"></a>00828 
<a name="l00829"></a>00829             <span class="comment">//reserve space</span>
<a name="l00830"></a>00830             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve((rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).size());
<a name="l00831"></a>00831             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.reserve((rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>).size());
<a name="l00832"></a>00832             <span class="comment">//copy dataItrs from other to this</span>
<a name="l00833"></a>00833             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>;
<a name="l00834"></a>00834         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a> = rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>;
<a name="l00835"></a>00835         
<a name="l00836"></a>00836             <span class="comment">//recursion on the children</span>
<a name="l00837"></a>00837             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00838"></a>00838                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00839"></a>00839             }
<a name="l00840"></a>00840             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00841"></a>00841 
<a name="l00842"></a>00842             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00843"></a>00843                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00844"></a>00844             }
<a name="l00845"></a>00845             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00846"></a>00846         }
<a name="l00847"></a>00847         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00848"></a>00848             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00849"></a>00849             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00850"></a>00850             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00851"></a>00851             <span class="keywordflow">throw</span>;
<a name="l00852"></a>00852         }
<a name="l00853"></a>00853         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00854"></a>00854     }
<a name="l00855"></a>00855 
<a name="l00856"></a>00856 
<a name="l00857"></a>00857     <span class="comment">// A stripping &#39;constructor&#39;</span>
<a name="l00858"></a>00858     <span class="comment">// copies from given node downwards but with no data</span>
<a name="l00859"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">00859</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">SPSVnode::strippedConstructor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> other)
<a name="l00860"></a>00860     {
<a name="l00861"></a>00861         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* newNode = NULL;
<a name="l00862"></a>00862         <span class="keywordflow">try</span> {
<a name="l00863"></a>00863             <span class="keywordflow">if</span> (other != NULL) {
<a name="l00864"></a>00864                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())
<a name="l00865"></a>00865                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>;
<a name="l00866"></a>00866                 <span class="keywordflow">else</span> {
<a name="l00867"></a>00867                     ivector* newBox = <span class="keyword">new</span> ivector(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00868"></a>00868                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(*newBox);
<a name="l00869"></a>00869                     newNode-&gt;splitDim = other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00870"></a>00870                     newNode-&gt;splitValue = other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00871"></a>00871                 }
<a name="l00872"></a>00872 
<a name="l00873"></a>00873                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00874"></a>00874                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = 0;
<a name="l00875"></a>00875                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> = <span class="keyword">false</span>;
<a name="l00876"></a>00876 
<a name="l00877"></a>00877                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL)
<a name="l00878"></a>00878                     newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">strippedConstructor</a>(other-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()));
<a name="l00879"></a>00879                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>() != NULL)
<a name="l00880"></a>00880                     newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">strippedConstructor</a>(other-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()));
<a name="l00881"></a>00881             }
<a name="l00882"></a>00882         }
<a name="l00883"></a>00883         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00884"></a>00884             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00885"></a>00885             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00886"></a>00886             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00887"></a>00887             <span class="keywordflow">throw</span>;
<a name="l00888"></a>00888         }
<a name="l00889"></a>00889 
<a name="l00890"></a>00890         <span class="keywordflow">return</span> newNode;
<a name="l00891"></a>00891     }
<a name="l00892"></a>00892     
<a name="l00893"></a>00893     <span class="comment">// Accessor for the counter.</span>
<a name="l00894"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a">00894</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">SPSVnode::getVcounter</a>()<span class="keyword"> const</span>
<a name="l00895"></a>00895 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a>; }
<a name="l00896"></a>00896     
<a name="l00897"></a>00897     <span class="comment">// Accessor for the node&#39;s justSplit boolean flag.</span>
<a name="l00898"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a899334f4e1760a380a776bc38d664710">00898</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a899334f4e1760a380a776bc38d664710" title="Accessor for the node&#39;s justSplit boolean flag.">SPSVnode::getJustSplit</a>()<span class="keyword"> const</span>
<a name="l00899"></a>00899 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951" title="A boolean flag to know if this node was being split or node.">justSplit</a>; }
<a name="l00900"></a>00900 
<a name="l00901"></a>00901     <span class="comment">// Accessor for the node&#39;s data collection.</span>
<a name="l00902"></a>00902     <span class="comment">// Returns a copy of the node&#39;s collection of iterators to the big data set.</span>
<a name="l00903"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a05d47c013af462f857c6f54b20cb3404">00903</a>     <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a05d47c013af462f857c6f54b20cb3404" title="Accessor for the node&#39;s validation data collection.">SPSVnode::getVdata</a>()<span class="keyword"> const</span>
<a name="l00904"></a>00904 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>; }
<a name="l00905"></a>00905     
<a name="l00906"></a>00906     <span class="comment">// Clears the node&#39;s data collection.</span>
<a name="l00907"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#af7739cf5333fccbe27610cbbd1138719">00907</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af7739cf5333fccbe27610cbbd1138719" title="Clears the node&#39;s data collection for both training and validation set.">SPSVnode::clearData</a>()<span class="keyword"> const</span>
<a name="l00908"></a>00908 <span class="keyword">    </span>{ 
<a name="l00909"></a>00909     <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear(); 
<a name="l00910"></a>00910       <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.clear();   
<a name="l00911"></a>00911     }
<a name="l00912"></a>00912 
<a name="l00913"></a>00913     <span class="comment">// Accessor for the parent of a node</span>
<a name="l00914"></a>00914     <span class="comment">// Returns a copy of the pointer to parent node.</span>
<a name="l00915"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3">00915</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">SPSVnode::getParent</a>()<span class="keyword"> const</span>
<a name="l00916"></a>00916 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00917"></a>00917 
<a name="l00918"></a>00918     <span class="comment">// Accessor for the left child.</span>
<a name="l00919"></a>00919     <span class="comment">// Returns a copy of the pointer to leftChild node cast to this node type</span>
<a name="l00920"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2">00920</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">SPSVnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00921"></a>00921 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00922"></a>00922 
<a name="l00923"></a>00923     <span class="comment">// Accessor for the right child</span>
<a name="l00924"></a>00924     <span class="comment">//Returns a copy of the pointer to rightChild node cast to this node type</span>
<a name="l00925"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42">00925</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">SPSVnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l00926"></a>00926 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00927"></a>00927 
<a name="l00928"></a>00928 
<a name="l00929"></a>00929     <span class="comment">// get the number of datapoints currently associated with this which would</span>
<a name="l00930"></a>00930     <span class="comment">// be associated with the new right child if this node were to split</span>
<a name="l00931"></a>00931     <span class="comment">// remember that the right child&#39;s box is closed at the split</span>
<a name="l00932"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af">00932</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af" title="The count the right child would have if this node was split.">SPSVnode::getRightCountIfSplit</a>()<span class="keyword"> const</span>
<a name="l00933"></a>00933 <span class="keyword">    </span>{
<a name="l00934"></a>00934         <span class="comment">// first find what the right hand child&#39;s box would be if that child</span>
<a name="l00935"></a>00935         <span class="comment">// were to be created</span>
<a name="l00936"></a>00936             <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00937"></a>00937             <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00938"></a>00938 
<a name="l00939"></a>00939             <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l00940"></a>00940             ivector rCBox;
<a name="l00941"></a>00941 
<a name="l00942"></a>00942             <span class="comment">// Call Upper() to get what would be the right hand child box</span>
<a name="l00943"></a>00943             <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rCBox, maxdiamcomp);
<a name="l00944"></a>00944 
<a name="l00945"></a>00945         <span class="comment">// now find how many of this node&#39;s data points would go right</span>
<a name="l00946"></a>00946         <span class="comment">// all the rest of them would go left</span>
<a name="l00947"></a>00947         <span class="keywordtype">size_t</span> rightCount = 0;
<a name="l00948"></a>00948         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l00949"></a>00949 
<a name="l00950"></a>00950         <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.begin(); it &lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.end(); it++) {
<a name="l00951"></a>00951             <span class="comment">// DataItrs is a container of iterators to a BigDataCollection</span>
<a name="l00952"></a>00952             ivector pvec = _ivector((*(*it)));
<a name="l00953"></a>00953             <span class="comment">// increment rightCount if the point is in rC</span>
<a name="l00954"></a>00954             <span class="keywordflow">if</span> (pvec &lt;= rCBox) rightCount++;
<a name="l00955"></a>00955         }
<a name="l00956"></a>00956 
<a name="l00957"></a>00957         <span class="keywordflow">return</span> rightCount;
<a name="l00958"></a>00958     }
<a name="l00959"></a>00959 
<a name="l00960"></a>00960     <span class="comment">// The count the left child would have if this node was split.</span>
<a name="l00961"></a>00961     <span class="comment">// Does not split the nodes, just calculates how many of the data points</span>
<a name="l00962"></a>00962     <span class="comment">// currently associated with this node would go to the left child</span>
<a name="l00963"></a>00963     <span class="comment">// if the node were to be split.</span>
<a name="l00964"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a64b5d63790c02a454aa0e86222b1a3d3">00964</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a64b5d63790c02a454aa0e86222b1a3d3" title="The count the left child would have if this node was split.">SPSVnode::getLeftCountIfSplit</a>()<span class="keyword"> const</span>
<a name="l00965"></a>00965 <span class="keyword">    </span>{
<a name="l00966"></a>00966         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af" title="The count the right child would have if this node was split.">getRightCountIfSplit</a>();
<a name="l00967"></a>00967     }
<a name="l00968"></a>00968 
<a name="l00969"></a>00969     <span class="comment">// Smallest number of points in either child if this was split.</span>
<a name="l00970"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7">00970</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7" title="Smallest number of points in either child if this was split.">SPSVnode::getMinChildCountIfSplit</a>()<span class="keyword"> const</span>
<a name="l00971"></a>00971 <span class="keyword">    </span>{
<a name="l00972"></a>00972         <span class="keywordtype">size_t</span> min = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af" title="The count the right child would have if this node was split.">getRightCountIfSplit</a>();
<a name="l00973"></a>00973         <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min) &lt; min) min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min;
<a name="l00974"></a>00974         <span class="keywordflow">return</span> min;
<a name="l00975"></a>00975     }
<a name="l00976"></a>00976 
<a name="l00977"></a>00977 
<a name="l00978"></a>00978     <span class="comment">// get the number of datapoints currently associated with this which would</span>
<a name="l00979"></a>00979     <span class="comment">// be associated with the left and right children of a new right child</span>
<a name="l00980"></a>00980     <span class="comment">// if this node were split</span>
<a name="l00981"></a>00981     <span class="comment">// will return a container of the number of points the children</span>
<a name="l00982"></a>00982     <span class="comment">// of each child of target might have, in order</span>
<a name="l00983"></a>00983     <span class="comment">// [0] = left child&#39;s left child count, [1] = left child&#39;s rght child count,</span>
<a name="l00984"></a>00984     <span class="comment">// [2] = rght child&#39;s left child count, [3] = rght child&#39;s rght child count,</span>
<a name="l00985"></a>00985     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad1e930cb7befb42cd1985e91f3ddd9b6" title="return a container of counts for prospective grandchildren.">SPSVnode::getChildrensLeftAndRightCountsIfSplit</a>
<a name="l00986"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad1e930cb7befb42cd1985e91f3ddd9b6">00986</a>                         (<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; grandchildCounts) <span class="keyword">const</span>
<a name="l00987"></a>00987     {
<a name="l00988"></a>00988         <span class="comment">// first find what the right hand child&#39;s box would be if that child</span>
<a name="l00989"></a>00989         <span class="comment">// were to be created</span>
<a name="l00990"></a>00990             <span class="keywordtype">int</span> maxdiamcomp1; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00991"></a>00991             <span class="keywordtype">double</span> temp1 = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(getBox(), maxdiamcomp1);
<a name="l00992"></a>00992 
<a name="l00993"></a>00993             <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l00994"></a>00994             ivector rCBox;
<a name="l00995"></a>00995             ivector lCBox;
<a name="l00996"></a>00996             <span class="comment">// Call Upper() to get what would be the right hand child box</span>
<a name="l00997"></a>00997             <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(getBox(), rCBox, maxdiamcomp1);
<a name="l00998"></a>00998             <span class="comment">// Call Lower() to get what would be the left hand child box</span>
<a name="l00999"></a>00999             <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(getBox(), lCBox, maxdiamcomp1);
<a name="l01000"></a>01000 
<a name="l01001"></a>01001             <span class="keywordtype">int</span> maxdiamcomp2; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01002"></a>01002             <span class="keywordtype">double</span> temp2 = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(rCBox, maxdiamcomp2);
<a name="l01003"></a>01003 
<a name="l01004"></a>01004             <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l01005"></a>01005             ivector rCrCBox;
<a name="l01006"></a>01006             ivector rClCBox;
<a name="l01007"></a>01007 
<a name="l01008"></a>01008             <span class="comment">// Call Upper() to get what would be the right hand child box</span>
<a name="l01009"></a>01009             <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(getBox(), rCrCBox, maxdiamcomp2);
<a name="l01010"></a>01010 
<a name="l01011"></a>01011             <span class="comment">// Call Lower() to get what would be the left hand child box</span>
<a name="l01012"></a>01012             <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(getBox(), rClCBox, maxdiamcomp2);
<a name="l01013"></a>01013 
<a name="l01014"></a>01014             <span class="keywordtype">int</span> maxdiamcomp3; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01015"></a>01015             <span class="keywordtype">double</span> temp3 = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(lCBox, maxdiamcomp3);
<a name="l01016"></a>01016 
<a name="l01017"></a>01017             <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l01018"></a>01018             ivector lCrCBox;
<a name="l01019"></a>01019             ivector lClCBox;
<a name="l01020"></a>01020 
<a name="l01021"></a>01021             <span class="comment">// Call Upper() to get what would be the right hand child box</span>
<a name="l01022"></a>01022             <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(getBox(), lCrCBox, maxdiamcomp3);
<a name="l01023"></a>01023 
<a name="l01024"></a>01024             <span class="comment">// Call Lower() to get what would be the left hand child box</span>
<a name="l01025"></a>01025             <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(getBox(), lClCBox, maxdiamcomp3);
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 
<a name="l01028"></a>01028         <span class="comment">// now find how many of this node&#39;s data points would go right</span>
<a name="l01029"></a>01029         <span class="comment">// and left children of left and right children</span>
<a name="l01030"></a>01030         <span class="keywordtype">size_t</span> rightRightCount = 0;
<a name="l01031"></a>01031         <span class="keywordtype">size_t</span> rightLeftCount = 0;
<a name="l01032"></a>01032         <span class="keywordtype">size_t</span> leftRightCount = 0;
<a name="l01033"></a>01033         <span class="keywordtype">size_t</span> leftLeftCount = 0;
<a name="l01034"></a>01034         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l01035"></a>01035 
<a name="l01036"></a>01036         <span class="keywordflow">for</span> (it = dataItrs.begin(); it &lt; dataItrs.end(); it++) {
<a name="l01037"></a>01037             <span class="comment">// DataItrs is a container of iterators to a BigDataCollection</span>
<a name="l01038"></a>01038             ivector pvec = _ivector((*(*it)));
<a name="l01039"></a>01039             <span class="comment">// increment rightCount if the point is in rC</span>
<a name="l01040"></a>01040             <span class="keywordflow">if</span> (pvec &lt;= rCBox) {
<a name="l01041"></a>01041                 <span class="keywordflow">if</span> (pvec &lt;= rCrCBox) rightRightCount++;
<a name="l01042"></a>01042                 <span class="keywordflow">else</span> leftRightCount++;
<a name="l01043"></a>01043             }
<a name="l01044"></a>01044             <span class="keywordflow">else</span> {
<a name="l01045"></a>01045                 <span class="keywordflow">if</span> (pvec &lt;= lCrCBox) rightLeftCount++;
<a name="l01046"></a>01046                 <span class="keywordflow">else</span> leftLeftCount++;
<a name="l01047"></a>01047             }
<a name="l01048"></a>01048         }
<a name="l01049"></a>01049 
<a name="l01050"></a>01050         grandchildCounts.push_back(leftLeftCount);
<a name="l01051"></a>01051         grandchildCounts.push_back(rightLeftCount);
<a name="l01052"></a>01052         grandchildCounts.push_back(leftRightCount);
<a name="l01053"></a>01053         grandchildCounts.push_back(rightRightCount);
<a name="l01054"></a>01054 
<a name="l01055"></a>01055         <span class="keywordflow">return</span> grandchildCounts;
<a name="l01056"></a>01056     }
<a name="l01057"></a>01057 
<a name="l01058"></a>01058 
<a name="l01059"></a>01059     <span class="comment">// fills in container of leaf counts, left to right</span>
<a name="l01060"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">01060</a>     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">SPSVnode::getLeafNodeCounts</a>(<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; counts)<span class="keyword"> const</span>
<a name="l01061"></a>01061 <span class="keyword">    </span>{
<a name="l01062"></a>01062 
<a name="l01063"></a>01063         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01064"></a>01064             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">getLeafNodeCounts</a>(counts);
<a name="l01065"></a>01065         }
<a name="l01066"></a>01066         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01067"></a>01067             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">getLeafNodeCounts</a>(counts);
<a name="l01068"></a>01068         }
<a name="l01069"></a>01069         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l01070"></a>01070 
<a name="l01071"></a>01071             counts.push_back(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>);
<a name="l01072"></a>01072         }
<a name="l01073"></a>01073         <span class="keywordflow">return</span> counts;
<a name="l01074"></a>01074     }
<a name="l01075"></a>01075 
<a name="l01076"></a>01076 
<a name="l01077"></a>01077     <span class="comment">// return a reference to a container of SPSVnodes</span>
<a name="l01078"></a>01078     <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l01079"></a>01079     <span class="comment">// left to right order</span>
<a name="l01080"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508">01080</a>     <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">SPSVnode::getLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; leaves)<span class="keyword"> const</span>
<a name="l01081"></a>01081 <span class="keyword">    </span>{
<a name="l01082"></a>01082         <span class="comment">//if children, recurse on the children</span>
<a name="l01083"></a>01083         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01084"></a>01084             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01085"></a>01085         }
<a name="l01086"></a>01086 
<a name="l01087"></a>01087         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01088"></a>01088             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01089"></a>01089         }
<a name="l01090"></a>01090 
<a name="l01091"></a>01091         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l01092"></a>01092             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01093"></a>01093             leaves.push_back(const_cast&lt;SPSVnode*&gt;(<span class="keyword">this</span>));
<a name="l01094"></a>01094         }
<a name="l01095"></a>01095         <span class="keywordflow">return</span> leaves;
<a name="l01096"></a>01096     }
<a name="l01097"></a>01097 
<a name="l01098"></a>01098     <span class="comment">// return a reference to a container of SPSVnodes</span>
<a name="l01099"></a>01099     <span class="comment">// contents being the sub-leaf children of the given node</span>
<a name="l01100"></a>01100     <span class="comment">// sub-leaf nodes are the parents of leaf nodes and only have leaf nodes</span>
<a name="l01101"></a>01101     <span class="comment">// as children</span>
<a name="l01102"></a>01102     <span class="comment">// left to right order</span>
<a name="l01103"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb">01103</a>     <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb" title="Return a reference to all sub-leaf descendent nodes.">SPSVnode::getSubLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; subleaves)<span class="keyword"> const</span>
<a name="l01104"></a>01104 <span class="keyword">    </span>{
<a name="l01105"></a>01105         <span class="comment">//if children, recurse on the children</span>
<a name="l01106"></a>01106         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01107"></a>01107             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l01108"></a>01108         }
<a name="l01109"></a>01109 
<a name="l01110"></a>01110         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01111"></a>01111             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l01112"></a>01112         }
<a name="l01113"></a>01113 
<a name="l01114"></a>01114         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) { <span class="comment">// this is a subleaf</span>
<a name="l01115"></a>01115             <span class="comment">// arrgh horrible - cast away const if this node is a subleaf</span>
<a name="l01116"></a>01116             subleaves.push_back(const_cast&lt;SPSVnode*&gt;(<span class="keyword">this</span>));
<a name="l01117"></a>01117         }
<a name="l01118"></a>01118         <span class="keywordflow">return</span> subleaves;
<a name="l01119"></a>01119     }
<a name="l01120"></a>01120 
<a name="l01121"></a>01121     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l01122"></a>01122     <span class="comment">// contents being all the nodes in left to right order</span>
<a name="l01123"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf">01123</a>     <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf" title="Return a reference to all nodes.">SPSVnode::getAllNodes</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; allNodes)<span class="keyword"> const</span>
<a name="l01124"></a>01124 <span class="keyword">    </span>{
<a name="l01125"></a>01125         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { <span class="comment">// this is not empty</span>
<a name="l01126"></a>01126       <span class="comment">//if (!hasLCwithBox() &amp;&amp; !hasRCwithBox()) { // this is a leaf</span>
<a name="l01127"></a>01127             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01128"></a>01128         <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l01129"></a>01129             allNodes.push_back(const_cast&lt;SPSVnode*&gt;(<span class="keyword">this</span>));
<a name="l01130"></a>01130         }
<a name="l01131"></a>01131       
<a name="l01132"></a>01132       <span class="comment">//if children, recurse on the children</span>
<a name="l01133"></a>01133         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01134"></a>01134             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf" title="Return a reference to all nodes.">getAllNodes</a>(allNodes);
<a name="l01135"></a>01135         }
<a name="l01136"></a>01136 
<a name="l01137"></a>01137         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01138"></a>01138             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf" title="Return a reference to all nodes.">getAllNodes</a>(allNodes);
<a name="l01139"></a>01139         }       
<a name="l01140"></a>01140         <span class="keywordflow">return</span> allNodes;
<a name="l01141"></a>01141    }
<a name="l01142"></a>01142 
<a name="l01143"></a>01143 
<a name="l01144"></a>01144 
<a name="l01145"></a>01145 
<a name="l01146"></a>01146     <span class="comment">//Returns the sum of the count over volume in the leaf nodes</span>
<a name="l01147"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac741a9772d992ba74911cf692e1ed772">01147</a>     real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac741a9772d992ba74911cf692e1ed772" title="Get the sum of the count over volume in the leaf nodes.">SPSVnode::getSumLeafCountOverVol</a>()<span class="keyword"> const</span>
<a name="l01148"></a>01148 <span class="keyword">    </span>{
<a name="l01149"></a>01149         dotprecision sum(0.0);
<a name="l01150"></a>01150 
<a name="l01151"></a>01151         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01152"></a>01152             accumulate(sum, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, (1.0/<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l01153"></a>01153         }
<a name="l01154"></a>01154 
<a name="l01155"></a>01155         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01156"></a>01156 
<a name="l01157"></a>01157             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01158"></a>01158             <span class="comment">// fill the container with the leaf children</span>
<a name="l01159"></a>01159             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01160"></a>01160 
<a name="l01161"></a>01161             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it;
<a name="l01162"></a>01162 
<a name="l01163"></a>01163             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01164"></a>01164                 accumulate(sum, 1.0*((*it)-&gt;getCounter()),
<a name="l01165"></a>01165                             (1.0/(*it)-&gt;nodeVolume()));
<a name="l01166"></a>01166             }
<a name="l01167"></a>01167         }
<a name="l01168"></a>01168         <span class="keywordflow">return</span> rnd(sum);
<a name="l01169"></a>01169     }
<a name="l01170"></a>01170 
<a name="l01171"></a>01171 
<a name="l01172"></a>01172 
<a name="l01173"></a>01173 
<a name="l01174"></a>01174     <span class="comment">//Returns the count in the smallest (by count) leaf node.</span>
<a name="l01175"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d355f8da3eb609f5c81ce63b437fcf9">01175</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d355f8da3eb609f5c81ce63b437fcf9" title="Get the count of the leaf with the smallest count.">SPSVnode::getSmallestLeafCount</a>()<span class="keyword"> const</span>
<a name="l01176"></a>01176 <span class="keyword">    </span>{
<a name="l01177"></a>01177         <span class="keywordtype">size_t</span> smallestCount = 0;
<a name="l01178"></a>01178 
<a name="l01179"></a>01179         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01180"></a>01180             smallestCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01181"></a>01181         }
<a name="l01182"></a>01182 
<a name="l01183"></a>01183         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01184"></a>01184             <span class="comment">// set up a container for the leaf children</span>
<a name="l01185"></a>01185             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01186"></a>01186             <span class="comment">// fill the container with the leaf children</span>
<a name="l01187"></a>01187             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01188"></a>01188 
<a name="l01189"></a>01189             <span class="comment">// find the smallest child by count</span>
<a name="l01190"></a>01190             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it;
<a name="l01191"></a>01191             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* smallest = *(leaves.begin());
<a name="l01192"></a>01192 
<a name="l01193"></a>01193             smallestCount = smallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01194"></a>01194 
<a name="l01195"></a>01195             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01196"></a>01196                 <span class="keywordflow">if</span> ((*it)-&gt;counter &lt; smallestCount) {
<a name="l01197"></a>01197 
<a name="l01198"></a>01198                     smallestCount = (*it)-&gt;counter;
<a name="l01199"></a>01199                 }
<a name="l01200"></a>01200             }
<a name="l01201"></a>01201         } <span class="comment">// end else not a leaf</span>
<a name="l01202"></a>01202 
<a name="l01203"></a>01203         <span class="keywordflow">return</span> smallestCount;
<a name="l01204"></a>01204     }
<a name="l01205"></a>01205 
<a name="l01206"></a>01206     <span class="comment">// Returns the count in the largest (by count) leaf node.</span>
<a name="l01207"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#adfb30c9946f868e143c81e6bf35a7a6f">01207</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adfb30c9946f868e143c81e6bf35a7a6f" title="Get the count in the leaf with the smallest count.">SPSVnode::getLargestLeafCount</a>()<span class="keyword"> const</span>
<a name="l01208"></a>01208 <span class="keyword">    </span>{
<a name="l01209"></a>01209         <span class="keywordtype">size_t</span> largestCount = 0;
<a name="l01210"></a>01210 
<a name="l01211"></a>01211         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01212"></a>01212             largestCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01213"></a>01213         }
<a name="l01214"></a>01214 
<a name="l01215"></a>01215         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01216"></a>01216 
<a name="l01217"></a>01217             <span class="comment">// set up a container for the leaf children</span>
<a name="l01218"></a>01218             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01219"></a>01219             <span class="comment">// fill the container with the leaf children</span>
<a name="l01220"></a>01220             <span class="comment">// could be just this if no children</span>
<a name="l01221"></a>01221             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01222"></a>01222 
<a name="l01223"></a>01223             <span class="comment">// find the largest child by volume</span>
<a name="l01224"></a>01224             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it;
<a name="l01225"></a>01225             largestCount = (*(leaves.begin()))-&gt;counter;
<a name="l01226"></a>01226 
<a name="l01227"></a>01227             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01228"></a>01228                 <span class="keywordflow">if</span> ((*it)-&gt;counter &gt; largestCount) {
<a name="l01229"></a>01229                     largestCount = (*it)-&gt;counter;
<a name="l01230"></a>01230                 }
<a name="l01231"></a>01231             }
<a name="l01232"></a>01232         } <span class="comment">// end else not a leaf</span>
<a name="l01233"></a>01233 
<a name="l01234"></a>01234         <span class="keywordflow">return</span> largestCount;
<a name="l01235"></a>01235     }
<a name="l01236"></a>01236    
<a name="l01237"></a>01237    <span class="comment">// get the count in the ultimate root node ancestor of this node</span>
<a name="l01238"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18">01238</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">SPSVnode::getRootCounter</a>()<span class="keyword"> const</span>
<a name="l01239"></a>01239 <span class="keyword">    </span>{
<a name="l01240"></a>01240         <span class="keywordtype">size_t</span> retValue = 0;
<a name="l01241"></a>01241         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) { <span class="comment">// this is root</span>
<a name="l01242"></a>01242             retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01243"></a>01243         }
<a name="l01244"></a>01244         <span class="keywordflow">else</span> {
<a name="l01245"></a>01245             <span class="comment">// recurse upwards</span>
<a name="l01246"></a>01246             retValue = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01247"></a>01247         }
<a name="l01248"></a>01248         <span class="keywordflow">return</span> retValue;
<a name="l01249"></a>01249     }
<a name="l01250"></a>01250 
<a name="l01251"></a>01251     <span class="comment">// get the count in the ultimate root node ancestor of this node</span>
<a name="l01252"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1">01252</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1" title="The count in the node&#39;s ultimate ancestor root.">SPSVnode::getRootVcounter</a>()<span class="keyword"> const</span>
<a name="l01253"></a>01253 <span class="keyword">    </span>{
<a name="l01254"></a>01254         <span class="keywordtype">size_t</span> retValue = 0;
<a name="l01255"></a>01255         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) { <span class="comment">// this is root</span>
<a name="l01256"></a>01256             retValue = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a>;
<a name="l01257"></a>01257         }
<a name="l01258"></a>01258         <span class="keywordflow">else</span> {
<a name="l01259"></a>01259             <span class="comment">// recurse upwards</span>
<a name="l01260"></a>01260             retValue = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1" title="The count in the node&#39;s ultimate ancestor root.">getRootVcounter</a>();
<a name="l01261"></a>01261         }
<a name="l01262"></a>01262         <span class="keywordflow">return</span> retValue;
<a name="l01263"></a>01263     }
<a name="l01264"></a>01264 
<a name="l01265"></a>01265 
<a name="l01266"></a>01266     <span class="comment">// Get the mean of the data covered by the box of a node</span>
<a name="l01267"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f">01267</a>     rvector <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f" title="Get the sample mean.">SPSVnode::getMean</a>()<span class="keyword"> const</span>
<a name="l01268"></a>01268 <span class="keyword">    </span>{
<a name="l01269"></a>01269         <span class="comment">// set up an rvector retMean of the correct dimensions</span>
<a name="l01270"></a>01270         rvector retMean(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01271"></a>01271         <span class="comment">// loop through the elements in the dpSums vector</span>
<a name="l01272"></a>01272         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01273"></a>01273 
<a name="l01274"></a>01274             <span class="comment">// if no data elements each element or if only counts are held,</span>
<a name="l01275"></a>01275             <span class="comment">// that element of the mean is 0.0</span>
<a name="l01276"></a>01276             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> || (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> == 0)) {
<a name="l01277"></a>01277                 <span class="comment">// cxsc::rvector is indexed 1 to n</span>
<a name="l01278"></a>01278                 retMean[i+1] = 0.0;
<a name="l01279"></a>01279             }
<a name="l01280"></a>01280             <span class="comment">// if data elements, find the element-by-element mean</span>
<a name="l01281"></a>01281             <span class="keywordflow">else</span> {
<a name="l01282"></a>01282                 <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01283"></a>01283                 retMean[i+1] = rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[i])/(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>);
<a name="l01284"></a>01284 
<a name="l01285"></a>01285             }
<a name="l01286"></a>01286         }<span class="comment">// end loop through the elements in dpSums</span>
<a name="l01287"></a>01287 
<a name="l01288"></a>01288         <span class="keywordflow">return</span> retMean;
<a name="l01289"></a>01289 
<a name="l01290"></a>01290     }
<a name="l01291"></a>01291 
<a name="l01292"></a>01292     <span class="comment">// Get the variance-covariance vector of the data covered</span>
<a name="l01293"></a>01293     <span class="comment">// by the box of a node</span>
<a name="l01294"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a61adf71c4652c4ec29a9dc323174d1a3">01294</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">SPSVnode::getVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar)<span class="keyword"> const</span>
<a name="l01295"></a>01295 <span class="keyword">    </span>{
<a name="l01296"></a>01296         varCovar.clear();
<a name="l01297"></a>01297         varCovar.reserve(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01298"></a>01298 
<a name="l01299"></a>01299         <span class="comment">// loop through the elements in the dpSumProducts vector</span>
<a name="l01300"></a>01300         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; dimension*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; k++) {
<a name="l01301"></a>01301 
<a name="l01302"></a>01302             <span class="comment">// counts only held or if 0 or 1 data points</span>
<a name="l01303"></a>01303             <span class="comment">// each element of the var-covar is 0.0</span>
<a name="l01304"></a>01304             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> || (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &lt;= 1)) {
<a name="l01305"></a>01305                 varCovar.push_back(0.0);
<a name="l01306"></a>01306             }
<a name="l01307"></a>01307             <span class="comment">// if &gt;1 data points find element-by-element var-covar</span>
<a name="l01308"></a>01308 
<a name="l01309"></a>01309             <span class="comment">/*the var-covar is the sample var-covar</span>
<a name="l01310"></a>01310 <span class="comment">            which is</span>
<a name="l01311"></a>01311 <span class="comment">            [sumproduct(i,j)-sum(i)sum(j)/counter]/(counter-1)</span>
<a name="l01312"></a>01312 <span class="comment"></span>
<a name="l01313"></a>01313 <span class="comment">            element k in the vector of dotprecison sumproducts</span>
<a name="l01314"></a>01314 <span class="comment">            corresponds to row k/n, (row 0 to n-1)</span>
<a name="l01315"></a>01315 <span class="comment">            and column k-row*n (col 0 to n-1)</span>
<a name="l01316"></a>01316 <span class="comment">            in a matrix view of the sumproducts */</span>
<a name="l01317"></a>01317 
<a name="l01318"></a>01318             <span class="keywordflow">else</span> {
<a name="l01319"></a>01319                 <span class="keywordtype">size_t</span> i = k/<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; <span class="comment">// row  (int/int = int)</span>
<a name="l01320"></a>01320                 <span class="keywordtype">size_t</span> j = k - i*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; <span class="comment">// column</span>
<a name="l01321"></a>01321 
<a name="l01322"></a>01322                 <span class="comment">// make another dotprecision variable</span>
<a name="l01323"></a>01323                 dotprecision temp1 = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>[k];
<a name="l01324"></a>01324 
<a name="l01325"></a>01325                 dotprecision temp2(0.0);
<a name="l01326"></a>01326                 <span class="comment">// sum(i) x sum(j)</span>
<a name="l01327"></a>01327                 <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01328"></a>01328                 accumulate(temp2,  rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[i]),
<a name="l01329"></a>01329                         rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[j]));
<a name="l01330"></a>01330 
<a name="l01331"></a>01331                 real div = -1.0/<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01332"></a>01332 
<a name="l01333"></a>01333                 <span class="comment">// sumproduct(i,j) - sum(i)(sum(j)/counter</span>
<a name="l01334"></a>01334                 <span class="comment">// default cxsc rounding</span>
<a name="l01335"></a>01335                 accumulate(temp1, rnd(temp2), div);
<a name="l01336"></a>01336                 <span class="comment">// calculate the variance covariance element</span>
<a name="l01337"></a>01337                 varCovar.push_back(rnd(temp1)/(1.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>-1)));
<a name="l01338"></a>01338 
<a name="l01339"></a>01339             }
<a name="l01340"></a>01340         }<span class="comment">// end loop through the elements in dpSumProducts</span>
<a name="l01341"></a>01341 
<a name="l01342"></a>01342         <span class="keywordflow">return</span> varCovar;
<a name="l01343"></a>01343 
<a name="l01344"></a>01344     }
<a name="l01345"></a>01345 
<a name="l01346"></a>01346 
<a name="l01347"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">01347</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">SPSVnode::getVarCovar</a>()<span class="keyword"> const</span>
<a name="l01348"></a>01348 <span class="keyword">    </span>{
<a name="l01349"></a>01349         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retVarCovar;
<a name="l01350"></a>01350         retVarCovar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>(retVarCovar);
<a name="l01351"></a>01351         <span class="keywordflow">return</span> retVarCovar;
<a name="l01352"></a>01352     }
<a name="l01353"></a>01353 
<a name="l01354"></a>01354   <span class="comment">//gat41</span>
<a name="l01355"></a>01355   <span class="comment">// Get the uniform mean of the box of a node.</span>
<a name="l01356"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3">01356</a>   rvector <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">SPSVnode::getUniformMean</a>()<span class="keyword"> const</span>
<a name="l01357"></a>01357 <span class="keyword">  </span>{
<a name="l01358"></a>01358     rvector unifMean(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01359"></a>01359     
<a name="l01360"></a>01360     <span class="comment">// loop through the coordinates of this box to get the midpoint at each</span>
<a name="l01361"></a>01361     <span class="comment">// coordinate</span>
<a name="l01362"></a>01362     ivector thisBox = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01363"></a>01363     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01364"></a>01364       unifMean[i] = mid(thisBox[i]);
<a name="l01365"></a>01365     }
<a name="l01366"></a>01366     <span class="keywordflow">return</span> unifMean;
<a name="l01367"></a>01367   }
<a name="l01368"></a>01368 
<a name="l01369"></a>01369   <span class="comment">//gat41</span>
<a name="l01370"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3">01370</a>   real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">SPSVnode::getChebDistMean</a>()<span class="keyword"> const</span>
<a name="l01371"></a>01371 <span class="keyword">  </span>{
<a name="l01372"></a>01372     rvector Mean = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f" title="Get the sample mean.">getMean</a>();
<a name="l01373"></a>01373     rvector MeanUnif = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01374"></a>01374     real ChebDist = 0;
<a name="l01375"></a>01375     <span class="comment">//loop through the means and get the Chebyshev distances</span>
<a name="l01376"></a>01376     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01377"></a>01377         real temp = abs(Mean[i] - MeanUnif[i]);
<a name="l01378"></a>01378         <span class="comment">//std::cout &lt;&lt; temp &lt;&lt; &quot;\t&quot; &lt;&lt; ChebDist &lt;&lt; std::endl;</span>
<a name="l01379"></a>01379         ChebDist  = ( temp &gt; ChebDist) ? temp : ChebDist;
<a name="l01380"></a>01380       }
<a name="l01381"></a>01381       
<a name="l01382"></a>01382       <span class="comment">//cout &lt;&lt; &quot;getChebDist: &quot; &lt;&lt; endl;</span>
<a name="l01383"></a>01383       <span class="comment">//std::cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; getMean() &lt;&lt; &quot;\t&quot; &lt;&lt; getUniformMean() &lt;&lt; std::endl;</span>
<a name="l01384"></a>01384     <span class="keywordflow">return</span> ChebDist;
<a name="l01385"></a>01385   }
<a name="l01386"></a>01386   
<a name="l01387"></a>01387   
<a name="l01388"></a>01388   <span class="comment">//gat41</span>
<a name="l01389"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e">01389</a>   real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">SPSVnode::getChebDistCovar</a>()<span class="keyword"> const</span>
<a name="l01390"></a>01390 <span class="keyword">  </span>{
<a name="l01391"></a>01391     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>();
<a name="l01392"></a>01392     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>();
<a name="l01393"></a>01393 
<a name="l01394"></a>01394     real ChebDist = 0;
<a name="l01395"></a>01395     <span class="comment">//loop through the real vector and get the Chebyshev distances</span>
<a name="l01396"></a>01396     
<a name="l01397"></a>01397     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01398"></a>01398         real temp = abs(Covar[i] - unifCovar[i]);
<a name="l01399"></a>01399         <span class="comment">//std::cout &lt;&lt; temp &lt;&lt; &quot;\t&quot; &lt;&lt; ChebDist &lt;&lt; std::endl;</span>
<a name="l01400"></a>01400         ChebDist  = ( temp &gt; ChebDist) ? temp : ChebDist;
<a name="l01401"></a>01401       }
<a name="l01402"></a>01402       
<a name="l01403"></a>01403       <span class="comment">//cout &lt;&lt; &quot;getChebDist: &quot; &lt;&lt; endl;</span>
<a name="l01404"></a>01404     <span class="keywordflow">return</span> ChebDist;
<a name="l01405"></a>01405   }
<a name="l01406"></a>01406   
<a name="l01407"></a>01407   <span class="comment">//gat41</span>
<a name="l01408"></a>01408   <span class="comment">// Get the empirical mass.</span>
<a name="l01409"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f">01409</a>   <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">SPSVnode::getEmpMass</a>()<span class="keyword"> const</span>
<a name="l01410"></a>01410 <span class="keyword">  </span>{
<a name="l01411"></a>01411     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01412"></a>01412     <span class="keywordtype">double</span> empMass = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0);
<a name="l01413"></a>01413     <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; &quot;\t&quot; &lt;&lt; empMass &lt;&lt; endl;</span>
<a name="l01414"></a>01414     <span class="keywordflow">return</span> empMass;
<a name="l01415"></a>01415   }
<a name="l01416"></a>01416   
<a name="l01417"></a>01417    <span class="comment">//gat41</span>
<a name="l01418"></a>01418    <span class="comment">// Get the Battharchya distance.</span>
<a name="l01419"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e">01419</a>    real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">SPSVnode::getHellingerDist</a>()<span class="keyword"> const</span>
<a name="l01420"></a>01420 <span class="keyword">    </span>{
<a name="l01421"></a>01421     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>(); <span class="comment">//get the covariance matrix/</span>
<a name="l01422"></a>01422     real HD = 0.0; <span class="comment">//initialize hellinger distance to 0.</span>
<a name="l01423"></a>01423 
<a name="l01424"></a>01424     <span class="comment">// if there are no points, cov should be undefined. But since we want to push</span>
<a name="l01425"></a>01425     <span class="comment">// this node to the bottom of the queue, hence let HD = 0.</span>
<a name="l01426"></a>01426     <span class="comment">// if there is one point, the variance is 0. At the moment, we do not </span>
<a name="l01427"></a>01427     <span class="comment">// want to split boxes with only one point and so also let HD = 0.</span>
<a name="l01428"></a>01428     <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 0 || <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 1 ) { <span class="keywordflow">return</span> HD = 0.0; } 
<a name="l01429"></a>01429 
<a name="l01430"></a>01430     <span class="keywordflow">else</span> {
<a name="l01431"></a>01431       <span class="comment">//cout &lt;&lt; &quot;===========================&quot; &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01432"></a>01432       <span class="comment">//get the differences of the mean vectors</span>
<a name="l01433"></a>01433       rvector diffMean = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f" title="Get the sample mean.">getMean</a>() - <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01434"></a>01434       <span class="comment">//cout &lt;&lt; &quot;mean differences: &quot; &lt;&lt; diffMean &lt;&lt; endl;</span>
<a name="l01435"></a>01435 
<a name="l01436"></a>01436       <span class="comment">//make a gsl matrix for the mean difference</span>
<a name="l01437"></a>01437       gsl_matrix * diffMeanMat = gsl_matrix_alloc(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>, 1);
<a name="l01438"></a>01438       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01439"></a>01439         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 1; j++) {
<a name="l01440"></a>01440           gsl_matrix_set (diffMeanMat, i, j, _double(diffMean[i+1]));
<a name="l01441"></a>01441         }
<a name="l01442"></a>01442       }
<a name="l01443"></a>01443 
<a name="l01444"></a>01444       <span class="comment">// get the variances</span>
<a name="l01445"></a>01445       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>();
<a name="l01446"></a>01446 
<a name="l01447"></a>01447       <span class="comment">// initialize matrix objects</span>
<a name="l01448"></a>01448       gsl_matrix * CovarMat = gsl_matrix_alloc(dimension, dimension);
<a name="l01449"></a>01449       gsl_matrix * CovarMatMult = gsl_matrix_alloc(dimension, dimension);
<a name="l01450"></a>01450       gsl_matrix * UnifCovarMat = gsl_matrix_alloc(dimension, dimension);
<a name="l01451"></a>01451       gsl_matrix * PMat = gsl_matrix_alloc(dimension, dimension); <span class="comment">//make this same as</span>
<a name="l01452"></a>01452                                               <span class="comment">//CovarMat first</span>
<a name="l01453"></a>01453       <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01454"></a>01454     
<a name="l01455"></a>01455       <span class="comment">// problem with stably inverting the covariance matrix - if determinant is wrong, will get -DB</span>
<a name="l01456"></a>01456       <span class="comment">// fill up the matrics for the var-covar</span>
<a name="l01457"></a>01457       <span class="keywordtype">int</span> k = 0; <span class="comment">//counter for RealVec</span>
<a name="l01458"></a>01458       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01459"></a>01459         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01460"></a>01460 
<a name="l01461"></a>01461           <span class="keywordflow">if</span> ( i == j ) {
<a name="l01462"></a>01462             gsl_matrix_set(CovarMat, i, j, _double(Covar[k]) + 0.00000001); <span class="comment">//cast to double</span>
<a name="l01463"></a>01463             gsl_matrix_set(CovarMatMult, i, j, 100*(_double(Covar[k]))+0.00000001);
<a name="l01464"></a>01464           }
<a name="l01465"></a>01465           <span class="keywordflow">else</span> {
<a name="l01466"></a>01466             gsl_matrix_set(CovarMat, i, j, _double(Covar[k])); <span class="comment">//cast to double</span>
<a name="l01467"></a>01467             gsl_matrix_set(CovarMatMult, i, j, 100*(_double(Covar[k])));
<a name="l01468"></a>01468           }
<a name="l01469"></a>01469           
<a name="l01470"></a>01470           gsl_matrix_set(PMat, i, j, _double(Covar[k])); <span class="comment">//cast to double</span>
<a name="l01471"></a>01471           gsl_matrix_set(UnifCovarMat, i, j, _double(unifCovar[k])); <span class="comment">//cast to double</span>
<a name="l01472"></a>01472           k++;
<a name="l01473"></a>01473         }
<a name="l01474"></a>01474       }
<a name="l01475"></a>01475 
<a name="l01476"></a>01476       <span class="comment">// if variance is -ve, atomic data points? treat as only one point (not</span>
<a name="l01477"></a>01477       <span class="comment">// a very good assumption at the moment) and let HD = 0. </span>
<a name="l01478"></a>01478       <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01479"></a>01479         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01480"></a>01480           <span class="keywordflow">if</span> ( (i == j) &amp;&amp; (gsl_matrix_get(CovarMat, i, j) &lt; 0) ) {
<a name="l01481"></a>01481             cerr &lt;&lt; <span class="stringliteral">&quot;Negative variance!&quot;</span> &lt;&lt; endl;
<a name="l01482"></a>01482             cout.precision(20);
<a name="l01483"></a>01483             cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt;&lt; endl;
<a name="l01484"></a>01484             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l01485"></a>01485             cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; endl;
<a name="l01486"></a>01486             cout.precision(20);
<a name="l01487"></a>01487             cout &lt;&lt; <span class="stringliteral">&quot;Data is&quot;</span> &lt;&lt; std::endl;
<a name="l01488"></a>01488             <span class="keywordflow">for</span> (dataItr = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.begin();
<a name="l01489"></a>01489               dataItr!= <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.end(); dataItr++) {
<a name="l01490"></a>01490               <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dataItr;
<a name="l01491"></a>01491               rvector theData = *bigIt;
<a name="l01492"></a>01492               cout &lt;&lt; theData &lt;&lt; endl; 
<a name="l01493"></a>01493             } <span class="comment">// end loop through data container</span>
<a name="l01494"></a>01494         
<a name="l01495"></a>01495             cerr &lt;&lt; <span class="stringliteral">&quot;Variance cannot be negative.&quot;</span> &lt;&lt; endl; 
<a name="l01496"></a>01496             exit(1); 
<a name="l01497"></a>01497             
<a name="l01498"></a>01498             <span class="comment">/*</span>
<a name="l01499"></a>01499 <span class="comment">            gsl_matrix_free(CovarMat);</span>
<a name="l01500"></a>01500 <span class="comment">            gsl_matrix_free(UnifCovarMat);</span>
<a name="l01501"></a>01501 <span class="comment">            gsl_matrix_free(PMat);</span>
<a name="l01502"></a>01502 <span class="comment">            return HD = 0.0;</span>
<a name="l01503"></a>01503 <span class="comment">            */</span> 
<a name="l01504"></a>01504           }
<a name="l01505"></a>01505         }
<a name="l01506"></a>01506       }
<a name="l01507"></a>01507   
<a name="l01508"></a>01508       <span class="comment">//else {</span>
<a name="l01509"></a>01509         <span class="comment">/*cout &lt;&lt; &quot;CovarMat: &quot; &lt;&lt; endl;</span>
<a name="l01510"></a>01510 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01511"></a>01511 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01512"></a>01512 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01513"></a>01513 <span class="comment">          }</span>
<a name="l01514"></a>01514 <span class="comment">        }</span>
<a name="l01515"></a>01515 <span class="comment">        cout &lt;&lt; &quot;CovarMatMult: &quot; &lt;&lt; endl;</span>
<a name="l01516"></a>01516 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01517"></a>01517 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01518"></a>01518 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMatMult, i, j) &lt;&lt; endl; </span>
<a name="l01519"></a>01519 <span class="comment">          }</span>
<a name="l01520"></a>01520 <span class="comment">        }</span>
<a name="l01521"></a>01521 <span class="comment">        cout &lt;&lt; &quot;UnifCovarMat: &quot; &lt;&lt; endl;</span>
<a name="l01522"></a>01522 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01523"></a>01523 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01524"></a>01524 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(UnifCovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01525"></a>01525 <span class="comment">          }</span>
<a name="l01526"></a>01526 <span class="comment">        }*/</span>
<a name="l01527"></a>01527 
<a name="l01528"></a>01528         <span class="comment">//add the two matrices</span>
<a name="l01529"></a>01529         gsl_matrix_add(PMat, UnifCovarMat);
<a name="l01530"></a>01530         gsl_matrix_scale(PMat, 0.5);
<a name="l01531"></a>01531         
<a name="l01532"></a>01532         gsl_matrix * PMatForInv = gsl_matrix_alloc(dimension, dimension);
<a name="l01533"></a>01533         PMatForInv = PMat; 
<a name="l01534"></a>01534         <span class="comment">/*cout &lt;&lt; &quot;PMat: &quot; &lt;&lt; endl;</span>
<a name="l01535"></a>01535 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01536"></a>01536 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01537"></a>01537 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(PMat, i, j) &lt;&lt; endl; </span>
<a name="l01538"></a>01538 <span class="comment">          }</span>
<a name="l01539"></a>01539 <span class="comment">        }*/</span>
<a name="l01540"></a>01540 
<a name="l01541"></a>01541         <span class="comment">// get the determinants of CovarMat, UnifCovarMat, PMat</span>
<a name="l01542"></a>01542         <span class="keywordtype">int</span> s;
<a name="l01543"></a>01543         gsl_permutation * p = gsl_permutation_alloc(dimension);
<a name="l01544"></a>01544         gsl_linalg_LU_decomp(CovarMatMult, p, &amp;s);
<a name="l01545"></a>01545         <span class="comment">//cout &lt;&lt; &quot;CovarMat LU decomp: &quot; &lt;&lt; endl;</span>
<a name="l01546"></a>01546         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01547"></a>01547           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01548"></a>01548             <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01549"></a>01549           }
<a name="l01550"></a>01550         }
<a name="l01551"></a>01551         <span class="keywordtype">double</span> detCovarMat = gsl_linalg_LU_det(CovarMatMult, s)/(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(100,dimension));
<a name="l01552"></a>01552         <span class="comment">//cout &lt;&lt; &quot;det covar mat: &quot; &lt;&lt; detCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l01553"></a>01553         gsl_permutation_free(p);
<a name="l01554"></a>01554         <span class="comment">// it is possible to get negative determinants, and negative DB, temporarily sweeping this under the rug </span>
<a name="l01555"></a>01555         <span class="keywordflow">if</span> (detCovarMat &lt; 0) { cout &lt;&lt; <span class="stringliteral">&quot;Negative determinant.&quot;</span> &lt;&lt; endl; exit(1); }<span class="comment">//return HD = 0.0; }</span>
<a name="l01556"></a>01556         <span class="keywordflow">else</span> {
<a name="l01557"></a>01557           
<a name="l01558"></a>01558           <span class="keywordtype">int</span> s1;
<a name="l01559"></a>01559           gsl_permutation * p1 = gsl_permutation_alloc(dimension);
<a name="l01560"></a>01560           gsl_linalg_LU_decomp(UnifCovarMat, p1, &amp;s1);
<a name="l01561"></a>01561           <span class="comment">//cout &lt;&lt; &quot;UnifCovarMat decomp: &quot; &lt;&lt; endl;</span>
<a name="l01562"></a>01562           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01563"></a>01563             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01564"></a>01564               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(UnifCovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01565"></a>01565             }
<a name="l01566"></a>01566           }
<a name="l01567"></a>01567           <span class="keywordtype">double</span> detUnifCovarMat = gsl_linalg_LU_det(UnifCovarMat, s1);
<a name="l01568"></a>01568           <span class="comment">//cout &lt;&lt; &quot;det unif covar mat: &quot; &lt;&lt; detUnifCovarMat &lt;&lt; endl;</span>
<a name="l01569"></a>01569           gsl_permutation_free(p1);
<a name="l01570"></a>01570 
<a name="l01571"></a>01571           <span class="keywordtype">int</span> s2;
<a name="l01572"></a>01572           gsl_permutation * p2 = gsl_permutation_alloc(dimension);
<a name="l01573"></a>01573           gsl_linalg_LU_decomp(PMat, p2, &amp;s2);
<a name="l01574"></a>01574           <span class="keywordtype">double</span> detPMat = gsl_linalg_LU_det(PMat, s2);
<a name="l01575"></a>01575           <span class="comment">//cout &lt;&lt; &quot;det p mat: &quot; &lt;&lt; detPMat &lt;&lt; endl;</span>
<a name="l01576"></a>01576   
<a name="l01577"></a>01577           <span class="comment">//now get the inverse of P</span>
<a name="l01578"></a>01578           gsl_matrix * Pinverse = gsl_matrix_alloc(dimension, dimension); 
<a name="l01579"></a>01579           gsl_linalg_LU_invert(PMat, p2, Pinverse);
<a name="l01580"></a>01580           gsl_permutation_free(p2);
<a name="l01581"></a>01581           <span class="comment">//cout &lt;&lt; &quot;p inverse &quot; &lt;&lt; endl;</span>
<a name="l01582"></a>01582           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01583"></a>01583             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01584"></a>01584               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(Pinverse, i, j) &lt;&lt; endl; </span>
<a name="l01585"></a>01585             }
<a name="l01586"></a>01586           }
<a name="l01587"></a>01587       
<a name="l01588"></a>01588           <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l01589"></a>01589           <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l01590"></a>01590           gsl_matrix * diffMeanMatTranspose = gsl_matrix_alloc(1, dimension);
<a name="l01591"></a>01591           gsl_matrix_transpose_memcpy(diffMeanMatTranspose, diffMeanMat);
<a name="l01592"></a>01592         
<a name="l01593"></a>01593           <span class="comment">// now convert all to rmatrix for easier computations</span>
<a name="l01594"></a>01594           rmatrix diffMeanR(0, dimension-1, 0, 0);
<a name="l01595"></a>01595           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01596"></a>01596             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; 1; j++) {
<a name="l01597"></a>01597               diffMeanR[i][j] = gsl_matrix_get(diffMeanMat, i, j); 
<a name="l01598"></a>01598             }
<a name="l01599"></a>01599           }
<a name="l01600"></a>01600         
<a name="l01601"></a>01601           rmatrix diffMeanTransR(0, 0, 0, dimension-1);
<a name="l01602"></a>01602           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) {
<a name="l01603"></a>01603             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01604"></a>01604               diffMeanTransR[i][j] = gsl_matrix_get(diffMeanMatTranspose, i, j); 
<a name="l01605"></a>01605             }
<a name="l01606"></a>01606           }
<a name="l01607"></a>01607         
<a name="l01608"></a>01608           rmatrix PinvR(0, dimension-1, 0, dimension-1);
<a name="l01609"></a>01609           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01610"></a>01610             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01611"></a>01611               PinvR[i][j] = gsl_matrix_get(Pinverse, i, j); 
<a name="l01612"></a>01612             }
<a name="l01613"></a>01613           }
<a name="l01614"></a>01614         
<a name="l01615"></a>01615           <span class="comment">//free the gsl_matrices</span>
<a name="l01616"></a>01616           gsl_matrix_free(CovarMat);
<a name="l01617"></a>01617           gsl_matrix_free(UnifCovarMat);
<a name="l01618"></a>01618           gsl_matrix_free(PMat);
<a name="l01619"></a>01619         
<a name="l01620"></a>01620           <span class="comment">//cout &lt;&lt; diffMeanR &lt;&lt; endl;</span>
<a name="l01621"></a>01621           <span class="comment">//cout &lt;&lt; diffMeanTransR &lt;&lt; endl;</span>
<a name="l01622"></a>01622           <span class="comment">//cout &lt;&lt; PinvR &lt;&lt; endl;</span>
<a name="l01623"></a>01623         
<a name="l01624"></a>01624           <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l01625"></a>01625           <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l01626"></a>01626           <span class="comment">//cout &lt;&lt; (diffMeanTransR*PinvR)*diffMeanR &lt;&lt; endl;</span>
<a name="l01627"></a>01627           rmatrix MatOp = (diffMeanTransR*PinvR)*diffMeanR;
<a name="l01628"></a>01628           <span class="comment">//cout &lt;&lt; MatOp &lt;&lt; &quot;\t&quot; &lt;&lt; MatOp[0][0] &lt;&lt; endl;</span>
<a name="l01629"></a>01629           assert(MatOp &gt;= 0);
<a name="l01630"></a>01630           real DB = 1.0/8.0 * MatOp[0][0] + 0.5*log(detPMat/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(detCovarMat*detUnifCovarMat));
<a name="l01631"></a>01631           <span class="comment">//cout &lt;&lt; &quot;DB: &quot; &lt;&lt; DB &lt;&lt; endl;</span>
<a name="l01632"></a>01632           <span class="keywordflow">if</span> ( DB &lt;  0 ) { <span class="keywordflow">return</span> HD = 0.0; }
<a name="l01633"></a>01633           <span class="keywordflow">else</span> {
<a name="l01634"></a>01634           
<a name="l01635"></a>01635             real BC = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-DB);
<a name="l01636"></a>01636             assert(BC &gt;= 0);
<a name="l01637"></a>01637           <span class="comment">//cout &lt;&lt; &quot;BC: &quot; &lt;&lt; BC &lt;&lt; endl;</span>
<a name="l01638"></a>01638             real HD = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-BC);
<a name="l01639"></a>01639           <span class="comment">//cout &lt;&lt; &quot;HD: &quot; &lt;&lt; HD &lt;&lt; endl;</span>
<a name="l01640"></a>01640             assert(HD &gt;=0);
<a name="l01641"></a>01641             <span class="keywordflow">return</span> HD;
<a name="l01642"></a>01642           }
<a name="l01643"></a>01643         } <span class="comment">// end of determinant is not zero</span>
<a name="l01644"></a>01644       }
<a name="l01645"></a>01645   }   
<a name="l01646"></a>01646 
<a name="l01647"></a>01647   
<a name="l01648"></a>01648    
<a name="l01649"></a>01649    <span class="comment">//gat41</span>
<a name="l01650"></a>01650    <span class="comment">// Get the Hellingr distance for 1D data.</span>
<a name="l01651"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">01651</a>    real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">SPSVnode::getHellingerDist1D</a>()<span class="keyword"> const</span>
<a name="l01652"></a>01652 <span class="keyword">   </span>{
<a name="l01653"></a>01653     real HD = 0.0; 
<a name="l01654"></a>01654     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>();
<a name="l01655"></a>01655 
<a name="l01656"></a>01656     <span class="comment">// if the variance is negative - need to investiage this more</span>
<a name="l01657"></a>01657     <span class="comment">/*</span>
<a name="l01658"></a>01658 <span class="comment">    if (Covar[0] &lt; 0) {</span>
<a name="l01659"></a>01659 <span class="comment">      cout &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01660"></a>01660 <span class="comment">      cout &lt;&lt; Covar[0] &lt;&lt; endl;</span>
<a name="l01661"></a>01661 <span class="comment">      NodeDataItr dataItr;</span>
<a name="l01662"></a>01662 <span class="comment">      cout &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01663"></a>01663 <span class="comment">      cout &lt;&lt; &quot;Data is&quot; &lt;&lt; std::endl;</span>
<a name="l01664"></a>01664 <span class="comment">          for (dataItr = dataItrs.begin();</span>
<a name="l01665"></a>01665 <span class="comment">                dataItr!= dataItrs.end(); dataItr++) {</span>
<a name="l01666"></a>01666 <span class="comment"></span>
<a name="l01667"></a>01667 <span class="comment">                BigDataItr bigIt = *dataItr;</span>
<a name="l01668"></a>01668 <span class="comment">                rvector theData = *bigIt;</span>
<a name="l01669"></a>01669 <span class="comment"></span>
<a name="l01670"></a>01670 <span class="comment">                cout &lt;&lt; theData &lt;&lt; endl; </span>
<a name="l01671"></a>01671 <span class="comment">      } // end loop through data container</span>
<a name="l01672"></a>01672 <span class="comment">      </span>
<a name="l01673"></a>01673 <span class="comment">      cerr &lt;&lt; &quot;Variance cannot be negative.&quot; &lt;&lt; endl; </span>
<a name="l01674"></a>01674 <span class="comment">      exit(1); </span>
<a name="l01675"></a>01675 <span class="comment">    }</span>
<a name="l01676"></a>01676 <span class="comment">  */</span>
<a name="l01677"></a>01677   
<a name="l01678"></a>01678     <span class="comment">// can continue if variance is not negative</span>
<a name="l01679"></a>01679 
<a name="l01680"></a>01680       <span class="comment">// if there are no points, should be undefined. But since we want to push</span>
<a name="l01681"></a>01681       <span class="comment">// this node to the bottom of the queue, hence let HD = 0.</span>
<a name="l01682"></a>01682       <span class="comment">// if there is one point, the variance is 0. At the moment, we do not </span>
<a name="l01683"></a>01683       <span class="comment">//want to split boxes with only one point and so also let HD = 0.</span>
<a name="l01684"></a>01684       <span class="comment">// if variance is -ve, atomic data points? treat as only one point (not</span>
<a name="l01685"></a>01685       <span class="comment">// a very good assumption at the moment) and let HD = 0. </span>
<a name="l01686"></a>01686       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 0  || Covar[0] &lt;= 0 ) { <span class="keywordflow">return</span> HD = 0.0; } 
<a name="l01687"></a>01687       <span class="comment">/*else if ( Covar[0] == 0 ) { </span>
<a name="l01688"></a>01688 <span class="comment">        cout &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01689"></a>01689 <span class="comment">        cout &lt;&lt; getEmpMass() &lt;&lt; endl;</span>
<a name="l01690"></a>01690 <span class="comment">        cout &lt;&lt; nodeVolume() &lt;&lt; endl;</span>
<a name="l01691"></a>01691 <span class="comment">        cout &lt;&lt; getMean() &lt;&lt; endl;</span>
<a name="l01692"></a>01692 <span class="comment">        cerr &lt;&lt; &quot;no variance. check!&quot; &lt;&lt; endl;</span>
<a name="l01693"></a>01693 <span class="comment">        exit(1);</span>
<a name="l01694"></a>01694 <span class="comment">      }*/</span>
<a name="l01695"></a>01695 
<a name="l01696"></a>01696       <span class="keywordflow">else</span> {
<a name="l01697"></a>01697         <span class="comment">//get the differences of the mean vectors</span>
<a name="l01698"></a>01698         rvector diffMean = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f" title="Get the sample mean.">getMean</a>() - <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01699"></a>01699         <span class="comment">//cout &lt;&lt; &quot;mean differences: &quot; &lt;&lt; diffMean[1] &lt;&lt; endl;</span>
<a name="l01700"></a>01700         
<a name="l01701"></a>01701         <span class="comment">// get the variances</span>
<a name="l01702"></a>01702         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>();
<a name="l01703"></a>01703         <span class="comment">//cout &lt;&lt; &quot;Covar: &quot; &lt;&lt; Covar[0] &lt;&lt;  endl;</span>
<a name="l01704"></a>01704         <span class="comment">//cout &lt;&lt; &quot;unifCovar: &quot; &lt;&lt; unifCovar[0] &lt;&lt; endl;</span>
<a name="l01705"></a>01705         <span class="comment">//if all the elements for CovarMat are all zero, we do not have any points in </span>
<a name="l01706"></a>01706         <span class="comment">//this leaf node - so return hellinger distance as 0</span>
<a name="l01707"></a>01707   
<a name="l01708"></a>01708         <span class="comment">// use the sqrt of the squared hellinger distance for two normal distributions</span>
<a name="l01709"></a>01709         <span class="comment">// 1 - sqrt(2*sigma1*sigma2/(sigma1^2 + sigma2^2))*exp(-0.25*(mu1-mu2)^2/(sigma1^2+sigma2^2))</span>
<a name="l01710"></a>01710         <span class="comment">//cout &lt;&lt; diffMean &lt;&lt; &quot;\t&quot;;</span>
<a name="l01711"></a>01711         interval covarI = interval(Covar[0]);
<a name="l01712"></a>01712         interval unifCovarI = interval(unifCovar[0]);
<a name="l01713"></a>01713         interval sumVar = covarI + unifCovarI;
<a name="l01714"></a>01714         <span class="comment">//cout &lt;&lt; sumVar &lt;&lt; &quot;\t&quot;;</span>
<a name="l01715"></a>01715         interval insqrt = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(covarI)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(unifCovarI)/sumVar;
<a name="l01716"></a>01716         <span class="comment">//cout &lt;&lt; insqrt &lt;&lt; &quot;\t&quot;;</span>
<a name="l01717"></a>01717         interval H2 = interval(1,1) - <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(insqrt) *<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>((-0.25*diffMean[1]*diffMean[1])/sumVar);
<a name="l01718"></a>01718         <span class="comment">//cout &lt;&lt; &quot;H2: &quot; &lt;&lt; H2 &lt;&lt; endl;</span>
<a name="l01719"></a>01719         HD = mid(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(H2));
<a name="l01720"></a>01720         <span class="comment">//cout &lt;&lt; HD &lt;&lt; endl;</span>
<a name="l01721"></a>01721         <span class="keywordflow">if</span> ( HD &gt; 1 || HD &lt; 0) { 
<a name="l01722"></a>01722           cerr &lt;&lt; <span class="stringliteral">&quot;HD should be between 0 and 1.&quot;</span> &lt;&lt; endl;
<a name="l01723"></a>01723           exit(0);
<a name="l01724"></a>01724         }
<a name="l01725"></a>01725         <span class="keywordflow">return</span> HD;
<a name="l01726"></a>01726       }
<a name="l01727"></a>01727 
<a name="l01728"></a>01728   }
<a name="l01729"></a>01729   
<a name="l01730"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">01730</a>   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">SPSVnode::getUniformVarCovar</a>()<span class="keyword"> const</span>
<a name="l01731"></a>01731 <span class="keyword">    </span>{
<a name="l01732"></a>01732         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retVarCovar;
<a name="l01733"></a>01733         retVarCovar = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>(retVarCovar);
<a name="l01734"></a>01734         <span class="keywordflow">return</span> retVarCovar;
<a name="l01735"></a>01735     }
<a name="l01736"></a>01736     
<a name="l01737"></a>01737    <span class="comment">// Get the uniform variance-covar./R F iance vector of the data covered</span>
<a name="l01738"></a>01738     <span class="comment">// by the box of a node</span>
<a name="l01739"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ab1f050670fdcdc6f68e009a0cba0ed35">01739</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">SPSVnode::getUniformVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; unifVarCovar)<span class="keyword"> const</span>
<a name="l01740"></a>01740 <span class="keyword">    </span>{
<a name="l01741"></a>01741       unifVarCovar.reserve(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01742"></a>01742       ivector thisBox = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01743"></a>01743       
<a name="l01744"></a>01744       <span class="comment">// fill in the matrix where the diag are (1/12)*(b-a)^2 and off-diag </span>
<a name="l01745"></a>01745       <span class="comment">// are 0.</span>
<a name="l01746"></a>01746       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dimension*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01747"></a>01747           unifVarCovar.push_back(0.0); <span class="comment">//first fill up the container with 0</span>
<a name="l01748"></a>01748       }
<a name="l01749"></a>01749       <span class="comment">// then fill up the diags</span>
<a name="l01750"></a>01750       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01751"></a>01751         <span class="keywordtype">int</span> pos = i*dimension + i;
<a name="l01752"></a>01752         unifVarCovar[pos] = 1.0/12.0 * (Sup(thisBox[i+1]) - Inf(thisBox[i+1])) 
<a name="l01753"></a>01753                       * (Sup(thisBox[i+1]) - Inf(thisBox[i+1]));
<a name="l01754"></a>01754       }
<a name="l01755"></a>01755       
<a name="l01756"></a>01756       <span class="comment">//for (size_t i = 0; i &lt; dimension*dimension; i++) {cout &lt;&lt; unifVarCovar[i] &lt;&lt; endl;}</span>
<a name="l01757"></a>01757 
<a name="l01758"></a>01758         <span class="keywordflow">return</span> unifVarCovar;
<a name="l01759"></a>01759     }
<a name="l01760"></a>01760 
<a name="l01761"></a>01761 
<a name="l01762"></a>01762 
<a name="l01763"></a>01763 
<a name="l01764"></a>01764     <span class="comment">// Print the details of a of a specific node in a subpaving</span>
<a name="l01765"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a51715ef7b6e370006e914fee15061cfc">01765</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a51715ef7b6e370006e914fee15061cfc" title="Output details of a specific node.">SPSVnode::nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01766"></a>01766 <span class="keyword">    </span>{
<a name="l01767"></a>01767         <span class="comment">// output for box in form:</span>
<a name="l01768"></a>01768         <span class="comment">// box, volume, counter, mean, variance covariance, and data</span>
<a name="l01769"></a>01769 
<a name="l01770"></a>01770         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l01771"></a>01771 
<a name="l01772"></a>01772             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l01773"></a>01773 
<a name="l01774"></a>01774             os &lt;&lt; <span class="stringliteral">&quot;Box is :&quot;</span>;
<a name="l01775"></a>01775 
<a name="l01776"></a>01776             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l01777"></a>01777                 <span class="comment">// c-xsc default output for intervals</span>
<a name="l01778"></a>01778                 os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; thisBox[i];
<a name="l01779"></a>01779             }
<a name="l01780"></a>01780 
<a name="l01781"></a>01781             os &lt;&lt; std::endl;
<a name="l01782"></a>01782             os &lt;&lt; <span class="stringliteral">&quot;Box volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt;&lt; std::endl;
<a name="l01783"></a>01783             os &lt;&lt; <span class="stringliteral">&quot;Counter = &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &lt;&lt; std::endl;
<a name="l01784"></a>01784         os &lt;&lt; <span class="stringliteral">&quot;VCounter = &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a> &lt;&lt; std::endl;
<a name="l01785"></a>01785         
<a name="l01786"></a>01786             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a768f9507517be618970d19874b1ff992" title="Print the mean in a specified format.">nodeMeanPrint</a>(os);
<a name="l01787"></a>01787             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a096bff1081ceb308590aac8f2f3ee660" title="Print the variance-covariance in a specified format.">nodeVarCovarPrint</a>(os);
<a name="l01788"></a>01788             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5868a7661363e2f3bd7d2e267c22ceb1" title="Print the data in a specified format.">nodeDataPrint</a>(os);
<a name="l01789"></a>01789             os &lt;&lt; std::endl;
<a name="l01790"></a>01790         }
<a name="l01791"></a>01791         <span class="keywordflow">return</span> os;
<a name="l01792"></a>01792     }
<a name="l01793"></a>01793 
<a name="l01794"></a>01794     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l01795"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518">01795</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518" title="Output for for all leaves of a binary tree.">SPSVnode::leavesOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01796"></a>01796 <span class="keyword">    </span>{
<a name="l01797"></a>01797         <span class="comment">// uses  member function leafOutputTabs to generate node output</span>
<a name="l01798"></a>01798         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01799"></a>01799             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a01b35db8ce4b99460ff352f6d25a529c" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l01800"></a>01800             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01801"></a>01801 
<a name="l01802"></a>01802         }
<a name="l01803"></a>01803 
<a name="l01804"></a>01804         <span class="comment">//recurse on the children</span>
<a name="l01805"></a>01805         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01806"></a>01806             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l01807"></a>01807         }
<a name="l01808"></a>01808 
<a name="l01809"></a>01809         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01810"></a>01810             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l01811"></a>01811         }
<a name="l01812"></a>01812 
<a name="l01813"></a>01813     }
<a name="l01814"></a>01814 
<a name="l01815"></a>01815     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l01816"></a>01816     <span class="comment">//including output for the height of histogram bins for a</span>
<a name="l01817"></a>01817     <span class="comment">// normalised histogram based on this tree with this as root</span>
<a name="l01818"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf">01818</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">SPSVnode::leavesOutputTabsWithHistHeight</a>(
<a name="l01819"></a>01819                         std::ostream &amp;os, <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l01820"></a>01820 <span class="keyword">    </span>{
<a name="l01821"></a>01821         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, os, prec);
<a name="l01822"></a>01822         <span class="keywordflow">return</span> (os);
<a name="l01823"></a>01823     }
<a name="l01824"></a>01824 
<a name="l01825"></a>01825     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l01826"></a>01826     <span class="comment">//including output for the height of histogram bins for a</span>
<a name="l01827"></a>01827     <span class="comment">// normalised histogram based on tree with total number of data points bigN.</span>
<a name="l01828"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a8419f16a2f0667bc190a4a9ed41121c1">01828</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">SPSVnode::leavesOutputTabsWithHistHeight</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l01829"></a>01829                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l01830"></a>01830 <span class="keyword">    </span>{
<a name="l01831"></a>01831         <span class="comment">// uses  member function leafOutputTabs to generate node output</span>
<a name="l01832"></a>01832         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01833"></a>01833             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6eff83d7095798158c0bc17ee70e54c0" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l01834"></a>01834             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01835"></a>01835 
<a name="l01836"></a>01836         }
<a name="l01837"></a>01837 
<a name="l01838"></a>01838         <span class="comment">//recurse on the children</span>
<a name="l01839"></a>01839         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01840"></a>01840             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l01841"></a>01841         }
<a name="l01842"></a>01842 
<a name="l01843"></a>01843         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01844"></a>01844             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l01845"></a>01845         }
<a name="l01846"></a>01846     }
<a name="l01847"></a>01847   
<a name="l01848"></a>01848     <span class="comment">// Expand and split data</span>
<a name="l01849"></a>01849     <span class="comment">// should be called on a node with no associated data</span>
<a name="l01850"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a94c33927011a8d2613d40ccf6ccfafc1">01850</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">SPSVnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l01851"></a>01851     {
<a name="l01852"></a>01852         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(comp);    <span class="comment">// expand the node</span>
<a name="l01853"></a>01853         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;      
<a name="l01854"></a>01854         <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;        <span class="comment">// dummy split decision maker</span>
<a name="l01855"></a>01855         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad" title="Send the data associated with this down to children.">splitData</a>(sn, boolVal);            <span class="comment">// split the data with no further splitting</span>
<a name="l01856"></a>01856 
<a name="l01857"></a>01857 
<a name="l01858"></a>01858     }
<a name="l01859"></a>01859 
<a name="l01860"></a>01860     <span class="comment">// Expand and split the data with further splitting</span>
<a name="l01861"></a>01861     <span class="comment">// should be called on a node with no associated data</span>
<a name="l01862"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#acbad110f9ed41364774c9e2fea658594">01862</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">SPSVnode::nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> comp)
<a name="l01863"></a>01863     {
<a name="l01864"></a>01864         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(comp);    <span class="comment">// expand the node</span>
<a name="l01865"></a>01865         <span class="comment">// split the data, allowing for further splitting</span>
<a name="l01866"></a>01866         <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>; 
<a name="l01867"></a>01867         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad" title="Send the data associated with this down to children.">splitData</a>(boolTest, boolVal);
<a name="l01868"></a>01868     }
<a name="l01869"></a>01869 
<a name="l01870"></a>01870 
<a name="l01871"></a>01871     <span class="comment">// Expand and split</span>
<a name="l01872"></a>01872     <span class="comment">// finds its own comp argument</span>
<a name="l01873"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8">01873</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">SPSVnode::nodeExpand</a>()
<a name="l01874"></a>01874     {
<a name="l01875"></a>01875         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01876"></a>01876         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l01877"></a>01877         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l01878"></a>01878 
<a name="l01879"></a>01879     }
<a name="l01880"></a>01880 
<a name="l01881"></a>01881     <span class="comment">// Expand and split with further splitting for both training and validation   data</span>
<a name="l01882"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ada1ce5002ee4985a22d35d8cb651d191">01882</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">SPSVnode::nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">bool</span> boolVal)
<a name="l01883"></a>01883     {
<a name="l01884"></a>01884         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01885"></a>01885         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l01886"></a>01886       
<a name="l01887"></a>01887         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(maxdiamcomp);
<a name="l01888"></a>01888         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951" title="A boolean flag to know if this node was being split or node.">justSplit</a> = <span class="keyword">true</span>;
<a name="l01889"></a>01889         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad" title="Send the data associated with this down to children.">splitData</a>(boolTest, boolVal);
<a name="l01890"></a>01890     }
<a name="l01891"></a>01891     
<a name="l01892"></a>01892     <span class="comment">// Expand and split with further splitting for both training and validation  data</span>
<a name="l01893"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a4846c8d9c7d29d0f0850a7a9c30eec2b">01893</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">SPSVnode::nodeExpand</a>(<span class="keywordtype">bool</span> boolVal)
<a name="l01894"></a>01894     {
<a name="l01895"></a>01895               
<a name="l01896"></a>01896         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension      </span>
<a name="l01897"></a>01897         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);        
<a name="l01898"></a>01898         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(maxdiamcomp);        
<a name="l01899"></a>01899         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951" title="A boolean flag to know if this node was being split or node.">justSplit</a> = <span class="keyword">true</span>;                
<a name="l01900"></a>01900         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l01901"></a>01901         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad" title="Send the data associated with this down to children.">splitData</a>(sn, boolVal);
<a name="l01902"></a>01902     }
<a name="l01903"></a>01903 
<a name="l01904"></a>01904     <span class="comment">// reabsorb both the children of this node</span>
<a name="l01905"></a>01905     <span class="comment">// the stats in this node will be correct so all we have to do is to</span>
<a name="l01906"></a>01906     <span class="comment">// associate the child data with this and delete the children</span>
<a name="l01907"></a>01907     <span class="comment">// This would work even if children are not leaves since gatherData()</span>
<a name="l01908"></a>01908     <span class="comment">// gets data from descendents of the node it operates on</span>
<a name="l01909"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30">01909</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30" title="Reabsorbs both children of the node.">SPSVnode::nodeReabsorbChildren</a>()
<a name="l01910"></a>01910     {
<a name="l01911"></a>01911         <span class="comment">// first recursively deal with the children of the children</span>
<a name="l01912"></a>01912         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01913"></a>01913             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l01914"></a>01914         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01915"></a>01915             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l01916"></a>01916 
<a name="l01917"></a>01917         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01918"></a>01918             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>, <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01919"></a>01919             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l01920"></a>01920             <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l01921"></a>01921         }
<a name="l01922"></a>01922 
<a name="l01923"></a>01923         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01924"></a>01924             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>, <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01925"></a>01925             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l01926"></a>01926             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l01927"></a>01927         }
<a name="l01928"></a>01928 
<a name="l01929"></a>01929         <span class="comment">// reset splitDim and splitValue to their defaults</span>
<a name="l01930"></a>01930         <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a> = -1;
<a name="l01931"></a>01931         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a> = 0.0;
<a name="l01932"></a>01932 
<a name="l01933"></a>01933         <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l01934"></a>01934         <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l01935"></a>01935     }
<a name="l01936"></a>01936 
<a name="l01937"></a>01937     <span class="comment">// computes a minimal subpaving from two sibling subpavings</span>
<a name="l01938"></a>01938     <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l01939"></a>01939     <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l01940"></a>01940     <span class="comment">// and move the the data from the children up to the new leaf</span>
<a name="l01941"></a>01941     <span class="comment">// warning: nodeReunite would not normally be used with SPSVnodes</span>
<a name="l01942"></a>01942     <span class="comment">// but is in the base class and is reimplmented to try do it</span>
<a name="l01943"></a>01943     <span class="comment">// appropriately for this derived class should it be needed.</span>
<a name="l01944"></a>01944     <span class="comment">// This function is untested.</span>
<a name="l01945"></a>01945 
<a name="l01946"></a>01946     <span class="comment">/* Raaz&#39;s comment:</span>
<a name="l01947"></a>01947 <span class="comment">    Perhaps we should do what the base class does with the additional twist</span>
<a name="l01948"></a>01948 <span class="comment">    of passing the new information, if any, from the leaves to the parent:</span>
<a name="l01949"></a>01949 <span class="comment">    The counts and sample mean won&#39;t change but the other node features</span>
<a name="l01950"></a>01950 <span class="comment">    may change.  In particular, if we further derive SPSVnode for</span>
<a name="l01951"></a>01951 <span class="comment">    functional plug-in estimation, with interval range enclosures of box</span>
<a name="l01952"></a>01952 <span class="comment">    range enclosures for some given target functional (some function</span>
<a name="l01953"></a>01953 <span class="comment">    from root box to R^m), then we want to propagate the hull of the</span>
<a name="l01954"></a>01954 <span class="comment">    intersection of the children to the parent with the an operation</span>
<a name="l01955"></a>01955 <span class="comment">    similar to the base class version that combines two leaf siblings</span>
<a name="l01956"></a>01956 <span class="comment">    into this, otherwise grafts them onto this while still propogating</span>
<a name="l01957"></a>01957 <span class="comment">    any information to the parent. */</span>
<a name="l01958"></a>01958 
<a name="l01959"></a>01959   
<a name="l01960"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5abf598ead77d94aa130a8a7bf78f1f7">01960</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5abf598ead77d94aa130a8a7bf78f1f7" title="Try to reunite nodes to form one leaf.">SPSVnode::nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *rChild)
<a name="l01961"></a>01961         <span class="comment">// lChild and rChild are the two subpavings to be reunited</span>
<a name="l01962"></a>01962     {
<a name="l01963"></a>01963         <span class="comment">// redo the box, move the data up,</span>
<a name="l01964"></a>01964 
<a name="l01965"></a>01965         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01966"></a>01966 
<a name="l01967"></a>01967         <span class="comment">// check that the labels match and exit if not</span>
<a name="l01968"></a>01968         <span class="keywordflow">if</span> ((lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> ) || (rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>)) {
<a name="l01969"></a>01969             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Labels do not match&quot;</span>);
<a name="l01970"></a>01970         }
<a name="l01971"></a>01971 
<a name="l01972"></a>01972         <span class="comment">// if both subpavings are leaves and hull of boxes is x,</span>
<a name="l01973"></a>01973         <span class="comment">// discard them: *this is a leaf</span>
<a name="l01974"></a>01974         <span class="keywordflow">if</span> (lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01975"></a>01975             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> !=
<a name="l01976"></a>01976                 (*(lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) | *(rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l01977"></a>01977                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes to be reunited do not fit&quot;</span>);
<a name="l01978"></a>01978             }
<a name="l01979"></a>01979 
<a name="l01980"></a>01980             <span class="comment">// we have to collect all the data from the children,</span>
<a name="l01981"></a>01981             <span class="comment">// and fire it into this to make sure that the</span>
<a name="l01982"></a>01982             <span class="comment">// stats for this (this node) are correct</span>
<a name="l01983"></a>01983             <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l01984"></a>01984             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(tempContainer, lChild);
<a name="l01985"></a>01985             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(tempContainer, rChild);
<a name="l01986"></a>01986 
<a name="l01987"></a>01987             <span class="comment">// reserve capacity in this</span>
<a name="l01988"></a>01988             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l01989"></a>01989 
<a name="l01990"></a>01990             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l01991"></a>01991 
<a name="l01992"></a>01992             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* insertedInto = NULL;
<a name="l01993"></a>01993 
<a name="l01994"></a>01994             <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l01995"></a>01995                 it &lt; tempContainer.end(); it++) {
<a name="l01996"></a>01996                 <span class="comment">// insert with no splitting</span>
<a name="l01997"></a>01997                 <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l01998"></a>01998                 <span class="keywordtype">bool</span> boolVal = <span class="keyword">false</span>;
<a name="l01999"></a>01999                 insertedInto = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn, boolVal);
<a name="l02000"></a>02000                 <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l02001"></a>02001                     std::cerr &lt;&lt; <span class="stringliteral">&quot;Check &quot;</span>
<a name="l02002"></a>02002                         &lt;&lt; <span class="stringliteral">&quot;SPSVnode::nodeReunite: &quot;</span>
<a name="l02003"></a>02003                         &lt;&lt; <span class="stringliteral">&quot; data &quot;</span> &lt;&lt; **it
<a name="l02004"></a>02004                         &lt;&lt; <span class="stringliteral">&quot; from nodes to be adopted &quot;</span>
<a name="l02005"></a>02005                         &lt;&lt; <span class="stringliteral">&quot;rejected by new parent&quot;</span>
<a name="l02006"></a>02006                         &lt;&lt; std::endl;
<a name="l02007"></a>02007                 }
<a name="l02008"></a>02008             }
<a name="l02009"></a>02009 
<a name="l02010"></a>02010             <span class="comment">// the stats for this should now be right</span>
<a name="l02011"></a>02011             <span class="comment">// and this will be a leaf so the data</span>
<a name="l02012"></a>02012             <span class="comment">// should stay associated with it</span>
<a name="l02013"></a>02013 
<a name="l02014"></a>02014             <span class="comment">//discard the two subpavings given</span>
<a name="l02015"></a>02015             <span class="keyword">delete</span> lChild;
<a name="l02016"></a>02016             <span class="keyword">delete</span> rChild;
<a name="l02017"></a>02017 
<a name="l02018"></a>02018         }
<a name="l02019"></a>02019 
<a name="l02020"></a>02020         <span class="keywordflow">else</span> {  <span class="comment">// at least one of the children is not a leaf</span>
<a name="l02021"></a>02021             <span class="comment">// this has to adopt them rather than reuniting them</span>
<a name="l02022"></a>02022             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a33d64bef2bd9dd7f430b732719eab71d" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(rChild);
<a name="l02023"></a>02023             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a928db3d7b687a9fb5d50fa135f51b040" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(lChild);
<a name="l02024"></a>02024             <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>(); <span class="comment">// recursively rename child branches</span>
<a name="l02025"></a>02025         }
<a name="l02026"></a>02026     }
<a name="l02027"></a>02027 
<a name="l02028"></a>02028 
<a name="l02029"></a>02029 
<a name="l02030"></a>02030     <span class="comment">// graft lChild onto this node</span>
<a name="l02031"></a>02031     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l02032"></a>02032     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l02033"></a>02033     <span class="comment">// used when building a statistical subpaving upwards</span>
<a name="l02034"></a>02034     <span class="comment">// All stats are assumed to be recalculated (sums and sumproduct as well</span>
<a name="l02035"></a>02035     <span class="comment">// as counts)</span>
<a name="l02036"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a928db3d7b687a9fb5d50fa135f51b040">02036</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a928db3d7b687a9fb5d50fa135f51b040" title="Builds a higher level of a tree from existing nodes.">SPSVnode::nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *lChild)
<a name="l02037"></a>02037     {
<a name="l02038"></a>02038         <span class="comment">// *this is the node which will become the parent</span>
<a name="l02039"></a>02039 
<a name="l02040"></a>02040         <span class="comment">// we have to collect all the data from the child,</span>
<a name="l02041"></a>02041         <span class="comment">// and fire it into this to make sure that the stats</span>
<a name="l02042"></a>02042         <span class="comment">// for this (this node) are correct</span>
<a name="l02043"></a>02043 
<a name="l02044"></a>02044         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l02045"></a>02045         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(tempContainer, lChild);
<a name="l02046"></a>02046 
<a name="l02047"></a>02047         <span class="comment">// reserve capacity in this</span>
<a name="l02048"></a>02048         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l02049"></a>02049 
<a name="l02050"></a>02050         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l02051"></a>02051 
<a name="l02052"></a>02052         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* insertedInto = NULL;
<a name="l02053"></a>02053 
<a name="l02054"></a>02054         <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l02055"></a>02055             it &lt; tempContainer.end(); it++) {
<a name="l02056"></a>02056 
<a name="l02057"></a>02057             <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy split decision maker</span>
<a name="l02058"></a>02058             <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l02059"></a>02059             insertedInto = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn, boolVal);
<a name="l02060"></a>02060             <span class="comment">// insert with no splitting</span>
<a name="l02061"></a>02061             <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l02062"></a>02062                 std::cerr &lt;&lt; <span class="stringliteral">&quot;Check SPSVnode::nodeAdoptLeft: &quot;</span>
<a name="l02063"></a>02063                     &lt;&lt; <span class="stringliteral">&quot;data &quot;</span> &lt;&lt; **it &lt;&lt; <span class="stringliteral">&quot; from node &quot;</span>
<a name="l02064"></a>02064                     &lt;&lt; <span class="stringliteral">&quot;to be adopted rejected by new &quot;</span>
<a name="l02065"></a>02065                     &lt;&lt; <span class="stringliteral">&quot;parent&quot;</span> &lt;&lt; std::endl;
<a name="l02066"></a>02066             }
<a name="l02067"></a>02067         }
<a name="l02068"></a>02068 
<a name="l02069"></a>02069         <span class="comment">// the stats for this should now be right</span>
<a name="l02070"></a>02070         <span class="comment">// but the data is associated with its descendent nodes</span>
<a name="l02071"></a>02071         <span class="comment">// so we need to clear the actual data</span>
<a name="l02072"></a>02072         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear();
<a name="l02073"></a>02073 
<a name="l02074"></a>02074         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l02075"></a>02075         <span class="comment">// nodeAddLeft() checks labels, hull size , present children</span>
<a name="l02076"></a>02076         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(lChild);
<a name="l02077"></a>02077         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d6459ebf84a81b4759a3dd6524df4cf" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>(); <span class="comment">// set the split dimension and split value</span>
<a name="l02078"></a>02078 
<a name="l02079"></a>02079     }
<a name="l02080"></a>02080 
<a name="l02081"></a>02081     <span class="comment">// graft rChild onto this node</span>
<a name="l02082"></a>02082     <span class="comment">// rChild could be a leaf or a non-leaf</span>
<a name="l02083"></a>02083     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l02084"></a>02084     <span class="comment">// used when building a statistical subpaving upwards</span>
<a name="l02085"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a33d64bef2bd9dd7f430b732719eab71d">02085</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a33d64bef2bd9dd7f430b732719eab71d" title="Builds a higher level of a tree from existing nodes.">SPSVnode::nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *rChild)
<a name="l02086"></a>02086     {
<a name="l02087"></a>02087         <span class="comment">//* this is the node which will become the parent</span>
<a name="l02088"></a>02088 
<a name="l02089"></a>02089         <span class="comment">// we have to collect all the data from the child,</span>
<a name="l02090"></a>02090         <span class="comment">// and fire it into this to make sure that the stats</span>
<a name="l02091"></a>02091         <span class="comment">// for this (this node) are correct</span>
<a name="l02092"></a>02092         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l02093"></a>02093         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(tempContainer, rChild);
<a name="l02094"></a>02094 
<a name="l02095"></a>02095         <span class="comment">// reserve capacity in this</span>
<a name="l02096"></a>02096         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l02097"></a>02097 
<a name="l02098"></a>02098         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l02099"></a>02099 
<a name="l02100"></a>02100         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* insertedInto = NULL;
<a name="l02101"></a>02101 
<a name="l02102"></a>02102         <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l02103"></a>02103             it &lt; tempContainer.end(); it++) {
<a name="l02104"></a>02104 
<a name="l02105"></a>02105             <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy split decision maker</span>
<a name="l02106"></a>02106             <span class="keywordtype">bool</span> boolVal = <span class="keyword">false</span>;
<a name="l02107"></a>02107             insertedInto = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn, boolVal);
<a name="l02108"></a>02108             <span class="comment">// insert with no splitting</span>
<a name="l02109"></a>02109             <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l02110"></a>02110                 std::cerr &lt;&lt; <span class="stringliteral">&quot;Check SPSVnode::nodeAdoptRight: &quot;</span>
<a name="l02111"></a>02111                     &lt;&lt; <span class="stringliteral">&quot;data &quot;</span> &lt;&lt; **it &lt;&lt; <span class="stringliteral">&quot; from node to &quot;</span>
<a name="l02112"></a>02112                     &lt;&lt; <span class="stringliteral">&quot;be adopted rejected by new parent&quot;</span>
<a name="l02113"></a>02113                     &lt;&lt; std::endl;
<a name="l02114"></a>02114             }
<a name="l02115"></a>02115         }
<a name="l02116"></a>02116 
<a name="l02117"></a>02117         <span class="comment">// the stats for this should now be right</span>
<a name="l02118"></a>02118         <span class="comment">// but the data is associated with its descendent nodes</span>
<a name="l02119"></a>02119         <span class="comment">// so we need to clear the actual data</span>
<a name="l02120"></a>02120         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear();
<a name="l02121"></a>02121 
<a name="l02122"></a>02122         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l02123"></a>02123         <span class="comment">// nodeAddRight() checks labels, hull size, present children</span>
<a name="l02124"></a>02124         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(rChild);
<a name="l02125"></a>02125         <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d6459ebf84a81b4759a3dd6524df4cf" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>(); <span class="comment">// set the split dimension and split value</span>
<a name="l02126"></a>02126     }
<a name="l02127"></a>02127 
<a name="l02128"></a>02128 
<a name="l02129"></a>02129    <span class="comment">// Inserts data into this node - boolVal to check if it&#39;s test or train data</span>
<a name="l02130"></a>02130    <span class="comment">// we are actually inserting an iterator to the data</span>
<a name="l02131"></a>02131    <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l02132"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135">02132</a>    <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">SPSVnode::insertOneFind</a>(<a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr,
<a name="l02133"></a>02133                                     <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd,
<a name="l02134"></a>02134                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, 
<a name="l02135"></a>02135                                     <span class="keywordtype">bool</span> boolVal)
<a name="l02136"></a>02136    {
<a name="l02137"></a>02137       rvector newData = *newItr;
<a name="l02138"></a>02138       <span class="comment">// start at the top</span>
<a name="l02139"></a>02139       <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* retObj = NULL;
<a name="l02140"></a>02140       <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a803d11f31d86f0565dbe682a33099698" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(newData, childInd)) {
<a name="l02141"></a>02141             <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af37c85866ee5bdb968faf84856b51291" title="Recalculate summary statistics associated with node.">recalculateStats</a>(newData, boolVal);
<a name="l02142"></a>02142             <span class="keywordtype">bool</span> wasLeaf = (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>());
<a name="l02143"></a>02143             <span class="comment">// if it is a leaf, add the data and return this object</span>
<a name="l02144"></a>02144             <span class="keywordflow">if</span>(wasLeaf) { 
<a name="l02145"></a>02145                 <span class="keywordflow">if</span> (boolVal==<span class="keyword">true</span>) {
<a name="l02146"></a>02146                    <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>.push_back(newItr);
<a name="l02147"></a>02147                 }
<a name="l02148"></a>02148                 <span class="keywordflow">else</span> {
<a name="l02149"></a>02149                      <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.push_back(newItr);
<a name="l02150"></a>02150                 }            
<a name="l02151"></a>02151                 <span class="comment">// give this node as return value</span>
<a name="l02152"></a>02152                 retObj = <span class="keyword">this</span>;
<a name="l02153"></a>02153                 <span class="comment">// split if we need to</span>
<a name="l02154"></a>02154                 <span class="keywordflow">if</span> (boolTest(<span class="keyword">this</span>)) {
<a name="l02155"></a>02155                     <span class="comment">// expand and split data to children</span>
<a name="l02156"></a>02156                     <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(boolTest, boolVal);
<a name="l02157"></a>02157                 } <span class="comment">// end if we need to split</span>
<a name="l02158"></a>02158             } <span class="comment">// end of isLeaf</span>
<a name="l02159"></a>02159             <span class="comment">// if not a leaf before we had split, and contains data</span>
<a name="l02160"></a>02160             <span class="comment">// recurse on the children if any</span>
<a name="l02161"></a>02161             <span class="keywordflow">if</span> (!wasLeaf) {
<a name="l02162"></a>02162                <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>!=NULL &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()){
<a name="l02163"></a>02163                     retObj =
<a name="l02164"></a>02164                     (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(
<a name="l02165"></a>02165                         newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>, boolTest, boolVal);
<a name="l02166"></a>02166                }
<a name="l02167"></a>02167                <span class="comment">// only try left if we did not find on the right</span>
<a name="l02168"></a>02168                <span class="keywordflow">if</span>(retObj == NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>!=NULL &amp;&amp;
<a name="l02169"></a>02169                                     !<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l02170"></a>02170                     retObj =
<a name="l02171"></a>02171                     (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(newItr,
<a name="l02172"></a>02172                     <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>, boolTest, boolVal);
<a name="l02173"></a>02173                }
<a name="l02174"></a>02174             }
<a name="l02175"></a>02175          } <span class="comment">// end if node contains</span>
<a name="l02176"></a>02176         <span class="comment">// will return null if does not contain the data</span>
<a name="l02177"></a>02177         <span class="keywordflow">return</span> retObj;
<a name="l02178"></a>02178       }
<a name="l02179"></a>02179  
<a name="l02180"></a>02180 
<a name="l02181"></a>02181       <span class="comment">// Check if a node contains a datapoint</span>
<a name="l02182"></a>02182     <span class="comment">// it is assumed that the node will have a box</span>
<a name="l02183"></a>02183     <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l02184"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a803d11f31d86f0565dbe682a33099698">02184</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a803d11f31d86f0565dbe682a33099698" title="Check if the box a node represents contains a datapoint p.">SPSVnode::nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l02185"></a>02185                             <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd)<span class="keyword"> const</span>
<a name="l02186"></a>02186 <span class="keyword">    </span>{
<a name="l02187"></a>02187         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>; <span class="comment">// for the return value</span>
<a name="l02188"></a>02188 
<a name="l02189"></a>02189         <span class="comment">// cast p to an ivector</span>
<a name="l02190"></a>02190         ivector pvec = _ivector(p);
<a name="l02191"></a>02191 
<a name="l02192"></a>02192         <span class="comment">//find if p is in the box</span>
<a name="l02193"></a>02193         <span class="keywordflow">if</span> (pvec &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l02194"></a>02194             retValue = <span class="keyword">true</span>;
<a name="l02195"></a>02195         }
<a name="l02196"></a>02196 
<a name="l02197"></a>02197         <span class="comment">// if true and there is a parent and this is a left child,</span>
<a name="l02198"></a>02198         <span class="comment">// we need to check the split</span>
<a name="l02199"></a>02199         <span class="comment">// find what dimension the parent was split on and what</span>
<a name="l02200"></a>02200         <span class="comment">// the split value was</span>
<a name="l02201"></a>02201         <span class="comment">// pvector must be strictly less than parentSplitValue</span>
<a name="l02202"></a>02202         <span class="comment">// on the split dimension</span>
<a name="l02203"></a>02203         <span class="keywordflow">if</span> (retValue &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>!=NULL &amp;&amp; childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>) {
<a name="l02204"></a>02204 
<a name="l02205"></a>02205             <span class="keywordtype">int</span> parentSplitDim = (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">getParent</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac" title="Accessor for the split dimension.">getSplitDim</a>();
<a name="l02206"></a>02206             real parentSplitValue = (<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">getParent</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420" title="Accessor for the split value.">getSplitValue</a>();
<a name="l02207"></a>02207 
<a name="l02208"></a>02208             <span class="keywordflow">if</span> (!(p[parentSplitDim] &lt; parentSplitValue)) {
<a name="l02209"></a>02209             retValue = <span class="keyword">false</span>;
<a name="l02210"></a>02210             }
<a name="l02211"></a>02211         }
<a name="l02212"></a>02212 
<a name="l02213"></a>02213         <span class="keywordflow">return</span> retValue;
<a name="l02214"></a>02214     }
<a name="l02215"></a>02215 
<a name="l02216"></a>02216     <span class="comment">// add two non-minimal pavings in a union operation,</span>
<a name="l02217"></a>02217     <span class="comment">// return a pointer to a new non-minimal paving</span>
<a name="l02218"></a>02218     <span class="comment">// but with no data attached to it - up to the manager to add data</span>
<a name="l02219"></a>02219     <span class="comment">// label will be 0</span>
<a name="l02220"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad61518c409809cca73c262dbd17d320f">02220</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad61518c409809cca73c262dbd17d320f">SPSVnode:: unionTreeStructure</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l02221"></a>02221                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)
<a name="l02222"></a>02222     {
<a name="l02223"></a>02223         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* newNode = NULL;
<a name="l02224"></a>02224 
<a name="l02225"></a>02225         <span class="keywordflow">if</span> ((lhs != NULL) &amp;&amp; (rhs != NULL) &amp;&amp; (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l02226"></a>02226         {
<a name="l02227"></a>02227             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Union unequal subpavings&quot;</span>);
<a name="l02228"></a>02228         }
<a name="l02229"></a>02229         <span class="keywordflow">else</span> {
<a name="l02230"></a>02230             <span class="keywordflow">try</span> {
<a name="l02231"></a>02231 
<a name="l02232"></a>02232                 newNode = <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ab79e2b1aa783e2df56abf8279c5dc564">unionNoData</a>(lhs, rhs);
<a name="l02233"></a>02233                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l02234"></a>02234             }
<a name="l02235"></a>02235             <span class="keywordflow">catch</span> (bad_alloc&amp; a) {
<a name="l02236"></a>02236                 cerr &lt;&lt; a.what() &lt;&lt; endl;
<a name="l02237"></a>02237                 cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l02238"></a>02238                 <span class="keywordflow">throw</span>;
<a name="l02239"></a>02239             }
<a name="l02240"></a>02240             <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
<a name="l02241"></a>02241                 <span class="keywordtype">string</span> msg(e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02242"></a>02242                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in union: original error &quot;</span> + msg);
<a name="l02243"></a>02243             }
<a name="l02244"></a>02244         }
<a name="l02245"></a>02245 
<a name="l02246"></a>02246         <span class="keywordflow">return</span> newNode;
<a name="l02247"></a>02247 
<a name="l02248"></a>02248     }
<a name="l02249"></a>02249 
<a name="l02250"></a>02250 } <span class="comment">// end namespace subpavings</span>
<a name="l02251"></a>02251 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spsvnode_8cpp.shtml">spsvnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
