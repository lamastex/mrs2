<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: nodecompobj.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('nodecompobj_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">nodecompobj.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="nodecompobj_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">* </span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___SPSNODECOMP_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___SPSNODECOMP_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">// to use MaxDiam</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>subpavings {
<a name="l00033"></a>00033 
<a name="l00035"></a>00035     <span class="keyword">class </span>SPSnode;
<a name="l00036"></a>00036     
<a name="l00043"></a><a class="code" href="classsubpavings_1_1NodeCompObj.shtml">00043</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a> {
<a name="l00044"></a>00044 
<a name="l00045"></a>00045         <span class="keyword">public</span>:
<a name="l00046"></a>00046 
<a name="l00048"></a>00048         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml#a121d53049c5ed1c0924313951d6aa630">operator() </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00049"></a>00049                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs) <span class="keyword">const</span> = 0;
<a name="l00050"></a>00050     };
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00059"></a><a class="code" href="classsubpavings_1_1CompCount.shtml">00059</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00060"></a>00060     {
<a name="l00061"></a><a class="code" href="classsubpavings_1_1CompCount.shtml#a5c54d25893dc9d280a13fe91ee4af5ec">00061</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCount.shtml#a5c54d25893dc9d280a13fe91ee4af5ec">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00062"></a>00062                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00063"></a>00063 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()); }
<a name="l00064"></a>00064     };
<a name="l00065"></a>00065 
<a name="l00068"></a><a class="code" href="classsubpavings_1_1CompVol.shtml">00068</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00069"></a>00069     {
<a name="l00070"></a><a class="code" href="classsubpavings_1_1CompVol.shtml#a6536133bf17bcc1c37b5e6f15fa6d175">00070</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompVol.shtml#a6536133bf17bcc1c37b5e6f15fa6d175">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00071"></a>00071                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00072"></a>00072 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()); }
<a name="l00073"></a>00073     };
<a name="l00074"></a>00074 
<a name="l00089"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml">00089</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml" title="Class comparing change in EMP under COPERR from splitting 2 nodes.">CompEMPSumChangeCOPERR</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00090"></a>00090     {
<a name="l00091"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml#ac17c58f07320c227e1baf9b968445e2f">00091</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml#ac17c58f07320c227e1baf9b968445e2f">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00092"></a>00092                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00093"></a>00093 <span class="keyword">        </span>{
<a name="l00094"></a>00094             <span class="keywordtype">size_t</span> nLhs = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00095"></a>00095             <span class="keywordtype">size_t</span> nRhs = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00096"></a>00096 
<a name="l00097"></a>00097             <span class="keywordflow">return</span> (rnd(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">getSplitChangeEMPCOPERR</a>(nLhs)) &gt;
<a name="l00098"></a>00098                             rnd(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">getSplitChangeEMPCOPERR</a>(nRhs)));
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100     };
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00117"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml">00117</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml" title="Class comparing change in EMP under AIC from splitting 2 nodes.">CompEMPSumChangeAIC</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00118"></a>00118     {
<a name="l00119"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml#aeea99de2697cb8c31c4a6e31556f8356">00119</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml#aeea99de2697cb8c31c4a6e31556f8356">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00120"></a>00120                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00121"></a>00121 <span class="keyword">        </span>{
<a name="l00122"></a>00122             <span class="keywordflow">return</span> (rnd(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">getSplitChangeEMPAIC</a>()) &gt;
<a name="l00123"></a>00123                         rnd(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">getSplitChangeEMPAIC</a>()));
<a name="l00124"></a>00124         }
<a name="l00125"></a>00125     };
<a name="l00126"></a>00126 
<a name="l00143"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeCOPERR.shtml">00143</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeCOPERR.shtml" title="Class comparing change in EMP under COPERR from merging 2 nodes.">CompEMPSumChangeMergeCOPERR</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00144"></a>00144     {
<a name="l00145"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeCOPERR.shtml#a74068f89bb79484997ef9819ebdb0e5b">00145</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeCOPERR.shtml#a74068f89bb79484997ef9819ebdb0e5b">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00146"></a>00146                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00147"></a>00147 <span class="keyword">        </span>{
<a name="l00148"></a>00148             <span class="keywordtype">size_t</span> nLhs = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00149"></a>00149             <span class="keywordtype">size_t</span> nRhs = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00150"></a>00150 
<a name="l00151"></a>00151             <span class="keywordflow">return</span> (rnd(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(nLhs)) &lt;
<a name="l00152"></a>00152                             rnd(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(nRhs)));
<a name="l00153"></a>00153         }
<a name="l00154"></a>00154     };
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00173"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml">00173</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml" title="Class comparing change in EMP under AIC from merging 2 nodes.">CompEMPSumChangeMergeAIC</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00174"></a>00174     {
<a name="l00175"></a><a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml#a85af532940cbe2ccfdd277e2eea682eb">00175</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml#a85af532940cbe2ccfdd277e2eea682eb">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00176"></a>00176                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00177"></a>00177 <span class="keyword">        </span>{
<a name="l00178"></a>00178             <span class="keywordflow">return</span> (rnd(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>()) &lt;
<a name="l00179"></a>00179                         rnd(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>()));
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181     };
<a name="l00182"></a>00182 
<a name="l00186"></a><a class="code" href="classsubpavings_1_1CompNothing.shtml">00186</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompNothing.shtml" title="Class comparing nodes to give no change in ordering.">CompNothing</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00187"></a>00187     {
<a name="l00188"></a><a class="code" href="classsubpavings_1_1CompNothing.shtml#a61b201695d7212edb08504c0127b4f65">00188</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompNothing.shtml#a61b201695d7212edb08504c0127b4f65">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00189"></a>00189                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00190"></a>00190 <span class="keyword">        </span>{
<a name="l00191"></a>00191             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00192"></a>00192         }
<a name="l00193"></a>00193     };
<a name="l00194"></a>00194    
<a name="l00197"></a><a class="code" href="classsubpavings_1_1CompHeight.shtml">00197</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHeight.shtml" title="Class comparing on count/volume (ie histogram height) of box of node.">CompHeight</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00198"></a>00198     {
<a name="l00199"></a><a class="code" href="classsubpavings_1_1CompHeight.shtml#a28bfee172ba99fc11db08cedc61db733">00199</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHeight.shtml#a28bfee172ba99fc11db08cedc61db733">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00200"></a>00200                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00201"></a>00201 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() 
<a name="l00202"></a>00202           &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()); }
<a name="l00203"></a>00203     };
<a name="l00204"></a>00204     
<a name="l00205"></a>00205     <span class="comment">//gat41</span>
<a name="l00208"></a><a class="code" href="classsubpavings_1_1CompArea.shtml">00208</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00209"></a>00209     {
<a name="l00210"></a><a class="code" href="classsubpavings_1_1CompArea.shtml#a8246a4db51101728675b010f57d68837">00210</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompArea.shtml#a8246a4db51101728675b010f57d68837">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00211"></a>00211                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00212"></a>00212 <span class="keyword">      </span>{ 
<a name="l00213"></a>00213         <span class="keywordtype">size_t</span> n = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00214"></a>00214         
<a name="l00215"></a>00215         cxsc::interval lCount = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00216"></a>00216         cxsc::interval rCount = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00217"></a>00217         
<a name="l00218"></a>00218         cxsc::interval lVol = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00219"></a>00219         cxsc::interval rVol = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00220"></a>00220         
<a name="l00221"></a>00221         cxsc::interval lMassVol = lCount * lVol;
<a name="l00222"></a>00222         cxsc::interval rMassVol = rCount * rVol;
<a name="l00223"></a>00223        
<a name="l00224"></a>00224         cxsc::real lMid = mid(lMassVol);
<a name="l00225"></a>00225         cxsc::real rMid = mid(rMassVol);
<a name="l00226"></a>00226         
<a name="l00227"></a>00227         <span class="comment">/*</span>
<a name="l00228"></a>00228 <span class="comment">        std::cout &lt;&lt; n &lt;&lt; std::endl;</span>
<a name="l00229"></a>00229 <span class="comment">        std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; std::endl;</span>
<a name="l00230"></a>00230 <span class="comment">        std::cout &lt;&lt; lCount &lt;&lt; &quot;\t&quot; &lt;&lt; rCount &lt;&lt; std::endl;</span>
<a name="l00231"></a>00231 <span class="comment">        std::cout &lt;&lt; lVol &lt;&lt; &quot;\t&quot; &lt;&lt; rVol &lt;&lt; std::endl;</span>
<a name="l00232"></a>00232 <span class="comment">        std::cout &lt;&lt; lMassVol &lt;&lt; &quot;\t&quot; &lt;&lt; rMassVol &lt;&lt; std::endl;</span>
<a name="l00233"></a>00233 <span class="comment">        std::cout &lt;&lt; lMid &lt;&lt; &quot;\t&quot; &lt;&lt; rMid &lt;&lt; std::endl;</span>
<a name="l00234"></a>00234 <span class="comment">        */</span>
<a name="l00235"></a>00235         
<a name="l00236"></a>00236         <span class="keywordflow">return</span> ( (lMid &lt; rMid) );
<a name="l00237"></a>00237         <span class="comment">//return ( (lhs-&gt;getCounter()*1.0) * lhs-&gt;nodeVolume() </span>
<a name="l00238"></a>00238         <span class="comment">//      &lt; (rhs-&gt;getCounter()*1.0) * rhs-&gt;nodeVolume()); </span>
<a name="l00239"></a>00239     }
<a name="l00240"></a>00240   };
<a name="l00241"></a>00241    
<a name="l00242"></a>00242   <span class="comment">//gat41</span>
<a name="l00245"></a><a class="code" href="classsubpavings_1_1CompExtArea.shtml">00245</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompExtArea.shtml" title="Class comparing the &quot;extended&quot;area of a histogram.">CompExtArea</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00246"></a>00246     {
<a name="l00247"></a><a class="code" href="classsubpavings_1_1CompExtArea.shtml#aad6bf360d9d1e6b4b44bccbba839d6c2">00247</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompExtArea.shtml#aad6bf360d9d1e6b4b44bccbba839d6c2">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00248"></a>00248                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00249"></a>00249 <span class="keyword">      </span>{ 
<a name="l00250"></a>00250         <span class="keywordtype">size_t</span> n = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00251"></a>00251         
<a name="l00252"></a>00252         cxsc::interval lCount = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00253"></a>00253         cxsc::interval rCount = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00254"></a>00254         
<a name="l00255"></a>00255         cxsc::interval lVol = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00256"></a>00256         cxsc::interval rVol = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00257"></a>00257         
<a name="l00258"></a>00258         cxsc::interval lMassVol = lCount * lVol *lVol;
<a name="l00259"></a>00259         cxsc::interval rMassVol = rCount * rVol * rVol;
<a name="l00260"></a>00260        
<a name="l00261"></a>00261         cxsc::real lMid = mid(lMassVol);
<a name="l00262"></a>00262         cxsc::real rMid = mid(rMassVol);
<a name="l00263"></a>00263 
<a name="l00264"></a>00264         <span class="keywordflow">return</span> ( (lMid &lt; rMid) );
<a name="l00265"></a>00265         <span class="comment">//return ( (lhs-&gt;getCounter()*1.0) * lhs-&gt;nodeVolume() </span>
<a name="l00266"></a>00266         <span class="comment">//      &lt; (rhs-&gt;getCounter()*1.0) * rhs-&gt;nodeVolume()); </span>
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268   };
<a name="l00269"></a>00269    
<a name="l00270"></a>00270     <span class="comment">//gat41</span>
<a name="l00274"></a><a class="code" href="classsubpavings_1_1CompMean.shtml">00274</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompMean.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean.">CompMean</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00275"></a>00275     {
<a name="l00276"></a><a class="code" href="classsubpavings_1_1CompMean.shtml#a34ecf892bad19d5c794d13ce808efda5">00276</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompMean.shtml#a34ecf892bad19d5c794d13ce808efda5">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00277"></a>00277                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00278"></a>00278 <span class="keyword">      </span>{ 
<a name="l00279"></a>00279       <span class="comment">//std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00280"></a>00280       <span class="comment">//std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00281"></a>00281       <span class="comment">//std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00282"></a>00282       
<a name="l00283"></a>00283       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()) &lt; 
<a name="l00284"></a>00284             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()) );
<a name="l00285"></a>00285     }
<a name="l00286"></a>00286   }; 
<a name="l00287"></a>00287    
<a name="l00288"></a>00288     <span class="comment">//gat41</span>
<a name="l00292"></a><a class="code" href="classsubpavings_1_1CompMeanMass.shtml">00292</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompMeanMass.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMass</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00293"></a>00293     {
<a name="l00294"></a><a class="code" href="classsubpavings_1_1CompMeanMass.shtml#a160308bb8acb75a4c8efe4bae9efc962">00294</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompMeanMass.shtml#a160308bb8acb75a4c8efe4bae9efc962">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00295"></a>00295                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00296"></a>00296 <span class="keyword">      </span>{ 
<a name="l00297"></a>00297       <span class="comment">//std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00298"></a>00298       <span class="comment">//std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00299"></a>00299       <span class="comment">//std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00300"></a>00300 
<a name="l00301"></a>00301       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00302"></a>00302             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00303"></a>00303     }
<a name="l00304"></a>00304   }; 
<a name="l00305"></a>00305    
<a name="l00306"></a>00306         <span class="comment">//gat41</span>
<a name="l00310"></a><a class="code" href="classsubpavings_1_1CompCovar.shtml">00310</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCovar.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovar</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00311"></a>00311     {
<a name="l00312"></a><a class="code" href="classsubpavings_1_1CompCovar.shtml#ad0aa69ba754de16c776d3dcf7e415495">00312</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCovar.shtml#ad0aa69ba754de16c776d3dcf7e415495">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00313"></a>00313                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00314"></a>00314 <span class="keyword">      </span>{ 
<a name="l00315"></a>00315       <span class="comment">//std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00316"></a>00316       <span class="comment">//std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00317"></a>00317       <span class="comment">//std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()) &lt; 
<a name="l00320"></a>00320             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()) );
<a name="l00321"></a>00321     }
<a name="l00322"></a>00322   }; 
<a name="l00323"></a>00323    
<a name="l00324"></a>00324       <span class="comment">//gat41</span>
<a name="l00328"></a><a class="code" href="classsubpavings_1_1CompCovarMass.shtml">00328</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCovarMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarMass</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00329"></a>00329     {
<a name="l00330"></a><a class="code" href="classsubpavings_1_1CompCovarMass.shtml#a3207e61acd3b49bcd678a46870c89766">00330</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCovarMass.shtml#a3207e61acd3b49bcd678a46870c89766">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00331"></a>00331                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00332"></a>00332 <span class="keyword">      </span>{ 
<a name="l00333"></a>00333       <span class="comment">//std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00334"></a>00334       <span class="comment">//std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getChebDistMean() &lt;&lt; std::endl;</span>
<a name="l00335"></a>00335       <span class="comment">//std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00336"></a>00336 
<a name="l00337"></a>00337       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00338"></a>00338             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00339"></a>00339     }
<a name="l00340"></a>00340   }; 
<a name="l00341"></a>00341    
<a name="l00342"></a>00342   <span class="comment">//gat41</span>
<a name="l00346"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1D.shtml">00346</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1D.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1D</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00347"></a>00347     {
<a name="l00348"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1D.shtml#a557adaeb83fb64c6f1a290fa31147ec8">00348</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1D.shtml#a557adaeb83fb64c6f1a290fa31147ec8">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00349"></a>00349                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00350"></a>00350 <span class="keyword">      </span>{ 
<a name="l00351"></a>00351       <span class="comment">/*std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D() &lt;&lt; std::endl;</span>
<a name="l00352"></a>00352 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D() &lt;&lt; std::endl;</span>
<a name="l00353"></a>00353 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00354"></a>00354 <span class="comment">      */</span>
<a name="l00355"></a>00355       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()) &lt; 
<a name="l00356"></a>00356             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()) );
<a name="l00357"></a>00357     }
<a name="l00358"></a>00358   }; 
<a name="l00359"></a>00359    
<a name="l00360"></a>00360    <span class="comment">//gat41</span>
<a name="l00364"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml">00364</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMass</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00365"></a>00365     {
<a name="l00366"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml#a9b8a611439eef8ab2cb3c71315b2cf5f">00366</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml#a9b8a611439eef8ab2cb3c71315b2cf5f">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00367"></a>00367                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00368"></a>00368 <span class="keyword">      </span>{ 
<a name="l00369"></a>00369       <span class="comment">/*</span>
<a name="l00370"></a>00370 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00371"></a>00371 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00372"></a>00372 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00373"></a>00373 <span class="comment">      */</span>
<a name="l00374"></a>00374       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00375"></a>00375             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00376"></a>00376     }
<a name="l00377"></a>00377   }; 
<a name="l00378"></a>00378   
<a name="l00379"></a>00379   <span class="comment">//gat41</span>
<a name="l00383"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml">00383</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiam</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00384"></a>00384     {
<a name="l00385"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml#aa5d0f459f73a7c5abb7c3c47b846a7a7">00385</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml#aa5d0f459f73a7c5abb7c3c47b846a7a7">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00386"></a>00386                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00387"></a>00387 <span class="keyword">      </span>{ 
<a name="l00388"></a>00388       <span class="comment">/*</span>
<a name="l00389"></a>00389 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00390"></a>00390 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00391"></a>00391 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00392"></a>00392 <span class="comment">      */</span>
<a name="l00393"></a>00393        <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l00394"></a>00394           <span class="comment">// find the maximum diameter, put the max dimension into maxdiamcomp</span>
<a name="l00395"></a>00395           <span class="keywordtype">double</span> maxDiamL = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00396"></a>00396           <span class="keywordtype">double</span> maxDiamR = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00397"></a>00397             
<a name="l00398"></a>00398       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamL) &lt; 
<a name="l00399"></a>00399             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamR) );
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401   }; 
<a name="l00402"></a>00402   
<a name="l00403"></a>00403      <span class="comment">//gat41</span>
<a name="l00407"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMass.shtml">00407</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDistMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMass</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00408"></a>00408     {
<a name="l00409"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMass.shtml#a794cd9023bb26a82015aff89492e9cca">00409</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDistMass.shtml#a794cd9023bb26a82015aff89492e9cca">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00410"></a>00410                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00411"></a>00411 <span class="keyword">      </span>{ 
<a name="l00412"></a>00412       <span class="comment">/*</span>
<a name="l00413"></a>00413 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00414"></a>00414 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00415"></a>00415 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00416"></a>00416 <span class="comment">      */</span>
<a name="l00417"></a>00417       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00418"></a>00418             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00419"></a>00419     }
<a name="l00420"></a>00420   }; 
<a name="l00421"></a>00421   
<a name="l00422"></a>00422   <span class="comment">//gat41</span>
<a name="l00426"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiam.shtml">00426</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiam.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMassDiam</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00427"></a>00427     {
<a name="l00428"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiam.shtml#a45fc3314836372332027716de71698b5">00428</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDistMassDiam.shtml#a45fc3314836372332027716de71698b5">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00429"></a>00429                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00430"></a>00430 <span class="keyword">      </span>{ 
<a name="l00431"></a>00431       <span class="comment">/*</span>
<a name="l00432"></a>00432 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00433"></a>00433 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00434"></a>00434 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00435"></a>00435 <span class="comment">      */</span>
<a name="l00436"></a>00436        <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l00437"></a>00437           <span class="comment">// find the maximum diameter, put the max dimension into maxdiamcomp</span>
<a name="l00438"></a>00438           <span class="keywordtype">double</span> maxDiamL = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00439"></a>00439           <span class="keywordtype">double</span> maxDiamR = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00440"></a>00440             
<a name="l00441"></a>00441       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamL) &lt; 
<a name="l00442"></a>00442             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamR) );
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444   }; 
<a name="l00445"></a>00445   
<a name="l00446"></a>00446   <span class="comment">//gat41</span>
<a name="l00449"></a><a class="code" href="classsubpavings_1_1CompVolInv.shtml">00449</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompVolInv.shtml" title="Class comparing volume multiplied with the inverse of the empirical mass.">CompVolInv</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>
<a name="l00450"></a>00450     {
<a name="l00451"></a><a class="code" href="classsubpavings_1_1CompVolInv.shtml#a9b031c839c3c330e4fcaa105c49975a6">00451</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompVolInv.shtml#a9b031c839c3c330e4fcaa105c49975a6">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00452"></a>00452                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00453"></a>00453 <span class="keyword">      </span>{   
<a name="l00454"></a>00454         cxsc::interval lCount = interval(1.0/(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()));
<a name="l00455"></a>00455         cxsc::interval rCount = interval(1.0/(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>()));
<a name="l00456"></a>00456         
<a name="l00457"></a>00457         cxsc::interval lVol = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00458"></a>00458         cxsc::interval rVol = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00459"></a>00459         
<a name="l00460"></a>00460         cxsc::interval lMassVol = lCount * lVol;
<a name="l00461"></a>00461         cxsc::interval rMassVol = rCount * rVol;
<a name="l00462"></a>00462        
<a name="l00463"></a>00463         cxsc::real lMid = mid(lMassVol);
<a name="l00464"></a>00464         cxsc::real rMid = mid(rMassVol);
<a name="l00465"></a>00465     }
<a name="l00466"></a>00466    }; 
<a name="l00467"></a>00467   
<a name="l00468"></a>00468   
<a name="l00469"></a>00469   
<a name="l00470"></a>00470   
<a name="l00472"></a>00472 }
<a name="l00473"></a>00473 
<a name="l00474"></a>00474 <span class="preprocessor">#endif</span>
<a name="l00475"></a>00475 <span class="preprocessor"></span>
<a name="l00476"></a>00476 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="nodecompobj_8hpp.shtml">nodecompobj.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
