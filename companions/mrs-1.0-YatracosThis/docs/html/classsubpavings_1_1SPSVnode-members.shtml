<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1SPSVnode.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::SPSVnode Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e">_reshapeToUnion</a>(const SPnode *const other)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#acae5407bbd325c9c4852c5a77304cee9">_reshapeToUnion</a>(const SPnode *const other, size_t minChildPoints, const std::string &amp;errorFilename)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3">accept</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe">acceptSPCheckVisitor</a>(const SPCheckVisitor &amp;visitor) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678">checkTreeStateLegal</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a48e85710afe1e6b7f4d63afa891d4e38">checkTreeStateLegal</a>(size_t minChildPoints, double minVol) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ae6a71f8266d023f98489dafcc56d3819">checkTreeStateLegal</a>(size_t minChildPoints)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#af7739cf5333fccbe27610cbbd1138719">clearData</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591">collectRange</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5">counter</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02">countsOnly</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8">dataItrs</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a> enum value</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e">dimension</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78">dpSumProducts</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643">dpSums</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#af35e25f257c98de51097428419d0cf81">dpVSumProducts</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a60f29b9bd7f1a448515c5465e5f7f1ba">dpVSums</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1">gatherData</a>(NodeData &amp;container, SPSVnode *spn)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf">getAllNodes</a>(SPSVnodePtrs &amp;allNodes) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a0e8b9126a14255276600bf5293d33e24">getBestMergeChangeEMPAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a7cf8fbd3c03d1edeedbd5a793c9b822d">getBestMergeChangeEMPCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a53b9e7117d36f7730d458f26d74e0d28">getBestSplitChangeEMPAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4">getBestSplitChangeEMPCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac">getBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e">getChebDistCovar</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3">getChebDistMean</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5">getChildNodeNames</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ad1e930cb7befb42cd1985e91f3ddd9b6">getChildrensLeftAndRightCountsIfSplit</a>(Size_tVec &amp;grandchildCounts) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897">getConstSPnodeLeaves</a>(SPnodeConstPtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3">getCounter</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a4285801767cd577432a0b13cdbdaba43">getCountsOnly</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a">getData</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864">getDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b">getDimension</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#aa939623d58172bc7f24ddf5dd249b5c2">getEMPContributionAIC</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a483f3b91707cda0deaee7a05d0523f3b">getEMPContributionCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f">getEmpMass</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15">getEMPSumAIC</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278">getEMPSumCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e">getHellingerDist</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a899334f4e1760a380a776bc38d664710">getJustSplit</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e">getLabel</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#adfb30c9946f868e143c81e6bf35a7a6f">getLargestLeafCount</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae">getLargestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">getLeafNodeCounts</a>(Size_tVec &amp;counts) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b">getLeafNodeLevels</a>(IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab2d91d997064dccc3c1a6f80bd27c6ef">getLeafNodeLevels</a>(const int level, IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7">getLeafNodeLevelsJ</a>(IntVec &amp;levels, int level=0) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72">getLeafNodeLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5">getLeafNodeVolumes</a>(RealVec &amp;vols) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508">getLeaves</a>(SPSVnodePtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2">getLeftChild</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a64b5d63790c02a454aa0e86222b1a3d3">getLeftCountIfSplit</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5">getLogLik</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f">getMean</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19">getMergeChangeEMPAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585">getMergeChangeEMPCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef">getMergeChangeLogLik</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7">getMinChildCountIfSplit</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a3df75e24c4a3a468b63f79667645c1dc">getMinChildCountIfSplitNEW</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#abd4de519f005b145ef131f0c9d4331a0">getMinChildVolIfSplit</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81">getNodeDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db">getNodeName</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23">getNumberLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3">getParent</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42">getRightChild</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af">getRightCountIfSplit</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18">getRootCounter</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1">getRootVcounter</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a5d355f8da3eb609f5c81ce63b437fcf9">getSmallestLeafCount</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d">getSmallestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408">getSplitChangeEMPAIC</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c">getSplitChangeEMPCOPERR</a>(const size_t n) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433">getSplitChangeLogLik</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac">getSplitDim</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420">getSplitValue</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878">getSPnodeLeaves</a>(SPnodePtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb">getSubLeaves</a>(SPSVnodePtrs &amp;subleaves) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ac741a9772d992ba74911cf692e1ed772">getSumLeafCountOverVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3">getUniformMean</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ab1f050670fdcdc6f68e009a0cba0ed35">getUniformVarCovar</a>(RealVec &amp;varCovar) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a61adf71c4652c4ec29a9dc323174d1a3">getVarCovar</a>(RealVec &amp;varCovar) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a">getVcounter</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a05d47c013af462f857c6f54b20cb3404">getVdata</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad">hasLCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e">hasLeafSibling</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa">hasRCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5e79ff65a692b09c98ff53264ddfba9f">ImageSp</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#adda5afc72873dc3875f341ecbb947b23">ImageSpNonMinimal</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135">insertOneFind</a>(BigDataItr newItr, OPERATIONS_ON childInd, const SplitDecisionObj &amp;boolTest, bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18">subpavings::SPSnode::insertOneFind</a>(BigDataItr newItr, OPERATIONS_ON childInd, const SplitDecisionObj &amp;boolTest)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593">isEmpty</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7">isLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>() const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#af8f9559a17318b187769c20e85316135">isSplittableNode</a>(size_t minChildPoints, double minVol) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#acba45b1fe208f6218a87400eb454b28d">isSplittableNode</a>(size_t minChildPoints) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc">isSubLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951">justSplit</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb">label</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a01b35db8ce4b99460ff352f6d25a529c">leafOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a2ab7acc0aff92694976546f1555f67ed">leafOutputTabsWithEMPs</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a6eff83d7095798158c0bc17ee70e54c0">leafOutputTabsWithHistHeight</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a4ed4d26826f77814558a0ad3770582f4">leafOutputTabsWithHistHeightAndEMPs</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518">leavesOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac0d9484691c21a316308b4713e6e8bba">subpavings::SPnode::leavesOutputTabs</a>(std::ostream &amp;os, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb">leavesOutputTabsWithEMPs</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf">leavesOutputTabsWithHistHeight</a>(std::ostream &amp;os, const int prec) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a8419f16a2f0667bc190a4a9ed41121c1">leavesOutputTabsWithHistHeight</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a">leavesOutputTabsWithHistHeightAndEMPs</a>(const size_t bigN, std::ostream &amp;os, const int prec=5) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646">leftChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a69cbe84e4c59cd1369d3900d3ff05a01">makeEmptyNode</a>()</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93">makeTreeFromLeaves</a>(ivector &amp;root, ImageList &amp;leafList)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08">makeTreeFromVoxels</a>(ivector &amp;root, ImageList &amp;leafList, double spacing, size_t dim)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f">nodeAddLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26">nodeAddRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a928db3d7b687a9fb5d50fa135f51b040">nodeAdoptLeft</a>(SPSVnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ae1d11e62b133e13be6c14f7ff759f152">subpavings::SPSnode::nodeAdoptLeft</a>(SPSnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16">subpavings::SPnode::nodeAdoptLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a33d64bef2bd9dd7f430b732719eab71d">nodeAdoptRight</a>(SPSVnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a4049a0078541b24d5451957f6f7dcd68">subpavings::SPSnode::nodeAdoptRight</a>(SPSnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676">subpavings::SPnode::nodeAdoptRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a803d11f31d86f0565dbe682a33099698">nodeContains</a>(const rvector &amp;p, OPERATIONS_ON childInd) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a5868a7661363e2f3bd7d2e267c22ceb1">nodeDataPrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a94c33927011a8d2613d40ccf6ccfafc1">nodeExpand</a>(int comp)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#acbad110f9ed41364774c9e2fea658594">nodeExpand</a>(const SplitDecisionObj &amp;boolTest, int comp)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8">nodeExpand</a>()</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ada1ce5002ee4985a22d35d8cb651d191">nodeExpand</a>(const SplitDecisionObj &amp;boolTest, bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a4846c8d9c7d29d0f0850a7a9c30eec2b">nodeExpand</a>(bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a19a54cd8f89112dbed3f43c2f405921f">subpavings::SPSnode::nodeExpand</a>(const SplitDecisionObj &amp;boolTest)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4">nodeExpansionOnly</a>(int comp)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a768f9507517be618970d19874b1ff992">nodeMeanPrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610">nodeName</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a51715ef7b6e370006e914fee15061cfc">nodePrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30">nodeReabsorbChildren</a>()</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347">nodeRealVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a5abf598ead77d94aa130a8a7bf78f1f7">nodeReunite</a>(SPSVnode *lChild, SPSVnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a61c584952df4fa77109cb4bb9b46f657">subpavings::SPSnode::nodeReunite</a>(SPSnode *lChild, SPSnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc">subpavings::SPnode::nodeReunite</a>(SPnode *lChild, SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(std::ostream &amp;os, int level) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7408768856a7c988d9784b6172d74310">nodesAllOutput</a>(std::ostream &amp;os, int level, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a096bff1081ceb308590aac8f2f3ee660">nodeVarCovarPrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb">nodeVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ad4e310986c60dcebb3fd3c54dab19c33">operator=</a>(const SPSVnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a65971d98a726cba6cf111882f984de06">subpavings::SPSnode::operator=</a>(const SPSnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666">subpavings::SPnode::operator=</a>(const SPnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8">parent</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#af37c85866ee5bdb968faf84856b51291">recalculateStats</a>(rvector &amp;newdata, bool boolVal) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a3df955b69f0e3d73efd0ccc3026fe0e7">recalculateSumProducts</a>(rvector &amp;newdata) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a7590c8e3a8502b3b8a15bc2c4c494904">recalculateSums</a>(rvector &amp;newdata) const </td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e">recursiveRename</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2">reshapeToUnion</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#afe32d323547d5169b03ed9058922ac9d">reshapeToUnion</a>(const SPnode &amp;other, size_t minChildPoints)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd">rightChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db">setLabel</a>(int lab)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f">setNodeName</a>(std::string newname)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a5d6459ebf84a81b4759a3dd6524df4cf">setSplits</a>()</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93">Sivia</a>(PIBT BoolTest, const SPnode *const toInvert, SPnode *const search, const double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef">spaceIndication</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3">spContains</a>(const ivector &amp;z) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56f98ed5bc26b9b11dfce51f3e667e2b">spContains</a>(const rvector &amp;p) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">spLeafBoxDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">spLeafBoxIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">spLeafBoxOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad">splitData</a>(const SplitDecisionObj &amp;boolTest, bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154">splitDim</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b">splitLeft</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea">splitRootToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6">splitValue</a></td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54">SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad43955b79e832489150c70b6aa4e3f05">SPnode</a>(const ivector &amp;v)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#acd1241250563fcabfd1fc1d069e2065d">SPnode</a>(const LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a41d88bc0857db595850fd2c7f1a4fa">SPnode</a>(ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac91f261853f289d2ccf7102cd543a0d4">SPnode</a>(LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aeafa6189ea2d85037ab6579471a947be">SPnode</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988">spsContains</a>(ivector &amp;z, int countBox, int countInBox) const </td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5">SPSnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#abcddd86c703c7263435686a5f7ad42f5">SPSnode</a>(ivector &amp;v, bool cntOnly, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a51f7f0ed3dd43f8851556ea4a3cb4209">SPSnode</a>(ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a775af2d808a8a9a59f29e6c25b6f0e4f">SPSnode</a>(ivector &amp;v, size_t max, bool cntOnly, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ad8f8a441fe2406ef50dc3d1fb06cb5b9">SPSnode</a>(ivector &amp;v, size_t max, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#af4aa97973f8fac14503ec22574675a99">SPSnode</a>(LabBox &amp;lb, bool cntOnly=false)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a86d9a45e0f5a59b94d556279dafd92f9">SPSnode</a>(LabBox &amp;lb, size_t max, bool cntOnly=false)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a56a33f7824a42568a7c9535e2ed10c88">SPSnode</a>(const SPSnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52">SPSVnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a29413a70c5c7f01002665a8319971984">SPSVnode</a>(ivector &amp;v, bool cntOnly, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a4d33a48a0510f2988d17ae9c1f56eb1a">SPSVnode</a>(ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#aa91b89ffdb65468e88ab8cecf290a75d">SPSVnode</a>(ivector &amp;v, size_t max, bool cntOnly, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a62e88e96ee22be76109b387277ef6955">SPSVnode</a>(ivector &amp;v, size_t max, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a22251951e28c6876d4159e82bf2f36e1">SPSVnode</a>(LabBox &amp;lb, bool cntOnly=true)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0652f353916bda77708ed26053a21789">SPSVnode</a>(LabBox &amp;lb, size_t max, bool cntOnly=true)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ac34ad69da8e0f3894b74f4027de2614b">SPSVnode</a>(const SPSVnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">strippedConstructor</a>(const SPSVnode *const other)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">subpavings::SPSnode::strippedConstructor</a>(const SPSnode *const other)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb">swap</a>(SPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a8ce80cd650645f34e79fbc1d4beb2326">swapSPS</a>(SPSnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832">theBox</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ab79e2b1aa783e2df56abf8279c5dc564">unionNoData</a>(const SPSVnode *const lhs, const SPSVnode *const rhs)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#ad61518c409809cca73c262dbd17d320f">unionTreeStructure</a>(const SPSVnode *const lhs, const SPSVnode *const rhs)</td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSnode.shtml#a2dfb3087cff36fdf558bf75d5ee039c9">subpavings::SPSnode::unionTreeStructure</a>(const SPSnode *const lhs, const SPSnode *const rhs)</td><td><a class="el" href="classsubpavings_1_1SPSnode.shtml">subpavings::SPSnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12">Vcounter</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647">VdataItrs</a></td><td><a class="el" href="classsubpavings_1_1SPSVnode.shtml">subpavings::SPSVnode</a></td><td><code> [mutable, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(BoxVec &amp;boxes, ivector box1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">volDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">volIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">volOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa">vtkPaving</a>(const std::string filename)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef">~SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:42 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
