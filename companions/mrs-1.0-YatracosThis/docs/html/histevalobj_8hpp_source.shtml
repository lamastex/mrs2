<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: histevalobj.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('histevalobj_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">histevalobj.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="histevalobj_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef ___HISTEVAL_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define ___HISTEVAL_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// to use histogram penalty function objects</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histpenalty_8hpp.shtml" title="Declaration of classes for histogram penalty objects declarations.">histpenalty.hpp</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>subpavings {
<a name="l00033"></a>00033 
<a name="l00035"></a>00035 <span class="keyword">class </span>AdaptiveHistogram;
<a name="l00036"></a>00036 
<a name="l00039"></a><a class="code" href="classsubpavings_1_1HistEvalObj.shtml">00039</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a> {
<a name="l00040"></a>00040 
<a name="l00041"></a>00041     <span class="keyword">public</span>:
<a name="l00042"></a>00042 
<a name="l00044"></a>00044     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml#a56a8d23818446775d7e4ef24755425e9">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh) <span class="keyword">const</span> = 0;
<a name="l00045"></a>00045 };
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00059"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml">00059</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00060"></a>00060 {
<a name="l00061"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a74b86c92740d8f1d4d7a53338915a261">00061</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a74b86c92740d8f1d4d7a53338915a261">test</a>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a72728974580f84bd105dab9d3d0f28e3">CritLeaves_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="keyword">public</span>:
<a name="l00066"></a>00066 
<a name="l00067"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a4aa02516f172964f8f87b944d8816245">00067</a>     <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a4aa02516f172964f8f87b944d8816245">CritLeaves_GTE</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a74b86c92740d8f1d4d7a53338915a261">test</a>(t) {}
<a name="l00068"></a>00068 
<a name="l00070"></a>00070     <span class="keywordtype">bool</span> <span class="keyword">operator</span>()
<a name="l00071"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a7427f4b81f72996bd756d9f22bc8c330">00071</a>         (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh) <span class="keyword">const</span>
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073         <span class="keywordflow">return</span> (<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()) &gt;= <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml#a74b86c92740d8f1d4d7a53338915a261">test</a>);
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075 };
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00080"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml">00080</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00081"></a>00081 {
<a name="l00082"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a8fd26c00ab5b5b22f0620e0d32002256">00082</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a8fd26c00ab5b5b22f0620e0d32002256">test</a>;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a8d16f0386d2fd08810283a1c0b1b7910">CritLeaves_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="keyword">public</span>:
<a name="l00087"></a>00087 
<a name="l00088"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a9944c9e614b649ed5c6f11c6ba086d88">00088</a>     <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a9944c9e614b649ed5c6f11c6ba086d88">CritLeaves_LTE</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a8fd26c00ab5b5b22f0620e0d32002256">test</a>(t) {}
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a09d5d8f311bd0b811208e329a26514a5">00091</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a09d5d8f311bd0b811208e329a26514a5">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00092"></a>00092 <span class="keyword">    </span>{
<a name="l00093"></a>00093         <span class="keywordflow">return</span> (<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()) &lt;= <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml#a8fd26c00ab5b5b22f0620e0d32002256">test</a>);
<a name="l00094"></a>00094     }
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00100"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml">00100</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml" title="Class for testing the count of the node with the smallest count in histogram&#39;s subpaving.">CritSmallestCount_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00101"></a>00101 {
<a name="l00102"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a0fdd010902559f018f7af32955d1278e">00102</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a0fdd010902559f018f7af32955d1278e">test</a>;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#aa67c8d9c4f663a65148c9b59e0e469ec">CritSmallestCount_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     <span class="keyword">public</span>:
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#af102e109a7275a2d0634deb072f79b38">00108</a>     <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#af102e109a7275a2d0634deb072f79b38">CritSmallestCount_LTE</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a0fdd010902559f018f7af32955d1278e">test</a>(t) {}
<a name="l00109"></a>00109 
<a name="l00111"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a827ca361ea6386926931f7bb3f618797">00111</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a827ca361ea6386926931f7bb3f618797">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00112"></a>00112 <span class="keyword">    </span>{
<a name="l00113"></a>00113         <span class="keywordflow">return</span> (((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getSmallestLeafCount()) &lt;= <a class="code" href="classsubpavings_1_1CritSmallestCount__LTE.shtml#a0fdd010902559f018f7af32955d1278e">test</a>);
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 };
<a name="l00117"></a>00117 
<a name="l00121"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml">00121</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00122"></a>00122 {
<a name="l00123"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a3d345e059a93bb8d79dd0f54f6a194e3">00123</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a3d345e059a93bb8d79dd0f54f6a194e3">test</a>;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a0375fdc205ef93338f708f9b6cc95a64">CritLargestCount_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="keyword">public</span>:
<a name="l00128"></a>00128 
<a name="l00129"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#abcfc1d39ab65522211002e379937dba7">00129</a>     <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#abcfc1d39ab65522211002e379937dba7">CritLargestCount_LTE</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a3d345e059a93bb8d79dd0f54f6a194e3">test</a>(t) {}
<a name="l00130"></a>00130 
<a name="l00132"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a5b49847102d683709b9f4dbea40ff4a8">00132</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a5b49847102d683709b9f4dbea40ff4a8">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00133"></a>00133 <span class="keyword">    </span>{
<a name="l00134"></a>00134         <span class="keywordflow">return</span> (((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLargestLeafCount()) &lt;= <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml#a3d345e059a93bb8d79dd0f54f6a194e3">test</a>);
<a name="l00135"></a>00135     }
<a name="l00136"></a>00136 };
<a name="l00137"></a>00137 
<a name="l00141"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml">00141</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml" title="Class for testing the volume of the box with the smallest volume in the histogram&#39;s subpaving...">CritSmallestVol_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00142"></a>00142 {
<a name="l00143"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a61b7e3a23025883c2726228f34bfbaf9">00143</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a61b7e3a23025883c2726228f34bfbaf9">test</a>;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#ac5e228d5b9d2f5b6683eb1c2ab6e0359">CritSmallestVol_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <span class="keyword">public</span>:
<a name="l00148"></a>00148 
<a name="l00149"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a553cd69361518fbe49798993e640bc86">00149</a>     <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a553cd69361518fbe49798993e640bc86">CritSmallestVol_LTE</a>(<span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a61b7e3a23025883c2726228f34bfbaf9">test</a>(t) {}
<a name="l00150"></a>00150 
<a name="l00152"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#ab95576c1a6d7cf1f39ade29f44126212">00152</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#ab95576c1a6d7cf1f39ade29f44126212">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00153"></a>00153 <span class="keyword">    </span>{
<a name="l00154"></a>00154         <span class="keywordflow">return</span> ((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getSmallestLeafVol() &lt;= <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml#a61b7e3a23025883c2726228f34bfbaf9">test</a>);
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156 };
<a name="l00157"></a>00157 
<a name="l00161"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml">00161</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml" title="Class for testing the volume of the box with the largest volume in the histogram&#39;s subpaving...">CritLargestVol_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00162"></a>00162 {
<a name="l00163"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#ae4a0868c2ba9ef0f9937c738b747647d">00163</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#ae4a0868c2ba9ef0f9937c738b747647d">test</a>;
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#aa3dae0ecbe7732f2e52f3e8cd81a14dd">CritLargestVol_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="keyword">public</span>:
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#af34556390c9d49e2fcd9f4ea480f864a">00169</a>     <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#af34556390c9d49e2fcd9f4ea480f864a">CritLargestVol_LTE</a>(<span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#ae4a0868c2ba9ef0f9937c738b747647d">test</a>(t) {}
<a name="l00170"></a>00170 
<a name="l00172"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#a47c51f066e79dc7809b07e6e7e235aee">00172</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#a47c51f066e79dc7809b07e6e7e235aee">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00173"></a>00173 <span class="keyword">    </span>{
<a name="l00174"></a>00174         <span class="keywordflow">return</span> ((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getLargestLeafVol() &lt;= <a class="code" href="classsubpavings_1_1CritLargestVol__LTE.shtml#ae4a0868c2ba9ef0f9937c738b747647d">test</a>);
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176 };
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00184"></a><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml">00184</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml" title="Class for testing the change in COPERR score from splitting.">CritCOPERRChange_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00185"></a>00185 {
<a name="l00186"></a><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a271ec32d40ebe1dae73df5e346b05864">00186</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a271ec32d40ebe1dae73df5e346b05864">pen</a>;
<a name="l00187"></a><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a917da285fdf7ad2e6132f3ec9446dcd0">00187</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a917da285fdf7ad2e6132f3ec9446dcd0">test</a>;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189     <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#aa9af364ca5ff7d5dbcb41025f39d82fe">CritCOPERRChange_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="keyword">public</span>:
<a name="l00192"></a>00192 
<a name="l00193"></a><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a2f80e08de2ccaa3f5f1de19aef7fee08">00193</a>     <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a2f80e08de2ccaa3f5f1de19aef7fee08">CritCOPERRChange_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">double</span> t): <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a271ec32d40ebe1dae73df5e346b05864">pen</a>(p), <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a917da285fdf7ad2e6132f3ec9446dcd0">test</a>(t) {}
<a name="l00194"></a>00194 
<a name="l00197"></a><a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#ad08dfb82007a802cd298e97e7264bbe9">00197</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#ad08dfb82007a802cd298e97e7264bbe9">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00198"></a>00198 <span class="keyword">    </span>{
<a name="l00199"></a>00199         dotprecision best = adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4" title="Get best change in EMP under COPERR from splitting any leaf.">getBestSplitChangeEMPCOPERR</a>(
<a name="l00200"></a>00200                                 adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00201"></a>00201         real change = rnd(best) + <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a271ec32d40ebe1dae73df5e346b05864">pen</a>(adh, 1) - <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a271ec32d40ebe1dae73df5e346b05864">pen</a>(adh, 0);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203         <span class="keywordflow">return</span> (change &gt;= <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml#a917da285fdf7ad2e6132f3ec9446dcd0">test</a>);
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 };
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 
<a name="l00214"></a><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml">00214</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml" title="Class for testing the change in AIC score from splitting.">CritAICChange_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00215"></a>00215 {
<a name="l00216"></a><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#af7f6dc1d12c5c05c15cde02ea298dc32">00216</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#af7f6dc1d12c5c05c15cde02ea298dc32">pen</a>;
<a name="l00217"></a><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a117b0b39678df05205f5737ab6e42b92">00217</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a117b0b39678df05205f5737ab6e42b92">test</a>;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219     <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a716362b93906871088745553051dac22">CritAICChange_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keyword">public</span>:
<a name="l00222"></a>00222 
<a name="l00223"></a><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a41a080b895b5a5884173e0f307f2cf66">00223</a>     <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a41a080b895b5a5884173e0f307f2cf66">CritAICChange_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">double</span> t): <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#af7f6dc1d12c5c05c15cde02ea298dc32">pen</a>(p), <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a117b0b39678df05205f5737ab6e42b92">test</a>(t) {}
<a name="l00224"></a>00224 
<a name="l00227"></a><a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a39c3228add1aa1f3f6bba7148d3e0e1b">00227</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a39c3228add1aa1f3f6bba7148d3e0e1b">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00228"></a>00228 <span class="keyword">    </span>{
<a name="l00229"></a>00229         dotprecision best = adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a53b9e7117d36f7730d458f26d74e0d28" title="Get best change in EMP under AIC from splitting any leaf.">getBestSplitChangeEMPAIC</a>();
<a name="l00230"></a>00230         real change = rnd(best) + <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#af7f6dc1d12c5c05c15cde02ea298dc32">pen</a>(adh, 1) - <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#af7f6dc1d12c5c05c15cde02ea298dc32">pen</a>(adh, 0);
<a name="l00231"></a>00231 
<a name="l00232"></a>00232         <span class="keywordflow">return</span> (change &gt;= <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml#a117b0b39678df05205f5737ab6e42b92">test</a>);
<a name="l00233"></a>00233     }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 };
<a name="l00236"></a>00236 
<a name="l00239"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml">00239</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml" title="Class for testing change in COPERR or number leaves from splitting.">CritCOPERRChangeOrLeaves_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00240"></a>00240 {
<a name="l00241"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#aace4dfbb6cd41e2d27ded2e340f445bd">00241</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#aace4dfbb6cd41e2d27ded2e340f445bd">pen</a>;
<a name="l00242"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a11be9290c3893dab1f64af62b4482a18">00242</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a11be9290c3893dab1f64af62b4482a18">testLeaves</a>;
<a name="l00243"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a2743d2cdbbd6042afda9450aa97a7e2b">00243</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a2743d2cdbbd6042afda9450aa97a7e2b">testScore</a>;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#ac5ed0dbd25e03235938265ac2a03f4b5">CritCOPERRChangeOrLeaves_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     <span class="keyword">public</span>:
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#aa9e17dd1cd8fabbabffb9541e75fdf29">00249</a>     <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#ac5ed0dbd25e03235938265ac2a03f4b5">CritCOPERRChangeOrLeaves_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">size_t</span> tl, <span class="keywordtype">double</span> ts)
<a name="l00250"></a>00250                     : <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#aace4dfbb6cd41e2d27ded2e340f445bd">pen</a>(p), <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a11be9290c3893dab1f64af62b4482a18">testLeaves</a>(tl), <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a2743d2cdbbd6042afda9450aa97a7e2b">testScore</a>(ts)  {}
<a name="l00251"></a>00251 
<a name="l00254"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a596ce8ff433ffac12d110c1ee0a6faab">00254</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a596ce8ff433ffac12d110c1ee0a6faab">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00255"></a>00255 <span class="keyword">    </span>{
<a name="l00256"></a>00256         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeaves(<a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a11be9290c3893dab1f64af62b4482a18">testLeaves</a>);
<a name="l00257"></a>00257         <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml" title="Class for testing the change in COPERR score from splitting.">CritCOPERRChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#aace4dfbb6cd41e2d27ded2e340f445bd">pen</a>, <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLeaves__GTE.shtml#a2743d2cdbbd6042afda9450aa97a7e2b">testScore</a>);
<a name="l00258"></a>00258 
<a name="l00259"></a>00259         <span class="keywordflow">return</span> (critLeaves(adh) || critScore(adh));
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 };
<a name="l00263"></a>00263 
<a name="l00266"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml">00266</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml" title="Class for testing change in AIC or number leaves from splitting.">CritAICChangeOrLeaves_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00267"></a>00267 {
<a name="l00268"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a920999ec1b5f624dec19bf8a504a8253">00268</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a920999ec1b5f624dec19bf8a504a8253">pen</a>;
<a name="l00269"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad8960d95c624326914fb57574c3ecd6d">00269</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad8960d95c624326914fb57574c3ecd6d">testLeaves</a>;
<a name="l00270"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a9ee854413b520e9da587f5a37a0fab6b">00270</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a9ee854413b520e9da587f5a37a0fab6b">testScore</a>;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272     <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a799c8c75625120ce151f39791a18f420">CritAICChangeOrLeaves_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00273"></a>00273 
<a name="l00274"></a>00274     <span class="keyword">public</span>:
<a name="l00275"></a>00275 
<a name="l00276"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a87f9fb396831944c31f7b89e04aabc69">00276</a>     <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a799c8c75625120ce151f39791a18f420">CritAICChangeOrLeaves_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">size_t</span> tl, <span class="keywordtype">double</span> ts)
<a name="l00277"></a>00277                     : <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a920999ec1b5f624dec19bf8a504a8253">pen</a>(p), <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad8960d95c624326914fb57574c3ecd6d">testLeaves</a>(tl), <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a9ee854413b520e9da587f5a37a0fab6b">testScore</a>(ts)  {}
<a name="l00278"></a>00278 
<a name="l00281"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad41d362796c0f10185375bb5a3ce5d0b">00281</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad41d362796c0f10185375bb5a3ce5d0b">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00282"></a>00282 <span class="keyword">    </span>{
<a name="l00283"></a>00283         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeaves(<a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#ad8960d95c624326914fb57574c3ecd6d">testLeaves</a>);
<a name="l00284"></a>00284         <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml" title="Class for testing the change in AIC score from splitting.">CritAICChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a920999ec1b5f624dec19bf8a504a8253">pen</a>, <a class="code" href="classsubpavings_1_1CritAICChangeOrLeaves__GTE.shtml#a9ee854413b520e9da587f5a37a0fab6b">testScore</a>);
<a name="l00285"></a>00285 
<a name="l00286"></a>00286         <span class="keywordflow">return</span> (critLeaves(adh) || critScore(adh));
<a name="l00287"></a>00287     }
<a name="l00288"></a>00288 };
<a name="l00289"></a>00289 
<a name="l00294"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml">00294</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml" title="Class for testing change in COPERR or largest count from splitting.">CritCOPERRChangeOrLargestCount_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00295"></a>00295 {
<a name="l00296"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a1aa6dd39f856481128f0f854d755fc10">00296</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a1aa6dd39f856481128f0f854d755fc10">pen</a>;
<a name="l00297"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a225e0e6f64b91c57530a1e5157d21be8">00297</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a225e0e6f64b91c57530a1e5157d21be8">testCount</a>;
<a name="l00298"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#acd8afac0f7fca3d0b95f245e0baeab8e">00298</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#acd8afac0f7fca3d0b95f245e0baeab8e">testScore</a>;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a6833c0270691e63690c90911738d231e">CritCOPERRChangeOrLargestCount_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00301"></a>00301 
<a name="l00302"></a>00302     <span class="keyword">public</span>:
<a name="l00303"></a>00303 
<a name="l00304"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a088a9774aa5d5d6ac9be185320bfbbce">00304</a>     <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a6833c0270691e63690c90911738d231e">CritCOPERRChangeOrLargestCount_LTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p,
<a name="l00305"></a>00305                                         <span class="keywordtype">size_t</span> tc, <span class="keywordtype">double</span> ts)
<a name="l00306"></a>00306                                 : <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a1aa6dd39f856481128f0f854d755fc10">pen</a>(p), <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a225e0e6f64b91c57530a1e5157d21be8">testCount</a>(tc), <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#acd8afac0f7fca3d0b95f245e0baeab8e">testScore</a>(ts)  {}
<a name="l00307"></a>00307 
<a name="l00310"></a><a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#ab43c4004ba53bd65bb94122dbdbc5c32">00310</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#ab43c4004ba53bd65bb94122dbdbc5c32">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00311"></a>00311 <span class="keyword">    </span>{
<a name="l00312"></a>00312         <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(<a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a225e0e6f64b91c57530a1e5157d21be8">testCount</a>);
<a name="l00313"></a>00313         <a class="code" href="classsubpavings_1_1CritCOPERRChange__GTE.shtml" title="Class for testing the change in COPERR score from splitting.">CritCOPERRChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#a1aa6dd39f856481128f0f854d755fc10">pen</a>, <a class="code" href="classsubpavings_1_1CritCOPERRChangeOrLargestCount__LTE.shtml#acd8afac0f7fca3d0b95f245e0baeab8e">testScore</a>);
<a name="l00314"></a>00314 
<a name="l00315"></a>00315         <span class="keywordflow">return</span> (critCount(adh) || critScore(adh));
<a name="l00316"></a>00316     }
<a name="l00317"></a>00317 };
<a name="l00318"></a>00318 
<a name="l00323"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml">00323</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml" title="Class for testing change in AIC or largest count from splitting.">CritAICChangeOrLargestCount_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00324"></a>00324 {
<a name="l00325"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#ab103ee5920edae553b76bddc36244e89">00325</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#ab103ee5920edae553b76bddc36244e89">pen</a>;
<a name="l00326"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#a18efb7c7d3d958b540124bcf831581c3">00326</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#a18efb7c7d3d958b540124bcf831581c3">testCount</a>;
<a name="l00327"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abe3e0f28dc25e6bbdaba43c05a28083d">00327</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abe3e0f28dc25e6bbdaba43c05a28083d">testScore</a>;
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abbc1aa34de5d77b71421662f98e2f628">CritAICChangeOrLargestCount_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00330"></a>00330 
<a name="l00331"></a>00331     <span class="keyword">public</span>:
<a name="l00332"></a>00332 
<a name="l00333"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#a0772f75c17cb07e69037a479b4286f2d">00333</a>     <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abbc1aa34de5d77b71421662f98e2f628">CritAICChangeOrLargestCount_LTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p,
<a name="l00334"></a>00334                                         <span class="keywordtype">size_t</span> tc, <span class="keywordtype">double</span> ts)
<a name="l00335"></a>00335                                     : <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#ab103ee5920edae553b76bddc36244e89">pen</a>(p), <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#a18efb7c7d3d958b540124bcf831581c3">testCount</a>(tc), <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abe3e0f28dc25e6bbdaba43c05a28083d">testScore</a>(ts)  {}
<a name="l00336"></a>00336 
<a name="l00339"></a><a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#acf02a98ad7e8268ba30b38d4b15c45e7">00339</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#acf02a98ad7e8268ba30b38d4b15c45e7">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00340"></a>00340 <span class="keyword">    </span>{
<a name="l00341"></a>00341         <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(<a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#a18efb7c7d3d958b540124bcf831581c3">testCount</a>);
<a name="l00342"></a>00342         <a class="code" href="classsubpavings_1_1CritAICChange__GTE.shtml" title="Class for testing the change in AIC score from splitting.">CritAICChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#ab103ee5920edae553b76bddc36244e89">pen</a>, <a class="code" href="classsubpavings_1_1CritAICChangeOrLargestCount__LTE.shtml#abe3e0f28dc25e6bbdaba43c05a28083d">testScore</a>);
<a name="l00343"></a>00343 
<a name="l00344"></a>00344         <span class="keywordflow">return</span> (critCount(adh) || critScore(adh));
<a name="l00345"></a>00345     }
<a name="l00346"></a>00346 };
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00353"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml">00353</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml" title="Class for testing the change in COPERR score from merging.">CritCOPERRMergeChange_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00354"></a>00354 {
<a name="l00355"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a33a7866852738c521e35e05e1eb7eb5a">00355</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a33a7866852738c521e35e05e1eb7eb5a">pen</a>;
<a name="l00356"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#ac7f461e466592ee2b94c701bf6969f84">00356</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#ac7f461e466592ee2b94c701bf6969f84">test</a>;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a701e7cb62651e8e56e2288d4faa906ed">CritCOPERRMergeChange_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00359"></a>00359 
<a name="l00360"></a>00360     <span class="keyword">public</span>:
<a name="l00361"></a>00361 
<a name="l00362"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#ac2237c8c6ed4c982628ac1d55d13d24d">00362</a>     <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a701e7cb62651e8e56e2288d4faa906ed">CritCOPERRMergeChange_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">double</span> t)
<a name="l00363"></a>00363                                         : <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a33a7866852738c521e35e05e1eb7eb5a">pen</a>(p), <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#ac7f461e466592ee2b94c701bf6969f84">test</a>(t)  {}
<a name="l00364"></a>00364 
<a name="l00367"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a00c06b462c0224bf90e06c130069bd13">00367</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a00c06b462c0224bf90e06c130069bd13">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00368"></a>00368 <span class="keyword">    </span>{
<a name="l00369"></a>00369 
<a name="l00370"></a>00370         dotprecision best = adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4" title="Get best change in EMP under COPERR from splitting any leaf.">getBestSplitChangeEMPCOPERR</a>(
<a name="l00371"></a>00371                                 adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00372"></a>00372         real change = rnd(best) + <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a33a7866852738c521e35e05e1eb7eb5a">pen</a>(adh, -1) - <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#a33a7866852738c521e35e05e1eb7eb5a">pen</a>(adh, 0); <span class="comment">// merge = -1 leaf</span>
<a name="l00373"></a>00373 
<a name="l00374"></a>00374         <span class="keywordflow">return</span> (change &gt;= <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml#ac7f461e466592ee2b94c701bf6969f84">test</a>);
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 };
<a name="l00377"></a>00377 
<a name="l00382"></a><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml">00382</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml" title="Class for testing the change in AIC score from merging.">CritAICMergeChange_GTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00383"></a>00383 {
<a name="l00384"></a><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a4e6ff8fc5fd0b8bfef238e5f48875e42">00384</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a4e6ff8fc5fd0b8bfef238e5f48875e42">pen</a>;
<a name="l00385"></a><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a6ddac11ad1ab2730eff435a1ebbb6c6b">00385</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a6ddac11ad1ab2730eff435a1ebbb6c6b">test</a>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a909ca2dd9ac2f52d1ff26ddfc35ad541">CritAICMergeChange_GTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00388"></a>00388 
<a name="l00389"></a>00389     <span class="keyword">public</span>:
<a name="l00390"></a>00390 
<a name="l00391"></a><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a70eeeb230b8096bd387d4b706c15f185">00391</a>     <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a70eeeb230b8096bd387d4b706c15f185">CritAICMergeChange_GTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p, <span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a4e6ff8fc5fd0b8bfef238e5f48875e42">pen</a>(p), <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a6ddac11ad1ab2730eff435a1ebbb6c6b">test</a>(t) {}
<a name="l00392"></a>00392 
<a name="l00395"></a><a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#abcd88342d6ebe8ae0eac08a834ac1bc5">00395</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#abcd88342d6ebe8ae0eac08a834ac1bc5">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00396"></a>00396 <span class="keyword">    </span>{
<a name="l00397"></a>00397         dotprecision best = adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a0e8b9126a14255276600bf5293d33e24" title="Get best change in EMP under AIC from merging any subleaf.">getBestMergeChangeEMPAIC</a>();
<a name="l00398"></a>00398 
<a name="l00399"></a>00399         real change = rnd(best) + <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a4e6ff8fc5fd0b8bfef238e5f48875e42">pen</a>(adh, -1) - <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a4e6ff8fc5fd0b8bfef238e5f48875e42">pen</a>(adh, 0); <span class="comment">// merge = -1 leaf</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401         <span class="keywordflow">return</span> (change &gt;= <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml#a6ddac11ad1ab2730eff435a1ebbb6c6b">test</a>);
<a name="l00402"></a>00402     }
<a name="l00403"></a>00403 };
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 
<a name="l00408"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml">00408</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml" title="Class for testing change in COPERR or number leaves from merging.">CritCOPERRMergeChangeOrLeaves_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00409"></a>00409 {
<a name="l00410"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aff23c038312142d8ff98afbadee5c1c0">00410</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aff23c038312142d8ff98afbadee5c1c0">pen</a>;
<a name="l00411"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7890e344b86bc0b15a8becd7922d0bb9">00411</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7890e344b86bc0b15a8becd7922d0bb9">testLeaves</a>;
<a name="l00412"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aad06f142352ae025ac483345e29ce06f">00412</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aad06f142352ae025ac483345e29ce06f">testScore</a>;
<a name="l00413"></a>00413 
<a name="l00414"></a>00414     <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a46ea02db450dfee9d5908ce55a714779">CritCOPERRMergeChangeOrLeaves_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00415"></a>00415 
<a name="l00416"></a>00416     <span class="keyword">public</span>:
<a name="l00417"></a>00417 
<a name="l00418"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a9654a25628d97154868b73eabdaeda55">00418</a>     <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a46ea02db450dfee9d5908ce55a714779">CritCOPERRMergeChangeOrLeaves_LTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p,
<a name="l00419"></a>00419                                     <span class="keywordtype">size_t</span> tl, <span class="keywordtype">double</span> ts)
<a name="l00420"></a>00420                                     : <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aff23c038312142d8ff98afbadee5c1c0">pen</a>(p), <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7890e344b86bc0b15a8becd7922d0bb9">testLeaves</a>(tl), <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aad06f142352ae025ac483345e29ce06f">testScore</a>(ts)  {}
<a name="l00421"></a>00421 
<a name="l00424"></a><a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7ddbaf53665373ee069626351e40252c">00424</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7ddbaf53665373ee069626351e40252c">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00425"></a>00425 <span class="keyword">    </span>{
<a name="l00426"></a>00426         <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTE</a> critLeaves(<a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#a7890e344b86bc0b15a8becd7922d0bb9">testLeaves</a>);
<a name="l00427"></a>00427         <a class="code" href="classsubpavings_1_1CritCOPERRMergeChange__GTE.shtml" title="Class for testing the change in COPERR score from merging.">CritCOPERRMergeChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aff23c038312142d8ff98afbadee5c1c0">pen</a>, <a class="code" href="classsubpavings_1_1CritCOPERRMergeChangeOrLeaves__LTE.shtml#aad06f142352ae025ac483345e29ce06f">testScore</a>);
<a name="l00428"></a>00428 
<a name="l00429"></a>00429         <span class="keywordflow">return</span> (critLeaves(adh) || critScore(adh));
<a name="l00430"></a>00430     }
<a name="l00431"></a>00431 };
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 
<a name="l00439"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml">00439</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml" title="Class for testing change in AIC or number leaves from merging.">CritAICMergeChangeOrLeaves_LTE</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00440"></a>00440 {
<a name="l00441"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#aa66d4c4f589e53de40c3dcb04c48d59c">00441</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#aa66d4c4f589e53de40c3dcb04c48d59c">pen</a>;
<a name="l00442"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab71eaee1d035924d59aae000b5b2ebcb">00442</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab71eaee1d035924d59aae000b5b2ebcb">testLeaves</a>;
<a name="l00443"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab0fd379b75370697ec1f0264adf24ca6">00443</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab0fd379b75370697ec1f0264adf24ca6">testScore</a>;
<a name="l00444"></a>00444 
<a name="l00445"></a>00445     <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#a22f6e81490b265a369edabf533036c65">CritAICMergeChangeOrLeaves_LTE</a>(); <span class="comment">// private default constructor</span>
<a name="l00446"></a>00446 
<a name="l00447"></a>00447     <span class="keyword">public</span>:
<a name="l00448"></a>00448 
<a name="l00449"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ae401398a1c7be59a530318aa9b93869b">00449</a>     <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#a22f6e81490b265a369edabf533036c65">CritAICMergeChangeOrLeaves_LTE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; p,
<a name="l00450"></a>00450                                     <span class="keywordtype">size_t</span> tl, <span class="keywordtype">double</span> ts)
<a name="l00451"></a>00451                                     : <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#aa66d4c4f589e53de40c3dcb04c48d59c">pen</a>(p), <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab71eaee1d035924d59aae000b5b2ebcb">testLeaves</a>(tl), <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab0fd379b75370697ec1f0264adf24ca6">testScore</a>(ts)  {}
<a name="l00452"></a>00452 
<a name="l00455"></a><a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#a5f6d984852a0ee94e92f2a9f28e74953">00455</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#a5f6d984852a0ee94e92f2a9f28e74953">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00456"></a>00456 <span class="keyword">    </span>{
<a name="l00457"></a>00457         <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTE</a> critLeaves(<a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab71eaee1d035924d59aae000b5b2ebcb">testLeaves</a>);
<a name="l00458"></a>00458         <a class="code" href="classsubpavings_1_1CritAICMergeChange__GTE.shtml" title="Class for testing the change in AIC score from merging.">CritAICMergeChange_GTE</a> critScore(<a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#aa66d4c4f589e53de40c3dcb04c48d59c">pen</a>, <a class="code" href="classsubpavings_1_1CritAICMergeChangeOrLeaves__LTE.shtml#ab0fd379b75370697ec1f0264adf24ca6">testScore</a>);
<a name="l00459"></a>00459 
<a name="l00460"></a>00460         <span class="keywordflow">return</span> (critLeaves(adh) || critScore(adh));
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 };
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 
<a name="l00467"></a><a class="code" href="classsubpavings_1_1CritStopAll.shtml">00467</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritStopAll.shtml" title="Class to bale out of priority queue splitting.">CritStopAll</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>
<a name="l00468"></a>00468 {
<a name="l00469"></a>00469     <span class="keyword">public</span>:
<a name="l00470"></a>00470 
<a name="l00471"></a>00471     <span class="comment">// use default constructor</span>
<a name="l00472"></a>00472 
<a name="l00474"></a><a class="code" href="classsubpavings_1_1CritStopAll.shtml#abb2e5e76fa76aadbd77ad4108c1d9c4e">00474</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritStopAll.shtml#abb2e5e76fa76aadbd77ad4108c1d9c4e">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00475"></a>00475 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l00476"></a>00476 };
<a name="l00477"></a>00477 
<a name="l00479"></a>00479 
<a name="l00480"></a>00480 } <span class="comment">// end of namespace subpavings</span>
<a name="l00481"></a>00481 
<a name="l00482"></a>00482 <span class="preprocessor">#endif</span>
<a name="l00483"></a>00483 <span class="preprocessor"></span>
<a name="l00484"></a>00484 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="histevalobj_8hpp.shtml">histevalobj.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
