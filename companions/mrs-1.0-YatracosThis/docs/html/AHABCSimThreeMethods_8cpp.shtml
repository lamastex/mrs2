<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AHABCSimThreeMethods.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AHABCSimThreeMethods_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AHABCSimThreeMethods.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;iomanip&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &quot;<a class="el" href="SmallClasses_8hpp_source.shtml">SmallClasses.hpp</a>&quot;</code><br/>
</div>
<p><a href="AHABCSimThreeMethods_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AHABCSimThreeMethods_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="AHABCSimThreeMethods.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">44</a> of file <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml">AHABCSimThreeMethods.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00987">subpavings::AdaptiveHistogramCollator::findDensityRegion()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01023">subpavings::AdaptiveHistogram::insertFromRSSample()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="sptools_8cpp_source.shtml#l01207">subpavings::labelDataFromFilter()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00094">subpavings::LOGSAMPLES</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00978">subpavings::AdaptiveHistogramCollator::marginalise()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03044">subpavings::AdaptiveHistogram::MCMC()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00827">subpavings::AdaptiveHistogramCollator::outputAverageToTxtTabs()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="sptools_8cpp_source.shtml#l01190">subpavings::pointMassFilter()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6">subpavings::readRvectorsFromTxt()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
     <span class="comment">//---------Some preliminaries-------------------------------------------//</span>
   <span class="comment">//set formatting fors input to oss</span>
    ofstream os;         <span class="comment">// ofstream object</span>
    os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    os.precision(16);
   
   <span class="comment">// set up a random number generator for uniform rvs in priority queue</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    <span class="keywordtype">long</span> s = time (NULL) * getpid();
    gsl_rng_set(r, s);
   
  <span class="comment">//--------------input parameters------------------------------------------//</span>
   <span class="comment">//directory to store files in</span>
  <span class="keywordtype">string</span> dirName = argv[8];
  
  <span class="comment">// names of files</span>
  <span class="keywordtype">string</span> simDataFiles = argv[1]; <span class="comment">// this is a row vector of filenames</span>
 
  <span class="comment">// method to construct histogram</span>
   <span class="comment">// 1: PQ with k as a function of n</span>
   <span class="comment">// 2: MCMC</span>
   <span class="comment">// 3: PQ with MDE - not implemented yet</span>
   <span class="comment">// 4: Regular Histograms - not implemented yet</span>
   <span class="keywordtype">int</span> method = atoi(argv[2]);
  
  <span class="comment">//sample for numRep times for sampled data of samplingSize</span>
  <span class="keywordtype">size_t</span> samplingSize = atoi(argv[3]);
  <span class="keywordtype">size_t</span> numRep = atoi(argv[4]);
  
  <span class="comment">//parameters for log-likelihood estimation</span>
  <span class="keywordtype">double</span> wt = atof(argv[5]); <span class="comment">//mass to ensure positive density </span>
                     <span class="comment">//everywhere in domain</span>
  <span class="keywordtype">double</span> dx = atof(argv[6]); <span class="comment">//1 for non-atomic densities</span>
  
   <span class="comment">//user-defined coverage value to get wanted density region</span>
  <span class="keywordtype">double</span> cov = atof(argv[7]);
   <span class="comment">//--------------end of input parameters----------------------------------//</span>
    
   <span class="comment">//-------Setup to read in data files------------------------------------//</span>
   <span class="comment">//create a vector object to store the filenames of simulated data</span>
  vector&lt;string&gt; simDataFilesVec;
  <span class="keywordtype">string</span> fileName;
  cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
  ifstream file; <span class="comment">// create file for input</span>
  file.open(simDataFiles.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
    <span class="comment">// else read in the filenames</span>
  <span class="comment">// store the filenames in the vector simDataFilesVec</span>
  <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
    file &gt;&gt; fileName;
    cout &lt;&lt; fileName &lt;&lt; endl; 
    simDataFilesVec.push_back(fileName);
  }
  <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
  simDataFilesVec.pop_back();
   
  <span class="comment">//container to keep individual data containers for re-sampling</span>
  vector&lt;RVecData&gt; unlabDataVec; <span class="comment">//unlabelled data</span>

   <span class="comment">//container to keep both simulated and observed data to make root box</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
  dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>; 

  <span class="comment">// put all simulated data into container allData</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nPut all data in a container to get rootbox: &quot;</span> &lt;&lt; endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; simDataFilesVec.size(); i++) {
    cout &lt;&lt; simDataFilesVec[i] &lt;&lt; endl;
    <span class="comment">//read into allData</span>
    <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), simDataFilesVec[i], 0);
    <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
      cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
        &lt;&lt; endl;
      exit(1);
    } 
    <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr at iteration &quot; &lt;&lt; i &lt;&lt; endl;</span>
    <span class="comment">//Then read each data set and push into unlabDataVec </span>
    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> unlabIndData;
    <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(unlabIndData, simDataFilesVec[i], 0);
    unlabDataVec.push_back(unlabIndData);
  } <span class="comment">// end of putting simulated data into container</span>
  
  <span class="comment">//Make root box from all the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
  histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
        <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr AFTER iteration &quot;  &lt;&lt; endl;</span>
  histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
  ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
  <span class="comment">//find the data dimensions from the first datapoint</span>
  <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
  cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
  
  <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
  <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
  <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
  
  <span class="comment">//----go through each RVecData in unlabData for:-------------------------//</span>
  <span class="comment">//1. point mass filtering</span>
  <span class="comment">//2. build a histogram</span>
  
  <span class="comment">//Set up containers to contain weights for each mixture model</span>
  vector&lt; map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt; WeightPMVec;<span class="comment">//for point mass</span>
  vector&lt;double&gt; WeightHistVec; <span class="comment">//for histogram</span>
  vector&lt;double&gt; WeightPM;
  
    <span class="comment">//Set up containers to contain histogram objects</span>
  vector&lt;AdaptiveHistogram*&gt; vecPQHist; <span class="comment">//if method 1</span>
  vector&lt;AdaptiveHistogramCollator*&gt; vecMCMCHist; <span class="comment">//if method 2</span>
  vector&lt;AdaptiveHistogramValidation*&gt; vecMDEHist; <span class="comment">//if method 3</span>
  
  <span class="comment">//Now loop through each RVecData</span>
  vector&lt;RVecData&gt;::iterator unlabDataIt;
  RVecData::iterator dataIt;
  <span class="keywordtype">size_t</span> D = 0;
  <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
      unlabDataIt++) 
  {
      cout &lt;&lt; <span class="stringliteral">&quot;==============Simulated Data &quot;</span> &lt;&lt; D &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
      <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labData; <span class="comment">//for point mass filtering </span>
      <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">//for now, do this only in 1D</span>
      <span class="comment">//make a map for value of x (the key) and each of its respective </span>
      <span class="comment">//counts (the value)</span>
      map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
      <span class="comment">//run a point mass filtering to get &quot;atomic&quot; points</span>
      <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>((*unlabDataIt), CountsMap);
    
      <span class="comment">//Is there a more efficient way for the following:</span>
      <span class="comment">//Iterate through the data set again. Label point-mass with 0 and </span>
      <span class="comment">//the rest with 1.</span>
      <span class="comment">//Also get a map for the EMF of  point mass data</span>
      map&lt;rvector,double, less&lt;rvector&gt; &gt; EMFMap;
      map&lt;rvector, double, less&lt;rvector&gt; &gt;::iterator EMFMapIt;
      <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>((*unlabDataIt), labData, CountsMap, EMFMap);
            
      <span class="comment">/*optional: output RSSample this to .txt</span>
<span class="comment">      vector&lt;LabPnt&gt;::iterator LabPntIt; //to iterate over labData.Samples</span>
<span class="comment">      string fileName = &quot;Labelled&quot;;</span>
<span class="comment">      fileName += simDataFilesVec[D];</span>
<span class="comment">      oftream os;</span>
<span class="comment">      os.open(fileName.c_str());</span>
<span class="comment">      for (LabPntIt = labData.Samples.begin(); LabPntIt &lt; labData.Samples.end();</span>
<span class="comment">          LabPntIt++) {</span>
<span class="comment">        (*LabPntIt).Print(os);</span>
<span class="comment">      }</span>
<span class="comment">      os &lt;&lt; flush;</span>
<span class="comment">      */</span> <span class="comment">//end of optional output</span>
      
      <span class="comment">//Store the weights</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Atomic points and their EMFs&quot;</span> &lt;&lt; endl;
      <span class="keywordtype">double</span> pmWeight = 0.0;
      <span class="keywordtype">double</span> MaxpmWeight = 0.0;
                        rvector AtomWithMaxpm = EMFMap.begin()-&gt;first;
      <span class="keywordflow">for</span> (EMFMapIt = EMFMap.begin(); EMFMapIt != EMFMap.end(); EMFMapIt++) {
        <span class="keywordflow">if</span>(EMFMapIt-&gt;second &gt; MaxpmWeight) 
          {<span class="comment">//a messy way to keep the max atom and weight...</span>
            MaxpmWeight=EMFMapIt-&gt;second;
            AtomWithMaxpm = EMFMapIt-&gt;first;
          }
        pmWeight += EMFMapIt-&gt;second;
        <span class="keywordflow">if</span>( EMFMapIt-&gt;second &lt; 0.0)<span class="comment">// use &lt; to skip the ? below</span>
          {
            cout &lt;&lt; setprecision(16) &lt;&lt; EMFMapIt-&gt;first 
           &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; EMFMapIt-&gt;second &lt;&lt; endl;
            cout &lt;&lt; <span class="stringliteral">&quot;is this atomic in your experimental precision?&quot;</span> &lt;&lt; endl; getchar();
          }
      }
                        cout &lt;&lt; <span class="stringliteral">&quot;Maximum Weight of a set of Atoms of size &quot;</span>&lt;&lt; EMFMap.size() 
        &lt;&lt; <span class="stringliteral">&quot; is &quot;</span> &lt;&lt; MaxpmWeight &lt;&lt; <span class="stringliteral">&quot; at &quot;</span> &lt;&lt; AtomWithMaxpm &lt;&lt; endl;
      WeightHistVec.push_back(1.0 - pmWeight);
      WeightPMVec.push_back(EMFMap);
      WeightPM.push_back(pmWeight);
      
      <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
        <span class="comment">//and the normalised histogram</span>
        <span class="keywordtype">string</span> weightFileName = dirName;
        weightFileName += <span class="stringliteral">&quot;Weights&quot;</span>;
      ostringstream stm1;
      stm1 &lt;&lt; D;
      weightFileName += stm1.str();
      weightFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      os.open(weightFileName.c_str());
      map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
      <span class="keywordflow">for</span> (mapIt = (EMFMap).begin(); mapIt != (EMFMap).end(); mapIt++) {
        os &lt;&lt; mapIt-&gt;second &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;first;
      }
       os &lt;&lt; endl;
      os &lt;&lt; flush;
       os.close();
       cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
       cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;
      
    
    } <span class="comment">// end of point mass filtering for 1D</span>
  
    <span class="comment">//----Now build the histograms using MCMC with automated convergence</span>
    <span class="comment">// diagnostics---------------------------------------------------------</span>
    cout &lt;&lt; <span class="stringliteral">&quot;\nMaking histogram for simulated data in &quot;</span> &lt;&lt; simDataFilesVec[D] 
        &lt;&lt; endl;
    <span class="comment">//booleans to check is insertion is successful and if PQ is successful</span>
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulMadeHist = <span class="keyword">false</span>;

    <span class="keywordflow">switch</span>(method)  { 
      <span class="keywordflow">case</span> 1: <span class="comment">//PQ with kmax as a function of n </span>
      { 
        cout &lt;&lt; <span class="stringliteral">&quot;Make histogram using PQ:&quot;</span> &lt;&lt; endl;
        <span class="comment">// make an Adaptive Histogram object with box specified by the data.</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistPtr;
        myHistPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
        
        <span class="comment">// feed the data into myHist. No splits are done yet.</span>
        <span class="keywordflow">if</span> (dataDim == 1) {
               cout &lt;&lt; <span class="stringliteral">&quot;about to insert into histogram only data with label 1&quot;</span>&lt;&lt;endl;
          successfulInsertion = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
        }
        <span class="keywordflow">else</span> { 
          successfulInsertion = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
        }
          
        <span class="keywordflow">if</span> (successfulInsertion) {
          
          <span class="keywordtype">size_t</span> n =(myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getCounter();
          <span class="keywordtype">double</span> alpha = 0.5;   
          <span class="keywordtype">size_t</span> finalK = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, alpha));
          <span class="keywordflow">if</span> (dataDim==1) cout &lt;&lt; <span class="stringliteral">&quot;sample size for non-atomic data = &quot;</span> &lt;&lt; n &lt;&lt; endl;
          cout &lt;&lt; <span class="stringliteral">&quot;Max K: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
          <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount; <span class="comment">// split node wth most points in first </span>
          <span class="comment">// until number of points in all nodes &lt;= finalK</span>
          <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK); 
          <span class="keywordtype">double</span> beta = 0.95;
          <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, beta));<span class="comment">//maximum #leaves</span>
          <span class="comment">//TODO: this is a unjustified stopping rule for finite n!!!!!!!!! </span>
          <span class="comment">// to get min volume, need volume of root box</span>
          <span class="comment">//double volRoot = (myHistPtr-&gt;getSubPaving())-&gt;nodeVolume();</span>
          <span class="comment">// double minVol = volRoot/pow(2, int(pow(n, 1.0-alpha)-1.0));</span>
          <span class="comment">// double minVol = volRoot/(pow(n, 1.0-alpha)*1.0);</span>
          <span class="comment">//cout &lt;&lt; &quot;minimum volume: &quot; &lt;&lt; minVol &lt;&lt; endl;</span>
          
          <span class="comment">// now split with priority queue</span>
          successfulMadeHist = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount,
                  critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r, maxLeafNodes); <span class="comment">// without minVol </span>
          <span class="comment">//successfulMadeHist = myHist.prioritySplit(nodeCompCount,</span>
          <span class="comment">//          critCount, NOLOG, 0, minVol, r); // with minVol       </span>
          
          <span class="keywordflow">if</span> (successfulMadeHist) { 
            vecPQHist.push_back(myHistPtr); 
            <span class="comment">// optional output for histogram</span>
            <span class="keywordtype">string</span> histFileName;
            histFileName = dirName;
            histFileName += <span class="stringliteral">&quot;Hist&quot;</span>;
            ostringstream stm1;
            stm1 &lt;&lt; D;
            histFileName += stm1.str();
            histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
            myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(histFileName);
            <span class="comment">// end of optional output for histogram</span>
          }
          <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;Histogram not made.&quot;</span> &lt;&lt; endl; exit(1); }
        } <span class="comment">// end of successfulInsertion  </span>
        <span class="keywordflow">break</span>;
      }
      
      <span class="keywordflow">case</span> 2: <span class="comment">// MCMC</span>
      {
        cout &lt;&lt; <span class="stringliteral">&quot;Make histogram using MCMC:&quot;</span> &lt;&lt; endl;
        <span class="comment">// make an Adaptive Histogram object with box specified by the simulated data.</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
        <span class="comment">// feed the data into myHist. No splits are done yet.</span>
        <span class="keywordflow">if</span> (dataDim == 1) {
          successfulInsertion = myHist.insertFromRSSample(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
        }<span class="comment">//Gloria has not fielded this option??? TODO: for univariate trandimensional density estimation</span>
        <span class="keywordflow">else</span> { 
          successfulInsertion = myHist.insertFromRVec((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
        }
        <span class="keywordflow">if</span> (successfulInsertion) {
          <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal; <span class="comment">// set up proposal distribution object</span>
          <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior; <span class="comment">// set up prior distribution object </span>
          <span class="comment">// specify minPoints</span>
          <span class="keywordtype">int</span> minPoints = 0;          
          <span class="comment">//TODO: need to add a minVol criteria in MCMC!!!</span>
          <span class="comment">//Parameters</span>
          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = 10000;
          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = 500;
          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = 50;
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* myCollPtr;
          myCollPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; 
          *myCollPtr = myHist.MCMC(loops, burnin, 
              thinout, D, proposal, logPrior, minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>); 
              <span class="comment">//thinout, D, proposal, logPrior, minPoints);//GT??: how to stop log samples - this did not work  </span>
          
          <span class="keywordflow">if</span> (NULL != myCollPtr) {  
            successfulMadeHist = <span class="keyword">true</span>;
            vecMCMCHist.push_back(myCollPtr); 
            <span class="comment">// optional output for histogram</span>
            <span class="keywordtype">string</span> histFileName;
            histFileName = dirName;
            histFileName += <span class="stringliteral">&quot;AverageMCMC&quot;</span>;
            ostringstream stm1;
            stm1 &lt;&lt; D;
            histFileName += stm1.str();
            histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
            myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(histFileName);
            <span class="comment">// end of optional output for histogram</span>
            }
          <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;MCMC failed.&quot;</span> &lt;&lt; endl; exit(1); }   
        } <span class="comment">// end of successfulInsertion</span>
        <span class="keywordflow">break</span>;            
      }
    } <span class="comment">// end of switch(method)  </span>
    D++; <span class="comment">// counter to go through unlabDataVec</span>
  } <span class="comment">// end of going through unlabDataVec</span>

  <span class="comment">//-----end of going through each RVecData in unlabData------------------//</span>
  
  <span class="comment">//-----get marginal histograms for dimensions more than 1 --------------//</span>
  <span class="comment">//---- and density region----------------//</span>
  <span class="comment">//Marginalise</span>
   D = 0; <span class="comment">//reset D to 0</span>
  <span class="comment">//iterate through each data set</span>
  <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); 
      unlabDataIt &lt; unlabDataVec.end(); unlabDataIt++) {  
    <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// get density region only for 1D data</span>
      cout &lt;&lt; <span class="stringliteral">&quot;\nGet &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region for dataset &quot;</span> &lt;&lt; D;
      
      ostringstream stm1; stm1 &lt;&lt; cov;
      <span class="keywordtype">string</span> covFileName = dirName;
      covFileName += stm1.str(); 
      covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
      ostringstream stm2; stm2 &lt;&lt; D;
      covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
      covFileName += stm2.str();
      covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      <span class="keywordflow">if</span> (method ==1 ) {
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> covNodes;
        vecPQHist[D]-&gt;findDensityRegion(cov, WeightPM[D], covNodes, covFileName); 
      }
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method ==2) {
        vector&lt;CollatorSPnode*&gt; covNodes;
        vecMCMCHist[D]-&gt;findDensityRegion(cov, WeightPM[D], covNodes, covFileName); 
      }
      cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;
    } <span class="comment">// done with dataDim == 1</span>
  
    <span class="comment">// only do the marginalisation if dimension &gt; 1</span>
    <span class="keywordflow">else</span> { <span class="comment">//(dataDim &gt; 1) </span>
      <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
      <span class="keywordflow">while</span> (!done) {
        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= dataDim; i++){
          <span class="comment">//marginalise for univariate histograms</span>
          cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for coordinate &quot;</span> &lt;&lt; i 
              &lt;&lt; endl;
          <span class="keywordtype">int</span> myints[] = {i}; 
          std::vector &lt; int &gt; margDims (myints, 
                      myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
          
          <span class="keywordflow">if</span> (method == 1) { 
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> myColl;
            myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(*vecPQHist[D]);
            marginal = myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">marginalise</a>(margDims); 
          }
          <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method == 2) {
            marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
          }
          
          <span class="comment">//output to .txt          </span>
          <span class="keywordtype">string</span> margFileName = dirName; 
          margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;   <span class="comment">// provide a filename</span>
          ostringstream stm1; stm1 &lt;&lt; i;
          margFileName += stm1.str();
          ostringstream stm4; stm4 &lt;&lt; D;
          margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
          margFileName += stm4.str();
          margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
          <span class="comment">// output the marginal to file</span>
          marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName); 
      
          <span class="comment">// get density region</span>
          cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
          ostringstream stm3;
          stm3 &lt;&lt; cov;
          <span class="keywordtype">string</span> covFileName = dirName;
          covFileName += stm3.str(); 
          covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
          covFileName += stm1.str();
          covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
          covFileName += stm4.str();
          covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
          vector&lt;CollatorSPnode*&gt; covNodes;
          marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);  
          cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;   
            
          <span class="keywordflow">if</span>(i == dataDim) { done = <span class="keyword">true</span>; } <span class="comment">// can&#39;t make marginal for</span>
                                  <span class="comment">// pair dataDim-dataDim</span>
          <span class="comment">//marginalise for (dataDim choose 2) pairs</span>
          <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=(i+1); j &lt;= dataDim; j++) {
            cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for pair &quot;</span> &lt;&lt; i 
              &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;
            <span class="keywordtype">int</span> myints[] = {i,j}; 
            std::vector &lt; int &gt; margDims (myints, 
                    myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
            
            <span class="keywordflow">if</span> (method == 1) { 
              <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> myColl;
              myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(*vecPQHist[D]);
              marginal = myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">marginalise</a>(margDims); 
            }
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method == 2) {
            marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
            }           
            margFileName = dirName;
            margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;     <span class="comment">// provide a filename</span>
            ostringstream stm2; stm2 &lt;&lt; j;
            margFileName += stm1.str();
            margFileName += <span class="stringliteral">&quot;_&quot;</span>;
            margFileName += stm2.str();
            margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
            margFileName += stm4.str();
            margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
            <span class="comment">// output the marginal to file</span>
            marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName);  
            cout &lt;&lt; <span class="stringliteral">&quot;Marginal output is in &quot;</span> &lt;&lt; margFileName &lt;&lt; endl;
        
            <span class="comment">// get density region</span>
            cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
            <span class="keywordtype">string</span> covFileName = dirName;
            covFileName += stm3.str(); 
            covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
            covFileName += stm1.str();
            covFileName += <span class="stringliteral">&quot;_&quot;</span>;
            covFileName += stm2.str();
            covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
            covFileName += stm4.str();
            covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
            vector&lt;CollatorSPnode*&gt; covNodes;
            marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);            
            cout &lt;&lt; <span class="stringliteral">&quot;and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;          
          } <span class="comment">// end of j</span>
        } <span class="comment">// end of i</span>
      } <span class="comment">// end of while</span>
    } <span class="comment">// end of dim &gt; 1</span>
    D++; <span class="comment">//increment the data container count</span>
  } <span class="comment">// end of going through unlabDataVed</span>
  <span class="comment">//----end of marginalising histograms to get scatter histogram plots---//</span>
  
  <span class="comment">//TODO: The following procedure takes up a lot of memory. Need to make it </span>
  <span class="comment">//more memory efficient!!!! </span>
  <span class="comment">//--Sample from RVecData in unlabData and get estimated log-likelihood-//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nSample from simulated datasets and get estimated log-likelihood&quot;</span> 
      &lt;&lt; endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numRep; i++) {
    <span class="comment">//cout &lt;&lt; &quot;===========Round &quot; &lt;&lt; i &lt;&lt; &quot;==============&quot; &lt;&lt; endl;</span>
    <span class="comment">// container to store the likelihood ratios for this i</span>
    vector&lt; vector&lt;real&gt; &gt; loglikMat; 
    
    <span class="comment">//iterate through unlabDataVec</span>
    D = 0; <span class="comment">// reset counter for unlabDataVec</span>
    <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
      unlabDataIt++) 
    {
      cout &lt;&lt; <span class="stringliteral">&quot;\nSampling from simulated dataset &quot;</span> &lt;&lt; D &lt;&lt; endl;
  
      <span class="comment">//container to store the likelihood ratios for this dataset</span>
      vector&lt;real&gt; loglikVec; 
    
      <span class="comment">//label the data and make into RSSample</span>
      <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labSampledData;
  
      <span class="comment">//we need to sample without repetition</span>
      set&lt;int, less&lt;int&gt; &gt; indexSet;
      <span class="keywordflow">if</span> ( samplingSize &gt;= (*unlabDataIt).size() ) { 
        cerr &lt;&lt; <span class="stringliteral">&quot;\nTerminated. Sampling size more than or equal to n.&quot;</span> &lt;&lt; endl;
        exit(1);
      }
      <span class="keywordflow">while</span> ( indexSet.size() &lt; samplingSize ) {
        <span class="comment">//draw a random number in [0,1)</span>
        <span class="keywordtype">double</span> rand = gsl_rng_uniform(r);
        <span class="comment">//turn this into an index in [0, (*unlabDataIt).size()-1]</span>
        <span class="keywordtype">int</span> index = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(rand*((*unlabDataIt).size()
                                          -1)));
        indexSet.insert(index);
      }           
      
      <span class="comment">// sample from (*unlabDataIt)</span>
      <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sampledData;
      set&lt;int, less&lt;int&gt; &gt;::iterator setIt;
      <span class="keywordflow">for</span> (setIt = indexSet.begin(); setIt != indexSet.end(); setIt++) {
        <span class="comment">//put element in allData indexed into data</span>
        sampledData.push_back((*unlabDataIt)[*setIt]);
      }
      
      <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// only filter for 1D</span>
        <span class="comment">//make a map for value of x (the key) and each of its respective </span>
        <span class="comment">//counts (the value)</span>
        map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
        <span class="comment">//run a point mass filter to get &quot;atomic&quot; points</span>
        cout &lt;&lt; <span class="stringliteral">&quot;run point mass filter over sampled data:&quot;</span> &lt;&lt; endl;
        <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>(sampledData, CountsMap);
    
        <span class="comment">//EMFMap is not needed anymore actually - will see how i can turn it off or do something else</span>
                                <span class="comment">//TODO: see TODO comment in &quot;../../../src/sptools.cpp&quot; 1220ish Line</span>
        map&lt;rvector, double, less&lt;rvector&gt; &gt; EMFMap; 
        cout &lt;&lt; <span class="stringliteral">&quot;label data&quot;</span> &lt;&lt; endl;
        <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>(sampledData, labSampledData, CountsMap, EMFMap);
      }
      <span class="keywordflow">else</span> { <span class="comment">// for now make RVecData into RSSample object for higher dim</span>
     <span class="comment">//TODO: This can be done (not for GT&#39;s PhD necessarily) &quot;trans-dimensional density estimation!&quot;</span>
     <span class="comment">//this is a beautiful extension of estimating axis-parallel low-dimensional atomic densities </span>
     <span class="comment">//inside root box in R^d or other subsets specified by prior constraints</span>
        RVecData::iterator it;
        <span class="keywordflow">for</span> (it = sampledData.begin(); it &lt; sampledData.end(); it++) {
          <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> labThisData;
          labThisData.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = (*it);
          labThisData.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = 1;
          <span class="comment">//labThisData.Print(cout);</span>
          labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back(labThisData);
        }
      }
      
      cout &lt;&lt; <span class="stringliteral">&quot;Get estimated likelihood&quot;</span> &lt;&lt; endl;
      <span class="comment">//get estimated log-likelihood over each histogram      </span>
      <span class="keywordflow">switch</span>(method) {
        <span class="keywordflow">case</span> 1: <span class="comment">//PQ</span>
        {   
          <span class="comment">//go through each histogram</span>
          <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; vecPQHist.size(); k++) {
            cout &lt;&lt; <span class="stringliteral">&quot;----Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;----------&quot;</span> &lt;&lt; endl; 
            real estLogLik;
            <span class="keywordflow">if</span> (dataDim == 1) {
              estLogLik=vecPQHist[k]-&gt;getEstLogLikelihoodFromRSSample(
              labSampledData, dx, wt, WeightHistVec[k], WeightPMVec[k]);
            }
            <span class="keywordflow">else</span> {
              estLogLik=vecPQHist[k]-&gt;getEstLogLikelihoodFromRSSample(
              labSampledData, dx, wt);
            }
            cout &lt;&lt; setprecision(6) &lt;&lt; <span class="stringliteral">&quot;Estimated lik for Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
            loglikVec.push_back(estLogLik);
          }           
          <span class="comment">//now get the ratios</span>
          real Dividend = loglikVec[D];
          <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; loglikVec.size(); k++) {
            <span class="comment">//Gloria&#39;s ratio of loglikelihoods: log(lik1)/log(lik2)</span>
            <span class="comment">//loglikVec[k] = Dividend/loglikVec[k];</span>
            <span class="comment">//Not quite log Likelihood Ratio -2log(lik1/lik2)=-2.0*log(lik1)+2*log(lik2)</span>
            <span class="comment">//loglikVec[k] = -2.0*Dividend + 2.0*loglikVec[k];</span>
            <span class="comment">//log relative likelihood: lik1/lik2=exp(log(lik1/lik2))=exp(log(lik1)-log(lik2))</span>
            <span class="comment">//loglikVec[k] = exp(Dividend - loglikVec[k]);</span>
            <span class="comment">//do nothing and leave the loglikelihood as it is</span>
          }
          <span class="comment">//push back the log-likehood at the end of the vector if transformed in previous loop</span>
          loglikVec.push_back(Dividend);
          loglikMat.push_back(loglikVec);
          <span class="keywordflow">break</span>;
        }         
        <span class="keywordflow">case</span> 2: <span class="comment">//MCMC</span>
        {
          <span class="comment">//go through each histogram</span>
          <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; vecMCMCHist.size(); k++) {
            real estLogLik;
            <span class="keywordflow">if</span> (dataDim == 1) {
              estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
              labSampledData, dx, wt, WeightHistVec[k], WeightPMVec[k]);
            }
            <span class="keywordflow">else</span> {
              estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
              labSampledData, dx, wt);
            }
            cout &lt;&lt; setprecision(16) &lt;&lt;<span class="stringliteral">&quot;Estimated lik for Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
            loglikVec.push_back(estLogLik);
          }       
          <span class="comment">//now get the ratios</span>
          real Dividend = loglikVec[D];
          <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; loglikVec.size(); k++) {
            <span class="comment">//Gloria&#39;s ratio of loglikelihoods: log(lik1)/log(lik2)</span>
            <span class="comment">//loglikVec[k] = Dividend/loglikVec[k];</span>
            <span class="comment">//Not quite log Likelihood Ratio -2log(lik1/lik2)=-2.0*log(lik1)+2*log(lik2)</span>
            <span class="comment">//loglikVec[k] = -2.0*Dividend + 2.0*loglikVec[k];</span>
            <span class="comment">//log relative likelihood: lik1/lik2=exp(log(lik1/lik2))=exp(log(lik1)-log(lik2))</span>
            <span class="comment">//loglikVec[k] = exp(Dividend - loglikVec[k]);</span>
            <span class="comment">//do nothing and leave the loglikelihoods as it is</span>
          }
          <span class="comment">//push back the log-likehood at the end of the vector</span>
          loglikVec.push_back(Dividend);
          loglikMat.push_back(loglikVec);
          <span class="keywordflow">break</span>;
        }
      } <span class="comment">// end of switch(method)</span>
              
      D++; <span class="comment">// counter to go through unlabDataVec</span>
    } <span class="comment">// end of going through unlabDataVec</span>
    
    <span class="comment">//output liklogMat for round i to .txt</span>
    <span class="keywordtype">string</span> EstLikOut = dirName;
    EstLikOut += <span class="stringliteral">&quot;EstLkl&quot;</span>;
    ostringstream stm1;
    stm1 &lt;&lt; i;
    EstLikOut += stm1.str(); 
    EstLikOut += <span class="stringliteral">&quot;.txt&quot;</span>;
    os.open(EstLikOut.c_str());
    vector&lt; vector&lt;real&gt; &gt;::iterator it1;
    vector&lt;real&gt;::iterator it2; 
    <span class="keywordflow">for</span> (it1 = loglikMat.begin(); it1 &lt; loglikMat.end(); it1++) {
      <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {
        os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
        <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;(*it2) &lt;&lt; &quot;\t&quot;;</span>
      }
      os &lt;&lt; endl;
      <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;endl;</span>
    } 
    os &lt;&lt; flush;
    os.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Likelihood ratios output to &quot;</span> &lt;&lt; EstLikOut &lt;&lt; endl; 
    cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;          
  } <span class="comment">// end of numRep</span>
   <span class="comment">//-----------output the estimated likelihood to .txt file------------//</span>
 <span class="comment">//---------------end of sampling and estimating likelihood----------------// </span>
   
   <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
   <span class="comment">//and the normalised histogram</span>
   <span class="comment">//output liklogMat for round i to .txt</span>
   <span class="keywordtype">string</span> weightFileName = dirName;
   weightFileName += <span class="stringliteral">&quot;Weights.txt&quot;</span>;
    os.open(weightFileName.c_str());
   vector&lt;map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt;::iterator vecIt;
   map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
  <span class="keywordflow">for</span> (vecIt = WeightPMVec.begin(); vecIt &lt; WeightPMVec.end(); vecIt++) {
    <span class="keywordflow">for</span> (mapIt = (*vecIt).begin(); mapIt != (*vecIt).end(); mapIt++) {
        os &lt;&lt; mapIt-&gt;first &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;second;
    }
    os &lt;&lt; endl;
  } 
  
    os &lt;&lt; flush;
    os.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
    cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;  
   
   <span class="comment">// free the random generator</span>
   gsl_rng_free(r);

   <span class="keywordflow">return</span> 0;

} <span class="comment">// end of AHABC</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AHABCSimThreeMethods_8cpp.shtml">AHABCSimThreeMethods.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
