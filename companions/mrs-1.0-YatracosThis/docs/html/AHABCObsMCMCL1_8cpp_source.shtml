<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AHABCObsMCMCL1.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AHABCObsMCMCL1_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AHABCObsMCMCL1.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AHABCObsMCMCL1_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iomanip&gt;</span> <span class="comment">//to setprecision</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span> <span class="comment">//to use maps</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iterator&gt;</span> <span class="comment">//to use iterators</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span> <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// MCMC tools to help </span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00045"></a><a class="code" href="AHABCObsMCMCL1_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">00045</a> <span class="preprocessor">#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>cxsc;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>subpavings;
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>std;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(
<a name="l00058"></a>00058 <span class="keywordtype">string</span> dirName, <span class="keywordtype">string</span> simDataFiles,
<a name="l00059"></a>00059 <span class="keywordtype">string</span> obsDataFile, <span class="keywordtype">double</span> wt, <span class="keywordtype">double</span> dx,
<a name="l00060"></a>00060 <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, <span class="keywordtype">int</span> minPoints);
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="AHABCObsMCMCL1_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00062</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064   <span class="comment">//--------------input parameters for AHABC--------------------------------//</span>
<a name="l00065"></a>00065    <span class="comment">//directory to store files in</span>
<a name="l00066"></a>00066   <span class="keywordtype">string</span> dirName = argv[1];
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="comment">// names of files</span>
<a name="l00069"></a>00069   <span class="keywordtype">string</span> simDataFiles = argv[2]; <span class="comment">// this is a row vector of filenames</span>
<a name="l00070"></a>00070    <span class="keywordtype">string</span> obsDataFile = argv[3];
<a name="l00071"></a>00071 
<a name="l00072"></a>00072   <span class="comment">//parameters for log-likelihood estimation</span>
<a name="l00073"></a>00073   <span class="keywordtype">double</span> wt = atof(argv[4]); <span class="comment">//mass to ensure positive density </span>
<a name="l00074"></a>00074                      <span class="comment">//everywhere in domain</span>
<a name="l00075"></a>00075   <span class="keywordtype">double</span> dx = atof(argv[5]); <span class="comment">//1 for non-atomic densities</span>
<a name="l00076"></a>00076 
<a name="l00077"></a>00077    <span class="comment">//--------------end of input parameters----------------------------------//</span>
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="comment">//========user-defined parameters for MCMC====================//</span>
<a name="l00080"></a>00080   <span class="keywordtype">int</span> maxLoops = atoi(argv[6]); <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00081"></a>00081   <span class="keywordtype">int</span> samplesNeeded = atoi(argv[7]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00082"></a>00082   <span class="keywordtype">int</span> thinout = atoi(argv[8]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00083"></a>00083   
<a name="l00084"></a>00084   <span class="comment">/* note that all chains will be sampled in parallel, once burnin has happened,</span>
<a name="l00085"></a>00085 <span class="comment">   * eg if we want 100 samples and have 4 chains and thinout 5, then we will sample</span>
<a name="l00086"></a>00086 <span class="comment">   * the last state from each chain as soon as convergence has been achieved </span>
<a name="l00087"></a>00087 <span class="comment">   * (and thus get 4 samples), and then wait 5-1 = 4 states, and on the 5th, again </span>
<a name="l00088"></a>00088 <span class="comment">   * sample from all 4 chains (assuming that convergence is still okay), etc etc</span>
<a name="l00089"></a>00089 <span class="comment">   * so it will take 1 + (100-4)/4*5 = 1 + 25*5 = 1 + 120 = 121 states from burnin inclusive</span>
<a name="l00090"></a>00090 <span class="comment">   * of the burnin state itself to get the full sample */</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   <span class="keywordtype">double</span> tol = atof(argv[9]); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00093"></a>00093   <span class="keywordtype">int</span> minPoints = atoi(argv[10]); <span class="comment">//minPoints</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   <span class="comment">//========Hardcoded parameters====================================//</span>
<a name="l00096"></a>00096   <span class="comment">//int maxLoops = 5000; // maximum changes of state from initial state to try</span>
<a name="l00097"></a>00097   <span class="comment">//int samplesNeeded = 10; // how many samples do we want (ie once chains have burned in)</span>
<a name="l00098"></a>00098   <span class="comment">//int thinout = 5; // sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00099"></a>00099   <span class="comment">//cxsc::real tol(0.1); //tolerance for automated burn in criteria</span>
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00102"></a>00102   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00103"></a>00103     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00104"></a>00104   }
<a name="l00105"></a>00105   <span class="comment">//===========done with working on parameters==========================//</span>
<a name="l00106"></a>00106   
<a name="l00107"></a>00107   <span class="keywordflow">try</span> {
<a name="l00108"></a>00108     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(dirName, simDataFiles,
<a name="l00109"></a>00109         obsDataFile, wt, dx,
<a name="l00110"></a>00110         maxLoops, samplesNeeded, thinout, tol, minPoints);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     std::string samplesCollAverageFilename = dirName;
<a name="l00113"></a>00113     samplesCollAverageFilename += <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00114"></a>00114     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
<a name="l00115"></a>00115   
<a name="l00116"></a>00116     avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
<a name="l00117"></a>00117     
<a name="l00118"></a>00118     <span class="keywordflow">return</span> 0;
<a name="l00119"></a>00119   }
<a name="l00120"></a>00120   <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
<a name="l00121"></a>00121     cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
<a name="l00122"></a>00122       &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00123"></a>00123   }
<a name="l00124"></a>00124 } 
<a name="l00125"></a>00125     
<a name="l00126"></a><a class="code" href="AHABCObsMCMCL1_8cpp.shtml#a0263b55ed3691eb49251cd058f57ddfb">00126</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">string</span> dirName, <span class="keywordtype">string</span> simDataFiles,
<a name="l00127"></a>00127 <span class="keywordtype">string</span> obsDataFile, <span class="keywordtype">double</span> wt, <span class="keywordtype">double</span> dx,
<a name="l00128"></a>00128 <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol, <span class="keywordtype">int</span> minPoints)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130   <span class="comment">//=========Some preliminaries for AHABC==================================//</span>
<a name="l00131"></a>00131    <span class="comment">//set formatting fors input to oss</span>
<a name="l00132"></a>00132     ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00133"></a>00133     os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00134"></a>00134     os.precision(16);
<a name="l00135"></a>00135    
<a name="l00136"></a>00136    <span class="comment">// set up a random number generator for uniform rvs in priority queue</span>
<a name="l00137"></a>00137     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00138"></a>00138     gsl_rng * r;
<a name="l00139"></a>00139     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00140"></a>00140     gsl_rng_env_setup();
<a name="l00141"></a>00141     T = gsl_rng_default;
<a name="l00142"></a>00142     r = gsl_rng_alloc (T);
<a name="l00143"></a>00143     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00144"></a>00144     gsl_rng_set(r, s);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146    <span class="comment">//-------Setup to read in data files------------------------------------//</span>
<a name="l00147"></a>00147    <span class="comment">//Read in simulated files</span>
<a name="l00148"></a>00148   <span class="comment">//create a vector object to store the filenames of simulated data</span>
<a name="l00149"></a>00149   vector&lt;string&gt; simDataFilesVec;
<a name="l00150"></a>00150   <span class="keywordtype">string</span> fileName;
<a name="l00151"></a>00151   cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
<a name="l00152"></a>00152   ifstream file; <span class="comment">// create file for input</span>
<a name="l00153"></a>00153   file.open(simDataFiles.c_str());
<a name="l00154"></a>00154   <span class="comment">// check if this file exists or not</span>
<a name="l00155"></a>00155   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
<a name="l00156"></a>00156     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00157"></a>00157          &lt;&lt; endl;
<a name="l00158"></a>00158     exit(1);
<a name="l00159"></a>00159   }
<a name="l00160"></a>00160     <span class="comment">// else read in the filenames</span>
<a name="l00161"></a>00161   <span class="comment">// store the filenames in the vector simDataFilesVec</span>
<a name="l00162"></a>00162   <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
<a name="l00163"></a>00163     file &gt;&gt; fileName;
<a name="l00164"></a>00164     cout &lt;&lt; fileName &lt;&lt; endl; 
<a name="l00165"></a>00165     simDataFilesVec.push_back(fileName);
<a name="l00166"></a>00166   }
<a name="l00167"></a>00167   <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
<a name="l00168"></a>00168   simDataFilesVec.pop_back();
<a name="l00169"></a>00169   
<a name="l00170"></a>00170   <span class="comment">//Read in observed files</span>
<a name="l00171"></a>00171   <span class="comment">//create a container to keep observed data</span>
<a name="l00172"></a>00172   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> obsData;
<a name="l00173"></a>00173   
<a name="l00174"></a>00174   <span class="comment">//container to keep individual data containers</span>
<a name="l00175"></a>00175   vector&lt;RVecData&gt; unlabDataVec; <span class="comment">//unlabelled data</span>
<a name="l00176"></a>00176 
<a name="l00177"></a>00177    <span class="comment">//container to keep both simulated and observed data to make root box</span>
<a name="l00178"></a>00178    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
<a name="l00179"></a>00179   dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>; 
<a name="l00180"></a>00180   
<a name="l00181"></a>00181   <span class="comment">// put all simulated data into container pointed to by dataPtr</span>
<a name="l00182"></a>00182   cout &lt;&lt; <span class="stringliteral">&quot;\nPut simulated data in a container to get rootbox: &quot;</span> &lt;&lt; endl;   
<a name="l00183"></a>00183   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; simDataFilesVec.size(); i++) {
<a name="l00184"></a>00184     cout &lt;&lt; simDataFilesVec[i] &lt;&lt; endl;
<a name="l00185"></a>00185     <span class="comment">//read into allData</span>
<a name="l00186"></a>00186     <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), simDataFilesVec[i], 0);
<a name="l00187"></a>00187     <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
<a name="l00188"></a>00188       cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00189"></a>00189         &lt;&lt; endl;
<a name="l00190"></a>00190       exit(1);
<a name="l00191"></a>00191     } 
<a name="l00192"></a>00192       <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr at iteration &quot; &lt;&lt; i &lt;&lt; endl;</span>
<a name="l00193"></a>00193     <span class="comment">//Then read each data set and push into unlabDataVec </span>
<a name="l00194"></a>00194      cout &lt;&lt; <span class="stringliteral">&quot;\nPut simulated data in container for filtering and labelling: &quot;</span> &lt;&lt; endl;
<a name="l00195"></a>00195     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> unlabIndData;
<a name="l00196"></a>00196     <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(unlabIndData, simDataFilesVec[i], 0);
<a name="l00197"></a>00197     unlabDataVec.push_back(unlabIndData);
<a name="l00198"></a>00198   }
<a name="l00199"></a>00199   
<a name="l00200"></a>00200   <span class="comment">//put observed data into container pointed to by dataPtr</span>
<a name="l00201"></a>00201   cout &lt;&lt; <span class="stringliteral">&quot;\nPut observed data in container with simulated data to get rootbox:&quot;</span> 
<a name="l00202"></a>00202       &lt;&lt; endl;
<a name="l00203"></a>00203   <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), obsDataFile, 0);
<a name="l00204"></a>00204   <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
<a name="l00205"></a>00205       cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; obsDataFile &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00206"></a>00206         &lt;&lt; endl;
<a name="l00207"></a>00207       exit(1);
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209   <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00210"></a>00210   <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
<a name="l00211"></a>00211   cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">//also read into obsData container</span>
<a name="l00214"></a>00214   cout &lt;&lt; <span class="stringliteral">&quot;\nPut observed data in container for observed data only&quot;</span> &lt;&lt; endl;
<a name="l00215"></a>00215   <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(obsData, obsDataFile, 0);
<a name="l00216"></a>00216   <span class="comment">//point mass filtering and data labelling for observed data</span>
<a name="l00217"></a>00217   <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labObsData;
<a name="l00218"></a>00218   <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// only filter for 1D</span>
<a name="l00219"></a>00219     map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
<a name="l00220"></a>00220     <span class="comment">//run a point mass filter to get &quot;atomic&quot; points</span>
<a name="l00221"></a>00221     cout &lt;&lt; <span class="stringliteral">&quot;run point mass filter over observed data:&quot;</span> &lt;&lt; endl;
<a name="l00222"></a>00222     <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>(obsData, CountsMap);
<a name="l00223"></a>00223     <span class="comment">//EMFMap is not needed anymore actually - will see how i can turn it off or do something else</span>
<a name="l00224"></a>00224        <span class="comment">//TODO: see TODO comment in &quot;../../../src/sptools.cpp&quot; 1220ish Line</span>
<a name="l00225"></a>00225     map&lt;rvector, double, less&lt;rvector&gt; &gt; EMFMap; 
<a name="l00226"></a>00226     cout &lt;&lt; <span class="stringliteral">&quot;label data&quot;</span> &lt;&lt; endl;
<a name="l00227"></a>00227     <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>(obsData, labObsData, CountsMap, EMFMap);
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229   <span class="keywordflow">else</span> { <span class="comment">// for now make RVecData into RSSample object for higher dim</span>
<a name="l00230"></a>00230      <span class="comment">//TODO: This can be done (not for GT&#39;s PhD necessarily) &quot;trans-dimensional density estimation!&quot;</span>
<a name="l00231"></a>00231      <span class="comment">//this is a beautiful extension of estimating axis-parallel low-dimensional atomic densities </span>
<a name="l00232"></a>00232      <span class="comment">//inside root box in R^d or other subsets specified by prior constraints</span>
<a name="l00233"></a>00233     RVecData::iterator it;
<a name="l00234"></a>00234     <span class="keywordflow">for</span> (it = obsData.begin(); it &lt; obsData.end(); it++) {
<a name="l00235"></a>00235         <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> labThisData;
<a name="l00236"></a>00236         labThisData.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = (*it);
<a name="l00237"></a>00237         labThisData.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = 1;
<a name="l00238"></a>00238         <span class="comment">//labThisData.Print(cout);</span>
<a name="l00239"></a>00239         labObsData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back(labThisData);
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241   } <span class="comment">// end of labelling observed data</span>
<a name="l00242"></a>00242     
<a name="l00243"></a>00243   <span class="comment">//Make root box from ALL the data</span>
<a name="l00244"></a>00244   cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00245"></a>00245   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
<a name="l00246"></a>00246   histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00247"></a>00247    <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr AFTER iteration &quot;  &lt;&lt; endl;</span>
<a name="l00248"></a>00248   histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
<a name="l00249"></a>00249   ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00250"></a>00250   
<a name="l00251"></a>00251   <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
<a name="l00252"></a>00252   <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
<a name="l00253"></a>00253   <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
<a name="l00254"></a>00254   
<a name="l00255"></a>00255   <span class="comment">//----go through each RVecData in unlabData for the following:------------//</span>
<a name="l00256"></a>00256   <span class="comment">//1. point mass filtering</span>
<a name="l00257"></a>00257   <span class="comment">//2. build histogram  </span>
<a name="l00258"></a>00258   <span class="comment">//3. put observed data into histogram</span>
<a name="l00259"></a>00259   <span class="comment">//4. get estimated log-likelihood</span>
<a name="l00260"></a>00260   
<a name="l00261"></a>00261   <span class="comment">//Set up containers to contain weights for each mixture model</span>
<a name="l00262"></a>00262   vector&lt; map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt; WeightPMVec;<span class="comment">//for point mass</span>
<a name="l00263"></a>00263   vector&lt;double&gt; WeightHistVec; <span class="comment">//for histogram</span>
<a name="l00264"></a>00264   
<a name="l00265"></a>00265   <span class="comment">//Set up containers to contain log-likelihood for the observed data</span>
<a name="l00266"></a>00266   <span class="comment">//for each histogram </span>
<a name="l00267"></a>00267   vector&lt;real&gt; logLikVec;
<a name="l00268"></a>00268   
<a name="l00269"></a>00269   <span class="comment">//Now loop through each RVecData</span>
<a name="l00270"></a>00270   vector&lt;RVecData&gt;::iterator unlabDataIt;
<a name="l00271"></a>00271   RVecData::iterator dataIt;
<a name="l00272"></a>00272   <span class="keywordtype">size_t</span> D = 0;
<a name="l00273"></a>00273   <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
<a name="l00274"></a>00274       unlabDataIt++) 
<a name="l00275"></a>00275   {
<a name="l00276"></a>00276     ostringstream stmD;
<a name="l00277"></a>00277     stmD &lt;&lt; D+1;
<a name="l00278"></a>00278     cout &lt;&lt; <span class="stringliteral">&quot;==============Simulated Data &quot;</span> &lt;&lt; D+1 &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
<a name="l00279"></a>00279     <span class="comment">//---------point mass filtering and data labelling-------------//</span>
<a name="l00280"></a>00280     <span class="comment">//simulated data</span>
<a name="l00281"></a>00281     <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labData; <span class="comment">//for point mass filtering </span>
<a name="l00282"></a>00282     <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">//for now, do this only in 1D</span>
<a name="l00283"></a>00283       <span class="comment">//make a map for value of x (the key) and each of its respective </span>
<a name="l00284"></a>00284       <span class="comment">//counts (the value)</span>
<a name="l00285"></a>00285       map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
<a name="l00286"></a>00286       <span class="comment">//run a point mass filtering to get &quot;atomic&quot; points</span>
<a name="l00287"></a>00287       <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>((*unlabDataIt), CountsMap);
<a name="l00288"></a>00288       <span class="comment">//Is there a more efficient way for the labelling:</span>
<a name="l00289"></a>00289       <span class="comment">//Iterate through the data set again. Label point-mass with 0 and </span>
<a name="l00290"></a>00290       <span class="comment">//the rest with 1.</span>
<a name="l00291"></a>00291       <span class="comment">//Also get a map for the EMF of  point mass data</span>
<a name="l00292"></a>00292       map&lt;rvector,double, less&lt;rvector&gt; &gt; EMFMap;
<a name="l00293"></a>00293       map&lt;rvector, double, less&lt;rvector&gt; &gt;::iterator EMFMapIt;
<a name="l00294"></a>00294       <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>((*unlabDataIt), labData, CountsMap, EMFMap);
<a name="l00295"></a>00295             
<a name="l00296"></a>00296       <span class="comment">/*optional: output RSSample this to .txt</span>
<a name="l00297"></a>00297 <span class="comment">      vector&lt;LabPnt&gt;::iterator LabPntIt; //to iterate over labData.Samples</span>
<a name="l00298"></a>00298 <span class="comment">      string fileName = &quot;Labelled&quot;;</span>
<a name="l00299"></a>00299 <span class="comment">      fileName += simDataFilesVec[D];</span>
<a name="l00300"></a>00300 <span class="comment">      oftream os;</span>
<a name="l00301"></a>00301 <span class="comment">      os.open(fileName.c_str());</span>
<a name="l00302"></a>00302 <span class="comment">      for (LabPntIt = labData.Samples.begin(); LabPntIt &lt; labData.Samples.end();</span>
<a name="l00303"></a>00303 <span class="comment">          LabPntIt++) {</span>
<a name="l00304"></a>00304 <span class="comment">        (*LabPntIt).Print(os);</span>
<a name="l00305"></a>00305 <span class="comment">      }</span>
<a name="l00306"></a>00306 <span class="comment">      os &lt;&lt; flush;</span>
<a name="l00307"></a>00307 <span class="comment">      */</span> <span class="comment">//end of optional output</span>
<a name="l00308"></a>00308       
<a name="l00309"></a>00309       <span class="comment">//Store the weights</span>
<a name="l00310"></a>00310       cout &lt;&lt; <span class="stringliteral">&quot;Atomic points and their EMFs&quot;</span> &lt;&lt; endl;
<a name="l00311"></a>00311       <span class="keywordtype">double</span> pmWeight = 0.0;
<a name="l00312"></a>00312       <span class="keywordtype">double</span> MaxpmWeight = 0.0;
<a name="l00313"></a>00313       rvector AtomWithMaxpm = EMFMap.begin()-&gt;first;
<a name="l00314"></a>00314       <span class="keywordflow">for</span> (EMFMapIt = EMFMap.begin(); EMFMapIt != EMFMap.end(); EMFMapIt++) {
<a name="l00315"></a>00315         <span class="keywordflow">if</span>(EMFMapIt-&gt;second &gt; MaxpmWeight) 
<a name="l00316"></a>00316           {<span class="comment">//a messy way to keep the max atom and weight...</span>
<a name="l00317"></a>00317            MaxpmWeight=EMFMapIt-&gt;second;
<a name="l00318"></a>00318            AtomWithMaxpm = EMFMapIt-&gt;first;
<a name="l00319"></a>00319           }
<a name="l00320"></a>00320         pmWeight += EMFMapIt-&gt;second;
<a name="l00321"></a>00321         <span class="keywordflow">if</span>( EMFMapIt-&gt;second &lt; 0.0)<span class="comment">// use &lt; to skip the ? below</span>
<a name="l00322"></a>00322           {
<a name="l00323"></a>00323            cout &lt;&lt; setprecision(16) &lt;&lt; EMFMapIt-&gt;first 
<a name="l00324"></a>00324            &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; EMFMapIt-&gt;second &lt;&lt; endl;
<a name="l00325"></a>00325            cout &lt;&lt; <span class="stringliteral">&quot;is this atomic in your experimental precision?&quot;</span> &lt;&lt; endl; 
<a name="l00326"></a>00326            getchar();
<a name="l00327"></a>00327           }
<a name="l00328"></a>00328       }
<a name="l00329"></a>00329       cout &lt;&lt; <span class="stringliteral">&quot;Maximum Weight of a set of Atoms of size &quot;</span>&lt;&lt; EMFMap.size() 
<a name="l00330"></a>00330         &lt;&lt; <span class="stringliteral">&quot; is &quot;</span> &lt;&lt; MaxpmWeight &lt;&lt; <span class="stringliteral">&quot; at &quot;</span> &lt;&lt; AtomWithMaxpm &lt;&lt; endl;
<a name="l00331"></a>00331       WeightHistVec.push_back(1.0 - pmWeight);
<a name="l00332"></a>00332       WeightPMVec.push_back(EMFMap);
<a name="l00333"></a>00333       
<a name="l00334"></a>00334        <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
<a name="l00335"></a>00335         <span class="comment">//and the normalised histogram</span>
<a name="l00336"></a>00336         <span class="keywordtype">string</span> weightFileName = dirName;
<a name="l00337"></a>00337         weightFileName += <span class="stringliteral">&quot;Weights&quot;</span>;
<a name="l00338"></a>00338       ostringstream stm1;
<a name="l00339"></a>00339       stm1 &lt;&lt; D;
<a name="l00340"></a>00340       weightFileName += stm1.str();
<a name="l00341"></a>00341       weightFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00342"></a>00342       os.open(weightFileName.c_str());
<a name="l00343"></a>00343       map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
<a name="l00344"></a>00344       <span class="keywordflow">for</span> (mapIt = (EMFMap).begin(); mapIt != (EMFMap).end(); mapIt++) {
<a name="l00345"></a>00345         os &lt;&lt; mapIt-&gt;second &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;first;
<a name="l00346"></a>00346       }
<a name="l00347"></a>00347        os &lt;&lt; endl;
<a name="l00348"></a>00348       os &lt;&lt; flush;
<a name="l00349"></a>00349        os.close();
<a name="l00350"></a>00350        cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
<a name="l00351"></a>00351        cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;
<a name="l00352"></a>00352     
<a name="l00353"></a>00353     } <span class="comment">// end of point mass filtering for 1D</span>
<a name="l00354"></a>00354 
<a name="l00355"></a>00355     cout &lt;&lt; <span class="stringliteral">&quot;\nMaking histogram for simulated data in &quot;</span> &lt;&lt; simDataFilesVec[D] 
<a name="l00356"></a>00356         &lt;&lt; endl;
<a name="l00357"></a>00357 <span class="comment">// start by making the histograms that are the starting points for our chains</span>
<a name="l00358"></a>00358     <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00359"></a>00359     <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00360"></a>00360     <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00361"></a>00361     <span class="keywordtype">bool</span> successfulInsertionFirst, successfulInsertionSecond, successfulInsertionThird;
<a name="l00362"></a>00362     <span class="keywordtype">bool</span> successfulPQSplitSecond;
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     <span class="comment">//pointers to Adaptivehistogram objects as starting conditions</span>
<a name="l00365"></a>00365     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst;
<a name="l00366"></a>00366     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond;
<a name="l00367"></a>00367     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistThird;
<a name="l00368"></a>00368     <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00369"></a>00369       <span class="comment">//histogram 1</span>
<a name="l00370"></a>00370       myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00371"></a>00371       <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00372"></a>00372       successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00373"></a>00373       
<a name="l00374"></a>00374       <span class="comment">//histogram 2</span>
<a name="l00375"></a>00375       myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00376"></a>00376       <span class="comment">// the same data into the second histogram</span>
<a name="l00377"></a>00377       successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00378"></a>00378       successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00379"></a>00379       <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00380"></a>00380         <span class="comment">// set up function objects for a priority split</span>
<a name="l00381"></a>00381         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00382"></a>00382         <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00383"></a>00383         <span class="keywordtype">size_t</span> minLeaves = 10;
<a name="l00384"></a>00384         <span class="comment">//size_t minLeaves = (labData.Samples.size()/50); // 20 when n = 1000</span>
<a name="l00385"></a>00385         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00386"></a>00386         <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00387"></a>00387         <span class="comment">// do the priority split</span>
<a name="l00388"></a>00388         successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00389"></a>00389              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00390"></a>00390       }
<a name="l00391"></a>00391       
<a name="l00392"></a>00392     } <span class="comment">//end of making starting conditions for dataDim = 1</span>
<a name="l00393"></a>00393     
<a name="l00394"></a>00394     <span class="keywordflow">else</span> { <span class="comment">// at current i do not have a point-mass filter set up for data with &gt; 1. </span>
<a name="l00395"></a>00395          <span class="comment">// But should bring in Jenny&#39;s code for filtering.</span>
<a name="l00396"></a>00396       <span class="comment">//histogram 1</span>
<a name="l00397"></a>00397       myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00398"></a>00398       <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00399"></a>00399       successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00400"></a>00400       
<a name="l00401"></a>00401       <span class="comment">//histogram 2</span>
<a name="l00402"></a>00402       myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00403"></a>00403       <span class="comment">// the same data into the second histogram</span>
<a name="l00404"></a>00404       successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00405"></a>00405       successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00406"></a>00406       <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00407"></a>00407         <span class="comment">// set up function objects for a priority split</span>
<a name="l00408"></a>00408         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00409"></a>00409         <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00410"></a>00410         <span class="comment">//size_t minLeaves = 50;</span>
<a name="l00411"></a>00411         <span class="keywordtype">size_t</span> minLeaves = ((*unlabDataIt).size()/50); <span class="comment">// 20 when n = 1000</span>
<a name="l00412"></a>00412         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00413"></a>00413         <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00414"></a>00414         <span class="comment">// do the priority split</span>
<a name="l00415"></a>00415         successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00416"></a>00416              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00417"></a>00417       }
<a name="l00418"></a>00418     } <span class="comment">// end of making histograms for dataDim &gt; 1</span>
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="preprocessor">    #ifdef FORCEFAILINSERTION</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span>      <span class="comment">// debugging - force a failure here to check what program does</span>
<a name="l00422"></a>00422       successfulInsertionThird = <span class="keyword">false</span>;
<a name="l00423"></a>00423 <span class="preprocessor">    #endif</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span>
<a name="l00425"></a>00425     <span class="comment">// set up for MCMC</span>
<a name="l00426"></a>00426     <span class="comment">// our return object, if all goes well</span>
<a name="l00427"></a>00427     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* myCollPtr;
<a name="l00428"></a>00428     myCollPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; 
<a name="l00429"></a>00429   
<a name="l00430"></a>00430     <span class="comment">//set up for output</span>
<a name="l00431"></a>00431     <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00432"></a>00432     <span class="keywordtype">int</span> prec = 15;
<a name="l00433"></a>00433     cout &lt;&lt; cxsc::SaveOpt;
<a name="l00434"></a>00434     cout &lt;&lt; cxsc::Variable;
<a name="l00435"></a>00435     cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00436"></a>00436   
<a name="l00437"></a>00437     <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond) {
<a name="l00438"></a>00438       <span class="comment">// containers for adaptive histograms</span>
<a name="l00439"></a>00439       <span class="comment">// the starting points of the chains</span>
<a name="l00440"></a>00440       vector&lt; AdaptiveHistogram* &gt; hists;
<a name="l00441"></a>00441       hists.push_back(myHistFirst);
<a name="l00442"></a>00442       hists.push_back(myHistSecond);
<a name="l00443"></a>00443   
<a name="l00444"></a>00444       <span class="comment">// how many chains are to be run = number starting histograms</span>
<a name="l00445"></a>00445       <span class="keywordtype">size_t</span> chains = hists.size(); 
<a name="l00446"></a>00446       
<a name="l00447"></a>00447       <span class="keywordflow">if</span> (chains &lt; 2) {
<a name="l00448"></a>00448         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
<a name="l00449"></a>00449       }
<a name="l00450"></a>00450   
<a name="l00451"></a>00451       <span class="comment">// set up ingredients for MCMC</span>
<a name="l00452"></a>00452       <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal; <span class="comment">// set up proposal distribution object</span>
<a name="l00453"></a>00453       <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior; <span class="comment">// set up prior distribution object</span>
<a name="l00454"></a>00454   
<a name="l00455"></a>00455       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00456"></a>00456       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00457"></a>00457   
<a name="l00458"></a>00458       gsl_rng * rgsl = NULL;
<a name="l00459"></a>00459   
<a name="l00460"></a>00460       <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00461"></a>00461   
<a name="l00462"></a>00462       <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00463"></a>00463       <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00464"></a>00464       <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00465"></a>00465       <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00466"></a>00466       gsl_rng_env_setup();
<a name="l00467"></a>00467       tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00468"></a>00468       rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00469"></a>00469       
<a name="l00470"></a>00470       <span class="comment">// set a seed for the data</span>
<a name="l00471"></a>00471       <span class="keywordtype">int</span> mcmcSeed = 1234;
<a name="l00472"></a>00472       gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
<a name="l00473"></a>00473   
<a name="l00474"></a>00474       <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00475"></a>00475       vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00476"></a>00476       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00477"></a>00477       <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00478"></a>00478   
<a name="l00479"></a>00479       vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00480"></a>00480       vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00481"></a>00481       vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00482"></a>00482       vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
<a name="l00483"></a>00483       vector&lt;string&gt; L1ColNames(chains);
<a name="l00484"></a>00484       vector&lt;string&gt; L1RunningSumColNames(chains);
<a name="l00485"></a>00485       vector&lt;string&gt; L1SampleVarianceColNames(chains);
<a name="l00486"></a>00486       
<a name="l00487"></a>00487       std::string baseSequenceStateFilename = dirName;
<a name="l00488"></a>00488       baseSequenceStateFilename += <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00489"></a>00489       baseSequenceStateFilename += stmD.str();
<a name="l00490"></a>00490       std::string baseSequenceStateCollationFilename = dirName;
<a name="l00491"></a>00491       baseSequenceStateCollationFilename += <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00492"></a>00492       baseSequenceStateCollationFilename +=  stmD.str();
<a name="l00493"></a>00493       std::string baseSequenceStateAverageFilename = dirName; 
<a name="l00494"></a>00494       baseSequenceStateAverageFilename += <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00495"></a>00495       baseSequenceStateAverageFilename += stmD.str();
<a name="l00496"></a>00496       std::string baseSequenceStateDiffsToAverageFilename = dirName; 
<a name="l00497"></a>00497       baseSequenceStateDiffsToAverageFilename += <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
<a name="l00498"></a>00498       baseSequenceStateDiffsToAverageFilename += stmD.str();
<a name="l00499"></a>00499       
<a name="l00500"></a>00500       std::string  baseL1ColName = dirName;
<a name="l00501"></a>00501       baseL1ColName += <span class="stringliteral">&quot;L1_&quot;</span>;
<a name="l00502"></a>00502       std::string baseL1RunningSumColName = dirName; 
<a name="l00503"></a>00503       baseL1RunningSumColName += <span class="stringliteral">&quot;L1Sum_&quot;</span>;
<a name="l00504"></a>00504       std::string baseL1SampleVarianceColName = dirName;
<a name="l00505"></a>00505       baseL1SampleVarianceColName += <span class="stringliteral">&quot;L1Var_&quot;</span>;
<a name="l00506"></a>00506       std::string overallL1RunningSumColName = dirName;
<a name="l00507"></a>00507       overallL1RunningSumColName += <span class="stringliteral">&quot;OverallL1Sum&quot;</span>;
<a name="l00508"></a>00508       
<a name="l00509"></a>00509       <span class="comment">// files for outputing samples</span>
<a name="l00510"></a>00510       std::string samplesCollFilename = dirName;
<a name="l00511"></a>00511       samplesCollFilename += <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto&quot;</span>;
<a name="l00512"></a>00512       samplesCollFilename += stmD.str();
<a name="l00513"></a>00513       samplesCollFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00514"></a>00514       std::string samplesLogFilename = dirName;
<a name="l00515"></a>00515       samplesLogFilename += <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto&quot;</span>;
<a name="l00516"></a>00516       samplesLogFilename += stmD.str();
<a name="l00517"></a>00517       samplesLogFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00518"></a>00518       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollFilename);
<a name="l00519"></a>00519       
<a name="l00520"></a>00520       <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
<a name="l00521"></a>00521       <span class="comment">// but at the moment I have not done anything about graphing</span>
<a name="l00522"></a>00522       <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l00523"></a>00523         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00524"></a>00524       }
<a name="l00525"></a>00525       
<a name="l00526"></a>00526       <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
<a name="l00527"></a>00527       <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
<a name="l00528"></a>00528       
<a name="l00529"></a>00529       <span class="comment">// a name for the file of diagnostics </span>
<a name="l00530"></a>00530       std::string GRL1Filename = dirName;
<a name="l00531"></a>00531       GRL1Filename += <span class="stringliteral">&quot;GelmanRubinL1Scalar&quot;</span>;
<a name="l00532"></a>00532       GRL1Filename += stmD.str();
<a name="l00533"></a>00533       GRL1Filename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00534"></a>00534       <span class="comment">//outputFileStart(GRL1Filename);</span>
<a name="l00535"></a>00535       
<a name="l00536"></a>00536       <span class="comment">// a name for the file of working calculations for the diagnostics </span>
<a name="l00537"></a>00537       std::string GRL1WorkingCalcsFilename = dirName;
<a name="l00538"></a>00538       GRL1WorkingCalcsFilename+=  <span class="stringliteral">&quot;GelmanRubinL1ScalarWorkingCalcs&quot;</span>;
<a name="l00539"></a>00539       GRL1WorkingCalcsFilename += stmD.str();
<a name="l00540"></a>00540       GRL1WorkingCalcsFilename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00541"></a>00541       <span class="comment">//outputFileStart(GRL1WorkingCalcsFilename);</span>
<a name="l00542"></a>00542   
<a name="l00543"></a>00543       <span class="comment">/* containers for summaries for the </span>
<a name="l00544"></a>00544 <span class="comment">      * L1-distances-to-average scalar convergence diagnostics */</span>
<a name="l00545"></a>00545 
<a name="l00546"></a>00546       <span class="comment">/* for each chain we need a container for current L1-distances-to-average </span>
<a name="l00547"></a>00547 <span class="comment">       * relative to the current average for all histogram states in the chain so far.</span>
<a name="l00548"></a>00548 <span class="comment">       * This is reused and overwritten each time a state is added to the chain</span>
<a name="l00549"></a>00549 <span class="comment">       * and is just a working-space to facilitate getting the L1s we want. */</span>
<a name="l00550"></a>00550       std::vector &lt; RealVec &gt; currentL1s(chains); 
<a name="l00551"></a>00551   
<a name="l00552"></a>00552       <span class="comment">// one vector of L1-distances-to-average as a RealVec for each chain</span>
<a name="l00553"></a>00553       std::vector &lt; RealVec &gt;* distancesL1Ptr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00554"></a>00554   
<a name="l00555"></a>00555       <span class="comment">/* vector containing one running sum of L1-distances-to-average for each chain</span>
<a name="l00556"></a>00556 <span class="comment">      we can work out the average v = L1 for each chain so far from this</span>
<a name="l00557"></a>00557 <span class="comment">      start with a running sum of 0.0 for each chain */</span>
<a name="l00558"></a>00558       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00559"></a>00559       
<a name="l00560"></a>00560       <span class="comment">/* vector containing one running sum of </span>
<a name="l00561"></a>00561 <span class="comment">      squared-L1-distances-to-average for each chain</span>
<a name="l00562"></a>00562 <span class="comment">      we can work out the average of the squared v&#39;s ie v^2 = L1^2</span>
<a name="l00563"></a>00563 <span class="comment">      for each chain so far from this</span>
<a name="l00564"></a>00564 <span class="comment">      start with a running sum of 0.0 for each chain.</span>
<a name="l00565"></a>00565 <span class="comment">      (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00566"></a>00566 <span class="comment">      when accumulating products of reals) */</span>
<a name="l00567"></a>00567       <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumL1Squared(chains, cxsc::dotprecision(0.0));
<a name="l00568"></a>00568   
<a name="l00569"></a>00569       <span class="comment">/* value of running sum of L1-distances-to-average over all chains</span>
<a name="l00570"></a>00570 <span class="comment">      we can work out the average v = L1 over all chains so far from this */</span>
<a name="l00571"></a>00571       real runningSumL1AllChains = cxsc::real(0.0);
<a name="l00572"></a>00572       
<a name="l00573"></a>00573 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00574"></a>00574 <span class="preprocessor"></span>        <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00575"></a>00575         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1OverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00576"></a>00576         <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00577"></a>00577         std::vector &lt; RealVec &gt;* runningSumL1ChainsPtr 
<a name="l00578"></a>00578                   = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00579"></a>00579         <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00580"></a>00580         std::vector &lt; RealVec &gt;* sampleVariancesPtr 
<a name="l00581"></a>00581                   = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00582"></a>00582         <span class="comment">/* keep a vector of the flag for L1 convergence</span>
<a name="l00583"></a>00583 <span class="comment">         * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00584"></a>00584         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatL1FlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00585"></a>00585         
<a name="l00586"></a>00586         <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<a name="l00587"></a>00587 <span class="comment">         * (not a real, but easier to output it if we treat it like one) */</span>
<a name="l00588"></a>00588         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00589"></a>00589 <span class="preprocessor">      #endif</span>
<a name="l00590"></a>00590 <span class="preprocessor"></span>  
<a name="l00591"></a>00591       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Ws_L1</span>
<a name="l00592"></a>00592       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Bs_L1</span>
<a name="l00593"></a>00593       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the estimated var(v)</span>
<a name="l00594"></a>00594       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sqrtRhat_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the sqrtRhats</span>
<a name="l00595"></a>00595   
<a name="l00596"></a>00596       <span class="comment">// container of each state at each sequence</span>
<a name="l00597"></a>00597       vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
<a name="l00598"></a>00598   
<a name="l00599"></a>00599       <span class="comment">//container for the collation of the averages over each sequence at each state</span>
<a name="l00600"></a>00600       <span class="comment">//vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;</span>
<a name="l00601"></a>00601   
<a name="l00602"></a>00602       <span class="comment">//AdaptiveHistogramCollator masterCollator; // not newed so no need to delete</span>
<a name="l00603"></a>00603   
<a name="l00604"></a>00604       <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00605"></a>00605   
<a name="l00606"></a>00606       <span class="comment">// this loop is just setting up containers of file names</span>
<a name="l00607"></a>00607       <span class="comment">// and getting info from the starting histograms that is</span>
<a name="l00608"></a>00608       <span class="comment">// needed to start the chains</span>
<a name="l00609"></a>00609       <span class="comment">// and a container of collators, one for each chain,</span>
<a name="l00610"></a>00610       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00611"></a>00611         
<a name="l00612"></a>00612         <span class="comment">// do not comment these out</span>
<a name="l00613"></a>00613         std::ostringstream stm1;
<a name="l00614"></a>00614         stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00615"></a>00615         sequenceStateFilenames[ci] = stm1.str();
<a name="l00616"></a>00616         <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00617"></a>00617   
<a name="l00618"></a>00618 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00619"></a>00619 <span class="preprocessor"></span>          {
<a name="l00620"></a>00620             std::ostringstream stm;
<a name="l00621"></a>00621             stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00622"></a>00622             sequenceCollationFilenames[ci] = stm.str();
<a name="l00623"></a>00623             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00624"></a>00624           }
<a name="l00625"></a>00625           {
<a name="l00626"></a>00626             std::ostringstream stm;
<a name="l00627"></a>00627             stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00628"></a>00628             sequenceAverageFilenames[ci] = stm.str();
<a name="l00629"></a>00629             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00630"></a>00630           }
<a name="l00631"></a>00631           {
<a name="l00632"></a>00632             std::ostringstream stm;
<a name="l00633"></a>00633             stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00634"></a>00634             sequenceDiffsToAverageFilenames[ci] = stm.str();
<a name="l00635"></a>00635             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
<a name="l00636"></a>00636           }
<a name="l00637"></a>00637           {
<a name="l00638"></a>00638             std::ostringstream stm;
<a name="l00639"></a>00639             stm &lt;&lt; baseL1ColName &lt;&lt; ci;
<a name="l00640"></a>00640             L1ColNames[ci] = stm.str();
<a name="l00641"></a>00641           }
<a name="l00642"></a>00642           {
<a name="l00643"></a>00643             std::ostringstream stm;
<a name="l00644"></a>00644             stm &lt;&lt; baseL1RunningSumColName &lt;&lt; ci;
<a name="l00645"></a>00645             L1RunningSumColNames[ci] = stm.str();
<a name="l00646"></a>00646           }
<a name="l00647"></a>00647           
<a name="l00648"></a>00648           {
<a name="l00649"></a>00649             std::ostringstream stm;
<a name="l00650"></a>00650             stm &lt;&lt; baseL1SampleVarianceColName &lt;&lt; ci;
<a name="l00651"></a>00651             L1SampleVarianceColNames[ci] = stm.str();
<a name="l00652"></a>00652           }
<a name="l00653"></a>00653 <span class="preprocessor">        #endif</span>
<a name="l00654"></a>00654 <span class="preprocessor"></span>        <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<a name="l00655"></a>00655 <span class="comment">        * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<a name="l00656"></a>00656 <span class="comment">        * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<a name="l00657"></a>00657 <span class="comment">        * change.  */</span>
<a name="l00658"></a>00658         
<a name="l00659"></a>00659         <span class="comment">// set up a container for the leaf children</span>
<a name="l00660"></a>00660         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00661"></a>00661         <span class="comment">// set up a container for the subleaf children</span>
<a name="l00662"></a>00662         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00663"></a>00663   
<a name="l00664"></a>00664         <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00665"></a>00665         <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00666"></a>00666   
<a name="l00667"></a>00667         <span class="comment">// fill the container with the leaf children</span>
<a name="l00668"></a>00668         hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00669"></a>00669         <span class="comment">// fill the container with the subleaf children</span>
<a name="l00670"></a>00670         hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00671"></a>00671   
<a name="l00672"></a>00672         numCherries = cherryVec.size();
<a name="l00673"></a>00673   
<a name="l00674"></a>00674         <span class="comment">// check if node is still splittable</span>
<a name="l00675"></a>00675         <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00676"></a>00676            <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00677"></a>00677            <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00678"></a>00678            <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00679"></a>00679            <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00680"></a>00680               <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
<a name="l00681"></a>00681                 ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
<a name="l00682"></a>00682                    <span class="comment">// leaf can go into container</span>
<a name="l00683"></a>00683                    nodeLists[ci].push_back(*lit);
<a name="l00684"></a>00684                    numLeaves++;
<a name="l00685"></a>00685               }
<a name="l00686"></a>00686            }
<a name="l00687"></a>00687         }
<a name="l00688"></a>00688   
<a name="l00689"></a>00689         <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00690"></a>00690         <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00691"></a>00691            nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00692"></a>00692                            cherryVec.end());
<a name="l00693"></a>00693         <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00694"></a>00694            cancontinue = <span class="keyword">false</span>;
<a name="l00695"></a>00695            <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00696"></a>00696            std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00697"></a>00697                    &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00698"></a>00698                    &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00699"></a>00699         }
<a name="l00700"></a>00700   
<a name="l00701"></a>00701         numLeavesVec[ci] = numLeaves;
<a name="l00702"></a>00702         numCherriesVec[ci] = numCherries;
<a name="l00703"></a>00703   
<a name="l00704"></a>00704         <span class="comment">// set up one collator for each chain, starting it with the first histogram state</span>
<a name="l00705"></a>00705         sequenceCollators[ci] = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] );
<a name="l00706"></a>00706       
<a name="l00707"></a>00707         <span class="comment">// collect the calculations for the starting points</span>
<a name="l00708"></a>00708         
<a name="l00709"></a>00709         <span class="comment">// one vector of L1s for each chain</span>
<a name="l00710"></a>00710         distancesL1Ptr-&gt;at(ci).push_back( cxsc::real(0.0) ); 
<a name="l00711"></a>00711         
<a name="l00712"></a>00712 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00713"></a>00713 <span class="preprocessor"></span>          sampleVariancesPtr-&gt;at(ci).push_back(cxsc::real(0.0) );
<a name="l00714"></a>00714           runningSumL1ChainsPtr-&gt;at(ci).push_back( cxsc::real(0.0) );
<a name="l00715"></a>00715 <span class="preprocessor">        #endif</span>
<a name="l00716"></a>00716 <span class="preprocessor"></span>        
<a name="l00717"></a>00717         <span class="comment">/* running sum of L1s for each chain, held in runningSumL1Ptr</span>
<a name="l00718"></a>00718 <span class="comment">        are all initialised to 0.0 already </span>
<a name="l00719"></a>00719 <span class="comment">        * </span>
<a name="l00720"></a>00720 <span class="comment">        * running sum of squared L1s for each chain, held in  runningSumL1SquaredPtr</span>
<a name="l00721"></a>00721 <span class="comment">        are all initialised to 0.0 already</span>
<a name="l00722"></a>00722 <span class="comment">        */</span> 
<a name="l00723"></a>00723 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00724"></a>00724 <span class="preprocessor"></span>          <span class="comment">// make files for current average and current collations</span>
<a name="l00725"></a>00725         {
<a name="l00726"></a>00726           sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
<a name="l00727"></a>00727           
<a name="l00728"></a>00728           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00729"></a>00729                       = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00730"></a>00730           colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
<a name="l00731"></a>00731           
<a name="l00732"></a>00732           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00733"></a>00733                       = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00734"></a>00734           colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
<a name="l00735"></a>00735         } <span class="comment">// temp objects go out of scope here  </span>
<a name="l00736"></a>00736           
<a name="l00737"></a>00737 <span class="preprocessor">        #endif</span>
<a name="l00738"></a>00738 <span class="preprocessor"></span>      
<a name="l00739"></a>00739       } <span class="comment">// end loop through chains setting up things to be able to start</span>
<a name="l00740"></a>00740       
<a name="l00741"></a>00741       <span class="comment">/* the overall running sum runningSumL1AllChains </span>
<a name="l00742"></a>00742 <span class="comment">       * was initialised to 0.0 </span>
<a name="l00743"></a>00743 <span class="comment">       * and #ifdef MYDEBUG, runningSumL1Overall was initialised to contain one 0.0 </span>
<a name="l00744"></a>00744 <span class="comment">       * and similarly rhatL1FlagPtr was initialised to contain one 0.0*/</span>
<a name="l00745"></a>00745       
<a name="l00746"></a>00746       
<a name="l00747"></a>00747       <span class="comment">/* start with the convergence statistics for chains with just one state in*/</span>
<a name="l00748"></a>00748       <span class="comment">// the Ws_L1</span>
<a name="l00749"></a>00749       Ws_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00750"></a>00750       <span class="comment">// the Bs_L1</span>
<a name="l00751"></a>00751       Bs_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00752"></a>00752       <span class="comment">// the estimated var(v)</span>
<a name="l00753"></a>00753       estVarV_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00754"></a>00754       <span class="comment">// the sqrtRhats</span>
<a name="l00755"></a>00755       sqrtRhat_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00756"></a>00756   
<a name="l00757"></a>00757       <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l00758"></a>00758       
<a name="l00759"></a>00759       <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l00760"></a>00760   
<a name="l00761"></a>00761       <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
<a name="l00762"></a>00762 
<a name="l00763"></a>00763       <span class="keywordtype">int</span> samplesSoFar = 0;
<a name="l00764"></a>00764       
<a name="l00765"></a>00765       <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far </span>
<a name="l00766"></a>00766 <span class="comment">                because  we already have the initial histograms */</span>
<a name="l00767"></a>00767       
<a name="l00768"></a>00768       <span class="comment">/* varibles for monitoring convergence</span>
<a name="l00769"></a>00769 <span class="comment">       * we only have one scalar value at the moment (L1-distance-to-average) but</span>
<a name="l00770"></a>00770 <span class="comment">       * we might have more - might want convergence on all diagnostics */</span>
<a name="l00771"></a>00771       <span class="keywordtype">int</span> rhatFlagCounter = 0;
<a name="l00772"></a>00772       <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<a name="l00773"></a>00773 <span class="comment">                        * diagnostic within limits for sampling to start?</span>
<a name="l00774"></a>00774 <span class="comment">                        * usually this would probably be the number</span>
<a name="l00775"></a>00775 <span class="comment">                        * of scalar values being used? */</span>
<a name="l00776"></a>00776       <span class="keywordtype">int</span> rhatL1Flag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value</span>
<a name="l00777"></a>00777       <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
<a name="l00778"></a>00778       
<a name="l00779"></a>00779       <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
<a name="l00780"></a>00780       
<a name="l00781"></a>00781       <span class="comment">// counter to keep track of loops</span>
<a name="l00782"></a>00782       <span class="keywordtype">int</span> loopCounter = 0;
<a name="l00783"></a>00783       
<a name="l00784"></a>00784       <span class="comment">/* We also need a collator for the samples*/</span>
<a name="l00785"></a>00785       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
<a name="l00786"></a>00786       
<a name="l00787"></a>00787       <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) {
<a name="l00788"></a>00788         
<a name="l00789"></a>00789 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00790"></a>00790 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;****** Change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l00791"></a>00791 <span class="preprocessor">        #endif</span>
<a name="l00792"></a>00792 <span class="preprocessor"></span>        
<a name="l00793"></a>00793         loopCounter++;
<a name="l00794"></a>00794         <span class="comment">// a collator for the averages for this loop</span>
<a name="l00795"></a>00795         <span class="comment">//AdaptiveHistogramCollator* avgColl = new AdaptiveHistogramCollator;</span>
<a name="l00796"></a>00796   
<a name="l00797"></a>00797         <span class="comment">/* we want to accumulate the sample variance of the scalar summary</span>
<a name="l00798"></a>00798 <span class="comment">         * for each chain up to the point reached in this loop */</span>
<a name="l00799"></a>00799         cxsc::real sumOfSampleVariancesOverChains(0.0);
<a name="l00800"></a>00800         
<a name="l00801"></a>00801         <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l00802"></a>00802 <span class="comment">         * the running sum of L1-distances-to-average </span>
<a name="l00803"></a>00803 <span class="comment">         * for each chain up to the point reached in this loop */</span>
<a name="l00804"></a>00804         cxsc::real sumOfSquaresOfRunningSums(0.0);
<a name="l00805"></a>00805         
<a name="l00806"></a>00806         <span class="comment">// for each histogram in turn, change the state</span>
<a name="l00807"></a>00807         <span class="comment">/* this is all a fudge - changeMCMCstate should just be a private</span>
<a name="l00808"></a>00808 <span class="comment">         * method of the histograms but I think I made it public so that</span>
<a name="l00809"></a>00809 <span class="comment">         * I could use it here in the example as a first step to being</span>
<a name="l00810"></a>00810 <span class="comment">         * able to make all of this chain convergence stuff back into</span>
<a name="l00811"></a>00811 <span class="comment">         * a method of the histograms themselves</span>
<a name="l00812"></a>00812 <span class="comment">         */</span>
<a name="l00813"></a>00813         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00814"></a>00814           
<a name="l00815"></a>00815 <span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<a name="l00816"></a>00816 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<a name="l00817"></a>00817 <span class="preprocessor">          #endif</span>
<a name="l00818"></a>00818 <span class="preprocessor"></span>          
<a name="l00819"></a>00819           <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<a name="l00820"></a>00820 <span class="comment">           * in the comments inside this loop */</span>
<a name="l00821"></a>00821   
<a name="l00822"></a>00822           <span class="comment">// changeMCMCState for the chain</span>
<a name="l00823"></a>00823           <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
<a name="l00824"></a>00824           goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l00825"></a>00825                  numLeavesVec[ci], numCherriesVec[ci],
<a name="l00826"></a>00826                  proposal, logPrior, minPoints,
<a name="l00827"></a>00827                  rgsl, loggingInChangeStates,
<a name="l00828"></a>00828                  sequenceStateFilenames[ci], states);
<a name="l00829"></a>00829                  
<a name="l00830"></a>00830 <span class="preprocessor">          #ifdef FORCEFAILMCMCLOOP</span>
<a name="l00831"></a>00831 <span class="preprocessor"></span>            <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
<a name="l00832"></a>00832             <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<a name="l00833"></a>00833 <span class="preprocessor">          #endif </span>
<a name="l00834"></a>00834 <span class="preprocessor"></span>
<a name="l00835"></a>00835           <span class="keywordflow">if</span> (!goodLoop) {
<a name="l00836"></a>00836             <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
<a name="l00837"></a>00837             <span class="comment">// stop if we aren&#39;t happy</span>
<a name="l00838"></a>00838           }
<a name="l00839"></a>00839           
<a name="l00840"></a>00840           <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l00841"></a>00841             <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l00842"></a>00842           }
<a name="l00843"></a>00843           
<a name="l00844"></a>00844           <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
<a name="l00845"></a>00845           
<a name="l00846"></a>00846           <span class="comment">// collate the current sample state in the chain</span>
<a name="l00847"></a>00847           sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));
<a name="l00848"></a>00848 
<a name="l00849"></a>00849           <span class="comment">// collect the L1 distances and update the runnings sums</span>
<a name="l00850"></a>00850           
<a name="l00851"></a>00851           <span class="comment">// update our collection of L1s to average for all histogram states in the chain</span>
<a name="l00852"></a>00852           currentL1s[ci] = sequenceCollators[ci]-&gt;getL1DistancesToAverage(currentL1s[ci]);
<a name="l00853"></a>00853           <span class="comment">/* we actually only want the L1 for the last state in the chain,</span>
<a name="l00854"></a>00854 <span class="comment">           * which we collect in the right vector for this chain in distancesL1 */</span>
<a name="l00855"></a>00855           cxsc::real lastStateL1 = currentL1s[ci].back();
<a name="l00856"></a>00856           distancesL1Ptr-&gt;at(ci).push_back( lastStateL1 );  
<a name="l00857"></a>00857           
<a name="l00858"></a>00858           
<a name="l00859"></a>00859           <span class="comment">// update the running sum of L1s for the chain, held in runningSumL1</span>
<a name="l00860"></a>00860           cxsc::real newRunningSum = runningSumL1Ptr-&gt;at(ci) + lastStateL1;
<a name="l00861"></a>00861           runningSumL1Ptr-&gt;at(ci) = newRunningSum;
<a name="l00862"></a>00862           
<a name="l00863"></a>00863           <span class="comment">// accumulate the square of the running sum of L1s </span>
<a name="l00864"></a>00864           sumOfSquaresOfRunningSums += newRunningSum*newRunningSum;
<a name="l00865"></a>00865           
<a name="l00866"></a>00866           <span class="comment">/* update the running sum of squared L1s over this chain</span>
<a name="l00867"></a>00867 <span class="comment">           *  held in runningSumL1Squared as a dot precision */</span>
<a name="l00868"></a>00868           cxsc::accumulate( runningSumL1Squared[ci], lastStateL1, lastStateL1 );
<a name="l00869"></a>00869           
<a name="l00870"></a>00870           <span class="comment">// update  the overall running sum runningSumL1AllChains </span>
<a name="l00871"></a>00871           runningSumL1AllChains += lastStateL1;
<a name="l00872"></a>00872           
<a name="l00873"></a>00873           <span class="comment">/* how many histograms have we got so far?</span>
<a name="l00874"></a>00874 <span class="comment">           * this chain should have states+1 states in it.</span>
<a name="l00875"></a>00875 <span class="comment">           * because we have not yet incremented states.*/</span>
<a name="l00876"></a>00876           <span class="keywordtype">size_t</span> n = sequenceCollators[ci]-&gt;getNumberCollated();
<a name="l00877"></a>00877           assert(n == states + 1);
<a name="l00878"></a>00878           
<a name="l00879"></a>00879           <span class="comment">/* and n should be at least 2 because we started with the </span>
<a name="l00880"></a>00880 <span class="comment">           * starting histogram and have now added another state.*/</span>
<a name="l00881"></a>00881           assert(n &gt; 1);
<a name="l00882"></a>00882           <span class="comment">/* could just use n - 1 = states + 1 - 1 = states in formula below</span>
<a name="l00883"></a>00883 <span class="comment">           * once we are happy it is all working!</span>
<a name="l00884"></a>00884 <span class="comment">          </span>
<a name="l00885"></a>00885 <span class="comment">          /* accumulate the sample variance for this chain: </span>
<a name="l00886"></a>00886 <span class="comment">           * sample variance for the scalar summary v = L1-to-average</span>
<a name="l00887"></a>00887 <span class="comment">           * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l00888"></a>00888 <span class="comment">           * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l00889"></a>00889           cxsc::real thisSampleVariance( ( 1.0/(n-1) )*( cxsc::rnd(runningSumL1Squared[ci])
<a name="l00890"></a>00890                     -  (newRunningSum*newRunningSum/(n * 1.0)) ) );
<a name="l00891"></a>00891           sumOfSampleVariancesOverChains += thisSampleVariance;
<a name="l00892"></a>00892           
<a name="l00893"></a>00893 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l00894"></a>00894 <span class="preprocessor"></span>            sampleVariancesPtr-&gt;at(ci).push_back( thisSampleVariance );
<a name="l00895"></a>00895             runningSumL1ChainsPtr-&gt;at(ci).push_back (newRunningSum);
<a name="l00896"></a>00896 <span class="preprocessor">          #endif</span>
<a name="l00897"></a>00897 <span class="preprocessor"></span>  
<a name="l00898"></a>00898 <span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<a name="l00899"></a>00899 <span class="preprocessor"></span>            <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l00900"></a>00900             <span class="comment">// distancesL1[ci] has the v_ij for each chain i</span>
<a name="l00901"></a>00901             assert( n == distancesL1[ci].size() );
<a name="l00902"></a>00902             cxsc::real acc(0.0);
<a name="l00903"></a>00903             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
<a name="l00904"></a>00904               acc+= (*it);
<a name="l00905"></a>00905             }
<a name="l00906"></a>00906             cxsc::real av = acc/(n * 1.0);
<a name="l00907"></a>00907             cxsc::dotprecision accDiffs(0.0);
<a name="l00908"></a>00908             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
<a name="l00909"></a>00909               cxsc::real thisDiff = (*it) - av;
<a name="l00910"></a>00910               <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00911"></a>00911               cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00912"></a>00912             }
<a name="l00913"></a>00913             cxsc::real altVar = rnd(accDiffs)/( n - 1.0 );
<a name="l00914"></a>00914             
<a name="l00915"></a>00915             cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance is\t&quot;</span> &lt;&lt; thisSampleVariance &lt;&lt; endl;
<a name="l00916"></a>00916             cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l00917"></a>00917             <span class="comment">//assert(cxsc::_double(thisSampleVariance) == cxsc::_double(altVar) );</span>
<a name="l00918"></a>00918 <span class="preprocessor">          #endif</span>
<a name="l00919"></a>00919 <span class="preprocessor"></span>          
<a name="l00920"></a>00920 <span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<a name="l00921"></a>00921 <span class="preprocessor"></span>            <span class="comment">// make files for current average and current collations</span>
<a name="l00922"></a>00922             sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], states + 1);
<a name="l00923"></a>00923           
<a name="l00924"></a>00924             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00925"></a>00925                         = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00926"></a>00926             colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], states + 1);
<a name="l00927"></a>00927             
<a name="l00928"></a>00928             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00929"></a>00929                         = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00930"></a>00930             colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], states + 1);
<a name="l00931"></a>00931 <span class="preprocessor">          #endif</span>
<a name="l00932"></a>00932 <span class="preprocessor"></span>            
<a name="l00933"></a>00933         } <span class="comment">// end change state for each histogram in turn</span>
<a name="l00934"></a>00934   
<a name="l00935"></a>00935         <span class="comment">/* each chain now has a new state which has been collated into</span>
<a name="l00936"></a>00936 <span class="comment">         * its collator and info for L1 distances-to-average have been collected</span>
<a name="l00937"></a>00937 <span class="comment">         * and the sample variance of the scalar summary for each chain</span>
<a name="l00938"></a>00938 <span class="comment">         * has been put into sampleVariances, so we can now work out the</span>
<a name="l00939"></a>00939 <span class="comment">         * convergence diagnostics */</span>
<a name="l00940"></a>00940   
<a name="l00941"></a>00941         <span class="comment">// increment number of states   </span>
<a name="l00942"></a>00942         states++;
<a name="l00943"></a>00943 
<a name="l00944"></a>00944 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00945"></a>00945 <span class="preprocessor"></span>          <span class="comment">// store the current runningSumL1AllChains as well</span>
<a name="l00946"></a>00946           runningSumL1OverallPtr-&gt;push_back(runningSumL1AllChains);
<a name="l00947"></a>00947           
<a name="l00948"></a>00948 <span class="preprocessor">        #endif</span>
<a name="l00949"></a>00949 <span class="preprocessor"></span>  
<a name="l00950"></a>00950         <span class="comment">// the Ws_L1: average, over chains, of sample variance of scalar value</span>
<a name="l00951"></a>00951         cxsc::real thisW = sumOfSampleVariancesOverChains/(chains * 1.0); 
<a name="l00952"></a>00952         Ws_L1Ptr-&gt;push_back(thisW); 
<a name="l00953"></a>00953         <span class="comment">// the Bs_L1</span>
<a name="l00954"></a>00954         cxsc::real thisB = (1.0/( (chains - 1) * states ) 
<a name="l00955"></a>00955                   * ( sumOfSquaresOfRunningSums 
<a name="l00956"></a>00956                   - (runningSumL1AllChains 
<a name="l00957"></a>00957                   * runningSumL1AllChains/(chains * 1.0)) ) );
<a name="l00958"></a>00958         Bs_L1Ptr-&gt;push_back(thisB); 
<a name="l00959"></a>00959         
<a name="l00960"></a>00960 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00961"></a>00961 <span class="preprocessor"></span>          <span class="comment">//check thisB is correct, doing it the long way</span>
<a name="l00962"></a>00962           <span class="comment">// runningSumL1 has one running sum for each chain</span>
<a name="l00963"></a>00963           <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l00964"></a>00964           cxsc::real accRunningSums(0.0);
<a name="l00965"></a>00965           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumL1.begin(); it &lt; runningSumL1.end(); ++it) {
<a name="l00966"></a>00966             cxsc::real thisChainRunningSum = (*it);
<a name="l00967"></a>00967             cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
<a name="l00968"></a>00968             chainAverages.push_back(thisChainAv);
<a name="l00969"></a>00969             accRunningSums+=thisChainRunningSum;
<a name="l00970"></a>00970           }
<a name="l00971"></a>00971           cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
<a name="l00972"></a>00972           cxsc::dotprecision accDiffs(0.0);
<a name="l00973"></a>00973           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l00974"></a>00974             cxsc::real thisDiff = (*it) - overallAv;
<a name="l00975"></a>00975             <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00976"></a>00976             cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00977"></a>00977           }
<a name="l00978"></a>00978           cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
<a name="l00979"></a>00979           
<a name="l00980"></a>00980           cout &lt;&lt; <span class="stringliteral">&quot;\nthisB is\t&quot;</span> &lt;&lt; thisB &lt;&lt; endl;
<a name="l00981"></a>00981           cout &lt;&lt; <span class="stringliteral">&quot;altB is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l00982"></a>00982           <span class="comment">//assert(thisB == altB);</span>
<a name="l00983"></a>00983         
<a name="l00984"></a>00984 <span class="preprocessor">        #endif</span>
<a name="l00985"></a>00985 <span class="preprocessor"></span>        
<a name="l00986"></a>00986         <span class="comment">// the estimated var(v)</span>
<a name="l00987"></a>00987         cxsc::real thisVarV = states/(states-1.0) * thisW + (1.0/states)*thisB;
<a name="l00988"></a>00988         estVarV_L1Ptr-&gt;push_back(thisVarV); 
<a name="l00989"></a>00989         <span class="comment">// the sqrtRhats</span>
<a name="l00990"></a>00990         cxsc::real thisSqrtRhat_L1 = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">cxsc::sqrt</a>(thisVarV/thisW);
<a name="l00991"></a>00991         sqrtRhat_L1Ptr-&gt;push_back(thisSqrtRhat_L1); 
<a name="l00992"></a>00992         
<a name="l00993"></a>00993         <span class="comment">// check on the diagnostics</span>
<a name="l00994"></a>00994         <span class="keywordflow">if</span> (thisSqrtRhat_L1 &lt;= 1.0 + tol &amp;&amp; thisSqrtRhat_L1 &gt;= 1.0 - tol) {
<a name="l00995"></a>00995           <span class="comment">//flagRhat++; //increment the flagRhat counter</span>
<a name="l00996"></a>00996           
<a name="l00997"></a>00997           <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l00998"></a>00998           <span class="keywordflow">if</span> (!rhatL1Flag)  {
<a name="l00999"></a>00999 <span class="preprocessor">            #ifdef MYDEBUG</span>
<a name="l01000"></a>01000 <span class="preprocessor"></span>              
<a name="l01001"></a>01001               cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test satisfied at &quot;</span> 
<a name="l01002"></a>01002                   &lt;&lt; states &lt;&lt; endl;
<a name="l01003"></a>01003               
<a name="l01004"></a>01004 <span class="preprocessor">            #endif</span>
<a name="l01005"></a>01005 <span class="preprocessor"></span>          
<a name="l01006"></a>01006             <span class="comment">// set the flag for this scalar value</span>
<a name="l01007"></a>01007             rhatL1Flag = 1;
<a name="l01008"></a>01008             
<a name="l01009"></a>01009             <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l01010"></a>01010             rhatFlagCounter ++; 
<a name="l01011"></a>01011           }
<a name="l01012"></a>01012         }
<a name="l01013"></a>01013         <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
<a name="l01014"></a>01014           
<a name="l01015"></a>01015           <span class="comment">// if we were okay on this scalar value before</span>
<a name="l01016"></a>01016           <span class="keywordflow">if</span> (rhatL1Flag) {
<a name="l01017"></a>01017 <span class="preprocessor">            #ifdef MYDEBUG</span>
<a name="l01018"></a>01018 <span class="preprocessor"></span>              cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test NOT now satisfied at &quot;</span> 
<a name="l01019"></a>01019                 &lt;&lt; states &lt;&lt; endl;
<a name="l01020"></a>01020           
<a name="l01021"></a>01021 <span class="preprocessor">            #endif</span>
<a name="l01022"></a>01022 <span class="preprocessor"></span>            rhatL1Flag = 0; <span class="comment">// update the flag</span>
<a name="l01023"></a>01023             rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
<a name="l01024"></a>01024           }     
<a name="l01025"></a>01025         }
<a name="l01026"></a>01026         
<a name="l01027"></a>01027 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01028"></a>01028 <span class="preprocessor"></span>          <span class="comment">// store the L1flag as well, as a real, which is a fudge...</span>
<a name="l01029"></a>01029           rhatL1FlagPtr-&gt;push_back(rhatL1Flag);
<a name="l01030"></a>01030           
<a name="l01031"></a>01031 <span class="preprocessor">        #endif</span>
<a name="l01032"></a>01032 <span class="preprocessor"></span>        
<a name="l01033"></a>01033         <span class="comment">/* we&#39;d do this for all other scalar values as well, if applicable, then ...*/</span>
<a name="l01034"></a>01034           
<a name="l01035"></a>01035         <span class="comment">// check if we have enough flags to consider ourselves burntin</span>
<a name="l01036"></a>01036         <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
<a name="l01037"></a>01037           
<a name="l01038"></a>01038           burntin = 1; 
<a name="l01039"></a>01039           burntinReachedState = states;
<a name="l01040"></a>01040           
<a name="l01041"></a>01041 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01042"></a>01042 <span class="preprocessor"></span>            <span class="comment">// if we have not been burntin, give a message</span>
<a name="l01043"></a>01043              cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
<a name="l01044"></a>01044                 &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l01045"></a>01045             
<a name="l01046"></a>01046 <span class="preprocessor">          #endif</span>
<a name="l01047"></a>01047 <span class="preprocessor"></span>        }
<a name="l01048"></a>01048         
<a name="l01049"></a>01049         <span class="comment">// but it may be that we were burntin and no longer are</span>
<a name="l01050"></a>01050         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
<a name="l01051"></a>01051           
<a name="l01052"></a>01052           burntin = 0; 
<a name="l01053"></a>01053           burntinReachedState = 0;
<a name="l01054"></a>01054           
<a name="l01055"></a>01055           <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
<a name="l01056"></a>01056           samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
<a name="l01057"></a>01057           
<a name="l01058"></a>01058           samplesSoFar = 0;
<a name="l01059"></a>01059           
<a name="l01060"></a>01060           <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
<a name="l01061"></a>01061           cxsc::real newVal(0.0);
<a name="l01062"></a>01062           
<a name="l01063"></a>01063 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01064"></a>01064 <span class="preprocessor"></span>            std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
<a name="l01065"></a>01065               std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<a name="l01066"></a>01066 <span class="preprocessor">          #endif</span>
<a name="l01067"></a>01067 <span class="preprocessor"></span>          
<a name="l01068"></a>01068           <span class="comment">// restart the log file if we are logging</span>
<a name="l01069"></a>01069           <span class="comment">// note nothing done here yet about logging graphs as well  </span>
<a name="l01070"></a>01070           <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01071"></a>01071             <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l01072"></a>01072           }   
<a name="l01073"></a>01073           
<a name="l01074"></a>01074 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01075"></a>01075 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
<a name="l01076"></a>01076                 &lt;&lt; states &lt;&lt; endl;
<a name="l01077"></a>01077             
<a name="l01078"></a>01078 <span class="preprocessor">          #endif</span>
<a name="l01079"></a>01079 <span class="preprocessor"></span>        }
<a name="l01080"></a>01080         
<a name="l01081"></a>01081         <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<a name="l01082"></a>01082 <span class="comment">         * the thinout specified </span>
<a name="l01083"></a>01083 <span class="comment">         * note - we will only be in the loop at all if we still need more samples*/</span>
<a name="l01084"></a>01084         <span class="keywordflow">if</span> (burntin &amp;&amp; ((states-burntinReachedState)%thinout == 0)) {
<a name="l01085"></a>01085           
<a name="l01086"></a>01086 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01087"></a>01087 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;sampling at state &quot;</span> &lt;&lt; states &lt;&lt; endl;
<a name="l01088"></a>01088             sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
<a name="l01089"></a>01089   
<a name="l01090"></a>01090 <span class="preprocessor">          #endif</span>
<a name="l01091"></a>01091 <span class="preprocessor"></span>          
<a name="l01092"></a>01092           <span class="comment">// take one sample from each chain until we have enough samples</span>
<a name="l01093"></a>01093           <span class="comment">// and increment samplesSoFar for each one taken</span>
<a name="l01094"></a>01094           vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01095"></a>01095           <span class="keywordflow">for</span> (ait = hists.begin(); 
<a name="l01096"></a>01096               (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
<a name="l01097"></a>01097               ++ait) {
<a name="l01098"></a>01098             
<a name="l01099"></a>01099             samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
<a name="l01100"></a>01100             
<a name="l01101"></a>01101             samplesSoFar++;
<a name="l01102"></a>01102             
<a name="l01103"></a>01103             <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01104"></a>01104               (*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);
<a name="l01105"></a>01105             }
<a name="l01106"></a>01106             
<a name="l01107"></a>01107           }
<a name="l01108"></a>01108           
<a name="l01109"></a>01109         } <span class="comment">// finished taking samples for this loop</span>
<a name="l01110"></a>01110         <span class="keywordflow">else</span> {
<a name="l01111"></a>01111 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01112"></a>01112 <span class="preprocessor"></span>            
<a name="l01113"></a>01113             sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<a name="l01114"></a>01114 <span class="preprocessor">          #endif</span>
<a name="l01115"></a>01115 <span class="preprocessor"></span>        }
<a name="l01116"></a>01116         
<a name="l01117"></a>01117         assert(samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar);
<a name="l01118"></a>01118         
<a name="l01119"></a>01119         <span class="comment">// back into loop</span>
<a name="l01120"></a>01120 <span class="preprocessor">        #if !defined(MYDEBUG_OUTPUT)</span>
<a name="l01121"></a>01121 <span class="preprocessor"></span><span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01122"></a>01122 <span class="preprocessor"></span>            <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
<a name="l01123"></a>01123             <span class="keywordflow">if</span> (loopCounter%100 == 0) {
<a name="l01124"></a>01124               cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
<a name="l01125"></a>01125             }
<a name="l01126"></a>01126 <span class="preprocessor">          #endif</span>
<a name="l01127"></a>01127 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l01128"></a>01128 <span class="preprocessor"></span>  
<a name="l01129"></a>01129       }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
<a name="l01130"></a>01130       
<a name="l01131"></a>01131       cancontinue = goodLoop;
<a name="l01132"></a>01132       
<a name="l01133"></a>01133 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01134"></a>01134 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops loopCounter = &quot;</span> &lt;&lt; loopCounter &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l01135"></a>01135 <span class="preprocessor">      #endif</span>
<a name="l01136"></a>01136 <span class="preprocessor"></span>      
<a name="l01137"></a>01137 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01138"></a>01138 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;number of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l01139"></a>01139 <span class="preprocessor">      #endif</span>
<a name="l01140"></a>01140 <span class="preprocessor"></span>  
<a name="l01141"></a>01141       <span class="comment">// free the random number generator</span>
<a name="l01142"></a>01142       gsl_rng_free (rgsl);
<a name="l01143"></a>01143   
<a name="l01144"></a>01144       cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
<a name="l01145"></a>01145 
<a name="l01146"></a>01146       <span class="comment">/* is all okay with the loop</span>
<a name="l01147"></a>01147 <span class="comment">       * and we have all our samples */</span>
<a name="l01148"></a>01148       <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {  
<a name="l01149"></a>01149 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01150"></a>01150 <span class="preprocessor"></span>          <span class="comment">// output the overall collator</span>
<a name="l01151"></a>01151           samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<a name="l01152"></a>01152 <span class="preprocessor">        #endif</span>
<a name="l01153"></a>01153 <span class="preprocessor"></span>        
<a name="l01154"></a>01154         <span class="comment">// make the return object be the average of the samples</span>
<a name="l01155"></a>01155         *myCollPtr = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l01156"></a>01156 
<a name="l01157"></a>01157         <span class="comment">// optional output for histogram</span>
<a name="l01158"></a>01158         <span class="keywordtype">string</span> histFileName = dirName;
<a name="l01159"></a>01159         histFileName += <span class="stringliteral">&quot;AverageMCMC&quot;</span>;
<a name="l01160"></a>01160         histFileName += stmD.str();
<a name="l01161"></a>01161         histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01162"></a>01162         myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(histFileName);
<a name="l01163"></a>01163         <span class="comment">// end of optional output for histogram</span>
<a name="l01164"></a>01164         
<a name="l01165"></a>01165         <span class="comment">//get estimated log-likelihood for observed data</span>
<a name="l01166"></a>01166         real estLogLik;
<a name="l01167"></a>01167         <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l01168"></a>01168           estLogLik=myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">getEstLogLikelihoodFromRSSample</a>(
<a name="l01169"></a>01169           labObsData, dx, wt, WeightHistVec[D], WeightPMVec[D]);
<a name="l01170"></a>01170         }
<a name="l01171"></a>01171         <span class="keywordflow">else</span> {
<a name="l01172"></a>01172           estLogLik=myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">getEstLogLikelihoodFromRSSample</a>(
<a name="l01173"></a>01173           labObsData, dx, wt);
<a name="l01174"></a>01174         }
<a name="l01175"></a>01175         cout &lt;&lt; setprecision(16) &lt;&lt;<span class="stringliteral">&quot;Estimated lik for Hist: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
<a name="l01176"></a>01176         logLikVec.push_back(estLogLik);
<a name="l01177"></a>01177 
<a name="l01178"></a>01178         <span class="comment">// output the convergence diagnostics</span>
<a name="l01179"></a>01179         <span class="comment">/*</span>
<a name="l01180"></a>01180 <span class="comment">        outputFile(GRL1Filename, &quot;\n\n\n Final diagnostics&quot;);</span>
<a name="l01181"></a>01181 <span class="comment">        outputFile(GRL1Filename, &quot;W&quot;, Ws_L1);</span>
<a name="l01182"></a>01182 <span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l01183"></a>01183 <span class="comment">        outputFile(GRL1Filename, &quot;B&quot;, Bs_L1);</span>
<a name="l01184"></a>01184 <span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l01185"></a>01185 <span class="comment">        outputFile(GRL1Filename, &quot;estVarV&quot;, estVarV_L1);</span>
<a name="l01186"></a>01186 <span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l01187"></a>01187 <span class="comment">        outputFile(GRL1Filename, &quot;sqrtRhat&quot;,sqrtRhat_L1);</span>
<a name="l01188"></a>01188 <span class="comment">        outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l01189"></a>01189 <span class="comment">        */</span>
<a name="l01190"></a>01190         {
<a name="l01191"></a>01191           std::vector &lt; std::string &gt; colNames;
<a name="l01192"></a>01192           colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01193"></a>01193           colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01194"></a>01194           colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01195"></a>01195           colNames.push_back(<span class="stringliteral">&quot;sqrtRhat&quot;</span>);
<a name="l01196"></a>01196 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01197"></a>01197 <span class="preprocessor"></span>            colNames.push_back(<span class="stringliteral">&quot;rhatL1Flag&quot;</span>);
<a name="l01198"></a>01198             colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01199"></a>01199 <span class="preprocessor">          #endif</span>
<a name="l01200"></a>01200 <span class="preprocessor"></span>          std::vector &lt; RealVec* &gt; data;
<a name="l01201"></a>01201           data.push_back(Ws_L1Ptr);
<a name="l01202"></a>01202           data.push_back(Bs_L1Ptr);
<a name="l01203"></a>01203           data.push_back(estVarV_L1Ptr);
<a name="l01204"></a>01204           data.push_back(sqrtRhat_L1Ptr);
<a name="l01205"></a>01205 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01206"></a>01206 <span class="preprocessor"></span>            data.push_back(rhatL1FlagPtr);
<a name="l01207"></a>01207             data.push_back(sampledIndPtr);
<a name="l01208"></a>01208 <span class="preprocessor">          #endif</span>
<a name="l01209"></a>01209 <span class="preprocessor"></span>          <span class="keywordtype">int</span> precData = 5;
<a name="l01210"></a>01210           <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1Filename, precData);
<a name="l01211"></a>01211         } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01212"></a>01212         
<a name="l01213"></a>01213 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01214"></a>01214 <span class="preprocessor"></span>        {
<a name="l01215"></a>01215           <span class="comment">/* output working calcs: all L1s for each chain, </span>
<a name="l01216"></a>01216 <span class="comment">           * running sums for each chain, sample variances,</span>
<a name="l01217"></a>01217 <span class="comment">           * overall running sums */</span>
<a name="l01218"></a>01218           std::vector &lt; std::string &gt; colNames;
<a name="l01219"></a>01219           colNames.insert(colNames.end(), L1ColNames.begin(), L1ColNames.end());
<a name="l01220"></a>01220           colNames.insert(colNames.end(), L1RunningSumColNames.begin(), L1RunningSumColNames.end());
<a name="l01221"></a>01221           colNames.insert(colNames.end(), L1SampleVarianceColNames.begin(), L1SampleVarianceColNames.end());
<a name="l01222"></a>01222           colNames.push_back(overallL1RunningSumColName);
<a name="l01223"></a>01223           
<a name="l01224"></a>01224           std::vector &lt; RealVec* &gt; data;
<a name="l01225"></a>01225           data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *distancesL1Ptr);
<a name="l01226"></a>01226           data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumL1ChainsPtr);
<a name="l01227"></a>01227           data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesPtr);
<a name="l01228"></a>01228           data.push_back(runningSumL1OverallPtr);
<a name="l01229"></a>01229           
<a name="l01230"></a>01230           <span class="keywordtype">int</span> precData = 10;
<a name="l01231"></a>01231           <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1WorkingCalcsFilename, precData);
<a name="l01232"></a>01232         }
<a name="l01233"></a>01233 <span class="preprocessor">        #endif</span>
<a name="l01234"></a>01234 <span class="preprocessor"></span>
<a name="l01235"></a>01235         cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
<a name="l01236"></a>01236         cout &lt;&lt; <span class="stringliteral">&quot;Check output files &quot;</span> &lt;&lt; GRL1Filename
<a name="l01237"></a>01237                 &lt;&lt; <span class="stringliteral">&quot; for diagnostics&quot;</span> &lt;&lt; endl;
<a name="l01238"></a>01238         <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01239"></a>01239           cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
<a name="l01240"></a>01240               &lt;&lt; <span class="stringliteral">&quot; for log of samples&quot;</span> &lt;&lt;endl;
<a name="l01241"></a>01241         }
<a name="l01242"></a>01242 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01243"></a>01243 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename
<a name="l01244"></a>01244               &lt;&lt; <span class="stringliteral">&quot; for working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<a name="l01245"></a>01245 <span class="preprocessor">        #endif</span>
<a name="l01246"></a>01246 <span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l01247"></a>01247 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l01248"></a>01248               &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
<a name="l01249"></a>01249               &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l01250"></a>01250               &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l01251"></a>01251 <span class="preprocessor">        #endif</span>
<a name="l01252"></a>01252 <span class="preprocessor"></span>        cout &lt;&lt; endl;
<a name="l01253"></a>01253       }
<a name="l01254"></a>01254       
<a name="l01255"></a>01255       <span class="comment">/* clean up the newed stuff</span>
<a name="l01256"></a>01256 <span class="comment">       * </span>
<a name="l01257"></a>01257 <span class="comment">       * note that this does not get cleaned up if we throw an exception in the while loop</span>
<a name="l01258"></a>01258 <span class="comment">       * - should probably deal with that at some point but all the newed memory will be </span>
<a name="l01259"></a>01259 <span class="comment">       * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<a name="l01260"></a>01260 <span class="comment">       * it will be okay for the moment */</span>
<a name="l01261"></a>01261 
<a name="l01262"></a>01262       vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01263"></a>01263       <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
<a name="l01264"></a>01264         <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l01265"></a>01265       }
<a name="l01266"></a>01266   
<a name="l01267"></a>01267       vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l01268"></a>01268       <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
<a name="l01269"></a>01269         <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l01270"></a>01270       }
<a name="l01271"></a>01271       <span class="comment">/*</span>
<a name="l01272"></a>01272 <span class="comment">      for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<a name="l01273"></a>01273 <span class="comment">        if (NULL != *acit) delete (*acit);</span>
<a name="l01274"></a>01274 <span class="comment">      }</span>
<a name="l01275"></a>01275 <span class="comment">      */</span>
<a name="l01276"></a>01276 
<a name="l01277"></a>01277       <span class="keyword">delete</span> samplesColl;
<a name="l01278"></a>01278   
<a name="l01279"></a>01279       <span class="keyword">delete</span> distancesL1Ptr;  
<a name="l01280"></a>01280   
<a name="l01281"></a>01281       <span class="keyword">delete</span> runningSumL1Ptr;
<a name="l01282"></a>01282       
<a name="l01283"></a>01283 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01284"></a>01284 <span class="preprocessor"></span>        <span class="keyword">delete</span> runningSumL1OverallPtr;
<a name="l01285"></a>01285         <span class="keyword">delete</span> runningSumL1ChainsPtr;
<a name="l01286"></a>01286         <span class="keyword">delete</span> sampleVariancesPtr;
<a name="l01287"></a>01287         <span class="keyword">delete</span> rhatL1FlagPtr;
<a name="l01288"></a>01288         <span class="keyword">delete</span> sampledIndPtr;
<a name="l01289"></a>01289 <span class="preprocessor">      #endif</span>
<a name="l01290"></a>01290 <span class="preprocessor"></span>  
<a name="l01291"></a>01291       <span class="keyword">delete</span> Ws_L1Ptr;
<a name="l01292"></a>01292       <span class="keyword">delete</span> Bs_L1Ptr;
<a name="l01293"></a>01293       <span class="keyword">delete</span> estVarV_L1Ptr;
<a name="l01294"></a>01294       <span class="keyword">delete</span> sqrtRhat_L1Ptr;
<a name="l01295"></a>01295             
<a name="l01296"></a>01296       <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<a name="l01297"></a>01297 <span class="comment">       *  really the only reason for failing here is that we did not get the right </span>
<a name="l01298"></a>01298 <span class="comment">       * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
<a name="l01299"></a>01299       <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
<a name="l01300"></a>01300         cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l01301"></a>01301         cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
<a name="l01302"></a>01302               &lt;&lt; GRL1Filename;
<a name="l01303"></a>01303 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01304"></a>01304 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename;
<a name="l01305"></a>01305 <span class="preprocessor">        #endif</span>
<a name="l01306"></a>01306 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01307"></a>01307           cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; samplesLogFilename;
<a name="l01308"></a>01308         }
<a name="l01309"></a>01309 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l01310"></a>01310 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01311"></a>01311           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01312"></a>01312           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span>;
<a name="l01313"></a>01313 <span class="preprocessor">        #endif</span>
<a name="l01314"></a>01314 <span class="preprocessor"></span>        cout &lt;&lt; endl;
<a name="l01315"></a>01315         
<a name="l01316"></a>01316         <span class="keywordflow">if</span> (!cancontinue) {
<a name="l01317"></a>01317           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
<a name="l01318"></a>01318         }
<a name="l01319"></a>01319         <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
<a name="l01320"></a>01320           <span class="comment">// we have not been able to get the required samples - need to give up</span>
<a name="l01321"></a>01321           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
<a name="l01322"></a>01322         }
<a name="l01323"></a>01323       }
<a name="l01324"></a>01324     } <span class="comment">// end check on successful insertion of data into histograms</span>
<a name="l01325"></a>01325   
<a name="l01326"></a>01326     <span class="keywordflow">else</span> {
<a name="l01327"></a>01327       <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
<a name="l01328"></a>01328     }
<a name="l01329"></a>01329 
<a name="l01330"></a>01330 
<a name="l01331"></a>01331     D++; <span class="comment">// counter to go through unlabDataVec</span>
<a name="l01332"></a>01332   } <span class="comment">// end of going through unlabDataVec</span>
<a name="l01333"></a>01333   
<a name="l01334"></a>01334   <span class="comment">//-----------output the estimated likelihood  to .txt file------------//</span>
<a name="l01335"></a>01335   <span class="keywordtype">string</span> EstLikOut = dirName;
<a name="l01336"></a>01336   EstLikOut += <span class="stringliteral">&quot;ObsEstLkl.txt&quot;</span>;
<a name="l01337"></a>01337   os.open(EstLikOut.c_str());
<a name="l01338"></a>01338   vector&lt;real&gt;::iterator it;  
<a name="l01339"></a>01339   <span class="keywordflow">for</span> (it = logLikVec.begin(); it &lt; logLikVec.end(); it++) {
<a name="l01340"></a>01340       os &lt;&lt; (*it) &lt;&lt; endl;
<a name="l01341"></a>01341   } 
<a name="l01342"></a>01342   os &lt;&lt; flush;
<a name="l01343"></a>01343   os.close();
<a name="l01344"></a>01344   cout &lt;&lt; <span class="stringliteral">&quot;Likelihood ratios output to &quot;</span> &lt;&lt; EstLikOut &lt;&lt; endl; 
<a name="l01345"></a>01345   cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;  
<a name="l01346"></a>01346   
<a name="l01347"></a>01347 
<a name="l01348"></a>01348    <span class="comment">//free the random generator</span>
<a name="l01349"></a>01349   gsl_rng_free(r);
<a name="l01350"></a>01350   
<a name="l01351"></a>01351   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l01352"></a>01352   <span class="keywordflow">return</span> coll;
<a name="l01353"></a>01353 } <span class="comment">// end of AHABC</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AHABCObsMCMCL1_8cpp.shtml">AHABCObsMCMCL1.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
