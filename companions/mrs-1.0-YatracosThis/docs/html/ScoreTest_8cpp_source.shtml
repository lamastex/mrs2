<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: ScoreTest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ScoreTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ScoreTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ScoreTest_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="COPERRandAIC_2dataprep_8hpp.shtml" title="Dataprep header file for preparing to generate simulated random sample data.">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">using namespace </span>cxsc;
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>std;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a><a class="code" href="ScoreTest_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00037</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039     <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041     <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
<a name="l00042"></a>00042     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00043"></a>00043     gsl_rng * r;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="keywordtype">int</span> i;
<a name="l00046"></a>00046     <span class="keyword">const</span> <span class="keywordtype">int</span> n=100;    <span class="comment">// number to generate</span>
<a name="l00047"></a>00047     <span class="keywordtype">double</span> sigma_x=1;   <span class="comment">// distribution parameter</span>
<a name="l00048"></a>00048     <span class="keywordtype">double</span> sigma_y=1;   <span class="comment">// distribution parameter</span>
<a name="l00049"></a>00049     <span class="keywordtype">double</span> rho=0;       <span class="comment">// x and y uncorrelated</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     gsl_rng_env_setup();
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     T = gsl_rng_default;
<a name="l00056"></a>00056     r = gsl_rng_alloc (T);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00059"></a>00059     <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00060"></a>00060     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00061"></a>00061     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00062"></a>00062     oss.precision(5);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="keywordtype">double</span> *x;
<a name="l00065"></a>00065     <span class="keywordtype">double</span> *y;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067     x= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// make x and y in dynamic memory</span>
<a name="l00068"></a>00068     y= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// (so they must be freed later)</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <span class="keywordtype">double</span>* itx;
<a name="l00071"></a>00071     <span class="keywordtype">double</span>* ity;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="comment">// get n random variates chosen from the bivariate Gaussian</span>
<a name="l00075"></a>00075     <span class="comment">// distribution with mean zero and given sigma_x, sigma_y.</span>
<a name="l00076"></a>00076     <span class="keywordflow">for</span> (i = 0; i &lt; n; i++)
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078         gsl_ran_bivariate_gaussian(r, sigma_x, sigma_y,
<a name="l00079"></a>00079                                    rho, &amp;x[i], &amp;y[i]);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="comment">// free the random number generator</span>
<a name="l00084"></a>00084     gsl_rng_free (r);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     itx = &amp;x[0];
<a name="l00087"></a>00087     ity = &amp;y[0];
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="comment">// create a name for the file to use</span>
<a name="l00090"></a>00090     samplesFileName = <span class="stringliteral">&quot;bgSamples.txt&quot;</span>;
<a name="l00091"></a>00091     <span class="comment">// output the sample data</span>
<a name="l00092"></a>00092     oss.open(samplesFileName.c_str());         <span class="comment">// opens the file</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="keywordflow">for</span>(i=0; i&lt;n; i++) {
<a name="l00095"></a>00095         oss &lt;&lt; (*itx) &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (*ity);
<a name="l00096"></a>00096         <span class="keywordflow">if</span> (i&lt;n-1) oss &lt;&lt; endl; <span class="comment">// new line if not final line</span>
<a name="l00097"></a>00097         itx++;
<a name="l00098"></a>00098         ity++;
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100     oss &lt;&lt; flush;
<a name="l00101"></a>00101     oss.close();
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     cout &lt;&lt; <span class="stringliteral">&quot;Samples output to &quot;</span> &lt;&lt; samplesFileName &lt;&lt; endl &lt;&lt; endl;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     clock_t start, end;     <span class="comment">// for timing</span>
<a name="l00106"></a>00106     <span class="keywordtype">double</span> timeTaken;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00109"></a>00109     <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00110"></a>00110     <span class="keywordtype">bool</span> successfulPQMerge = <span class="keyword">false</span>;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// example to create one histogram with pulse data and a priority</span>
<a name="l00113"></a>00113     <span class="comment">// ---------- split to give a minimum number of bins -----------</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     cout &lt;&lt; endl &lt;&lt; endl;
<a name="l00116"></a>00116     cout &lt;&lt; <span class="stringliteral">&quot;Start of first example:&quot;</span> &lt;&lt; endl;
<a name="l00117"></a>00117     cout &lt;&lt; <span class="stringliteral">&quot;Priority split on COPERR to give minimum number of bins&quot;</span> &lt;&lt; endl;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="comment">// Use default constructor for histogram.  By default,</span>
<a name="l00120"></a>00120     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00121"></a>00121     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00122"></a>00122     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     start=clock();
<a name="l00125"></a>00125     <span class="comment">// clock running</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
<a name="l00128"></a>00128     successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00131"></a>00131 
<a name="l00132"></a>00132         <span class="comment">// with min volume check</span>
<a name="l00133"></a>00133         <span class="comment">// the minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l00134"></a>00134         <span class="keywordtype">double</span> minVolB = 1.0;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="comment">// prepare function objects to do a priority split</span>
<a name="l00137"></a>00137 
<a name="l00138"></a>00138         <span class="comment">// function object to compare nodes on cont. to EMP sum under COPERR</span>
<a name="l00139"></a>00139         <span class="comment">// ie split node with EMP contribution (COPERR) first</span>
<a name="l00140"></a>00140         <a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml" title="Class comparing change in EMP under COPERR from splitting 2 nodes.">CompEMPSumChangeCOPERR</a> nodeCompEMPCOPERR;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
<a name="l00143"></a>00143         <span class="keywordtype">int</span> minLeaves = 20;
<a name="l00144"></a>00144         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="comment">// do the priority split</span>
<a name="l00147"></a>00147         <span class="comment">/* minimum points minPoints to use when splitting defaults to zero.</span>
<a name="l00148"></a>00148 <span class="comment">        A node will not be splittable if either child would then have</span>
<a name="l00149"></a>00149 <span class="comment">        &lt; minPoints of data associated with it. */</span>
<a name="l00150"></a>00150         successfulPQSplit = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompEMPCOPERR,
<a name="l00151"></a>00151               critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minVolB); <span class="comment">// no logging</span>
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154         end=clock();
<a name="l00155"></a>00155 
<a name="l00156"></a>00156         timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00157"></a>00157         cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>
<a name="l00161"></a>00161 
<a name="l00162"></a>00162         <span class="comment">// create a name for the file to output</span>
<a name="l00163"></a>00163         outputFileName = <span class="stringliteral">&quot;ScoreTestFirst.txt&quot;</span>;
<a name="l00164"></a>00164         <span class="comment">// To realize a file output</span>
<a name="l00165"></a>00165         myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">outputToTxtTabsWithEMPs</a>(outputFileName);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>();
<a name="l00168"></a>00168         <span class="comment">// output will go to a dot file</span>
<a name="l00169"></a>00169         <span class="comment">// this will then be made into a png image</span>
<a name="l00170"></a>00170         <span class="comment">// console output will tell you where png image is</span>
<a name="l00171"></a>00171 
<a name="l00172"></a>00172         <span class="comment">// optional - print out the scores</span>
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         <span class="comment">// create a penalty function object to use to give us the total</span>
<a name="l00175"></a>00175         <span class="comment">// score (EMP + PEN) under COPERR</span>
<a name="l00176"></a>00176         <a class="code" href="classsubpavings_1_1PenLeaves.shtml" title="Penalty function as number of leaves in histogram.">PenLeaves</a> penC;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         real scoreCOPERR = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad" title="get the COPERR score.">getScoreCOPERR</a>(penC, <span class="keyword">true</span>); <span class="comment">//verbose</span>
<a name="l00179"></a>00179         cout &lt;&lt; <span class="stringliteral">&quot;End of first example:&quot;</span> &lt;&lt; endl;
<a name="l00180"></a>00180         cout &lt;&lt; <span class="stringliteral">&quot;The total score (EMP+PEN) under COPERR is &quot;</span> &lt;&lt; scoreCOPERR
<a name="l00181"></a>00181                             &lt;&lt; endl;
<a name="l00182"></a>00182         real scoreAIC = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">getEMPScoreAIC</a>();
<a name="l00183"></a>00183         cout &lt;&lt; <span class="stringliteral">&quot;The EMP score under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
<a name="l00184"></a>00184     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <span class="comment">// example to create one histogram with pulse data and a priority</span>
<a name="l00187"></a>00187     <span class="comment">// ---------- split to minimise COPERR score -----------</span>
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     successfulInsertion = <span class="keyword">false</span>;
<a name="l00191"></a>00191     successfulPQSplit = <span class="keyword">false</span>;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <span class="comment">// example to create one histogram with pulse data and a priority</span>
<a name="l00194"></a>00194     <span class="comment">// ---------- split to give a minimum number of bins -----------</span>
<a name="l00195"></a>00195 
<a name="l00196"></a>00196     cout &lt;&lt; endl &lt;&lt; endl;
<a name="l00197"></a>00197     cout &lt;&lt; <span class="stringliteral">&quot;Start of second example:&quot;</span> &lt;&lt; endl;
<a name="l00198"></a>00198     cout &lt;&lt; <span class="stringliteral">&quot;Priority split on AIC give minimum number of bins&quot;</span> &lt;&lt; endl;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200     <span class="comment">// make an Adaptive Histogram object with no specified box</span>
<a name="l00201"></a>00201     <span class="comment">// or splitting value (and holdAllStats again defaults to false),</span>
<a name="l00202"></a>00202     <span class="comment">// with the same data</span>
<a name="l00203"></a>00203     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistSecond;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     start=clock();
<a name="l00206"></a>00206     <span class="comment">// clock running</span>
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
<a name="l00209"></a>00209     successfulInsertion = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00212"></a>00212 
<a name="l00213"></a>00213         <span class="comment">// prepare function objects to do a priority split</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215         <span class="comment">// function object to compare nodes on cont. to EMP sum under COPERR</span>
<a name="l00216"></a>00216         <span class="comment">// ie split node with EMP contribution (COPERR) first</span>
<a name="l00217"></a>00217         <a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml" title="Class comparing change in EMP under AIC from splitting 2 nodes.">CompEMPSumChangeAIC</a> nodeCompEMPAIC;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
<a name="l00220"></a>00220         <span class="keywordtype">int</span> minLeaves = 500;
<a name="l00221"></a>00221         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         <span class="comment">/* minimum points minPoints to use when splitting defaults to zero.</span>
<a name="l00224"></a>00224 <span class="comment">        A node will not be splittable if either child would then have</span>
<a name="l00225"></a>00225 <span class="comment">        &lt; minPoints of data associated with it.</span>
<a name="l00226"></a>00226 <span class="comment">        minVolB, the multiplier for (log n)^2/n to determine the minimum</span>
<a name="l00227"></a>00227 <span class="comment">        volume of a splittable node, also defaults to 0.0. */</span>
<a name="l00228"></a>00228         successfulPQSplit = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompEMPAIC,
<a name="l00229"></a>00229               critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>); <span class="comment">//no logging</span>
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     end=clock();
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00235"></a>00235     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240         <span class="comment">// create a name for the file to output</span>
<a name="l00241"></a>00241         outputFileName = <span class="stringliteral">&quot;ScoreTestSecond.txt&quot;</span>;
<a name="l00242"></a>00242         <span class="comment">// To realize a file output</span>
<a name="l00243"></a>00243         myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">outputToTxtTabsWithEMPs</a>(outputFileName);
<a name="l00244"></a>00244 
<a name="l00245"></a>00245         <span class="comment">// optional - print out the scores</span>
<a name="l00246"></a>00246         <span class="comment">// make a penalty function to give total (EMP + PEN) score under AIC</span>
<a name="l00247"></a>00247         <span class="keywordtype">double</span> ca = 1.0;
<a name="l00248"></a>00248         <span class="keywordtype">double</span> alpha = 0.5;
<a name="l00249"></a>00249         <span class="keywordtype">double</span> ra = 2.0;
<a name="l00250"></a>00250         <a class="code" href="classsubpavings_1_1PenAIC1.shtml" title="Class for penalty function 1 for AIC.">PenAIC1</a> penA(ca, alpha, ra); <span class="comment">// penalty for AIC</span>
<a name="l00251"></a>00251 
<a name="l00252"></a>00252         real scoreCOPERR = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec" title="get the EMP part of the COPERR score.">getEMPScoreCOPERR</a>();
<a name="l00253"></a>00253         cout &lt;&lt; <span class="stringliteral">&quot;End of second example:&quot;</span> &lt;&lt; endl;
<a name="l00254"></a>00254         cout &lt;&lt; <span class="stringliteral">&quot;The EMP score COPERR is &quot;</span> &lt;&lt; scoreCOPERR &lt;&lt; endl;
<a name="l00255"></a>00255         real scoreAIC = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3" title="get AIC score.">getScoreAIC</a>(penA, <span class="keyword">true</span>);
<a name="l00256"></a>00256         cout &lt;&lt; <span class="stringliteral">&quot;The total score (EMP+PEN) under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
<a name="l00257"></a>00257     }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259     <span class="comment">// end of example to create one histogram with pulse data and a priority</span>
<a name="l00260"></a>00260     <span class="comment">// ---------- split to minimise AIC score -----------</span>
<a name="l00261"></a>00261 
<a name="l00262"></a>00262     <span class="comment">// example to merge up histogram,prioritising merge on</span>
<a name="l00263"></a>00263     <span class="comment">// ---------------- minimising increase in AIC score -------------</span>
<a name="l00264"></a>00264 
<a name="l00265"></a>00265     <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 
<a name="l00268"></a>00268         cout &lt;&lt; endl &lt;&lt; endl;
<a name="l00269"></a>00269         cout &lt;&lt; <span class="stringliteral">&quot;Example to merge the second histogram upwards&quot;</span> &lt;&lt; endl;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271         <span class="comment">// merge node with largest contribution to EMP sum first</span>
<a name="l00272"></a>00272         <a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml" title="Class comparing change in EMP under AIC from merging 2 nodes.">CompEMPSumChangeMergeAIC</a> nodeCompEMPMergeAIC;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274         <span class="keywordtype">int</span> minLeaves = 0; <span class="comment">// this will merge right back to the root box</span>
<a name="l00275"></a>00275         <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTE</a> critLeavesLTE(minLeaves);
<a name="l00276"></a>00276 
<a name="l00277"></a>00277         successfulPQMerge = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712" title="Priority merge to reduce number of leaves in histogram.">priorityMerge</a>(nodeCompEMPMergeAIC,
<a name="l00278"></a>00278             critLeavesLTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>); <span class="comment">// with logging</span>
<a name="l00279"></a>00279 
<a name="l00280"></a>00280         <span class="comment">//try critAICMergeChangeOrLeaves_LTE instead of critLeaves_LTE</span>
<a name="l00281"></a>00281 
<a name="l00282"></a>00282         <span class="keywordflow">if</span> (successfulPQMerge) {
<a name="l00283"></a>00283             <span class="comment">// optional - print out the scores</span>
<a name="l00284"></a>00284             real scoreAIC = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">getEMPScoreAIC</a>();
<a name="l00285"></a>00285             cout &lt;&lt; <span class="stringliteral">&quot;After merging:&quot;</span> &lt;&lt; endl;
<a name="l00286"></a>00286             cout &lt;&lt; <span class="stringliteral">&quot;the EMP score under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
<a name="l00287"></a>00287         }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     cout &lt;&lt; endl;
<a name="l00292"></a>00292     cout &lt;&lt; <span class="stringliteral">&quot;End of examples&quot;</span> &lt;&lt; endl &lt;&lt; endl;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="comment">// end of examples</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <span class="keyword">delete</span> x;   <span class="comment">// free dynamic memory used for x and y</span>
<a name="l00297"></a>00297     <span class="keyword">delete</span> y;
<a name="l00298"></a>00298 
<a name="l00299"></a>00299     <span class="keywordflow">return</span> 0;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 } <span class="comment">// end of COPERR and AIC scoring test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ScoreTest_8cpp.shtml">ScoreTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
