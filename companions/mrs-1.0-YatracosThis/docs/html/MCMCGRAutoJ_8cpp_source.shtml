<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRAutoJ.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRAutoJ_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCGRAutoJ.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCGRAutoJ_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGR_2dataprep_8hpp.shtml">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// tools to help </span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00046"></a><a class="code" href="MCMCGRAutoJ_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">00046</a> <span class="preprocessor">#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a>00048 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>cxsc;
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>subpavings;
<a name="l00056"></a>00056 <span class="keyword">using namespace </span>std;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, <span class="keywordtype">int</span> mix, 
<a name="l00059"></a>00059         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol);
<a name="l00060"></a>00060 
<a name="l00061"></a><a class="code" href="MCMCGRAutoJ_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00061</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   <span class="comment">//========user-defined parameters====================//</span>
<a name="l00064"></a>00064   <span class="comment">/*</span>
<a name="l00065"></a>00065 <span class="comment">  size_t n=atoi(argv[1]);  // number of datapoints to generate for each histogram</span>
<a name="l00066"></a>00066 <span class="comment">  int d = atoi(argv[2]); // dimensions</span>
<a name="l00067"></a>00067 <span class="comment">  int mix = atoi(argv[3]); //mix</span>
<a name="l00068"></a>00068 <span class="comment">  int maxloops = atoi(argv[4]); // maximum changes of state from initial state to try</span>
<a name="l00069"></a>00069 <span class="comment">  int samplesNeeded = atoi(argv[5]); // how many samples do we want (ie once chains have burned in)</span>
<a name="l00070"></a>00070 <span class="comment">  int thinout = atoi(argv[6]); // sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00071"></a>00071 <span class="comment">  */</span>
<a name="l00072"></a>00072   <span class="comment">/* note that all chains will be sampled in parallel, once burnin has happened,</span>
<a name="l00073"></a>00073 <span class="comment"></span>
<a name="l00074"></a>00074 <span class="comment">   * eg if we want 100 samples and have 4 chains and thinout 5, then we will sample</span>
<a name="l00075"></a>00075 <span class="comment">   * the last state from each chain as soon as convergence has been achieved </span>
<a name="l00076"></a>00076 <span class="comment">   * (and thus get 4 samples), and then wait 5-1 = 4 states, and on the 5th, again </span>
<a name="l00077"></a>00077 <span class="comment">   * sample from all 4 chains (assuming that convergence is still okay), etc etc</span>
<a name="l00078"></a>00078 <span class="comment">   * so it will take 1 + (100-4)/4*5 = 1 + 25*5 = 1 + 120 = 121 states from burnin inclusive</span>
<a name="l00079"></a>00079 <span class="comment">   * of the burnin state itself to get the full sample */</span>
<a name="l00080"></a>00080   
<a name="l00081"></a>00081   <span class="comment">/*</span>
<a name="l00082"></a>00082 <span class="comment">  double tol = atof(argv[7]); //tolerance for automated burn in criteria</span>
<a name="l00083"></a>00083 <span class="comment">  */</span>
<a name="l00084"></a>00084   <span class="comment">//========Hardcoded parameters====================================//</span>
<a name="l00085"></a>00085   <span class="keywordtype">size_t</span> n=100;  <span class="comment">// number of datapoints to generate for each histogram</span>
<a name="l00086"></a>00086   <span class="keywordtype">int</span> d = 2; <span class="comment">// dimensions</span>
<a name="l00087"></a>00087   <span class="keywordtype">int</span> mix = 1; <span class="comment">//mix</span>
<a name="l00088"></a>00088   
<a name="l00089"></a>00089   <span class="keywordtype">int</span> maxLoops = 5000; <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00090"></a>00090   <span class="keywordtype">int</span> samplesNeeded = 10; <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00091"></a>00091   <span class="keywordtype">int</span> thinout = 5; <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00092"></a>00092   
<a name="l00093"></a>00093   cxsc::real tol(0.1); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00094"></a>00094   
<a name="l00095"></a>00095   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00096"></a>00096   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00097"></a>00097     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00098"></a>00098   }
<a name="l00099"></a>00099   <span class="comment">//===========done with working on parameters==========================//</span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="keywordflow">try</span> {
<a name="l00102"></a>00102     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(n, d,  mix, 
<a name="l00103"></a>00103         maxLoops, samplesNeeded, thinout, tol);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     std::string samplesCollAverageFilename = <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00106"></a>00106     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
<a name="l00107"></a>00107   
<a name="l00108"></a>00108     avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
<a name="l00109"></a>00109     
<a name="l00110"></a>00110     <span class="keywordflow">return</span> 0;
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112   <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
<a name="l00113"></a>00113     cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
<a name="l00114"></a>00114       &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">//===============start the MCMC========================================//</span>
<a name="l00119"></a><a class="code" href="MCMCGRAutoJ_8cpp.shtml#a694f27abadce5523048bda1d5157019f">00119</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> d, <span class="keywordtype">int</span> mix, 
<a name="l00120"></a>00120         <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, cxsc::real tol)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122   <span class="comment">//======set up for output========================================//     </span>
<a name="l00123"></a>00123   <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00124"></a>00124   <span class="keywordtype">int</span> prec = 15;
<a name="l00125"></a>00125   cout &lt;&lt; cxsc::SaveOpt;
<a name="l00126"></a>00126   cout &lt;&lt; cxsc::Variable;
<a name="l00127"></a>00127   cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> samplesAvg; <span class="comment">// our return object, if all goes well</span>
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <span class="comment">//===========prepare to generate some data for the tests ================//</span>
<a name="l00132"></a>00132   <span class="comment">// set up a random number generator</span>
<a name="l00133"></a>00133   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00134"></a>00134   gsl_rng * r;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   gsl_rng_env_setup();
<a name="l00139"></a>00139   T = gsl_rng_default;
<a name="l00140"></a>00140   r = gsl_rng_alloc (T);
<a name="l00141"></a>00141   <span class="comment">// set a seed for the data</span>
<a name="l00142"></a>00142   <span class="keywordtype">int</span> dataSeed = 1234;
<a name="l00143"></a>00143   gsl_rng_set(r, dataSeed);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">//-------define the root box--------------------</span>
<a name="l00146"></a>00146   ivector pavingBox(d);
<a name="l00147"></a>00147   interval pavingInterval(0,1);
<a name="l00148"></a>00148   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150   <span class="comment">//------------data generating partition-------------</span>
<a name="l00151"></a>00151   <span class="comment">//data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00152"></a>00152   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00153"></a>00153   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00154"></a>00154   <span class="comment">// a container for the boxes</span>
<a name="l00155"></a>00155   vector&lt;ivector&gt; Pboxes;
<a name="l00156"></a>00156   <span class="comment">//mixture shape</span>
<a name="l00157"></a>00157   <span class="keywordtype">string</span> mixShape;
<a name="l00158"></a>00158   <span class="keywordflow">if</span> (mix == 1) {mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }<span class="comment">// this is the basic uniform</span>
<a name="l00159"></a>00159   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix == 2) { mixShape = <span class="stringliteral">&quot;1,2,2&quot;</span>; }
<a name="l00160"></a>00160   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==3) { mixShape = <span class="stringliteral">&quot;2,3,4,4,3,4,4,2&quot;</span>; }   
<a name="l00161"></a>00161   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==4) {mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }     
<a name="l00162"></a>00162   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture      </span>
<a name="l00163"></a>00163   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00164"></a>00164   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00165"></a>00165   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(Pleaves); <span class="comment">// fill the container</span>
<a name="l00166"></a>00166 
<a name="l00167"></a>00167   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00168"></a>00168   <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
<a name="l00169"></a>00169     Pboxes.push_back((*it)-&gt;getBox());
<a name="l00170"></a>00170   }
<a name="l00171"></a>00171   <span class="keywordtype">size_t</span> PartSize = Pboxes.size();
<a name="l00172"></a>00172 
<a name="l00173"></a>00173    <span class="comment">//--------------generate data-----------------------------------------</span>
<a name="l00174"></a>00174     cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
<a name="l00175"></a>00175     <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00176"></a>00176     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE   </span>
<a name="l00177"></a>00177     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00178"></a>00178     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00179"></a>00179       rvector thisrv(d);
<a name="l00180"></a>00180       <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00181"></a>00181       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
<a name="l00182"></a>00182         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);
<a name="l00183"></a>00183       }
<a name="l00184"></a>00184       <span class="comment">// put points generated into container</span>
<a name="l00185"></a>00185       theData.push_back(thisrv);
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188    <span class="comment">// free the random number generator</span>
<a name="l00189"></a>00189    gsl_rng_free (r);
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="comment">/*  // output data to a file</span>
<a name="l00192"></a>00192 <span class="comment">   string dataFile = &quot;dataFile.txt&quot;;</span>
<a name="l00193"></a>00193 <span class="comment">   ofstream osd(dataFile.c_str());         // replace data</span>
<a name="l00194"></a>00194 <span class="comment">   if (osd.is_open()) {</span>
<a name="l00195"></a>00195 <span class="comment">      RVecDataItr dit;</span>
<a name="l00196"></a>00196 <span class="comment">      for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<a name="l00197"></a>00197 <span class="comment">        //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<a name="l00198"></a>00198 <span class="comment">        osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<a name="l00199"></a>00199 <span class="comment">      }</span>
<a name="l00200"></a>00200 <span class="comment">      osd.close();</span>
<a name="l00201"></a>00201 <span class="comment">   }</span>
<a name="l00202"></a>00202 <span class="comment">   else {</span>
<a name="l00203"></a>00203 <span class="comment">      std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<a name="l00204"></a>00204 <span class="comment">        &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<a name="l00205"></a>00205 <span class="comment">   }</span>
<a name="l00206"></a>00206 <span class="comment">  */</span>
<a name="l00207"></a>00207 
<a name="l00208"></a>00208   <span class="comment">//================Gelman-Rubin method=========================//</span>
<a name="l00209"></a>00209    <span class="comment">// start by making the histograms that are the starting points for our chains</span>
<a name="l00210"></a>00210    
<a name="l00211"></a>00211    <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00212"></a>00212    <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00213"></a>00213    <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   <span class="comment">//------Starting histograms-------------------------------//</span>
<a name="l00216"></a>00216   <span class="comment">//histogram 1</span>
<a name="l00217"></a>00217   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 1&quot;</span> &lt;&lt; endl;
<a name="l00218"></a>00218    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00219"></a>00219   <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00220"></a>00220   <span class="keywordtype">bool</span> successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="comment">//histogram 2</span>
<a name="l00223"></a>00223   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 2&quot;</span> &lt;&lt; endl;
<a name="l00224"></a>00224   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00225"></a>00225   <span class="comment">// the same data into the second histogram</span>
<a name="l00226"></a>00226   <span class="keywordtype">bool</span> successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00227"></a>00227   <span class="keywordtype">bool</span> successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00228"></a>00228   <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00229"></a>00229       <span class="comment">// set up function objects for a priority split</span>
<a name="l00230"></a>00230       <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00231"></a>00231       <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00232"></a>00232       <span class="comment">//size_t minLeaves = 50;</span>
<a name="l00233"></a>00233       <span class="keywordtype">size_t</span> minLeaves = (n/50); <span class="comment">// 20 when n = 1000</span>
<a name="l00234"></a>00234       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00235"></a>00235       <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00236"></a>00236       <span class="comment">// do the priority split</span>
<a name="l00237"></a>00237       successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00238"></a>00238            critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00239"></a>00239    }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   <span class="comment">//histogram 3</span>
<a name="l00242"></a>00242   cout &lt;&lt; <span class="stringliteral">&quot;Histogram 3&quot;</span> &lt;&lt; endl;
<a name="l00243"></a>00243   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistThird = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00244"></a>00244   myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(<span class="stringliteral">&quot;1,2,2&quot;</span>); <span class="comment">// make a specific starting shape</span>
<a name="l00245"></a>00245   <span class="comment">// put in the data in a &#39;pulse&#39; with no further splitting</span>
<a name="l00246"></a>00246   <span class="keywordtype">bool</span> successfulInsertionThird = myHistThird-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00247"></a>00247   
<a name="l00248"></a>00248 <span class="preprocessor">  #ifdef FORCEFAILINSERTION</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span>    <span class="comment">// debugging - force a failure here to check what program does</span>
<a name="l00250"></a>00250     successfulInsertionThird = <span class="keyword">false</span>;
<a name="l00251"></a>00251 <span class="preprocessor">  #endif</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span>
<a name="l00253"></a>00253   <span class="comment">//--------Start the MCMC------------------------------------------------//</span>
<a name="l00254"></a>00254   <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond &amp;&amp; successfulInsertionThird) {
<a name="l00255"></a>00255      
<a name="l00256"></a>00256     <span class="comment">// containers for adaptive histograms</span>
<a name="l00257"></a>00257     <span class="comment">// the starting points of the chains</span>
<a name="l00258"></a>00258     vector&lt; AdaptiveHistogram* &gt; hists;
<a name="l00259"></a>00259     hists.push_back(myHistFirst);
<a name="l00260"></a>00260     hists.push_back(myHistSecond);
<a name="l00261"></a>00261     hists.push_back(myHistThird);
<a name="l00262"></a>00262 
<a name="l00263"></a>00263     <span class="comment">// how many chains are to be run = number starting histograms</span>
<a name="l00264"></a>00264     <span class="keywordtype">size_t</span> chains = hists.size(); 
<a name="l00265"></a>00265     
<a name="l00266"></a>00266     <span class="keywordflow">if</span> (chains &lt; 2) {
<a name="l00267"></a>00267       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
<a name="l00268"></a>00268     }
<a name="l00269"></a>00269     
<a name="l00270"></a>00270     <span class="comment">// set up proposal distribution object</span>
<a name="l00271"></a>00271     <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00272"></a>00272     <span class="comment">// set up prior distribution object</span>
<a name="l00273"></a>00273     <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00276"></a>00276     
<a name="l00277"></a>00277     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00278"></a>00278     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280     gsl_rng * rgsl = NULL;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00283"></a>00283 
<a name="l00284"></a>00284     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00285"></a>00285     <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00286"></a>00286     <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00287"></a>00287     <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00288"></a>00288     gsl_rng_env_setup();
<a name="l00289"></a>00289     tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00290"></a>00290     rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00291"></a>00291     
<a name="l00292"></a>00292     <span class="comment">// set a seed for the data</span>
<a name="l00293"></a>00293     <span class="keywordtype">int</span> mcmcSeed = 1234;
<a name="l00294"></a>00294     gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00297"></a>00297     vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00298"></a>00298     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00299"></a>00299     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301     vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00302"></a>00302     vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00303"></a>00303     vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00304"></a>00304     vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
<a name="l00305"></a>00305     vector&lt;string&gt; L1ColNames(chains);
<a name="l00306"></a>00306     vector&lt;string&gt; L1RunningSumColNames(chains);
<a name="l00307"></a>00307     vector&lt;string&gt; L1SampleVarianceColNames(chains);
<a name="l00308"></a>00308     
<a name="l00309"></a>00309     std::string baseSequenceStateFilename = <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00310"></a>00310     std::string baseSequenceStateCollationFilename = <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00311"></a>00311     std::string baseSequenceStateAverageFilename = <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00312"></a>00312     std::string baseSequenceStateDiffsToAverageFilename = <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
<a name="l00313"></a>00313     
<a name="l00314"></a>00314     std::string  baseL1ColName = <span class="stringliteral">&quot;L1_&quot;</span>;
<a name="l00315"></a>00315     std::string  baseL1RunningSumColName = <span class="stringliteral">&quot;L1Sum_&quot;</span>;
<a name="l00316"></a>00316     std::string  baseL1SampleVarianceColName = <span class="stringliteral">&quot;L1Var_&quot;</span>;
<a name="l00317"></a>00317     std::string  overallL1RunningSumColName = <span class="stringliteral">&quot;OverallL1Sum&quot;</span>;
<a name="l00318"></a>00318     
<a name="l00319"></a>00319     <span class="comment">// files for outputing samples</span>
<a name="l00320"></a>00320     std::string samplesCollFilename = <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00321"></a>00321     std::string samplesLogFilename = <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00322"></a>00322     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollFilename);
<a name="l00323"></a>00323     
<a name="l00324"></a>00324     <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
<a name="l00325"></a>00325     <span class="comment">// but at the moment I have not done anything about graphing</span>
<a name="l00326"></a>00326     <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l00327"></a>00327       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00328"></a>00328     }
<a name="l00329"></a>00329     
<a name="l00330"></a>00330     <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
<a name="l00331"></a>00331     <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
<a name="l00332"></a>00332     
<a name="l00333"></a>00333     <span class="comment">// a name for the file of diagnostics </span>
<a name="l00334"></a>00334     std::string GRL1Filename = <span class="stringliteral">&quot;GelmanRubinL1Scalar.txt&quot;</span>;
<a name="l00335"></a>00335     <span class="comment">//outputFileStart(GRL1Filename);</span>
<a name="l00336"></a>00336     
<a name="l00337"></a>00337     <span class="comment">// a name for the file of working calculations for the diagnostics </span>
<a name="l00338"></a>00338     std::string GRL1WorkingCalcsFilename = <span class="stringliteral">&quot;GelmanRubinL1ScalarWorkingCalcs.txt&quot;</span>;
<a name="l00339"></a>00339     <span class="comment">//outputFileStart(GRL1WorkingCalcsFilename);</span>
<a name="l00340"></a>00340     
<a name="l00341"></a>00341     
<a name="l00342"></a>00342     <span class="comment">/* containers for summaries for the </span>
<a name="l00343"></a>00343 <span class="comment">    * L1-distances-to-average scalar convergence diagnostics */</span>
<a name="l00344"></a>00344     
<a name="l00345"></a>00345     <span class="comment">/* for each chain we need a container for current L1-distances-to-average </span>
<a name="l00346"></a>00346 <span class="comment">     * relative to the current average for all histogram states in the chain so far.</span>
<a name="l00347"></a>00347 <span class="comment">     * This is reused and overwritten each time a state is added to the chain</span>
<a name="l00348"></a>00348 <span class="comment">     * and is just a working-space to facilitate getting the L1s we want. */</span>
<a name="l00349"></a>00349     std::vector &lt; RealVec &gt; currentL1s(chains); 
<a name="l00350"></a>00350 
<a name="l00351"></a>00351     <span class="comment">// one vector of L1-distances-to-average as a RealVec for each chain</span>
<a name="l00352"></a>00352     std::vector &lt; RealVec &gt;* distancesL1Ptr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00353"></a>00353 
<a name="l00354"></a>00354     <span class="comment">/* vector containing one running sum of L1-distances-to-average for each chain</span>
<a name="l00355"></a>00355 <span class="comment">    we can work out the average v = L1 for each chain so far from this</span>
<a name="l00356"></a>00356 <span class="comment">    start with a running sum of 0.0 for each chain */</span>
<a name="l00357"></a>00357     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00358"></a>00358     
<a name="l00359"></a>00359     <span class="comment">/* vector containing one running sum of </span>
<a name="l00360"></a>00360 <span class="comment">    squared-L1-distances-to-average for each chain</span>
<a name="l00361"></a>00361 <span class="comment">    we can work out the average of the squared v&#39;s ie v^2 = L1^2</span>
<a name="l00362"></a>00362 <span class="comment">    for each chain so far from this</span>
<a name="l00363"></a>00363 <span class="comment">    start with a running sum of 0.0 for each chain.</span>
<a name="l00364"></a>00364 <span class="comment">    (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00365"></a>00365 <span class="comment">    when accumulating products of reals) */</span>
<a name="l00366"></a>00366     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumL1Squared(chains, cxsc::dotprecision(0.0));
<a name="l00367"></a>00367 
<a name="l00368"></a>00368     <span class="comment">/* value of running sum of L1-distances-to-average over all chains</span>
<a name="l00369"></a>00369 <span class="comment">    we can work out the average v = L1 over all chains so far from this */</span>
<a name="l00370"></a>00370     real runningSumL1AllChains = cxsc::real(0.0);
<a name="l00371"></a>00371     
<a name="l00372"></a>00372 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00373"></a>00373 <span class="preprocessor"></span>      <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00374"></a>00374       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1OverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00375"></a>00375       <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00376"></a>00376       std::vector &lt; RealVec &gt;* runningSumL1ChainsPtr 
<a name="l00377"></a>00377                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00378"></a>00378       <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00379"></a>00379       std::vector &lt; RealVec &gt;* sampleVariancesPtr 
<a name="l00380"></a>00380                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00381"></a>00381       <span class="comment">/* keep a vector of the flag for L1 convergence</span>
<a name="l00382"></a>00382 <span class="comment">       * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00383"></a>00383       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatL1FlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00384"></a>00384       
<a name="l00385"></a>00385       <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<a name="l00386"></a>00386 <span class="comment">       * (not a real, but easier to output it if we treat it like one) */</span>
<a name="l00387"></a>00387       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00388"></a>00388 <span class="preprocessor">    #endif</span>
<a name="l00389"></a>00389 <span class="preprocessor"></span>
<a name="l00390"></a>00390     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Ws_L1</span>
<a name="l00391"></a>00391     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the Bs_L1</span>
<a name="l00392"></a>00392     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the estimated var(v)</span>
<a name="l00393"></a>00393     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sqrtRhat_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(); <span class="comment">// to hold the sqrtRhats</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     <span class="comment">// container of each state at each sequence</span>
<a name="l00396"></a>00396     vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators(chains);
<a name="l00397"></a>00397 
<a name="l00398"></a>00398     <span class="comment">//container for the collation of the averages over each sequence at each state</span>
<a name="l00399"></a>00399     <span class="comment">//vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401     <span class="comment">//AdaptiveHistogramCollator masterCollator; // not newed so no need to delete</span>
<a name="l00402"></a>00402 
<a name="l00403"></a>00403     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00404"></a>00404 
<a name="l00405"></a>00405     <span class="comment">// this loop is just setting up containers of file names</span>
<a name="l00406"></a>00406     <span class="comment">// and getting info from the starting histograms that is</span>
<a name="l00407"></a>00407     <span class="comment">// needed to start the chains</span>
<a name="l00408"></a>00408     <span class="comment">// and a container of collators, one for each chain,</span>
<a name="l00409"></a>00409     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00410"></a>00410       
<a name="l00411"></a>00411       <span class="comment">// do not comment these out</span>
<a name="l00412"></a>00412       std::ostringstream stm1;
<a name="l00413"></a>00413       stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00414"></a>00414       sequenceStateFilenames[ci] = stm1.str();
<a name="l00415"></a>00415       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00418"></a>00418 <span class="preprocessor"></span>        {
<a name="l00419"></a>00419           std::ostringstream stm;
<a name="l00420"></a>00420           stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00421"></a>00421           sequenceCollationFilenames[ci] = stm.str();
<a name="l00422"></a>00422           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00423"></a>00423         }
<a name="l00424"></a>00424         {
<a name="l00425"></a>00425           std::ostringstream stm;
<a name="l00426"></a>00426           stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00427"></a>00427           sequenceAverageFilenames[ci] = stm.str();
<a name="l00428"></a>00428           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00429"></a>00429         }
<a name="l00430"></a>00430         {
<a name="l00431"></a>00431           std::ostringstream stm;
<a name="l00432"></a>00432           stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00433"></a>00433           sequenceDiffsToAverageFilenames[ci] = stm.str();
<a name="l00434"></a>00434           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
<a name="l00435"></a>00435         }
<a name="l00436"></a>00436         {
<a name="l00437"></a>00437           std::ostringstream stm;
<a name="l00438"></a>00438           stm &lt;&lt; baseL1ColName &lt;&lt; ci;
<a name="l00439"></a>00439           L1ColNames[ci] = stm.str();
<a name="l00440"></a>00440         }
<a name="l00441"></a>00441         {
<a name="l00442"></a>00442           std::ostringstream stm;
<a name="l00443"></a>00443           stm &lt;&lt; baseL1RunningSumColName &lt;&lt; ci;
<a name="l00444"></a>00444           L1RunningSumColNames[ci] = stm.str();
<a name="l00445"></a>00445         }
<a name="l00446"></a>00446         
<a name="l00447"></a>00447         {
<a name="l00448"></a>00448           std::ostringstream stm;
<a name="l00449"></a>00449           stm &lt;&lt; baseL1SampleVarianceColName &lt;&lt; ci;
<a name="l00450"></a>00450           L1SampleVarianceColNames[ci] = stm.str();
<a name="l00451"></a>00451         }
<a name="l00452"></a>00452 <span class="preprocessor">      #endif</span>
<a name="l00453"></a>00453 <span class="preprocessor"></span>      <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<a name="l00454"></a>00454 <span class="comment">      * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<a name="l00455"></a>00455 <span class="comment">      * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<a name="l00456"></a>00456 <span class="comment">      * change.  */</span>
<a name="l00457"></a>00457       
<a name="l00458"></a>00458       <span class="comment">// set up a container for the leaf children</span>
<a name="l00459"></a>00459       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00460"></a>00460       <span class="comment">// set up a container for the subleaf children</span>
<a name="l00461"></a>00461       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00462"></a>00462 
<a name="l00463"></a>00463       <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00464"></a>00464       <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00465"></a>00465 
<a name="l00466"></a>00466       <span class="comment">// fill the container with the leaf children</span>
<a name="l00467"></a>00467       hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00468"></a>00468       <span class="comment">// fill the container with the subleaf children</span>
<a name="l00469"></a>00469       hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00470"></a>00470 
<a name="l00471"></a>00471       numCherries = cherryVec.size();
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       <span class="comment">// check if node is still splittable</span>
<a name="l00474"></a>00474       <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00475"></a>00475          <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00476"></a>00476          <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00477"></a>00477          <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00478"></a>00478          <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00479"></a>00479             <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
<a name="l00480"></a>00480               ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
<a name="l00481"></a>00481                  <span class="comment">// leaf can go into container</span>
<a name="l00482"></a>00482                  nodeLists[ci].push_back(*lit);
<a name="l00483"></a>00483                  numLeaves++;
<a name="l00484"></a>00484             }
<a name="l00485"></a>00485          }
<a name="l00486"></a>00486       }
<a name="l00487"></a>00487 
<a name="l00488"></a>00488       <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00489"></a>00489       <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00490"></a>00490          nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00491"></a>00491                          cherryVec.end());
<a name="l00492"></a>00492       <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00493"></a>00493          cancontinue = <span class="keyword">false</span>;
<a name="l00494"></a>00494          <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00495"></a>00495          std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00496"></a>00496                  &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00497"></a>00497                  &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00498"></a>00498       }
<a name="l00499"></a>00499 
<a name="l00500"></a>00500       numLeavesVec[ci] = numLeaves;
<a name="l00501"></a>00501       numCherriesVec[ci] = numCherries;
<a name="l00502"></a>00502 
<a name="l00503"></a>00503       <span class="comment">// set up one collator for each chain, starting it with the first histogram state</span>
<a name="l00504"></a>00504       sequenceCollators[ci] = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] );
<a name="l00505"></a>00505     
<a name="l00506"></a>00506       <span class="comment">// collect the calculations for the starting points</span>
<a name="l00507"></a>00507       
<a name="l00508"></a>00508       <span class="comment">// one vector of L1s for each chain</span>
<a name="l00509"></a>00509       distancesL1Ptr-&gt;at(ci).push_back( cxsc::real(0.0) ); 
<a name="l00510"></a>00510       
<a name="l00511"></a>00511 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00512"></a>00512 <span class="preprocessor"></span>        sampleVariancesPtr-&gt;at(ci).push_back(cxsc::real(0.0) );
<a name="l00513"></a>00513         runningSumL1ChainsPtr-&gt;at(ci).push_back( cxsc::real(0.0) );
<a name="l00514"></a>00514 <span class="preprocessor">      #endif</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span>      
<a name="l00516"></a>00516       <span class="comment">/* running sum of L1s for each chain, held in runningSumL1Ptr</span>
<a name="l00517"></a>00517 <span class="comment">      are all initialised to 0.0 already </span>
<a name="l00518"></a>00518 <span class="comment">      * </span>
<a name="l00519"></a>00519 <span class="comment">      * running sum of squared L1s for each chain, held in  runningSumL1SquaredPtr</span>
<a name="l00520"></a>00520 <span class="comment">      are all initialised to 0.0 already</span>
<a name="l00521"></a>00521 <span class="comment">      */</span> 
<a name="l00522"></a>00522       
<a name="l00523"></a>00523       
<a name="l00524"></a>00524 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l00525"></a>00525 <span class="preprocessor"></span>        <span class="comment">// make files for current average and current collations</span>
<a name="l00526"></a>00526       {
<a name="l00527"></a>00527         sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
<a name="l00528"></a>00528         
<a name="l00529"></a>00529         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00530"></a>00530                     = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00531"></a>00531         colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
<a name="l00532"></a>00532         
<a name="l00533"></a>00533         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00534"></a>00534                     = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00535"></a>00535         colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
<a name="l00536"></a>00536       } <span class="comment">// temp objects go out of scope here  </span>
<a name="l00537"></a>00537         
<a name="l00538"></a>00538 <span class="preprocessor">      #endif</span>
<a name="l00539"></a>00539 <span class="preprocessor"></span>    
<a name="l00540"></a>00540     } <span class="comment">// end loop through chains setting up things to be able to start</span>
<a name="l00541"></a>00541     
<a name="l00542"></a>00542     <span class="comment">/* the overall running sum runningSumL1AllChains </span>
<a name="l00543"></a>00543 <span class="comment">     * was initialised to 0.0 </span>
<a name="l00544"></a>00544 <span class="comment">     * and #ifdef MYDEBUG, runningSumL1Overall was initialised to contain one 0.0 </span>
<a name="l00545"></a>00545 <span class="comment">     * and similarly rhatL1FlagPtr was initialised to contain one 0.0*/</span>
<a name="l00546"></a>00546     
<a name="l00547"></a>00547     
<a name="l00548"></a>00548     <span class="comment">/* start with the convergence statistics for chains with just one state in*/</span>
<a name="l00549"></a>00549     <span class="comment">// the Ws_L1</span>
<a name="l00550"></a>00550     Ws_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00551"></a>00551     <span class="comment">// the Bs_L1</span>
<a name="l00552"></a>00552     Bs_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00553"></a>00553     <span class="comment">// the estimated var(v)</span>
<a name="l00554"></a>00554     estVarV_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00555"></a>00555     <span class="comment">// the sqrtRhats</span>
<a name="l00556"></a>00556     sqrtRhat_L1Ptr-&gt;push_back(cxsc::real(0.0)); 
<a name="l00557"></a>00557 
<a name="l00558"></a>00558     <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l00559"></a>00559     
<a name="l00560"></a>00560     <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l00561"></a>00561 
<a name="l00562"></a>00562     <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
<a name="l00563"></a>00563     
<a name="l00564"></a>00564     <span class="keywordtype">int</span> samplesSoFar = 0;
<a name="l00565"></a>00565     
<a name="l00566"></a>00566     <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far </span>
<a name="l00567"></a>00567 <span class="comment">              because  we already have the initial histograms */</span>
<a name="l00568"></a>00568     
<a name="l00569"></a>00569     
<a name="l00570"></a>00570     <span class="comment">/* varibles for monitoring convergence</span>
<a name="l00571"></a>00571 <span class="comment">     * we only have one scalar value at the moment (L1-distance-to-average) but</span>
<a name="l00572"></a>00572 <span class="comment">     * we might have more - might want convergence on all diagnostics */</span>
<a name="l00573"></a>00573     <span class="keywordtype">int</span> rhatFlagCounter = 0;
<a name="l00574"></a>00574     <span class="keywordtype">int</span> rhatFlagCounterThreshold = 1;   <span class="comment">/* how many of the scalar values must have</span>
<a name="l00575"></a>00575 <span class="comment">                      * diagnostic within limits for sampling to start?</span>
<a name="l00576"></a>00576 <span class="comment">                      * usually this would probably be the number</span>
<a name="l00577"></a>00577 <span class="comment">                      * of scalar values being used? */</span>
<a name="l00578"></a>00578     <span class="keywordtype">int</span> rhatL1Flag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value</span>
<a name="l00579"></a>00579     <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
<a name="l00580"></a>00580     
<a name="l00581"></a>00581     <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
<a name="l00582"></a>00582     
<a name="l00583"></a>00583     <span class="comment">// counter to keep track of loops</span>
<a name="l00584"></a>00584     <span class="keywordtype">int</span> loopCounter = 0;
<a name="l00585"></a>00585     
<a name="l00586"></a>00586     <span class="comment">/* We also need a collator for the samples*/</span>
<a name="l00587"></a>00587     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
<a name="l00588"></a>00588     
<a name="l00589"></a>00589     <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) {
<a name="l00590"></a>00590       
<a name="l00591"></a>00591 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l00592"></a>00592 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;****** Change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l00593"></a>00593 <span class="preprocessor">      #endif</span>
<a name="l00594"></a>00594 <span class="preprocessor"></span>      
<a name="l00595"></a>00595       loopCounter++;
<a name="l00596"></a>00596       <span class="comment">// a collator for the averages for this loop</span>
<a name="l00597"></a>00597       <span class="comment">//AdaptiveHistogramCollator* avgColl = new AdaptiveHistogramCollator;</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599       <span class="comment">/* we want to accumulate the sample variance of the scalar summary</span>
<a name="l00600"></a>00600 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00601"></a>00601       cxsc::real sumOfSampleVariancesOverChains(0.0);
<a name="l00602"></a>00602       
<a name="l00603"></a>00603       <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l00604"></a>00604 <span class="comment">       * the running sum of L1-distances-to-average </span>
<a name="l00605"></a>00605 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00606"></a>00606       cxsc::real sumOfSquaresOfRunningSums(0.0);
<a name="l00607"></a>00607       
<a name="l00608"></a>00608       
<a name="l00609"></a>00609 
<a name="l00610"></a>00610       <span class="comment">// for each histogram in turn, change the state</span>
<a name="l00611"></a>00611       <span class="comment">/* </span>
<a name="l00612"></a>00612 <span class="comment">       * this is all a fudge - changeMCMCstate should just be a private</span>
<a name="l00613"></a>00613 <span class="comment">       * method of the histograms but I think I made it public so that</span>
<a name="l00614"></a>00614 <span class="comment">       * I could use it here in the example as a first step to being</span>
<a name="l00615"></a>00615 <span class="comment">       * able to make all of this chain convergence stuff back into</span>
<a name="l00616"></a>00616 <span class="comment">       * a method of the histograms themselves</span>
<a name="l00617"></a>00617 <span class="comment">       */</span>
<a name="l00618"></a>00618       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00619"></a>00619         
<a name="l00620"></a>00620 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00621"></a>00621 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<a name="l00622"></a>00622 <span class="preprocessor">        #endif</span>
<a name="l00623"></a>00623 <span class="preprocessor"></span>        
<a name="l00624"></a>00624         <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<a name="l00625"></a>00625 <span class="comment">         * in the comments inside this loop */</span>
<a name="l00626"></a>00626 
<a name="l00627"></a>00627         <span class="comment">// changeMCMCState for the chain</span>
<a name="l00628"></a>00628         <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
<a name="l00629"></a>00629         goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l00630"></a>00630                numLeavesVec[ci], numCherriesVec[ci],
<a name="l00631"></a>00631                proposal, logPrior, minPoints,
<a name="l00632"></a>00632                rgsl, loggingInChangeStates,
<a name="l00633"></a>00633                sequenceStateFilenames[ci], states);
<a name="l00634"></a>00634                
<a name="l00635"></a>00635 <span class="preprocessor">        #ifdef FORCEFAILMCMCLOOP</span>
<a name="l00636"></a>00636 <span class="preprocessor"></span>          <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
<a name="l00637"></a>00637           <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<a name="l00638"></a>00638 <span class="preprocessor">        #endif </span>
<a name="l00639"></a>00639 <span class="preprocessor"></span>
<a name="l00640"></a>00640         <span class="keywordflow">if</span> (!goodLoop) {
<a name="l00641"></a>00641           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
<a name="l00642"></a>00642           <span class="comment">// stop if we aren&#39;t happy</span>
<a name="l00643"></a>00643         }
<a name="l00644"></a>00644         
<a name="l00645"></a>00645         <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l00646"></a>00646           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l00647"></a>00647         }
<a name="l00648"></a>00648         
<a name="l00649"></a>00649         <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
<a name="l00650"></a>00650         
<a name="l00651"></a>00651         <span class="comment">// collate the current sample state in the chain</span>
<a name="l00652"></a>00652         sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));
<a name="l00653"></a>00653 
<a name="l00654"></a>00654         <span class="comment">// collect the L1 distances and update the runnings sums</span>
<a name="l00655"></a>00655         
<a name="l00656"></a>00656         <span class="comment">// update our collection of L1s to average for all histogram states in the chain</span>
<a name="l00657"></a>00657         currentL1s[ci] = sequenceCollators[ci]-&gt;getL1DistancesToAverage(currentL1s[ci]);
<a name="l00658"></a>00658         <span class="comment">/* we actually only want the L1 for the last state in the chain,</span>
<a name="l00659"></a>00659 <span class="comment">         * which we collect in the right vector for this chain in distancesL1 */</span>
<a name="l00660"></a>00660         cxsc::real lastStateL1 = currentL1s[ci].back();
<a name="l00661"></a>00661         distancesL1Ptr-&gt;at(ci).push_back( lastStateL1 );  
<a name="l00662"></a>00662         
<a name="l00663"></a>00663         
<a name="l00664"></a>00664         <span class="comment">// update the running sum of L1s for the chain, held in runningSumL1</span>
<a name="l00665"></a>00665         cxsc::real newRunningSum = runningSumL1Ptr-&gt;at(ci) + lastStateL1;
<a name="l00666"></a>00666         runningSumL1Ptr-&gt;at(ci) = newRunningSum;
<a name="l00667"></a>00667         
<a name="l00668"></a>00668         <span class="comment">// accumulate the square of the running sum of L1s </span>
<a name="l00669"></a>00669         sumOfSquaresOfRunningSums += newRunningSum*newRunningSum;
<a name="l00670"></a>00670         
<a name="l00671"></a>00671         <span class="comment">/* update the running sum of squared L1s over this chain</span>
<a name="l00672"></a>00672 <span class="comment">         *  held in runningSumL1Squared as a dot precision */</span>
<a name="l00673"></a>00673         cxsc::accumulate( runningSumL1Squared[ci], lastStateL1, lastStateL1 );
<a name="l00674"></a>00674         
<a name="l00675"></a>00675         <span class="comment">// update  the overall running sum runningSumL1AllChains </span>
<a name="l00676"></a>00676         runningSumL1AllChains += lastStateL1;
<a name="l00677"></a>00677         
<a name="l00678"></a>00678         <span class="comment">/* how many histograms have we got so far?</span>
<a name="l00679"></a>00679 <span class="comment">         * this chain should have states+1 states in it.</span>
<a name="l00680"></a>00680 <span class="comment">         * because we have not yet incremented states.*/</span>
<a name="l00681"></a>00681         <span class="keywordtype">size_t</span> n = sequenceCollators[ci]-&gt;getNumberCollated();
<a name="l00682"></a>00682         assert(n == states + 1);
<a name="l00683"></a>00683         
<a name="l00684"></a>00684         <span class="comment">/* and n should be at least 2 because we started with the </span>
<a name="l00685"></a>00685 <span class="comment">         * starting histogram and have now added another state.*/</span>
<a name="l00686"></a>00686         assert(n &gt; 1);
<a name="l00687"></a>00687         <span class="comment">/* could just use n - 1 = states + 1 - 1 = states in formula below</span>
<a name="l00688"></a>00688 <span class="comment">         * once we are happy it is all working!</span>
<a name="l00689"></a>00689 <span class="comment">        </span>
<a name="l00690"></a>00690 <span class="comment">        /* accumulate the sample variance for this chain: </span>
<a name="l00691"></a>00691 <span class="comment">         * sample variance for the scalar summary v = L1-to-average</span>
<a name="l00692"></a>00692 <span class="comment">         * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l00693"></a>00693 <span class="comment">         * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l00694"></a>00694         cxsc::real thisSampleVariance( ( 1.0/(n-1) )*( cxsc::rnd(runningSumL1Squared[ci])
<a name="l00695"></a>00695                   -  (newRunningSum*newRunningSum/(n * 1.0)) ) );
<a name="l00696"></a>00696         sumOfSampleVariancesOverChains += thisSampleVariance;
<a name="l00697"></a>00697         
<a name="l00698"></a>00698 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00699"></a>00699 <span class="preprocessor"></span>          sampleVariancesPtr-&gt;at(ci).push_back( thisSampleVariance );
<a name="l00700"></a>00700           runningSumL1ChainsPtr-&gt;at(ci).push_back (newRunningSum);
<a name="l00701"></a>00701 <span class="preprocessor">        #endif</span>
<a name="l00702"></a>00702 <span class="preprocessor"></span>
<a name="l00703"></a>00703         
<a name="l00704"></a>00704 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00705"></a>00705 <span class="preprocessor"></span>          <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l00706"></a>00706           <span class="comment">// distancesL1[ci] has the v_ij for each chain i</span>
<a name="l00707"></a>00707           assert( n == distancesL1[ci].size() );
<a name="l00708"></a>00708           cxsc::real acc(0.0);
<a name="l00709"></a>00709           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
<a name="l00710"></a>00710             acc+= (*it);
<a name="l00711"></a>00711           }
<a name="l00712"></a>00712           cxsc::real av = acc/(n * 1.0);
<a name="l00713"></a>00713           cxsc::dotprecision accDiffs(0.0);
<a name="l00714"></a>00714           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1[ci].begin(); it &lt; distancesL1[ci].end(); ++it) {
<a name="l00715"></a>00715             cxsc::real thisDiff = (*it) - av;
<a name="l00716"></a>00716             <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00717"></a>00717             cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00718"></a>00718           }
<a name="l00719"></a>00719           cxsc::real altVar = rnd(accDiffs)/( n - 1.0 );
<a name="l00720"></a>00720           
<a name="l00721"></a>00721           cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance is\t&quot;</span> &lt;&lt; thisSampleVariance &lt;&lt; endl;
<a name="l00722"></a>00722           cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l00723"></a>00723           <span class="comment">//assert(cxsc::_double(thisSampleVariance) == cxsc::_double(altVar) );</span>
<a name="l00724"></a>00724         
<a name="l00725"></a>00725 <span class="preprocessor">        #endif</span>
<a name="l00726"></a>00726 <span class="preprocessor"></span>        
<a name="l00727"></a>00727         
<a name="l00728"></a>00728 <span class="preprocessor">        #ifdef MYDEBUG_OUTPUT</span>
<a name="l00729"></a>00729 <span class="preprocessor"></span>          <span class="comment">// make files for current average and current collations</span>
<a name="l00730"></a>00730           sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], states + 1);
<a name="l00731"></a>00731         
<a name="l00732"></a>00732           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00733"></a>00733                       = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00734"></a>00734           colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], states + 1);
<a name="l00735"></a>00735           
<a name="l00736"></a>00736           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00737"></a>00737                       = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00738"></a>00738           colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], states + 1);
<a name="l00739"></a>00739 <span class="preprocessor">        #endif</span>
<a name="l00740"></a>00740 <span class="preprocessor"></span>          
<a name="l00741"></a>00741       } <span class="comment">// end change state for each histogram in turn</span>
<a name="l00742"></a>00742 
<a name="l00743"></a>00743       <span class="comment">/* each chain now has a new state which has been collated into</span>
<a name="l00744"></a>00744 <span class="comment">       * its collator and info for L1 distances-to-average have been collected</span>
<a name="l00745"></a>00745 <span class="comment">       * and the sample variance of the scalar summary for each chain</span>
<a name="l00746"></a>00746 <span class="comment">       * has been put into sampleVariances, so we can now work out the</span>
<a name="l00747"></a>00747 <span class="comment">       * convergence diagnostics */</span>
<a name="l00748"></a>00748 
<a name="l00749"></a>00749       <span class="comment">// increment number of states   </span>
<a name="l00750"></a>00750       states++;
<a name="l00751"></a>00751 
<a name="l00752"></a>00752 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00753"></a>00753 <span class="preprocessor"></span>        <span class="comment">// store the current runningSumL1AllChains as well</span>
<a name="l00754"></a>00754         runningSumL1OverallPtr-&gt;push_back(runningSumL1AllChains);
<a name="l00755"></a>00755         
<a name="l00756"></a>00756 <span class="preprocessor">      #endif</span>
<a name="l00757"></a>00757 <span class="preprocessor"></span>
<a name="l00758"></a>00758       <span class="comment">// the Ws_L1: average, over chains, of sample variance of scalar value</span>
<a name="l00759"></a>00759       cxsc::real thisW = sumOfSampleVariancesOverChains/(chains * 1.0); 
<a name="l00760"></a>00760       Ws_L1Ptr-&gt;push_back(thisW); 
<a name="l00761"></a>00761       <span class="comment">// the Bs_L1</span>
<a name="l00762"></a>00762       cxsc::real thisB = (1.0/( (chains - 1) * states ) 
<a name="l00763"></a>00763                 * ( sumOfSquaresOfRunningSums 
<a name="l00764"></a>00764                 - (runningSumL1AllChains 
<a name="l00765"></a>00765                 * runningSumL1AllChains/(chains * 1.0)) ) );
<a name="l00766"></a>00766       Bs_L1Ptr-&gt;push_back(thisB); 
<a name="l00767"></a>00767       
<a name="l00768"></a>00768 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l00769"></a>00769 <span class="preprocessor"></span>        <span class="comment">//check thisB is correct, doing it the long way</span>
<a name="l00770"></a>00770         <span class="comment">// runningSumL1 has one running sum for each chain</span>
<a name="l00771"></a>00771         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l00772"></a>00772         cxsc::real accRunningSums(0.0);
<a name="l00773"></a>00773         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumL1.begin(); it &lt; runningSumL1.end(); ++it) {
<a name="l00774"></a>00774           cxsc::real thisChainRunningSum = (*it);
<a name="l00775"></a>00775           cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
<a name="l00776"></a>00776           chainAverages.push_back(thisChainAv);
<a name="l00777"></a>00777           accRunningSums+=thisChainRunningSum;
<a name="l00778"></a>00778         }
<a name="l00779"></a>00779         cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
<a name="l00780"></a>00780         cxsc::dotprecision accDiffs(0.0);
<a name="l00781"></a>00781         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l00782"></a>00782           cxsc::real thisDiff = (*it) - overallAv;
<a name="l00783"></a>00783           <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l00784"></a>00784           cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l00785"></a>00785         }
<a name="l00786"></a>00786         cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
<a name="l00787"></a>00787         
<a name="l00788"></a>00788         cout &lt;&lt; <span class="stringliteral">&quot;\nthisB is\t&quot;</span> &lt;&lt; thisB &lt;&lt; endl;
<a name="l00789"></a>00789         cout &lt;&lt; <span class="stringliteral">&quot;altB is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l00790"></a>00790         <span class="comment">//assert(thisB == altB);</span>
<a name="l00791"></a>00791       
<a name="l00792"></a>00792 <span class="preprocessor">      #endif</span>
<a name="l00793"></a>00793 <span class="preprocessor"></span>      
<a name="l00794"></a>00794       <span class="comment">// the estimated var(v)</span>
<a name="l00795"></a>00795       cxsc::real thisVarV = states/(states-1.0) * thisW + (1.0/states)*thisB;
<a name="l00796"></a>00796       estVarV_L1Ptr-&gt;push_back(thisVarV); 
<a name="l00797"></a>00797       <span class="comment">// the sqrtRhats</span>
<a name="l00798"></a>00798       cxsc::real thisSqrtRhat_L1 = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">cxsc::sqrt</a>(thisVarV/thisW);
<a name="l00799"></a>00799       sqrtRhat_L1Ptr-&gt;push_back(thisSqrtRhat_L1); 
<a name="l00800"></a>00800       
<a name="l00801"></a>00801       <span class="comment">// check on the diagnostics</span>
<a name="l00802"></a>00802       <span class="keywordflow">if</span> (thisSqrtRhat_L1 &lt;= 1.0 + tol &amp;&amp; thisSqrtRhat_L1 &gt;= 1.0 - tol) {
<a name="l00803"></a>00803         <span class="comment">//flagRhat++; //increment the flagRhat counter</span>
<a name="l00804"></a>00804         
<a name="l00805"></a>00805         <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l00806"></a>00806         <span class="keywordflow">if</span> (!rhatL1Flag)  {
<a name="l00807"></a>00807 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l00808"></a>00808 <span class="preprocessor"></span>            
<a name="l00809"></a>00809             cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test satisfied at &quot;</span> 
<a name="l00810"></a>00810                 &lt;&lt; states &lt;&lt; endl;
<a name="l00811"></a>00811             
<a name="l00812"></a>00812 <span class="preprocessor">          #endif</span>
<a name="l00813"></a>00813 <span class="preprocessor"></span>        
<a name="l00814"></a>00814           <span class="comment">// set the flag for this scalar value</span>
<a name="l00815"></a>00815           rhatL1Flag = 1;
<a name="l00816"></a>00816           
<a name="l00817"></a>00817           <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l00818"></a>00818           rhatFlagCounter ++; 
<a name="l00819"></a>00819         }
<a name="l00820"></a>00820       }
<a name="l00821"></a>00821       <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
<a name="l00822"></a>00822         
<a name="l00823"></a>00823         <span class="comment">// if we were okay on this scalar value before</span>
<a name="l00824"></a>00824         <span class="keywordflow">if</span> (rhatL1Flag) {
<a name="l00825"></a>00825 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l00826"></a>00826 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test NOT now satisfied at &quot;</span> 
<a name="l00827"></a>00827               &lt;&lt; states &lt;&lt; endl;
<a name="l00828"></a>00828         
<a name="l00829"></a>00829 <span class="preprocessor">          #endif</span>
<a name="l00830"></a>00830 <span class="preprocessor"></span>          rhatL1Flag = 0; <span class="comment">// update the flag</span>
<a name="l00831"></a>00831           rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
<a name="l00832"></a>00832         }     
<a name="l00833"></a>00833       }
<a name="l00834"></a>00834       
<a name="l00835"></a>00835 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00836"></a>00836 <span class="preprocessor"></span>        <span class="comment">// store the L1flag as well, as a real, which is a fudge...</span>
<a name="l00837"></a>00837         rhatL1FlagPtr-&gt;push_back(rhatL1Flag);
<a name="l00838"></a>00838         
<a name="l00839"></a>00839 <span class="preprocessor">      #endif</span>
<a name="l00840"></a>00840 <span class="preprocessor"></span>      
<a name="l00841"></a>00841       <span class="comment">/* we&#39;d do this for all other scalar values as well, if applicable, then ...*/</span>
<a name="l00842"></a>00842         
<a name="l00843"></a>00843       <span class="comment">// check if we have enough flags to consider ourselves burntin</span>
<a name="l00844"></a>00844       <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
<a name="l00845"></a>00845         
<a name="l00846"></a>00846         burntin = 1; 
<a name="l00847"></a>00847         burntinReachedState = states;
<a name="l00848"></a>00848         
<a name="l00849"></a>00849 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00850"></a>00850 <span class="preprocessor"></span>          <span class="comment">// if we have not been burntin, give a message</span>
<a name="l00851"></a>00851            cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
<a name="l00852"></a>00852               &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l00853"></a>00853           
<a name="l00854"></a>00854 <span class="preprocessor">        #endif</span>
<a name="l00855"></a>00855 <span class="preprocessor"></span>        
<a name="l00856"></a>00856         <span class="comment">/* old comments from Gloria&#39;s code :</span>
<a name="l00857"></a>00857 <span class="comment">         * maybe can also have an upper bound for flagRhat defined by user.</span>
<a name="l00858"></a>00858 <span class="comment">         * once there is enough &quot;flagRhat&quot;, we can stop the chain&quot; */</span>
<a name="l00859"></a>00859       }
<a name="l00860"></a>00860       
<a name="l00861"></a>00861       <span class="comment">// but it may be that we were burntin and no longer are</span>
<a name="l00862"></a>00862       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
<a name="l00863"></a>00863         
<a name="l00864"></a>00864         burntin = 0; 
<a name="l00865"></a>00865         burntinReachedState = 0;
<a name="l00866"></a>00866         
<a name="l00867"></a>00867         <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
<a name="l00868"></a>00868         samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
<a name="l00869"></a>00869         
<a name="l00870"></a>00870         samplesSoFar = 0;
<a name="l00871"></a>00871         
<a name="l00872"></a>00872         <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
<a name="l00873"></a>00873         cxsc::real newVal(0.0);
<a name="l00874"></a>00874         
<a name="l00875"></a>00875 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00876"></a>00876 <span class="preprocessor"></span>          std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
<a name="l00877"></a>00877             std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<a name="l00878"></a>00878 <span class="preprocessor">        #endif</span>
<a name="l00879"></a>00879 <span class="preprocessor"></span>        
<a name="l00880"></a>00880         <span class="comment">// restart the log file if we are logging</span>
<a name="l00881"></a>00881         <span class="comment">// note nothing done here yet about logging graphs as well  </span>
<a name="l00882"></a>00882         <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l00883"></a>00883           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00884"></a>00884         }   
<a name="l00885"></a>00885         
<a name="l00886"></a>00886 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00887"></a>00887 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
<a name="l00888"></a>00888               &lt;&lt; states &lt;&lt; endl;
<a name="l00889"></a>00889           
<a name="l00890"></a>00890 <span class="preprocessor">        #endif</span>
<a name="l00891"></a>00891 <span class="preprocessor"></span>        
<a name="l00892"></a>00892         <span class="comment">/* old comments from Gloria&#39;s code :</span>
<a name="l00893"></a>00893 <span class="comment">         * maybe can also have an upper bound for flagRhat defined by user.</span>
<a name="l00894"></a>00894 <span class="comment">         * once there is enough &quot;flagRhat&quot;, we can stop the chain&quot; */</span>
<a name="l00895"></a>00895       }
<a name="l00896"></a>00896       
<a name="l00897"></a>00897       <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<a name="l00898"></a>00898 <span class="comment">       * the thinout specified </span>
<a name="l00899"></a>00899 <span class="comment">       * note - we will only be in the loop at all if we still need more samples*/</span>
<a name="l00900"></a>00900       <span class="keywordflow">if</span> (burntin &amp;&amp; ((states-burntinReachedState)%thinout == 0)) {
<a name="l00901"></a>00901         
<a name="l00902"></a>00902 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00903"></a>00903 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;sampling at state &quot;</span> &lt;&lt; states &lt;&lt; endl;
<a name="l00904"></a>00904           sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
<a name="l00905"></a>00905 
<a name="l00906"></a>00906 <span class="preprocessor">        #endif</span>
<a name="l00907"></a>00907 <span class="preprocessor"></span>        
<a name="l00908"></a>00908         <span class="comment">// take one sample from each chain until we have enough samples</span>
<a name="l00909"></a>00909         <span class="comment">// and increment samplesSoFar for each one taken</span>
<a name="l00910"></a>00910         vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l00911"></a>00911         <span class="keywordflow">for</span> (ait = hists.begin(); 
<a name="l00912"></a>00912             (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
<a name="l00913"></a>00913             ++ait) {
<a name="l00914"></a>00914           
<a name="l00915"></a>00915           samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
<a name="l00916"></a>00916           
<a name="l00917"></a>00917           samplesSoFar++;
<a name="l00918"></a>00918           
<a name="l00919"></a>00919           <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l00920"></a>00920             (*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);
<a name="l00921"></a>00921           }
<a name="l00922"></a>00922           
<a name="l00923"></a>00923         }
<a name="l00924"></a>00924         
<a name="l00925"></a>00925       } <span class="comment">// finished taking samples for this loop</span>
<a name="l00926"></a>00926       <span class="keywordflow">else</span> {
<a name="l00927"></a>00927 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00928"></a>00928 <span class="preprocessor"></span>          
<a name="l00929"></a>00929           sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<a name="l00930"></a>00930 <span class="preprocessor">        #endif</span>
<a name="l00931"></a>00931 <span class="preprocessor"></span>      }
<a name="l00932"></a>00932       
<a name="l00933"></a>00933       assert(samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar);
<a name="l00934"></a>00934       
<a name="l00935"></a>00935       
<a name="l00936"></a>00936       <span class="comment">// back into loop</span>
<a name="l00937"></a>00937 <span class="preprocessor">      #if !defined(MYDEBUG_OUTPUT)</span>
<a name="l00938"></a>00938 <span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00939"></a>00939 <span class="preprocessor"></span>          <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
<a name="l00940"></a>00940           <span class="keywordflow">if</span> (loopCounter%100 == 0) {
<a name="l00941"></a>00941             cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
<a name="l00942"></a>00942           }
<a name="l00943"></a>00943 <span class="preprocessor">        #endif</span>
<a name="l00944"></a>00944 <span class="preprocessor"></span><span class="preprocessor">      #endif</span>
<a name="l00945"></a>00945 <span class="preprocessor"></span>
<a name="l00946"></a>00946     }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
<a name="l00947"></a>00947     
<a name="l00948"></a>00948     cancontinue = goodLoop;
<a name="l00949"></a>00949     
<a name="l00950"></a>00950 <span class="preprocessor">    #ifdef MYDEBUG_OUTPUT</span>
<a name="l00951"></a>00951 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops loopCounter = &quot;</span> &lt;&lt; loopCounter &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l00952"></a>00952 <span class="preprocessor">    #endif</span>
<a name="l00953"></a>00953 <span class="preprocessor"></span>    
<a name="l00954"></a>00954 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00955"></a>00955 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;number of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l00956"></a>00956 <span class="preprocessor">    #endif</span>
<a name="l00957"></a>00957 <span class="preprocessor"></span>
<a name="l00958"></a>00958     <span class="comment">// free the random number generator</span>
<a name="l00959"></a>00959     gsl_rng_free (rgsl);
<a name="l00960"></a>00960 
<a name="l00961"></a>00961     cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
<a name="l00962"></a>00962   
<a name="l00963"></a>00963     
<a name="l00964"></a>00964     <span class="comment">/* is all okay with the loop</span>
<a name="l00965"></a>00965 <span class="comment">     * and we have all our samples */</span>
<a name="l00966"></a>00966     <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {  
<a name="l00967"></a>00967 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00968"></a>00968 <span class="preprocessor"></span>        <span class="comment">// output the overall collator</span>
<a name="l00969"></a>00969         samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<a name="l00970"></a>00970 <span class="preprocessor">      #endif</span>
<a name="l00971"></a>00971 <span class="preprocessor"></span>      
<a name="l00972"></a>00972       <span class="comment">// make the return object be the average of the samples</span>
<a name="l00973"></a>00973       samplesAvg = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00974"></a>00974         
<a name="l00975"></a>00975       <span class="comment">// output the convergence diagnostics</span>
<a name="l00976"></a>00976       <span class="comment">/*</span>
<a name="l00977"></a>00977 <span class="comment">      outputFile(GRL1Filename, &quot;\n\n\n Final diagnostics&quot;);</span>
<a name="l00978"></a>00978 <span class="comment">      outputFile(GRL1Filename, &quot;W&quot;, Ws_L1);</span>
<a name="l00979"></a>00979 <span class="comment">      outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l00980"></a>00980 <span class="comment">      outputFile(GRL1Filename, &quot;B&quot;, Bs_L1);</span>
<a name="l00981"></a>00981 <span class="comment">      outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l00982"></a>00982 <span class="comment">      outputFile(GRL1Filename, &quot;estVarV&quot;, estVarV_L1);</span>
<a name="l00983"></a>00983 <span class="comment">      outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l00984"></a>00984 <span class="comment">      outputFile(GRL1Filename, &quot;sqrtRhat&quot;,sqrtRhat_L1);</span>
<a name="l00985"></a>00985 <span class="comment">      outputFile(GRL1Filename, &quot;&quot;);</span>
<a name="l00986"></a>00986 <span class="comment">      */</span>
<a name="l00987"></a>00987       {
<a name="l00988"></a>00988         std::vector &lt; std::string &gt; colNames;
<a name="l00989"></a>00989         colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l00990"></a>00990         colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l00991"></a>00991         colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l00992"></a>00992         colNames.push_back(<span class="stringliteral">&quot;sqrtRhat&quot;</span>);
<a name="l00993"></a>00993 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00994"></a>00994 <span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatL1Flag&quot;</span>);
<a name="l00995"></a>00995           colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l00996"></a>00996 <span class="preprocessor">        #endif</span>
<a name="l00997"></a>00997 <span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
<a name="l00998"></a>00998         data.push_back(Ws_L1Ptr);
<a name="l00999"></a>00999         data.push_back(Bs_L1Ptr);
<a name="l01000"></a>01000         data.push_back(estVarV_L1Ptr);
<a name="l01001"></a>01001         data.push_back(sqrtRhat_L1Ptr);
<a name="l01002"></a>01002 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01003"></a>01003 <span class="preprocessor"></span>          data.push_back(rhatL1FlagPtr);
<a name="l01004"></a>01004           data.push_back(sampledIndPtr);
<a name="l01005"></a>01005 <span class="preprocessor">        #endif</span>
<a name="l01006"></a>01006 <span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
<a name="l01007"></a>01007         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1Filename, precData);
<a name="l01008"></a>01008       } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01009"></a>01009       
<a name="l01010"></a>01010       
<a name="l01011"></a>01011 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01012"></a>01012 <span class="preprocessor"></span>      {
<a name="l01013"></a>01013         <span class="comment">/* output working calcs: all L1s for each chain, </span>
<a name="l01014"></a>01014 <span class="comment">         * running sums for each chain, sample variances,</span>
<a name="l01015"></a>01015 <span class="comment">         * overall running sums */</span>
<a name="l01016"></a>01016         std::vector &lt; std::string &gt; colNames;
<a name="l01017"></a>01017         colNames.insert(colNames.end(), L1ColNames.begin(), L1ColNames.end());
<a name="l01018"></a>01018         colNames.insert(colNames.end(), L1RunningSumColNames.begin(), L1RunningSumColNames.end());
<a name="l01019"></a>01019         colNames.insert(colNames.end(), L1SampleVarianceColNames.begin(), L1SampleVarianceColNames.end());
<a name="l01020"></a>01020         colNames.push_back(overallL1RunningSumColName);
<a name="l01021"></a>01021         
<a name="l01022"></a>01022         std::vector &lt; RealVec* &gt; data;
<a name="l01023"></a>01023         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *distancesL1Ptr);
<a name="l01024"></a>01024         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumL1ChainsPtr);
<a name="l01025"></a>01025         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesPtr);
<a name="l01026"></a>01026         data.push_back(runningSumL1OverallPtr);
<a name="l01027"></a>01027         
<a name="l01028"></a>01028         <span class="keywordtype">int</span> precData = 10;
<a name="l01029"></a>01029         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1WorkingCalcsFilename, precData);
<a name="l01030"></a>01030       
<a name="l01031"></a>01031       }
<a name="l01032"></a>01032 <span class="preprocessor">      #endif</span>
<a name="l01033"></a>01033 <span class="preprocessor"></span>
<a name="l01034"></a>01034       cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
<a name="l01035"></a>01035       cout &lt;&lt; <span class="stringliteral">&quot;Check output files &quot;</span> &lt;&lt; GRL1Filename
<a name="l01036"></a>01036             <span class="comment">//  &lt;&lt; &quot; and &quot; &lt;&lt; GRTotalHeightFilename</span>
<a name="l01037"></a>01037               &lt;&lt; <span class="stringliteral">&quot; for diagnostics&quot;</span> &lt;&lt; endl;
<a name="l01038"></a>01038       <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01039"></a>01039         cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
<a name="l01040"></a>01040             &lt;&lt; <span class="stringliteral">&quot; for log of samples&quot;</span> &lt;&lt;endl;
<a name="l01041"></a>01041       }
<a name="l01042"></a>01042 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01043"></a>01043 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename
<a name="l01044"></a>01044             &lt;&lt; <span class="stringliteral">&quot; for working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<a name="l01045"></a>01045 <span class="preprocessor">      #endif</span>
<a name="l01046"></a>01046 <span class="preprocessor"></span><span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01047"></a>01047 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l01048"></a>01048             &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
<a name="l01049"></a>01049             &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l01050"></a>01050             &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l01051"></a>01051 <span class="preprocessor">      #endif</span>
<a name="l01052"></a>01052 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01053"></a>01053     }
<a name="l01054"></a>01054     
<a name="l01055"></a>01055     <span class="comment">/* clean up the newed stuff</span>
<a name="l01056"></a>01056 <span class="comment">     * </span>
<a name="l01057"></a>01057 <span class="comment">     * note that this does not get cleaned up if we throw an exception in the while loop</span>
<a name="l01058"></a>01058 <span class="comment">     * - should probably deal with that at some point but all the newed memory will be </span>
<a name="l01059"></a>01059 <span class="comment">     * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<a name="l01060"></a>01060 <span class="comment">     * it will be okay for the moment */</span>
<a name="l01061"></a>01061     
<a name="l01062"></a>01062     vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01063"></a>01063     <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
<a name="l01064"></a>01064       <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l01065"></a>01065     }
<a name="l01066"></a>01066 
<a name="l01067"></a>01067     vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l01068"></a>01068     <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
<a name="l01069"></a>01069       <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l01070"></a>01070     }
<a name="l01071"></a>01071     <span class="comment">/*</span>
<a name="l01072"></a>01072 <span class="comment">    for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<a name="l01073"></a>01073 <span class="comment">      if (NULL != *acit) delete (*acit);</span>
<a name="l01074"></a>01074 <span class="comment">    }</span>
<a name="l01075"></a>01075 <span class="comment">    */</span>
<a name="l01076"></a>01076     <span class="keyword">delete</span> samplesColl;
<a name="l01077"></a>01077 
<a name="l01078"></a>01078     <span class="keyword">delete</span> distancesL1Ptr;  
<a name="l01079"></a>01079 
<a name="l01080"></a>01080     <span class="keyword">delete</span> runningSumL1Ptr;
<a name="l01081"></a>01081     
<a name="l01082"></a>01082 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01083"></a>01083 <span class="preprocessor"></span>      <span class="keyword">delete</span> runningSumL1OverallPtr;
<a name="l01084"></a>01084       <span class="keyword">delete</span> runningSumL1ChainsPtr;
<a name="l01085"></a>01085       <span class="keyword">delete</span> sampleVariancesPtr;
<a name="l01086"></a>01086       <span class="keyword">delete</span> rhatL1FlagPtr;
<a name="l01087"></a>01087       <span class="keyword">delete</span> sampledIndPtr;
<a name="l01088"></a>01088 <span class="preprocessor">    #endif</span>
<a name="l01089"></a>01089 <span class="preprocessor"></span>
<a name="l01090"></a>01090     <span class="keyword">delete</span> Ws_L1Ptr;
<a name="l01091"></a>01091     <span class="keyword">delete</span> Bs_L1Ptr;
<a name="l01092"></a>01092     <span class="keyword">delete</span> estVarV_L1Ptr;
<a name="l01093"></a>01093     <span class="keyword">delete</span> sqrtRhat_L1Ptr;
<a name="l01094"></a>01094           
<a name="l01095"></a>01095     <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<a name="l01096"></a>01096 <span class="comment">     *  really the only reason for failing here is that we did not get the right </span>
<a name="l01097"></a>01097 <span class="comment">     * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
<a name="l01098"></a>01098     <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
<a name="l01099"></a>01099       cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l01100"></a>01100       cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
<a name="l01101"></a>01101             &lt;&lt; GRL1Filename;
<a name="l01102"></a>01102 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01103"></a>01103 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename;
<a name="l01104"></a>01104 <span class="preprocessor">      #endif</span>
<a name="l01105"></a>01105 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01106"></a>01106         cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; samplesLogFilename;
<a name="l01107"></a>01107       }
<a name="l01108"></a>01108 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01109"></a>01109 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01110"></a>01110         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01111"></a>01111         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span>;
<a name="l01112"></a>01112 <span class="preprocessor">      #endif</span>
<a name="l01113"></a>01113 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01114"></a>01114       
<a name="l01115"></a>01115       <span class="keywordflow">if</span> (!cancontinue) {
<a name="l01116"></a>01116         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
<a name="l01117"></a>01117       }
<a name="l01118"></a>01118       <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
<a name="l01119"></a>01119         <span class="comment">// we have not been able to get the required samples - need to give up</span>
<a name="l01120"></a>01120         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
<a name="l01121"></a>01121       }
<a name="l01122"></a>01122     }
<a name="l01123"></a>01123     
<a name="l01124"></a>01124   } <span class="comment">// end check on successful insertion of data into histograms</span>
<a name="l01125"></a>01125   <span class="keywordflow">else</span> {
<a name="l01126"></a>01126     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
<a name="l01127"></a>01127   }
<a name="l01128"></a>01128 
<a name="l01129"></a>01129   <span class="keywordflow">return</span> samplesAvg;
<a name="l01130"></a>01130 
<a name="l01131"></a>01131 } <span class="comment">// end of MCMC test program</span>
<a name="l01132"></a>01132 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRAutoJ_8cpp.shtml">MCMCGRAutoJ.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
