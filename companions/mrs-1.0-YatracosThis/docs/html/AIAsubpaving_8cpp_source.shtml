<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AIAsubpaving.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AIAsubpaving_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AIAsubpaving.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AIAsubpaving_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="AIAsubpaving_8hpp.shtml" title="AIASPnode (AISSubPaving) declarations.">AIAsubpaving.hpp</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">// -------------------------- AIASPnode class definitions</span>
<a name="l00028"></a>00028 <span class="comment">//Copy constructor</span>
<a name="l00029"></a><a class="code" href="classAIASPnode.shtml#a95c45cd98b8ffad6b1bec8bdbdf36c3a">00029</a> <a class="code" href="classAIASPnode.shtml#a69e70b41f415cb17b09690315320b194" title="Default constructor.">AIASPnode::AIASPnode</a>(<span class="keyword">const</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>&amp; n)
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031   <a class="code" href="classAIASPnode.shtml#ab904c07918618a89d5511fbaf87f5143" title="The interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*n.<a class="code" href="classAIASPnode.shtml#ab904c07918618a89d5511fbaf87f5143" title="The interval vector the node represents.">theBox</a>);
<a name="l00032"></a>00032   <span class="comment">//recursion on the children</span>
<a name="l00033"></a>00033   <span class="keywordflow">if</span> (n.<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>) <a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>=<span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml#a69e70b41f415cb17b09690315320b194" title="Default constructor.">AIASPnode</a>(*n.<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>);
<a name="l00034"></a>00034   <span class="keywordflow">else</span> <a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00035"></a>00035   <span class="keywordflow">if</span> (n.<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>) <a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>=<span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml#a69e70b41f415cb17b09690315320b194" title="Default constructor.">AIASPnode</a>(*n.<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>);
<a name="l00036"></a>00036   <span class="keywordflow">else</span> <a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00037"></a>00037 }
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">//Output the leaf boxes in AIASubPaving a</span>
<a name="l00040"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a545707f4bc32ad5dac67608be229b51d">00040</a> std::ostream &amp; <a class="code" href="adaptivehistogram_8cpp.shtml#ae2f172a2081430943222aff00bd4d1e8" title="Output the HistDescription object.">operator&lt;&lt; </a>(std::ostream &amp; os, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> a)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042   <span class="keywordflow">if</span> (a==NULL) <span class="keywordflow">return</span> os;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044   <span class="comment">//if (IsLeaf(a)) os &lt;&lt; (*(a-&gt;theBox)) &lt;&lt; std::endl;</span>
<a name="l00045"></a>00045   <span class="comment">//output for Jenny&#39;s matlab format, dimension = 2 max</span>
<a name="l00046"></a>00046   <span class="keywordflow">if</span> (IsLeaf(a))
<a name="l00047"></a>00047   {
<a name="l00048"></a>00048     ivector x = *(a-&gt;<a class="code" href="classAIASPnode.shtml#ab904c07918618a89d5511fbaf87f5143" title="The interval vector the node represents.">theBox</a>);
<a name="l00049"></a>00049     os &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(x[1]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span> &lt;&lt; Sup(x[1]) &lt;&lt; <span class="stringliteral">&quot; ] , &quot;</span>
<a name="l00050"></a>00050       &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(x[2]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span> &lt;&lt; Sup(x[2]) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span>   &lt;&lt; std::endl;
<a name="l00051"></a>00051   }
<a name="l00052"></a>00052   <span class="keywordflow">else</span>
<a name="l00053"></a>00053     { os &lt;&lt; (a-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>); os &lt;&lt; (a-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>); }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     <span class="keywordflow">return</span> os;
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">//Number of leaf boxes in AIASubPaving a</span>
<a name="l00059"></a>00059 <span class="comment">//eturns 0 if empty (IsEmpty), 1 if a leaf (IsLeaf), else number of leaves</span>
<a name="l00060"></a>00060 <span class="comment">//Recurses to accumulate number of leaves on child nodes</span>
<a name="l00061"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">00061</a> <span class="keywordtype">int</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a> (<a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> a )
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   <span class="keywordtype">int</span> nbleaves=0;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="keywordflow">if</span> (IsEmpty(a)) <span class="keywordflow">return</span> 0;
<a name="l00066"></a>00066   <span class="keywordflow">if</span> (IsLeaf(a))  <span class="keywordflow">return</span> 1;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   nbleaves += <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(a-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>);
<a name="l00069"></a>00069   nbleaves += <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(a-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="keywordflow">return</span> (nbleaves);
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">//Sum of volumes of all the leaf boxes in AIASubPaving a</span>
<a name="l00075"></a>00075 <span class="comment">//Returns 0 if empty (IsEmpty)</span>
<a name="l00076"></a>00076 <span class="comment">//Recurses to accumulate volume of child nodes</span>
<a name="l00077"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">00077</a> <span class="keywordtype">double</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a> (<a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> a)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079 
<a name="l00080"></a>00080   <span class="keywordflow">if</span> (IsEmpty(a)) <span class="keywordflow">return</span> 0.0;
<a name="l00081"></a>00081   <span class="keywordflow">if</span> (IsLeaf(a))
<a name="l00082"></a>00082   {
<a name="l00083"></a>00083 
<a name="l00084"></a>00084                     <span class="comment">// using Volume taking ivector argument</span>
<a name="l00085"></a>00085     <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(Box(a));
<a name="l00086"></a>00086   }
<a name="l00087"></a>00087   <span class="keywordtype">double</span> vol=0.0;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   vol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(a-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>);
<a name="l00090"></a>00090   vol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(a-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   <span class="keywordflow">return</span> (vol);
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">// check for containment of ivector or box in the AIASubPaving</span>
<a name="l00096"></a>00096 <span class="comment">// returns false if X is empty</span>
<a name="l00097"></a>00097 <span class="comment">// recursively calls &lt;= on child nodes</span>
<a name="l00098"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a3dadc4f37899578c97e85ec6ea73b724">00098</a> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> <a class="code" href="AIAsubpaving_8cpp.shtml#a3dadc4f37899578c97e85ec6ea73b724">operator&lt;=</a>(<span class="keyword">const</span> ivector&amp; z, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> X)
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100   <span class="comment">// z is assumed not to be empty</span>
<a name="l00101"></a>00101   <span class="comment">// note that Intersection() gives an error if unequal index sets passed</span>
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="keywordflow">if</span> (IsEmpty(X)) <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   ivector r;        <span class="comment">// ivector to be passed to Intersection()</span>
<a name="l00106"></a>00106   <span class="comment">// to contain the intersection</span>
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="comment">// check if X is a leaf and if so</span>
<a name="l00109"></a>00109   <span class="keywordflow">if</span> (IsLeaf(X))
<a name="l00110"></a>00110   {
<a name="l00111"></a>00111     <span class="comment">// *************** old code</span>
<a name="l00112"></a>00112     <span class="comment">//if (z&lt;=Box(X)) return BI_TRUE;</span>
<a name="l00113"></a>00113     <span class="comment">//if (!Intersection(r,z,Box(X))) return BI_FALSE;</span>
<a name="l00114"></a>00114     <span class="comment">// what if Intersection() returns 1, ie there is an intersection</span>
<a name="l00115"></a>00115     <span class="comment">// but z&lt;=Box(X) is not true?</span>
<a name="l00116"></a>00116     <span class="comment">// at present this goes down to the default (else) case below</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="comment">//**************** replacement code</span>
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (z&lt;=Box(X))
<a name="l00120"></a>00120                     <span class="comment">// true if z is in the box</span>
<a name="l00121"></a>00121         <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a>;
<a name="l00122"></a>00122     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(r,z,Box(X)))
<a name="l00123"></a>00123                     <span class="comment">// false if there is no intersection between z and the box</span>
<a name="l00124"></a>00124         <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00125"></a>00125     <span class="keywordflow">else</span>          <span class="comment">// z is not contained in the box but there is an intersection</span>
<a name="l00126"></a>00126                   <span class="comment">// so result is indeterminate</span>
<a name="l00127"></a>00127         <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6aa43b2bfa91b022f8aa5c08a522eb4fce">BI_INDET</a>;
<a name="l00128"></a>00128   }                 <span class="comment">// end isLeaf()</span>
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> Ltest=<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a>,Rtest=<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a>;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   ivector Lz,Rz;    <span class="comment">// ivectors to be passed to Intersection()</span>
<a name="l00133"></a>00133   <span class="comment">// will contain intersection after call to Intersection()</span>
<a name="l00134"></a>00134 
<a name="l00135"></a>00135                     <span class="comment">// both children exist</span>
<a name="l00136"></a>00136   <span class="keywordflow">if</span> (!IsEmpty(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>)&amp;&amp;!IsEmpty(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>))
<a name="l00137"></a>00137   {
<a name="l00138"></a>00138 
<a name="l00139"></a>00139                     <span class="comment">// intersection with left child</span>
<a name="l00140"></a>00140     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Lz,z,Box(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>)))
<a name="l00141"></a>00141       <span class="comment">// Lz now contains this intersection</span>
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143                     <span class="comment">// compare Lz and left child</span>
<a name="l00144"></a>00144       Ltest = (Lz&lt;=(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>));
<a name="l00145"></a>00145 
<a name="l00146"></a>00146                     <span class="comment">//check intersection with right child</span>
<a name="l00147"></a>00147       <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Rz,z,Box(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>)))
<a name="l00148"></a>00148       {
<a name="l00149"></a>00149                     <span class="comment">// compare Rz and right child</span>
<a name="l00150"></a>00150         Rtest = (Rz&lt;=(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>));
<a name="l00151"></a>00151                     <span class="comment">// if left and right child tests same</span>
<a name="l00152"></a>00152         <span class="keywordflow">if</span> (Ltest==Rtest)
<a name="l00153"></a>00153                     <span class="comment">// return this result from child tests</span>
<a name="l00154"></a>00154           <span class="keywordflow">return</span> Ltest;
<a name="l00155"></a>00155         <span class="keywordflow">else</span>
<a name="l00156"></a>00156                     <span class="comment">// z overlaps the boundary of X</span>
<a name="l00157"></a>00157           <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6aa43b2bfa91b022f8aa5c08a522eb4fce">BI_INDET</a>;
<a name="l00158"></a>00158       }
<a name="l00159"></a>00159       <span class="keywordflow">else</span>
<a name="l00160"></a>00160         <span class="keywordflow">return</span> Ltest;
<a name="l00161"></a>00161     }               <span class="comment">// end if intersection with left child</span>
<a name="l00162"></a>00162 
<a name="l00163"></a>00163                     <span class="comment">// given no intersection with left child</span>
<a name="l00164"></a>00164     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Rz,z,Box(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>)))
<a name="l00165"></a>00165                     <span class="comment">// check intersection with right child</span>
<a name="l00166"></a>00166                     <span class="comment">// compare Rz and right child</span>
<a name="l00167"></a>00167       <span class="keywordflow">return</span> (Rz&lt;=(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>));
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="keywordflow">else</span>            <span class="comment">// no intersection with either child</span>
<a name="l00170"></a>00170                     <span class="comment">// used to be BI_TRUE here from the AIA website</span>
<a name="l00171"></a>00171         <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00172"></a>00172     <span class="comment">// but this cannot possibly be correct!</span>
<a name="l00173"></a>00173   }                 <span class="comment">// end if both children exist</span>
<a name="l00174"></a>00174 
<a name="l00175"></a>00175                     <span class="comment">// only left child exists</span>
<a name="l00176"></a>00176   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!IsEmpty(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>))
<a name="l00177"></a>00177   {
<a name="l00178"></a>00178                     <span class="comment">// no intersection with left child</span>
<a name="l00179"></a>00179     <span class="keywordflow">if</span> (!<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Lz,z,Box(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>)))
<a name="l00180"></a>00180       <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00181"></a>00181     <span class="comment">// there is an intersection with the left child, this intersection now in Lz</span>
<a name="l00182"></a>00182                     <span class="comment">// compare Lz and the left child</span>
<a name="l00183"></a>00183     Ltest = (Lz&lt;=(X-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>));
<a name="l00184"></a>00184     <span class="comment">// Rtest will still be at default value of TRUE</span>
<a name="l00185"></a>00185 
<a name="l00186"></a>00186                     <span class="comment">// if left child intersection with z is not z</span>
<a name="l00187"></a>00187     <span class="keywordflow">if</span> (!(Lz==z)) Rtest = <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00188"></a>00188     <span class="keywordflow">else</span>            <span class="comment">// if left child intersection with z = z</span>
<a name="l00189"></a>00189       <span class="keywordflow">return</span> Ltest; <span class="comment">// ie is whole of z in left child</span>
<a name="l00190"></a>00190   }                 <span class="comment">// end if  only left child exists</span>
<a name="l00191"></a>00191 
<a name="l00192"></a>00192   <span class="keywordflow">else</span>              <span class="comment">// if is not a leaf, only right child exists</span>
<a name="l00193"></a>00193   <span class="comment">// BUT if it is a leaf and there is an intersection but not full containment?</span>
<a name="l00194"></a>00194   <span class="comment">// I have now replaced the code that gave rise to the latter case</span>
<a name="l00195"></a>00195   {
<a name="l00196"></a>00196                     <span class="comment">// no intersection with right child</span>
<a name="l00197"></a>00197     <span class="keywordflow">if</span> (!<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Rz,z,Box(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>)))
<a name="l00198"></a>00198       <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00199"></a>00199     <span class="comment">//there is an intersection with the right child, this intersection now in Rz</span>
<a name="l00200"></a>00200                     <span class="comment">// compare Rz and right child</span>
<a name="l00201"></a>00201     Rtest = (Rz&lt;=(X-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>));
<a name="l00202"></a>00202     <span class="comment">// Ltest will still be at default value of TRUE</span>
<a name="l00203"></a>00203                     <span class="comment">// if right child intersection with z is not z</span>
<a name="l00204"></a>00204     <span class="keywordflow">if</span> (!(Rz==z)) Ltest = <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00205"></a>00205     <span class="keywordflow">else</span>            <span class="comment">// if right child intersection with z = z</span>
<a name="l00206"></a>00206       <span class="keywordflow">return</span> Rtest; <span class="comment">// ie is whole of z in right child</span>
<a name="l00207"></a>00207   }                 <span class="comment">// end if only right child exists</span>
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   <span class="comment">// only get here if only one child (left or right exists)</span>
<a name="l00210"></a>00210   <span class="comment">// and the intersection of that child with z exists but is not z</span>
<a name="l00211"></a>00211   <span class="comment">// in which case the other test will have been set to FALSE?</span>
<a name="l00212"></a>00212   <span class="comment">// or if is a leaf and both Intersection() returns 1 but z&lt;=Box(X) is not 1</span>
<a name="l00213"></a>00213   <span class="comment">// in which case Ltest and Rtest will both be TRUE? - that code now replaced</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   <span class="keywordflow">if</span> (Ltest==Rtest)
<a name="l00216"></a>00216     <span class="keywordflow">return</span> Ltest;
<a name="l00217"></a>00217   <span class="keywordflow">else</span>
<a name="l00218"></a>00218     <span class="comment">// if only one child, and the whole of z is not in that child but</span>
<a name="l00219"></a>00219     <span class="comment">// the intersection of z with that child is inside the child</span>
<a name="l00220"></a>00220     <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6aa43b2bfa91b022f8aa5c08a522eb4fce">BI_INDET</a>;<span class="comment">// z overlaps the boundary of X</span>
<a name="l00221"></a>00221 }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 <span class="comment">// --------------------------  Implementing SIVIA components -------------------</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="comment">// Expand</span>
<a name="l00226"></a>00226 <span class="comment">//graft two sibling nodes onto an AIASubPaving node provided that node is a leaf</span>
<a name="l00227"></a><a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">00227</a> <span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(<a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A, <span class="keywordtype">int</span> comp)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229   <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00230"></a>00230   <span class="comment">// these functions split the box normal to direction set by comp</span>
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <span class="keywordflow">if</span> (!IsLeaf(A)) <span class="keywordflow">return</span>;
<a name="l00233"></a>00233   ivector lC,rC;
<a name="l00234"></a>00234   <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(Box(A),lC,comp); <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(Box(A), rC, comp);
<a name="l00235"></a>00235   A-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a> = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(lC);
<a name="l00236"></a>00236   A-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a> = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(rC);
<a name="l00237"></a>00237   <span class="comment">//A-&gt;leftChild = new AIASPnode(Lower(Box(A),comp));</span>
<a name="l00238"></a>00238   <span class="comment">//A-&gt;rightChild = new AIASPnode(Upper(Box(A),comp));</span>
<a name="l00239"></a>00239 }
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 <span class="comment">//AIASubPaving ReUnite(AIASubPaving lChild, AIASubPaving rChild, ivector&amp;</span>
<a name="l00242"></a>00242 <span class="comment">// computes a minimal AIASubPaving from two sibling AIASubPavings</span>
<a name="l00243"></a>00243 <span class="comment">// an AIASubPaving is minimal if it has no sibling leaves</span>
<a name="l00244"></a>00244 <span class="comment">// a minimal AIASubPaving is created by discarding sibling leaves so that</span>
<a name="l00245"></a>00245 <span class="comment">// their parents become leaves</span>
<a name="l00246"></a>00246 <span class="comment">// passing by value since AIASPnode() requires so...</span>
<a name="l00247"></a><a class="code" href="AIAsubpaving_8cpp.shtml#ad0b3998c79d0cbf91d21c550a6bb72e7">00247</a> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> <a class="code" href="AIAsubpaving_8cpp.shtml#ad0b3998c79d0cbf91d21c550a6bb72e7">ReUnite</a>(<a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> lChild, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> rChild, ivector x)
<a name="l00248"></a>00248 <span class="comment">// lChild and rChild are the two AIASubPavings to be reunited</span>
<a name="l00249"></a>00249 <span class="comment">// ivector x is the box for the new AIASubPaving to be created</span>
<a name="l00250"></a>00250 {
<a name="l00251"></a>00251   <span class="keywordflow">if</span>(IsEmpty(lChild)&amp;&amp;IsEmpty(rChild)) <span class="keywordflow">return</span> NULL;
<a name="l00252"></a>00252   <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> result = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);
<a name="l00253"></a>00253   <span class="comment">// both AIASubPavings are leaves so discard them: new AIASubPaving is a leaf</span>
<a name="l00254"></a>00254   <span class="keywordflow">if</span>( IsLeaf(lChild)
<a name="l00255"></a>00255     &amp;&amp;IsLeaf(rChild)
<a name="l00256"></a>00256     &amp;&amp;(  x == ( Box(lChild) | Box(rChild) )  )
<a name="l00257"></a>00257     )
<a name="l00258"></a>00258     { <span class="keyword">delete</span> lChild; <span class="keyword">delete</span> rChild; <span class="keywordflow">return</span> result; }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <span class="comment">// if there are not two non-null potential children</span>
<a name="l00261"></a>00261     <span class="comment">// (so presumably just one child), just graft it on</span>
<a name="l00262"></a>00262     <span class="comment">// similarly if at least one child is not a leaf, just graft the potential</span>
<a name="l00263"></a>00263     <span class="comment">// children on</span>
<a name="l00264"></a>00264     result-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a> = lChild; result-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a> = rChild;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   <span class="keywordflow">return</span> result;
<a name="l00267"></a>00267 }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 <span class="comment">// ----------------------------------- implementing SIVIA-----------------------</span>
<a name="l00288"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">00288</a> <span class="comment"></span><a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93" title="Set Inversion Via Interval Analysis.">Sivia</a> (<a class="code" href="AIAsubpaving_8hpp.shtml#ac3a2af016d66120f37b7e4b3da564876" title="Define type &quot;Pointer to an interval boolean test&quot;.">AIA_PIBT</a> BoolTest, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A, <span class="keywordtype">double</span> eps)
<a name="l00289"></a>00289 {
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (A==NULL) <span class="keywordflow">return</span> NULL;
<a name="l00291"></a>00291 
<a name="l00292"></a>00292                     <span class="comment">// test the box of the given AIASubPaving</span>
<a name="l00293"></a>00293   <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> test = BoolTest(Box(A));
<a name="l00294"></a>00294   <span class="comment">// Test function (may be passed as parameter to Sivia)</span>
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="comment">// maxdiamcomp will be given a value by call to MaxDiam() below</span>
<a name="l00297"></a>00297   <span class="keywordtype">int</span> maxdiamcomp;
<a name="l00298"></a>00298 
<a name="l00299"></a>00299   <span class="comment">// the box fails the test</span>
<a name="l00300"></a>00300   <span class="keywordflow">if</span> ( test==<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a> ) <span class="keywordflow">return</span> NULL;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   <span class="comment">// if the box passes or the result is BI_INDET but the maximum diameter of</span>
<a name="l00303"></a>00303   <span class="comment">// the box is small enough, then return a new AIASubPaving which is a copy of</span>
<a name="l00304"></a>00304   <span class="comment">// the current one, ie include this AIASubPaving in outerX, our approximation</span>
<a name="l00305"></a>00305   <span class="comment">// of X the reciprocal image</span>
<a name="l00306"></a>00306   <span class="keywordflow">if</span> (test==<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a> || <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(Box(A),maxdiamcomp)&lt;eps)
<a name="l00307"></a>00307     <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(*A);
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="comment">// SIVIA will only reach this point if the result of the test was BI_INDET</span>
<a name="l00310"></a>00310   <span class="comment">// and the maximum diameter of the box is not small enough for the box to be</span>
<a name="l00311"></a>00311   <span class="comment">// in outerX -- in this case we expand the AIASubPaving by giving it child</span>
<a name="l00312"></a>00312   <span class="comment">// nodes and test them</span>
<a name="l00313"></a>00313   <span class="keywordflow">if</span> (IsLeaf(A)) <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(A,maxdiamcomp);
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <span class="comment">// ReUnite is used to get a minimal AIASubPaving from merging two</span>
<a name="l00316"></a>00316   <span class="comment">// AIASubPavings.  So will ensure that the AIASubPaving we return from Sivia</span>
<a name="l00317"></a>00317   <span class="comment">// is minimal, ie will not have sibling leaves</span>
<a name="l00318"></a>00318   <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ad0b3998c79d0cbf91d21c550a6bb72e7">ReUnite</a>( <a class="code" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93" title="Set Inversion Via Interval Analysis.">Sivia</a>(BoolTest,A-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>,eps),
<a name="l00319"></a>00319     <a class="code" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93" title="Set Inversion Via Interval Analysis.">Sivia</a>(BoolTest,A-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>,eps),
<a name="l00320"></a>00320     Box(A));
<a name="l00321"></a>00321 
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 <span class="comment">// ----------------------  implementing ImageSp components ---------------------</span>
<a name="l00325"></a>00325 <span class="comment">// Mince</span>
<a name="l00331"></a><a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">00331</a> <span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(<a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A, <span class="keywordtype">double</span> eps)
<a name="l00332"></a>00332 {
<a name="l00333"></a>00333   <span class="keywordflow">if</span> (IsEmpty(A)) <span class="keywordflow">return</span>;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335   <span class="keywordflow">if</span> (IsLeaf(A))
<a name="l00336"></a>00336   {
<a name="l00337"></a>00337     <span class="keywordtype">int</span> comp;       <span class="comment">// value is given by calling MaxDiam function below</span>
<a name="l00338"></a>00338 
<a name="l00339"></a>00339     <span class="comment">// if leaf and box smaller than eps then return</span>
<a name="l00340"></a>00340     <span class="keywordflow">if</span>(<a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(Box(A),comp)&lt;eps) <span class="keywordflow">return</span>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     <span class="comment">// if leaf and box not smaller than eps then expand</span>
<a name="l00343"></a>00343     <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(A,comp);
<a name="l00344"></a>00344 
<a name="l00345"></a>00345   }                 <span class="comment">// end if a leaf</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="comment">// not a leaf, recurse Mince() on left and right children</span>
<a name="l00348"></a>00348   <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(A-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>,eps);
<a name="l00349"></a>00349   <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(A-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>,eps);
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="comment">// Evaluate</span>
<a name="l00365"></a><a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">00365</a> <span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(<a class="code" href="AIAsubpaving_8hpp.shtml#aee443215927e43ef8f6880f25b053a2e" title="Define type &quot;Pointer to an interval vector function&quot;.">AIA_PIVF</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A, list&lt;ivector&gt;&amp; evalImages, ivector&amp; hull)
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367   <span class="keywordflow">if</span> (A!=NULL &amp;&amp; IsLeaf(A))
<a name="l00368"></a>00368   {
<a name="l00369"></a>00369     <span class="comment">// make an ivector image using the AIA_PIVF function f on Box(A)</span>
<a name="l00370"></a>00370     ivector image = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(Box(A));
<a name="l00371"></a>00371 
<a name="l00372"></a>00372     <span class="comment">// if no images in image set yet, make hull the image</span>
<a name="l00373"></a>00373     <span class="keywordflow">if</span> (evalImages.size() == 0) hull = image;
<a name="l00374"></a>00374     <span class="comment">// if there are images in the image set, hull is the convex hull of</span>
<a name="l00375"></a>00375     <span class="keywordflow">else</span> hull = (hull | image);
<a name="l00376"></a>00376     <span class="comment">// the current hull and the ivector image from f(Box(A))</span>
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="comment">// add the image to the list of images</span>
<a name="l00379"></a>00379     evalImages.push_back(image);
<a name="l00380"></a>00380 
<a name="l00381"></a>00381   }                 <span class="comment">// end of is a leaf</span>
<a name="l00382"></a>00382 
<a name="l00383"></a>00383   <span class="comment">// if not a leaf, recursively call Evaluate on children</span>
<a name="l00384"></a>00384   <span class="keywordflow">if</span> (A!=NULL &amp;&amp; !IsLeaf(A))
<a name="l00385"></a>00385   {
<a name="l00386"></a>00386 
<a name="l00387"></a>00387     <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, A-&gt;<a class="code" href="classAIASPnode.shtml#a64dc679fe03b03b7beb6ddb04b2a0f85" title="The node&#39;s left child.">leftChild</a>, evalImages, hull);
<a name="l00388"></a>00388     <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, A-&gt;<a class="code" href="classAIASPnode.shtml#adbaa03014929ff2ab653d6d916ca2fc1" title="The node&#39;s right child.">rightChild</a>, evalImages, hull);
<a name="l00389"></a>00389 
<a name="l00390"></a>00390   }                 <span class="comment">// end of if is not a leaf</span>
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="comment">// case where A == NULL does nothing, just returns</span>
<a name="l00393"></a>00393   <span class="keywordflow">return</span>;
<a name="l00394"></a>00394 }
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="comment">// return TRUE if volume of a &lt; volume of b</span>
<a name="l00397"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a8713b30834070a586c0b99d9899f9b74">00397</a> <span class="keywordtype">bool</span> <a class="code" href="classAIASPnode.shtml#a8713b30834070a586c0b99d9899f9b74" title="Compare volumes of two boxes.">volCompare</a>(<span class="keyword">const</span> ivector &amp;a, <span class="keyword">const</span> ivector &amp;b)
<a name="l00398"></a>00398 {
<a name="l00399"></a>00399   <span class="keywordtype">bool</span> returnValue = 0;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="comment">// Make sure the vectors have the same number of elements and at</span>
<a name="l00402"></a>00402   <span class="comment">// least one element each</span>
<a name="l00403"></a>00403   <span class="keywordflow">if</span>( (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(a) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(a)) == (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(b) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(b)) &amp;&amp; (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(a) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(a))&gt;=1 )
<a name="l00404"></a>00404   {
<a name="l00405"></a>00405 
<a name="l00406"></a>00406                     <span class="comment">// compare the two volumes</span>
<a name="l00407"></a>00407     returnValue = ((<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(a)&lt;<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(b)));
<a name="l00408"></a>00408 
<a name="l00409"></a>00409   }
<a name="l00410"></a>00410   <span class="keywordflow">else</span>
<a name="l00411"></a>00411   {
<a name="l00412"></a>00412     std::cout
<a name="l00413"></a>00413       &lt;&lt; <span class="stringliteral">&quot;Error in volCompare : comparing ivectors of different dimensions&quot;</span>
<a name="l00414"></a>00414       &lt;&lt; std::endl;
<a name="l00415"></a>00415   }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417   <span class="keywordflow">return</span> returnValue;
<a name="l00418"></a>00418 }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="comment">// Regularize</span>
<a name="l00427"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">00427</a> <span class="comment"></span><a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> <a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">Regularize</a>(ivector&amp; hull, list&lt;ivector&gt;&amp; ivectorList, <span class="keywordtype">double</span> eps)
<a name="l00428"></a>00428 {
<a name="l00429"></a>00429                     <span class="comment">// return NULL if the list is empty</span>
<a name="l00430"></a>00430   <span class="keywordflow">if</span> (ivectorList.size()==0) <span class="keywordflow">return</span> NULL;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432   <span class="comment">// sort the list</span>
<a name="l00433"></a>00433   <span class="comment">// Jaulin et al do not have this step because they have their own IMAGELIST</span>
<a name="l00434"></a>00434   <span class="comment">// class which acts like a set and keeps the contents in order.  But we are</span>
<a name="l00435"></a>00435   <span class="comment">// using the stl std::list and so it is unsorted when it is passed to</span>
<a name="l00436"></a>00436   <span class="comment">// Regularize.  It is more effient to sort it once per call to Regularise</span>
<a name="l00437"></a>00437   <span class="comment">// than to keep it sorted as it is being built because the sorted order is</span>
<a name="l00438"></a>00438   <span class="comment">// only needed when the entire list has been built</span>
<a name="l00439"></a>00439 
<a name="l00440"></a>00440   <span class="comment">// sort using the volCompare function</span>
<a name="l00441"></a>00441   ivectorList.sort(<a class="code" href="classAIASPnode.shtml#a8713b30834070a586c0b99d9899f9b74" title="Compare volumes of two boxes.">volCompare</a>);
<a name="l00442"></a>00442   <span class="comment">// this sorts smallest to largest (the opposite to Jaulin et al)</span>
<a name="l00443"></a>00443 
<a name="l00444"></a>00444   <span class="comment">// if the hull is equal to the last (largest) box in the list,</span>
<a name="l00445"></a>00445   <span class="comment">// this becomes the AIASubPaving</span>
<a name="l00446"></a>00446   <span class="keywordflow">if</span> (hull==(*ivectorList.rbegin())) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(hull);
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   <span class="comment">// un-valued int to take value for larged dimension calculated from MaxDiam</span>
<a name="l00449"></a>00449   <span class="keywordtype">int</span> maxdiamcomp;
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="comment">//if the current maximum diameter is &lt; eps return a new AIASubPaving from hull</span>
<a name="l00452"></a>00452   <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(hull,maxdiamcomp)&lt;eps) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(hull);
<a name="l00453"></a>00453 
<a name="l00454"></a>00454   <span class="comment">// new ivectors from splitting hull in its biggest dimension</span>
<a name="l00455"></a>00455   ivector lefthull = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(hull,maxdiamcomp);
<a name="l00456"></a>00456   ivector righthull = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(hull,maxdiamcomp);
<a name="l00457"></a>00457 
<a name="l00458"></a>00458   <span class="comment">// create two empty lists</span>
<a name="l00459"></a>00459   list&lt;ivector&gt; leftlist,rightlist;
<a name="l00460"></a>00460 
<a name="l00461"></a>00461   <span class="comment">// iterator to for the list</span>
<a name="l00462"></a>00462   list&lt;ivector&gt;::iterator it;
<a name="l00463"></a>00463 
<a name="l00464"></a>00464   <span class="comment">// iterate through the current list and put the intersection of any element</span>
<a name="l00465"></a>00465   <span class="comment">// with the lefthull into the new left list, and the intersection of any</span>
<a name="l00466"></a>00466   <span class="comment">// element with new right hull into the new rightlist.</span>
<a name="l00467"></a>00467   <span class="keywordflow">for</span> (it=ivectorList.begin(); it!=ivectorList.end(); it++)
<a name="l00468"></a>00468   {
<a name="l00469"></a>00469     <span class="comment">// temporary variables to take the results of call in Intersect</span>
<a name="l00470"></a>00470     ivector interLeft, interRight;
<a name="l00471"></a>00471 
<a name="l00472"></a>00472     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interLeft, *it, lefthull))
<a name="l00473"></a>00473     {
<a name="l00474"></a>00474       leftlist.push_back(interLeft);
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interRight, *it, righthull))
<a name="l00478"></a>00478     {
<a name="l00479"></a>00479       rightlist.push_back(interRight);
<a name="l00480"></a>00480     }
<a name="l00481"></a>00481 
<a name="l00482"></a>00482   }  <span class="comment">// end of iteration through list elements</span>
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="comment">// recursively call Regularize with lefthull, leftlist, righthull, rightlist</span>
<a name="l00485"></a>00485   <span class="comment">// reunite the results using hull as the box for the parent node</span>
<a name="l00486"></a>00486   <span class="comment">// Regularize creates a minimal AIASubPaving (no sibling child nodes)</span>
<a name="l00487"></a>00487   <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ad0b3998c79d0cbf91d21c550a6bb72e7">ReUnite</a>(<a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">Regularize</a>(lefthull,leftlist,eps),
<a name="l00488"></a>00488     <a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">Regularize</a>(righthull,rightlist,eps),hull);
<a name="l00489"></a>00489 }
<a name="l00490"></a>00490 
<a name="l00491"></a><a class="code" href="AIAsubpaving_8cpp.shtml#a6df9f8ffe0d5fbd9ec10bd6954b3b800">00491</a> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5e79ff65a692b09c98ff53264ddfba9f" title="Creation of image subpaving with Interval Analysis.">ImageSp</a>(<a class="code" href="AIAsubpaving_8hpp.shtml#aee443215927e43ef8f6880f25b053a2e" title="Define type &quot;Pointer to an interval vector function&quot;.">AIA_PIVF</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A, <span class="keywordtype">double</span> eps)
<a name="l00492"></a>00492 {
<a name="l00493"></a>00493   list&lt;ivector&gt; images;
<a name="l00494"></a>00494   ivector hull;
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(A, eps);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498   <span class="comment">//cout &lt;&lt; &quot;After mince &quot; &lt;&lt; endl;</span>
<a name="l00499"></a>00499   <span class="comment">//cout &lt;&lt; &quot;A has volume  &quot; &lt;&lt; Volume (A) &lt;&lt; &quot; and number of leaves &quot;</span>
<a name="l00500"></a>00500   <span class="comment">//  &lt;&lt; NbLeaves(A) &lt;&lt; endl;</span>
<a name="l00501"></a>00501 
<a name="l00502"></a>00502   <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, A, images, hull);
<a name="l00503"></a>00503 
<a name="l00504"></a>00504   <span class="comment">//cout &lt;&lt; &quot;After evaluate &quot; &lt;&lt; endl;</span>
<a name="l00505"></a>00505   <span class="comment">//cout &lt;&lt; &quot;Size of image list is : &quot; &lt;&lt; images.size()</span>
<a name="l00506"></a>00506   <span class="comment">//  &lt;&lt; &quot;  and hull has volume &quot; &lt;&lt; Volume(hull) &lt;&lt; endl;</span>
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   <span class="comment">/* the output of eval is not included in the AIA examples, but it makes</span>
<a name="l00509"></a>00509 <span class="comment">  an interesting comparison to the final subpaving */</span>
<a name="l00510"></a>00510   <span class="comment">// Filename</span>
<a name="l00511"></a>00511   ofstream os2(<span class="stringliteral">&quot;eval.txt&quot;</span>);
<a name="l00512"></a>00512   list&lt;ivector&gt;::iterator it;
<a name="l00513"></a>00513   <span class="keywordflow">for</span> (it=images.begin(); it!=images.end(); it++)
<a name="l00514"></a>00514   {
<a name="l00515"></a>00515     ivector box = *it;
<a name="l00516"></a>00516     os2 &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(box[1]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span> &lt;&lt; Sup(box[1]) &lt;&lt; <span class="stringliteral">&quot; ] , [ &quot;</span>
<a name="l00517"></a>00517       &lt;&lt; Inf(box[2]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span> &lt;&lt; Sup(box[2]) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt;  endl;
<a name="l00518"></a>00518   }
<a name="l00519"></a>00519   <span class="comment">// end of difference from AIA examples</span>
<a name="l00520"></a>00520 
<a name="l00521"></a>00521   <span class="keywordflow">return</span> (<a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">Regularize</a>(hull, images, eps));
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AIAsubpaving_8cpp.shtml">AIAsubpaving.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
