<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Laplace1.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Laplace1_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Laplace1.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Laplace1_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> * </span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00024"></a>00024 <span class="comment">// include header files</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>std;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">//===================start of main programme================================//</span>
<a name="l00038"></a><a class="code" href="Laplace1_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00038</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040    <span class="comment">//===================== user-inputs======================================//</span>
<a name="l00041"></a>00041   <span class="keywordflow">if</span> ( argc != 4 ) {
<a name="l00042"></a>00042     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: Laplace n dataSeed simNum&quot;</span> &lt;&lt; endl;
<a name="l00043"></a>00043     exit(0);
<a name="l00044"></a>00044   }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00047"></a>00047    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00048"></a>00048    <span class="keywordtype">int</span> simNum = atoi(argv[3]); <span class="comment">//which data set </span>
<a name="l00049"></a>00049    <span class="keywordtype">int</span> d = 1;
<a name="l00050"></a>00050   
<a name="l00051"></a>00051    <span class="keywordtype">double</span> Tol = 1e-4; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l00052"></a>00052   <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l00053"></a>00053    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00054"></a>00054    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00055"></a>00055    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00056"></a>00056    oss.precision(5);
<a name="l00057"></a>00057    std::ostringstream stm;
<a name="l00058"></a>00058   stm &lt;&lt; simNum;
<a name="l00059"></a>00059    <span class="comment">//=================set up for data generation===============================</span>
<a name="l00060"></a>00060    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00061"></a>00061    <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00062"></a>00062    gsl_rng * r;             
<a name="l00063"></a>00063    gsl_rng_env_setup();
<a name="l00064"></a>00064    T = gsl_rng_default;
<a name="l00065"></a>00065    r = gsl_rng_alloc (T);
<a name="l00066"></a>00066    gsl_rng_set(r, dataSeed);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00070"></a>00070   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00071"></a>00071    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00072"></a>00072    
<a name="l00073"></a>00073    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00074"></a>00074        rvector thisrv(1);
<a name="l00075"></a>00075        thisrv[1] = gsl_ran_laplace(r, 1);
<a name="l00076"></a>00076      <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00077"></a>00077         theData.push_back(thisrv);
<a name="l00078"></a>00078    }  <span class="comment">// data  should be in theData</span>
<a name="l00079"></a>00079    
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
<a name="l00082"></a>00082   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00083"></a>00083   cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
<a name="l00084"></a>00084   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
<a name="l00085"></a>00085   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
<a name="l00088"></a>00088   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
<a name="l00091"></a>00091   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
<a name="l00094"></a>00094   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="comment">// containers for output needed</span>
<a name="l00097"></a>00097   vector&lt;real&gt; IAEOpt;
<a name="l00098"></a>00098   vector&lt;int&gt; NumLeafNodesOpt;
<a name="l00099"></a>00099   
<a name="l00100"></a>00100   real IAE1=100.0;
<a name="l00101"></a>00101   <span class="keywordtype">int</span> NumLeafNodes1;
<a name="l00102"></a>00102   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
<a name="l00103"></a>00103   vector&lt;double&gt; Times1;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   real IAE2=100.0;
<a name="l00106"></a>00106   <span class="keywordtype">int</span> NumLeafNodes2;
<a name="l00107"></a>00107   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
<a name="l00108"></a>00108   vector&lt;double&gt; Times2;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   real IAE3=100.0;
<a name="l00111"></a>00111   <span class="keywordtype">int</span> NumLeafNodes3;
<a name="l00112"></a>00112   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
<a name="l00113"></a>00113    vector&lt;double&gt; Times3;
<a name="l00114"></a>00114    
<a name="l00115"></a>00115   real IAE4=100.0;
<a name="l00116"></a>00116   <span class="keywordtype">int</span> NumLeafNodes4;
<a name="l00117"></a>00117   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
<a name="l00118"></a>00118   vector&lt;double&gt; Times4;
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="comment">//do exhaustive PQ for steps of n*0.005</span>
<a name="l00121"></a>00121   <span class="comment">// set up function objects for a priority split</span>
<a name="l00122"></a>00122   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00123"></a>00123   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
<a name="l00124"></a>00124   <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="keywordtype">double</span> rootBoxVol = 0.0;
<a name="l00127"></a>00127   ivector pavingBox;
<a name="l00128"></a>00128   
<a name="l00129"></a>00129   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 100; i &lt;= 100; i++) {
<a name="l00130"></a>00130   
<a name="l00131"></a>00131     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1; 
<a name="l00132"></a>00132     successfulInsertion1= myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00133"></a>00133     rootBoxVol = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00134"></a>00134     pavingBox = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
<a name="l00135"></a>00135     
<a name="l00136"></a>00136     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2; 
<a name="l00137"></a>00137     successfulInsertion2= myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00138"></a>00138     
<a name="l00139"></a>00139     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3; 
<a name="l00140"></a>00140     successfulInsertion3= myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00141"></a>00141     
<a name="l00142"></a>00142     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4; 
<a name="l00143"></a>00143     successfulInsertion4= myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
<a name="l00146"></a>00146         &amp;&amp; successfulInsertion4) {
<a name="l00147"></a>00147 
<a name="l00148"></a>00148       <span class="keywordtype">int</span> finalK = int(i*0.005*n);
<a name="l00149"></a>00149       cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00150"></a>00150       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00151"></a>00151       <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00152"></a>00152       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00153"></a>00153 
<a name="l00154"></a>00154       <span class="keywordtype">size_t</span> maxLeafNodes = n;
<a name="l00155"></a>00155       <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00156"></a>00156       
<a name="l00157"></a>00157       <span class="comment">// we want to check the timings for this</span>
<a name="l00158"></a>00158       clock_t start, end;
<a name="l00159"></a>00159       <span class="keywordtype">double</span> timing; 
<a name="l00160"></a>00160       
<a name="l00161"></a>00161       <span class="comment">// do the priority split for compCount</span>
<a name="l00162"></a>00162       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00163"></a>00163       successfulPQSplit1 = myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00164"></a>00164            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00165"></a>00165       end = clock();
<a name="l00166"></a>00166       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00167"></a>00167       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00168"></a>00168       Times1.push_back(timing);
<a name="l00169"></a>00169       
<a name="l00170"></a>00170       <span class="comment">// do the priority split for compVol</span>
<a name="l00171"></a>00171       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00172"></a>00172       successfulPQSplit2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compVol,
<a name="l00173"></a>00173            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00174"></a>00174       end = clock();
<a name="l00175"></a>00175       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00176"></a>00176       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00177"></a>00177       Times2.push_back(timing);
<a name="l00178"></a>00178       
<a name="l00179"></a>00179       <span class="comment">// do the priority split for compVol and remove empty boxes</span>
<a name="l00180"></a>00180       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00181"></a>00181       successfulPQSplit3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compVol,
<a name="l00182"></a>00182            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00183"></a>00183       end = clock();
<a name="l00184"></a>00184       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00185"></a>00185       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00186"></a>00186       Times3.push_back(timing);
<a name="l00187"></a>00187       
<a name="l00188"></a>00188       <span class="comment">// do the priority split for compMassVol</span>
<a name="l00189"></a>00189       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00190"></a>00190       successfulPQSplit4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compArea,
<a name="l00191"></a>00191            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00192"></a>00192       end = clock();
<a name="l00193"></a>00193       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00194"></a>00194       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00195"></a>00195       Times4.push_back(timing);
<a name="l00196"></a>00196 
<a name="l00197"></a>00197       <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
<a name="l00198"></a>00198           &amp;&amp; successfulPQSplit4) {
<a name="l00199"></a>00199 
<a name="l00200"></a>00200         <span class="comment">//get the IAE</span>
<a name="l00201"></a>00201         cout &lt;&lt; <span class="stringliteral">&quot;Get IAE: &quot;</span> &lt;&lt; endl;
<a name="l00202"></a>00202         real midIAE1 = mid(myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(Tol, Deg));
<a name="l00203"></a>00203         <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
<a name="l00204"></a>00204           cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
<a name="l00205"></a>00205           IAE1 = midIAE1;
<a name="l00206"></a>00206           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00207"></a>00207           optHist1 = myHist1;
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210         <span class="comment">//get the IAE</span>
<a name="l00211"></a>00211         real midIAE2 = mid(myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(Tol, Deg));
<a name="l00212"></a>00212         <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
<a name="l00213"></a>00213           cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
<a name="l00214"></a>00214           IAE2 = midIAE2;
<a name="l00215"></a>00215           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00216"></a>00216           optHist2 = myHist2;
<a name="l00217"></a>00217         }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         real midIAE3 = mid(myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(Tol, Deg));
<a name="l00220"></a>00220         <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
<a name="l00221"></a>00221           cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
<a name="l00222"></a>00222           IAE3 = midIAE3;
<a name="l00223"></a>00223           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00224"></a>00224           optHist3 = myHist3;
<a name="l00225"></a>00225         }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227         
<a name="l00228"></a>00228         <span class="comment">//get the IAE</span>
<a name="l00229"></a>00229         real midIAE4 = mid(myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">getLaplaceIntervalIAE</a>(Tol, Deg));
<a name="l00230"></a>00230         <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
<a name="l00231"></a>00231           cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
<a name="l00232"></a>00232           IAE4 = midIAE4;
<a name="l00233"></a>00233           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00234"></a>00234           optHist4 = myHist4;
<a name="l00235"></a>00235         }
<a name="l00236"></a>00236       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00237"></a>00237     }<span class="comment">// end of if(successfulInsertion)</span>
<a name="l00238"></a>00238   } <span class="comment">// end of iterating through different kn&#39;s</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
<a name="l00241"></a>00241     successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
<a name="l00242"></a>00242     &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="comment">// keep the optimal IAEs</span>
<a name="l00245"></a>00245     IAEOpt.push_back(IAE1); 
<a name="l00246"></a>00246     IAEOpt.push_back(IAE2);
<a name="l00247"></a>00247     IAEOpt.push_back(IAE3);
<a name="l00248"></a>00248     IAEOpt.push_back(IAE4);
<a name="l00249"></a>00249     
<a name="l00250"></a>00250     <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
<a name="l00251"></a>00251     NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00252"></a>00252     NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00253"></a>00253     NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00254"></a>00254     NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00255"></a>00255       
<a name="l00256"></a>00256     <span class="comment">// output the optimal histograms</span>
<a name="l00257"></a>00257     std::ostringstream stm;
<a name="l00258"></a>00258     stm &lt;&lt; simNum;
<a name="l00259"></a>00259     <span class="comment">// create a name for the file to output</span>
<a name="l00260"></a>00260     <span class="keywordtype">string</span> fileName;
<a name="l00261"></a>00261     fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
<a name="l00262"></a>00262     fileName += stm.str();
<a name="l00263"></a>00263     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00264"></a>00264     optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="comment">// create a name for the file to output</span>
<a name="l00267"></a>00267     fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
<a name="l00268"></a>00268     fileName += stm.str();
<a name="l00269"></a>00269     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00270"></a>00270     optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272     <span class="comment">// create a name for the file to output</span>
<a name="l00273"></a>00273     fileName = <span class="stringliteral">&quot;HistVolRemoveEmpty&quot;</span>;
<a name="l00274"></a>00274     fileName += stm.str();
<a name="l00275"></a>00275     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00276"></a>00276     optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00277"></a>00277 
<a name="l00278"></a>00278     <span class="comment">// create a name for the file to output</span>
<a name="l00279"></a>00279     fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
<a name="l00280"></a>00280     fileName += stm.str();
<a name="l00281"></a>00281     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00282"></a>00282     optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284     <span class="comment">// output IAE, number of leaf nodes, times to file</span>
<a name="l00285"></a>00285     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;LaplaceExhaustivePQOutput&quot;</span>;
<a name="l00286"></a>00286     PQFileName += stm.str();
<a name="l00287"></a>00287     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00288"></a>00288     oss.open(PQFileName.c_str());
<a name="l00289"></a>00289     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
<a name="l00290"></a>00290       oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00291"></a>00291       oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
<a name="l00292"></a>00292     }
<a name="l00293"></a>00293     oss &lt;&lt; flush;
<a name="l00294"></a>00294     oss.close();
<a name="l00295"></a>00295     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
<a name="l00296"></a>00296         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00297"></a>00297         
<a name="l00298"></a>00298     PQFileName = <span class="stringliteral">&quot;LaplaceExhaustivePQOutputTimes&quot;</span>;
<a name="l00299"></a>00299     PQFileName += stm.str();
<a name="l00300"></a>00300     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00301"></a>00301     oss.open(PQFileName.c_str());
<a name="l00302"></a>00302     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
<a name="l00303"></a>00303       oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00304"></a>00304       oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00305"></a>00305       oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00306"></a>00306       oss &lt;&lt; Times4[i] &lt;&lt; endl;
<a name="l00307"></a>00307     }
<a name="l00308"></a>00308     oss &lt;&lt; flush;
<a name="l00309"></a>00309     oss.close();
<a name="l00310"></a>00310     cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
<a name="l00311"></a>00311         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00312"></a>00312   } <span class="comment">// end of successes</span>
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 <span class="comment">//=================end of exhaustive PQ=================================// </span>
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00317"></a>00317   cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
<a name="l00318"></a>00318   <span class="comment">//sort the data first</span>
<a name="l00319"></a>00319   <span class="comment">// put the data into a list to sort the data</span>
<a name="l00320"></a>00320   <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
<a name="l00321"></a>00321   list&lt;rvector&gt; rvecList;
<a name="l00322"></a>00322   list&lt;rvector&gt;::iterator rvecListIt;
<a name="l00323"></a>00323   <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
<a name="l00324"></a>00324     rvector thisrv(1);
<a name="l00325"></a>00325     thisrv = *rvecIt;
<a name="l00326"></a>00326     rvecList.push_back(thisrv);
<a name="l00327"></a>00327   }
<a name="l00328"></a>00328   rvecList.sort(); <span class="comment">//sort the data</span>
<a name="l00329"></a>00329   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
<a name="l00330"></a>00330   <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
<a name="l00331"></a>00331   { 
<a name="l00332"></a>00332     rvector thisrv(1);
<a name="l00333"></a>00333     thisrv = *rvecListIt;
<a name="l00334"></a>00334     sortedData.push_back(thisrv);
<a name="l00335"></a>00335   }
<a name="l00336"></a>00336   
<a name="l00337"></a>00337   <span class="comment">//mae regular histograms with the 3 rules</span>
<a name="l00338"></a>00338   cout &lt;&lt; <span class="stringliteral">&quot;=====Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
<a name="l00339"></a>00339   vector&lt;real&gt; regHistIAE;
<a name="l00340"></a>00340   vector&lt;int&gt; nBins;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00344"></a>00344     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00345"></a>00345     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00346"></a>00346     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00347"></a>00347     nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00348"></a>00348     real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a7edbd158ed300803fe59b38c60f90875">getRegHistLaplaceIntervalIAE</a>(n, myRegHist, Tol, Deg));
<a name="l00349"></a>00349     regHistIAE.push_back(midIAE);
<a name="l00350"></a>00350     
<a name="l00351"></a>00351     <span class="comment">// output the histogram</span>
<a name="l00352"></a>00352     <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegBW&quot;</span>;
<a name="l00353"></a>00353     ostringstream stm2;
<a name="l00354"></a>00354     stm2 &lt;&lt; bw;
<a name="l00355"></a>00355     fileName += stm2.str();
<a name="l00356"></a>00356     fileName += stm.str();
<a name="l00357"></a>00357     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00358"></a>00358     <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(myRegHist, fileName);
<a name="l00359"></a>00359   }
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   <span class="comment">//make regular histograms with manual bandwidth</span>
<a name="l00362"></a>00362   cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms with manual bandwidths==&quot;</span> &lt;&lt; endl;
<a name="l00363"></a>00363    
<a name="l00364"></a>00364   real regHistIAEM = 100;
<a name="l00365"></a>00365   <a class="code" href="structRegHist.shtml">RegHist</a> regHistOpt;
<a name="l00366"></a>00366    
<a name="l00367"></a>00367    <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00368"></a>00368   cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;
<a name="l00369"></a>00369   
<a name="l00370"></a>00370   <span class="keywordtype">size_t</span> flagCheck = 0;
<a name="l00371"></a>00371 
<a name="l00372"></a>00372   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= maxLeafNodes; i++) {
<a name="l00373"></a>00373     <span class="keywordtype">double</span> bw = rootBoxVol/(i*1.0);
<a name="l00374"></a>00374     cout &lt;&lt; <span class="stringliteral">&quot;Nbins: &quot;</span> &lt;&lt; i &lt;&lt; endl;
<a name="l00375"></a>00375     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00376"></a>00376     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00377"></a>00377     real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a7edbd158ed300803fe59b38c60f90875">getRegHistLaplaceIntervalIAE</a>(n, myRegHist, Tol, Deg));
<a name="l00378"></a>00378     
<a name="l00379"></a>00379     <span class="comment">// get the minimum IAE</span>
<a name="l00380"></a>00380     <span class="keywordflow">if</span> ( midIAE &lt; regHistIAEM ) {
<a name="l00381"></a>00381       cout &lt;&lt; midIAE &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; regHistIAEM &lt;&lt; endl;
<a name="l00382"></a>00382       regHistIAEM = midIAE;
<a name="l00383"></a>00383       regHistOpt = myRegHist;
<a name="l00384"></a>00384       flagCheck = 0;
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386     <span class="keywordflow">else</span> { 
<a name="l00387"></a>00387       flagCheck++; 
<a name="l00388"></a>00388       <span class="keywordflow">if</span> ( flagCheck &gt;= 100) { <span class="keywordflow">break</span>; }
<a name="l00389"></a>00389     }
<a name="l00390"></a>00390   }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   <span class="comment">// get the final IAE</span>
<a name="l00393"></a>00393   nBins.push_back(regHistOpt.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00394"></a>00394   regHistIAE.push_back(regHistIAEM);
<a name="l00395"></a>00395 
<a name="l00396"></a>00396   <span class="comment">// output the histogram to .txt</span>
<a name="l00397"></a>00397   <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegOpt&quot;</span>;
<a name="l00398"></a>00398   fileName += stm.str();
<a name="l00399"></a>00399   fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00400"></a>00400   <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(regHistOpt, fileName);
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 
<a name="l00403"></a>00403   <span class="comment">// output the IAEs</span>
<a name="l00404"></a>00404   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00405"></a>00405   outputFileName = <span class="stringliteral">&quot;LaplaceIAERegHist&quot;</span>;
<a name="l00406"></a>00406   outputFileName += stm.str();
<a name="l00407"></a>00407   outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00408"></a>00408   oss.open(outputFileName.c_str());
<a name="l00409"></a>00409   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; 4; i++) {
<a name="l00410"></a>00410     oss &lt;&lt; regHistIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[i] &lt;&lt; endl;
<a name="l00411"></a>00411   }
<a name="l00412"></a>00412   oss &lt;&lt; flush;
<a name="l00413"></a>00413   oss.close();  
<a name="l00414"></a>00414   std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 <span class="comment">// free the random number generator</span>
<a name="l00418"></a>00418 gsl_rng_free(r);
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 <span class="keywordflow">return</span> 0;
<a name="l00421"></a>00421 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Laplace1_8cpp.shtml">Laplace1.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
