<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: LognormalRegHist.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('LognormalRegHist_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">LognormalRegHist.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
</div>
<p><a href="LognormalRegHist_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="LognormalRegHist_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="LognormalRegHist.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="LognormalRegHist_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="LognormalRegHist_8cpp_source.shtml">LognormalRegHist.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00282">RegHist::heights</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00280">RegHist::LowerBoxes</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00272">makeRegularHist()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00281">RegHist::UpperBoxes</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">//===================== user-inputs======================================//</span>
  <span class="keywordflow">if</span> ( argc != 4 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: Lognormal n dataSeed nBins&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> nBins = atoi(argv[3]); <span class="comment">//which data set </span>
   <span class="keywordtype">int</span> d = 1;
  
 
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);


  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
       rvector thisrv(1);
       thisrv[1] = gsl_ran_lognormal(r, 0, 1);
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
   }  <span class="comment">// data  should be in theData</span>


  <span class="comment">//==============Regular histogram==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
  <span class="comment">//sort the data first</span>
  <span class="comment">// put the data into a list to sort the data</span>
  <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
  list&lt;rvector&gt; rvecList;
  list&lt;rvector&gt;::iterator rvecListIt;
  <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
    rvector thisrv(1);
    thisrv = *rvecIt;
    rvecList.push_back(thisrv);
  }
  rvecList.sort(); <span class="comment">//sort the data</span>
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
  <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
  { 
    rvector thisrv(1);
    thisrv = *rvecListIt;
    sortedData.push_back(thisrv);
  }

  <span class="comment">//get the root box</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist;
  myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
  ivector pavingBox = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
  <span class="keywordtype">double</span> rootBoxVol = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();

  <span class="comment">//make the regular histogram</span>
  <span class="keywordtype">double</span> bw = rootBoxVol/(nBins*1.0);
  cout &lt;&lt; <span class="stringliteral">&quot;Making a regular histogram with &quot;</span> &lt;&lt; nBins &lt;&lt; <span class="stringliteral">&quot; bins.&quot;</span> &lt;&lt; endl;
  <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
  <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);

  <span class="comment">//output histogram data to .txt file</span>
  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
  outputFileName = <span class="stringliteral">&quot;Lognormal&quot;</span>;
  outputFileName += <span class="stringliteral">&quot;RegHistOpt.txt&quot;</span>;
  os.open(outputFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
    os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();
  
  std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;

  <span class="comment">// now make the regular histograms with the standarad bandwidths</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
    cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
    <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
    <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
    
    outputFileName = <span class="stringliteral">&quot;Lognormal&quot;</span>;
    outputFileName += <span class="stringliteral">&quot;RegHistBW&quot;</span>;
    ostringstream stm1;
    stm1 &lt;&lt; bw;
    outputFileName += stm1.str();
    outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    os.open(outputFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
      os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
    }
    os &lt;&lt; flush;
    os.close();
    std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
    
  }

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="LognormalRegHist_8cpp.shtml">LognormalRegHist.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
