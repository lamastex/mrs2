<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1PiecewiseConstantFunction.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::PiecewiseConstantFunction Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00ec6162ad7be5fd75b9f71df9e6010e">_coverage</a>(const rvector &amp;pt) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a893720267a24aa9cf6dbabbcc9e92b4a">_marginalise</a>(const std::vector&lt; int &gt; &amp;reqDims)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae3058b35de92dbf4f0606e9a51012373">_normalise</a>()</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a24005b5dad3a4417de9d6fc68462258f">allocateRanges</a>(const std::vector&lt; cxsc::real &gt; &amp;rangesToAllocate)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2dfb56b2c05c101ea7a27781e37762ee">checkBox</a>(const cxsc::ivector &amp;box)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a498990673c6fb4821bbfa6e26f3ebc04">constructor_error_handler</a>()</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb4501feb027c37159cf926195e1cd44">findCoverage</a>(const rvector &amp;pt) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a739e54236b59b4c1cbe8d5d20f5f4950">findCoverageRegion</a>(subpavings::RealMappedSPnode::ConstPtrs &amp;covNodes, cxsc::real cov) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062">getCopySubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a08cecaf3025aeeeea90b26acbe87ce24">getDimensions</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2bc216ff479f7edc61e1ef8619c27214">getDomainVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2499c322fa30a4f07d8ad7360a8d7d95">getIAE</a>(const PiecewiseConstantFunction &amp;pcf) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac1b7749f4bf0240e24517d87a832dbd7">getL1Distance</a>(const PiecewiseConstantFunction &amp;other) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a50b455741489ca51374faee1dca38d61">getLabel</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aad0a7c30389235a8fa0a36fc0a1d2c7a">getLeafLevels</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa27d2f72b0d1edcddd73929a69b44dfb">getLeafLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2ca8259389efd2797732caeeab988b3d">getRootBox</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a938b27618e6805bc57e70ab8f0e6280d">getRootLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a88d23ec0f66eef3215b2081cec17815c">getSubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375">getTotalIntegral</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac6bc781088b8a8554bc6598f25e75988">handleSPError</a>(RealMappedSPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a">hasInfinitePiecewiseConstantValues</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5">hasNegativePiecewiseConstantValues</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296">hasSubPaving</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a622a9d3b705f1c81cd7a5a7b95e8d4c8">label</a></td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a501a9760b607f3275e9ce85eb5cae136">makeMarginal</a>(const std::vector&lt; int &gt; &amp;reqDims) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae18f9fc32df16470d268b2bd70b32e9f">makeNormalised</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb8c06d489bebfe579823751033b7bcd">makeShapeToUnion</a>(const PiecewiseConstantFunction &amp;other)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a414799df36e8a5aea60b6ae9b3713cf8">makeSlice</a>(const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a>()</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a64722ca127c5169779463574a35d661d">operator*</a>(const PiecewiseConstantFunction &amp;rhs) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2c2c76a16d5ca85d74e00a61502f31d5">operator*</a>(const cxsc::real &amp;mult) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#af353f8623ce62aa2bf7e87942d5e89f7">operator*=</a>(const PiecewiseConstantFunction &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa7c90fe41fba228dbe5cbe01878e1d54">operator*=</a>(const cxsc::real &amp;mult)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a324236b21b578ef2176a487d10b986b5">operator+</a>(const PiecewiseConstantFunction &amp;rhs) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a63956842071d1e793d54ddc6cf759970">operator+</a>(const cxsc::real &amp;add) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a13d88986c0752e996fced71cae4e3034">operator+=</a>(const PiecewiseConstantFunction &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afb8037a02dafaab611e4aac28a7326ab">operator+=</a>(const cxsc::real &amp;add)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a52b02b0ec1773ae11c4d986dd56a69f8">operator-</a>(const PiecewiseConstantFunction &amp;rhs) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad2c304191876befbd35fac6a07dedd74">operator-</a>(const cxsc::real &amp;sub) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae64b7e32740671dd8fb0f0905f958de5">operator-=</a>(const PiecewiseConstantFunction &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a83ceb8a2a57cb475b400c8436ef79831">operator-=</a>(const cxsc::real &amp;sub)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3bdc0d055a65d5785c87f77ae30b2512">operator/</a>(const PiecewiseConstantFunction &amp;rhs) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae7f061e72dc60d46956bfa0f6b4f2b4e">operator/</a>(const cxsc::real &amp;div) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6167942675f27eaab9a2b858375d9bf9">operator/=</a>(const PiecewiseConstantFunction &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a43f950b15d9de80ae4e88353f9d63abb">operator/=</a>(const cxsc::real &amp;div)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afb1b70cb3d82858719f489e6cc239115">operator=</a>(PiecewiseConstantFunction rhs)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a>(std::ostream &amp;os, cxsc::real cov, int prec) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a213cebe89d7510df1b0e0c3790c9e33a">outputCoverageRegion</a>(std::ostream &amp;os, cxsc::real cov) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a4208d0549a7254c38af194e1953c6cc7">outputCoverageRegion</a>(const std::string &amp;covFileName, cxsc::real cov, int prec, bool confirm=true) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a38e6bded7df5f65184c4fc5a9b3997f8">outputCoverageRegion</a>(const std::string &amp;covFileName, cxsc::real cov, bool confirm=true) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a779f82e68a07656a602089a25e994748">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a411e285d0cc7c8de1f6ac29706ddb2d4">outputLog</a>(const std::string &amp;s, int i, int prec=5) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9327e86ac242a9af67266686cc107370">outputLogStart</a>(const std::string &amp;s) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a94a4166cf5d3a009021be8b43e41f9ed">outputRootToStreamTabs</a>(std::ostream &amp;os, int prec=5) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">outputRootToTxt</a>(const std::string &amp;s, int prec=5) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a581599becf533c7fbe4fbccdfb6df4ee">outputRootToTxt</a>(const std::string &amp;s, int prec, bool confirm) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7253ce68ea35a9fb37fd8873ca0c23ef">outputToStreamTabs</a>(std::ostream &amp;os, int prec=5) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(const std::string &amp;s, int prec=5) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a8080671674947611b47430996d91413a">outputToTxtTabs</a>(const std::string &amp;s, int prec, bool confirm) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">PiecewiseConstantFunction</a>()</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a4642d25f6dc9d2f4d6f31d9ff81f3741">PiecewiseConstantFunction</a>(const ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb90004f77b865413b3c66878422c53a">PiecewiseConstantFunction</a>(const RealMappedSPnode &amp;rmspn, int lab=0)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00b18c179aab77dba47a6a6df9c5684f">PiecewiseConstantFunction</a>(const AdaptiveHistogram &amp;adh)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7bfe6205559abfdfe8bce89f7ae90760">PiecewiseConstantFunction</a>(const PiecewiseConstantFunction &amp;other)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abf81273304c10947eab9f5523abbd21b">pointwiseExtension</a>(const rvector &amp;pt) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a95d2cd2a73cf7a3ac06a433a35098179">reshapeToUnion</a>(const PiecewiseConstantFunction &amp;other)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aef23daaf4b73237b67ed40985b3038a3">rootPaving</a></td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7b71fbda0321a5272e92f652119f9aa3">setLabel</a>(int lab)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854">simulateData</a>(RVecData &amp;container, size_t numberToSimulate, gsl_rng *r) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad818b3800904d40fbee121f0bea973b5">simulateData</a>(RVecData &amp;container, size_t numberToSimulate, long unsigned int seed) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abe41e3bc175dbb124d40e242e2ee6b06">simulateData</a>(RVecData &amp;container, size_t numberToSimulate) const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6d0382e5493bd90cb80a823e567cab4f">splitToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abb23fd1b7e0dc5ee81c976c23c1452a0">stringSummary</a>() const </td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5b106e9526613ce2a0f81bd4e303b6cf">swap</a>(PiecewiseConstantFunction &amp;pcf)</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a16194266ecbed94003ea484cb8b70610">~PiecewiseConstantFunction</a>()</td><td><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">subpavings::PiecewiseConstantFunction</a></td><td></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:40 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
