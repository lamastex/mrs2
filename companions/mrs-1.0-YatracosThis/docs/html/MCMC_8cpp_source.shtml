<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMC.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMC_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMC.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMC_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="MCMC_2dataprep_8hpp.shtml" title="Dataprep header file for preparing to generate simulated random sample data.">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>cxsc;
<a name="l00036"></a>00036 <span class="keyword">using namespace </span>std;
<a name="l00037"></a>00037 <span class="keyword">using namespace </span>subpavings;
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="MCMC_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00039</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00040"></a>00040 {
<a name="l00041"></a>00041     <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// set up a random number generator</span>
<a name="l00044"></a>00044     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00045"></a>00045     gsl_rng * r;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="keyword">const</span> <span class="keywordtype">int</span> n=10000;    <span class="comment">// number to generate</span>
<a name="l00048"></a>00048     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     gsl_rng_env_setup();
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     T = gsl_rng_default;
<a name="l00053"></a>00053     r = gsl_rng_alloc (T);
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00056"></a>00056     <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00057"></a>00057     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00058"></a>00058     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00059"></a>00059     oss.precision(5);
<a name="l00060"></a>00060 
<a name="l00061"></a>00061     <span class="keywordtype">int</span> d = 2; <span class="comment">// dimension of the box to sample data from</span>
<a name="l00062"></a>00062     ivector pavingBox(d);
<a name="l00063"></a>00063     interval pavingInterval(0,1);
<a name="l00064"></a>00064     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="comment">// make a simulated data set allData to sample from</span>
<a name="l00069"></a>00069     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         rvector thisrv(d);
<a name="l00072"></a>00072         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j &lt;= d; j++) {
<a name="l00073"></a>00073                 thisrv[j]  = gsl_rng_uniform(r);
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         <span class="comment">// put points generated into container</span>
<a name="l00077"></a>00077         theData.push_back(thisrv);
<a name="l00078"></a>00078 
<a name="l00079"></a>00079     }  <span class="comment">// data  should be in theData</span>
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <span class="comment">// free the random number generator</span>
<a name="l00082"></a>00082     gsl_rng_free (r);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">/*</span>
<a name="l00085"></a>00085 <span class="comment">    // output data to a file</span>
<a name="l00086"></a>00086 <span class="comment">    string dataFile = &quot;dataFile.txt&quot;;</span>
<a name="l00087"></a>00087 <span class="comment">    ofstream osd(dataFile.c_str());         // replace data</span>
<a name="l00088"></a>00088 <span class="comment">    if (osd.is_open()) {</span>
<a name="l00089"></a>00089 <span class="comment">        RVecDataItr dit;</span>
<a name="l00090"></a>00090 <span class="comment">        for (dit = theData.begin(); dit &lt; theData.end(); dit++) {</span>
<a name="l00091"></a>00091 <span class="comment">            //osd &lt;&lt; *dit &lt;&lt; &quot;\n&quot;;</span>
<a name="l00092"></a>00092 <span class="comment">            osd &lt;&lt; (*dit)[1] &lt;&lt; &quot;\t&quot; &lt;&lt; (*dit)[2] &lt;&lt; &quot;\n&quot;;</span>
<a name="l00093"></a>00093 <span class="comment">        }</span>
<a name="l00094"></a>00094 <span class="comment">        osd.close();</span>
<a name="l00095"></a>00095 <span class="comment">    }</span>
<a name="l00096"></a>00096 <span class="comment">    else {</span>
<a name="l00097"></a>00097 <span class="comment">        std::cout &lt;&lt; &quot;Error: could not open file named &quot;</span>
<a name="l00098"></a>00098 <span class="comment">            &lt;&lt; dataFile &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<a name="l00099"></a>00099 <span class="comment">    }</span>
<a name="l00100"></a>00100 <span class="comment">*/</span>
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="comment">//bool successfulPQSplit = false;</span>
<a name="l00103"></a>00103     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="comment">// example to create one histogram with pulse data and a priority</span>
<a name="l00106"></a>00106     <span class="comment">// ---------- split to give a minimum number of bins -----------</span>
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     cout &lt;&lt; endl &lt;&lt; endl;
<a name="l00109"></a>00109     cout &lt;&lt; <span class="stringliteral">&quot;Start example:&quot;</span> &lt;&lt; endl;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00112"></a>00112     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00113"></a>00113     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00114"></a>00114     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBox);
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00117"></a>00117     successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         <span class="comment">// optional - print out the scores</span>
<a name="l00122"></a>00122         <span class="comment">//real scoreCOPERR = myHistFirst.getEMPScoreCOPERR();</span>
<a name="l00123"></a>00123         <span class="comment">//real scoreAIC = myHistFirst.getEMPScoreAIC();</span>
<a name="l00124"></a>00124         
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         <span class="comment">// set up proposal distribution object</span>
<a name="l00127"></a>00127         <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00128"></a>00128         <span class="comment">// set up prior distribution object</span>
<a name="l00129"></a>00129         <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131         <span class="comment">/* specify minPoints</span>
<a name="l00132"></a>00132 <span class="comment">        A node is not splittable if splitting that node would give at least</span>
<a name="l00133"></a>00133 <span class="comment">        one child with &lt; minPoints of data associated with it.*/</span>
<a name="l00134"></a>00134         <span class="keywordtype">int</span> minPoints = 1;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = 2000;
<a name="l00137"></a>00137     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = 1500;
<a name="l00138"></a>00138     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = 100;
<a name="l00139"></a>00139     std::vector &lt; AdaptiveHistogram &gt; samples;
<a name="l00140"></a>00140     
<a name="l00141"></a>00141     {
<a name="l00142"></a>00142       cout &lt;&lt; <span class="stringliteral">&quot;Starting MCMC samples and average&quot;</span>  &lt;&lt; endl;
<a name="l00143"></a>00143       clock_t start, end;
<a name="l00144"></a>00144       start = clock();
<a name="l00145"></a>00145       
<a name="l00146"></a>00146       <span class="comment">// MCMC with 2000 states, burn in 1500, thinout every 100 etc</span>
<a name="l00147"></a>00147       <span class="comment">// create a log file only for samples (no dot graphs)</span>
<a name="l00148"></a>00148       samples = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9" title="Generating MCMC samples from histogram state space.">MCMCsamples</a>(samples,
<a name="l00149"></a>00149                           loops, burnin, thinout,
<a name="l00150"></a>00150                           proposal, logPrior,
<a name="l00151"></a>00151                           minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>);
<a name="l00152"></a>00152       end = clock();
<a name="l00153"></a>00153 
<a name="l00154"></a>00154       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span>
<a name="l00155"></a>00155          &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157       <span class="keywordflow">if</span> (!samples.empty()) {
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         cout &lt;&lt; <span class="stringliteral">&quot;Finished MCMC&quot;</span> &lt;&lt; endl;
<a name="l00160"></a>00160         cout &lt;&lt; samples.size() &lt;&lt; <span class="stringliteral">&quot; samples&quot;</span> &lt;&lt; endl;
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l00163"></a>00163         
<a name="l00164"></a>00164         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(samples);
<a name="l00165"></a>00165         
<a name="l00166"></a>00166         cout &lt;&lt; <span class="stringliteral">&quot;coverage from collator&quot;</span> &lt;&lt; endl;
<a name="l00167"></a>00167         
<a name="l00168"></a>00168         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> av = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00169"></a>00169         cout &lt;&lt; <span class="stringliteral">&quot;Finished averaging&quot;</span> &lt;&lt; endl;
<a name="l00170"></a>00170         
<a name="l00171"></a>00171         cout &lt;&lt; <span class="stringliteral">&quot;coverage from average from coll&quot;</span> &lt;&lt; endl;
<a name="l00172"></a>00172                 
<a name="l00173"></a>00173         <span class="keywordtype">string</span> avFilename = <span class="stringliteral">&quot;AverageColl.txt&quot;</span>;
<a name="l00174"></a>00174         <span class="keywordtype">string</span> normFilename = <span class="stringliteral">&quot;NormalisedColl.txt&quot;</span>;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176         av.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(avFilename);
<a name="l00177"></a>00177         
<a name="l00178"></a>00178         <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> normColl = coll.makeNormalised();
<a name="l00179"></a>00179         normColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(normFilename);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181       }
<a name="l00182"></a>00182       <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to complete MCMC&quot;</span> &lt;&lt; endl;
<a name="l00183"></a>00183     }
<a name="l00184"></a>00184   }
<a name="l00185"></a>00185     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     <span class="keywordflow">return</span> 0;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 } <span class="comment">// end of MCMC test program</span>
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMC_8cpp.shtml">MCMC.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
