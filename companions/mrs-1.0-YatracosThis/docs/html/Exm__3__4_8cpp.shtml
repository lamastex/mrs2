<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Exm_3_4.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Exm__3__4_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Exm_3_4.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Example 3.4 from Jaulin et al, Springer, 2001, pp. 61-63.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="Exm__3__4_8hpp_source.shtml">Exm_3_4.hpp</a>&quot;</code><br/>
</div>
<p><a href="Exm__3__4_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6">AIA_BOOL_INTERVAL</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#adb8d4bd4ff6d7fe76c024fbcfbc85716">IBT_ex3_4</a> (const ivector &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6">AIA_BOOL_INTERVAL</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#a222ab786ba862f781778b6ab42e6d346">IBTFinverse_ex3_4</a> (const ivector &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#a53362d503f1771845ee5bac0caf975cd">IVF_ex3_4</a> (const ivector &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Example 3.4 from Jaulin et al, Springer, 2001, pp. 61-63. </p>
<p>Implementation of example 3.4 from Jaulin, Kieffer, Didrit and Walter, Applied Interval Analysis, Springer, 2001, pp. 61-63. </p>

<p>Definition in file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="adb8d4bd4ff6d7fe76c024fbcfbc85716"></a><!-- doxytag: member="Exm_3_4.cpp::IBT_ex3_4" ref="adb8d4bd4ff6d7fe76c024fbcfbc85716" args="(const ivector &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6">AIA_BOOL_INTERVAL</a> <a class="el" href="Exm__3__4_8cpp.shtml#adb8d4bd4ff6d7fe76c024fbcfbc85716">IBT_ex3_4</a> </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00037">37</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>References <a class="el" href="AIAsubpaving_8hpp_source.shtml#l00038">BI_FALSE</a>, <a class="el" href="AIAsubpaving_8hpp_source.shtml#l00038">BI_INDET</a>, <a class="el" href="AIAsubpaving_8hpp_source.shtml#l00038">BI_TRUE</a>, <a class="el" href="toolz_8cpp_source.shtml#l00203">Intersection()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00869">taylor::power()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">taylor::sqr()</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// here we test a 2-d box for inclusion in the area </span>
  <span class="comment">// such that x1^4 - x1^2 + 4x2^2 is in the interval [-0.1, 0.1]</span>

  interval ToInvert(-0.1, 0.1),Temp;
  interval Img = <a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(x[1],4) - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) + 4*<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[2]);

  <span class="keywordflow">if</span> (!<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Temp,Img,ToInvert)) <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
  <span class="keywordflow">if</span> ( Img&lt;=ToInvert ) <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a>;

  <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6aa43b2bfa91b022f8aa5c08a522eb4fce">BI_INDET</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a222ab786ba862f781778b6ab42e6d346"></a><!-- doxytag: member="Exm_3_4.cpp::IBTFinverse_ex3_4" ref="a222ab786ba862f781778b6ab42e6d346" args="(const ivector &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6">AIA_BOOL_INTERVAL</a> <a class="el" href="Exm__3__4_8cpp.shtml#a222ab786ba862f781778b6ab42e6d346">IBTFinverse_ex3_4</a> </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00051">51</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">taylor::sqr()</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  ivector Img(2);
  <span class="comment">// example in 2-d space R2</span>
  <span class="comment">// for f: R2 -&gt; R2</span>
  <span class="comment">//f1(x1, x2) = (x1-1)^2 - 1+ x2</span>
  <span class="comment">//f2(x1, x2) = -(x1^2) + (x2-1)^2</span>

  Img[1] = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) - 2*x[1] + x[2];
  Img[2] = -<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[2]) - 2*x[2] + 1;

  <span class="keywordflow">return</span> (Img&lt;=<a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a>);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a53362d503f1771845ee5bac0caf975cd"></a><!-- doxytag: member="Exm_3_4.cpp::IVF_ex3_4" ref="a53362d503f1771845ee5bac0caf975cd" args="(const ivector &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector <a class="el" href="Exm__3__4_8cpp.shtml#a53362d503f1771845ee5bac0caf975cd">IVF_ex3_4</a> </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00070">70</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">taylor::sqr()</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// example in 2-d space R2</span>
  <span class="comment">// for f: R2 -&gt; R2</span>
  <span class="comment">//f1(x1, x2) = (x1-1)^2 - 1+ x2</span>
  <span class="comment">//f2(x1, x2) = -(x1^2) + (x2-1)^2</span>

  ivector Img(2);

  Img[1] = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) - 2*x[1] + x[2];
  Img[2] = -<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[2]) - 2*x[2] + 1;

  <span class="keywordflow">return</span> (Img);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="Exm_3_4.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">91</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>References <a class="el" href="Exm__3__4_8cpp_source.shtml#l00037">IBT_ex3_4()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00051">IBTFinverse_ex3_4()</a>, <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00491">ImageSp()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00070">IVF_ex3_4()</a>, <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00061">NbLeaves()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">Sc5</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">Sc6</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">Sc7</a>, <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00288">Sivia()</a>, and <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00077">Volume()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">double</span> prec;
  clock_t start, end;

  ivector x(2);
  x[1] = interval(-3.0,3.0);
  x[2] = interval(-3.0,3.0);

  <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A;
  A = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);

  <span class="comment">// Using SIVIA for set inversion</span>

  <span class="comment">// Find an AIASubPaving characterisation Sc5 as in example 3.4</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc5={(x1,x2) | -0.1 &quot;</span> 
       &lt;&lt; <span class="stringliteral">&quot;&lt;= x1^4-x1^2+4x2^2 &lt;= 0.1 }&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.001): &quot;</span>;
  cin &gt;&gt; prec;

  start = clock();

  <span class="comment">// when we start we give A a box big enough to guarantee to contain </span>
  <span class="comment">// the characterisation of Sc</span>

  <a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a> = <a class="code" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93" title="Set Inversion Via Interval Analysis.">Sivia</a>(<a class="code" href="Exm__3__4_8cpp.shtml#adb8d4bd4ff6d7fe76c024fbcfbc85716">IBT_ex3_4</a>,A,prec);
  end = clock();

  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
       &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Volume: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a>) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a>) &lt;&lt; endl;

  <span class="comment">// To realize a file output of the AIASubPaving Sc</span>
                    <span class="comment">// Filename</span>
  ofstream os5(<span class="stringliteral">&quot;AIA3_4a.txt&quot;</span>);
  os5 &lt;&lt; 2 &lt;&lt; endl; <span class="comment">// Dimension of the AIASubPaving</span>
                    <span class="comment">// Root box</span>
  os5 &lt;&lt; interval(-3.0,3.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
    &lt;&lt; interval(-3.0,3.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
                    <span class="comment">// Precision used</span>
  os5 &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
                    <span class="comment">// AIASubPaving itself</span>
  os5 &lt;&lt; <a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIA3_4a.txt&quot;</span> 
       &lt;&lt; endl &lt;&lt; endl;

  <span class="comment">// Using ImageSp to find the image of Sc5 using</span>
  <span class="comment">//  f1(x) = (x1-1)^2 - 1+ x2</span>
  <span class="comment">// &quot;    f2(x) = -(x1^2) + (x2-1)^2</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc6=f(Sc5)&quot;</span> &lt;&lt; endl
    &lt;&lt; <span class="stringliteral">&quot; with Sc5 from our previous example and &quot;</span>&lt;&lt; endl
    &lt;&lt; <span class="stringliteral">&quot;with f1(x) = (x1-1)^2 - 1 +x2,&quot;</span> &lt;&lt; endl
    &lt;&lt; <span class="stringliteral">&quot;     f2(x) = -(x1^2) + (x2-1)^2&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;by realizing the image of f by ImageSp&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.01): &quot;</span>;
  cin &gt;&gt; prec;

  start = clock();

  <span class="comment">// use Image SP to find a characterisation of the </span>
  <span class="comment">// image of Sc5 using the function in IVF</span>
  <a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a> = <a class="code" href="classsubpavings_1_1SPnode.shtml#a5e79ff65a692b09c98ff53264ddfba9f" title="Creation of image subpaving with Interval Analysis.">ImageSp</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a53362d503f1771845ee5bac0caf975cd">IVF_ex3_4</a>, <a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a>, prec);

  end = clock();

  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
      &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;The volume is &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a>) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;The number of leaves is &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a>) &lt;&lt; endl;

  <span class="comment">// To realize a file output of the AIASubPaving Sc</span>
                    <span class="comment">// Filename</span>
  ofstream os6(<span class="stringliteral">&quot;AIA3_4b.txt&quot;</span>);
  os6 &lt;&lt; 2 &lt;&lt; endl; <span class="comment">// Dimension of the AIASubPaving</span>
                    <span class="comment">// Domain AIASubPaving</span>
  os6 &lt;&lt; interval(-3.0,3.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
    &lt;&lt; interval(-3.0,3.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
                    <span class="comment">// Precision used</span>
  os6 &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
                    <span class="comment">// Image AIASubPaving itself</span>
  os6 &lt;&lt; <a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a> &lt;&lt; endl;

  cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIA3_4b.txt&quot;</span> 
       &lt;&lt; endl &lt;&lt; endl;

  <span class="comment">//remake A</span>
  <span class="keyword">delete</span> A;

  x[1] = interval(-5.0,5.0);
  x[2] = interval(-5.0,5.0);

  A = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);

  <span class="comment">// set inversion using SIVIA</span>
  <span class="comment">// this uses the AIASubPaving Sc6 created by the above example</span>
  <span class="comment">// create an AIASubPaving Sc7 which contains inverse_f(Sc6)</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc7=f-1(Sc6)&quot;</span> &lt;&lt; endl
    &lt;&lt; <span class="stringliteral">&quot;with f as above  and Sc6 as above &quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;by realizing the inversion of f by Sivia&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.01): &quot;</span>;
  cin &gt;&gt; prec;

  start = clock();
  <a class="code" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a> = <a class="code" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93" title="Set Inversion Via Interval Analysis.">Sivia</a>(<a class="code" href="Exm__3__4_8cpp.shtml#a222ab786ba862f781778b6ab42e6d346">IBTFinverse_ex3_4</a>,A,prec);
  end = clock();

  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
       &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Volume: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<a class="code" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a>) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(<a class="code" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a>) &lt;&lt; endl;

  <span class="comment">// To realize a file output of the AIASubPaving Sc</span>
                    <span class="comment">// Filename</span>
  ofstream os7(<span class="stringliteral">&quot;AIA3_4c.txt&quot;</span>);
  os7 &lt;&lt; 2 &lt;&lt; endl; <span class="comment">// Dimension of the AIASubPaving</span>
                    <span class="comment">// Root box</span>
  os7 &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
    &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
                    <span class="comment">// Precision used</span>
  os7 &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
                    <span class="comment">// AIASubPaving itself</span>
  os7 &lt;&lt; <a class="code" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a> &lt;&lt; endl;

  cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIA3_4c.txt&quot;</span> 
       &lt;&lt; endl &lt;&lt; endl;

  <span class="keyword">delete</span> A;         <span class="comment">// delete all Subpavings newed in dynamic memory</span>
  <span class="keyword">delete</span> <a class="code" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a>;
  <span class="keyword">delete</span> <a class="code" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a>;
  <span class="keyword">delete</span> <a class="code" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a>;

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a6121e44a51842f2e136bf41bacde57bc"></a><!-- doxytag: member="Exm_3_4.cpp::Sc5" ref="a6121e44a51842f2e136bf41bacde57bc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a> <a class="el" href="Exm__3__4_8cpp.shtml#a6121e44a51842f2e136bf41bacde57bc">Sc5</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">32</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a45cd2800058123a38d9a98f9b30d27c3"></a><!-- doxytag: member="Exm_3_4.cpp::Sc6" ref="a45cd2800058123a38d9a98f9b30d27c3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a> <a class="el" href="Exm__3__4_8cpp.shtml#a45cd2800058123a38d9a98f9b30d27c3">Sc6</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">32</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>

</div>
</div>
<a class="anchor" id="aabbd0f41c2d4d9a5efdb0185ff33289e"></a><!-- doxytag: member="Exm_3_4.cpp::Sc7" ref="aabbd0f41c2d4d9a5efdb0185ff33289e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="AIAsubpaving_8hpp.shtml#ab6618d8727b32e897c1b7ab3415b93ff">AIASubPaving</a> <a class="el" href="Exm__3__4_8cpp.shtml#aabbd0f41c2d4d9a5efdb0185ff33289e">Sc7</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Exm__3__4_8cpp_source.shtml#l00032">32</a> of file <a class="el" href="Exm__3__4_8cpp_source.shtml">Exm_3_4.cpp</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00091">main()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Exm__3__4_8cpp.shtml">Exm_3_4.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
