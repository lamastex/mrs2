<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: BiGTest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('BiGTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">BiGTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="BiGTest_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="BivGaussian_2dataprep_8hpp.shtml" title="Dataprep header file for preparing to generate simulated random sample data.">dataprep.hpp</a>&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">using namespace </span>cxsc;
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>std;
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>subpavings;
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="BiGTest_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00038</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
<a name="l00043"></a>00043     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00044"></a>00044     gsl_rng * r;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046     <span class="keywordtype">int</span> i;
<a name="l00047"></a>00047     <span class="keyword">const</span> <span class="keywordtype">int</span> n=10000;  <span class="comment">// number to generate</span>
<a name="l00048"></a>00048     <span class="keywordtype">double</span> sigma_x=1;   <span class="comment">// distribution parameter</span>
<a name="l00049"></a>00049     <span class="keywordtype">double</span> sigma_y=1;   <span class="comment">// distribution parameter</span>
<a name="l00050"></a>00050     <span class="keywordtype">double</span> rho=0;       <span class="comment">// x and y uncorrelated</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     gsl_rng_env_setup();
<a name="l00055"></a>00055 
<a name="l00056"></a>00056     T = gsl_rng_default;
<a name="l00057"></a>00057     r = gsl_rng_alloc (T);
<a name="l00058"></a>00058 
<a name="l00059"></a>00059     <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
<a name="l00060"></a>00060     <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00061"></a>00061     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00062"></a>00062     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00063"></a>00063     oss.precision(5);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="keywordtype">double</span> *x;
<a name="l00066"></a>00066     <span class="keywordtype">double</span> *y;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     x= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// make x and y in dynamic memory</span>
<a name="l00069"></a>00069     y= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// (so they must be freed later)</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="keywordtype">double</span>* itx;
<a name="l00072"></a>00072     <span class="keywordtype">double</span>* ity;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="comment">// get n random variates chosen from the bivariate Gaussian</span>
<a name="l00076"></a>00076     <span class="comment">// distribution with mean zero and given sigma_x, sigma_y.</span>
<a name="l00077"></a>00077     <span class="keywordflow">for</span> (i = 0; i &lt; n; i++)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079         gsl_ran_bivariate_gaussian(r, sigma_x, sigma_y,
<a name="l00080"></a>00080                                    rho, &amp;x[i], &amp;y[i]);
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <span class="comment">// free the random number generator</span>
<a name="l00085"></a>00085     gsl_rng_free (r);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     itx = &amp;x[0];
<a name="l00088"></a>00088     ity = &amp;y[0];
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="comment">// create a name for the file to use</span>
<a name="l00091"></a>00091     samplesFileName = <span class="stringliteral">&quot;bgSamples.txt&quot;</span>;
<a name="l00092"></a>00092     <span class="comment">// output the sample data</span>
<a name="l00093"></a>00093     oss.open(samplesFileName.c_str());         <span class="comment">// opens the file</span>
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="keywordflow">for</span>(i=0; i&lt;n; i++) {
<a name="l00096"></a>00096         oss &lt;&lt; (*itx) &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (*ity);
<a name="l00097"></a>00097         <span class="keywordflow">if</span> (i&lt;n-1) oss &lt;&lt; endl; <span class="comment">// new line if not final line</span>
<a name="l00098"></a>00098         itx++;
<a name="l00099"></a>00099         ity++;
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101     oss &lt;&lt; flush;
<a name="l00102"></a>00102     oss.close();
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     cout &lt;&lt; <span class="stringliteral">&quot;Samples output to &quot;</span> &lt;&lt; samplesFileName &lt;&lt; endl &lt;&lt; endl;
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     clock_t start, end;     <span class="comment">// for timing</span>
<a name="l00107"></a>00107     <span class="keywordtype">double</span> timeTaken;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00110"></a>00110     <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// ------ example to create one histogram with splitting value ----</span>
<a name="l00113"></a>00113     <span class="comment">// --------------------entered by user ----------------------------</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="comment">// get a count of the lines in the txt file</span>
<a name="l00116"></a>00116     <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(samplesFileName);
<a name="l00117"></a>00117     <span class="keywordtype">int</span> myK = 0;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="comment">// tell user how many lines there are in the file</span>
<a name="l00120"></a>00120     cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; samplesFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
<a name="l00121"></a>00121             &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;
<a name="l00122"></a>00122     <span class="comment">// get a parameter for k</span>
<a name="l00123"></a>00123     cout &lt;&lt; <span class="stringliteral">&quot;Enter a parameter for your splitting criteria here please:  &quot;</span>;
<a name="l00124"></a>00124     cin &gt;&gt; myK;
<a name="l00125"></a>00125     cout &lt;&lt; endl &lt;&lt; endl; <span class="comment">// myK has been input</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="comment">// make an Adaptive Histogram object with no specified box and, by default,</span>
<a name="l00129"></a>00129     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00130"></a>00130     <span class="comment">// histogram will not maintain all available stats, only counts</span>
<a name="l00131"></a>00131     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     start=clock();
<a name="l00134"></a>00134     <span class="comment">// clock running</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="comment">// make the function object to decide whether to split.</span>
<a name="l00137"></a>00137     <span class="comment">// aim to get max myK data members in each box, default minimum</span>
<a name="l00138"></a>00138     <span class="comment">// number of points allowed in each box is 0.</span>
<a name="l00139"></a>00139     <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(myK);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <span class="keywordtype">int</span> dim = 2;
<a name="l00142"></a>00142   <span class="keywordtype">size_t</span> headerlines = 0;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">// insert the data on by one, checking whether to split on each insertion</span>
<a name="l00145"></a>00145     successfulInsertion = myHistFirst.insertRvectorsFromTxtOrd(samplesFileName,
<a name="l00146"></a>00146             splitK, dim, headerlines, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>); <span class="comment">// no logging</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     end=clock();
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00151"></a>00151     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     <span class="comment">// only do more if some data was fed in</span>
<a name="l00154"></a>00154     <span class="keywordflow">if</span>(successfulInsertion) {
<a name="l00155"></a>00155 
<a name="l00156"></a>00156         <span class="comment">// create a name for the file to output</span>
<a name="l00157"></a>00157         outputFileName = <span class="stringliteral">&quot;BivGaussianFirst.txt&quot;</span>;
<a name="l00158"></a>00158         <span class="comment">// To realize a file output</span>
<a name="l00159"></a>00159         myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(outputFileName);
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162     <span class="comment">// end of example for histogram with splitting value input by user</span>
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     successfulInsertion = <span class="keyword">false</span>;
<a name="l00165"></a>00165     successfulPQSplit = <span class="keyword">false</span>;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="comment">// example to create one histogram with pulse data and a priority</span>
<a name="l00168"></a>00168     <span class="comment">// ---------- split to give a minimum number of bins -----------</span>
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="comment">// make an Adaptive Histogram object with no specified box</span>
<a name="l00171"></a>00171     <span class="comment">// or splitting value (and holdAllStats again defaults to false),</span>
<a name="l00172"></a>00172     <span class="comment">// with the same data</span>
<a name="l00173"></a>00173     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistSecond;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     start=clock();
<a name="l00176"></a>00176     <span class="comment">// clock running</span>
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
<a name="l00179"></a>00179     successfulInsertion = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <span class="comment">// set up function objects for a priority split</span>
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="comment">// function object to compare nodes on count</span>
<a name="l00186"></a>00186         <span class="comment">// ie split node with largest count first</span>
<a name="l00187"></a>00187         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
<a name="l00190"></a>00190         <span class="keywordtype">size_t</span> minLeaves = 50;
<a name="l00191"></a>00191         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="comment">/* minimum points to use when splitting.</span>
<a name="l00194"></a>00194 <span class="comment">        A node will not be splittable if either child would then have</span>
<a name="l00195"></a>00195 <span class="comment">        &lt; minPoints of data associated with it. */</span>
<a name="l00196"></a>00196         <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198         <span class="comment">// do the priority split</span>
<a name="l00199"></a>00199         successfulPQSplit = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00200"></a>00200                 critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPoints); <span class="comment">// no logging</span>
<a name="l00201"></a>00201     }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     end=clock();
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00206"></a>00206     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="comment">// create a name for the file to output</span>
<a name="l00212"></a>00212         outputFileName = <span class="stringliteral">&quot;BivGaussianSecond.txt&quot;</span>;
<a name="l00213"></a>00213         <span class="comment">// To realize a file output</span>
<a name="l00214"></a>00214         myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(outputFileName);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216     }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="keyword">delete</span> x;   <span class="comment">// free dynamic memory used for x and y</span>
<a name="l00219"></a>00219     <span class="keyword">delete</span> y;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keywordflow">return</span> 0;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 } <span class="comment">// end of bivariate gaussian test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="BiGTest_8cpp.shtml">BiGTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
