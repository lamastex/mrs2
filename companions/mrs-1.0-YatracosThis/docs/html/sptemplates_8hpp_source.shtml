<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: sptemplates.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sptemplates_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">sptemplates.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="sptemplates_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef ___SPTEMPLATES_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define ___SPTEMPLATES_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">using namespace </span>std;
<a name="l00029"></a>00029 
<a name="l00041"></a>00041 <span class="keyword">namespace </span>subpavings {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00071"></a>00071 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00072"></a><a class="code" href="namespacesubpavings.shtml#aa20ef6d47135f798ecc95164f0e6fdec">00072</a> T *<a class="code" href="namespacesubpavings.shtml#aa20ef6d47135f798ecc95164f0e6fdec" title="Tries to reunite two nodes into to form a single leaf.">Reunite</a>(T *lChild, T *rChild, ivector x)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     T* newNode = NULL; <span class="comment">// pointer to new node to be returned</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <span class="keywordflow">try</span>
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078         newNode = <span class="keyword">new</span> T(x);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="comment">// both proposed children are empty, return null</span>
<a name="l00081"></a>00081         <span class="keywordflow">if</span>(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00082"></a>00082             newNode = NULL;
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="comment">// only given a right child, left child is NULL</span>
<a name="l00086"></a>00086         <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild) &amp;&amp; !<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00087"></a>00087             <span class="comment">//graft right child on</span>
<a name="l00088"></a>00088             newNode-&gt;nodeAdoptRight(rChild);
<a name="l00089"></a>00089         }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091         <span class="comment">// only given a left child, right child is NULL</span>
<a name="l00092"></a>00092         <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00093"></a>00093             <span class="comment">//graft left child on</span>
<a name="l00094"></a>00094             newNode-&gt;nodeAdoptLeft(lChild);
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097         <span class="comment">// both children exist</span>
<a name="l00098"></a>00098         <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild) &amp;&amp; !<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00099"></a>00099 
<a name="l00100"></a>00100             <span class="comment">// otherwise reunite the proposed children on this node</span>
<a name="l00101"></a>00101             newNode-&gt;nodeReunite(lChild, rChild);
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00106"></a>00106     {
<a name="l00107"></a>00107         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Reunite()&quot;</span>
<a name="l00108"></a>00108             &lt;&lt; std::endl;
<a name="l00109"></a>00109         <span class="keywordflow">throw</span>;
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="keywordflow">return</span> newNode;
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00124"></a>00124 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00125"></a><a class="code" href="namespacesubpavings.shtml#a45a1b2decaa4425e57280110a635cf0d">00125</a> T *<a class="code" href="namespacesubpavings.shtml#a45a1b2decaa4425e57280110a635cf0d" title="Adopt nodes to build a non-minimal subpaving.">Adopt</a>(T *lChild, T *rChild, ivector x)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127     T* newNode = NULL; <span class="comment">// pointer to new node to be returned</span>
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="keywordflow">try</span>
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131         newNode = <span class="keyword">new</span> T(x);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         <span class="comment">// both proposed children are empty, return null</span>
<a name="l00135"></a>00135         <span class="keywordflow">if</span>(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00136"></a>00136             newNode = NULL;
<a name="l00137"></a>00137         }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         <span class="comment">// add the new right child if there is one</span>
<a name="l00140"></a>00140         <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(rChild)) {
<a name="l00141"></a>00141             <span class="comment">//graft right child on</span>
<a name="l00142"></a>00142             newNode-&gt;nodeAdoptRight(rChild);
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <span class="comment">// add the new left child if there is one</span>
<a name="l00146"></a>00146         <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(lChild)) {
<a name="l00147"></a>00147             <span class="comment">//graft left child on</span>
<a name="l00148"></a>00148             newNode-&gt;nodeAdoptLeft(lChild);
<a name="l00149"></a>00149         }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00154"></a>00154     {
<a name="l00155"></a>00155         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Adopt()&quot;</span> &lt;&lt; std::endl;
<a name="l00156"></a>00156         <span class="keywordflow">throw</span>;
<a name="l00157"></a>00157     }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159     <span class="keywordflow">return</span> newNode;
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00183"></a>00183 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00184"></a><a class="code" href="namespacesubpavings.shtml#a331c50e79d716580fed8a900bfee2b1a">00184</a> T *<a class="code" href="AIAsubpaving_8cpp.shtml#a1b1148d30745256482cbc7cca090253d">Regularize</a>(ivector&amp; hull, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; ivectorList, <span class="keywordtype">double</span> eps)
<a name="l00185"></a>00185 {
<a name="l00186"></a>00186     T* newNode = NULL;  <span class="comment">// for return value</span>
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     <span class="comment">/*sort the list: volCompare makes the sort largest to smallest</span>
<a name="l00189"></a>00189 <span class="comment">    Jaulin et al do not have this step because they have their own</span>
<a name="l00190"></a>00190 <span class="comment">    IMAGELIST class which acts like a set and keeps contents in order</span>
<a name="l00191"></a>00191 <span class="comment">    But we are using the stl std::list and so it is unsorted when</span>
<a name="l00192"></a>00192 <span class="comment">    it is passed to Regularize.  It is more effient to sort it once</span>
<a name="l00193"></a>00193 <span class="comment">    per call to Regularise than to keep it sorted as it is</span>
<a name="l00194"></a>00194 <span class="comment">    being built because the sorted order is only needed when</span>
<a name="l00195"></a>00195 <span class="comment">    the entire list has been built.</span>
<a name="l00196"></a>00196 <span class="comment">    */</span>
<a name="l00197"></a>00197     <span class="keywordflow">try</span> {
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         <span class="comment">//sort using the volCompare function</span>
<a name="l00200"></a>00200         ivectorList.sort(<a class="code" href="AIAsubpaving_8cpp.shtml#a8713b30834070a586c0b99d9899f9b74" title="A function for comparing ivectors based on volume.">volCompare</a>);   <span class="comment">// sorts smallest to largest</span>
<a name="l00201"></a>00201 
<a name="l00202"></a>00202         <span class="comment">// test if hull is contained in the first (largest) box in list</span>
<a name="l00203"></a>00203 
<a name="l00204"></a>00204         <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         <span class="comment">// find the maximum diameter and</span>
<a name="l00207"></a>00207         <span class="keywordtype">double</span> maxDiamHull = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(hull, maxdiamcomp);
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         <span class="comment">// test if hull is equal to the largest image element, ie the last one</span>
<a name="l00210"></a>00210         <span class="keywordtype">bool</span> isHullEqual = (hull == (*ivectorList.rbegin()));
<a name="l00211"></a>00211 
<a name="l00212"></a>00212         <span class="comment">// test if hull is smaller than eps</span>
<a name="l00213"></a>00213         <span class="keywordtype">bool</span> isHullSmall = (maxDiamHull &lt; eps);
<a name="l00214"></a>00214 
<a name="l00215"></a>00215         <span class="comment">// if the list has some images in it</span>
<a name="l00216"></a>00216         <span class="comment">// and either if the hull is equal to the largest box in the list</span>
<a name="l00217"></a>00217         <span class="comment">// or if the hull max diameter is &lt; eps</span>
<a name="l00218"></a>00218         <span class="comment">// return a new node based on hull</span>
<a name="l00219"></a>00219         <span class="keywordflow">if</span> (!(ivectorList.empty()) &amp;&amp; (isHullEqual || isHullSmall)) {
<a name="l00220"></a>00220                 newNode = <span class="keyword">new</span> T(hull);
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         <span class="comment">// if the list has some images in it</span>
<a name="l00224"></a>00224         <span class="comment">// and the hull is not equal to the largest box in the list</span>
<a name="l00225"></a>00225         <span class="comment">// and the hull max diameter is not &lt; eps</span>
<a name="l00226"></a>00226         <span class="comment">// return look at the left and right boxes</span>
<a name="l00227"></a>00227         <span class="keywordflow">if</span> (!(ivectorList.empty()) &amp;&amp; !isHullEqual &amp;&amp; !isHullSmall) {
<a name="l00228"></a>00228 
<a name="l00229"></a>00229             <span class="comment">// new ivectors from splitting hull along its biggest dimension</span>
<a name="l00230"></a>00230             ivector lefthull = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(hull, maxdiamcomp);
<a name="l00231"></a>00231             ivector righthull = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(hull, maxdiamcomp);
<a name="l00232"></a>00232 
<a name="l00233"></a>00233             <span class="comment">// create two empty lists for the left and right side</span>
<a name="l00234"></a>00234             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> leftlist, rightlist;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236             <a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00" title="Define type iterator over ImageList.">ImageListItr</a> it; <span class="comment">// iterator to for the list</span>
<a name="l00237"></a>00237 
<a name="l00238"></a>00238             <span class="comment">// iterate through the current list and put the intersection of any</span>
<a name="l00239"></a>00239             <span class="comment">// element with the lefthull into new left list, and the intersection</span>
<a name="l00240"></a>00240             <span class="comment">// of any element with the new right hull into the new right list</span>
<a name="l00241"></a>00241             <span class="keywordflow">for</span> (it=ivectorList.begin(); it!=ivectorList.end(); it++) {
<a name="l00242"></a>00242                 ivector interLeft;  <span class="comment">// intersection with left hull</span>
<a name="l00243"></a>00243                 ivector interRight;  <span class="comment">// intersection with right hull</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245                 <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interLeft, *it, lefthull)) {
<a name="l00246"></a>00246                     leftlist.push_back(interLeft);
<a name="l00247"></a>00247                 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249                 <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interRight, *it, righthull)) {
<a name="l00250"></a>00250                     rightlist.push_back(interRight);
<a name="l00251"></a>00251                 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253             } <span class="comment">// end of iteration through list elements</span>
<a name="l00254"></a>00254 
<a name="l00255"></a>00255             <span class="comment">// recursively call Regularize with lefthull, leftlist</span>
<a name="l00256"></a>00256             <span class="comment">// and righthull, rightlist</span>
<a name="l00257"></a>00257             <span class="comment">// reunite the results using hull as the box for parent node</span>
<a name="l00258"></a>00258             <span class="comment">// Regularize creates a minimal subpaving</span>
<a name="l00259"></a>00259             <span class="comment">// (no sibling child nodes) on the hull</span>
<a name="l00260"></a>00260 
<a name="l00261"></a>00261             newNode = Reunite&lt;T&gt;(Regularize&lt;T&gt;(lefthull, leftlist, eps),
<a name="l00262"></a>00262                                 Regularize&lt;T&gt;(righthull,
<a name="l00263"></a>00263                                             rightlist, eps), hull);
<a name="l00264"></a>00264 
<a name="l00265"></a>00265         } <span class="comment">// end of is list has elements and first box does not contain hull</span>
<a name="l00266"></a>00266             <span class="comment">// and hull is large enough to warrent further splitting</span>
<a name="l00267"></a>00267 
<a name="l00268"></a>00268         <span class="comment">// if there is nothing in the list we return the default</span>
<a name="l00269"></a>00269             <span class="comment">// initialisation value of NULL</span>
<a name="l00270"></a>00270     }
<a name="l00271"></a>00271     <span class="keywordflow">catch</span> (bad_alloc&amp; ba)
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00274"></a>00274         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Regularize&quot;</span> &lt;&lt; std::endl;
<a name="l00275"></a>00275         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00276"></a>00276     }
<a name="l00277"></a>00277     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00278"></a>00278         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00279"></a>00279         std::cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in Regularize: original error &quot;</span>
<a name="l00280"></a>00280                                             &lt;&lt; msg &lt;&lt; endl;
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00283"></a>00283         <span class="keywordtype">string</span> msg(e.what());
<a name="l00284"></a>00284         std::cout &lt;&lt; <span class="stringliteral">&quot;Error in Regularize: original error &quot;</span> &lt;&lt; msg &lt;&lt; endl;
<a name="l00285"></a>00285     }
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     <span class="keywordflow">return</span> newNode;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 
<a name="l00308"></a>00308 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00309"></a><a class="code" href="namespacesubpavings.shtml#ab59f7407c562f2b1b4f051e479c9736f">00309</a> T *<a class="code" href="namespacesubpavings.shtml#ab59f7407c562f2b1b4f051e479c9736f" title="Forms a non-minimal image subpaving.">RegularizeNonMinimal</a>(ivector&amp; hull, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; ivectorList, <span class="keywordtype">double</span> eps)
<a name="l00310"></a>00310 {
<a name="l00311"></a>00311     T* newNode = NULL;  <span class="comment">// for return value</span>
<a name="l00312"></a>00312 
<a name="l00313"></a>00313     <span class="keywordflow">try</span> {
<a name="l00314"></a>00314 
<a name="l00315"></a>00315         <span class="comment">// sort the list: volCompare makes the sort largest to smallest</span>
<a name="l00316"></a>00316         <span class="comment">// Jaulin et al do not have this step because they have their own</span>
<a name="l00317"></a>00317         <span class="comment">// IMAGELIST class which acts like a set and keeps contents in order</span>
<a name="l00318"></a>00318         <span class="comment">// But we are using the stl std::list and so it is unsorted when</span>
<a name="l00319"></a>00319         <span class="comment">// it is passed to Regularize.  It is more efficient to sort it once</span>
<a name="l00320"></a>00320         <span class="comment">// per call to Regularise than to keep it sorted as it is</span>
<a name="l00321"></a>00321         <span class="comment">// being built because the sorted order is only needed when</span>
<a name="l00322"></a>00322         <span class="comment">// the entire list has been built.</span>
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <span class="comment">// sort using the volCompare function</span>
<a name="l00325"></a>00325         ivectorList.sort(<a class="code" href="AIAsubpaving_8cpp.shtml#a8713b30834070a586c0b99d9899f9b74" title="A function for comparing ivectors based on volume.">volCompare</a>);   <span class="comment">// sorts smallest to largest</span>
<a name="l00326"></a>00326 
<a name="l00327"></a>00327         <span class="comment">// test if hull is contained in the first (largest) box in the list</span>
<a name="l00328"></a>00328 
<a name="l00329"></a>00329         <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value from MaxDiam</span>
<a name="l00330"></a>00330 
<a name="l00331"></a>00331         <span class="comment">// find the maximum diameter</span>
<a name="l00332"></a>00332         <span class="keywordtype">double</span> maxDiamHull = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(hull, maxdiamcomp);
<a name="l00333"></a>00333 
<a name="l00334"></a>00334         <span class="comment">// test if hull is equal to the</span>
<a name="l00335"></a>00335             <span class="comment">// largest image element, ie the last one</span>
<a name="l00336"></a>00336         <span class="keywordtype">bool</span> isHullEqual = (hull==(*ivectorList.rbegin()));
<a name="l00337"></a>00337         <span class="keywordtype">bool</span> isHullSmall = (maxDiamHull &lt; eps);
<a name="l00338"></a>00338 
<a name="l00339"></a>00339         <span class="comment">// if the list has some images in it</span>
<a name="l00340"></a>00340         <span class="comment">// and either if the hull is equal to the largest box in the list</span>
<a name="l00341"></a>00341         <span class="comment">// or if the hull max diameter is &lt; eps</span>
<a name="l00342"></a>00342         <span class="comment">// return a new node based on hull</span>
<a name="l00343"></a>00343         <span class="keywordflow">if</span> (!(ivectorList.empty()) &amp;&amp; (isHullEqual || isHullSmall)) {
<a name="l00344"></a>00344             newNode = <span class="keyword">new</span> T(hull);
<a name="l00345"></a>00345         }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347         <span class="comment">// if the list has some images in it</span>
<a name="l00348"></a>00348         <span class="comment">// and the hull is not contained in the first box in the list</span>
<a name="l00349"></a>00349         <span class="comment">// and the hull max diameter is not &lt; eps</span>
<a name="l00350"></a>00350         <span class="comment">// return look at the left and right boxes</span>
<a name="l00351"></a>00351         <span class="keywordflow">if</span> (!(ivectorList.empty()) &amp;&amp; !isHullEqual &amp;&amp; !isHullSmall) {
<a name="l00352"></a>00352 
<a name="l00353"></a>00353             <span class="comment">// new ivectors from splitting hull along its biggest dimension</span>
<a name="l00354"></a>00354             ivector lefthull = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(hull, maxdiamcomp);
<a name="l00355"></a>00355             ivector righthull = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(hull, maxdiamcomp);
<a name="l00356"></a>00356 
<a name="l00357"></a>00357             <span class="comment">// create two empty lists for the left and right side</span>
<a name="l00358"></a>00358             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> leftlist, rightlist;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360             <a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00" title="Define type iterator over ImageList.">ImageListItr</a> it; <span class="comment">// iterator to for the list</span>
<a name="l00361"></a>00361 
<a name="l00362"></a>00362             <span class="comment">// iterate through the current list and put the intersection of any</span>
<a name="l00363"></a>00363             <span class="comment">// element with the lefthull into new left list, and the intersection</span>
<a name="l00364"></a>00364             <span class="comment">// of any element with the new right hull into the new right list</span>
<a name="l00365"></a>00365             <span class="keywordflow">for</span> (it=ivectorList.begin(); it!=ivectorList.end(); it++) {
<a name="l00366"></a>00366                 ivector interLeft;  <span class="comment">// intersection with left hull</span>
<a name="l00367"></a>00367                 ivector interRight;  <span class="comment">// intersection with right hull</span>
<a name="l00368"></a>00368 
<a name="l00369"></a>00369                 <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interLeft, *it, lefthull)) {
<a name="l00370"></a>00370                     leftlist.push_back(interLeft);
<a name="l00371"></a>00371                 }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373                 <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interRight, *it, righthull)) {
<a name="l00374"></a>00374                     rightlist.push_back(interRight);
<a name="l00375"></a>00375                 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377             } <span class="comment">// end of iteration through list elements</span>
<a name="l00378"></a>00378 
<a name="l00379"></a>00379             <span class="comment">// recursively call RegularizeNonMinimal with lefthull,</span>
<a name="l00380"></a>00380             <span class="comment">// leftlist and righthull, rightlist</span>
<a name="l00381"></a>00381             <span class="comment">// adopt the results using hull as the box for parent node</span>
<a name="l00382"></a>00382             <span class="comment">// RegularizeNonMinimal creates a non-minimal subpaving</span>
<a name="l00383"></a>00383             <span class="comment">// (ie has sibling child nodes) on the hull</span>
<a name="l00384"></a>00384 
<a name="l00385"></a>00385             newNode = Adopt&lt;T&gt;(RegularizeNonMinimal&lt;T&gt;(lefthull, leftlist,
<a name="l00386"></a>00386                                                     eps),
<a name="l00387"></a>00387                             RegularizeNonMinimal&lt;T&gt;(righthull,
<a name="l00388"></a>00388                                                     rightlist,
<a name="l00389"></a>00389                                                     eps),
<a name="l00390"></a>00390                                             hull);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392         } <span class="comment">// end of is list has elements and first box does not contain hull</span>
<a name="l00393"></a>00393         <span class="comment">// and hull is large enough to warrent further splitting</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395         <span class="comment">// if there is nothing in the list we return the default</span>
<a name="l00396"></a>00396             <span class="comment">// initialisation value of NULL</span>
<a name="l00397"></a>00397     }
<a name="l00398"></a>00398     <span class="keywordflow">catch</span> (bad_alloc&amp; ba)
<a name="l00399"></a>00399     {
<a name="l00400"></a>00400         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00401"></a>00401         std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in SRegularizeNonMinimal&quot;</span>
<a name="l00402"></a>00402                                             &lt;&lt; std::endl;
<a name="l00403"></a>00403         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00404"></a>00404     }
<a name="l00405"></a>00405     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00406"></a>00406         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00407"></a>00407         std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in RegularizeNonMinimal: original error &quot;</span>
<a name="l00408"></a>00408                                             &lt;&lt; msg &lt;&lt; endl;
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00411"></a>00411         <span class="keywordtype">string</span> msg(e.what());
<a name="l00412"></a>00412         std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in RegularizeNonMinimal: original error &quot;</span>
<a name="l00413"></a>00413                                             &lt;&lt; msg &lt;&lt; endl;
<a name="l00414"></a>00414     }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416     <span class="keywordflow">return</span> newNode;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 }
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 } <span class="comment">// end namespace subpavings</span>
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sptemplates_8hpp.shtml">sptemplates.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
