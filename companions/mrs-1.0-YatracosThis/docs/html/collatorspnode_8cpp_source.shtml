<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: collatorspnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('collatorspnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">collatorspnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="collatorspnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file:     collatorspnode.cpp</span>
<a name="l00023"></a>00023 <span class="comment">\brief CollatorSPnode definitions</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="collatorspnode_8hpp.shtml" title="CollatorSPnode declarations.">collatorspnode.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// to use std input/output</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use exceptions</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">//to use algorithms</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00036"></a>00036 <span class="comment">//to use functionals</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00038"></a>00038 <span class="comment">//to use numeric accumulate</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;numeric&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keyword">using namespace </span>std;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">namespace </span>subpavings {
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <span class="comment">// -------------------------- private member functions -------------</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="comment">// private initialised constructor, initialised with a pointer to an SPSnode</span>
<a name="l00054"></a>00054     <span class="comment">// and a normalising constant, eg sum of counts in each node for a histogram</span>
<a name="l00055"></a>00055     <span class="comment">// the summary becomes count /(normalising constant * vol) for the SPSnode</span>
<a name="l00056"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aa14e448dca22fa7c14de4d21c0624b26">00056</a>     CollatorSPnode::CollatorSPnode(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">size_t</span> bigN)
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058         <span class="keywordflow">try</span> {
<a name="l00059"></a>00059             theBox = <span class="keyword">new</span> ivector(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00060"></a>00060             dimension = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>();
<a name="l00061"></a>00061             label = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l00062"></a>00062             nodeName = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00063"></a>00063 
<a name="l00064"></a>00064             <span class="comment">// add the summary to the vector summary</span>
<a name="l00065"></a>00065             summary.push_back((spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>())/
<a name="l00066"></a>00066                                 (1.0 * bigN * spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l00067"></a>00067 
<a name="l00068"></a>00068             <span class="comment">//recursion on the children</span>
<a name="l00069"></a>00069             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00070"></a>00070                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(), bigN));
<a name="l00071"></a>00071             }
<a name="l00072"></a>00072             <span class="keywordflow">else</span> leftChild=NULL;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00075"></a>00075                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(), bigN));
<a name="l00076"></a>00076             }
<a name="l00077"></a>00077             <span class="keywordflow">else</span> rightChild=NULL;
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00080"></a>00080             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00081"></a>00081             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00082"></a>00082             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00083"></a>00083             <span class="keywordflow">throw</span>;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="comment">// negates the summary for every node in tree rooted at this</span>
<a name="l00090"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3ba268993642c1fd5c702966a4fd4fba">00090</a>     <span class="keywordtype">void</span> CollatorSPnode::nodeNegate(<span class="keywordtype">double</span> c) 
<a name="l00091"></a>00091    {
<a name="l00092"></a>00092       <span class="comment">// transform(summary.begin(), summary.end(), summary.begin(),</span>
<a name="l00093"></a>00093       <span class="comment">//                                negate&lt;double&gt;());</span>
<a name="l00094"></a>00094       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; summary.size(); i++) {  
<a name="l00095"></a>00095       <span class="keywordtype">double</span> temp = c * summary[i];
<a name="l00096"></a>00096       <span class="keywordflow">if</span> ( temp == -0) { temp = 0; }
<a name="l00097"></a>00097       summary[i] = temp;        
<a name="l00098"></a>00098     }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100         <span class="comment">// recurse on children</span>
<a name="l00101"></a>00101         <span class="keywordflow">if</span> (hasLCwithBox()) getLeftChild()-&gt;nodeNegate(c);
<a name="l00102"></a>00102         <span class="keywordflow">if</span> (hasRCwithBox()) getRightChild()-&gt;nodeNegate(c);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     <span class="comment">// Print the average of the summary of a single leaf node, using tab delimiters</span>
<a name="l00107"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a9fe7256f1a62884e4bb8599a63abbbdf">00107</a>     std::ostream&amp; CollatorSPnode::leafAverageOutputTabs(
<a name="l00108"></a>00108                                         std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00109"></a>00109 <span class="keyword">    </span>{
<a name="l00110"></a>00110         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112             ivector thisBox = *theBox; <span class="comment">// copy theBox</span>
<a name="l00113"></a>00113 
<a name="l00114"></a>00114             <span class="keywordtype">double</span> summ = 0;
<a name="l00115"></a>00115             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117             summ = accumulate(summary.begin(), summary.end(), summ);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00120"></a>00120             <span class="keywordtype">double</span> av =  summ/(1.0*summary.size());
<a name="l00121"></a>00121 
<a name="l00122"></a>00122             <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00123"></a>00123             os &lt;&lt; nodeName;
<a name="l00124"></a>00124             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00125"></a>00125             <span class="comment">// followed by the average</span>
<a name="l00126"></a>00126             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; av;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00129"></a>00129             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00130"></a>00130             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00131"></a>00131 
<a name="l00132"></a>00132                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00133"></a>00133                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00134"></a>00134             }
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <span class="comment">// make the dot difference of two summaries</span>
<a name="l00140"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3a0733086ac4a95e954da0cd8f0e1dfa">00140</a>     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a>&amp; CollatorSPnode::dotDifferenceSummary(<a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a>&amp; lhsSummary,
<a name="l00141"></a>00141                                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a>&amp; rhsSummary)
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143     <span class="comment">// replace lhs data with the the dot difference of lhs and rhs data</span>
<a name="l00144"></a>00144         <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> originalSummary = lhsSummary;
<a name="l00145"></a>00145         lhsSummary.clear();
<a name="l00146"></a>00146         <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00147"></a>00147         <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> sit;
<a name="l00148"></a>00148         <span class="keywordflow">for</span> (sit = rhsSummary.begin(); sit &lt; rhsSummary.end(); sit++) {
<a name="l00149"></a>00149             <span class="keywordflow">for</span> (it = originalSummary.begin(); it &lt; originalSummary.end();
<a name="l00150"></a>00150                                                         it++) {
<a name="l00151"></a>00151                 lhsSummary.push_back(*it - *sit); <span class="comment">// push back the diff</span>
<a name="l00152"></a>00152             }
<a name="l00153"></a>00153         }
<a name="l00154"></a>00154         <span class="keywordflow">return</span> lhsSummary;
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="comment">// accumulates absolute value of leaf node areas,</span>
<a name="l00159"></a>00159     <span class="comment">// left to right</span>
<a name="l00160"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5ac89a38985d8ff62ca7a29943c6734c">00160</a>     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a>&amp; CollatorSPnode::getLeafNodeAbsAreaAccumulations(
<a name="l00161"></a>00161                                         <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a>&amp; areaAcc)<span class="keyword"> const</span>
<a name="l00162"></a>00162 <span class="keyword">    </span>{
<a name="l00163"></a>00163         <span class="keywordflow">if</span> (getLeftChild()!=NULL) {
<a name="l00164"></a>00164             areaAcc = getLeftChild()-&gt;getLeafNodeAbsAreaAccumulations(areaAcc);
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166         <span class="keywordflow">if</span> (getRightChild()!=NULL) {
<a name="l00167"></a>00167             areaAcc = getRightChild()-&gt;getLeafNodeAbsAreaAccumulations(areaAcc);
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169         <span class="keywordflow">if</span> (getLeftChild()==NULL &amp;&amp; getRightChild()==NULL) {
<a name="l00170"></a>00170 
<a name="l00171"></a>00171             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00172"></a>00172 
<a name="l00173"></a>00173             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = summary.begin();
<a name="l00174"></a>00174             <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> dpit;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176             <span class="keywordflow">for</span> (dpit = areaAcc.begin(); dpit &lt; areaAcc.end(); dpit++) {
<a name="l00177"></a>00177 
<a name="l00178"></a>00178                 cxsc::accumulate((*dpit), abs(*it), vol);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180                 it++;
<a name="l00181"></a>00181             }
<a name="l00182"></a>00182         }
<a name="l00183"></a>00183 
<a name="l00184"></a>00184         <span class="keywordflow">return</span> areaAcc;
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187    <span class="comment">// double total value of accumulated absolute leaf node areas</span>
<a name="l00188"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0afe525dbddf958078e9a8eac6ea88a3">00188</a>     real CollatorSPnode::getLeafNodeAbsAreaAccumulationTotal()<span class="keyword"> const</span>
<a name="l00189"></a>00189 <span class="keyword">    </span>{
<a name="l00190"></a>00190         <span class="keywordtype">size_t</span> n = summary.size();
<a name="l00191"></a>00191         dotprecision emptyDP(0.0);
<a name="l00192"></a>00192         <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> areaAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l00193"></a>00193     dotprecision tot(0.0);
<a name="l00194"></a>00194     
<a name="l00195"></a>00195         areaAcc = getLeafNodeAbsAreaAccumulations(areaAcc);
<a name="l00196"></a>00196         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retvalues;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198     <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l00199"></a>00199         <span class="keywordflow">for</span> (it = areaAcc.begin(); it &lt; areaAcc.end(); it++) {
<a name="l00200"></a>00200             tot += *it; 
<a name="l00201"></a>00201         }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203         <span class="keywordflow">return</span> rnd(tot); <span class="comment">// round to nearest;</span>
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="comment">// accumulates the summary values over leaf nodes</span>
<a name="l00208"></a>00208     <span class="comment">// left to right</span>
<a name="l00209"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7daf828f08626b5b83654550e5a98bee">00209</a>     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a>&amp; CollatorSPnode::getLeafNodeSummaryAccumulations(
<a name="l00210"></a>00210                                         <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a>&amp; summAcc)<span class="keyword"> const</span>
<a name="l00211"></a>00211 <span class="keyword">    </span>{
<a name="l00212"></a>00212         <span class="keywordflow">if</span> (getLeftChild()!=NULL) {
<a name="l00213"></a>00213             summAcc =
<a name="l00214"></a>00214                 getLeftChild()-&gt;getLeafNodeSummaryAccumulations(summAcc);
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216         <span class="keywordflow">if</span> (getRightChild()!=NULL) {
<a name="l00217"></a>00217             summAcc =
<a name="l00218"></a>00218                 getRightChild()-&gt;getLeafNodeSummaryAccumulations(summAcc);
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220         <span class="keywordflow">if</span> (getLeftChild()==NULL &amp;&amp; getRightChild()==NULL) {
<a name="l00221"></a>00221 
<a name="l00222"></a>00222             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = summary.begin();
<a name="l00223"></a>00223             <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> dpit;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225             <span class="keywordflow">for</span> (dpit = summAcc.begin(); dpit &lt; summAcc.end(); dpit++) {
<a name="l00226"></a>00226                 cxsc::accumulate((*dpit), (*it), 1.0);
<a name="l00227"></a>00227                 it++;
<a name="l00228"></a>00228             }
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         <span class="keywordflow">return</span> summAcc;
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     <span class="comment">// turn this into the root of a CollatorSPnode tree which has tree which is</span>
<a name="l00235"></a>00235     <span class="comment">// the union of this tree and the spn tree and summary which is the dot</span>
<a name="l00236"></a>00236     <span class="comment">// difference between this&#39;s summary and the spn&#39;s summary.</span>
<a name="l00237"></a>00237     <span class="comment">// ie if this node has summary &lt;h1..hn&gt; and spn&#39;s equivalent node summary</span>
<a name="l00238"></a>00238     <span class="comment">// is &lt;H1..Hm&gt;</span>
<a name="l00239"></a>00239     <span class="comment">// then this&#39;s summary becomes &lt;h1-H1, .. Hn-H1, .. , hn-H1, .. ,Hn-Hm&gt;</span>
<a name="l00240"></a>00240     <span class="comment">// have not specifed const data for the CollatorSPnode pointer,</span>
<a name="l00241"></a>00241     <span class="comment">// because if we do that we can&#39;t expand it</span>
<a name="l00242"></a>00242     <span class="comment">// but note that the CollatorSPnode passed in CAN BE ALTERED</span>
<a name="l00243"></a>00243     <span class="comment">// private because this should never be used in external code</span>
<a name="l00244"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a1a3e5a8c9c81e4f3b307360c2c495">00244</a>     <span class="keywordtype">bool</span> CollatorSPnode::dotDiffPaving(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> spn)
<a name="l00245"></a>00245     {
<a name="l00246"></a>00246 
<a name="l00247"></a>00247         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00248"></a>00248         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;  <span class="comment">// indicator for done adding</span>
<a name="l00249"></a>00249 
<a name="l00250"></a>00250         <span class="keywordflow">try</span> {
<a name="l00251"></a>00251 
<a name="l00252"></a>00252             <span class="keywordflow">if</span> (spn == NULL) {
<a name="l00253"></a>00253                 done = <span class="keyword">true</span>;
<a name="l00254"></a>00254 
<a name="l00255"></a>00255             }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257             <span class="comment">// if the boxes are not the same we can&#39;t do anything</span>
<a name="l00258"></a>00258             <span class="keywordflow">if</span> (!done &amp;&amp; (theBox != NULL) &amp;&amp; (*theBox != spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l00259"></a>00259                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l00260"></a>00260             }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262             <span class="comment">// if this has no box yet it has not incorporated anything</span>
<a name="l00263"></a>00263             <span class="comment">// and so we just use spn to construct this</span>
<a name="l00264"></a>00264             <span class="keywordflow">if</span> (!done &amp;&amp; (theBox == NULL)) {
<a name="l00265"></a>00265 
<a name="l00266"></a>00266                 ivector v = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00267"></a>00267 
<a name="l00268"></a>00268                 theBox = <span class="keyword">new</span> ivector(v);
<a name="l00269"></a>00269                 dimension = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1;
<a name="l00270"></a>00270                 label = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l00271"></a>00271 
<a name="l00272"></a>00272                 summary = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274                 <span class="comment">//recursion on the children</span>
<a name="l00275"></a>00275                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00276"></a>00276                     nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(
<a name="l00277"></a>00277                         *(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00278"></a>00278 
<a name="l00279"></a>00279                 }
<a name="l00280"></a>00280                 <span class="keywordflow">else</span> leftChild=NULL;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00283"></a>00283                     nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(
<a name="l00284"></a>00284                         *(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00285"></a>00285                  }
<a name="l00286"></a>00286                 <span class="keywordflow">else</span> rightChild=NULL;
<a name="l00287"></a>00287 
<a name="l00288"></a>00288                 done = <span class="keyword">true</span>;
<a name="l00289"></a>00289                 retValue = <span class="keyword">true</span>;
<a name="l00290"></a>00290 
<a name="l00291"></a>00291             } <span class="comment">// end if theBox==NULL</span>
<a name="l00292"></a>00292 
<a name="l00293"></a>00293             <span class="comment">// do the rest only if done is not true</span>
<a name="l00294"></a>00294 
<a name="l00295"></a>00295             <span class="comment">// if this is a leaf and the paving to be added is a leaf</span>
<a name="l00296"></a>00296             <span class="comment">// this summary becomes the dot difference of the summaries</span>
<a name="l00297"></a>00297             <span class="keywordflow">if</span> (!done &amp;&amp; !done &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00298"></a>00298 
<a name="l00299"></a>00299                 <span class="comment">// make this summary into the dot difference of this summary</span>
<a name="l00300"></a>00300                 <span class="comment">// and spn summary</span>
<a name="l00301"></a>00301                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> spnSummary = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
<a name="l00302"></a>00302                 summary = dotDifferenceSummary(summary, spnSummary);
<a name="l00303"></a>00303             }
<a name="l00304"></a>00304 
<a name="l00305"></a>00305             <span class="comment">// else not done and not both leaves,</span>
<a name="l00306"></a>00306             <span class="comment">// if this is not a leaf or the paving to be added</span>
<a name="l00307"></a>00307             <span class="comment">// is not a leaf, we may need to split</span>
<a name="l00308"></a>00308             <span class="comment">// and we will need to recurse further</span>
<a name="l00309"></a>00309             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!done &amp;&amp; (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() || !(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()))) {
<a name="l00310"></a>00310 
<a name="l00311"></a>00311                 <span class="comment">// if this is leaf and spn not we need to split this</span>
<a name="l00312"></a>00312                 <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>()) { <span class="comment">// so spn can&#39;t be a leaf</span>
<a name="l00313"></a>00313 
<a name="l00314"></a>00314                     nodeExpand();
<a name="l00315"></a>00315                 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317                 <span class="comment">// if spn is leaf and this is not we need to split spn</span>
<a name="l00318"></a>00318                 <span class="comment">// THIS WILL CHANGE the CollatorSPnode pointed to by spn</span>
<a name="l00319"></a>00319 
<a name="l00320"></a>00320                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// so this can&#39;t be a leaf</span>
<a name="l00321"></a>00321 
<a name="l00322"></a>00322                     spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af0789230e2a9612f9b0644113e318f37" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">nodeExpand</a>();
<a name="l00323"></a>00323                 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325                 <span class="comment">// make this summary into the dot difference of this summary</span>
<a name="l00326"></a>00326                 <span class="comment">// and spn summary</span>
<a name="l00327"></a>00327                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> spnSummary = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
<a name="l00328"></a>00328                 summary = dotDifferenceSummary(summary, spnSummary);
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331                 <span class="comment">// if they are were neither leaves originally</span>
<a name="l00332"></a>00332                 <span class="comment">// we go straight on to recursing with the children</span>
<a name="l00333"></a>00333                 <span class="comment">// otherwise expansions above are followed by recursion</span>
<a name="l00334"></a>00334 
<a name="l00335"></a>00335                 <span class="comment">// recurse with children</span>
<a name="l00336"></a>00336                 retValue = getLeftChild()-&gt;dotDiffPaving(
<a name="l00337"></a>00337                         spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00338"></a>00338                 retValue = getRightChild()-&gt;dotDiffPaving(
<a name="l00339"></a>00339                         spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00340"></a>00340 
<a name="l00341"></a>00341             } <span class="comment">// end of dealing with case where at least one is not a leaf</span>
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00344"></a>00344             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in dotDiffPaving&quot;</span> &lt;&lt; endl;
<a name="l00345"></a>00345             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00346"></a>00346             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00347"></a>00347             <span class="keywordflow">throw</span>;
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350         <span class="keywordflow">return</span> retValue;
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 
<a name="l00355"></a>00355     <span class="comment">// ------------------------ public member functions ----------------</span>
<a name="l00356"></a>00356 
<a name="l00357"></a>00357     <span class="comment">//default constructor,</span>
<a name="l00358"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5">00358</a>      CollatorSPnode::CollatorSPnode() {}
<a name="l00359"></a>00359 
<a name="l00360"></a>00360     <span class="comment">// initialised constructor, initialised with a pointer to an SPSnode</span>
<a name="l00361"></a>00361     <span class="comment">// the summary becomes the k/(N*vol) for the SPSnode</span>
<a name="l00362"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a561b7d137e120403d17008ff837e0036">00362</a>     CollatorSPnode::CollatorSPnode(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)
<a name="l00363"></a>00363     {
<a name="l00364"></a>00364         <span class="keywordflow">try</span> {
<a name="l00365"></a>00365             theBox = <span class="keyword">new</span> ivector(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00366"></a>00366             dimension = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>();
<a name="l00367"></a>00367             label = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l00368"></a>00368             nodeName = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00369"></a>00369 
<a name="l00370"></a>00370             <span class="comment">// add the normalised count/volume to the vector summary</span>
<a name="l00371"></a>00371 
<a name="l00372"></a>00372             <span class="keywordtype">size_t</span> rootCounter = spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00373"></a>00373 
<a name="l00374"></a>00374             summary.push_back(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/
<a name="l00375"></a>00375                                 (rootCounter * spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l00376"></a>00376 
<a name="l00377"></a>00377             <span class="comment">//recursion on the children using constructor which normalises counts</span>
<a name="l00378"></a>00378             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00379"></a>00379                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l00380"></a>00380                                                     rootCounter));
<a name="l00381"></a>00381             }
<a name="l00382"></a>00382             <span class="keywordflow">else</span> leftChild=NULL;
<a name="l00383"></a>00383 
<a name="l00384"></a>00384             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00385"></a>00385                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l00386"></a>00386                                                     rootCounter));
<a name="l00387"></a>00387             }
<a name="l00388"></a>00388             <span class="keywordflow">else</span> rightChild=NULL;
<a name="l00389"></a>00389         }
<a name="l00390"></a>00390         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00391"></a>00391             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00392"></a>00392             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00393"></a>00393             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00394"></a>00394             <span class="keywordflow">throw</span>;
<a name="l00395"></a>00395         }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397     }
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <span class="comment">// initialised constructor</span>
<a name="l00400"></a>00400     <span class="comment">// initialised with a box, a label, and a vector summary</span>
<a name="l00401"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab4777c2f663dd1faaed8568fd0707a51">00401</a>     CollatorSPnode::CollatorSPnode(ivector&amp; v, <span class="keywordtype">int</span> lab, <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> summ)
<a name="l00402"></a>00402         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab)
<a name="l00403"></a>00403     {
<a name="l00404"></a>00404         <span class="keywordflow">try</span> {
<a name="l00405"></a>00405             <span class="comment">// copy the vector summary</span>
<a name="l00406"></a>00406             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a> = summ;
<a name="l00407"></a>00407         }
<a name="l00408"></a>00408         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00409"></a>00409             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00410"></a>00410             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00411"></a>00411             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00412"></a>00412             <span class="keywordflow">throw</span>;
<a name="l00413"></a>00413         }
<a name="l00414"></a>00414     }
<a name="l00415"></a>00415 
<a name="l00416"></a>00416 
<a name="l00417"></a>00417     <span class="comment">// Copy constructor</span>
<a name="l00418"></a>00418     <span class="comment">// copies from given node downwards</span>
<a name="l00419"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a4a01094e0378f8563fbbf40461d5b488">00419</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode::CollatorSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>&amp; other)
<a name="l00420"></a>00420         : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(*(other.theBox), other.label)
<a name="l00421"></a>00421     {
<a name="l00422"></a>00422         <span class="keywordflow">try</span> {
<a name="l00423"></a>00423             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a> = other.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00424"></a>00424             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426             <span class="comment">//recursion on the children</span>
<a name="l00427"></a>00427             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00428"></a>00428                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00429"></a>00429                     *(other.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00430"></a>00430             }
<a name="l00431"></a>00431             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00432"></a>00432 
<a name="l00433"></a>00433             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00434"></a>00434                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00435"></a>00435                     *(other.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00436"></a>00436             }
<a name="l00437"></a>00437             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00438"></a>00438         }
<a name="l00439"></a>00439         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00440"></a>00440             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00441"></a>00441             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00442"></a>00442             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00443"></a>00443             <span class="keywordflow">throw</span>;
<a name="l00444"></a>00444         }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446     }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="comment">//Copy assignment operator</span>
<a name="l00449"></a>00449     <span class="comment">// copies from given node downwards</span>
<a name="l00450"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a01020423e529685b484b95a73b6432ee">00450</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a01020423e529685b484b95a73b6432ee" title="Copy assignment operator.">CollatorSPnode::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>&amp; rhs)
<a name="l00451"></a>00451     {
<a name="l00452"></a>00452         <span class="keywordflow">try</span> {
<a name="l00453"></a>00453 
<a name="l00454"></a>00454             <span class="comment">// delete the current children (deletes their children as well)</span>
<a name="l00455"></a>00455             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) {
<a name="l00456"></a>00456                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l00457"></a>00457                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00458"></a>00458             }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) {
<a name="l00461"></a>00461                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00462"></a>00462                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00463"></a>00463             }
<a name="l00464"></a>00464             <span class="comment">// and delete the current box</span>
<a name="l00465"></a>00465             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00466"></a>00466                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00467"></a>00467                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = NULL;
<a name="l00468"></a>00468             }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>=NULL;
<a name="l00471"></a>00471 
<a name="l00472"></a>00472             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00473"></a>00473             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00474"></a>00474             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00475"></a>00475             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00476"></a>00476 
<a name="l00477"></a>00477             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a> = rhs.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00478"></a>00478 
<a name="l00479"></a>00479             <span class="comment">//recursion on the children</span>
<a name="l00480"></a>00480             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00481"></a>00481                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00482"></a>00482                     *(rhs.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00483"></a>00483             }
<a name="l00484"></a>00484             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00485"></a>00485 
<a name="l00486"></a>00486             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00487"></a>00487                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00488"></a>00488                     *(rhs.<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00489"></a>00489             }
<a name="l00490"></a>00490             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00491"></a>00491         }
<a name="l00492"></a>00492         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00493"></a>00493             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00494"></a>00494             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00495"></a>00495             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00496"></a>00496             <span class="keywordflow">throw</span>;
<a name="l00497"></a>00497         }
<a name="l00498"></a>00498 
<a name="l00499"></a>00499         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00500"></a>00500 
<a name="l00501"></a>00501     }
<a name="l00502"></a>00502 
<a name="l00503"></a>00503     <span class="comment">// make a CollatorSPnode which represents an average of the summary</span>
<a name="l00504"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">00504</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">CollatorSPnode::makeAverageCollation</a>()<span class="keyword"> const</span>
<a name="l00505"></a>00505 <span class="keyword">    </span>{
<a name="l00506"></a>00506         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newnode = NULL;
<a name="l00507"></a>00507 
<a name="l00508"></a>00508         <span class="keywordflow">try</span> {
<a name="l00509"></a>00509             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> newsumm;
<a name="l00510"></a>00510             <span class="keywordtype">double</span> summ = 0;
<a name="l00511"></a>00511             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00512"></a>00512             <span class="comment">// should change this to use for_each</span>
<a name="l00513"></a>00513             summ = accumulate(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(), <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), summ);
<a name="l00514"></a>00514 
<a name="l00515"></a>00515             newsumm.push_back(
<a name="l00516"></a>00516                 summ/(1.0*(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>).size()));
<a name="l00517"></a>00517 
<a name="l00518"></a>00518             ivector v = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00519"></a>00519 
<a name="l00520"></a>00520             <span class="comment">// make the new node</span>
<a name="l00521"></a>00521             newnode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(v, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, newsumm);
<a name="l00522"></a>00522             newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>); <span class="comment">// set name to this node name</span>
<a name="l00523"></a>00523 
<a name="l00524"></a>00524             <span class="comment">//recursion on the children</span>
<a name="l00525"></a>00525             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00526"></a>00526                 newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">makeAverageCollation</a>());
<a name="l00527"></a>00527             }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00530"></a>00530                 newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">makeAverageCollation</a>());
<a name="l00531"></a>00531             }
<a name="l00532"></a>00532         }
<a name="l00533"></a>00533 
<a name="l00534"></a>00534         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00535"></a>00535             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00536"></a>00536             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00537"></a>00537             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00538"></a>00538             <span class="keywordflow">throw</span>;
<a name="l00539"></a>00539         }
<a name="l00540"></a>00540 
<a name="l00541"></a>00541         <span class="keywordflow">return</span> newnode;
<a name="l00542"></a>00542 
<a name="l00543"></a>00543     }
<a name="l00544"></a>00544 
<a name="l00545"></a>00545 
<a name="l00546"></a>00546     <span class="comment">// Accessor for the parent of a node.</span>
<a name="l00547"></a>00547     <span class="comment">//Returns a copy of the pointer to parent node.</span>
<a name="l00548"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aed3cb2aceae3c384eed427a404a6c8f6">00548</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aed3cb2aceae3c384eed427a404a6c8f6" title="Accessor for the parent of a node.">CollatorSPnode::getParent</a>()<span class="keyword"> const</span>
<a name="l00549"></a>00549 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00550"></a>00550 
<a name="l00551"></a>00551     <span class="comment">// Accessor for the left child of a node.</span>
<a name="l00552"></a>00552     <span class="comment">// Returns a copy of the pointer to leftChild node, cast to this type</span>
<a name="l00553"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82">00553</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">CollatorSPnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00554"></a>00554 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00555"></a>00555 
<a name="l00556"></a>00556     <span class="comment">// Accessor for the right child of a node.</span>
<a name="l00557"></a>00557     <span class="comment">// Returns a copy of the pointer to rightChild node, cast this type</span>
<a name="l00558"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6">00558</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">CollatorSPnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l00559"></a>00559 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00560"></a>00560 
<a name="l00561"></a>00561     <span class="comment">// Accessor for the summary.</span>
<a name="l00562"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800">00562</a>     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">CollatorSPnode::getSummary</a>()<span class="keyword"> const</span>
<a name="l00563"></a>00563 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>; }
<a name="l00564"></a>00564 
<a name="l00565"></a>00565     <span class="comment">// Get number of subpavings summarised.</span>
<a name="l00566"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6470a98dd502247ca9e86582b3c422eb">00566</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6470a98dd502247ca9e86582b3c422eb" title="Get number of subpavings summarised.">CollatorSPnode::getNumberSummarised</a>()<span class="keyword"> const</span>
<a name="l00567"></a>00567 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size(); }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 
<a name="l00570"></a>00570     <span class="comment">// real value of accumulated absolute leaf node areas</span>
<a name="l00571"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac0b072587e955a451fab739dcb538c37">00571</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac0b072587e955a451fab739dcb538c37" title="Get the accumulations of absolute areas for leaf nodes.">CollatorSPnode::getLeafNodeAbsAreaAccumulations</a>()<span class="keyword"> const</span>
<a name="l00572"></a>00572 <span class="keyword">    </span>{
<a name="l00573"></a>00573         <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size();
<a name="l00574"></a>00574         dotprecision emptyDP(0.0);
<a name="l00575"></a>00575         <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> areaAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l00576"></a>00576 
<a name="l00577"></a>00577         areaAcc = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac0b072587e955a451fab739dcb538c37" title="Get the accumulations of absolute areas for leaf nodes.">getLeafNodeAbsAreaAccumulations</a>(areaAcc);
<a name="l00578"></a>00578         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retvalues;
<a name="l00579"></a>00579 
<a name="l00580"></a>00580         <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l00581"></a>00581         <span class="keywordflow">for</span> (it = areaAcc.begin(); it &lt; areaAcc.end(); it++) {
<a name="l00582"></a>00582             retvalues.push_back(rnd(*it)); <span class="comment">// round to nearest</span>
<a name="l00583"></a>00583         }
<a name="l00584"></a>00584 
<a name="l00585"></a>00585         <span class="keywordflow">return</span> retvalues;
<a name="l00586"></a>00586     }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588     <span class="comment">// real value of accumulated leaf node summary</span>
<a name="l00589"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c566a24d35898fb54133cf310276468">00589</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c566a24d35898fb54133cf310276468" title="Get the accumulations of summary values for leaf nodes.">CollatorSPnode::getLeafNodeSummaryAccumulations</a>()<span class="keyword"> const</span>
<a name="l00590"></a>00590 <span class="keyword">    </span>{
<a name="l00591"></a>00591         <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size();
<a name="l00592"></a>00592         dotprecision emptyDP(0.0);
<a name="l00593"></a>00593         <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> areaAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l00594"></a>00594 
<a name="l00595"></a>00595         areaAcc = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c566a24d35898fb54133cf310276468" title="Get the accumulations of summary values for leaf nodes.">getLeafNodeSummaryAccumulations</a>(areaAcc);
<a name="l00596"></a>00596         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retvalues;
<a name="l00597"></a>00597 
<a name="l00598"></a>00598         <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l00599"></a>00599         <span class="keywordflow">for</span> (it = areaAcc.begin(); it &lt; areaAcc.end(); it++) {
<a name="l00600"></a>00600             retvalues.push_back(rnd(*it)); <span class="comment">// round to nearest</span>
<a name="l00601"></a>00601         }
<a name="l00602"></a>00602 
<a name="l00603"></a>00603         <span class="keywordflow">return</span> retvalues;
<a name="l00604"></a>00604     }
<a name="l00605"></a>00605 
<a name="l00606"></a>00606     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00607"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab2e1cd11ef3dd4424cf491e529ed0fd8">00607</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab2e1cd11ef3dd4424cf491e529ed0fd8" title="Output for a node in a binary tree, tab-delimited.">CollatorSPnode::leafOutputTabs</a>(
<a name="l00608"></a>00608                     std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00609"></a>00609 <span class="keyword">    </span>{
<a name="l00610"></a>00610 
<a name="l00611"></a>00611         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00612"></a>00612 
<a name="l00613"></a>00613             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00614"></a>00614 
<a name="l00615"></a>00615             <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00616"></a>00616             os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00617"></a>00617             <span class="keywordtype">double</span> vol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00618"></a>00618             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00619"></a>00619             <span class="comment">// followed by the summary</span>
<a name="l00620"></a>00620             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00621"></a>00621             <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(); it&lt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(); it++) {
<a name="l00622"></a>00622                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*it);
<a name="l00623"></a>00623             }
<a name="l00624"></a>00624             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00625"></a>00625             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00626"></a>00626             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00627"></a>00627 
<a name="l00628"></a>00628                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00629"></a>00629                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00630"></a>00630             }
<a name="l00631"></a>00631 
<a name="l00632"></a>00632         }
<a name="l00633"></a>00633 
<a name="l00634"></a>00634     }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00637"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5">00637</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5" title="Output for for all leaves of a binary tree.">CollatorSPnode::leavesOutputTabs</a>(
<a name="l00638"></a>00638                             std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00639"></a>00639 <span class="keyword">    </span>{
<a name="l00640"></a>00640          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00641"></a>00641             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab2e1cd11ef3dd4424cf491e529ed0fd8" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l00642"></a>00642             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00643"></a>00643 
<a name="l00644"></a>00644         }
<a name="l00645"></a>00645 
<a name="l00646"></a>00646             <span class="comment">//recurse on the children</span>
<a name="l00647"></a>00647         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00648"></a>00648             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00649"></a>00649         }
<a name="l00650"></a>00650 
<a name="l00651"></a>00651         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00652"></a>00652             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00653"></a>00653         }
<a name="l00654"></a>00654 
<a name="l00655"></a>00655     }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657 
<a name="l00658"></a>00658     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00659"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122">00659</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122" title="Output for for all leaves of a binary tree.">CollatorSPnode::leavesAverageOutputTabs</a>(
<a name="l00660"></a>00660                             std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00661"></a>00661 <span class="keyword">    </span>{
<a name="l00662"></a>00662         <span class="comment">// uses  member function leafAverageOutputTabs for node output</span>
<a name="l00663"></a>00663         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00664"></a>00664             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a9fe7256f1a62884e4bb8599a63abbbdf" title="Output for a node in a binary tree, tab-delimited.">leafAverageOutputTabs</a>(os);
<a name="l00665"></a>00665             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00666"></a>00666         }
<a name="l00667"></a>00667             <span class="comment">//recurse on the children</span>
<a name="l00668"></a>00668         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00669"></a>00669             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(os);
<a name="l00670"></a>00670         }
<a name="l00671"></a>00671         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00672"></a>00672             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(os);
<a name="l00673"></a>00673         }
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675 
<a name="l00676"></a>00676     <span class="comment">// Print the details of a of a specific node in a subpaving</span>
<a name="l00677"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab58b8d4c3a8a879930da943dbe2dd62d">00677</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab58b8d4c3a8a879930da943dbe2dd62d" title="Output the details of a specific node.">CollatorSPnode::nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00678"></a>00678 <span class="keyword">    </span>{
<a name="l00679"></a>00679         <span class="comment">// output for box in form:</span>
<a name="l00680"></a>00680         <span class="comment">// box, volume, summary data</span>
<a name="l00681"></a>00681 
<a name="l00682"></a>00682         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00683"></a>00683 
<a name="l00684"></a>00684             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00685"></a>00685 
<a name="l00686"></a>00686             os &lt;&lt; <span class="stringliteral">&quot;Box is :&quot;</span>;
<a name="l00687"></a>00687 
<a name="l00688"></a>00688             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00689"></a>00689                 <span class="comment">// c-xsc default output for intervals</span>
<a name="l00690"></a>00690                 os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; thisBox[i];   }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692             os &lt;&lt; std::endl;
<a name="l00693"></a>00693             os &lt;&lt; <span class="stringliteral">&quot;Box volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt;&lt; std::endl;
<a name="l00694"></a>00694             os &lt;&lt; <span class="stringliteral">&quot;Summary data: &quot;</span> ;
<a name="l00695"></a>00695 
<a name="l00696"></a>00696             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00697"></a>00697             <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(); it&lt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(); it++) {
<a name="l00698"></a>00698                 os &lt;&lt; *it &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00699"></a>00699             }
<a name="l00700"></a>00700 
<a name="l00701"></a>00701             os &lt;&lt; std::endl;
<a name="l00702"></a>00702         }
<a name="l00703"></a>00703         <span class="keywordflow">return</span> os;
<a name="l00704"></a>00704 
<a name="l00705"></a>00705     }
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 
<a name="l00708"></a>00708     <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00709"></a>00709     <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00710"></a>00710     <span class="comment">// split the box in half normal to dimension set by comp</span>
<a name="l00711"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af0789230e2a9612f9b0644113e318f37">00711</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">CollatorSPnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l00712"></a>00712     {
<a name="l00713"></a>00713         <span class="keywordflow">try</span>
<a name="l00714"></a>00714         {
<a name="l00715"></a>00715             <span class="comment">// only do something if this CollatorSPnode is a leaf</span>
<a name="l00716"></a>00716             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00717"></a>00717                 <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00718"></a>00718                 ivector lC, rC;
<a name="l00719"></a>00719                 <span class="comment">// Call Lower() and Upper() to put split boxes</span>
<a name="l00720"></a>00720                 <span class="comment">// into lC and rC respectively</span>
<a name="l00721"></a>00721                 <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), lC, comp);
<a name="l00722"></a>00722                 <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rC, comp);
<a name="l00723"></a>00723 
<a name="l00724"></a>00724                 <span class="comment">// make and add the new children</span>
<a name="l00725"></a>00725                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00726"></a>00726                     lC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>));
<a name="l00727"></a>00727 
<a name="l00728"></a>00728                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l00729"></a>00729                     rC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>));
<a name="l00730"></a>00730 
<a name="l00731"></a>00731                 <span class="comment">//name the new children</span>
<a name="l00732"></a>00732                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00733"></a>00733                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00734"></a>00734 
<a name="l00735"></a>00735                 <span class="comment">// new children have summary from this</span>
<a name="l00736"></a>00736 
<a name="l00737"></a>00737             }
<a name="l00738"></a>00738         }
<a name="l00739"></a>00739 
<a name="l00740"></a>00740         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00741"></a>00741         {
<a name="l00742"></a>00742             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00743"></a>00743                 &lt;&lt; <span class="stringliteral">&quot;CollatorSPnode::nodeExpand()&quot;</span>
<a name="l00744"></a>00744                 &lt;&lt; std::endl;
<a name="l00745"></a>00745             <span class="keywordflow">throw</span>;
<a name="l00746"></a>00746         }
<a name="l00747"></a>00747 
<a name="l00748"></a>00748 
<a name="l00749"></a>00749     }
<a name="l00750"></a>00750 
<a name="l00751"></a>00751     <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00752"></a>00752     <span class="comment">// finds its own comp argument then calls nodeExpand(int comp)</span>
<a name="l00753"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5">00753</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">CollatorSPnode::nodeExpand</a>()
<a name="l00754"></a>00754     {
<a name="l00755"></a>00755         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00756"></a>00756         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00757"></a>00757         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l00758"></a>00758 
<a name="l00759"></a>00759     }
<a name="l00760"></a>00760 
<a name="l00761"></a>00761     <span class="comment">// nodeReabsorbChildren() can use the base class implementation</span>
<a name="l00762"></a>00762     <span class="comment">// (the summary for this will be correct so just delete the children ...)</span>
<a name="l00763"></a>00763 
<a name="l00764"></a>00764 
<a name="l00765"></a>00765     <span class="comment">// computes a minimal subpaving from two sibling subpavings</span>
<a name="l00766"></a>00766     <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l00767"></a>00767     <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l00768"></a>00768     <span class="comment">// and create summary data for new parent from children</span>
<a name="l00769"></a>00769     <span class="comment">// warning: nodeReunite would not normally be used with</span>
<a name="l00770"></a>00770     <span class="comment">// CollatorSPnodes but is in the base class and is</span>
<a name="l00771"></a>00771     <span class="comment">// reimplemented to try do it appropriately for this</span>
<a name="l00772"></a>00772     <span class="comment">// derived class should it be needed.</span>
<a name="l00773"></a>00773     <span class="comment">// This function is untested.</span>
<a name="l00774"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ace8192ce1536f578c73c7aa12bb49e35">00774</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ace8192ce1536f578c73c7aa12bb49e35" title="Try to reunite nodes to form one leaf.">CollatorSPnode::nodeReunite</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> *lChild,
<a name="l00775"></a>00775                                     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> *rChild)
<a name="l00776"></a>00776     <span class="comment">// lChild and rChild are the two subpavings to be reunited</span>
<a name="l00777"></a>00777     {
<a name="l00778"></a>00778         <span class="comment">// *this is the node which will become the parent</span>
<a name="l00779"></a>00779 
<a name="l00780"></a>00780         <span class="comment">// check that the labels match and exit if not</span>
<a name="l00781"></a>00781         <span class="keywordflow">if</span> ((lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> ) || (rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>)) {
<a name="l00782"></a>00782             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Labels do not match&quot;</span>);
<a name="l00783"></a>00783         }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785         <span class="comment">// if both subpavings are leaves and hull of boxes is x</span>
<a name="l00786"></a>00786         <span class="comment">// discard them: *this is a leaf</span>
<a name="l00787"></a>00787         <span class="keywordflow">if</span> (lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00788"></a>00788             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != (*(lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) |
<a name="l00789"></a>00789                             *(rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l00790"></a>00790                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes cannot be combined&quot;</span>);
<a name="l00791"></a>00791 
<a name="l00792"></a>00792             }
<a name="l00793"></a>00793             <span class="comment">// how many elements in the left child&#39;s summary</span>
<a name="l00794"></a>00794             <span class="keywordtype">size_t</span> n = (lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>).size();
<a name="l00795"></a>00795             <span class="comment">// elements in summary for each child should be same</span>
<a name="l00796"></a>00796             <span class="keywordflow">if</span> ((rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>).size() != n) {
<a name="l00797"></a>00797                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Summaries cannot be combined&quot;</span>);
<a name="l00798"></a>00798 
<a name="l00799"></a>00799             }
<a name="l00800"></a>00800 
<a name="l00801"></a>00801             <span class="keywordtype">size_t</span> i = 0;
<a name="l00802"></a>00802 
<a name="l00803"></a>00803             <span class="comment">// put into this summary the average of summary of children</span>
<a name="l00804"></a>00804             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00805"></a>00805                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.push_back(((lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l00806"></a>00806                                 +(rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i])/2.0);
<a name="l00807"></a>00807             }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809             <span class="comment">//discard the two subpavings given</span>
<a name="l00810"></a>00810             <span class="keyword">delete</span> lChild;
<a name="l00811"></a>00811             <span class="keyword">delete</span> rChild;
<a name="l00812"></a>00812 
<a name="l00813"></a>00813         }
<a name="l00814"></a>00814 
<a name="l00815"></a>00815         <span class="keywordflow">else</span> {  <span class="comment">// at least one child is not a leaf</span>
<a name="l00816"></a>00816             <span class="comment">// this has to adopt them rather than reuniting them</span>
<a name="l00817"></a>00817             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aca275f3faaa0170c0612f368bae4acdf" title="Builds a higher level of a tree from existing nodes. This adopts a left child rather than attempting ...">nodeAdoptLeft</a>(lChild);
<a name="l00818"></a>00818             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a324588afd881d4e695f42f4a286b33a7" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(rChild);
<a name="l00819"></a>00819             <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l00820"></a>00820         }
<a name="l00821"></a>00821     }
<a name="l00822"></a>00822 
<a name="l00823"></a>00823     <span class="comment">// graft lChild onto this node</span>
<a name="l00824"></a>00824     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l00825"></a>00825     <span class="comment">// takes care of the summary associated with lChild/its descendents</span>
<a name="l00826"></a>00826     <span class="comment">// used when we are building a collator statistical subpaving upwards</span>
<a name="l00827"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aca275f3faaa0170c0612f368bae4acdf">00827</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aca275f3faaa0170c0612f368bae4acdf" title="Builds a higher level of a tree from existing nodes. This adopts a left child rather than attempting ...">CollatorSPnode::nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> *lChild)
<a name="l00828"></a>00828     {
<a name="l00829"></a>00829         <span class="comment">// *this is the node which will become the parent</span>
<a name="l00830"></a>00830 
<a name="l00831"></a>00831         <span class="keywordtype">size_t</span> i = 0;
<a name="l00832"></a>00832 
<a name="l00833"></a>00833         <span class="keywordtype">size_t</span> n = (lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>).size();
<a name="l00834"></a>00834 
<a name="l00835"></a>00835         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.empty()) { <span class="comment">// no summary in this box already</span>
<a name="l00836"></a>00836             <span class="comment">// put into this summary 0.5* the summary of the new child</span>
<a name="l00837"></a>00837             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00838"></a>00838                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.push_back(0.5*(lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i]);
<a name="l00839"></a>00839             }
<a name="l00840"></a>00840         }
<a name="l00841"></a>00841         <span class="keywordflow">else</span> { <span class="comment">// has summary already</span>
<a name="l00842"></a>00842 
<a name="l00843"></a>00843             <span class="comment">// we have to make summary for this match</span>
<a name="l00844"></a>00844             <span class="comment">// that of the children</span>
<a name="l00845"></a>00845             <span class="comment">// number of elements in this summary should = child</span>
<a name="l00846"></a>00846             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size() != n) {
<a name="l00847"></a>00847                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Summaries do not match&quot;</span>);
<a name="l00848"></a>00848             }
<a name="l00849"></a>00849 
<a name="l00850"></a>00850             <span class="comment">// store current summary temporarily</span>
<a name="l00851"></a>00851             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp_summary = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00852"></a>00852 
<a name="l00853"></a>00853             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.clear();
<a name="l00854"></a>00854 
<a name="l00855"></a>00855             <span class="comment">// put into this summary the average of</span>
<a name="l00856"></a>00856             <span class="comment">// the summary of the new child and the old summary</span>
<a name="l00857"></a>00857             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00858"></a>00858                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.push_back(((lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l00859"></a>00859                                 + temp_summary[i])/2.0);
<a name="l00860"></a>00860             }
<a name="l00861"></a>00861         }
<a name="l00862"></a>00862 
<a name="l00863"></a>00863         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l00864"></a>00864         <span class="comment">// nodeAddLeft() checks labels, hull size, present children</span>
<a name="l00865"></a>00865         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(lChild);
<a name="l00866"></a>00866     }
<a name="l00867"></a>00867 
<a name="l00868"></a>00868     <span class="comment">// graft rChild onto this node</span>
<a name="l00869"></a>00869     <span class="comment">// rChild could be a leaf or a non-leaf</span>
<a name="l00870"></a>00870     <span class="comment">// takes care of the data associated with rChild/its descendents</span>
<a name="l00871"></a>00871     <span class="comment">// used when we are building a collator statistical subpaving upwards</span>
<a name="l00872"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a324588afd881d4e695f42f4a286b33a7">00872</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a324588afd881d4e695f42f4a286b33a7" title="Builds a higher level of a tree from existing nodes.">CollatorSPnode::nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> *rChild)
<a name="l00873"></a>00873     {
<a name="l00874"></a>00874         <span class="comment">// *this is the node which will become the parent</span>
<a name="l00875"></a>00875         <span class="keywordtype">size_t</span> i = 0;
<a name="l00876"></a>00876 
<a name="l00877"></a>00877         <span class="keywordtype">size_t</span> n = (rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>).size();
<a name="l00878"></a>00878 
<a name="l00879"></a>00879         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.empty()) { <span class="comment">// no summary in this box already</span>
<a name="l00880"></a>00880             <span class="comment">// put into this summary 0.5 * the summary of the new child</span>
<a name="l00881"></a>00881             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00882"></a>00882                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.push_back(0.5*(rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i]);
<a name="l00883"></a>00883             }
<a name="l00884"></a>00884         }
<a name="l00885"></a>00885         <span class="keywordflow">else</span> { <span class="comment">// has summary already</span>
<a name="l00886"></a>00886 
<a name="l00887"></a>00887             <span class="comment">// we have to make summary for this match</span>
<a name="l00888"></a>00888             <span class="comment">// that of the children</span>
<a name="l00889"></a>00889             <span class="comment">// number of elements in this summary should = child</span>
<a name="l00890"></a>00890             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size() != n) {
<a name="l00891"></a>00891                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Summaries do not match&quot;</span>);
<a name="l00892"></a>00892             }
<a name="l00893"></a>00893             <span class="comment">// store current summary temporarily</span>
<a name="l00894"></a>00894             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp_summary = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00895"></a>00895 
<a name="l00896"></a>00896             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.clear();
<a name="l00897"></a>00897 
<a name="l00898"></a>00898             <span class="comment">// put into this summary the average of the summary</span>
<a name="l00899"></a>00899             <span class="comment">// of the new child and the old summary</span>
<a name="l00900"></a>00900             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00901"></a>00901                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.push_back(((rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l00902"></a>00902                                 + temp_summary[i])/2.0);
<a name="l00903"></a>00903             }
<a name="l00904"></a>00904         }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l00907"></a>00907         <span class="comment">// nodeAddRight() checks labels, hull size, present children</span>
<a name="l00908"></a>00908         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(rChild);
<a name="l00909"></a>00909     }
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 
<a name="l00912"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437">00912</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437" title="Add two collator subpavings together.">CollatorSPnode::addPavings</a>(
<a name="l00913"></a>00913                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> lhs,
<a name="l00914"></a>00914                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs)
<a name="l00915"></a>00915     {
<a name="l00916"></a>00916         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newCollator = NULL;
<a name="l00917"></a>00917         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* temp = NULL;
<a name="l00918"></a>00918 
<a name="l00919"></a>00919         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00920"></a>00920 
<a name="l00921"></a>00921         <span class="keywordflow">try</span> {
<a name="l00922"></a>00922 
<a name="l00923"></a>00923             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// return null</span>
<a name="l00924"></a>00924 
<a name="l00925"></a>00925             <span class="comment">// if exactly one is null we can return a copy of the non-null one</span>
<a name="l00926"></a>00926             <span class="keywordflow">if</span> (!done &amp;&amp; lhs == NULL &amp;&amp; rhs != NULL) {
<a name="l00927"></a>00927 
<a name="l00928"></a>00928                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*rhs);
<a name="l00929"></a>00929                 done = <span class="keyword">true</span>;
<a name="l00930"></a>00930 
<a name="l00931"></a>00931             }
<a name="l00932"></a>00932             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs == NULL) {
<a name="l00933"></a>00933 
<a name="l00934"></a>00934                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*lhs);
<a name="l00935"></a>00935                 done = <span class="keyword">true</span>;
<a name="l00936"></a>00936             }
<a name="l00937"></a>00937             <span class="comment">// both not null</span>
<a name="l00938"></a>00938             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs != NULL) {
<a name="l00939"></a>00939 
<a name="l00940"></a>00940                 <span class="keywordflow">if</span> ((lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != NULL) &amp;&amp;
<a name="l00941"></a>00941                                 (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l00942"></a>00942                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l00943"></a>00943                 }
<a name="l00944"></a>00944 
<a name="l00945"></a>00945                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*lhs);
<a name="l00946"></a>00946                 temp = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*rhs);
<a name="l00947"></a>00947 
<a name="l00948"></a>00948                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(temp);
<a name="l00949"></a>00949                 <span class="keyword">delete</span> temp;
<a name="l00950"></a>00950                 temp = NULL;
<a name="l00951"></a>00951             }
<a name="l00952"></a>00952         }
<a name="l00953"></a>00953         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00954"></a>00954             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l00955"></a>00955                 <span class="keyword">delete</span> newCollator;
<a name="l00956"></a>00956                 newCollator = NULL;
<a name="l00957"></a>00957             }
<a name="l00958"></a>00958             <span class="keywordflow">if</span> (temp != NULL) {
<a name="l00959"></a>00959                 <span class="keyword">delete</span> temp;
<a name="l00960"></a>00960                 temp = NULL;
<a name="l00961"></a>00961             }
<a name="l00962"></a>00962             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPavings&quot;</span> &lt;&lt; endl;
<a name="l00963"></a>00963             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00964"></a>00964             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00965"></a>00965             <span class="keywordflow">throw</span>;
<a name="l00966"></a>00966         }
<a name="l00967"></a>00967         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00968"></a>00968             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l00969"></a>00969                 <span class="keyword">delete</span> newCollator;
<a name="l00970"></a>00970                 newCollator = NULL;
<a name="l00971"></a>00971             }
<a name="l00972"></a>00972             <span class="keywordflow">if</span> (temp != NULL) {
<a name="l00973"></a>00973                 <span class="keyword">delete</span> temp;
<a name="l00974"></a>00974                 temp = NULL;
<a name="l00975"></a>00975             }
<a name="l00976"></a>00976             <span class="keywordflow">throw</span>;
<a name="l00977"></a>00977         }
<a name="l00978"></a>00978 
<a name="l00979"></a>00979         <span class="keywordflow">return</span> newCollator;
<a name="l00980"></a>00980     }
<a name="l00981"></a>00981 
<a name="l00982"></a>00982 
<a name="l00983"></a>00983     <span class="comment">// subtract pavings</span>
<a name="l00984"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a79e263c5e6b22baeb2f4e543f33f6d5e">00984</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a79e263c5e6b22baeb2f4e543f33f6d5e" title="Subtract one collator subpavings from another together.">CollatorSPnode::subtractPavings</a>(
<a name="l00985"></a>00985                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> lhs,
<a name="l00986"></a>00986                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs, <span class="keywordtype">double</span> c)
<a name="l00987"></a>00987     {
<a name="l00988"></a>00988         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newCollator = NULL;
<a name="l00989"></a>00989 
<a name="l00990"></a>00990         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00991"></a>00991 
<a name="l00992"></a>00992         <span class="keywordflow">try</span> {
<a name="l00993"></a>00993 
<a name="l00994"></a>00994             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// return null</span>
<a name="l00995"></a>00995 
<a name="l00996"></a>00996             <span class="keywordflow">if</span> (!done &amp;&amp; lhs == NULL &amp;&amp; rhs != NULL) {
<a name="l00997"></a>00997 
<a name="l00998"></a>00998                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*rhs);
<a name="l00999"></a>00999                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3ba268993642c1fd5c702966a4fd4fba" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01000"></a>01000 
<a name="l01001"></a>01001                 done = <span class="keyword">true</span>;
<a name="l01002"></a>01002 
<a name="l01003"></a>01003             }
<a name="l01004"></a>01004             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs == NULL) {
<a name="l01005"></a>01005 
<a name="l01006"></a>01006                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*lhs);
<a name="l01007"></a>01007                 done = <span class="keyword">true</span>;
<a name="l01008"></a>01008             }
<a name="l01009"></a>01009             <span class="comment">// both not null</span>
<a name="l01010"></a>01010             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs != NULL) {
<a name="l01011"></a>01011 
<a name="l01012"></a>01012                 <span class="keywordflow">if</span> ((lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != NULL) &amp;&amp;
<a name="l01013"></a>01013                                 (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01014"></a>01014                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l01015"></a>01015                 }
<a name="l01016"></a>01016 
<a name="l01017"></a>01017                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*lhs);
<a name="l01018"></a>01018                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4" title="Incorporate negation of a Collator subpaving to this summmary.">addNegatedPaving</a>(rhs, c);  <span class="comment">// uses a temp copy of rhs</span>
<a name="l01019"></a>01019             }
<a name="l01020"></a>01020         }
<a name="l01021"></a>01021         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01022"></a>01022             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01023"></a>01023                 <span class="keyword">delete</span> newCollator;
<a name="l01024"></a>01024                 newCollator = NULL;
<a name="l01025"></a>01025             }
<a name="l01026"></a>01026             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPavings&quot;</span> &lt;&lt; endl;
<a name="l01027"></a>01027             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01028"></a>01028             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01029"></a>01029             <span class="keywordflow">throw</span>;
<a name="l01030"></a>01030         }
<a name="l01031"></a>01031         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01032"></a>01032             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01033"></a>01033                 <span class="keyword">delete</span> newCollator;
<a name="l01034"></a>01034                 newCollator = NULL;
<a name="l01035"></a>01035             }
<a name="l01036"></a>01036             <span class="keywordflow">throw</span>;
<a name="l01037"></a>01037         }
<a name="l01038"></a>01038 
<a name="l01039"></a>01039         <span class="keywordflow">return</span> newCollator;
<a name="l01040"></a>01040     }
<a name="l01041"></a>01041 
<a name="l01042"></a>01042 
<a name="l01043"></a>01043     <span class="comment">// make a tree which has the same structure as this tree but where the</span>
<a name="l01044"></a>01044     <span class="comment">// summary values are the difference between the summary values for this</span>
<a name="l01045"></a>01045     <span class="comment">// and the average summary value over the summary for this</span>
<a name="l01046"></a>01046     <span class="comment">// ie if this has summary &lt;h1..hn&gt; and the mean is h. then</span>
<a name="l01047"></a>01047     <span class="comment">// then the new summary becomes &lt;h1-h., .. Hn-h.&gt;</span>
<a name="l01048"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac1d9ea49286eb953b7bc71f89c15f8ec">01048</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac1d9ea49286eb953b7bc71f89c15f8ec" title="Make a tree which holds differences of this to avg over this.">CollatorSPnode::makeDifferencesToAveragePaving</a>()<span class="keyword"> const</span>
<a name="l01049"></a>01049 <span class="keyword">    </span>{
<a name="l01050"></a>01050         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newCollator = NULL;
<a name="l01051"></a>01051         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* avg = NULL;
<a name="l01052"></a>01052 
<a name="l01053"></a>01053         <span class="keywordflow">try</span> {
<a name="l01054"></a>01054 
<a name="l01055"></a>01055             avg = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">makeAverageCollation</a>(); <span class="comment">// must delete at end!</span>
<a name="l01056"></a>01056 
<a name="l01057"></a>01057             newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(*<span class="keyword">this</span>);
<a name="l01058"></a>01058 
<a name="l01059"></a>01059             newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a1a3e5a8c9c81e4f3b307360c2c495" title="make this the root of a tree representing summary differences">dotDiffPaving</a>(avg);
<a name="l01060"></a>01060 
<a name="l01061"></a>01061             <span class="keyword">delete</span> avg;
<a name="l01062"></a>01062             avg = NULL;
<a name="l01063"></a>01063         }
<a name="l01064"></a>01064         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01065"></a>01065             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01066"></a>01066                 <span class="keyword">delete</span> newCollator;
<a name="l01067"></a>01067                 newCollator = NULL;
<a name="l01068"></a>01068             }
<a name="l01069"></a>01069             <span class="keywordflow">if</span> (avg != NULL) {
<a name="l01070"></a>01070                 <span class="keyword">delete</span> avg;
<a name="l01071"></a>01071                 avg = NULL;
<a name="l01072"></a>01072             }
<a name="l01073"></a>01073             std::cerr
<a name="l01074"></a>01074                 &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in makeDifferencesToAveragePavings&quot;</span>
<a name="l01075"></a>01075                 &lt;&lt; endl;
<a name="l01076"></a>01076             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01077"></a>01077             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01078"></a>01078             <span class="keywordflow">throw</span>;
<a name="l01079"></a>01079         }
<a name="l01080"></a>01080         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01081"></a>01081             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01082"></a>01082                 <span class="keyword">delete</span> newCollator;
<a name="l01083"></a>01083                 newCollator = NULL;
<a name="l01084"></a>01084             }
<a name="l01085"></a>01085             <span class="keywordflow">if</span> (avg != NULL) {
<a name="l01086"></a>01086                 <span class="keyword">delete</span> avg;
<a name="l01087"></a>01087                 avg = NULL;
<a name="l01088"></a>01088             }
<a name="l01089"></a>01089             <span class="keywordflow">throw</span>;
<a name="l01090"></a>01090         }
<a name="l01091"></a>01091 
<a name="l01092"></a>01092         <span class="keywordflow">return</span> newCollator;
<a name="l01093"></a>01093     }
<a name="l01094"></a>01094 
<a name="l01095"></a>01095     <span class="comment">// get the sum of the variances of a scalar summary.</span>
<a name="l01096"></a>01096     <span class="comment">// the variance of the scalar summary of one of the collated subpaving trees </span>
<a name="l01097"></a>01097     <span class="comment">// is the square of the sum of the &#39;areas&#39; of difference between that collated</span>
<a name="l01098"></a>01098     <span class="comment">// subpaving tree and the average subpaving tree over the collation,</span>
<a name="l01099"></a>01099     <span class="comment">// where &#39;area&#39; is summary value * node volume</span>
<a name="l01100"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a700f585b2b61663330b999f459045822">01100</a>     real <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a700f585b2b61663330b999f459045822" title="Sum of variances of a scalar value.">CollatorSPnode::getSumVarsAreaScalar</a>()<span class="keyword"> const</span>
<a name="l01101"></a>01101 <span class="keyword">    </span>{
<a name="l01102"></a>01102         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* differences = NULL;
<a name="l01103"></a>01103         dotprecision accSquares(0.0);
<a name="l01104"></a>01104 
<a name="l01105"></a>01105         <span class="comment">// take this collation</span>
<a name="l01106"></a>01106         <span class="keywordflow">try</span> {
<a name="l01107"></a>01107             <span class="comment">// make a tree of differences between this and average over this</span>
<a name="l01108"></a>01108             differences = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac1d9ea49286eb953b7bc71f89c15f8ec" title="Make a tree which holds differences of this to avg over this.">makeDifferencesToAveragePaving</a>();
<a name="l01109"></a>01109 
<a name="l01110"></a>01110             <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size(); <span class="comment">//also the number of collations? </span>
<a name="l01111"></a>01111             dotprecision emptyDP(0.0);
<a name="l01112"></a>01112             <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> areaAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l01113"></a>01113 
<a name="l01114"></a>01114             areaAcc = differences-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5ac89a38985d8ff62ca7a29943c6734c" title="Add to the accumulation of absolute areas for leaf nodes.">getLeafNodeAbsAreaAccumulations</a>(areaAcc);
<a name="l01115"></a>01115 
<a name="l01116"></a>01116             <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l01117"></a>01117             <span class="keywordflow">for</span> (it = areaAcc.begin(); it &lt; areaAcc.end(); it++) {
<a name="l01118"></a>01118           <span class="comment">// add rnd(*it) times rnd(*it) to accSquares</span>
<a name="l01119"></a>01119                 cxsc::accumulate(accSquares, rnd(*it), rnd(*it)); <span class="comment">// round to nearest</span>
<a name="l01120"></a>01120             }
<a name="l01121"></a>01121 
<a name="l01122"></a>01122             <span class="keyword">delete</span> differences;
<a name="l01123"></a>01123             differences = NULL;
<a name="l01124"></a>01124         }
<a name="l01125"></a>01125         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01126"></a>01126             <span class="keywordflow">if</span> (NULL != differences) {
<a name="l01127"></a>01127                 <span class="keyword">delete</span> differences;
<a name="l01128"></a>01128                 differences = NULL;
<a name="l01129"></a>01129             }
<a name="l01130"></a>01130             <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01131"></a>01131             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.&quot;</span>;
<a name="l01132"></a>01132             msg += <span class="stringliteral">&quot; Orginal error: &quot;</span> + oldmsg;
<a name="l01133"></a>01133             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(msg);
<a name="l01134"></a>01134         }
<a name="l01135"></a>01135         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01136"></a>01136             <span class="keywordflow">if</span> (NULL != differences) {
<a name="l01137"></a>01137                 <span class="keyword">delete</span> differences;
<a name="l01138"></a>01138                 differences = NULL;
<a name="l01139"></a>01139             }
<a name="l01140"></a>01140             <span class="keywordflow">throw</span>;
<a name="l01141"></a>01141         }
<a name="l01142"></a>01142 
<a name="l01143"></a>01143         <span class="comment">// return sum of squared sum of areas of difference</span>
<a name="l01144"></a>01144         <span class="keywordflow">return</span> rnd(accSquares); <span class="comment">// CXSC round nearest</span>
<a name="l01145"></a>01145 
<a name="l01146"></a>01146     }
<a name="l01147"></a>01147 
<a name="l01148"></a>01148     <span class="comment">// get the sum of the variances of a scalar summary where the scalar</span>
<a name="l01149"></a>01149     <span class="comment">// summary for one of the collated histograms is the total value of the</span>
<a name="l01150"></a>01150     <span class="comment">// summary values for that histogram over all the leaf nodes.</span>
<a name="l01151"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a4c623e6456d3ced424aebba699c33fd9">01151</a>     real <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a4c623e6456d3ced424aebba699c33fd9" title="Sum of variances of a scalar value.">CollatorSPnode::getSumVarsTotalSummarisedValueScalar</a>()<span class="keyword"> const</span>
<a name="l01152"></a>01152 <span class="keyword">    </span>{
<a name="l01153"></a>01153         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* average = NULL;
<a name="l01154"></a>01154         dotprecision accSqrdDiffSumSummary(0.0);
<a name="l01155"></a>01155 
<a name="l01156"></a>01156         <span class="comment">// take this collation</span>
<a name="l01157"></a>01157         <span class="keywordflow">try</span> {
<a name="l01158"></a>01158             <span class="comment">// make a tree of the averages</span>
<a name="l01159"></a>01159             average = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">makeAverageCollation</a>();
<a name="l01160"></a>01160 
<a name="l01161"></a>01161             <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size();
<a name="l01162"></a>01162             dotprecision emptyDP(0.0);
<a name="l01163"></a>01163             <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> summAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l01164"></a>01164 
<a name="l01165"></a>01165             <span class="comment">// the accumulated summaries for this collation</span>
<a name="l01166"></a>01166             summAcc = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c566a24d35898fb54133cf310276468" title="Get the accumulations of summary values for leaf nodes.">getLeafNodeSummaryAccumulations</a>(summAcc);
<a name="l01167"></a>01167 
<a name="l01168"></a>01168             <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> avAcc(1, emptyDP); <span class="comment">// only 1 value in av summaries</span>
<a name="l01169"></a>01169             avAcc = average-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7daf828f08626b5b83654550e5a98bee" title="Add to accumulation of summary values for leaf nodes.">getLeafNodeSummaryAccumulations</a>(avAcc);
<a name="l01170"></a>01170 
<a name="l01171"></a>01171             <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l01172"></a>01172             <span class="keywordflow">for</span> (it = summAcc.begin(); it &lt; summAcc.end(); it++) {
<a name="l01173"></a>01173 
<a name="l01174"></a>01174                 real diffsumsummary = rnd((*it)) - rnd(avAcc[0]); <span class="comment">// rnd nearest</span>
<a name="l01175"></a>01175                 cxsc::accumulate(accSqrdDiffSumSummary, diffsumsummary,
<a name="l01176"></a>01176                                                 diffsumsummary); <span class="comment">// acc squares</span>
<a name="l01177"></a>01177             }
<a name="l01178"></a>01178 
<a name="l01179"></a>01179             <span class="keyword">delete</span> average;
<a name="l01180"></a>01180             average = NULL;
<a name="l01181"></a>01181         }
<a name="l01182"></a>01182         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01183"></a>01183             <span class="keywordflow">if</span> (NULL != average) {
<a name="l01184"></a>01184                 <span class="keyword">delete</span> average;
<a name="l01185"></a>01185                 average = NULL;
<a name="l01186"></a>01186             }
<a name="l01187"></a>01187             <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01188"></a>01188             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.&quot;</span>;
<a name="l01189"></a>01189             msg += <span class="stringliteral">&quot; Orginal error: &quot;</span> + oldmsg;
<a name="l01190"></a>01190             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(msg);
<a name="l01191"></a>01191         }
<a name="l01192"></a>01192         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01193"></a>01193             <span class="keywordflow">if</span> (NULL != average) {
<a name="l01194"></a>01194                 <span class="keyword">delete</span> average;
<a name="l01195"></a>01195                 average = NULL;
<a name="l01196"></a>01196             }
<a name="l01197"></a>01197             <span class="keywordflow">throw</span>;
<a name="l01198"></a>01198         }
<a name="l01199"></a>01199 
<a name="l01200"></a>01200         <span class="comment">// return sum of squared sum of areas of difference</span>
<a name="l01201"></a>01201         <span class="keywordflow">return</span> rnd(accSqrdDiffSumSummary); <span class="comment">// CXSC round nearest</span>
<a name="l01202"></a>01202 
<a name="l01203"></a>01203     }
<a name="l01204"></a>01204 
<a name="l01205"></a>01205 
<a name="l01206"></a>01206     <span class="comment">// incorporate a subpaving to this summmary,</span>
<a name="l01207"></a>01207     <span class="comment">// adjusts this summary for the contents of the subpaving added</span>
<a name="l01208"></a>01208     <span class="comment">// have not specifed const data for the CollatorSPnode pointer,</span>
<a name="l01209"></a>01209     <span class="comment">// because if we do that we can&#39;t expand it</span>
<a name="l01210"></a>01210     <span class="comment">// but note that the CollatorSPnode passed in CAN BE ALTERED</span>
<a name="l01211"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177">01211</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">CollatorSPnode::addPaving</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> spn)
<a name="l01212"></a>01212     {
<a name="l01213"></a>01213 
<a name="l01214"></a>01214         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01215"></a>01215         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;  <span class="comment">// indicator for done adding</span>
<a name="l01216"></a>01216 
<a name="l01217"></a>01217         <span class="keywordflow">try</span> {
<a name="l01218"></a>01218 
<a name="l01219"></a>01219             <span class="keywordflow">if</span> (spn == NULL) {
<a name="l01220"></a>01220                 done = <span class="keyword">true</span>;
<a name="l01221"></a>01221 
<a name="l01222"></a>01222             }
<a name="l01223"></a>01223 
<a name="l01224"></a>01224             <span class="comment">// if the boxes are not the same we can&#39;t do anything</span>
<a name="l01225"></a>01225             <span class="keywordflow">if</span> (!done &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) &amp;&amp; (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01226"></a>01226                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l01227"></a>01227             }
<a name="l01228"></a>01228 
<a name="l01229"></a>01229             <span class="comment">// if this has no box yet it has not incorporated anything</span>
<a name="l01230"></a>01230             <span class="comment">// and so we just use spn to construct this</span>
<a name="l01231"></a>01231             <span class="keywordflow">if</span> (!done &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> == NULL)) {
<a name="l01232"></a>01232 
<a name="l01233"></a>01233                 ivector v = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01234"></a>01234 
<a name="l01235"></a>01235                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(v);
<a name="l01236"></a>01236                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1;
<a name="l01237"></a>01237                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l01238"></a>01238 
<a name="l01239"></a>01239                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a> = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l01240"></a>01240 
<a name="l01241"></a>01241                 <span class="comment">//recursion on the children</span>
<a name="l01242"></a>01242                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l01243"></a>01243                     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l01244"></a>01244                         *(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l01245"></a>01245 
<a name="l01246"></a>01246                 }
<a name="l01247"></a>01247                 <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l01248"></a>01248 
<a name="l01249"></a>01249                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l01250"></a>01250                     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(
<a name="l01251"></a>01251                         *(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l01252"></a>01252                  }
<a name="l01253"></a>01253                 <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l01254"></a>01254 
<a name="l01255"></a>01255                 done = <span class="keyword">true</span>;
<a name="l01256"></a>01256                 retValue = <span class="keyword">true</span>;
<a name="l01257"></a>01257 
<a name="l01258"></a>01258             } <span class="comment">// end if theBox==NULL</span>
<a name="l01259"></a>01259 
<a name="l01260"></a>01260             <span class="comment">// do the rest only if done is not true</span>
<a name="l01261"></a>01261 
<a name="l01262"></a>01262             <span class="comment">// if this is a leaf and the paving to be added is a leaf,</span>
<a name="l01263"></a>01263             <span class="comment">// this just sucks in the counter from spn</span>
<a name="l01264"></a>01264             <span class="keywordflow">if</span> (!done &amp;&amp; !done &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01265"></a>01265 
<a name="l01266"></a>01266                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
<a name="l01267"></a>01267                 <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.insert(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), temp.begin(),temp.end());
<a name="l01268"></a>01268                 done = <span class="keyword">true</span>;
<a name="l01269"></a>01269                 retValue = <span class="keyword">true</span>;
<a name="l01270"></a>01270 
<a name="l01271"></a>01271             }
<a name="l01272"></a>01272 
<a name="l01273"></a>01273             <span class="comment">// else not done and not both leaves,</span>
<a name="l01274"></a>01274             <span class="comment">// if this is not a leaf or the paving to be added</span>
<a name="l01275"></a>01275             <span class="comment">// is not a leaf, we may need to split</span>
<a name="l01276"></a>01276             <span class="comment">// and we will need to recurse further</span>
<a name="l01277"></a>01277             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!done &amp;&amp; (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() || !(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()))) {
<a name="l01278"></a>01278 
<a name="l01279"></a>01279                 <span class="comment">// if this is leaf and spn not we need to split this</span>
<a name="l01280"></a>01280                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// so spn can&#39;t be a leaf</span>
<a name="l01281"></a>01281 
<a name="l01282"></a>01282                     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">nodeExpand</a>();
<a name="l01283"></a>01283                 }
<a name="l01284"></a>01284 
<a name="l01285"></a>01285                 <span class="comment">// if spn is leaf and this is not we need to split spn</span>
<a name="l01286"></a>01286                 <span class="comment">// THIS WILL CHANGE the CollatorSPnode pointed to by spn</span>
<a name="l01287"></a>01287 
<a name="l01288"></a>01288                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// so this can&#39;t be a leaf</span>
<a name="l01289"></a>01289 
<a name="l01290"></a>01290                     spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af0789230e2a9612f9b0644113e318f37" title="Expand leaf node to make two more leaves as children and copy summary down to the children...">nodeExpand</a>();
<a name="l01291"></a>01291 
<a name="l01292"></a>01292                 }
<a name="l01293"></a>01293 
<a name="l01294"></a>01294                 <span class="comment">// put in the data</span>
<a name="l01295"></a>01295                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
<a name="l01296"></a>01296                     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.insert(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), temp.begin(),temp.end());
<a name="l01297"></a>01297 
<a name="l01298"></a>01298                 <span class="comment">// if they are were neither leaves originally</span>
<a name="l01299"></a>01299                 <span class="comment">// we go straight on to recursing with the children</span>
<a name="l01300"></a>01300                 <span class="comment">// otherwise expansions above are followed by recursion</span>
<a name="l01301"></a>01301 
<a name="l01302"></a>01302                 <span class="comment">// recurse with children</span>
<a name="l01303"></a>01303                 retValue = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01304"></a>01304                 retValue = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01305"></a>01305 
<a name="l01306"></a>01306             } <span class="comment">// end of dealing with case where at least one is not a leaf</span>
<a name="l01307"></a>01307         }
<a name="l01308"></a>01308         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01309"></a>01309             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPaving&quot;</span> &lt;&lt; endl;
<a name="l01310"></a>01310             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01311"></a>01311             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01312"></a>01312             <span class="keywordflow">throw</span>;
<a name="l01313"></a>01313         }
<a name="l01314"></a>01314 
<a name="l01315"></a>01315         <span class="keywordflow">return</span> retValue;
<a name="l01316"></a>01316     }
<a name="l01317"></a>01317 
<a name="l01318"></a>01318     <span class="comment">// incorporate the negative of a subpaving to this summmary,</span>
<a name="l01319"></a>01319     <span class="comment">// adjusts this summary for the contents of the subpaving added</span>
<a name="l01320"></a>01320     <span class="comment">// have not specifed const data for the CollatorSPnode pointer,</span>
<a name="l01321"></a>01321     <span class="comment">// because if we do that we can&#39;t expand it</span>
<a name="l01322"></a>01322     <span class="comment">// but note that the CollatorSPnode passed in CAN BE ALTERED</span>
<a name="l01323"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4">01323</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4" title="Incorporate negation of a Collator subpaving to this summmary.">CollatorSPnode::addNegatedPaving</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">double</span> c)
<a name="l01324"></a>01324     {
<a name="l01325"></a>01325         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* temp = NULL;
<a name="l01326"></a>01326 
<a name="l01327"></a>01327         <span class="keywordflow">try</span> {
<a name="l01328"></a>01328             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* temp = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a> (*spn);
<a name="l01329"></a>01329 
<a name="l01330"></a>01330             <span class="comment">// negate the node passed in</span>
<a name="l01331"></a>01331             temp-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3ba268993642c1fd5c702966a4fd4fba" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01332"></a>01332 
<a name="l01333"></a>01333             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(temp);
<a name="l01334"></a>01334 
<a name="l01335"></a>01335             <span class="keyword">delete</span> temp;
<a name="l01336"></a>01336         }
<a name="l01337"></a>01337         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01338"></a>01338             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addNegatedPaving&quot;</span> &lt;&lt; endl;
<a name="l01339"></a>01339             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01340"></a>01340             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01341"></a>01341             <span class="keywordflow">throw</span>;
<a name="l01342"></a>01342         }
<a name="l01343"></a>01343     }
<a name="l01344"></a>01344 
<a name="l01345"></a>01345    <span class="comment">//---removed then reinserted</span>
<a name="l01346"></a>01346    <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l01347"></a>01347     <span class="comment">// the sum of the summary is printed out</span>
<a name="l01348"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0ea530d232bf3bb09e6cf44eeeadbfde">01348</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0ea530d232bf3bb09e6cf44eeeadbfde" title="Output for a node in a binary tree, tab-delimited.">CollatorSPnode::leafAccumulationOutputTabs</a>(
<a name="l01349"></a>01349                     std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01350"></a>01350 <span class="keyword">    </span>{
<a name="l01351"></a>01351 
<a name="l01352"></a>01352         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l01353"></a>01353             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l01354"></a>01354             <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l01355"></a>01355           os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l01356"></a>01356           <span class="keywordtype">double</span> vol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l01357"></a>01357             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l01358"></a>01358            <span class="comment">// followed by the sum of the summary        </span>
<a name="l01359"></a>01359         os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a812d98c784af382c4a697555a7b0445f">nodeAccumulation</a>();
<a name="l01360"></a>01360 
<a name="l01361"></a>01361             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l01362"></a>01362             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l01363"></a>01363             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l01364"></a>01364                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l01365"></a>01365                    &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l01366"></a>01366             }
<a name="l01367"></a>01367         }
<a name="l01368"></a>01368     }
<a name="l01369"></a>01369 
<a name="l01370"></a>01370     <span class="comment">// find the accumulated summary for a node</span>
<a name="l01371"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a812d98c784af382c4a697555a7b0445f">01371</a>     real <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a812d98c784af382c4a697555a7b0445f">CollatorSPnode::nodeAccumulation</a>()<span class="keyword"> const</span>
<a name="l01372"></a>01372 <span class="keyword">    </span>{
<a name="l01373"></a>01373       dotprecision dpSumm;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l01374"></a>01374       dpSumm=0.0;
<a name="l01375"></a>01375     <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l01376"></a>01376       <span class="comment">// should change this to use for_each</span>
<a name="l01377"></a>01377             <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(); it&lt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(); it++) {
<a name="l01378"></a>01378            accumulate(dpSumm, (*it), 1.0);
<a name="l01379"></a>01379             }
<a name="l01380"></a>01380         real summ = rnd(dpSumm);
<a name="l01381"></a>01381             <span class="keywordflow">return</span> summ;
<a name="l01382"></a>01382     }
<a name="l01383"></a>01383       
<a name="l01384"></a>01384      <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l01385"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2">01385</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2" title="Output for for all leaves of a binary tree.">CollatorSPnode::leavesAccumulationOutputTabs</a>(
<a name="l01386"></a>01386                              std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01387"></a>01387 <span class="keyword">     </span>{
<a name="l01388"></a>01388          <span class="comment">// uses  member function leafAccumulationOutputTabs for nodes</span>
<a name="l01389"></a>01389          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01390"></a>01390              <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0ea530d232bf3bb09e6cf44eeeadbfde" title="Output for a node in a binary tree, tab-delimited.">leafAccumulationOutputTabs</a>(os);
<a name="l01391"></a>01391              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l01392"></a>01392  
<a name="l01393"></a>01393          }
<a name="l01394"></a>01394  
<a name="l01395"></a>01395              <span class="comment">//recurse on the children</span>
<a name="l01396"></a>01396          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01397"></a>01397              <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(os);
<a name="l01398"></a>01398          }
<a name="l01399"></a>01399  
<a name="l01400"></a>01400          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01401"></a>01401              <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(os);
<a name="l01402"></a>01402          }
<a name="l01403"></a>01403  
<a name="l01404"></a>01404      }
<a name="l01405"></a>01405  
<a name="l01406"></a>01406 <span class="comment">//---gloria&#39;s additions------------------------//</span>
<a name="l01407"></a>01407 <span class="comment">// Change the summary of the nodes</span>
<a name="l01408"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#acdad2b87cf5f979fb24a7aef392a5895">01408</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#acdad2b87cf5f979fb24a7aef392a5895">CollatorSPnode::leafMakeNewFhat</a>(<span class="keywordtype">double</span> wt, std::vector&lt;double&gt; &amp; fhatNew) 
<a name="l01409"></a>01409 {
<a name="l01410"></a>01410    <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l01411"></a>01411       <span class="keywordtype">double</span> summ = 0;
<a name="l01412"></a>01412       <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l01413"></a>01413       summ = accumulate(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(), <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), summ);
<a name="l01414"></a>01414       <span class="keywordtype">double</span> av =  summ/(1.0*<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size());          
<a name="l01415"></a>01415     fhatNew.push_back((1-wt)*av + wt);
<a name="l01416"></a>01416   } 
<a name="l01417"></a>01417 }
<a name="l01418"></a>01418    
<a name="l01419"></a>01419 <span class="comment">//Change the summary of the nodes</span>
<a name="l01420"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">01420</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">CollatorSPnode::leavesMakeNewFhat</a>(<span class="keywordtype">double</span> wt, std::vector&lt;double&gt; &amp; fhatNew)
<a name="l01421"></a>01421 {
<a name="l01422"></a>01422    <span class="comment">// uses  member function leafMakeNewFhat for nodes</span>
<a name="l01423"></a>01423    <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01424"></a>01424       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#acdad2b87cf5f979fb24a7aef392a5895">leafMakeNewFhat</a>(wt, fhatNew);       
<a name="l01425"></a>01425    }
<a name="l01426"></a>01426  
<a name="l01427"></a>01427    <span class="comment">//recurse on the children</span>
<a name="l01428"></a>01428    <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01429"></a>01429       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">leavesMakeNewFhat</a>(wt, fhatNew);
<a name="l01430"></a>01430    }
<a name="l01431"></a>01431  
<a name="l01432"></a>01432   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01433"></a>01433       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">leavesMakeNewFhat</a>(wt, fhatNew);
<a name="l01434"></a>01434    }
<a name="l01435"></a>01435 }
<a name="l01436"></a>01436  
<a name="l01437"></a>01437     <span class="comment">// return a reference to a container of CollatorSnodes</span>
<a name="l01438"></a>01438     <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l01439"></a>01439     <span class="comment">// left to right order</span>
<a name="l01440"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">01440</a>     std::vector&lt;CollatorSPnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">CollatorSPnode::getLeaves</a>(std::vector&lt;CollatorSPnode*&gt;&amp; leaves)<span class="keyword"> const</span>
<a name="l01441"></a>01441 <span class="keyword">    </span>{
<a name="l01442"></a>01442         <span class="comment">//if children, recurse on the children</span>
<a name="l01443"></a>01443         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01444"></a>01444             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves);
<a name="l01445"></a>01445         }
<a name="l01446"></a>01446 
<a name="l01447"></a>01447         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01448"></a>01448             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves);
<a name="l01449"></a>01449         }
<a name="l01450"></a>01450 
<a name="l01451"></a>01451         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l01452"></a>01452             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01453"></a>01453             leaves.push_back(const_cast&lt;CollatorSPnode*&gt;(<span class="keyword">this</span>));
<a name="l01454"></a>01454         }
<a name="l01455"></a>01455         <span class="keywordflow">return</span> leaves;
<a name="l01456"></a>01456     }
<a name="l01457"></a>01457     
<a name="l01458"></a>01458    
<a name="l01459"></a>01459     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l01460"></a>01460     <span class="comment">// contents being all the nodes in left to right order</span>
<a name="l01461"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7fa06e6f1d278157e7c5c6a9d44e2c07">01461</a>     std::vector&lt;CollatorSPnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7fa06e6f1d278157e7c5c6a9d44e2c07">CollatorSPnode::getAllNodes</a>(vector&lt;CollatorSPnode*&gt;&amp; allNodes)<span class="keyword"> const</span>
<a name="l01462"></a>01462 <span class="keyword">    </span>{
<a name="l01463"></a>01463         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { <span class="comment">// this is not empty</span>
<a name="l01464"></a>01464       <span class="comment">//if (!hasLCwithBox() &amp;&amp; !hasRCwithBox()) { // this is a leaf</span>
<a name="l01465"></a>01465             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01466"></a>01466         <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l01467"></a>01467             allNodes.push_back(const_cast&lt;CollatorSPnode*&gt;(<span class="keyword">this</span>));
<a name="l01468"></a>01468         }
<a name="l01469"></a>01469       
<a name="l01470"></a>01470       <span class="comment">//if children, recurse on the children</span>
<a name="l01471"></a>01471         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01472"></a>01472             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7fa06e6f1d278157e7c5c6a9d44e2c07">getAllNodes</a>(allNodes);
<a name="l01473"></a>01473         }
<a name="l01474"></a>01474 
<a name="l01475"></a>01475         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01476"></a>01476             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a7fa06e6f1d278157e7c5c6a9d44e2c07">getAllNodes</a>(allNodes);
<a name="l01477"></a>01477         }       
<a name="l01478"></a>01478         <span class="keywordflow">return</span> allNodes;
<a name="l01479"></a>01479    }
<a name="l01480"></a>01480    
<a name="l01481"></a>01481    
<a name="l01482"></a>01482     <span class="comment">// totalise the summaries in the collator node</span>
<a name="l01483"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33">01483</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33" title="Total the summaries from this node downwards.">CollatorSPnode::totaliseSummaries</a>()
<a name="l01484"></a>01484     {
<a name="l01485"></a>01485     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size() &gt; 1) {
<a name="l01486"></a>01486       <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> tmp;
<a name="l01487"></a>01487       tmp.push_back(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">getTotalSummary</a>());
<a name="l01488"></a>01488       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.swap(tmp);
<a name="l01489"></a>01489     }
<a name="l01490"></a>01490     
<a name="l01491"></a>01491     <span class="comment">//recursion on the children</span>
<a name="l01492"></a>01492     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01493"></a>01493       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33" title="Total the summaries from this node downwards.">totaliseSummaries</a>();
<a name="l01494"></a>01494     }
<a name="l01495"></a>01495 
<a name="l01496"></a>01496     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01497"></a>01497       <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33" title="Total the summaries from this node downwards.">totaliseSummaries</a>();
<a name="l01498"></a>01498     }
<a name="l01499"></a>01499    }
<a name="l01500"></a>01500 
<a name="l01501"></a>01501   <span class="comment">// Marginalise, internal version</span>
<a name="l01502"></a>01502     <span class="comment">// marginalise from given node downwards</span>
<a name="l01503"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9">01503</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9" title="Make a marginalised version of a given node.">CollatorSPnode::_marginalise</a>(
<a name="l01504"></a>01504       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs,
<a name="l01505"></a>01505       <span class="keyword">const</span> std::vector&lt;int&gt;&amp; outDims)
<a name="l01506"></a>01506     {
<a name="l01507"></a>01507     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* marginal = NULL;
<a name="l01508"></a>01508     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * newRC = NULL;
<a name="l01509"></a>01509     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * newLC = NULL;
<a name="l01510"></a>01510         
<a name="l01511"></a>01511     <span class="keywordflow">try</span> {
<a name="l01512"></a>01512       
<a name="l01513"></a>01513       <span class="keywordflow">if</span> (rhs != NULL ) { <span class="comment">// if NULL we just return NULL</span>
<a name="l01514"></a>01514               
<a name="l01515"></a>01515         ivector box = rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01516"></a>01516         <span class="comment">// will throw an exception if there is no box</span>
<a name="l01517"></a>01517         <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l01518"></a>01518         <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l01519"></a>01519         
<a name="l01520"></a>01520         <span class="keywordtype">int</span> splitDim = rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab374777116b7e0af8e7100f303e1f97b" title="Find the dimension a node split on.">getSplitDim</a>();
<a name="l01521"></a>01521         
<a name="l01522"></a>01522         <span class="comment">// deal with children first</span>
<a name="l01523"></a>01523         <span class="keywordflow">if</span> (!rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01524"></a>01524                               
<a name="l01525"></a>01525           newRC = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9" title="Make a marginalised version of a given node.">_marginalise</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>(), outDims);
<a name="l01526"></a>01526           newLC = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9" title="Make a marginalised version of a given node.">_marginalise</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>(), outDims);
<a name="l01527"></a>01527         
<a name="l01528"></a>01528         } <span class="comment">// end isLeaf()</span>
<a name="l01529"></a>01529         
<a name="l01530"></a>01530         <span class="comment">// now deal with this node itself</span>
<a name="l01531"></a>01531         <span class="comment">// if rhs a leaf, or did not split on any of the given dimensions</span>
<a name="l01532"></a>01532         <span class="comment">// make a node that contracts rhs</span>
<a name="l01533"></a>01533         
<a name="l01534"></a>01534         <span class="comment">// iterator to vector element:</span>
<a name="l01535"></a>01535         std::vector&lt;int&gt;::const_iterator found 
<a name="l01536"></a>01536             = find (outDims.begin(), outDims.end(), splitDim);
<a name="l01537"></a>01537         
<a name="l01538"></a>01538         <span class="keywordflow">if</span> (found &lt; outDims.end()) { <span class="comment">// split on one of the outDims</span>
<a name="l01539"></a>01539           <span class="comment">// so this will become the result of adding together</span>
<a name="l01540"></a>01540           <span class="comment">// the two new children</span>
<a name="l01541"></a>01541           marginal = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437" title="Add two collator subpavings together.">addPavings</a>(newRC, newLC);
<a name="l01542"></a>01542           <span class="comment">// addPavings takes copies of the nodes to be added</span>
<a name="l01543"></a>01543           <span class="comment">// so we need to destroy these ones</span>
<a name="l01544"></a>01544           <span class="keyword">delete</span> newRC;
<a name="l01545"></a>01545           newRC = NULL;
<a name="l01546"></a>01546           <span class="keyword">delete</span> newLC;
<a name="l01547"></a>01547           newLC = NULL;
<a name="l01548"></a>01548           
<a name="l01549"></a>01549           marginal-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33" title="Total the summaries from this node downwards.">totaliseSummaries</a>(); 
<a name="l01550"></a>01550         }
<a name="l01551"></a>01551         <span class="keywordflow">else</span> { <span class="comment">// did not split on an outdim or is a leaf</span>
<a name="l01552"></a>01552           <span class="comment">// have to contract rhs and then add the children</span>
<a name="l01553"></a>01553           <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp = rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
<a name="l01554"></a>01554           <span class="keywordtype">int</span> l = rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l01555"></a>01555           <span class="keywordtype">int</span> newDims = dim - outDims.size();
<a name="l01556"></a>01556           <span class="comment">// for every missing dimension</span>
<a name="l01557"></a>01557           ivector newBox = ivector(newDims); 
<a name="l01558"></a>01558           <span class="keywordtype">int</span> index = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(newBox);
<a name="l01559"></a>01559           <span class="keywordtype">int</span> oldindex = boxLB;
<a name="l01560"></a>01560           
<a name="l01561"></a>01561           <span class="keywordflow">for</span> (; oldindex &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box); oldindex++) {
<a name="l01562"></a>01562             std::vector&lt;int&gt;::const_iterator fit 
<a name="l01563"></a>01563             = find (outDims.begin(), outDims.end(), (oldindex - boxLB + 1));
<a name="l01564"></a>01564             <span class="keywordflow">if</span> (!(fit &lt; outDims.end())) { <span class="comment">// keep this one</span>
<a name="l01565"></a>01565               newBox[index] = box[oldindex];
<a name="l01566"></a>01566               index++;
<a name="l01567"></a>01567               
<a name="l01568"></a>01568             }
<a name="l01569"></a>01569           }
<a name="l01570"></a>01570           
<a name="l01571"></a>01571           <span class="keywordtype">double</span> missingVol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(box)/<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(newBox);
<a name="l01572"></a>01572           
<a name="l01573"></a>01573           transform(temp.begin(), temp.end(), temp.begin(), 
<a name="l01574"></a>01574           std::bind1st(multiplies&lt;double&gt;(), missingVol) );
<a name="l01575"></a>01575           
<a name="l01576"></a>01576           marginal = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5" title="default constructor,">CollatorSPnode</a>(newBox, rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>(), temp);
<a name="l01577"></a>01577           marginal-&gt;totaliseSummaries(); 
<a name="l01578"></a>01578                     
<a name="l01579"></a>01579           <span class="keywordflow">if</span> (!rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01580"></a>01580             marginal-&gt;nodeAddRight(newRC);
<a name="l01581"></a>01581             marginal-&gt;nodeAddLeft(newLC);
<a name="l01582"></a>01582           }
<a name="l01583"></a>01583           newRC = NULL;
<a name="l01584"></a>01584           newLC = NULL;
<a name="l01585"></a>01585           
<a name="l01586"></a>01586           } <span class="comment">// finished else</span>
<a name="l01587"></a>01587       } <span class="comment">// end if not NULL</span>
<a name="l01588"></a>01588       
<a name="l01589"></a>01589       <span class="comment">// clean up assuming no problems so far</span>
<a name="l01590"></a>01590       <span class="keywordflow">if</span> (newRC != NULL) {
<a name="l01591"></a>01591         <span class="keywordflow">try</span> {
<a name="l01592"></a>01592           <span class="keyword">delete</span> newRC;
<a name="l01593"></a>01593         }
<a name="l01594"></a>01594         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01595"></a>01595       }
<a name="l01596"></a>01596       <span class="keywordflow">if</span> (newLC != NULL) {
<a name="l01597"></a>01597         <span class="keywordflow">try</span> {
<a name="l01598"></a>01598           <span class="keyword">delete</span> newLC;
<a name="l01599"></a>01599         }
<a name="l01600"></a>01600         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01601"></a>01601       }
<a name="l01602"></a>01602       
<a name="l01603"></a>01603       <span class="keywordflow">return</span> marginal;
<a name="l01604"></a>01604       
<a name="l01605"></a>01605         } <span class="comment">// end try</span>
<a name="l01606"></a>01606         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01607"></a>01607             
<a name="l01608"></a>01608             
<a name="l01609"></a>01609             <span class="keywordflow">if</span> (newRC != NULL) {
<a name="l01610"></a>01610         <span class="keywordflow">try</span> {
<a name="l01611"></a>01611           <span class="keyword">delete</span> newRC;
<a name="l01612"></a>01612         }
<a name="l01613"></a>01613         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01614"></a>01614       }
<a name="l01615"></a>01615       <span class="keywordflow">if</span> (newLC != NULL) {
<a name="l01616"></a>01616         <span class="keywordflow">try</span> {
<a name="l01617"></a>01617           <span class="keyword">delete</span> newLC;
<a name="l01618"></a>01618         }
<a name="l01619"></a>01619         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01620"></a>01620       }
<a name="l01621"></a>01621       <span class="keywordflow">if</span> (marginal != NULL) {
<a name="l01622"></a>01622         <span class="keywordflow">try</span> {
<a name="l01623"></a>01623           <span class="keyword">delete</span> marginal;
<a name="l01624"></a>01624         }
<a name="l01625"></a>01625         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01626"></a>01626       }
<a name="l01627"></a>01627             
<a name="l01628"></a>01628             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = e.what();
<a name="l01629"></a>01629             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in _marginalise:\n &quot;</span> + std::string(msg));
<a name="l01630"></a>01630         }
<a name="l01631"></a>01631       
<a name="l01632"></a>01632     }
<a name="l01633"></a>01633 
<a name="l01634"></a>01634 <span class="comment">// Marginalise</span>
<a name="l01635"></a>01635     <span class="comment">// marginalise from given node downwards</span>
<a name="l01636"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aec7d6bcee79660a09914100f9b878611">01636</a>     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aec7d6bcee79660a09914100f9b878611" title="Make a marginalised version of subpaving with root node rhs.">CollatorSPnode::marginalise</a>(
<a name="l01637"></a>01637       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs,
<a name="l01638"></a>01638       <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims)
<a name="l01639"></a>01639     {
<a name="l01640"></a>01640     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * marginal = NULL;
<a name="l01641"></a>01641     
<a name="l01642"></a>01642     <span class="keywordflow">try</span> { <span class="comment">// throw exception if it is NULL or if dimensions incompatible</span>
<a name="l01643"></a>01643       <span class="keywordflow">if</span> (rhs == NULL) {
<a name="l01644"></a>01644         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Cannot marginalise null subpaving&quot;</span>);
<a name="l01645"></a>01645       }
<a name="l01646"></a>01646       <span class="keywordflow">if</span> (reqDims.empty()) {
<a name="l01647"></a>01647         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;No dimensions to marginalise on&quot;</span>);
<a name="l01648"></a>01648       }
<a name="l01649"></a>01649       
<a name="l01650"></a>01650       ivector box = rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01651"></a>01651       <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l01652"></a>01652       <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l01653"></a>01653       <span class="keywordtype">int</span> boxUB = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(box);
<a name="l01654"></a>01654       <span class="comment">//each of the required dims must be there</span>
<a name="l01655"></a>01655       std::vector&lt;int&gt; sorted = reqDims;
<a name="l01656"></a>01656       sort(sorted.begin(), sorted.end());
<a name="l01657"></a>01657       
<a name="l01658"></a>01658       <span class="comment">// remove any duplicates</span>
<a name="l01659"></a>01659       vector&lt;int&gt;::iterator it = unique (sorted.begin(), sorted.end());
<a name="l01660"></a>01660       sorted.resize( it - sorted.begin() );
<a name="l01661"></a>01661 
<a name="l01662"></a>01662       <span class="keywordflow">if</span> ( (*(sorted.begin()) &lt; 1)) {
<a name="l01663"></a>01663         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Dimensions must be &gt;= 1&quot;</span>);
<a name="l01664"></a>01664       }
<a name="l01665"></a>01665       
<a name="l01666"></a>01666       <span class="keywordflow">if</span> (*(sorted.rbegin()) &gt; boxUB - boxLB + 1)  {
<a name="l01667"></a>01667         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(
<a name="l01668"></a>01668           <span class="stringliteral">&quot;At least one dimension too large for subpaving box&quot;</span>);
<a name="l01669"></a>01669       }
<a name="l01670"></a>01670       <span class="comment">// could use min and max, but we want the not-req dims anyway</span>
<a name="l01671"></a>01671       std::vector&lt;int&gt; outDims;
<a name="l01672"></a>01672       
<a name="l01673"></a>01673       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= dim; i++) {
<a name="l01674"></a>01674         <span class="keywordflow">if</span> (!(find(reqDims.begin(), reqDims.end(), i) &lt; reqDims.end())) {
<a name="l01675"></a>01675           <span class="comment">// dim of box was not in reqDims </span>
<a name="l01676"></a>01676           outDims.push_back(i);
<a name="l01677"></a>01677         }
<a name="l01678"></a>01678       }
<a name="l01679"></a>01679       
<a name="l01680"></a>01680       marginal = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9" title="Make a marginalised version of a given node.">_marginalise</a>(rhs, outDims);
<a name="l01681"></a>01681       marginal-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l01682"></a>01682       <span class="keywordflow">return</span> marginal;
<a name="l01683"></a>01683     }
<a name="l01684"></a>01684     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01685"></a>01685       
<a name="l01686"></a>01686       <span class="keywordflow">if</span> (marginal != NULL) {
<a name="l01687"></a>01687         <span class="keywordflow">try</span> {
<a name="l01688"></a>01688           <span class="keyword">delete</span> marginal;
<a name="l01689"></a>01689         }
<a name="l01690"></a>01690         <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l01691"></a>01691       }
<a name="l01692"></a>01692       <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = e.what();
<a name="l01693"></a>01693             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in marginalise:\n &quot;</span> + std::string(msg));
<a name="l01694"></a>01694     } 
<a name="l01695"></a>01695   }
<a name="l01696"></a>01696   
<a name="l01697"></a>01697   <span class="comment">// find node&#39;s split dimension</span>
<a name="l01698"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab374777116b7e0af8e7100f303e1f97b">01698</a>     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab374777116b7e0af8e7100f303e1f97b" title="Find the dimension a node split on.">CollatorSPnode::getSplitDim</a>()<span class="keyword"> const</span>
<a name="l01699"></a>01699 <span class="keyword">    </span>{
<a name="l01700"></a>01700         
<a name="l01701"></a>01701     <span class="keywordflow">try</span> {
<a name="l01702"></a>01702       
<a name="l01703"></a>01703       <span class="keywordtype">int</span> splitDim = -1;  
<a name="l01704"></a>01704       
<a name="l01705"></a>01705       <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l01706"></a>01706       
<a name="l01707"></a>01707         ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01708"></a>01708         <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l01709"></a>01709         <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l01710"></a>01710           
<a name="l01711"></a>01711         ivector boxChild = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01712"></a>01712                     
<a name="l01713"></a>01713         <span class="keywordtype">int</span> index = 0;
<a name="l01714"></a>01714         <span class="keywordtype">int</span> boxChildLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(boxChild);
<a name="l01715"></a>01715         <span class="keywordflow">while</span> (splitDim &lt; 1 &amp;&amp; index &lt; dim) {
<a name="l01716"></a>01716           <span class="keywordflow">if</span> ((Inf(box[boxLB + index]) 
<a name="l01717"></a>01717               != Inf(boxChild[boxChildLB + index]))
<a name="l01718"></a>01718             ||
<a name="l01719"></a>01719             (Sup(box[boxLB + index]) != 
<a name="l01720"></a>01720               Sup(boxChild[boxChildLB + index]))) {
<a name="l01721"></a>01721                 <span class="comment">// found splitDim</span>
<a name="l01722"></a>01722                 splitDim = boxLB + index;
<a name="l01723"></a>01723           }
<a name="l01724"></a>01724           index ++;
<a name="l01725"></a>01725         } <span class="comment">// end while</span>
<a name="l01726"></a>01726               
<a name="l01727"></a>01727         <span class="keywordflow">if</span> (splitDim &lt; 0) {
<a name="l01728"></a>01728           <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Cannot find split dimension&quot;</span>);
<a name="l01729"></a>01729         }
<a name="l01730"></a>01730       } <span class="comment">// end isLeaf</span>
<a name="l01731"></a>01731                 
<a name="l01732"></a>01732       <span class="keywordflow">return</span> splitDim;
<a name="l01733"></a>01733       
<a name="l01734"></a>01734         } <span class="comment">// end try</span>
<a name="l01735"></a>01735         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01736"></a>01736             
<a name="l01737"></a>01737             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = e.what();
<a name="l01738"></a>01738             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in findParentSplitDim:\n &quot;</span> + std::string(msg));
<a name="l01739"></a>01739         }
<a name="l01740"></a>01740       
<a name="l01741"></a>01741     }
<a name="l01742"></a>01742 
<a name="l01743"></a>01743     <span class="comment">// get the total of the summary in the collator node</span>
<a name="l01744"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">01744</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">CollatorSPnode::getTotalSummary</a>()<span class="keyword"> const</span>
<a name="l01745"></a>01745 <span class="keyword">    </span>{
<a name="l01746"></a>01746     <span class="keywordtype">double</span> summ = 0;
<a name="l01747"></a>01747     summ = accumulate(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(), <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), summ);
<a name="l01748"></a>01748 
<a name="l01749"></a>01749     <span class="keywordflow">return</span> summ;
<a name="l01750"></a>01750   }
<a name="l01751"></a>01751  
<a name="l01752"></a>01752    <span class="comment">// get the average of the summary in the collator node</span>
<a name="l01753"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c48fd024a9e569830168a3f301d798e">01753</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c48fd024a9e569830168a3f301d798e">CollatorSPnode::getTotalSummaryAv</a>()<span class="keyword"> const</span>
<a name="l01754"></a>01754 <span class="keyword">    </span>{
<a name="l01755"></a>01755     <span class="keywordtype">double</span> summ = 0;
<a name="l01756"></a>01756     summ = accumulate(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.begin(), <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.end(), summ)/(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size()*1.0);
<a name="l01757"></a>01757 
<a name="l01758"></a>01758     <span class="keywordflow">return</span> summ;
<a name="l01759"></a>01759    }
<a name="l01760"></a>01760  
<a name="l01761"></a>01761  <span class="comment">// Jenny addition for Gloria&#39;s convergence work</span>
<a name="l01762"></a>01762   <span class="comment">// take a container and return the same container, which has been</span>
<a name="l01763"></a>01763   <span class="comment">// cleared (if necessary) and re-filled with </span>
<a name="l01764"></a>01764   <span class="comment">// L1-distances-to-average, one for each histogram in collation</span>
<a name="l01765"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a944e27bc584e24e630411e787456ffe0">01765</a>   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a944e27bc584e24e630411e787456ffe0">CollatorSPnode::getL1DistancesToAverage</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; container)<span class="keyword"> const</span>
<a name="l01766"></a>01766 <span class="keyword">  </span>{
<a name="l01767"></a>01767         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* differences = NULL;
<a name="l01768"></a>01768         
<a name="l01769"></a>01769         <span class="comment">// take this collation</span>
<a name="l01770"></a>01770         <span class="keywordflow">try</span> {
<a name="l01771"></a>01771             <span class="comment">// make a tree of differences between this and average over this</span>
<a name="l01772"></a>01772             differences = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ac1d9ea49286eb953b7bc71f89c15f8ec" title="Make a tree which holds differences of this to avg over this.">makeDifferencesToAveragePaving</a>();
<a name="l01773"></a>01773       
<a name="l01774"></a>01774             <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>.size();
<a name="l01775"></a>01775             dotprecision emptyDP(0.0);
<a name="l01776"></a>01776             <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> areaAcc(n, emptyDP); <span class="comment">// n copies of empty dot prec</span>
<a name="l01777"></a>01777 
<a name="l01778"></a>01778             areaAcc = differences-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5ac89a38985d8ff62ca7a29943c6734c" title="Add to the accumulation of absolute areas for leaf nodes.">getLeafNodeAbsAreaAccumulations</a>(areaAcc);
<a name="l01779"></a>01779       <span class="comment">// one L1 distance-to-average summary, in the form of a dot precision, for </span>
<a name="l01780"></a>01780       <span class="comment">// each histogram </span>
<a name="l01781"></a>01781 
<a name="l01782"></a>01782       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> temp(n);
<a name="l01783"></a>01783       temp.swap(container); <span class="comment">// clear container and minimize memory</span>
<a name="l01784"></a>01784       
<a name="l01785"></a>01785       <a class="code" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173" title="Define type VecDotPrecIt as an iterator over VecDotPrec container.">VecDotPrecIt</a> it;
<a name="l01786"></a>01786             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; ++i) {
<a name="l01787"></a>01787         <span class="comment">// put rounded L1 diff into the container</span>
<a name="l01788"></a>01788         container.at(i) = rnd( areaAcc.at(i) ); <span class="comment">// round to nearest</span>
<a name="l01789"></a>01789             }
<a name="l01790"></a>01790 
<a name="l01791"></a>01791             <span class="keyword">delete</span> differences;
<a name="l01792"></a>01792             differences = NULL;
<a name="l01793"></a>01793       
<a name="l01794"></a>01794       <span class="keywordflow">return</span> container;
<a name="l01795"></a>01795         }
<a name="l01796"></a>01796         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01797"></a>01797             <span class="keywordflow">if</span> (NULL != differences) {
<a name="l01798"></a>01798                 <span class="keyword">delete</span> differences;
<a name="l01799"></a>01799                 differences = NULL;
<a name="l01800"></a>01800             }
<a name="l01801"></a>01801             <span class="keywordflow">throw</span>;
<a name="l01802"></a>01802         }
<a name="l01803"></a>01803 
<a name="l01804"></a>01804     }
<a name="l01805"></a>01805  
<a name="l01806"></a>01806     <span class="comment">//gat41</span>
<a name="l01807"></a>01807     <span class="comment">// Find the nodes that fulfill the Scheffe condition for rows against </span>
<a name="l01808"></a>01808   <span class="comment">// columns in the Yatracos growing matrix. True if condition is fulfilled.</span>
<a name="l01809"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a9509d8f49407c1b14148f80758f02646">01809</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a9509d8f49407c1b14148f80758f02646" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">CollatorSPnode::getScheffeNode</a>(<span class="keywordtype">int</span> theta1, <span class="keywordtype">int</span> theta2)
<a name="l01810"></a>01810    { 
<a name="l01811"></a>01811      <span class="comment">//cout.precision(20);</span>
<a name="l01812"></a>01812      <span class="comment">//cout &lt;&lt; &quot;Checking for Scheffe set at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01813"></a>01813      <span class="comment">//cout &lt;&lt; &quot;Theta1: &quot; &lt;&lt; theta1 &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;Theta2: &quot; &lt;&lt; theta2 &lt;&lt; endl;     </span>
<a name="l01814"></a>01814      <span class="comment">//cout &lt;&lt; summary[theta1] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[theta2] &lt;&lt; endl;</span>
<a name="l01815"></a>01815      
<a name="l01816"></a>01816     <span class="comment">//check that this is an ordered pair theta1 &lt; theta2</span>
<a name="l01817"></a>01817     <span class="keywordflow">if</span> (theta1 &lt; theta2) {
<a name="l01818"></a>01818       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[theta1] &gt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[theta2])) {
<a name="l01819"></a>01819           <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot; is an element of the Scheffe set.****&quot; &lt;&lt; endl;</span>
<a name="l01820"></a>01820           <span class="keywordflow">return</span> <span class="keyword">true</span>;          
<a name="l01821"></a>01821       } 
<a name="l01822"></a>01822       <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01823"></a>01823     }
<a name="l01824"></a>01824     <span class="keywordflow">else</span> {
<a name="l01825"></a>01825       cerr &lt;&lt; <span class="stringliteral">&quot;theta1 must be less than theta2.&quot;</span> &lt;&lt; endl;
<a name="l01826"></a>01826       exit(0);
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828    }    
<a name="l01829"></a>01829     
<a name="l01830"></a>01830     
<a name="l01831"></a>01831     <span class="comment">//gat41</span>
<a name="l01832"></a>01832     <span class="comment">// get delta for a specific theta</span>
<a name="l01833"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a72b47c222d49deba3753259d94d730c3">01833</a>    <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a72b47c222d49deba3753259d94d730c3" title="Get the delta value for a specific theta.">CollatorSPnode::getNodeDelta</a>(<span class="keywordtype">int</span> thisTheta, <span class="keywordtype">size_t</span> sizeColl)
<a name="l01834"></a>01834    { 
<a name="l01835"></a>01835      <span class="comment">//cout &lt;&lt; &quot;get delta for &quot; &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l01836"></a>01836      <span class="comment">// get empirical measure of the training data</span>
<a name="l01837"></a>01837      <span class="keywordtype">double</span> muTrain = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[thisTheta] * <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l01838"></a>01838      <span class="comment">//cout &lt;&lt; &quot;summary: &quot; &lt;&lt; summary[thisTheta] &lt;&lt; &quot;\t muTrain: &quot; &lt;&lt; muTrain &lt;&lt; endl;</span>
<a name="l01839"></a>01839       
<a name="l01840"></a>01840      <span class="comment">// get empirical measure of the validation data      </span>
<a name="l01841"></a>01841      <span class="keywordtype">double</span> muValid = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[sizeColl-1] * <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l01842"></a>01842     <span class="comment">//cout &lt;&lt; &quot;summary: &quot; &lt;&lt; summary[sizeColl-1] &lt;&lt; &quot;\t muValid: &quot; &lt;&lt; muValid &lt;&lt; endl;</span>
<a name="l01843"></a>01843 
<a name="l01844"></a>01844      <span class="keywordtype">double</span> delta= muTrain - muValid;
<a name="l01845"></a>01845     <span class="comment">//cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; delta &lt;&lt; endl; </span>
<a name="l01846"></a>01846 
<a name="l01847"></a>01847      <span class="keywordflow">return</span> delta; 
<a name="l01848"></a>01848 
<a name="l01849"></a>01849    } <span class="comment">// end of function getNodeDelta</span>
<a name="l01850"></a>01850     
<a name="l01851"></a>01851     <span class="comment">//gat41</span>
<a name="l01852"></a>01852     <span class="comment">// Find the nodes that fulfill the Scheffe condition for rows against </span>
<a name="l01853"></a>01853   <span class="comment">// columns in the Yatracos growing matrix. True if condition is fulfilled.</span>
<a name="l01854"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af089a7955e0dd12ef33af3ec4bfc6627">01854</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af089a7955e0dd12ef33af3ec4bfc6627" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">CollatorSPnode::nodeCheckRowSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k)
<a name="l01855"></a>01855    { 
<a name="l01856"></a>01856      <span class="comment">//cout &lt;&lt; &quot;checking for Yat at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01857"></a>01857      <span class="comment">//cout &lt;&lt; &quot;theta: &quot; &lt;&lt; theta &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;k: &quot; &lt;&lt; k &lt;&lt; endl;     </span>
<a name="l01858"></a>01858      <span class="comment">//cout &lt;&lt; summary[theta] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[k] &lt;&lt; endl;</span>
<a name="l01859"></a>01859       
<a name="l01860"></a>01860       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[theta] &gt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[k])) {
<a name="l01861"></a>01861     <span class="comment">//cout &lt;&lt; &quot;height at &quot; &lt;&lt; theta &lt;&lt; &quot; larger than height at &quot; &lt;&lt; k &lt;&lt; endl;</span>
<a name="l01862"></a>01862             <span class="keywordflow">return</span> <span class="keyword">true</span>;          
<a name="l01863"></a>01863       } <span class="comment">// end of filling up rows</span>
<a name="l01864"></a>01864       <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01865"></a>01865    }   
<a name="l01866"></a>01866     
<a name="l01867"></a>01867    <span class="comment">// Find the nodes that fulfill the Scheffe condition for columns against </span>
<a name="l01868"></a>01868   <span class="comment">// rows in the Yatracos growing matrix. True if condition is fulfilled</span>
<a name="l01869"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aeb5549c6c555a65ee6cf71e779873b67">01869</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aeb5549c6c555a65ee6cf71e779873b67" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">CollatorSPnode::nodeCheckColSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k)
<a name="l01870"></a>01870    { 
<a name="l01871"></a>01871    <span class="comment">//  cout &lt;&lt; &quot;checking for Yat at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;     </span>
<a name="l01872"></a>01872     <span class="comment">//  cout &lt;&lt; &quot;theta: &quot; &lt;&lt; theta &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;k: &quot; &lt;&lt; k &lt;&lt; endl;</span>
<a name="l01873"></a>01873     <span class="comment">//  cout &lt;&lt; summary[theta] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[k] &lt;&lt; endl;</span>
<a name="l01874"></a>01874       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[k] &gt; <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec" title="A container of summary values from the collated subpavings.">summary</a>[theta])) {
<a name="l01875"></a>01875    <span class="comment">// cout &lt;&lt; &quot;height at &quot; &lt;&lt; k &lt;&lt; &quot; larger than height at &quot; &lt;&lt; theta &lt;&lt; endl;</span>
<a name="l01876"></a>01876          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01877"></a>01877       }   
<a name="l01878"></a>01878     <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }    
<a name="l01879"></a>01879   }
<a name="l01880"></a>01880     
<a name="l01881"></a>01881     
<a name="l01882"></a>01882     
<a name="l01883"></a>01883     <span class="comment">//gat41</span>
<a name="l01884"></a>01884     <span class="comment">//get the Yatracos set for a particular pair.</span>
<a name="l01885"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9">01885</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9" title="Get the Yatracos set for a particular pair.">CollatorSPnode::getYatSet</a>(
<a name="l01886"></a>01886       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &amp; YatSetRow, 
<a name="l01887"></a>01887       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &amp; YatSetCol, 
<a name="l01888"></a>01888       <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2)
<a name="l01889"></a>01889 {
<a name="l01890"></a>01890   <span class="comment">//iterate through the leaves in both candidate histograms to get the </span>
<a name="l01891"></a>01891   <span class="comment">//Yatracos set</span>
<a name="l01892"></a>01892    <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01893"></a>01893       <span class="keywordtype">bool</span> rowInd = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#af089a7955e0dd12ef33af3ec4bfc6627" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">nodeCheckRowSummary</a>(cand1, cand2);
<a name="l01894"></a>01894       <span class="keywordtype">bool</span> colInd = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aeb5549c6c555a65ee6cf71e779873b67" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">nodeCheckColSummary</a>(cand1, cand2);
<a name="l01895"></a>01895       <span class="comment">// insert the node YatSet if return true</span>
<a name="l01896"></a>01896     <span class="keywordflow">if</span> (rowInd) { 
<a name="l01897"></a>01897       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; getNodeName() &lt;&lt; &quot; into YatSetRow&quot; &lt;&lt; endl; </span>
<a name="l01898"></a>01898       YatSetRow.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01899"></a>01899     }
<a name="l01900"></a>01900     <span class="keywordflow">if</span> (colInd) { 
<a name="l01901"></a>01901       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; getNodeName() &lt;&lt; &quot; into YatSetCol&quot; &lt;&lt; endl; </span>
<a name="l01902"></a>01902       YatSetCol.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01903"></a>01903     }
<a name="l01904"></a>01904    }
<a name="l01905"></a>01905  
<a name="l01906"></a>01906    <span class="comment">//recurse on the children</span>
<a name="l01907"></a>01907    <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01908"></a>01908          <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9" title="Get the Yatracos set for a particular pair.">getYatSet</a>(YatSetRow, YatSetCol, cand1, cand2);
<a name="l01909"></a>01909    }
<a name="l01910"></a>01910    <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01911"></a>01911          <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9" title="Get the Yatracos set for a particular pair.">getYatSet</a>(YatSetRow, YatSetCol, cand1, cand2);
<a name="l01912"></a>01912    }
<a name="l01913"></a>01913 } <span class="comment">// end of getYatset</span>
<a name="l01914"></a>01914 
<a name="l01915"></a>01915     
<a name="l01916"></a>01916     <span class="comment">//gat41</span>
<a name="l01917"></a>01917     <span class="comment">//get the Scheffe set for a particular pair.  </span>
<a name="l01918"></a><a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246">01918</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246" title="Get the Scheffe set for a particular pair.">CollatorSPnode::getScheffeSet</a>(
<a name="l01919"></a>01919       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &amp; ScheffeSet, 
<a name="l01920"></a>01920       <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2)
<a name="l01921"></a>01921   {
<a name="l01922"></a>01922     <span class="comment">//iterate through the leaves in both candidate histograms to get the </span>
<a name="l01923"></a>01923     <span class="comment">//Yatracos set</span>
<a name="l01924"></a>01924      <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01925"></a>01925         <span class="keywordtype">bool</span> ind = <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a9509d8f49407c1b14148f80758f02646" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">getScheffeNode</a>(cand1, cand2);
<a name="l01926"></a>01926           <span class="comment">// insert the node YatSet if return true</span>
<a name="l01927"></a>01927       <span class="keywordflow">if</span> (ind) { 
<a name="l01928"></a>01928         ScheffeSet.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01929"></a>01929       }
<a name="l01930"></a>01930     }
<a name="l01931"></a>01931       
<a name="l01932"></a>01932      <span class="comment">//recurse on the children</span>
<a name="l01933"></a>01933      <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01934"></a>01934            <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(ScheffeSet, cand1, cand2);
<a name="l01935"></a>01935      }
<a name="l01936"></a>01936      <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01937"></a>01937            <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(ScheffeSet, cand1, cand2);
<a name="l01938"></a>01938      }
<a name="l01939"></a>01939   }
<a name="l01940"></a>01940   
<a name="l01941"></a>01941   <span class="comment">//src_trunk_0701</span>
<a name="l01942"></a>01942   <span class="comment">/*</span>
<a name="l01943"></a>01943 <span class="comment">  void CollatorSPnode::swapCollator(CollatorSPnode&amp; spn) //throw() // don&#39;t hide base class version</span>
<a name="l01944"></a>01944 <span class="comment">  {</span>
<a name="l01945"></a>01945 <span class="comment">    /* theBox, parent, leftChild,</span>
<a name="l01946"></a>01946 <span class="comment">        rightChild and nodeName are inherited from base class */</span>
<a name="l01947"></a>01947     <span class="comment">/*SPnode::swap(spn); // use the base version</span>
<a name="l01948"></a>01948 <span class="comment">    </span>
<a name="l01949"></a>01949 <span class="comment">    std::swap(rangeCollection, spn.rangeCollection);     </span>
<a name="l01950"></a>01950 <span class="comment">  }*/</span>
<a name="l01951"></a>01951 
<a name="l01952"></a>01952     <span class="comment">// ----------------- non member tools functions ----------------------</span>
<a name="l01953"></a>01953 
<a name="l01954"></a>01954     <span class="comment">//Output all boxes in collator</span>
<a name="l01955"></a><a class="code" href="namespacesubpavings.shtml#a4dca88e1718f95fecdf1429d1ebbfd11">01955</a>     std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l01956"></a>01956                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>&amp; spn)
<a name="l01957"></a>01957     {
<a name="l01958"></a>01958         os &lt;&lt; spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, 1) &lt;&lt; std::endl;
<a name="l01959"></a>01959         <span class="keywordflow">return</span> os;
<a name="l01960"></a>01960     }
<a name="l01961"></a>01961 
<a name="l01962"></a>01962    <span class="comment">//compare total summaries</span>
<a name="l01963"></a><a class="code" href="namespacesubpavings.shtml#a31f92daeace87913f55ad41125368359">01963</a>   <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a31f92daeace87913f55ad41125368359" title="Comparison of CollatorSPnodes using total of summaries.">nodeCompTotalSummary</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> lhs,
<a name="l01964"></a>01964                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs)
<a name="l01965"></a>01965   {
<a name="l01966"></a>01966     <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">getTotalSummary</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">getTotalSummary</a>());
<a name="l01967"></a>01967   }
<a name="l01968"></a>01968 
<a name="l01969"></a>01969   <span class="comment">//compare average of total summaries </span>
<a name="l01970"></a><a class="code" href="namespacesubpavings.shtml#a3580c30693d7d662e28a0fa26f45f837">01970</a>   <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a3580c30693d7d662e28a0fa26f45f837" title="Comparison of CollatorSPnodes using the average of the total of summaries.">nodeCompTotalSummaryAv</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> lhs,
<a name="l01971"></a>01971                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * <span class="keyword">const</span> rhs)
<a name="l01972"></a>01972   {
<a name="l01973"></a>01973     <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c48fd024a9e569830168a3f301d798e">getTotalSummaryAv</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a8c48fd024a9e569830168a3f301d798e">getTotalSummaryAv</a>());
<a name="l01974"></a>01974   }
<a name="l01975"></a>01975   
<a name="l01976"></a>01976 <span class="comment">/*  //src_trunk_0701</span>
<a name="l01977"></a>01977 <span class="comment">  // Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l01978"></a>01978 <span class="comment">  template &lt;&gt;</span>
<a name="l01979"></a>01979 <span class="comment">  void std::swap(CollatorSPnode &amp; s1, </span>
<a name="l01980"></a>01980 <span class="comment">        CollatorSPnode &amp; s2) // throw ()</span>
<a name="l01981"></a>01981 <span class="comment">    {</span>
<a name="l01982"></a>01982 <span class="comment">      s1.swapCollator(s2);</span>
<a name="l01983"></a>01983 <span class="comment">    }</span>
<a name="l01984"></a>01984 <span class="comment">*/</span>
<a name="l01985"></a>01985 } <span class="comment">// end namespace subpavings</span>
<a name="l01986"></a>01986 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="collatorspnode_8cpp.shtml">collatorspnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
