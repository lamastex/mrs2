<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: UniformMixture2.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('UniformMixture2_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">UniformMixture2.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="UniformMixture2_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="UniformMixture2_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="UniformMixture2.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="UniformMixture2_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="UniformMixture2_8cpp_source.shtml">UniformMixture2.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01247">subpavings::AdaptiveHistogram::getRootLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03774">subpavings::AdaptiveHistogram::getUnifIAE()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01913">subpavings::AdaptiveHistogram::prioritySplitWithSwitches()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
  <span class="keywordflow">if</span> ( argc != 6) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UniformMixture n d dataSeed mixShape simNum&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[3]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> shape = atoi(argv[4]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[5]); <span class="comment">//which data set </span>

  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   std::ostringstream stm;
  stm &lt;&lt; simNum;
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="keywordtype">double</span> rootBoxVol = (myPart.getSubPaving())-&gt;nodeVolume();
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="keywordtype">size_t</span> PartSize;

   <span class="comment">// mixture shape</span>
   <span class="keywordtype">string</span> mixShape;
   vector&lt;int&gt; holesLoc;
   
  <span class="keywordflow">if</span> (shape == 1) { 
    mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; 
    holesLoc.push_back(1);
    holesLoc.push_back(1);
  }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape == 2) {
    mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>;
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 7; i++) { holesLoc.push_back(1);} 
  }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==3) { 
    mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>; 
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 7; i++) { holesLoc.push_back(1);}
    holesLoc[1]=0;
    holesLoc[3]=0;
    holesLoc[5]=0;
  } 
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==4) {
    mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; 
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 63 ; i++) { holesLoc.push_back(1);}
    holesLoc[6]=0;
    holesLoc[8]=0;
    holesLoc[10]=0;
    holesLoc[17]=0;
    holesLoc[20]=0;
    holesLoc[24]=0;
    holesLoc[34]=0;
    holesLoc[40]=0;
    holesLoc[44]=0;
    holesLoc[47]=0;
    holesLoc[51]=0;
    holesLoc[55]=0;
    holesLoc[59]=0;
    holesLoc[62]=0;
  }       

  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture   </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
   myPart.getSubPaving()-&gt;getLeaves(trueLeaves); <span class="comment">// fill the container</span>
   
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; holesLoc.size(); i++) {
    <span class="keywordflow">if</span> (holesLoc[i] == 1) {
      Pboxes.push_back(trueLeaves[i]-&gt;getBox());
    }
  }
  PartSize = Pboxes.size();
  <span class="comment">// get weight of mixture components</span>
  <span class="keywordtype">double</span> weight = 1.0/(1.0*PartSize);  


  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
      <span class="comment">//cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
   }  <span class="comment">// data  should be in theData</span>
   
<span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;

  <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
  
  <span class="comment">// comparison objects</span>
  <a class="code" href="classsubpavings_1_1CompMeanMass.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMass</a> compMeanMass;
  <a class="code" href="classsubpavings_1_1CompCovarMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarMass</a> compCovarMass;
  <a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMass</a> compHDMass;
  <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiam</a> compHDMassDiam;

  <span class="comment">//mean mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
  
  <span class="comment">//covar mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
  
  <span class="comment">//hellinger distance * mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
  
  <span class="comment">//hellinger distance * mass * maxdiam remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;

  <span class="comment">// containers for output needed</span>
  vector&lt;real&gt; IAEOpt;
  vector&lt;int&gt; NumLeafNodesOpt;
  
  real IAE1=100.0;
  <span class="keywordtype">int</span> NumLeafNodes1;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
  vector&lt;double&gt; Times1;

  real IAE2=100.0;
  <span class="keywordtype">int</span> NumLeafNodes2;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
  vector&lt;double&gt; Times2;

  real IAE3=100.0;
  <span class="keywordtype">int</span> NumLeafNodes3;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
   vector&lt;double&gt; Times3;
   
  real IAE4=100.0;
  <span class="keywordtype">int</span> NumLeafNodes4;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
  vector&lt;double&gt; Times4;

  <span class="comment">//size_t maxLeafNodes = int(n/log(n*(2*d+1))); // temporarily</span>
  <span class="keywordtype">size_t</span> maxLeafNodes = n;
  <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>

  <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 20; i++) {
  
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1(pavingBox, holdAllStats); 
    successfulInsertion1= myHist1.insertFromRVec(theData);
    rootBoxVol = (myHist1.getSubPaving()-&gt;nodeVolume());
    pavingBox = (myHist1.getSubPaving()-&gt;getBox());
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2(pavingBox, holdAllStats); 
    successfulInsertion2= myHist2.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3(pavingBox, holdAllStats); 
    successfulInsertion3= myHist3.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4(pavingBox, holdAllStats); 
    successfulInsertion4= myHist4.insertFromRVec(theData);
    
    <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
      &amp;&amp; successfulInsertion4) {

      <span class="keywordtype">int</span> finalK = int(i*0.05*n);
      cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

      
      <span class="comment">// we want to check the timings for this</span>
      clock_t start, end;
      <span class="keywordtype">double</span> timing; 
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing mean mass remove empty: &quot;</span> &lt;&lt; endl;
      successfulPQSplit1 = myHist1.prioritySplitWithSwitches(compMeanMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times1.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing covar mass remove empty box &quot;</span> &lt;&lt; endl;
      successfulPQSplit2 = myHist2.prioritySplitWithSwitches(compCovarMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times2.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass remove empty box&quot;</span> &lt;&lt; endl;
      successfulPQSplit3 = myHist3.prioritySplitWithSwitches(compHDMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times3.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass and maxdiam and remove empty box&quot;</span> &lt;&lt; endl;
      successfulPQSplit4 = myHist4.prioritySplitWithSwitches(compHDMassDiam,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times4.push_back(timing);


      <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
        &amp;&amp; successfulPQSplit4) {
        
          <span class="comment">//get the IAE</span>
        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE: &quot;</span> &lt;&lt; endl;
        real midIAE1 = myHist1.getUnifIAE(myPart, weight, holesLoc);
        <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
          cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
          IAE1 = midIAE1;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist1 = myHist1;
        }

        <span class="comment">//get the IAE</span>
        real midIAE2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">getUnifIAE</a>(myPart, weight, holesLoc);
        <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
          cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
          IAE2 = midIAE2;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist2 = myHist2;
        }

        real midIAE3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">getUnifIAE</a>(myPart, weight, holesLoc);
        <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
          cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
          IAE3 = midIAE3;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist3 = myHist3;
        }

        
        <span class="comment">//get the IAE</span>
        real midIAE4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">getUnifIAE</a>(myPart, weight, holesLoc);
        <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
          cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
          IAE4 = midIAE4;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist4 = myHist4;
        }

      } <span class="comment">// end of if(successfulPQSplit)</span>
    }<span class="comment">// end of if(successfulInsertion)</span>
  } <span class="comment">// end of iterating through different kn&#39;s</span>

  <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
      successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
      &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
        
        <span class="comment">// keep the optimal IAEs</span>
    IAEOpt.push_back(IAE1); 
    IAEOpt.push_back(IAE2);
    IAEOpt.push_back(IAE3);
    IAEOpt.push_back(IAE4);
    
    <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
    NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
      
    <span class="comment">// output the optimal histograms</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="comment">// create a name for the file to output</span>
    <span class="keywordtype">string</span> fileName;
    fileName = <span class="stringliteral">&quot;HistMeanMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistCovarMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistHellingerMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistHellingerMassDiam&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// output IAE, number of leaf nodes, times to file</span>
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifExhaustivePQOutputStats&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
      oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
        
    PQFileName = <span class="stringliteral">&quot;UnifExhaustivePQOutputStatsTimes&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
      oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times4[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  } <span class="comment">// end of successes</span>

<span class="comment">//=================end of exhaustive PQ=================================// </span>

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="UniformMixture2_8cpp.shtml">UniformMixture2.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
