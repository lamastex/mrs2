<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: TestUniformFobj.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('TestUniformFobj_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">TestUniformFobj.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="TestUniformFobj_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="UniformFobj_8hpp.shtml" title="Declarations for multivariate Gaussian example function object class.">UniformFobj.hpp</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span> 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>cxsc;
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>subpavings;
<a name="l00036"></a>00036 <span class="keyword">using namespace </span>std;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038             
<a name="l00039"></a>00039             
<a name="l00040"></a><a class="code" href="TestUniformFobj_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00040</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042   <span class="keywordflow">try</span> {
<a name="l00043"></a>00043     
<a name="l00044"></a>00044     vector &lt;int&gt; dims;
<a name="l00045"></a>00045     dims.push_back(1);
<a name="l00046"></a>00046     dims.push_back(2);
<a name="l00047"></a>00047     dims.push_back(10);
<a name="l00048"></a>00048     
<a name="l00049"></a>00049     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dims.size(); ++i) {
<a name="l00050"></a>00050       <span class="keywordtype">int</span> dd = dims[i];
<a name="l00051"></a>00051     
<a name="l00052"></a>00052       ivector domain(dd);
<a name="l00053"></a>00053       interval domainInterval(-5,5);
<a name="l00054"></a>00054       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= dd; i++) { domain[i] = domainInterval; }
<a name="l00055"></a>00055       <a class="code" href="classsubpavings_1_1UniformFobj.shtml">UniformFobj</a> realF(domain);
<a name="l00056"></a>00056       
<a name="l00057"></a>00057       {
<a name="l00058"></a>00058         ivector ivec(dd);
<a name="l00059"></a>00059         rvector rvec(dd);
<a name="l00060"></a>00060         real rr1(-0.8);
<a name="l00061"></a>00061         real rr2(0.4);
<a name="l00062"></a>00062         interval ii1(-1.5,1.1);
<a name="l00063"></a>00063         interval ii2(-1.3,1.2);
<a name="l00064"></a>00064         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
<a name="l00065"></a>00065           ivec[k] = ii1;
<a name="l00066"></a>00066           rvec[k] = rr1;
<a name="l00067"></a>00067         }
<a name="l00068"></a>00068         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
<a name="l00069"></a>00069           ivec[k] = ii2;
<a name="l00070"></a>00070           rvec[k] = rr2;
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072         
<a name="l00073"></a>00073         cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
<a name="l00076"></a>00076         interval i_image = realF(ivec);
<a name="l00077"></a>00077         cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
<a name="l00078"></a>00078         real rmid_image = realF.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(ivec);
<a name="l00079"></a>00079         cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
<a name="l00080"></a>00080         
<a name="l00081"></a>00081         cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
<a name="l00082"></a>00082         real r_image = realF(rvec);
<a name="l00083"></a>00083         cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
<a name="l00084"></a>00084       }
<a name="l00085"></a>00085       {
<a name="l00086"></a>00086         ivector ivec(dd);
<a name="l00087"></a>00087         rvector rvec(dd);
<a name="l00088"></a>00088         real rr1(6.0);
<a name="l00089"></a>00089         real rr2(0.4);
<a name="l00090"></a>00090         interval ii1(-1.5,6.0);
<a name="l00091"></a>00091         interval ii2(-1.3,1.2);
<a name="l00092"></a>00092         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
<a name="l00093"></a>00093           ivec[k] = ii1;
<a name="l00094"></a>00094           rvec[k] = rr1;
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
<a name="l00097"></a>00097           ivec[k] = ii2;
<a name="l00098"></a>00098           rvec[k] = rr2;
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100         
<a name="l00101"></a>00101         cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
<a name="l00102"></a>00102         
<a name="l00103"></a>00103         cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
<a name="l00104"></a>00104         interval i_image = realF(ivec);
<a name="l00105"></a>00105         cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
<a name="l00106"></a>00106         real rmid_image = realF.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(ivec);
<a name="l00107"></a>00107         cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
<a name="l00108"></a>00108         
<a name="l00109"></a>00109         cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
<a name="l00110"></a>00110         real r_image = realF(rvec);
<a name="l00111"></a>00111         cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
<a name="l00112"></a>00112       }
<a name="l00113"></a>00113       {
<a name="l00114"></a>00114         ivector ivec(dd);
<a name="l00115"></a>00115         rvector rvec(dd);
<a name="l00116"></a>00116         real rr1(-6.0);
<a name="l00117"></a>00117         real rr2(0.4);
<a name="l00118"></a>00118         interval ii1(-5.5,6.0);
<a name="l00119"></a>00119         interval ii2(-1.3,1.2);
<a name="l00120"></a>00120         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
<a name="l00121"></a>00121           ivec[k] = ii1;
<a name="l00122"></a>00122           rvec[k] = rr1;
<a name="l00123"></a>00123         }
<a name="l00124"></a>00124         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
<a name="l00125"></a>00125           ivec[k] = ii2;
<a name="l00126"></a>00126           rvec[k] = rr2;
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128         
<a name="l00129"></a>00129         cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
<a name="l00130"></a>00130         
<a name="l00131"></a>00131         cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
<a name="l00132"></a>00132         interval i_image = realF(ivec);
<a name="l00133"></a>00133         cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
<a name="l00134"></a>00134         real rmid_image = realF.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(ivec);
<a name="l00135"></a>00135         cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
<a name="l00136"></a>00136         
<a name="l00137"></a>00137         cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
<a name="l00138"></a>00138         real r_image = realF(rvec);
<a name="l00139"></a>00139         cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
<a name="l00140"></a>00140       }
<a name="l00141"></a>00141       {
<a name="l00142"></a>00142         ivector ivec(dd);
<a name="l00143"></a>00143         rvector rvec(dd);
<a name="l00144"></a>00144         real rr1(-6.0);
<a name="l00145"></a>00145         real rr2(6.0);
<a name="l00146"></a>00146         interval ii1(-6.5,-5.5);
<a name="l00147"></a>00147         interval ii2(-1.3,1.2);
<a name="l00148"></a>00148         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dd; k+=2) {
<a name="l00149"></a>00149           ivec[k] = ii1;
<a name="l00150"></a>00150           rvec[k] = rr1;
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=2; k &lt;= dd; k+=2) {
<a name="l00153"></a>00153           ivec[k] = ii2;
<a name="l00154"></a>00154           rvec[k] = rr2;
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156         
<a name="l00157"></a>00157         cout &lt;&lt; <span class="stringliteral">&quot;\n\nd = &quot;</span> &lt;&lt; dd &lt;&lt; endl;
<a name="l00158"></a>00158         
<a name="l00159"></a>00159         cout &lt;&lt; <span class="stringliteral">&quot;ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(ivec)) &lt;&lt; endl;
<a name="l00160"></a>00160         interval i_image = realF(ivec);
<a name="l00161"></a>00161         cout &lt;&lt; <span class="stringliteral">&quot;interval image of ivec = &quot;</span> &lt;&lt; (<a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(i_image)) &lt;&lt; endl;
<a name="l00162"></a>00162         real rmid_image = realF.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(ivec);
<a name="l00163"></a>00163         cout &lt;&lt; <span class="stringliteral">&quot;real mid-image of ivec = &quot;</span> &lt;&lt; rmid_image &lt;&lt; endl;
<a name="l00164"></a>00164         
<a name="l00165"></a>00165         cout &lt;&lt; <span class="stringliteral">&quot;rvec = &quot;</span> &lt;&lt; <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(rvec) &lt;&lt; endl;
<a name="l00166"></a>00166         real r_image = realF(rvec);
<a name="l00167"></a>00167         cout &lt;&lt; <span class="stringliteral">&quot;real image of rvec = &quot;</span> &lt;&lt; r_image &lt;&lt; endl;
<a name="l00168"></a>00168       }
<a name="l00169"></a>00169           
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171     
<a name="l00172"></a>00172     <span class="keywordflow">return</span> 0;
<a name="l00173"></a>00173   }
<a name="l00174"></a>00174   <span class="keywordflow">catch</span> (std::exception&amp; e) {
<a name="l00175"></a>00175     cout &lt;&lt; <span class="stringliteral">&quot;Exception:\n&quot;</span> &lt;&lt; e.what() &lt;&lt; endl;
<a name="l00176"></a>00176     <span class="keywordflow">throw</span>;
<a name="l00177"></a>00177   }
<a name="l00178"></a>00178   <span class="keywordflow">catch</span> (...) {
<a name="l00179"></a>00179     cout &lt;&lt; <span class="stringliteral">&quot;Unknown exception&quot;</span> &lt;&lt; endl;
<a name="l00180"></a>00180     <span class="keywordflow">throw</span>;
<a name="l00181"></a>00181   }
<a name="l00182"></a>00182   
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="TestUniformFobj_8cpp.shtml">TestUniformFobj.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
