<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Fobj.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Fobj_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Fobj.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Fobj_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __FOBJ__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __FOBJ__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;gop.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00030"></a>00030 
<a name="l00044"></a><a class="code" href="classFobj.shtml">00044</a> <span class="keyword">class </span><a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046   <span class="keyword">protected</span>:
<a name="l00047"></a>00047   
<a name="l00049"></a><a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b">00049</a>     <span class="keywordtype">bool</span> <a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>;
<a name="l00050"></a>00050   
<a name="l00052"></a><a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff">00052</a>     vector&lt;LabBox&gt; <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>;
<a name="l00053"></a>00053     
<a name="l00055"></a><a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72">00055</a>     vector&lt;real&gt; <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>;
<a name="l00056"></a>00056 
<a name="l00058"></a><a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820">00058</a>     <span class="keywordtype">int</span> <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keyword">public</span>:
<a name="l00061"></a>00061     <span class="comment">// ******************* pure virtual functions</span>
<a name="l00063"></a>00063 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af" title="Get number of interval function calls.">get_interval_calls</a>() = 0;
<a name="l00064"></a>00064 
<a name="l00066"></a>00066     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7" title="Get number of real function calls.">get_real_calls</a>() = 0;
<a name="l00067"></a>00067 
<a name="l00074"></a>00074     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5" title="a defined pure virtual function for default Lebesgue measure (volume) of a labelled box...">LabBoxVolume</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB) = 0;
<a name="l00075"></a>00075 
<a name="l00081"></a>00081     <span class="keyword">virtual</span> interval <a class="code" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad" title="a pure virtual function for interval image of boxes under Fobj">operator()</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB) <span class="keyword">const</span> = 0;
<a name="l00082"></a>00082 
<a name="l00084"></a>00084     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad" title="a pure virtual function for interval image of boxes under Fobj">operator()</a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>&amp; LP) <span class="keyword">const</span> = 0;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="comment">// *******************  virtual functions but not pure virtual</span>
<a name="l00088"></a><a class="code" href="classFobj.shtml#a51d84b4865a42d81e4311a25546f846e">00088</a> <span class="comment"></span>    <span class="keyword">virtual</span> <a class="code" href="classFobj.shtml#a51d84b4865a42d81e4311a25546f846e" title="Destructor.">~Fobj</a>(){}
<a name="l00089"></a>00089 
<a name="l00095"></a>00095     <span class="keyword">virtual</span> HessType <a class="code" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad" title="a pure virtual function for interval image of boxes under Fobj">operator()</a>(<span class="keyword">const</span> HTvector&amp; x, <span class="keyword">const</span> <span class="keywordtype">int</span> label = 0) <span class="keyword">const</span>;
<a name="l00096"></a>00096 
<a name="l00098"></a>00098     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">LabBoxPriorIntegral</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB);
<a name="l00099"></a>00099 
<a name="l00101"></a><a class="code" href="classFobj.shtml#a8e3160c380ff77e60fd90c9d5f608fd1">00101</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classFobj.shtml#a8e3160c380ff77e60fd90c9d5f608fd1" title="set up the prior integral over the list of labeled domain boxes">SetupLabDomainPriorIntegralList</a>()
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103       <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>.resize(<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.size());
<a name="l00104"></a>00104       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.size(); i++)
<a name="l00105"></a>00105       {
<a name="l00106"></a>00106         <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>[i] 
<a name="l00107"></a>00107           = <a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">Fobj::LabBoxPriorIntegral</a>(<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>[i]);
<a name="l00108"></a>00108       }
<a name="l00109"></a>00109     }
<a name="l00110"></a>00110 
<a name="l00112"></a><a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0">00112</a>     <span class="keyword">virtual</span> rvector <a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB, <span class="keyword">const</span> rvector&amp; randvec)
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114       <span class="keywordtype">int</span> lo = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00115"></a>00115       <span class="keywordtype">int</span> hi = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00116"></a>00116       rvector the_point(lo, hi);
<a name="l00117"></a>00117       <span class="keywordflow">if</span>((hi - lo) &gt;  (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(randvec) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(randvec)))
<a name="l00118"></a>00118       {
<a name="l00119"></a>00119         cerr 
<a name="l00120"></a>00120           &lt;&lt; <span class="stringliteral">&quot;in Fobj::DrawFromBoxPrior. Too few random numbers in randvec. \n&quot;</span>;
<a name="l00121"></a>00121         exit(1);
<a name="l00122"></a>00122       }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=lo; i&lt;=hi; i++)
<a name="l00125"></a>00125       {
<a name="l00126"></a>00126         the_point[i] = <a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db" title="return real x s.t. that fraction R of probability lies below x">inv_cdf</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i], randvec[i]);
<a name="l00127"></a>00127       }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129       <span class="keywordflow">return</span> the_point;
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 
<a name="l00133"></a><a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b">00133</a>     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b" title="prior density of a labeled real point">PriorDensity</a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>&amp; LP)
<a name="l00134"></a>00134     {
<a name="l00135"></a>00135       rvector Pnt = LP.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137       <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)
<a name="l00138"></a>00138       {
<a name="l00139"></a>00139         <span class="keywordflow">return</span> 1.0;
<a name="l00140"></a>00140       }
<a name="l00141"></a>00141       <span class="keywordflow">else</span>
<a name="l00142"></a>00142       {
<a name="l00143"></a>00143         <span class="comment">// -1*log of prior density</span>
<a name="l00144"></a>00144         real mlpd = 0.0;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(Pnt); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(Pnt); i++)
<a name="l00147"></a>00147         {
<a name="l00148"></a>00148           mlpd -= Pnt[i];
<a name="l00149"></a>00149         }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151         <span class="keywordflow">return</span> <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(mlpd);
<a name="l00152"></a>00152       }
<a name="l00153"></a>00153     }
<a name="l00154"></a>00154 
<a name="l00161"></a><a class="code" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3">00161</a>     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3" title="return the point at which to bisect a labeled box along dimension k">BisectPt</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB, <span class="keywordtype">int</span> k)
<a name="l00162"></a>00162     { 
<a name="l00163"></a>00163       <span class="comment">// two new boxes should each get half the prior prob.</span>
<a name="l00164"></a>00164       real x2 = <a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db" title="return real x s.t. that fraction R of probability lies below x">inv_cdf</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[k], 0.5);
<a name="l00165"></a>00165       <span class="comment">//if(x1-x2 != 0.0){</span>
<a name="l00166"></a>00166       <span class="comment">//cout &lt;&lt; &quot;bisect pt: x1, x2: &quot; &lt;&lt; x1 </span>
<a name="l00167"></a>00167       <span class="comment">//  &lt;&lt; &quot;    &quot; &lt;&lt; x2 &lt;&lt; &quot;   &quot; &lt;&lt; (x1-x2) &lt;&lt; endl;</span>
<a name="l00168"></a>00168       <span class="comment">//}</span>
<a name="l00169"></a>00169       <span class="keywordflow">return</span> x2;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00177"></a><a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db">00177</a>     <span class="keyword">virtual</span> real <a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db" title="return real x s.t. that fraction R of probability lies below x">inv_cdf</a>(interval I, real R)
<a name="l00178"></a>00178     {
<a name="l00179"></a>00179       <span class="comment">// cout &lt;&lt; &quot;In inv_cdf. PriorType: &quot; &lt;&lt; PriorType &lt;&lt; endl;</span>
<a name="l00180"></a>00180       <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)?
<a name="l00181"></a>00181       <span class="comment">// Inf(I) + R*(diam(I))</span>
<a name="l00182"></a>00182       <span class="comment">// better than the line above? agrees with mid(I) when R=0.5</span>
<a name="l00183"></a>00183         (1.0 - R)*Inf(I) + R*Sup(I)
<a name="l00184"></a>00184         : Inf(I) - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 - R*(1.0 - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-diam(I))));
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="comment">// ***************** non-virtual functions</span>
<a name="l00188"></a>00188 
<a name="l00190"></a><a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5">00190</a>     <span class="keywordtype">void</span> <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a>(<span class="keywordtype">bool</span> LogPi)
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192       <a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a> = LogPi;
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194 
<a name="l00196"></a><a class="code" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92">00196</a>     <span class="keywordtype">bool</span> <a class="code" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92" title="get the target scale being used">getUsingLogDensity</a>()
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198       <span class="keywordflow">return</span> <a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>;
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200 
<a name="l00202"></a><a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669">00202</a>     <span class="keywordtype">int</span> <a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669" title="Get the dimensions of the list of labeled domains.">getLabeledDomainDim</a>(<span class="keywordtype">int</span> label)<span class="keyword"> const</span>
<a name="l00203"></a>00203 <span class="keyword">    </span>{
<a name="l00204"></a>00204       <span class="keywordtype">int</span> retValue = 0;
<a name="l00205"></a>00205       <span class="keywordtype">bool</span> foundLabel = 0;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207       vector&lt;LabBox&gt;::const_iterator it;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209       it = <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.begin();
<a name="l00210"></a>00210 
<a name="l00211"></a>00211       <span class="keywordflow">while</span>(!foundLabel &amp;&amp; it &lt; <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.end())
<a name="l00212"></a>00212       {
<a name="l00213"></a>00213         <span class="keywordflow">if</span> (it-&gt;L == label)
<a name="l00214"></a>00214         {
<a name="l00215"></a>00215           foundLabel = 1;
<a name="l00216"></a>00216           retValue = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(it-&gt;Box) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Box) + 1;
<a name="l00217"></a>00217         }
<a name="l00218"></a>00218         it++;
<a name="l00219"></a>00219       }
<a name="l00220"></a>00220       <span class="keywordflow">return</span> retValue;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222 
<a name="l00224"></a><a class="code" href="classFobj.shtml#a69285b7966b3711d04dadf874ae6332a">00224</a>     vector&lt;LabBox&gt; <a class="code" href="classFobj.shtml#a69285b7966b3711d04dadf874ae6332a" title="Get the list of labeled domains.">get_domain</a>()<span class="keyword"> const</span>
<a name="l00225"></a>00225 <span class="keyword">    </span>{
<a name="l00226"></a>00226       <span class="keywordflow">return</span> <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>;
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 
<a name="l00230"></a><a class="code" href="classFobj.shtml#aab479dd3bf44fa338cbab0991b783189">00230</a>     vector&lt;int&gt; <a class="code" href="classFobj.shtml#aab479dd3bf44fa338cbab0991b783189" title="Get the set of unique integer labels in LabDomainList.">get_labelset</a>()
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232       set&lt;int&gt; LS;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234       <span class="keywordflow">for</span>(vector&lt;LabBox&gt;::const_iterator it = <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.begin();
<a name="l00235"></a>00235           it != <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.end(); it++) LS.insert(it-&gt;L);
<a name="l00236"></a>00236       vector&lt;int&gt; LV;
<a name="l00237"></a>00237       <span class="keywordflow">for</span>(set&lt;int&gt;::const_iterator it = LS.begin(); 
<a name="l00238"></a>00238           it != LS.end(); it++) LV.push_back(*it);
<a name="l00239"></a>00239       <span class="keywordflow">return</span> LV;
<a name="l00240"></a>00240     }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 };                  <span class="comment">// end of Fobj declarations and definitions</span>
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 <span class="comment">// ******************************************* Fobj definitions ****************</span>
<a name="l00245"></a>00245 
<a name="l00251"></a><a class="code" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5">00251</a> <span class="keyword">inline</span> real <a class="code" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5" title="a defined pure virtual function for default Lebesgue measure (volume) of a labelled box...">Fobj::LabBoxVolume</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB)
<a name="l00252"></a>00252 {
<a name="l00253"></a>00253   real volume = 1.0;
<a name="l00254"></a>00254   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= VecLen(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++) volume *= diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]);
<a name="l00255"></a>00255   <span class="keywordflow">return</span> volume;
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00263"></a><a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf">00263</a> <span class="keyword">inline</span> real <a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">Fobj::LabBoxPriorIntegral</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; LB)
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265   real integral = 1.0;
<a name="l00266"></a>00266   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= VecLen(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++)
<a name="l00267"></a>00267   {
<a name="l00268"></a>00268     integral *= (<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)? 
<a name="l00269"></a>00269       diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]): <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-Inf(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i])) - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-Sup(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]));
<a name="l00270"></a>00270   }
<a name="l00271"></a>00271   <span class="keywordflow">return</span> integral;
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 
<a name="l00275"></a><a class="code" href="classFobj.shtml#abe7df6a2da2b1d26915b41128d7693fe">00275</a> <span class="keyword">inline</span> HessType <a class="code" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad" title="a pure virtual function for interval image of boxes under Fobj">Fobj::operator()</a>(<span class="keyword">const</span> HTvector&amp; x, <span class="keyword">const</span> <span class="keywordtype">int</span> label)<span class="keyword"> const</span>
<a name="l00276"></a>00276 <span class="keyword"></span>{
<a name="l00277"></a>00277   HessType hh(1);
<a name="l00278"></a>00278   hh = 0.0;
<a name="l00279"></a>00279   <span class="keywordflow">return</span> hh;
<a name="l00280"></a>00280 }
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 <span class="comment">// ************************************ Fobj1D definition and declaration ******</span>
<a name="l00283"></a>00283 
<a name="l00288"></a><a class="code" href="classFobj1D.shtml">00288</a> <span class="keyword">class </span><a class="code" href="classFobj1D.shtml" title="abstract class for one-dimensional function objects">Fobj1D</a>
<a name="l00289"></a>00289 {
<a name="l00290"></a>00290   <span class="keyword">protected</span>:
<a name="l00291"></a>00291 
<a name="l00292"></a><a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">00292</a>     <span class="keywordtype">bool</span> <a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">UsingLogDensity</a>;
<a name="l00293"></a>00293 
<a name="l00294"></a><a class="code" href="classFobj1D.shtml#ad2c10838556997430a304824b745e090">00294</a>     vector&lt;LabBox&gt; <a class="code" href="classFobj1D.shtml#ad2c10838556997430a304824b745e090">LabDomainList</a>;
<a name="l00295"></a>00295 
<a name="l00296"></a><a class="code" href="classFobj1D.shtml#a37fff89dd0ffdea65e7dad2b148eb629">00296</a>     vector&lt;real&gt; <a class="code" href="classFobj1D.shtml#a37fff89dd0ffdea65e7dad2b148eb629">LabDomainPriorIntegralList</a>;
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="keyword">public</span>:
<a name="l00299"></a>00299     <span class="comment">// Destructor</span>
<a name="l00300"></a><a class="code" href="classFobj1D.shtml#aa878f95df9f5798d2050e113ea97dea7">00300</a>     <span class="keyword">virtual</span> <a class="code" href="classFobj1D.shtml#aa878f95df9f5798d2050e113ea97dea7">~Fobj1D</a>(){}
<a name="l00301"></a>00301 
<a name="l00302"></a><a class="code" href="classFobj1D.shtml#ab11d43cdd2d745e945890d95d86f015d">00302</a>     <span class="keywordtype">void</span> <a class="code" href="classFobj1D.shtml#ab11d43cdd2d745e945890d95d86f015d">setUsingLogDensity</a>(<span class="keywordtype">bool</span> LogPi)
<a name="l00303"></a>00303     {
<a name="l00304"></a>00304       <a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">UsingLogDensity</a> = LogPi;
<a name="l00305"></a>00305     }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307     <span class="keyword">virtual</span> interval <a class="code" href="classFobj1D.shtml#ae7708006f849c35e8e1234faa1ec4140">operator()</a>(<span class="keyword">const</span> interval&amp; LB) <span class="keyword">const</span> = 0;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <span class="keyword">virtual</span> real <a class="code" href="classFobj1D.shtml#ae7708006f849c35e8e1234faa1ec4140">operator()</a>(<span class="keyword">const</span> real&amp; LP) <span class="keyword">const</span> = 0;
<a name="l00310"></a>00310 
<a name="l00311"></a><a class="code" href="classFobj1D.shtml#a7a4b486c3e3c08c1d3b2cf7dc66497f6">00311</a>     <span class="keywordtype">bool</span> <a class="code" href="classFobj1D.shtml#a7a4b486c3e3c08c1d3b2cf7dc66497f6">getUsingLogDensity</a>()
<a name="l00312"></a>00312     {
<a name="l00313"></a>00313       <span class="keywordflow">return</span> <a class="code" href="classFobj1D.shtml#a538b74d7dc5b9e3652c2a36950f25de9">UsingLogDensity</a>;
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classFobj1D.shtml#ab13c2a6d58d85b97bfb8c8b7e3c7cbdd">00316</a>     vector&lt;LabBox&gt; <a class="code" href="classFobj1D.shtml#ab13c2a6d58d85b97bfb8c8b7e3c7cbdd">get_domain</a>()<span class="keyword"> const</span>
<a name="l00317"></a>00317 <span class="keyword">    </span>{
<a name="l00318"></a>00318       <span class="keywordflow">return</span> <a class="code" href="classFobj1D.shtml#ad2c10838556997430a304824b745e090">LabDomainList</a>;
<a name="l00319"></a>00319     }
<a name="l00320"></a>00320 };                  <span class="comment">// end of FOBJ1D declarations and definitions</span>
<a name="l00321"></a>00321 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Fobj_8hpp.shtml">Fobj.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
