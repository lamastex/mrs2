<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FRosenbrock.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FRosenbrock_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FRosenbrock.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FRosenbrock_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="FRosenbrock_8hpp.shtml" title="Declarations for example function class FRosenbrock (Rosenbrock function).">FRosenbrock.hpp</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="comment">// Constructor</span>
<a name="l00028"></a>00028 <span class="comment">// if LogPi is true, the log of this will be returned</span>
<a name="l00029"></a><a class="code" href="classFRosenbrock.shtml#a98f8543097e580a8013c04fe2451ba80">00029</a> <a class="code" href="classFRosenbrock.shtml#a98f8543097e580a8013c04fe2451ba80" title="Constructor.">FRosenbrock::FRosenbrock</a> (<span class="keywordtype">int</span> n_dimensions, real T, real H, real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>, 
<a name="l00030"></a>00030                           <span class="keywordtype">bool</span> LogPi):num_dim (n_dimensions), <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> (T),
<a name="l00031"></a>00031 <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> (H)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033   <a class="code" href="classFRosenbrock.shtml#acedba3d3f792270d8b4f13a517b8d5d6" title="Track number of real function calls.">n_interval_calls</a> = 0;
<a name="l00034"></a>00034   <a class="code" href="classFRosenbrock.shtml#a65918b19b6ee08ea197bc021c2b6ea5e">n_real_calls</a> = 0;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00037"></a>00037   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = 0;<span class="comment">// Uniform PriorType is an inherited member from Fobj</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="comment">// set up the domain</span>
<a name="l00040"></a>00040   ivector domain (1, n_dimensions);
<a name="l00041"></a>00041   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>  Ldomain;
<a name="l00042"></a>00042   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n_dimensions; i++)
<a name="l00043"></a>00043   {
<a name="l00044"></a>00044     domain[i] = interval (-DomainLimit, DomainLimit);
<a name="l00045"></a>00045   }
<a name="l00046"></a>00046   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00047"></a>00047   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00048"></a>00048   <span class="comment">//LabDomainList is a data member of the base Fobj class</span>
<a name="l00049"></a>00049   <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// operator() returning interval</span>
<a name="l00053"></a><a class="code" href="classFRosenbrock.shtml#a31adc48845c9b35628d57497cff8666c">00053</a> interval <a class="code" href="classFRosenbrock.shtml#a31adc48845c9b35628d57497cff8666c" title="interval operator()">FRosenbrock::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp; X)<span class="keyword"> const</span>
<a name="l00054"></a>00054 <span class="keyword"></span>{
<a name="l00055"></a>00055   <a class="code" href="classFRosenbrock.shtml#acedba3d3f792270d8b4f13a517b8d5d6" title="Track number of real function calls.">n_interval_calls</a>++;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00058"></a>00058 
<a name="l00059"></a>00059   interval result = _interval (0.0);
<a name="l00060"></a>00060 
<a name="l00061"></a>00061   <span class="keywordflow">if</span> (<a class="code" href="classFRosenbrock.shtml#a3f272a55285032eee5564b0f76e9d173">num_dim</a> == 1)
<a name="l00062"></a>00062   {
<a name="l00063"></a>00063     result = (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (1.0 - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[a])) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[a] - 1.0));
<a name="l00064"></a>00064   }
<a name="l00065"></a>00065   <span class="keywordflow">else</span>
<a name="l00066"></a>00066   {
<a name="l00067"></a>00067     <span class="keywordflow">for</span> (i = a + 1; i &lt;= z; i++)
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069       result = result + (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i - 1])) +
<a name="l00070"></a>00070         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i - 1] - 1.0));
<a name="l00071"></a>00071     }
<a name="l00072"></a>00072   }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(<a class="code" href="classFRosenbrock.shtml#a3c530d7ceef6d4fd854ab755a70c786e">Tinverse</a> * result));
<a name="l00075"></a>00075   <span class="comment">//if(Sup(result) &lt; 0.0) Sup(result) = 0.0;</span>
<a name="l00076"></a>00076   <span class="comment">//if(Inf(result) &lt; 0.0) Inf(result) = 0.0;</span>
<a name="l00077"></a>00077   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00078"></a>00078 }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">// operator () returning real</span>
<a name="l00081"></a><a class="code" href="classFRosenbrock.shtml#aa626842acb0907225aa493f048996535">00081</a> real <a class="code" href="classFRosenbrock.shtml#a31adc48845c9b35628d57497cff8666c" title="interval operator()">FRosenbrock::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp; X)<span class="keyword"> const</span>
<a name="l00082"></a>00082 <span class="keyword"></span>{
<a name="l00083"></a>00083   <a class="code" href="classFRosenbrock.shtml#a65918b19b6ee08ea197bc021c2b6ea5e">n_real_calls</a>++;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   real result = 0.0;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="keywordflow">if</span> (<a class="code" href="classFRosenbrock.shtml#a3f272a55285032eee5564b0f76e9d173">num_dim</a> == 1)
<a name="l00090"></a>00090   {
<a name="l00091"></a>00091     result = (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (1.0 - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[a])) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[a] - 1.0));
<a name="l00092"></a>00092   }
<a name="l00093"></a>00093   <span class="keywordflow">else</span>
<a name="l00094"></a>00094   {
<a name="l00095"></a>00095     <span class="keywordflow">for</span> (i = a + 1; i &lt;= z; i++)
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097       result = result + (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i - 1])) +
<a name="l00098"></a>00098         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i - 1] - 1.0));
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100   }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(<a class="code" href="classFRosenbrock.shtml#a3c530d7ceef6d4fd854ab755a70c786e">Tinverse</a> * result));
<a name="l00103"></a>00103   <span class="comment">//if(result &lt; 0.0) result = 0.0;</span>
<a name="l00104"></a>00104   <span class="comment">//if(result &lt; 0.0) result = 0.0;</span>
<a name="l00105"></a>00105   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="comment">// operator() returning HessType</span>
<a name="l00110"></a>00110 <span class="comment">// label is not used but needed to match Fobj signature</span>
<a name="l00111"></a><a class="code" href="classFRosenbrock.shtml#a47652c3d90874911897f9601f7003e8f">00111</a> HessType <a class="code" href="classFRosenbrock.shtml#a31adc48845c9b35628d57497cff8666c" title="interval operator()">FRosenbrock::operator()</a>(<span class="keyword">const</span> HTvector&amp; x, <span class="keyword">const</span> <span class="keywordtype">int</span> label)<span class="keyword"> const</span>
<a name="l00112"></a>00112 <span class="keyword"></span>{
<a name="l00113"></a>00113 
<a name="l00114"></a>00114   HessType hh(<a class="code" href="classFRosenbrock.shtml#a3f272a55285032eee5564b0f76e9d173">num_dim</a>);
<a name="l00115"></a>00115   hh = 0.0;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="keywordflow">if</span> (<a class="code" href="classFRosenbrock.shtml#a3f272a55285032eee5564b0f76e9d173">num_dim</a> == 1)
<a name="l00118"></a>00118   {
<a name="l00119"></a>00119     hh = (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (1.0 - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[1])) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[1] - 1.0));
<a name="l00120"></a>00120   }
<a name="l00121"></a>00121   <span class="keywordflow">else</span>
<a name="l00122"></a>00122   {
<a name="l00123"></a>00123     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 2; i &lt;= <a class="code" href="classFRosenbrock.shtml#a3f272a55285032eee5564b0f76e9d173">num_dim</a>; i++)
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125       hh = hh + (<a class="code" href="classFRosenbrock.shtml#a2436ec0b9bb9efae5c029842ff6fd17e" title="Track number of interval function calls.">Height</a> * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[i-1])) +
<a name="l00126"></a>00126         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (x[i - 1] - 1.0));
<a name="l00127"></a>00127     }
<a name="l00128"></a>00128   }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130   hh = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(<a class="code" href="classFRosenbrock.shtml#a3c530d7ceef6d4fd854ab755a70c786e">Tinverse</a> * hh));
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (hh) : hh;
<a name="l00133"></a>00133 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FRosenbrock_8cpp.shtml">FRosenbrock.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
