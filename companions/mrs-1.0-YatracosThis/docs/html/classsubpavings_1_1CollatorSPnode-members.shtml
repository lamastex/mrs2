<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Member List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1CollatorSPnode.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpavings::CollatorSPnode Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ae156be7c91a97c25628edc6fcf00e1f9">_marginalise</a>(const CollatorSPnode *const rhs, const std::vector&lt; int &gt; &amp;outDims)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17">_reshapeToUnion</a>(const SPnode *const other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3">accept</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe">acceptSPCheckVisitor</a>(const SPCheckVisitor &amp;visitor) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4">addNegatedPaving</a>(const CollatorSPnode *const spn, double c)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177">addPaving</a>(CollatorSPnode *const spn)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437">addPavings</a>(const CollatorSPnode *const lhs, const CollatorSPnode *const rhs)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f">checkTreeStateLegal</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aa14e448dca22fa7c14de4d21c0624b26">CollatorSPnode</a>(const SPSnode *const spn, size_t bigN)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a6f444e76ad6e0c65535e6278dbd775e5">CollatorSPnode</a>()</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a561b7d137e120403d17008ff837e0036">CollatorSPnode</a>(const SPSnode *const spn)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab4777c2f663dd1faaed8568fd0707a51">CollatorSPnode</a>(ivector &amp;v, int lab, VecDbl summ)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a4a01094e0378f8563fbbf40461d5b488">CollatorSPnode</a>(const CollatorSPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591">collectRange</a>(SPnodeVisitor &amp;visitor)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e">dimension</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a3a0733086ac4a95e954da0cd8f0e1dfa">dotDifferenceSummary</a>(VecDbl &amp;lhsSummary, VecDbl &amp;rhsSummary)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a66a1a3e5a8c9c81e4f3b307360c2c495">dotDiffPaving</a>(CollatorSPnode *const spn)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a7fa06e6f1d278157e7c5c6a9d44e2c07">getAllNodes</a>(std::vector&lt; CollatorSPnode * &gt; &amp;allNodes) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac">getBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5">getChildNodeNames</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897">getConstSPnodeLeaves</a>(SPnodeConstPtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864">getDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b">getDimension</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a944e27bc584e24e630411e787456ffe0">getL1DistancesToAverage</a>(RealVec &amp;container) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e">getLabel</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae">getLargestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a5ac89a38985d8ff62ca7a29943c6734c">getLeafNodeAbsAreaAccumulations</a>(VecDotPrec &amp;areaAcc) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ac0b072587e955a451fab739dcb538c37">getLeafNodeAbsAreaAccumulations</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a0afe525dbddf958078e9a8eac6ea88a3">getLeafNodeAbsAreaAccumulationTotal</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b">getLeafNodeLevels</a>(IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab2d91d997064dccc3c1a6f80bd27c6ef">getLeafNodeLevels</a>(const int level, IntVec &amp;levels) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7">getLeafNodeLevelsJ</a>(IntVec &amp;levels, int level=0) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72">getLeafNodeLevelsString</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a7daf828f08626b5b83654550e5a98bee">getLeafNodeSummaryAccumulations</a>(VecDotPrec &amp;summAcc) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a8c566a24d35898fb54133cf310276468">getLeafNodeSummaryAccumulations</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5">getLeafNodeVolumes</a>(RealVec &amp;vols) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(std::vector&lt; CollatorSPnode * &gt; &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a5e1b32d7fffa9cfc7865b384c2e89a82">getLeftChild</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a72b47c222d49deba3753259d94d730c3">getNodeDelta</a>(int thisTheta, size_t sizeColl)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81">getNodeDepth</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db">getNodeName</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23">getNumberLeaves</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a6470a98dd502247ca9e86582b3c422eb">getNumberSummarised</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aed3cb2aceae3c384eed427a404a6c8f6">getParent</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab93823657d610d99e885317c2cf2e8f6">getRightChild</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a9509d8f49407c1b14148f80758f02646">getScheffeNode</a>(int theta1, int theta2)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246">getScheffeSet</a>(std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &amp;ScheffeSet, size_t cand1, size_t cand2)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d">getSmallestLeafVol</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab374777116b7e0af8e7100f303e1f97b">getSplitDim</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878">getSPnodeLeaves</a>(SPnodePtrs &amp;leaves) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800">getSummary</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a700f585b2b61663330b999f459045822">getSumVarsAreaScalar</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a4c623e6456d3ced424aebba699c33fd9">getSumVarsTotalSummarisedValueScalar</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a77e75118f31767497377790cd87e3869">getTotalSummary</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a8c48fd024a9e569830168a3f301d798e">getTotalSummaryAv</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9">getYatSet</a>(std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &amp;YatSetRow, std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &amp;YatSetCol, size_t cand1, size_t cand2)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad">hasLCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e">hasLeafSibling</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa">hasRCwithBox</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5e79ff65a692b09c98ff53264ddfba9f">ImageSp</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#adda5afc72873dc3875f341ecbb947b23">ImageSpNonMinimal</a>(PIVF f, SPnode *spn, double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593">isEmpty</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7">isLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc">isSubLeaf</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb">label</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a0ea530d232bf3bb09e6cf44eeeadbfde">leafAccumulationOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a9fe7256f1a62884e4bb8599a63abbbdf">leafAverageOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#acdad2b87cf5f979fb24a7aef392a5895">leafMakeNewFhat</a>(double wt, std::vector&lt; double &gt; &amp;fhatNew)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab2e1cd11ef3dd4424cf491e529ed0fd8">leafOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2">leavesAccumulationOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122">leavesAverageOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">leavesMakeNewFhat</a>(double wt, std::vector&lt; double &gt; &amp;fhatNew)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5">leavesOutputTabs</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac0d9484691c21a316308b4713e6e8bba">subpavings::SPnode::leavesOutputTabs</a>(std::ostream &amp;os, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646">leftChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ac71288d7ccff2a3ddf1509f5b3a54930">makeAverageCollation</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ac1d9ea49286eb953b7bc71f89c15f8ec">makeDifferencesToAveragePaving</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93">makeTreeFromLeaves</a>(ivector &amp;root, ImageList &amp;leafList)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08">makeTreeFromVoxels</a>(ivector &amp;root, ImageList &amp;leafList, double spacing, size_t dim)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aec7d6bcee79660a09914100f9b878611">marginalise</a>(const CollatorSPnode *const rhs, const std::vector&lt; int &gt; &amp;reqDims)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a812d98c784af382c4a697555a7b0445f">nodeAccumulation</a>() const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f">nodeAddLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26">nodeAddRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aca275f3faaa0170c0612f368bae4acdf">nodeAdoptLeft</a>(CollatorSPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16">subpavings::SPnode::nodeAdoptLeft</a>(SPnode *lChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a324588afd881d4e695f42f4a286b33a7">nodeAdoptRight</a>(CollatorSPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676">subpavings::SPnode::nodeAdoptRight</a>(SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#aeb5549c6c555a65ee6cf71e779873b67">nodeCheckColSummary</a>(int theta, int k)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#af089a7955e0dd12ef33af3ec4bfc6627">nodeCheckRowSummary</a>(int theta, int k)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb">nodeContains</a>(const rvector &amp;p, OPERATIONS_ON childInd=ON_PARENT) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#af0789230e2a9612f9b0644113e318f37">nodeExpand</a>(int comp)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ad54fcce3c5c904f7ecf0f5042515e1a5">nodeExpand</a>()</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a3b16d632897f3a4fb11f36db1e9004bf">subpavings::SPnode::nodeExpand</a>(bool boolVal)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610">nodeName</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a3ba268993642c1fd5c702966a4fd4fba">nodeNegate</a>(double c)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ab58b8d4c3a8a879930da943dbe2dd62d">nodePrint</a>(std::ostream &amp;os) const </td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36">nodeReabsorbChildren</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347">nodeRealVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#ace8192ce1536f578c73c7aa12bb49e35">nodeReunite</a>(CollatorSPnode *lChild, CollatorSPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc">subpavings::SPnode::nodeReunite</a>(SPnode *lChild, SPnode *rChild)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(std::ostream &amp;os, int level) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7408768856a7c988d9784b6172d74310">nodesAllOutput</a>(std::ostream &amp;os, int level, int prec) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb">nodeVolume</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a01020423e529685b484b95a73b6432ee">operator=</a>(const CollatorSPnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666">subpavings::SPnode::operator=</a>(const SPnode &amp;rhs)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96">outputGraphDot</a>() const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8">parent</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e">recursiveRename</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a1113235b4bedd4a2849cc8e6dae719dc">reshapeToUnion</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd">rightChild</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db">setLabel</a>(int lab)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f">setNodeName</a>(std::string newname)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ace7e46329dbdb96110f7f24bba46ee93">Sivia</a>(PIBT BoolTest, const SPnode *const toInvert, SPnode *const search, const double eps)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3">spContains</a>(const ivector &amp;z) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a56f98ed5bc26b9b11dfce51f3e667e2b">spContains</a>(const rvector &amp;p) const </td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">spLeafBoxDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">spLeafBoxIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">spLeafBoxOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b">splitLeft</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea">splitRootToShape</a>(std::string instruction)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54">SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ad43955b79e832489150c70b6aa4e3f05">SPnode</a>(const ivector &amp;v)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#acd1241250563fcabfd1fc1d069e2065d">SPnode</a>(const LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a7a41d88bc0857db595850fd2c7f1a4fa">SPnode</a>(ivector &amp;v, int lab=0)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#ac91f261853f289d2ccf7102cd543a0d4">SPnode</a>(LabBox &amp;lb)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aeafa6189ea2d85037ab6579471a947be">SPnode</a>(const SPnode &amp;other)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a79e263c5e6b22baeb2f4e543f33f6d5e">subtractPavings</a>(const CollatorSPnode *const lhs, const CollatorSPnode *const rhs, double c)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#abecd2f87f50d84f2c3d04e6b0b15a5ec">summary</a></td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td><code> [mutable, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb">swap</a>(SPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a3b6cd985321d1ecae0a856ab881d6e62">swapCollator</a>(CollatorSPnode &amp;spn)</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832">theBox</a></td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml#a0e8574a8a951a2716cbb29b8e1fbbc33">totaliseSummaries</a>()</td><td><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">subpavings::CollatorSPnode</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(BoxVec &amp;boxes, ivector box1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(BoxVec &amp;boxes, const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">volDifference</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">volIntersection</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">volOuterJacket</a>(const SPnode *const spn1, const SPnode *const spn2)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa">vtkPaving</a>(const std::string filename)</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef">~SPnode</a>()</td><td><a class="el" href="classsubpavings_1_1SPnode.shtml">subpavings::SPnode</a></td><td><code> [virtual]</code></td></tr>
</table></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:33 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
