<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FinMixScheffe.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FinMixScheffe_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FinMixScheffe.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
<code>#include &lt;limits&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
</div>
<p><a href="FinMixScheffe_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FinMixScheffe_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="FinMixScheffe.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="FinMixScheffe_8cpp_source.shtml#l00044">44</a> of file <a class="el" href="FinMixScheffe_8cpp_source.shtml">FinMixScheffe.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00466">subpavings::AdaptiveHistogramVCollator::addToCollationWithVal()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l04065">getFinMixIntervalTrueDelta()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l01387">subpavings::AdaptiveHistogramVCollator::getMinDistEst()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00341">subpavings::AdaptiveHistogramVCollator::getNumberCollated()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00709">subpavings::AdaptiveHistogramValidation::insertFromRVecForHoldOut()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03367">subpavings::AdaptiveHistogramValidation::outputToTxtTabs()</a>, <a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">subpavings::AdaptiveHistogramValidation::prioritySplitAndEstimate()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l02244">subpavings::AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//===========user-defined parameters==============================//</span>
  <span class="keywordflow">if</span> ( argc != 7 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix simNum maxCheck maxLeaves&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">size_t</span> simNum = atoi(argv[4]); <span class="comment">//which data set </span>
   <span class="keywordtype">int</span> maxCheck = atoi(argv[5]); <span class="comment">//stopping criteria for MDE</span>
   <span class="keywordtype">size_t</span> critLeaves = atoi(argv[6]); <span class="comment">// maximum number of leaves</span>
   
   <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
  <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(10);
   std::ostringstream stm;
  stm &lt;&lt; simNum;

  <span class="comment">//==============get distribution parameters==========================//</span>
   <span class="comment">// read input from mix*.txt</span>
   <span class="keywordtype">string</span> mixfileName;
   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stmMix;
  stmMix &lt;&lt; mix;
  mixfileName += stmMix.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;

  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(mixfileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();
  
  <span class="comment">//put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
  <span class="comment">//=========================end of setting up parameter===================//</span>

  <span class="comment">// ========prepare to generate some data for the tests ================//</span>
    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    gsl_rng_set(r, dataSeed);

   <span class="comment">//set up a random number generator for gaussian rvs</span>
     <span class="keyword">const</span> gsl_rng_type * T1;
     gsl_rng * r1;
     gsl_rng_env_setup();
     T1 = gsl_rng_default;
     r1 = gsl_rng_alloc (T1);
     gsl_rng_set(r1, dataSeed);
     
  <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
  <span class="keywordtype">double</span> a=0, b=1;
  vector&lt;double&gt; u;
  <span class="keywordtype">int</span> j;
  <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
      u.push_back(gsl_ran_flat(r, a, b));
  }

  <span class="comment">// number of components</span>
  <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
  cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;

    <span class="comment">//convert vector to array</span>
   <span class="keywordtype">double</span> WeightsArray[comp];
   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; comp; i++) {
      WeightsArray[i] = Weight[i];
   }
 
    <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
   <span class="comment">//i.e. the box indices with their weights</span>
   gsl_ran_discrete_t* gslpdfstruct;
   gslpdfstruct = gsl_ran_discrete_preproc(comp, WeightsArray);

  <span class="comment">//Create mixture data using component densities that are normal.</span>
  cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;

   <span class="comment">// make a simulated data set</span>
  <span class="comment">// data sampled as weighted-uniform-mixtures</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
    rvector thisrv(1);
    <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
    <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
    <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[proposedIndex]); <span class="comment">// generate a normal r.v.</span>
    thisrv[1] =Mean[proposedIndex]+z; <span class="comment">// transform the r.v. </span>
    theData.push_back(thisrv);
  }
  

  ivector pavingBox;
  <span class="keywordtype">double</span> rootBoxVol;
  <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
  <span class="comment">//===============finish generating data============================//</span>

  <span class="comment">//==================Hold-out MDE===========================================</span>
  cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
  <span class="comment">//containers for output needed</span>
  vector&lt;real&gt; IAEV;
  vector&lt;int&gt; NumLeafNodesV;
  vector&lt;double&gt; timings;
  <span class="keywordtype">double</span> timing = 0;
  
  <span class="comment">// stopping criteria </span>
  <span class="keywordtype">bool</span> stopCrit = <span class="keyword">true</span>; <span class="comment">// to remove this?</span>

  <span class="comment">//maximum number of leaf nodes allowed</span>
  <span class="keywordtype">int</span> holdOutCount = int(n/3);
  <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
  cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
      &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
  <span class="comment">//size_t maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); // temporarily</span>
  <span class="keywordtype">size_t</span> maxLeafNodes = n;
  <span class="comment">//cout &lt;&lt; &quot;max leaf nodes: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>

  <span class="comment">// indicators</span>
   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion5 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion6 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion7 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion8 = <span class="keyword">false</span>;
   
   
   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit5 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit6 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit7 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit8 = <span class="keyword">false</span>;
   
   
   <span class="comment">// comparison objects</span>
   <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> compCount;
   <a class="code" href="classsubpavings_1_1CompVolVal.shtml" title="Class comparing on volume of box of node.">CompVolVal</a> compVol;
   <a class="code" href="classsubpavings_1_1CompAreaVal.shtml" title="Class comparing the area of a histogram.">CompAreaVal</a> compArea;
   <a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMassVal</a> compMeanMass;
   <a class="code" href="classsubpavings_1_1CompCovarVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarVal</a> compCovarMass;
   <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassVal</a> compH;
   <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiamVal</a> compHD;
   <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   

  <span class="keywordtype">int</span> finalK = 1;
  <span class="comment">//CritLargestCount_LTEV critCount(finalK);</span>
  <span class="keywordtype">size_t</span> minChildPoints = 0;
  <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTEV</a> critCount(critLeaves);

  <span class="comment">//container for scheffe tournament candidates</span>
  vector&lt;AdaptiveHistogramValidation&gt; optHist;

  cout &lt;&lt; <span class="stringliteral">&quot;PQ1&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal1;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist1;
  <span class="keywordtype">int</span> m = 1;
  successfulInsertion1 = myHistVal1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion1) {
    clock_t start, end;
    start = clock();
    successfulPQSplit1 = myHistVal1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(compCount, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minChildPoints, 
                         0.0, stopCrit, mixt, m, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist1);
    end = clock();
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit1) { 
      optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ1.txt&quot;</span>);
      optHist.push_back(optHist1); 
      timings.push_back(timing);
    }
  }
  
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ2 &quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal2;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist2;   
  m=2;
  successfulInsertion2 = myHistVal2.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion2) {
    clock_t start, end;
    start = clock();
    successfulPQSplit2 = myHistVal2.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(compVol, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, m, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist2);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit2) { 
      optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ2.txt&quot;</span>);
      optHist.push_back(optHist2); timings.push_back(timing); }
  }
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ3&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal3;   
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist3;
  successfulInsertion3 = myHistVal3.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion3) {
    clock_t start, end;
    start = clock();
    successfulPQSplit3 = myHistVal3.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(compVol, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, 3, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist3);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit3) { 
      optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ3.txt&quot;</span>);
      optHist.push_back(optHist3); timings.push_back(timing);}
  }
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ4&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal4;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist4;
  successfulInsertion4 = myHistVal4.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);

  <span class="keywordflow">if</span> (successfulInsertion4) {
    clock_t start, end;
    start = clock();
    successfulPQSplit4 = myHistVal4.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(compArea, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, 4, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist4);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit4) { 
      optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ4.txt&quot;</span>);
      optHist.push_back(optHist4); timings.push_back(timing);}
  }
  
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ5&quot;</span> &lt;&lt;  endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal5(holdAllStats);   
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist5;
  successfulInsertion5 = myHistVal5.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="comment">//cout &lt;&lt; myHistVal5.getHoldAllStats() &lt;&lt; endl;</span>
  <span class="comment">//cout &lt;&lt; myHistVal5.getSubPaving() &lt;&lt; endl;</span>
  <span class="keywordflow">if</span> (successfulInsertion5) {
    clock_t start, end;
    start = clock();
    <span class="keywordtype">int</span> m = 5;
    successfulPQSplit5 = myHistVal5.prioritySplitAndEstimateWithSwitch(compMeanMass, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         minChildPoints, 0.0, stopCrit, mixt, m, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist5);
 
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit5) { 
      optHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ5.txt&quot;</span>);
      optHist.push_back(optHist5); timings.push_back(timing);
    }
  }
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ6&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal6(holdAllStats); 
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>  optHist6;
  successfulInsertion6 = myHistVal6.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion6) {
    clock_t start, end;
    start = clock();
    successfulPQSplit6 = myHistVal6.prioritySplitAndEstimateWithSwitch(compCovarMass, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, 6, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist6);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit6) { 
      optHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ6.txt&quot;</span>);
      optHist.push_back(optHist6); timings.push_back(timing);}
  }
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ7&quot;</span> &lt;&lt; endl &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal7(holdAllStats);   
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist7;
  
  successfulInsertion7 = myHistVal7.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion7) {
    clock_t start, end;
    start = clock();
    successfulPQSplit7 = myHistVal7.prioritySplitAndEstimateWithSwitch(compH, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, 7, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist7);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit7) { 
      optHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ7.txt&quot;</span>);
      optHist.push_back(optHist7); timings.push_back(timing);}
  }
  
  cout &lt;&lt; <span class="stringliteral">&quot;\nPQ8&quot;</span> &lt;&lt; endl;
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal8(holdAllStats);
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> optHist8;
  successfulInsertion8 = myHistVal8.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  <span class="keywordflow">if</span> (successfulInsertion8) {
    clock_t start, end;
    start = clock();
    successfulPQSplit8 = myHistVal8.prioritySplitAndEstimateWithSwitch(compHD, 
                        critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                         0, 0.0, stopCrit, mixt, 8, simNum, 
                         maxLeafNodes, maxCheck, Tol, Deg, optHist8);
    end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulPQSplit8) { 
      optHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;HistPQ8.txt&quot;</span>);
      optHist.push_back(optHist8); timings.push_back(timing);}
  }
  
<span class="comment">//================start the Scheffe tournament======================//</span>
<span class="comment">//  if (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3 &amp;&amp;</span>
<span class="comment">//    successfulPQSplit4 &amp;&amp; successfulPQSplit5 &amp;&amp; successfulPQSplit6 &amp;&amp;</span>
<span class="comment">//    successfulPQSplit7 &amp;&amp; successfulPQSplit8) {</span>

  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  vector&lt;real&gt; TrueDelta;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
  <span class="keywordtype">size_t</span> agg = 0;
  vector&lt;real&gt; IAEMDE;
  vector&lt;real&gt; IAEMDEFull;

  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; optHist.size(); i++) {
    IAEMDE.push_back(mid(optHist[i].getFinMixIntervalIAE(mixt, Tol, Deg, 0)));
    IAEMDEFull.push_back(mid(optHist[i].getFinMixIntervalIAE(mixt, Tol, Deg, 1)));
    coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(optHist[i], 1, agg);
  }

  cout &lt;&lt; <span class="stringliteral">&quot;Get the Yatracos set for theorem checks: &quot;</span> &lt;&lt; endl;
  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecYatSet;

  vector&lt;double&gt; maxDelta;
  vector&lt;double&gt;::iterator it;
  clock_t start, end;
  start = clock();
  coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a130f3418c9610b38030221924a846011">getMinDistEst</a>(maxDelta, vecYatSet);
  end = clock();  
  timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
  timings.push_back(timing);  
  
  <span class="keywordtype">double</span> minMaxDelta = 100;
  real minMinIAE = 100;
  <span class="keywordtype">int</span> minPosIAE; 
  <span class="keywordtype">int</span> minPosDelta;
  
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>(); i++) {
    cout &lt;&lt; maxDelta[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAEMDE[i] &lt;&lt; endl;
    <span class="keywordflow">if</span> (maxDelta[i] &lt; minMaxDelta) { minPosDelta = i+1; minMaxDelta = maxDelta[i]; }
    <span class="keywordflow">if</span> (IAEMDE[i] &lt; minMinIAE) { minPosIAE = i+1; minMinIAE = IAEMDE[i]; }
  }

  cout &lt;&lt; <span class="stringliteral">&quot;Min IAE at candidate &quot;</span> &lt;&lt; minPosIAE &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAEMDE[minPosIAE] &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Min delta max at candidate &quot;</span> &lt;&lt; minPosDelta &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAEMDE[minPosDelta] &lt;&lt; endl;

  <span class="comment">//get the true Delta</span>
  vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt;::iterator vecYatSetIt;
  real trueDelta = 0.0;
  <span class="keywordflow">if</span> (!vecYatSet.empty()) {
    <span class="keywordflow">for</span> (vecYatSetIt = vecYatSet.begin(); vecYatSetIt &lt; vecYatSet.end(); vecYatSetIt++) {
      interval TrueDelta = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(mixt, Tol, Deg, *vecYatSetIt);
      real trueDeltaR = mid(TrueDelta);
      trueDeltaR = abs(trueDeltaR);
      <span class="comment">//cout &lt;&lt; trueDeltaR &lt;&lt; &quot;\t&quot;;</span>
      trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
      <span class="comment">//cout &lt;&lt; trueDelta &lt;&lt; endl; </span>
    }
    cout &lt;&lt; <span class="stringliteral">&quot;Delta over the Yatracos set: &quot;</span> &lt;&lt; trueDelta &lt;&lt; endl;
  }
  <span class="keywordflow">else</span> { trueDelta = -1; }
  
  <span class="keywordtype">string</span> deltaFile;
  deltaFile = <span class="stringliteral">&quot;TrueDeltaAll&quot;</span>;
  deltaFile += stm.str();
  deltaFile += <span class="stringliteral">&quot;.txt&quot;</span>;
  os.open(deltaFile.c_str());
  os &lt;&lt; trueDelta &lt;&lt; endl;
  os &lt;&lt; flush;
  os.close();


  <span class="keywordtype">string</span> IAEMDEFile = <span class="stringliteral">&quot;IAEMDEandDeltaMax&quot;</span>;
  IAEMDEFile += stm.str();
  IAEMDEFile += <span class="stringliteral">&quot;.txt&quot;</span>;
  os.open(IAEMDEFile.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEMDE.size(); i++) {
    os &lt;&lt; IAEMDE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAEMDEFull[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>&lt;&lt; maxDelta[i] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();

  <span class="keywordtype">string</span> TimeFile = <span class="stringliteral">&quot;Times&quot;</span>;
  TimeFile += stm.str();
  TimeFile += <span class="stringliteral">&quot;.txt&quot;</span>;
  os.open(TimeFile.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; timings.size(); i++) {
    os &lt;&lt; timings[i] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);
gsl_rng_free(r1);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FinMixScheffe_8cpp.shtml">FinMixScheffe.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
