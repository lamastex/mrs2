<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file:     spnode.cpp</span>
<a name="l00023"></a>00023 <span class="comment">\brief SPnode (SubPaving) and associated non-member function definitions</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// to use std input/output</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use exceptions</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// include fstream so as to be able to output a file from spImage</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="sptemplates_8hpp.shtml" title="Templatised functions using node type concepts.">sptemplates.hpp</a>&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="spnodevisitor_8hpp.shtml" title="definitions for SPnodeVisitor.">spnodevisitor.hpp</a>&quot;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="comment">//src_trunk_0701</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="subpaving__exception_8hpp.shtml" title="SubpavingException declarations.">subpaving_exception.hpp</a>&quot;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>std;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">namespace </span>subpavings {
<a name="l00056"></a>00056 
<a name="l00057"></a>00057     <span class="comment">// ----------------------- SPnode class definitions ------------------</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">//src_trunk_0701</span>
<a name="l00060"></a>00060 <span class="comment">// ------------------- private methods ------------------------------</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">//src_trunk_0701</span>
<a name="l00063"></a>00063 <span class="comment">// ensure theBox and children (if any) are deleted if constructed in failed constructor</span>
<a name="l00064"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a75618e8e46f82b309f744fc12927b2a9">00064</a> <span class="keywordtype">void</span> SPnode::constructor_error_handler() 
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066   <span class="keywordflow">try</span> {
<a name="l00067"></a>00067       <span class="keyword">delete</span> theBox;
<a name="l00068"></a>00068       theBox = NULL;
<a name="l00069"></a>00069   }
<a name="l00070"></a>00070   <span class="keywordflow">catch</span> (std::exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l00071"></a>00071   <span class="keywordflow">try</span> {
<a name="l00072"></a>00072       <span class="keyword">delete</span> leftChild;
<a name="l00073"></a>00073       leftChild = NULL;
<a name="l00074"></a>00074   }
<a name="l00075"></a>00075   <span class="keywordflow">catch</span> (std::exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l00076"></a>00076   <span class="keywordflow">try</span> {
<a name="l00077"></a>00077       <span class="keyword">delete</span> rightChild;
<a name="l00078"></a>00078       rightChild = NULL;
<a name="l00079"></a>00079   }
<a name="l00080"></a>00080   <span class="keywordflow">catch</span> (std::exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l00081"></a>00081   
<a name="l00082"></a>00082   <span class="keywordflow">throw</span>; <span class="comment">// rethrow the original exception</span>
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="comment">// -----------------protected methods</span>
<a name="l00086"></a>00086   
<a name="l00087"></a>00087   <span class="comment">// recursively split children according to instruction string</span>
<a name="l00088"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b">00088</a>     std::string SPnode::splitLeft(std::string instruction)
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090         std::string errorCode = <span class="stringliteral">&quot;XX&quot;</span>;
<a name="l00091"></a>00091         <span class="comment">// parse string to get first level out</span>
<a name="l00092"></a>00092         std::string comma = <span class="stringliteral">&quot;, &quot;</span>;
<a name="l00093"></a>00093         <span class="keywordtype">size_t</span> startpos = instruction.find_first_not_of(comma);
<a name="l00094"></a>00094         <span class="keywordtype">size_t</span> endpos = std::string::npos;
<a name="l00095"></a>00095         <span class="keywordtype">size_t</span> newstartpos = std::string::npos;
<a name="l00096"></a>00096         <span class="keywordtype">int</span> depth = 0;
<a name="l00097"></a>00097         std::string str = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00098"></a>00098         <span class="keywordflow">if</span> (startpos != std::string::npos) {
<a name="l00099"></a>00099             endpos = instruction.find_first_of(comma, startpos);
<a name="l00100"></a>00100             <span class="comment">//not the last digit</span>
<a name="l00101"></a>00101             <span class="keywordflow">if</span> (endpos != std::string::npos) {
<a name="l00102"></a>00102                 str = instruction.substr(startpos, endpos-startpos);
<a name="l00103"></a>00103                 newstartpos = instruction.find_first_not_of(comma,
<a name="l00104"></a>00104                                                         endpos + 1);
<a name="l00105"></a>00105             }
<a name="l00106"></a>00106             <span class="comment">//last digit</span>
<a name="l00107"></a>00107             <span class="keywordflow">else</span> {
<a name="l00108"></a>00108                 str = instruction.substr(startpos);
<a name="l00109"></a>00109             }
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111         depth = atoi(str.c_str()); <span class="comment">// 0 if not valid integer</span>
<a name="l00112"></a>00112         <span class="keywordflow">if</span> (depth == 0) {
<a name="l00113"></a>00113             std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem in parsing string&quot;</span> &lt;&lt; endl;
<a name="l00114"></a>00114             instruction = errorCode;
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116         <span class="keywordflow">else</span> { <span class="comment">// depth should be &gt; 0</span>
<a name="l00117"></a>00117             <span class="keywordtype">int</span> myDepth = nodeName.length() - 1;
<a name="l00118"></a>00118             <span class="keywordflow">if</span> (myDepth &lt; depth) { <span class="comment">// need to go down more</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120                 <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>()) {
<a name="l00121"></a>00121                     <span class="comment">// split, using the nodeExpand for this subtype if not base</span>
<a name="l00122"></a>00122                     nodeExpand();
<a name="l00123"></a>00123                 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                 <span class="comment">// send splitLeft instruction down to the left</span>
<a name="l00126"></a>00126                 instruction = getLeftChild()-&gt;splitLeft(instruction);
<a name="l00127"></a>00127                 <span class="keywordflow">if</span> (instruction != errorCode) {
<a name="l00128"></a>00128                     <span class="comment">// send splitLeft instruction to right child</span>
<a name="l00129"></a>00129                     instruction = getRightChild()-&gt;splitLeft(instruction);
<a name="l00130"></a>00130                 }
<a name="l00131"></a>00131             }
<a name="l00132"></a>00132             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (myDepth == depth) {     <span class="comment">// split enough</span>
<a name="l00133"></a>00133                 <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>()) {
<a name="l00134"></a>00134                     std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem with instruction string:&quot;</span> &lt;&lt; std::endl;
<a name="l00135"></a>00135                     std::cerr &lt;&lt; <span class="stringliteral">&quot;cannot use with current histogram&quot;</span> &lt;&lt; std::endl;
<a name="l00136"></a>00136                     instruction = errorCode;
<a name="l00137"></a>00137                 }
<a name="l00138"></a>00138                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (newstartpos != std::string::npos) {
<a name="l00139"></a>00139                     instruction = instruction.substr(newstartpos);
<a name="l00140"></a>00140                 }
<a name="l00141"></a>00141                 <span class="keywordflow">else</span> instruction = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00142"></a>00142             }
<a name="l00143"></a>00143             <span class="keywordflow">else</span> { <span class="comment">// myDepth is &gt; depth</span>
<a name="l00144"></a>00144                 std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem with instruction string:&quot;</span> &lt;&lt; std::endl;
<a name="l00145"></a>00145                 std::cerr &lt;&lt; <span class="stringliteral">&quot;cannot use with current histogram&quot;</span> &lt;&lt; std::endl;
<a name="l00146"></a>00146                 instruction = errorCode;
<a name="l00147"></a>00147             }
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <span class="keywordflow">return</span> instruction;
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153   <span class="comment">//src_trunk_0701</span>
<a name="l00154"></a>00154   <span class="comment">// reshape this tree to have union of this shape and shape of other</span>
<a name="l00155"></a>00155 <span class="comment">// no checks on boxes since this should be redundant if used by unionNoData...</span>
<a name="l00156"></a>00156 <span class="comment">//</span>
<a name="l00157"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17">00157</a> <span class="keywordtype">void</span> SPnode::_reshapeToUnion(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other)
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159     <span class="keywordflow">if</span> ( other != NULL &amp;&amp; !(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) {
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="comment">// this is not a leaf, other is a leaf</span>
<a name="l00162"></a>00162     <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00163"></a>00163 
<a name="l00164"></a>00164       <span class="comment">// no need to do anything</span>
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="comment">// this is a leaf, other is not a leaf</span>
<a name="l00168"></a>00168     <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; !other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00169"></a>00169 
<a name="l00170"></a>00170       <span class="comment">/* we need to expand this, */</span>
<a name="l00171"></a>00171       nodeExpand();
<a name="l00172"></a>00172       
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     <span class="comment">// now recurse on the children if both have children</span>
<a name="l00176"></a>00176     <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; !other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00177"></a>00177       getLeftChild()-&gt;_reshapeToUnion(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00178"></a>00178       getRightChild()-&gt;_reshapeToUnion(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00179"></a>00179     }
<a name="l00180"></a>00180   }
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">// ---------------- public methods</span>
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="comment">// default constructor</span>
<a name="l00188"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54">00188</a>     SPnode::SPnode() :  theBox(NULL), dimension(0), label(0),
<a name="l00189"></a>00189             parent(NULL), leftChild(NULL), rightChild(NULL), nodeName(<span class="stringliteral">&quot;X&quot;</span>)
<a name="l00190"></a>00190         {}
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="comment">//src_trunk_0701</span>
<a name="l00194"></a>00194   <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00195"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad43955b79e832489150c70b6aa4e3f05">00195</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode::SPnode</a>(<span class="keyword">const</span> ivector&amp; v) : theBox(NULL),
<a name="l00196"></a>00196   parent(NULL), leftChild(NULL), rightChild(NULL), nodeName(<span class="stringliteral">&quot;X&quot;</span>)
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198   <span class="keywordflow">try</span> {
<a name="l00199"></a>00199     <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1; 
<a name="l00200"></a>00200     <span class="keywordflow">if</span> (d &lt; 1) {
<a name="l00201"></a>00201       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml">MalconstructedBox_Error</a>(
<a name="l00202"></a>00202                 <span class="stringliteral">&quot;SPnode::SPnode(const ivector&amp;, int)&quot;</span>);
<a name="l00203"></a>00203     }
<a name="l00204"></a>00204     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(v);
<a name="l00205"></a>00205   }
<a name="l00206"></a>00206   <span class="keywordflow">catch</span> (exception <span class="keyword">const</span>&amp; e) {
<a name="l00207"></a>00207     <a class="code" href="classsubpavings_1_1SPnode.shtml#a75618e8e46f82b309f744fc12927b2a9" title="Handle exceptions in the construction of a node.">constructor_error_handler</a>();
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">//src_trunk_0701</span>
<a name="l00213"></a>00213 <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00214"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#acd1241250563fcabfd1fc1d069e2065d">00214</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode::SPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb) : theBox(NULL), parent(NULL),
<a name="l00215"></a>00215   leftChild(NULL), rightChild(NULL), nodeName(<span class="stringliteral">&quot;X&quot;</span>)
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217   <span class="keywordflow">try</span> {
<a name="l00218"></a>00218     ivector v = lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00219"></a>00219     <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1; 
<a name="l00220"></a>00220     <span class="keywordflow">if</span> (d &lt; 1) {
<a name="l00221"></a>00221       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml">MalconstructedBox_Error</a>(
<a name="l00222"></a>00222             <span class="stringliteral">&quot;SPnode::SPnode(const LabBox&amp;)&quot;</span>);
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(v);
<a name="l00225"></a>00225   }
<a name="l00226"></a>00226   <span class="keywordflow">catch</span> (exception <span class="keyword">const</span>&amp; e) {
<a name="l00227"></a>00227     <a class="code" href="classsubpavings_1_1SPnode.shtml#a75618e8e46f82b309f744fc12927b2a9" title="Handle exceptions in the construction of a node.">constructor_error_handler</a>();
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00235"></a>00235     <span class="comment">// and optionally initialised with lab for label</span>
<a name="l00236"></a>00236     <span class="comment">// label defaults to 0 (see declaration)</span>
<a name="l00237"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7a41d88bc0857db595850fd2c7f1a4fa">00237</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode::SPnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab) : label(lab),
<a name="l00238"></a>00238         parent(NULL), leftChild(NULL), rightChild(NULL), nodeName(<span class="stringliteral">&quot;X&quot;</span>)
<a name="l00239"></a>00239     {
<a name="l00240"></a>00240         <span class="keywordflow">try</span> {
<a name="l00241"></a>00241             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(v);
<a name="l00242"></a>00242             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1;
<a name="l00243"></a>00243         }
<a name="l00244"></a>00244         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00245"></a>00245             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; std::endl;
<a name="l00246"></a>00246             <span class="keywordflow">throw</span>;
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00251"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ac91f261853f289d2ccf7102cd543a0d4">00251</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode::SPnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb) : label(lb.L), parent(NULL),
<a name="l00252"></a>00252         leftChild(NULL), rightChild(NULL), nodeName(<span class="stringliteral">&quot;X&quot;</span>)
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254         <span class="keywordflow">try</span> {
<a name="l00255"></a>00255             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00256"></a>00256             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) + 1;
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00259"></a>00259             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; std::endl;
<a name="l00260"></a>00260             <span class="keywordflow">throw</span>;
<a name="l00261"></a>00261         }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="comment">//Copy constructor</span>
<a name="l00267"></a>00267     <span class="comment">//copies from the given node downwards</span>
<a name="l00268"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aeafa6189ea2d85037ab6579471a947be">00268</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode::SPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other) : dimension(other.dimension),
<a name="l00269"></a>00269             label(other.label), parent(NULL), nodeName(other.nodeName)
<a name="l00270"></a>00270     {
<a name="l00271"></a>00271         <span class="keywordflow">try</span> {
<a name="l00272"></a>00272             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00273"></a>00273 
<a name="l00274"></a>00274             <span class="comment">//recursion on the children</span>
<a name="l00275"></a>00275             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00276"></a>00276                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(*other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>);
<a name="l00277"></a>00277                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l00278"></a>00278             }
<a name="l00279"></a>00279             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00282"></a>00282                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(*other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>);
<a name="l00283"></a>00283                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l00284"></a>00284             }
<a name="l00285"></a>00285             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00288"></a>00288             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; std::endl;
<a name="l00289"></a>00289             <span class="keywordflow">throw</span>;
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 }
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="comment">// Destructor.</span>
<a name="l00295"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef">00295</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef" title="Destructor. Declare as virtual because we will use SPNode as a base class.">SPnode::~SPnode</a>()
<a name="l00296"></a>00296     {<span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;}
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 
<a name="l00299"></a>00299     <span class="comment">//copy assignment operator</span>
<a name="l00300"></a>00300     <span class="comment">//copies from this node downwards</span>
<a name="l00301"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666">00301</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666" title="Copy assignment operator.">SPnode::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; rhs)
<a name="l00302"></a>00302     {
<a name="l00303"></a>00303 
<a name="l00304"></a>00304         <span class="keywordflow">try</span> {
<a name="l00305"></a>00305 
<a name="l00306"></a>00306             <span class="comment">// delete the current children (deletes their children as well)</span>
<a name="l00307"></a>00307             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) {
<a name="l00308"></a>00308                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l00309"></a>00309                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00310"></a>00310             }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) {
<a name="l00313"></a>00313                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l00314"></a>00314                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00315"></a>00315             }
<a name="l00316"></a>00316             <span class="comment">// and delete the current box</span>
<a name="l00317"></a>00317             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00318"></a>00318                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00319"></a>00319                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = NULL;
<a name="l00320"></a>00320             }
<a name="l00321"></a>00321             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>=NULL;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00324"></a>00324             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00325"></a>00325             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00326"></a>00326             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00327"></a>00327 
<a name="l00328"></a>00328             <span class="comment">//recursion on the children</span>
<a name="l00329"></a>00329             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00330"></a>00330                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>);
<a name="l00331"></a>00331                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l00332"></a>00332             }
<a name="l00333"></a>00333             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00336"></a>00336                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>);
<a name="l00337"></a>00337                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l00338"></a>00338             }
<a name="l00339"></a>00339             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00340"></a>00340         }
<a name="l00341"></a>00341         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00342"></a>00342             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; std::endl;
<a name="l00343"></a>00343             <span class="keywordflow">throw</span>;
<a name="l00344"></a>00344         }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00347"></a>00347 
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350         <span class="comment">// recursively rename from the top down</span>
<a name="l00351"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e">00351</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">SPnode::recursiveRename</a>()
<a name="l00352"></a>00352     {
<a name="l00353"></a>00353         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00354"></a>00354             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00355"></a>00355             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l00356"></a>00356         }
<a name="l00357"></a>00357         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00358"></a>00358             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00359"></a>00359             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l00360"></a>00360         }
<a name="l00361"></a>00361     }
<a name="l00362"></a>00362 
<a name="l00363"></a>00363   <span class="comment">//from src_trunk_0701</span>
<a name="l00364"></a>00364   <span class="comment">/* Return boolean to indicate if node is splittable.</span>
<a name="l00365"></a>00365 <span class="comment">   * </span>
<a name="l00366"></a>00366 <span class="comment">  A node is splittable if </span>
<a name="l00367"></a>00367 <span class="comment">  * there is at least one value in the basic number screen </span>
<a name="l00368"></a>00368 <span class="comment">  * between the inf and sup of the interval on the coordinate</span>
<a name="l00369"></a>00369 <span class="comment">  * with maximum diameter (ie the box can be split on that interval)</span>
<a name="l00370"></a>00370 <span class="comment">  * and the node volume is &gt;= 2 * cxsc::MinReal (the</span>
<a name="l00371"></a>00371 <span class="comment">  smallest representable real number).*/</span>
<a name="l00372"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">00372</a>   <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">SPnode::isSplittableNode</a>()<span class="keyword"> const</span>
<a name="l00373"></a>00373 <span class="keyword">  </span>{
<a name="l00374"></a>00374     ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00375"></a>00375     interval maxD = box[<a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(box)];
<a name="l00376"></a>00376     
<a name="l00377"></a>00377     <span class="keywordflow">return</span> ( (succ(succ(Inf(maxD))) &lt;= Sup(maxD))
<a name="l00378"></a>00378       &amp;&amp; (<a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(box) &gt;= 2*cxsc::MinReal) );
<a name="l00379"></a>00379   }
<a name="l00380"></a>00380 
<a name="l00381"></a>00381     <span class="comment">// Accessor for the dimension of theBox of a node.</span>
<a name="l00382"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b">00382</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">SPnode::getDimension</a>()<span class="keyword"> const</span>
<a name="l00383"></a>00383 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; }
<a name="l00384"></a>00384 
<a name="l00385"></a>00385     <span class="comment">// Accessor for theBox of a node.</span>
<a name="l00386"></a>00386     <span class="comment">// Returns a copy of the object pointed to by theBox of a node.</span>
<a name="l00387"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac">00387</a>     ivector <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">SPnode::getBox</a>()<span class="keyword"> const</span>
<a name="l00388"></a>00388 <span class="keyword">    </span>{ <span class="keywordflow">return</span> *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; }
<a name="l00389"></a>00389 
<a name="l00390"></a>00390     <span class="comment">// Accessor for label of a node.</span>
<a name="l00391"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e">00391</a>     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">SPnode::getLabel</a>()<span class="keyword"> const</span>
<a name="l00392"></a>00392 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>; }
<a name="l00393"></a>00393 
<a name="l00394"></a>00394     <span class="comment">// Accessor for the parent of a node.</span>
<a name="l00395"></a>00395     <span class="comment">//Returns a copy of the pointer to parent node.</span>
<a name="l00396"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef">00396</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">SPnode::getParent</a>()<span class="keyword"> const</span>
<a name="l00397"></a>00397 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     <span class="comment">// Accessor for the left child of a node.</span>
<a name="l00400"></a>00400     <span class="comment">// Returns a copy of the pointer to leftChild node.</span>
<a name="l00401"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3">00401</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">SPnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00402"></a>00402 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404     <span class="comment">// Accessor for the right child of a node.</span>
<a name="l00405"></a>00405     <span class="comment">// Returns a copy of the pointer to rightChild node.</span>
<a name="l00406"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689">00406</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">SPnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l00407"></a>00407 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409     <span class="comment">// set the label</span>
<a name="l00410"></a>00410     <span class="comment">//  will only set label for child-less root nodes</span>
<a name="l00411"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db">00411</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db" title="Set the label of a childless root node.">SPnode::setLabel</a>(<span class="keywordtype">int</span> lab)
<a name="l00412"></a>00412     {
<a name="l00413"></a>00413         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>()==NULL)) {
<a name="l00414"></a>00414             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = lab;
<a name="l00415"></a>00415         }
<a name="l00416"></a>00416         <span class="keywordflow">else</span> {
<a name="l00417"></a>00417             std::cout &lt;&lt; <span class="stringliteral">&quot;Cannot set label for node which &quot;</span>
<a name="l00418"></a>00418                 &lt;&lt; <span class="stringliteral">&quot;is not a childless root node&quot;</span>
<a name="l00419"></a>00419                 &lt;&lt; std::endl;
<a name="l00420"></a>00420         }
<a name="l00421"></a>00421     }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423     <span class="comment">// Get the node name.</span>
<a name="l00424"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db">00424</a>     std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">SPnode::getNodeName</a>()<span class="keyword"> const</span>
<a name="l00425"></a>00425 <span class="keyword">    </span>{
<a name="l00426"></a>00426         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00427"></a>00427     }
<a name="l00428"></a>00428 
<a name="l00429"></a>00429     <span class="comment">// Set the node name.</span>
<a name="l00430"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f">00430</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">SPnode::setNodeName</a>(std::string newname)
<a name="l00431"></a>00431     {
<a name="l00432"></a>00432         <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = newname;
<a name="l00433"></a>00433     }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435 
<a name="l00436"></a>00436     <span class="comment">// Return the volume of the box as a double.</span>
<a name="l00437"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb">00437</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">SPnode::nodeVolume</a>()<span class="keyword"> const</span>
<a name="l00438"></a>00438 <span class="keyword">        </span>{ <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()); }
<a name="l00439"></a>00439 
<a name="l00440"></a>00440     <span class="comment">// find if this node is a subleaf node</span>
<a name="l00441"></a>00441     <span class="comment">// a sub-leaf node is the parent of leaf nodes and only have leaf nodes</span>
<a name="l00442"></a>00442     <span class="comment">// as children</span>
<a name="l00443"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc">00443</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">SPnode::isSubLeaf</a>()<span class="keyword"> const</span>
<a name="l00444"></a>00444 <span class="keyword">    </span>{
<a name="l00445"></a>00445 
<a name="l00446"></a>00446         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00447"></a>00447         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// has two children</span>
<a name="l00448"></a>00448             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00449"></a>00449                 retValue = <span class="keyword">true</span>;
<a name="l00450"></a>00450             }
<a name="l00451"></a>00451         }
<a name="l00452"></a>00452         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) { <span class="comment">// only has left child</span>
<a name="l00453"></a>00453             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) retValue = <span class="keyword">true</span>;
<a name="l00454"></a>00454         }
<a name="l00455"></a>00455         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// only has right child</span>
<a name="l00456"></a>00456                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) retValue = <span class="keyword">true</span>;
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458         <span class="comment">// default return value false</span>
<a name="l00459"></a>00459 
<a name="l00460"></a>00460         <span class="keywordflow">return</span> retValue;
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 
<a name="l00463"></a>00463   <span class="comment">//src_trunk_0701</span>
<a name="l00464"></a>00464   <span class="comment">// Return the volume of the box as a real.</span>
<a name="l00465"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347">00465</a>   real <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">SPnode::nodeRealVolume</a>()<span class="keyword"> const</span>
<a name="l00466"></a>00466 <span class="keyword">  </span>{ 
<a name="l00467"></a>00467     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() ) {
<a name="l00468"></a>00468       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(<span class="stringliteral">&quot;SPnode::nodeRealVolume()&quot;</span>);
<a name="l00469"></a>00469     }
<a name="l00470"></a>00470     <span class="keywordflow">return</span> <a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()); 
<a name="l00471"></a>00471   }
<a name="l00472"></a>00472 
<a name="l00473"></a>00473     <span class="comment">// Check if this SPnode is empty.</span>
<a name="l00474"></a>00474     <span class="comment">// Can only check if an actual subpaving object is empty, not if it is null.</span>
<a name="l00475"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593">00475</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">SPnode::isEmpty</a>()<span class="keyword"> const</span>
<a name="l00476"></a>00476 <span class="keyword">    </span>{<span class="keywordflow">return</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>==NULL) ; }
<a name="l00477"></a>00477 
<a name="l00478"></a>00478     <span class="comment">// Check if this SPnode is a leaf.</span>
<a name="l00479"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7">00479</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">SPnode::isLeaf</a>()<span class="keyword"> const</span>
<a name="l00480"></a>00480 <span class="keyword">    </span>{<span class="keywordflow">return</span> ( (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>==NULL) &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>==NULL)); }
<a name="l00481"></a>00481 
<a name="l00482"></a>00482     <span class="comment">// Check if this has a non-empty left child.</span>
<a name="l00483"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad">00483</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">SPnode::hasLCwithBox</a>()<span class="keyword"> const</span>
<a name="l00484"></a>00484 <span class="keyword">    </span>{<span class="keywordflow">return</span> ( (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>!=NULL) &amp;&amp; ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>)!=NULL)); }
<a name="l00485"></a>00485 
<a name="l00486"></a>00486     <span class="comment">// Check if this has a non-empty right child.</span>
<a name="l00487"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa">00487</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">SPnode::hasRCwithBox</a>()<span class="keyword"> const</span>
<a name="l00488"></a>00488 <span class="keyword">    </span>{<span class="keywordflow">return</span> ( (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>!=NULL) &amp;&amp;
<a name="l00489"></a>00489         ((<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>)!=NULL)); }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 <span class="comment">//src_trunk_0701</span>
<a name="l00492"></a>00492 <span class="comment">// get number of leaves</span>
<a name="l00493"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23">00493</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23" title="Get number of leaf descendents of this.">SPnode::getNumberLeaves</a>()<span class="keyword"> const</span>
<a name="l00494"></a>00494 <span class="keyword"></span>{
<a name="l00495"></a>00495   <span class="keywordtype">size_t</span> retVal=0;
<a name="l00496"></a>00496   
<a name="l00497"></a>00497   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) retVal = 1; <span class="comment">// leaf</span>
<a name="l00498"></a>00498 
<a name="l00499"></a>00499   <span class="keywordflow">else</span> {
<a name="l00500"></a>00500 
<a name="l00501"></a>00501     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) 
<a name="l00502"></a>00502       retVal += <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23" title="Get number of leaf descendents of this.">getNumberLeaves</a>();
<a name="l00503"></a>00503     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) 
<a name="l00504"></a>00504       retVal += <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23" title="Get number of leaf descendents of this.">getNumberLeaves</a>();
<a name="l00505"></a>00505 
<a name="l00506"></a>00506   }
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   <span class="keywordflow">return</span> retVal;
<a name="l00509"></a>00509 }
<a name="l00510"></a>00510 
<a name="l00511"></a>00511   <span class="comment">//src_trunk_0701</span>
<a name="l00512"></a>00512   <span class="comment">// find node&#39;s split dimension</span>
<a name="l00513"></a>00513 <span class="comment">// note - if I took this out and had spnodes record split dimension I&#39;d have</span>
<a name="l00514"></a>00514 <span class="comment">// to make sure split dimension was adjusted if we marginalised or sliced</span>
<a name="l00515"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371">00515</a> <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">SPnode::getSplitDim</a>()<span class="keyword"> const</span>
<a name="l00516"></a>00516 <span class="keyword"></span>{
<a name="l00517"></a>00517   <span class="keywordtype">int</span> splitDim = -1;  
<a name="l00518"></a>00518   
<a name="l00519"></a>00519   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l00520"></a>00520   
<a name="l00521"></a>00521     ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00522"></a>00522     <span class="keywordtype">int</span> dim = VecLen(box);
<a name="l00523"></a>00523     <span class="keywordtype">int</span> boxLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(box);
<a name="l00524"></a>00524     
<a name="l00525"></a>00525     ivector boxChild;
<a name="l00526"></a>00526     
<a name="l00527"></a>00527     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) boxChild = <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00528"></a>00528     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) boxChild = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00529"></a>00529     <span class="keywordflow">else</span> <span class="keywordflow">throw</span> std::logic_error(
<a name="l00530"></a>00530       <span class="stringliteral">&quot;SPnode::getSplitDim() :Cannot find split dimension&quot;</span>);            
<a name="l00531"></a>00531     
<a name="l00532"></a>00532     <span class="keywordtype">int</span> index = 0;
<a name="l00533"></a>00533     <span class="keywordtype">int</span> boxChildLB = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(boxChild);
<a name="l00534"></a>00534     <span class="keywordflow">while</span> (splitDim &lt; 1 &amp;&amp; index &lt; dim) {
<a name="l00535"></a>00535       <span class="keywordflow">if</span> ((Inf(box[boxLB + index]) 
<a name="l00536"></a>00536           != Inf(boxChild[boxChildLB + index]))
<a name="l00537"></a>00537         ||
<a name="l00538"></a>00538         (Sup(box[boxLB + index]) != 
<a name="l00539"></a>00539           Sup(boxChild[boxChildLB + index]))) {
<a name="l00540"></a>00540             <span class="comment">// found splitDim</span>
<a name="l00541"></a>00541             splitDim = boxLB + index;
<a name="l00542"></a>00542       }
<a name="l00543"></a>00543       index ++;
<a name="l00544"></a>00544     } <span class="comment">// end while</span>
<a name="l00545"></a>00545     
<a name="l00546"></a>00546     <span class="keywordflow">if</span> (splitDim &lt; 0) {
<a name="l00547"></a>00547       <span class="keywordflow">throw</span> std::logic_error(
<a name="l00548"></a>00548       <span class="stringliteral">&quot;SPnode::getSplitDim() :Cannot find split dimension&quot;</span>);
<a name="l00549"></a>00549     }
<a name="l00550"></a>00550   } <span class="comment">// end !isLeaf</span>
<a name="l00551"></a>00551             
<a name="l00552"></a>00552   <span class="keywordflow">return</span> splitDim;
<a name="l00553"></a>00553 }
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 
<a name="l00557"></a>00557     <span class="comment">// return a reference to a container of SPnodes</span>
<a name="l00558"></a>00558     <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l00559"></a>00559     <span class="comment">// left to right order</span>
<a name="l00560"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878">00560</a>     <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">SPnode::getSPnodeLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a>&amp; leaves)<span class="keyword"> const</span>
<a name="l00561"></a>00561 <span class="keyword">    </span>{
<a name="l00562"></a>00562         <span class="comment">//if children, recurse on the children</span>
<a name="l00563"></a>00563         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00564"></a>00564             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves);
<a name="l00565"></a>00565         }
<a name="l00566"></a>00566 
<a name="l00567"></a>00567         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00568"></a>00568             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves);
<a name="l00569"></a>00569         }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l00572"></a>00572             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l00573"></a>00573             leaves.push_back(const_cast&lt;SPnode*&gt;(<span class="keyword">this</span>));
<a name="l00574"></a>00574         }
<a name="l00575"></a>00575         <span class="keywordflow">return</span> leaves;
<a name="l00576"></a>00576     }
<a name="l00577"></a>00577     
<a name="l00578"></a>00578     <span class="comment">//src_trunk_0701</span>
<a name="l00579"></a>00579     <span class="comment">// return a reference to a container of const SPnodes</span>
<a name="l00580"></a>00580 <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l00581"></a>00581 <span class="comment">// left to right order</span>
<a name="l00582"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897">00582</a> <a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6" title="Define type SPnodeConstPtrs as container of pointers to const SPnodes.">SPnodeConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897" title="Return pointers to const nodes.">SPnode::getConstSPnodeLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6" title="Define type SPnodeConstPtrs as container of pointers to const SPnodes.">SPnodeConstPtrs</a>&amp; leaves)<span class="keyword"> const</span>
<a name="l00583"></a>00583 <span class="keyword"></span>{
<a name="l00584"></a>00584   <span class="comment">//if children, recurse on the children</span>
<a name="l00585"></a>00585   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00586"></a>00586     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897" title="Return pointers to const nodes.">getConstSPnodeLeaves</a>(leaves);
<a name="l00587"></a>00587   }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00590"></a>00590     <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897" title="Return pointers to const nodes.">getConstSPnodeLeaves</a>(leaves);
<a name="l00591"></a>00591   }
<a name="l00592"></a>00592 
<a name="l00593"></a>00593   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) { <span class="comment">// this is a leaf</span>
<a name="l00594"></a>00594     leaves.push_back(<span class="keyword">this</span>);
<a name="l00595"></a>00595   }
<a name="l00596"></a>00596   <span class="keywordflow">return</span> leaves;
<a name="l00597"></a>00597 }
<a name="l00598"></a>00598     
<a name="l00599"></a>00599     <span class="comment">// return a reference to a container of doubles</span>
<a name="l00600"></a>00600     <span class="comment">// contents being the volumes of the leaves descended from this,</span>
<a name="l00601"></a>00601     <span class="comment">// or the volume of this if this is a leaf</span>
<a name="l00602"></a>00602     <span class="comment">// left to right order</span>
<a name="l00603"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5">00603</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5" title="Fill in a vector of leaf node volumes.">SPnode::getLeafNodeVolumes</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; vols)<span class="keyword"> const</span>
<a name="l00604"></a>00604 <span class="keyword">    </span>{
<a name="l00605"></a>00605         <span class="comment">//if children, recurse on the children</span>
<a name="l00606"></a>00606         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00607"></a>00607             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5" title="Fill in a vector of leaf node volumes.">getLeafNodeVolumes</a>(vols);
<a name="l00608"></a>00608         }
<a name="l00609"></a>00609 
<a name="l00610"></a>00610         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00611"></a>00611             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5" title="Fill in a vector of leaf node volumes.">getLeafNodeVolumes</a>(vols);
<a name="l00612"></a>00612         }
<a name="l00613"></a>00613 
<a name="l00614"></a>00614         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l00615"></a>00615             vols.push_back(<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00616"></a>00616         }
<a name="l00617"></a>00617         <span class="keywordflow">return</span> vols;
<a name="l00618"></a>00618     }
<a name="l00619"></a>00619 
<a name="l00620"></a>00620     <span class="comment">// fills in the leaf node levels, left to right</span>
<a name="l00621"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b">00621</a>     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">SPnode::getLeafNodeLevels</a>(<a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels)<span class="keyword"> const</span>
<a name="l00622"></a>00622 <span class="keyword">    </span>{
<a name="l00623"></a>00623         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length() &gt; 0) {
<a name="l00624"></a>00624 
<a name="l00625"></a>00625             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00626"></a>00626                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(levels);
<a name="l00627"></a>00627             }
<a name="l00628"></a>00628             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00629"></a>00629                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(levels);
<a name="l00630"></a>00630             }
<a name="l00631"></a>00631             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l00632"></a>00632 
<a name="l00633"></a>00633                 levels.push_back(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length()-1);
<a name="l00634"></a>00634             }
<a name="l00635"></a>00635         }
<a name="l00636"></a>00636         <span class="keywordflow">else</span> { <span class="comment">// nodeName.length() == 0</span>
<a name="l00637"></a>00637             <span class="keywordtype">int</span> level = 0;
<a name="l00638"></a>00638 
<a name="l00639"></a>00639             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00640"></a>00640                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(level+1, levels);
<a name="l00641"></a>00641             }
<a name="l00642"></a>00642             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00643"></a>00643                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(level+1, levels);
<a name="l00644"></a>00644             }
<a name="l00645"></a>00645             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l00646"></a>00646 
<a name="l00647"></a>00647                 levels.push_back(level);
<a name="l00648"></a>00648             }
<a name="l00649"></a>00649         }
<a name="l00650"></a>00650         <span class="keywordflow">return</span> levels;
<a name="l00651"></a>00651     }
<a name="l00652"></a>00652 
<a name="l00653"></a>00653 
<a name="l00654"></a>00654     <span class="comment">// fills in the leaf node levels, left to right, based on root node level</span>
<a name="l00655"></a>00655     <span class="comment">// this version used when nodeNames not set, ie nodeName.length() == 0</span>
<a name="l00656"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ab2d91d997064dccc3c1a6f80bd27c6ef">00656</a>     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">SPnode::getLeafNodeLevels</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> level, <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels)<span class="keyword"> const</span>
<a name="l00657"></a>00657 <span class="keyword">    </span>{
<a name="l00658"></a>00658 
<a name="l00659"></a>00659         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00660"></a>00660             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(level+1, levels);
<a name="l00661"></a>00661         }
<a name="l00662"></a>00662         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00663"></a>00663             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(level+1, levels);
<a name="l00664"></a>00664         }
<a name="l00665"></a>00665         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l00666"></a>00666 
<a name="l00667"></a>00667             levels.push_back(level);
<a name="l00668"></a>00668         }
<a name="l00669"></a>00669         <span class="keywordflow">return</span> levels;
<a name="l00670"></a>00670     }
<a name="l00671"></a>00671 
<a name="l00672"></a>00672 <span class="comment">//src_trunk_0701</span>
<a name="l00673"></a>00673 <span class="comment">// fills in the leaf node levels, left to right</span>
<a name="l00674"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7">00674</a> <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7" title="Fill in a vector of leaf node levels.">SPnode::getLeafNodeLevelsJ</a>(<a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels, <span class="keywordtype">int</span> level)<span class="keyword"> const</span>
<a name="l00675"></a>00675 <span class="keyword"></span>{
<a name="l00676"></a>00676   
<a name="l00677"></a>00677   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00678"></a>00678     <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7" title="Fill in a vector of leaf node levels.">getLeafNodeLevelsJ</a>(levels, level+1);
<a name="l00679"></a>00679   }
<a name="l00680"></a>00680   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00681"></a>00681     <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7" title="Fill in a vector of leaf node levels.">getLeafNodeLevelsJ</a>(levels, level+1);
<a name="l00682"></a>00682   }
<a name="l00683"></a>00683   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l00684"></a>00684 
<a name="l00685"></a>00685     levels.push_back(level);
<a name="l00686"></a>00686   }
<a name="l00687"></a>00687   <span class="keywordflow">return</span> levels;
<a name="l00688"></a>00688 }
<a name="l00689"></a>00689 
<a name="l00690"></a>00690     <span class="comment">// returns a string of the leaf levels</span>
<a name="l00691"></a>00691     <span class="comment">// left to right, 0 is root</span>
<a name="l00692"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72">00692</a>     std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">SPnode::getLeafNodeLevelsString</a>()<span class="keyword"> const</span>
<a name="l00693"></a>00693 <span class="keyword">    </span>{
<a name="l00694"></a>00694         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> levels;
<a name="l00695"></a>00695         <a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(levels); <span class="comment">// fill container of leaf levels</span>
<a name="l00696"></a>00696         <a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137" title="Define type IntVecItr as iterator over IntVec.">IntVecItr</a> it;
<a name="l00697"></a>00697 
<a name="l00698"></a>00698         std::string str = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700         <span class="keywordflow">for</span> (it = levels.begin(); it &lt; levels.end(); it++) {
<a name="l00701"></a>00701             stringstream out;
<a name="l00702"></a>00702             out &lt;&lt; (*it);
<a name="l00703"></a>00703             str = str + out.str() + <span class="stringliteral">&quot;,&quot;</span>;
<a name="l00704"></a>00704         };
<a name="l00705"></a>00705         <span class="comment">// trim off any lead or trailing &quot;, &quot;</span>
<a name="l00706"></a>00706         <span class="keywordtype">size_t</span> startpos = str.find_first_not_of(<span class="stringliteral">&quot; ,&quot;</span>);
<a name="l00707"></a>00707         <span class="keywordtype">size_t</span> endpos = str.find_last_not_of(<span class="stringliteral">&quot; ,&quot;</span>);
<a name="l00708"></a>00708         <span class="comment">// if all commas or empty return an empty string</span>
<a name="l00709"></a>00709         <span class="keywordflow">if</span>(( std::string::npos == startpos ) || ( std::string::npos == endpos)) {
<a name="l00710"></a>00710             str = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00711"></a>00711         }
<a name="l00712"></a>00712         <span class="keywordflow">else</span> {
<a name="l00713"></a>00713             str = str.substr( startpos, endpos-startpos+1 );
<a name="l00714"></a>00714         }
<a name="l00715"></a>00715         <span class="keywordflow">return</span> str;
<a name="l00716"></a>00716     }
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 
<a name="l00719"></a>00719     <span class="comment">// Get the node depth.</span>
<a name="l00720"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81">00720</a>     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81" title="Get the node depth.">SPnode::getNodeDepth</a>()<span class="keyword"> const</span>
<a name="l00721"></a>00721 <span class="keyword">    </span>{
<a name="l00722"></a>00722         <span class="keywordtype">int</span> depth = 0;
<a name="l00723"></a>00723         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length() &gt; 1)
<a name="l00724"></a>00724             depth = <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length() - 1;
<a name="l00725"></a>00725         <span class="keywordflow">return</span> depth;
<a name="l00726"></a>00726     }
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 
<a name="l00729"></a>00729     <span class="comment">//Returns the depth of the tree descending from this node</span>
<a name="l00730"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864">00730</a>     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864" title="Get depth of the tree descended from this node.">SPnode::getDepth</a>()<span class="keyword"> const</span>
<a name="l00731"></a>00731 <span class="keyword">    </span>{
<a name="l00732"></a>00732         <span class="keywordtype">int</span> depth = 0;
<a name="l00733"></a>00733 
<a name="l00734"></a>00734         <span class="comment">// if this is a leaf the depth is 0</span>
<a name="l00735"></a>00735         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is not a leaf</span>
<a name="l00736"></a>00736             <span class="comment">// set up a container for the leaf children</span>
<a name="l00737"></a>00737             <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves;
<a name="l00738"></a>00738             <span class="comment">// fill the container with the leaf children</span>
<a name="l00739"></a>00739             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves);
<a name="l00740"></a>00740 
<a name="l00741"></a>00741             <span class="comment">// find the deepest leaf child</span>
<a name="l00742"></a>00742             <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l00743"></a>00743 
<a name="l00744"></a>00744             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00745"></a>00745                 <span class="keywordflow">if</span> ((*it)-&gt;getNodeDepth() &gt; depth) {
<a name="l00746"></a>00746 
<a name="l00747"></a>00747                     depth = (*it)-&gt;getNodeDepth();
<a name="l00748"></a>00748                 }
<a name="l00749"></a>00749             }
<a name="l00750"></a>00750         } <span class="comment">// end if not a leaf</span>
<a name="l00751"></a>00751 
<a name="l00752"></a>00752         <span class="keywordflow">return</span> depth;
<a name="l00753"></a>00753     }
<a name="l00754"></a>00754 
<a name="l00755"></a>00755 
<a name="l00756"></a>00756     <span class="comment">//Returns the volume of the smallest (by vol) leaf node.</span>
<a name="l00757"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d">00757</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d" title="Get the volume of the leaf with the smallest volume.">SPnode::getSmallestLeafVol</a>()<span class="keyword"> const</span>
<a name="l00758"></a>00758 <span class="keyword">    </span>{
<a name="l00759"></a>00759         <span class="keywordtype">double</span> smallestVol = 0.0;
<a name="l00760"></a>00760 
<a name="l00761"></a>00761         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l00762"></a>00762             smallestVol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00763"></a>00763         }
<a name="l00764"></a>00764 
<a name="l00765"></a>00765         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l00766"></a>00766             <span class="comment">// set up a container for the leaf children</span>
<a name="l00767"></a>00767             <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves;
<a name="l00768"></a>00768             <span class="comment">// fill the container with the leaf children</span>
<a name="l00769"></a>00769             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves);
<a name="l00770"></a>00770 
<a name="l00771"></a>00771             <span class="comment">// find the smallest child by volume</span>
<a name="l00772"></a>00772             <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l00773"></a>00773             <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* smallest = *(leaves.begin());
<a name="l00774"></a>00774 
<a name="l00775"></a>00775             smallestVol = smallest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00776"></a>00776 
<a name="l00777"></a>00777             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00778"></a>00778                 <span class="keywordflow">if</span> ((*it)-&gt;nodeVolume() &lt; smallestVol) {
<a name="l00779"></a>00779 
<a name="l00780"></a>00780                     smallestVol = (*it)-&gt;nodeVolume();
<a name="l00781"></a>00781                 }
<a name="l00782"></a>00782             }
<a name="l00783"></a>00783         } <span class="comment">// end else not a leaf</span>
<a name="l00784"></a>00784 
<a name="l00785"></a>00785         <span class="keywordflow">return</span> smallestVol;
<a name="l00786"></a>00786     }
<a name="l00787"></a>00787 
<a name="l00788"></a>00788     <span class="comment">// Returns the volume of the largest (by vol) leaf node.</span>
<a name="l00789"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae">00789</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae" title="Get the volume of the leaf with the largest volume.">SPnode::getLargestLeafVol</a>()<span class="keyword"> const</span>
<a name="l00790"></a>00790 <span class="keyword">    </span>{
<a name="l00791"></a>00791         <span class="keywordtype">double</span> largestVol = 0.0;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l00794"></a>00794             largestVol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00795"></a>00795         }
<a name="l00796"></a>00796 
<a name="l00797"></a>00797         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l00798"></a>00798 
<a name="l00799"></a>00799             <span class="comment">// set up a container for the leaf children</span>
<a name="l00800"></a>00800             <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves;
<a name="l00801"></a>00801             <span class="comment">// fill the container with the leaf children</span>
<a name="l00802"></a>00802             <span class="comment">// could be just this if no children</span>
<a name="l00803"></a>00803             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves);
<a name="l00804"></a>00804 
<a name="l00805"></a>00805             <span class="comment">// find the largest child by volume</span>
<a name="l00806"></a>00806             <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l00807"></a>00807             largestVol = (*(leaves.begin()))-&gt;nodeVolume();
<a name="l00808"></a>00808 
<a name="l00809"></a>00809             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00810"></a>00810                 <span class="keywordflow">if</span> ((*it)-&gt;nodeVolume() &gt; largestVol) {
<a name="l00811"></a>00811                     largestVol = (*it)-&gt;nodeVolume();
<a name="l00812"></a>00812                 }
<a name="l00813"></a>00813             }
<a name="l00814"></a>00814         }
<a name="l00815"></a>00815 
<a name="l00816"></a>00816         <span class="keywordflow">return</span> largestVol;
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 <span class="comment">//src_trunk_0701</span>
<a name="l00820"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f">00820</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">SPnode::checkTreeStateLegal</a>()<span class="keyword"> const</span>
<a name="l00821"></a>00821 <span class="keyword"></span>{
<a name="l00822"></a>00822   <span class="comment">// check current state is legal by looking at everything not a leaf</span>
<a name="l00823"></a>00823   <span class="keywordtype">bool</span> legal = <span class="keyword">true</span>;
<a name="l00824"></a>00824   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l00825"></a>00825     legal = <a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>();
<a name="l00826"></a>00826     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() ) {
<a name="l00827"></a>00827         legal = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>();
<a name="l00828"></a>00828     }
<a name="l00829"></a>00829     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() ) {
<a name="l00830"></a>00830         legal = <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>();
<a name="l00831"></a>00831     }
<a name="l00832"></a>00832   }
<a name="l00833"></a>00833   
<a name="l00834"></a>00834   <span class="keywordflow">return</span> legal;
<a name="l00835"></a>00835 }
<a name="l00836"></a>00836 
<a name="l00837"></a>00837      <span class="comment">// used by nodes to find if this has a leaf sibling</span>
<a name="l00838"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e">00838</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">SPnode::hasLeafSibling</a>()<span class="keyword"> const</span>
<a name="l00839"></a>00839 <span class="keyword">    </span>{
<a name="l00840"></a>00840         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00841"></a>00841         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> != NULL) {
<a name="l00842"></a>00842             <span class="comment">// check the final letter on my name</span>
<a name="l00843"></a>00843             std::string mySide = <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.substr(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length()-1);
<a name="l00844"></a>00844 
<a name="l00845"></a>00845             <span class="comment">// siblings cannot be assumed to exist</span>
<a name="l00846"></a>00846             <span class="keywordflow">if</span>((mySide == <span class="stringliteral">&quot;R&quot;</span> &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l00847"></a>00847                     &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())
<a name="l00848"></a>00848                 ||
<a name="l00849"></a>00849                 (mySide == <span class="stringliteral">&quot;L&quot;</span> &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()
<a name="l00850"></a>00850                     &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l00851"></a>00851 
<a name="l00852"></a>00852                 retValue = <span class="keyword">true</span>;
<a name="l00853"></a>00853             }
<a name="l00854"></a>00854         }
<a name="l00855"></a>00855         <span class="keywordflow">return</span> retValue;
<a name="l00856"></a>00856     }
<a name="l00857"></a>00857 
<a name="l00858"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3">00858</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">SPnode::accept</a>(<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>&amp; visitor)
<a name="l00859"></a>00859     {
<a name="l00860"></a>00860         visitor.<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml#ab66d7c252cd58fc14214315033521a80">visit</a>(<span class="keyword">this</span>);
<a name="l00861"></a>00861     }
<a name="l00862"></a>00862 
<a name="l00863"></a>00863   <span class="comment">//gat41</span>
<a name="l00864"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591">00864</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591" title="Get the range collection of the vistitor of the type SPnodeVisitor.">SPnode::collectRange</a>(<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>&amp; visitor)
<a name="l00865"></a>00865     {
<a name="l00866"></a>00866         visitor.<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml#a8c10bef76c4e6ed1ca3e718032fdd2b3">tellMe</a>(<span class="keyword">this</span>);
<a name="l00867"></a>00867     }
<a name="l00868"></a>00868 
<a name="l00869"></a>00869   <span class="comment">//src_trunk_0701</span>
<a name="l00870"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe">00870</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe" title="Accept an SPCheckVisitor.">SPnode::acceptSPCheckVisitor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a>&amp; visitor)<span class="keyword"> const</span>
<a name="l00871"></a>00871 <span class="keyword"></span>{
<a name="l00872"></a>00872   visitor.<a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml#ad5fd0bde6d256676290e790c6387f01a" title="The visit operation.">visit</a>(<span class="keyword">this</span>);
<a name="l00873"></a>00873   
<a name="l00874"></a>00874 }
<a name="l00875"></a>00875 
<a name="l00876"></a>00876     <span class="comment">// Print the box of a specific node in a subpaving</span>
<a name="l00877"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aaf14185437d50e955c5ea938dc6e7559">00877</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aaf14185437d50e955c5ea938dc6e7559" title="Output details of a specific node in a tree.">SPnode::nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00878"></a>00878 <span class="keyword">    </span>{
<a name="l00879"></a>00879     <span class="comment">// output in form: box</span>
<a name="l00880"></a>00880 
<a name="l00881"></a>00881         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00882"></a>00882 
<a name="l00883"></a>00883             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00884"></a>00884 
<a name="l00885"></a>00885             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00886"></a>00886                 os &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span>
<a name="l00887"></a>00887                     &lt;&lt; Sup(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span>;
<a name="l00888"></a>00888                 <span class="keywordflow">if</span> (i &lt; <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ) {
<a name="l00889"></a>00889                     os &lt;&lt; <span class="stringliteral">&quot; , &quot;</span>;
<a name="l00890"></a>00890                 }
<a name="l00891"></a>00891             }
<a name="l00892"></a>00892             os &lt;&lt; std::endl;
<a name="l00893"></a>00893         }
<a name="l00894"></a>00894         <span class="keywordflow">return</span> os;
<a name="l00895"></a>00895 
<a name="l00896"></a>00896     }
<a name="l00897"></a>00897 
<a name="l00898"></a>00898     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00899"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a0f2381175b37224a185eedbe9601d814">00899</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a0f2381175b37224a185eedbe9601d814" title="Output for a node in a binary tree, tab-delimited.">SPnode::leafOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00900"></a>00900 <span class="keyword">    </span>{
<a name="l00901"></a>00901 
<a name="l00902"></a>00902         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00903"></a>00903 
<a name="l00904"></a>00904             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00905"></a>00905 
<a name="l00906"></a>00906             <span class="comment">// output the label, nodeVolume</span>
<a name="l00907"></a>00907             os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00908"></a>00908             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00909"></a>00909 
<a name="l00910"></a>00910             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00911"></a>00911             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00912"></a>00912             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00913"></a>00913 
<a name="l00914"></a>00914                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>
<a name="l00915"></a>00915                     &lt;&lt; Sup(thisBox[i]);
<a name="l00916"></a>00916             }
<a name="l00917"></a>00917 
<a name="l00918"></a>00918         }
<a name="l00919"></a>00919 
<a name="l00920"></a>00920     }
<a name="l00921"></a>00921 
<a name="l00922"></a>00922     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00923"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">00923</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">SPnode::leavesOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00924"></a>00924 <span class="keyword">    </span>{
<a name="l00925"></a>00925         <span class="comment">// uses  member function leafOutputTabs to generate node output</span>
<a name="l00926"></a>00926         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00927"></a>00927             <a class="code" href="classsubpavings_1_1SPnode.shtml#a0f2381175b37224a185eedbe9601d814" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l00928"></a>00928             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00929"></a>00929 
<a name="l00930"></a>00930         }
<a name="l00931"></a>00931 
<a name="l00932"></a>00932         <span class="comment">//recurse on the children</span>
<a name="l00933"></a>00933         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00934"></a>00934             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os);
<a name="l00935"></a>00935         }
<a name="l00936"></a>00936 
<a name="l00937"></a>00937         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00938"></a>00938             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os);
<a name="l00939"></a>00939         }
<a name="l00940"></a>00940 
<a name="l00941"></a>00941     }
<a name="l00942"></a>00942     
<a name="l00943"></a>00943     <span class="comment">//src_trunk_0701</span>
<a name="l00944"></a>00944     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00945"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ac0d9484691c21a316308b4713e6e8bba">00945</a> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">SPnode::leavesOutputTabs</a>(std::ostream &amp;os, <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00946"></a>00946 <span class="keyword"></span>{
<a name="l00947"></a>00947   os &lt;&lt; cxsc::SaveOpt;
<a name="l00948"></a>00948   os &lt;&lt; cxsc::Variable &lt;&lt; cxsc::SetPrecision(prec+2,prec);
<a name="l00949"></a>00949 
<a name="l00950"></a>00950   <a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os);
<a name="l00951"></a>00951   os &lt;&lt; cxsc::RestoreOpt;
<a name="l00952"></a>00952   
<a name="l00953"></a>00953   <span class="keywordflow">return</span> os;
<a name="l00954"></a>00954 
<a name="l00955"></a>00955 }
<a name="l00956"></a>00956 
<a name="l00957"></a>00957     <span class="comment">//Output for all the nodes in this, using tab delimiters</span>
<a name="l00958"></a>00958     <span class="comment">// uses LeafOutputTabs, which is a virtual function</span>
<a name="l00959"></a>00959     <span class="comment">// and can be redefined in derived classes</span>
<a name="l00960"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">00960</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">SPnode::nodesAllOutput</a>(std::ostream &amp;os,
<a name="l00961"></a>00961                                         <span class="keywordtype">int</span> level)<span class="keyword"> const</span>
<a name="l00962"></a>00962 <span class="keyword">    </span>{
<a name="l00963"></a>00963 
<a name="l00964"></a>00964         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00965"></a>00965             <a class="code" href="classsubpavings_1_1SPnode.shtml#a0f2381175b37224a185eedbe9601d814" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l00966"></a>00966             os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00967"></a>00967         }
<a name="l00968"></a>00968 
<a name="l00969"></a>00969         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00970"></a>00970             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++) {
<a name="l00971"></a>00971                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00972"></a>00972             }
<a name="l00973"></a>00973             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, (level+1));
<a name="l00974"></a>00974         }
<a name="l00975"></a>00975 
<a name="l00976"></a>00976         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00977"></a>00977             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++) {
<a name="l00978"></a>00978                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00979"></a>00979             }
<a name="l00980"></a>00980             <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, (level+1));
<a name="l00981"></a>00981         }
<a name="l00982"></a>00982 
<a name="l00983"></a>00983         <span class="keywordflow">return</span> os;
<a name="l00984"></a>00984 
<a name="l00985"></a>00985     }
<a name="l00986"></a>00986 
<a name="l00987"></a>00987 <span class="comment">//src_trunk_0701</span>
<a name="l00988"></a>00988 <span class="comment">//Output for all the nodes in this, using tab delimiters</span>
<a name="l00989"></a>00989 <span class="comment">// uses LeafOutputTabs, which is a virtual function</span>
<a name="l00990"></a>00990 <span class="comment">// and can be redefined in derived classes</span>
<a name="l00991"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7408768856a7c988d9784b6172d74310">00991</a> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">SPnode::nodesAllOutput</a>(std::ostream &amp;os,
<a name="l00992"></a>00992                   <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00993"></a>00993 <span class="keyword"></span>{
<a name="l00994"></a>00994   os &lt;&lt; cxsc::SaveOpt;
<a name="l00995"></a>00995   os &lt;&lt; cxsc::Variable &lt;&lt; cxsc::SetPrecision(prec+2,prec);
<a name="l00996"></a>00996 
<a name="l00997"></a>00997   <a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, level);
<a name="l00998"></a>00998   os &lt;&lt; cxsc::RestoreOpt;
<a name="l00999"></a>00999   
<a name="l01000"></a>01000   <span class="keywordflow">return</span> os;
<a name="l01001"></a>01001 
<a name="l01002"></a>01002 }
<a name="l01003"></a>01003 
<a name="l01004"></a>01004     <span class="comment">// make a .dot file for the subpaving</span>
<a name="l01005"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96">01005</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96" title="Make a .dot graph file from an SPnode tree structure.">SPnode::outputGraphDot</a>()<span class="keyword"> const</span>
<a name="l01006"></a>01006 <span class="keyword">    </span>{
<a name="l01007"></a>01007         <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l01008"></a>01008 
<a name="l01009"></a>01009         std::string toParse = <a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01010"></a>01010 
<a name="l01011"></a>01011         std::string baseFileName = <span class="stringliteral">&quot;graph&quot;</span>;
<a name="l01012"></a>01012         std::string suffix = <span class="stringliteral">&quot;.dot&quot;</span>;
<a name="l01013"></a>01013         std::string s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName, suffix);
<a name="l01014"></a>01014         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;digraph G {&quot;</span>); <span class="comment">// opening line</span>
<a name="l01015"></a>01015 
<a name="l01016"></a>01016         <span class="keywordflow">if</span> (toParse.length() &gt; 0) {
<a name="l01017"></a>01017 
<a name="l01018"></a>01018             success = <a class="code" href="namespacesubpavings.shtml#a0973b1623e6e12ba060db40d9cceece1" title="Parse a string to make lines for a dot graph.">parseForGraphDot</a>(s, toParse);
<a name="l01019"></a>01019 
<a name="l01020"></a>01020         }
<a name="l01021"></a>01021         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>.length() &gt; 0) {
<a name="l01022"></a>01022             <span class="comment">// only the root node</span>
<a name="l01023"></a>01023             std::string line = <span class="stringliteral">&quot;\t &quot;</span> + <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;;&quot;</span>;
<a name="l01024"></a>01024             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, line);
<a name="l01025"></a>01025             success = <span class="keyword">true</span>;
<a name="l01026"></a>01026 
<a name="l01027"></a>01027        }
<a name="l01028"></a>01028 
<a name="l01029"></a>01029         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;}&quot;</span>); <span class="comment">// closing line</span>
<a name="l01030"></a>01030 
<a name="l01031"></a>01031         <span class="comment">// make the image from the dot file</span>
<a name="l01032"></a>01032         <a class="code" href="namespacesubpavings.shtml#abb4671c14005974aeea8f0dd39600ec6" title="make a Dot graph png image given a dot file.">makeDotImage</a>(s);
<a name="l01033"></a>01033 
<a name="l01034"></a>01034         <span class="keywordflow">return</span> success;
<a name="l01035"></a>01035     }
<a name="l01036"></a>01036 
<a name="l01037"></a>01037 <span class="comment">//src_trunk_0701</span>
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 
<a name="l01040"></a>01040 <span class="comment">// Check if a node contains a datapoint</span>
<a name="l01041"></a>01041 <span class="comment">// it is assumed that the node will have a box</span>
<a name="l01042"></a>01042 <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l01043"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb">01043</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb" title="Check if the box a node represents contains a datapoint p.">SPnode::nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l01044"></a>01044             <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd)<span class="keyword"> const</span>
<a name="l01045"></a>01045 <span class="keyword"></span>{
<a name="l01046"></a>01046   <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01047"></a>01047   
<a name="l01048"></a>01048   <span class="comment">// only check for total containment if this is a parent node</span>
<a name="l01049"></a>01049   <span class="comment">// or to be treated as such</span>
<a name="l01050"></a>01050   <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) || (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>)) {
<a name="l01051"></a>01051   
<a name="l01052"></a>01052     <span class="comment">// cast p to an ivector</span>
<a name="l01053"></a>01053     ivector pvec = _ivector(p);
<a name="l01054"></a>01054   
<a name="l01055"></a>01055     <span class="comment">//find if p is in the box</span>
<a name="l01056"></a>01056     <span class="keywordflow">if</span> (pvec &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l01057"></a>01057       retValue = <span class="keyword">true</span>;
<a name="l01058"></a>01058     }
<a name="l01059"></a>01059   }
<a name="l01060"></a>01060   <span class="comment">// if not to be treated as a whole box, we assume it was in the parent</span>
<a name="l01061"></a>01061   <span class="comment">// and only check ourselves with respect to the split dimension</span>
<a name="l01062"></a>01062   <span class="comment">// and if this is a right child it can be anywhere </span>
<a name="l01063"></a>01063   <span class="comment">// but  this is a left child,</span>
<a name="l01064"></a>01064   <span class="comment">// we need to check the split</span>
<a name="l01065"></a>01065   <span class="comment">// find what dimension the parent was split on and what</span>
<a name="l01066"></a>01066   <span class="comment">// the split value was</span>
<a name="l01067"></a>01067   <span class="comment">// pvector must be strictly less than parentSplitValue</span>
<a name="l01068"></a>01068   <span class="comment">// on the split dimension</span>
<a name="l01069"></a>01069   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> != NULL) { <span class="comment">// truly not a parent node</span>
<a name="l01070"></a>01070   
<a name="l01071"></a>01071     <span class="keywordtype">int</span> parentSplitDim = (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>())-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>();
<a name="l01072"></a>01072     
<a name="l01073"></a>01073     <span class="keywordflow">if</span> (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>) { 
<a name="l01074"></a>01074       retValue = (p[parentSplitDim] &lt; Sup(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()[parentSplitDim]));
<a name="l01075"></a>01075     }
<a name="l01076"></a>01076     <span class="keywordflow">if</span> (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>) { 
<a name="l01077"></a>01077       retValue = !(p[parentSplitDim] &lt; Inf(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()[parentSplitDim]));
<a name="l01078"></a>01078     }
<a name="l01079"></a>01079   }
<a name="l01080"></a>01080   
<a name="l01081"></a>01081   <span class="keywordflow">return</span> retValue;
<a name="l01082"></a>01082 }
<a name="l01083"></a>01083 
<a name="l01084"></a>01084 
<a name="l01085"></a>01085 
<a name="l01086"></a>01086 
<a name="l01087"></a>01087     <span class="comment">// test for ivector z contained in the subpaving represented by this</span>
<a name="l01088"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3">01088</a>     <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3" title="Check if ivector z is contained in this or children.">SPnode::spContains</a>(<span class="keyword">const</span> ivector&amp; z)<span class="keyword"> const</span>
<a name="l01089"></a>01089 <span class="keyword">    </span>{
<a name="l01090"></a>01090         <span class="comment">// z is assumed not to be empty</span>
<a name="l01091"></a>01091         <span class="comment">// nb Intersection() gives error if unequal index sets passed</span>
<a name="l01092"></a>01092 
<a name="l01093"></a>01093         <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>; <span class="comment">// for the return value</span>
<a name="l01094"></a>01094 
<a name="l01095"></a>01095         <span class="comment">// case of a non-empty leaf</span>
<a name="l01096"></a>01096         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01097"></a>01097 
<a name="l01098"></a>01098             ivector r; <span class="comment">// temporary,to be passed to Intersection</span>
<a name="l01099"></a>01099 
<a name="l01100"></a>01100             <span class="keywordflow">if</span> (z&lt;=<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l01101"></a>01101                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>;
<a name="l01102"></a>01102             }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104             <span class="comment">// result is indeterminate if there is an</span>
<a name="l01105"></a>01105             <span class="comment">// intersection but z is not wholly in theBox</span>
<a name="l01106"></a>01106             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(r, z, <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01107"></a>01107                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l01108"></a>01108             }
<a name="l01109"></a>01109 
<a name="l01110"></a>01110             <span class="comment">// Case that there is no intersection</span>
<a name="l01111"></a>01111             <span class="keywordflow">else</span> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01112"></a>01112 
<a name="l01113"></a>01113         } <span class="comment">// end (!isEmpty() &amp;&amp; isLeaf())</span>
<a name="l01114"></a>01114 
<a name="l01115"></a>01115         <span class="comment">//case of an non-empty non-leaf</span>
<a name="l01116"></a>01116         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01117"></a>01117         <span class="comment">//</span>
<a name="l01118"></a>01118 
<a name="l01119"></a>01119             ivector Lz, Rz; <span class="comment">// ivectors passed to Intersection()</span>
<a name="l01120"></a>01120             <span class="comment">// will contain intersection after Intersection() call</span>
<a name="l01121"></a>01121 
<a name="l01122"></a>01122             <span class="comment">// to hold results of tests on left and right children</span>
<a name="l01123"></a>01123             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Ltest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01124"></a>01124             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Rtest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01125"></a>01125 
<a name="l01126"></a>01126             <span class="comment">// indicators for tested left and right sides</span>
<a name="l01127"></a>01127             <span class="keywordtype">bool</span> LtestSuccess = <span class="keyword">false</span>;
<a name="l01128"></a>01128             <span class="keywordtype">bool</span> RtestSuccess = <span class="keyword">false</span>;
<a name="l01129"></a>01129 
<a name="l01130"></a>01130             <span class="comment">// Find if there is a leftChild with a box</span>
<a name="l01131"></a>01131             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp;
<a name="l01132"></a>01132                 <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Lz, z, <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01133"></a>01133                 <span class="comment">// Lz contains intersctn of z &amp; leftChild box</span>
<a name="l01134"></a>01134 
<a name="l01135"></a>01135                 <span class="comment">// test Lz and left child node</span>
<a name="l01136"></a>01136                 Ltest = ((*leftChild).spContains(Lz));
<a name="l01137"></a>01137                 LtestSuccess = <span class="keyword">true</span>;
<a name="l01138"></a>01138             }
<a name="l01139"></a>01139 
<a name="l01140"></a>01140 
<a name="l01141"></a>01141             <span class="comment">// Find if there is a rightChild with a box</span>
<a name="l01142"></a>01142             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp;
<a name="l01143"></a>01143                 <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Rz, z, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01144"></a>01144                 <span class="comment">// Rz contains intersctn of z &amp; rightChild box</span>
<a name="l01145"></a>01145 
<a name="l01146"></a>01146                 <span class="comment">// test Rz and right child node</span>
<a name="l01147"></a>01147                 Rtest = ((*rightChild).spContains(Rz));
<a name="l01148"></a>01148                 RtestSuccess = <span class="keyword">true</span>;
<a name="l01149"></a>01149             }
<a name="l01150"></a>01150 
<a name="l01151"></a>01151             <span class="comment">// if both children tested</span>
<a name="l01152"></a>01152             <span class="keywordflow">if</span> (LtestSuccess &amp;&amp; RtestSuccess) {
<a name="l01153"></a>01153                 <span class="comment">//return value is the result of both tests</span>
<a name="l01154"></a>01154                     <span class="comment">// if the same or BI_INDET if diff</span>
<a name="l01155"></a>01155                 Ltest==Rtest ?
<a name="l01156"></a>01156                     retValue = Ltest : retValue=<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l01157"></a>01157             }
<a name="l01158"></a>01158 
<a name="l01159"></a>01159             <span class="comment">// if has two children but neither was tested</span>
<a name="l01160"></a>01160             <span class="comment">// ie neither Intersection() returned true</span>
<a name="l01161"></a>01161             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l01162"></a>01162                 &amp;&amp; !LtestSuccess &amp;&amp; !RtestSuccess) {
<a name="l01163"></a>01163                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01164"></a>01164                 <span class="comment">// note that the AIA book has BI_TRUE here</span>
<a name="l01165"></a>01165                 <span class="comment">// but this can&#39;t be correct</span>
<a name="l01166"></a>01166             }
<a name="l01167"></a>01167 
<a name="l01168"></a>01168             <span class="comment">// if has two children but only right was tested</span>
<a name="l01169"></a>01169             <span class="comment">// ie left Intersection() returned false</span>
<a name="l01170"></a>01170             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l01171"></a>01171                 &amp;&amp; !LtestSuccess &amp;&amp; RtestSuccess) {
<a name="l01172"></a>01172                 retValue = Rtest;
<a name="l01173"></a>01173                 <span class="comment">// return value result of test of right side</span>
<a name="l01174"></a>01174             }
<a name="l01175"></a>01175 
<a name="l01176"></a>01176             <span class="comment">// if has two children but only left was tested</span>
<a name="l01177"></a>01177             <span class="comment">// ie right Intersection() returned false</span>
<a name="l01178"></a>01178             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l01179"></a>01179                 &amp;&amp; LtestSuccess &amp;&amp; !RtestSuccess) {
<a name="l01180"></a>01180                 retValue = Ltest;
<a name="l01181"></a>01181                 <span class="comment">// return value result of test of left side</span>
<a name="l01182"></a>01182             }
<a name="l01183"></a>01183 
<a name="l01184"></a>01184             <span class="comment">// if has right child only and that child was tested</span>
<a name="l01185"></a>01185             <span class="comment">// ie Intersection() returned true</span>
<a name="l01186"></a>01186             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()
<a name="l01187"></a>01187                 &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; RtestSuccess) {
<a name="l01188"></a>01188                 <span class="comment">// if all of z contained in right child&#39;s box</span>
<a name="l01189"></a>01189                 <span class="keywordflow">if</span> (Rz==z) {
<a name="l01190"></a>01190                     retValue = Rtest;
<a name="l01191"></a>01191                 }
<a name="l01192"></a>01192                 <span class="comment">// return false if Rtest false, else INDET</span>
<a name="l01193"></a>01193                 <span class="keywordflow">else</span> {
<a name="l01194"></a>01194                     Rtest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> ? retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>
<a name="l01195"></a>01195                         : retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l01196"></a>01196                 }
<a name="l01197"></a>01197             }
<a name="l01198"></a>01198 
<a name="l01199"></a>01199             <span class="comment">// if has right child only and that child not tested</span>
<a name="l01200"></a>01200             <span class="comment">// ie Intersection() returned false</span>
<a name="l01201"></a>01201             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()
<a name="l01202"></a>01202                 &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !RtestSuccess) {
<a name="l01203"></a>01203                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01204"></a>01204             }
<a name="l01205"></a>01205 
<a name="l01206"></a>01206             <span class="comment">// if has left child only and that child was tested</span>
<a name="l01207"></a>01207             <span class="comment">// ie Intersection() returned true</span>
<a name="l01208"></a>01208             <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l01209"></a>01209                 &amp;&amp; LtestSuccess) {
<a name="l01210"></a>01210                 <span class="comment">// if whole of z contained in left child&#39;s box</span>
<a name="l01211"></a>01211                 <span class="keywordflow">if</span> (Lz==z) {
<a name="l01212"></a>01212                     retValue = Ltest;
<a name="l01213"></a>01213                 }
<a name="l01214"></a>01214                 <span class="comment">// return false if Ltest false, otherwise INDET</span>
<a name="l01215"></a>01215                 <span class="keywordflow">else</span> {
<a name="l01216"></a>01216                     Ltest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> ?
<a name="l01217"></a>01217                         retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> :
<a name="l01218"></a>01218                         retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l01219"></a>01219                 }
<a name="l01220"></a>01220             }
<a name="l01221"></a>01221 
<a name="l01222"></a>01222             <span class="comment">// if has left child only &amp; that child was not tested</span>
<a name="l01223"></a>01223             <span class="comment">// ie Intersection() returned false</span>
<a name="l01224"></a>01224             <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l01225"></a>01225                 &amp;&amp; !LtestSuccess) {
<a name="l01226"></a>01226                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01227"></a>01227             }
<a name="l01228"></a>01228 
<a name="l01229"></a>01229             <span class="comment">// case no children covered by isLeaf() block above</span>
<a name="l01230"></a>01230 
<a name="l01231"></a>01231         } <span class="comment">// end of (!isEmpty() &amp;&amp; !isLeaf())</span>
<a name="l01232"></a>01232 
<a name="l01233"></a>01233         <span class="comment">// case of isEmpty() being true is take care of</span>
<a name="l01234"></a>01234         <span class="comment">// by default return value being BI_FALSE</span>
<a name="l01235"></a>01235 
<a name="l01236"></a>01236         <span class="keywordflow">return</span> retValue;
<a name="l01237"></a>01237 
<a name="l01238"></a>01238     } <span class="comment">// end of spContains for ivector</span>
<a name="l01239"></a>01239 
<a name="l01240"></a>01240 
<a name="l01241"></a>01241     <span class="comment">// test for rvector p contained in subpaving represented by this node</span>
<a name="l01242"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a56f98ed5bc26b9b11dfce51f3e667e2b">01242</a>     <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3" title="Check if ivector z is contained in this or children.">SPnode::spContains</a>(<span class="keyword">const</span> rvector&amp; p)<span class="keyword"> const</span>
<a name="l01243"></a>01243 <span class="keyword">    </span>{
<a name="l01244"></a>01244         <span class="comment">// p is assumed not to be empty</span>
<a name="l01245"></a>01245         <span class="comment">// nb Intersection() gives error if unequal index sets passed</span>
<a name="l01246"></a>01246 
<a name="l01247"></a>01247         <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>; <span class="comment">// for the return value</span>
<a name="l01248"></a>01248 
<a name="l01249"></a>01249         <span class="comment">//cast p to an ivector</span>
<a name="l01250"></a>01250         ivector pvector = _ivector(p);
<a name="l01251"></a>01251 
<a name="l01252"></a>01252         <span class="comment">// case of a non-empty leaf</span>
<a name="l01253"></a>01253         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01254"></a>01254 
<a name="l01255"></a>01255 
<a name="l01256"></a>01256             <span class="comment">//find if p is in the box</span>
<a name="l01257"></a>01257             <span class="keywordflow">if</span> (pvector &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l01258"></a>01258                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>;
<a name="l01259"></a>01259             }
<a name="l01260"></a>01260             <span class="comment">//else retValue keeps default value of BI_FALSE</span>
<a name="l01261"></a>01261 
<a name="l01262"></a>01262 
<a name="l01263"></a>01263         } <span class="comment">// end (!isEmpty() &amp;&amp; isLeaf())</span>
<a name="l01264"></a>01264 
<a name="l01265"></a>01265         <span class="comment">//case of an non-empty non-leaf</span>
<a name="l01266"></a>01266         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01267"></a>01267 
<a name="l01268"></a>01268             <span class="comment">// to hold results of tests on left and right children</span>
<a name="l01269"></a>01269             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Ltest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01270"></a>01270             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Rtest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l01271"></a>01271 
<a name="l01272"></a>01272             <span class="comment">// Find if there is a leftChild with a box</span>
<a name="l01273"></a>01273             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01274"></a>01274                 <span class="comment">// test left child node</span>
<a name="l01275"></a>01275                 Ltest = ((*leftChild).spContains(p));
<a name="l01276"></a>01276             }
<a name="l01277"></a>01277 
<a name="l01278"></a>01278 
<a name="l01279"></a>01279             <span class="comment">// Find if there is a rightChild with a box</span>
<a name="l01280"></a>01280             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01281"></a>01281                 <span class="comment">// test Rz and right child node</span>
<a name="l01282"></a>01282                 Rtest = ((*rightChild).spContains(p));
<a name="l01283"></a>01283             }
<a name="l01284"></a>01284 
<a name="l01285"></a>01285             <span class="keywordflow">if</span> ((Ltest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>) || (Rtest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>)) {
<a name="l01286"></a>01286                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>;
<a name="l01287"></a>01287             }
<a name="l01288"></a>01288             <span class="comment">//else retValue keeps default value of BI_FALSE</span>
<a name="l01289"></a>01289 
<a name="l01290"></a>01290             <span class="comment">// case no children taken care of by isLeaf() above</span>
<a name="l01291"></a>01291 
<a name="l01292"></a>01292         } <span class="comment">// end of (!isEmpty() &amp;&amp; !isLeaf())</span>
<a name="l01293"></a>01293 
<a name="l01294"></a>01294         <span class="comment">// case isEmpty() true covered by default retValue = BI_FALSE</span>
<a name="l01295"></a>01295 
<a name="l01296"></a>01296         <span class="keywordflow">return</span> retValue;
<a name="l01297"></a>01297 
<a name="l01298"></a>01298     } <span class="comment">// end of spContains for rvector</span>
<a name="l01299"></a>01299 
<a name="l01300"></a>01300 
<a name="l01301"></a>01301 
<a name="l01302"></a>01302     <span class="comment">// add two sibling nodes to this provided that this node is a leaf</span>
<a name="l01303"></a>01303     <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l01304"></a>01304     <span class="comment">// split the box in half normal to dimension set by comp</span>
<a name="l01305"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543">01305</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">SPnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l01306"></a>01306     {
<a name="l01307"></a>01307         <span class="keywordflow">try</span>
<a name="l01308"></a>01308         {
<a name="l01309"></a>01309             <span class="comment">// only do something if this SPnode is a leaf</span>
<a name="l01310"></a>01310             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01311"></a>01311 
<a name="l01312"></a>01312                 <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l01313"></a>01313                 ivector lC, rC;
<a name="l01314"></a>01314 
<a name="l01315"></a>01315                 <span class="comment">// Call Lower() and Upper() to put split boxes</span>
<a name="l01316"></a>01316                 <span class="comment">// into lC and rC respectively</span>
<a name="l01317"></a>01317                 <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), lC, comp);
<a name="l01318"></a>01318                 <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rC, comp);
<a name="l01319"></a>01319 
<a name="l01320"></a>01320                 <span class="comment">// make children and make this their parent</span>
<a name="l01321"></a>01321                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(lC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>);
<a name="l01322"></a>01322                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l01323"></a>01323                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(rC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>);
<a name="l01324"></a>01324                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l01325"></a>01325 
<a name="l01326"></a>01326                 <span class="comment">//name the new children</span>
<a name="l01327"></a>01327                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l01328"></a>01328                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l01329"></a>01329 
<a name="l01330"></a>01330             }
<a name="l01331"></a>01331         }
<a name="l01332"></a>01332 
<a name="l01333"></a>01333         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l01334"></a>01334         {
<a name="l01335"></a>01335 
<a name="l01336"></a>01336             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory &quot;</span>
<a name="l01337"></a>01337                 &lt;&lt; <span class="stringliteral">&quot;in SPnode::nodeExpand()&quot;</span> &lt;&lt; std::endl;
<a name="l01338"></a>01338             <span class="keywordflow">throw</span>;
<a name="l01339"></a>01339         }
<a name="l01340"></a>01340 
<a name="l01341"></a>01341     }
<a name="l01342"></a>01342 
<a name="l01343"></a>01343     <span class="comment">// finds the dimension to split on and then calls nodeExpand(int comp)</span>
<a name="l01344"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55">01344</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">SPnode::nodeExpand</a>()
<a name="l01345"></a>01345     {
<a name="l01346"></a>01346         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01347"></a>01347         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l01348"></a>01348         <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l01349"></a>01349 
<a name="l01350"></a>01350     }
<a name="l01351"></a>01351     
<a name="l01352"></a>01352      <span class="comment">// finds the dimension to split on and then calls nodeExpand(int comp)</span>
<a name="l01353"></a>01353     <span class="comment">// will also bring validation data down</span>
<a name="l01354"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a3b16d632897f3a4fb11f36db1e9004bf">01354</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">SPnode::nodeExpand</a>(<span class="keywordtype">bool</span> boolVal)
<a name="l01355"></a>01355     {
<a name="l01356"></a>01356         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01357"></a>01357         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l01358"></a>01358         <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">nodeExpand</a>(maxdiamcomp);
<a name="l01359"></a>01359     }
<a name="l01360"></a>01360 
<a name="l01361"></a>01361     <span class="comment">// reabsorb children into this</span>
<a name="l01362"></a>01362     <span class="comment">// just needs to delete the children</span>
<a name="l01363"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36">01363</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36" title="Reabsorbs both children of the node.">SPnode::nodeReabsorbChildren</a>()
<a name="l01364"></a>01364     {
<a name="l01365"></a>01365         <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l01366"></a>01366         <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l01367"></a>01367         <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l01368"></a>01368         <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l01369"></a>01369 
<a name="l01370"></a>01370     }
<a name="l01371"></a>01371 
<a name="l01372"></a>01372 
<a name="l01373"></a>01373     <span class="comment">// computes a minimal subpaving from two sibling subpavings</span>
<a name="l01374"></a>01374     <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l01375"></a>01375     <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l01376"></a>01376     <span class="comment">// lChild and rChild are the two subpavings to be reunited</span>
<a name="l01377"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc">01377</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc" title="Tries to reunite nodes.">SPnode::nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *rChild)
<a name="l01378"></a>01378 
<a name="l01379"></a>01379     {
<a name="l01380"></a>01380         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01381"></a>01381 
<a name="l01382"></a>01382         <span class="comment">// check that the labels match and exit if not</span>
<a name="l01383"></a>01383         <span class="keywordflow">if</span> ((lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> ) || (rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>)) {
<a name="l01384"></a>01384              <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Box labels do not match&quot;</span>);
<a name="l01385"></a>01385         }
<a name="l01386"></a>01386 
<a name="l01387"></a>01387         <span class="comment">// if both subpavings are leaves and hull of boxes is x,</span>
<a name="l01388"></a>01388         <span class="comment">// discard them: *this is a leaf</span>
<a name="l01389"></a>01389         <span class="keywordflow">if</span> (lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01390"></a>01390             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> !=
<a name="l01391"></a>01391                 (*(lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) | *(rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l01392"></a>01392                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes to reunite not = this box&quot;</span>);
<a name="l01393"></a>01393             }
<a name="l01394"></a>01394 
<a name="l01395"></a>01395             <span class="comment">//discard the two subpavings given</span>
<a name="l01396"></a>01396             <span class="keyword">delete</span> lChild;
<a name="l01397"></a>01397             <span class="keyword">delete</span> rChild;
<a name="l01398"></a>01398 
<a name="l01399"></a>01399         }
<a name="l01400"></a>01400 
<a name="l01401"></a>01401         <span class="keywordflow">else</span> {  <span class="comment">// at least one of the children is not a leaf</span>
<a name="l01402"></a>01402             <span class="comment">// this has to adopt them rather than reuniting them</span>
<a name="l01403"></a>01403             <a class="code" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(lChild);
<a name="l01404"></a>01404             <a class="code" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(rChild);
<a name="l01405"></a>01405             <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>(); <span class="comment">// recursively rename child branches</span>
<a name="l01406"></a>01406         }
<a name="l01407"></a>01407 
<a name="l01408"></a>01408     }
<a name="l01409"></a>01409 
<a name="l01410"></a>01410     <span class="comment">// add lChild onto this node</span>
<a name="l01411"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f">01411</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">SPnode::nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild)
<a name="l01412"></a>01412     {
<a name="l01413"></a>01413         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01414"></a>01414 
<a name="l01415"></a>01415         <span class="comment">// check that the labels match and exit if not</span>
<a name="l01416"></a>01416         <span class="keywordflow">if</span> (lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>) {
<a name="l01417"></a>01417             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Labels on boxes do not match&quot;</span>);
<a name="l01418"></a>01418 
<a name="l01419"></a>01419         }
<a name="l01420"></a>01420 
<a name="l01421"></a>01421         <span class="comment">// check  box for this is union of boxes of proposed children</span>
<a name="l01422"></a>01422         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01423"></a>01423             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Cannot adopt left with existing left child&quot;</span>);
<a name="l01424"></a>01424 
<a name="l01425"></a>01425         }
<a name="l01426"></a>01426         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01427"></a>01427             <span class="comment">// check that this new box fits with the current box</span>
<a name="l01428"></a>01428             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> !=
<a name="l01429"></a>01429                 (*(lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) | *(<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l01430"></a>01430                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Child boxes do not fit together&quot;</span>);
<a name="l01431"></a>01431             }
<a name="l01432"></a>01432 
<a name="l01433"></a>01433         }
<a name="l01434"></a>01434 
<a name="l01435"></a>01435         this-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = lChild;
<a name="l01436"></a>01436         <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l01437"></a>01437     }
<a name="l01438"></a>01438 
<a name="l01439"></a>01439     <span class="comment">// add Child onto this node</span>
<a name="l01440"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26">01440</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">SPnode::nodeAddRight</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *rChild)
<a name="l01441"></a>01441     {
<a name="l01442"></a>01442         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01443"></a>01443 
<a name="l01444"></a>01444         <span class="comment">// check that the labels match and exit if not</span>
<a name="l01445"></a>01445         <span class="keywordflow">if</span> (rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>) {
<a name="l01446"></a>01446             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Box labels do not match&quot;</span>);
<a name="l01447"></a>01447 
<a name="l01448"></a>01448         }
<a name="l01449"></a>01449 
<a name="l01450"></a>01450         <span class="comment">// check  box for this is union of boxes of proposed children</span>
<a name="l01451"></a>01451         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01452"></a>01452             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Cannot adopt right with existing right child&quot;</span>);
<a name="l01453"></a>01453 
<a name="l01454"></a>01454         }
<a name="l01455"></a>01455         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01456"></a>01456             <span class="comment">// check that this new box fits with the current box</span>
<a name="l01457"></a>01457             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> !=
<a name="l01458"></a>01458                 (*(rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) | *(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l01459"></a>01459                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Child boxes do not fit together&quot;</span>);
<a name="l01460"></a>01460             }
<a name="l01461"></a>01461 
<a name="l01462"></a>01462         }
<a name="l01463"></a>01463 
<a name="l01464"></a>01464         this-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = rChild;
<a name="l01465"></a>01465         <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l01466"></a>01466 
<a name="l01467"></a>01467     }
<a name="l01468"></a>01468 
<a name="l01469"></a>01469     <span class="comment">// graft lChild onto this node</span>
<a name="l01470"></a>01470     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l01471"></a>01471     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l01472"></a>01472     <span class="comment">// used when we are building a subpaving from the leaf nodes upwards</span>
<a name="l01473"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16">01473</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16" title="Builds a higher level of a tree from existing nodes.">SPnode::nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild)
<a name="l01474"></a>01474     {
<a name="l01475"></a>01475         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01476"></a>01476 
<a name="l01477"></a>01477         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l01478"></a>01478         <span class="comment">// nodeAddLeft() checks labels, hull size, present children</span>
<a name="l01479"></a>01479         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(lChild);
<a name="l01480"></a>01480     }
<a name="l01481"></a>01481 
<a name="l01482"></a>01482     <span class="comment">// graft lChild onto this node</span>
<a name="l01483"></a>01483     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l01484"></a>01484     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l01485"></a>01485     <span class="comment">// used when we are building a subpaving from the leaf nodes upwards</span>
<a name="l01486"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676">01486</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676" title="Builds a higher level of a tree from existing nodes.">SPnode::nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *rChild)
<a name="l01487"></a>01487     {
<a name="l01488"></a>01488         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01489"></a>01489 
<a name="l01490"></a>01490         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l01491"></a>01491         <span class="comment">// nodeAddRight() checks labels, hull size, present children</span>
<a name="l01492"></a>01492         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(rChild);
<a name="l01493"></a>01493     }
<a name="l01494"></a>01494 
<a name="l01495"></a>01495     <span class="comment">// Makes a string of child names left to right order</span>
<a name="l01496"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5">01496</a>     std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">SPnode::getChildNodeNames</a>()<span class="keyword"> const</span>
<a name="l01497"></a>01497 <span class="keyword">    </span>{
<a name="l01498"></a>01498         std::string retStr = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01499"></a>01499         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * LChild =  <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l01500"></a>01500         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * RChild =  <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l01501"></a>01501 
<a name="l01502"></a>01502         <span class="keywordflow">if</span> (LChild != NULL) {
<a name="l01503"></a>01503             retStr += <span class="stringliteral">&quot; &quot;</span>;
<a name="l01504"></a>01504             retStr += LChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l01505"></a>01505         }
<a name="l01506"></a>01506         <span class="keywordflow">if</span> (RChild != NULL) {
<a name="l01507"></a>01507             retStr += <span class="stringliteral">&quot; &quot;</span>;
<a name="l01508"></a>01508             retStr += RChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l01509"></a>01509         }
<a name="l01510"></a>01510         <span class="keywordflow">if</span> (LChild != NULL) {
<a name="l01511"></a>01511             retStr += LChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01512"></a>01512         }
<a name="l01513"></a>01513         <span class="keywordflow">if</span> (RChild != NULL) {
<a name="l01514"></a>01514             retStr += RChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01515"></a>01515         }
<a name="l01516"></a>01516         <span class="keywordflow">return</span> retStr;
<a name="l01517"></a>01517     }
<a name="l01518"></a>01518 
<a name="l01519"></a>01519   <span class="comment">//src_trunk_0701</span>
<a name="l01520"></a>01520     <span class="comment">/* \brief Reshape so that the tree rooted at this has shape that</span>
<a name="l01521"></a>01521 <span class="comment">    is the union of this shape and the shape of another tree.</span>
<a name="l01522"></a>01522 <span class="comment">  </span>
<a name="l01523"></a>01523 <span class="comment">  Throws a NoBox_Error if this has no box or if \a other has no box. </span>
<a name="l01524"></a>01524 <span class="comment">  Throws an IncompatibleDimensions_Error if boxes of this and \a other</span>
<a name="l01525"></a>01525 <span class="comment">  are not the same.</span>
<a name="l01526"></a>01526 <span class="comment">  </span>
<a name="l01527"></a>01527 <span class="comment">  \param other is the tree to make the union against.</span>
<a name="l01528"></a>01528 <span class="comment">  \pre This has a box and that box is identical to the box of \a other. </span>
<a name="l01529"></a>01529 <span class="comment">  \post the tree rooted at this has shape that is the</span>
<a name="l01530"></a>01530 <span class="comment">  union of the shape of this before the operation and the shape of </span>
<a name="l01531"></a>01531 <span class="comment">  \a other.  \a other is unchanged.      */</span>
<a name="l01532"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a1113235b4bedd4a2849cc8e6dae719dc">01532</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a1113235b4bedd4a2849cc8e6dae719dc" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">SPnode::reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other)
<a name="l01533"></a>01533   {
<a name="l01534"></a>01534     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l01535"></a>01535       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l01536"></a>01536       <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;)&quot;</span>);
<a name="l01537"></a>01537     }
<a name="l01538"></a>01538     <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() )  {
<a name="l01539"></a>01539       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l01540"></a>01540       <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;)&quot;</span>);
<a name="l01541"></a>01541     }
<a name="l01542"></a>01542     <span class="keywordflow">if</span> ( !other.<a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>() )
<a name="l01543"></a>01543       <span class="keywordflow">throw</span> runtime_error(
<a name="l01544"></a>01544       <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;) : other has illegal tree state&quot;</span>);
<a name="l01545"></a>01545     
<a name="l01546"></a>01546     this-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17" title="Reshape the tree rooted at this so that it has the shape that is the non-minimal union of the tree or...">_reshapeToUnion</a>(&amp;other);
<a name="l01547"></a>01547     
<a name="l01548"></a>01548   }
<a name="l01549"></a>01549 
<a name="l01550"></a>01550   <span class="comment">// split a root box to a shape specified by the instruction string</span>
<a name="l01551"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea">01551</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea" title="Split a root paving to a specified shape.">SPnode::splitRootToShape</a>(std::string instruction)
<a name="l01552"></a>01552     {
<a name="l01553"></a>01553         <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l01554"></a>01554         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) {
<a name="l01555"></a>01555             std::string res = <a class="code" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b" title="splitting according to instruction string.">splitLeft</a>(instruction);
<a name="l01556"></a>01556             <span class="keywordflow">if</span> (res == <span class="stringliteral">&quot;&quot;</span>) success = <span class="keyword">true</span>;
<a name="l01557"></a>01557         }
<a name="l01558"></a>01558         <span class="keywordflow">else</span> {
<a name="l01559"></a>01559             std::cerr &lt;&lt; <span class="stringliteral">&quot;Sorry, not a root paving&quot;</span> &lt;&lt; std::endl;
<a name="l01560"></a>01560         }
<a name="l01561"></a>01561         <span class="keywordflow">return</span> success;
<a name="l01562"></a>01562     }
<a name="l01563"></a>01563 
<a name="l01564"></a>01564     <span class="comment">// Return a container of boxes represented by the finest common</span>
<a name="l01565"></a>01565     <span class="comment">// level of nodes between two subpavings.</span>
<a name="l01566"></a>01566     <span class="comment">// ie the &#39;outer jacket&#39; that is the collection of smallest boxes that fits</span>
<a name="l01567"></a>01567     <span class="comment">// both of the inner subpavings</span>
<a name="l01568"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">01568</a>     <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">SPnode::vecLeafBoxOuterJacket</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l01569"></a>01569                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01570"></a>01570     {
<a name="l01571"></a>01571         <span class="comment">// only do something if both nodes are non-null and boxes match</span>
<a name="l01572"></a>01572         <span class="keywordflow">if</span> (spn1 != NULL &amp;&amp; spn2 != NULL &amp;&amp;
<a name="l01573"></a>01573                         (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == spn2-&gt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01574"></a>01574 
<a name="l01575"></a>01575             <span class="comment">// if both are leaves or</span>
<a name="l01576"></a>01576             <span class="comment">// one of them does not have a child that the other has</span>
<a name="l01577"></a>01577             <span class="comment">// then push back the box of the node we are in now</span>
<a name="l01578"></a>01578             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01579"></a>01579                 boxes.push_back(spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l01580"></a>01580             }
<a name="l01581"></a>01581             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL
<a name="l01582"></a>01582                         &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() == NULL)
<a name="l01583"></a>01583                         || (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() == NULL
<a name="l01584"></a>01584                         &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL)
<a name="l01585"></a>01585                         || (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() != NULL
<a name="l01586"></a>01586                         &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() == NULL)
<a name="l01587"></a>01587                         || (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() == NULL
<a name="l01588"></a>01588                         &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() != NULL)) {
<a name="l01589"></a>01589                 boxes.push_back(spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l01590"></a>01590             }
<a name="l01591"></a>01591 
<a name="l01592"></a>01592             <span class="keywordflow">else</span> {
<a name="l01593"></a>01593                 <span class="comment">// we recurse on the children if both have both children</span>
<a name="l01594"></a>01594                 <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL
<a name="l01595"></a>01595                             &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL) {
<a name="l01596"></a>01596                     boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(boxes,
<a name="l01597"></a>01597                                 spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(), spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01598"></a>01598                 }
<a name="l01599"></a>01599                 <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() != NULL
<a name="l01600"></a>01600                             &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() != NULL) {
<a name="l01601"></a>01601 
<a name="l01602"></a>01602                     boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(boxes,
<a name="l01603"></a>01603                                 spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(), spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01604"></a>01604                 }
<a name="l01605"></a>01605             }
<a name="l01606"></a>01606         }
<a name="l01607"></a>01607         <span class="keywordflow">return</span> boxes;
<a name="l01608"></a>01608     }
<a name="l01609"></a>01609 
<a name="l01610"></a>01610     <span class="comment">// Return a container of boxes represented by the finest common</span>
<a name="l01611"></a>01611     <span class="comment">// level of nodes between two subpavings.</span>
<a name="l01612"></a>01612     <span class="comment">// ie the &#39;outer jacket&#39; that is the finest subpaving that fits</span>
<a name="l01613"></a>01613     <span class="comment">// both of the inner subpavings</span>
<a name="l01614"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">01614</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">SPnode::spLeafBoxOuterJacket</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01615"></a>01615                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01616"></a>01616     {
<a name="l01617"></a>01617         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* jacketSP = NULL;
<a name="l01618"></a>01618         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> jacketBoxes;
<a name="l01619"></a>01619         jacketBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(jacketBoxes,
<a name="l01620"></a>01620                         spn1, spn2);
<a name="l01621"></a>01621         <span class="keywordflow">if</span> (!jacketBoxes.empty()) {
<a name="l01622"></a>01622 
<a name="l01623"></a>01623             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> listBoxes;
<a name="l01624"></a>01624             listBoxes.insert(listBoxes.end(), jacketBoxes.begin(),
<a name="l01625"></a>01625                                                 jacketBoxes.end());
<a name="l01626"></a>01626             ivector root = spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01627"></a>01627 
<a name="l01628"></a>01628             jacketSP = <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(root, listBoxes);
<a name="l01629"></a>01629 
<a name="l01630"></a>01630             <span class="keywordflow">if</span> (jacketSP != NULL) {
<a name="l01631"></a>01631                 jacketSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<span class="stringliteral">&quot;X&quot;</span>);
<a name="l01632"></a>01632                 jacketSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l01633"></a>01633             }
<a name="l01634"></a>01634 
<a name="l01635"></a>01635         }
<a name="l01636"></a>01636 
<a name="l01637"></a>01637         <span class="keywordflow">return</span> jacketSP;
<a name="l01638"></a>01638     }
<a name="l01639"></a>01639 
<a name="l01640"></a>01640     <span class="comment">// Return the sum of the volume of the outer jacket around two subpavings</span>
<a name="l01641"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">01641</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">SPnode::volOuterJacket</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01642"></a>01642                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01643"></a>01643     {
<a name="l01644"></a>01644         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> jacketBoxes;
<a name="l01645"></a>01645         jacketBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(jacketBoxes,
<a name="l01646"></a>01646                         spn1, spn2);
<a name="l01647"></a>01647         <a class="code" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483" title="Define type BoxVecItr as iterator over BoxVec.">BoxVecItr</a> bit;
<a name="l01648"></a>01648         <span class="keywordtype">double</span> jacketVol = 0;
<a name="l01649"></a>01649         <span class="keywordflow">for</span> (bit = jacketBoxes.begin(); bit &lt; jacketBoxes.end(); bit++) {
<a name="l01650"></a>01650             jacketVol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a> (*bit);
<a name="l01651"></a>01651         }
<a name="l01652"></a>01652         <span class="keywordflow">return</span> jacketVol;
<a name="l01653"></a>01653     }
<a name="l01654"></a>01654 
<a name="l01655"></a>01655     <span class="comment">//Return a container of boxes represented by intersection of subpavings.</span>
<a name="l01656"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">01656</a>     <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">SPnode::vecLeafBoxIntersection</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l01657"></a>01657                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01658"></a>01658     {
<a name="l01659"></a>01659         <span class="comment">// only do something if both nodes are non-null and boxes match</span>
<a name="l01660"></a>01660         <span class="keywordflow">if</span> (spn1 != NULL &amp;&amp; spn2 != NULL &amp;&amp;
<a name="l01661"></a>01661                         (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == spn2-&gt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01662"></a>01662 
<a name="l01663"></a>01663             <span class="comment">// if both are leaves (and boxes match), push back the matching box</span>
<a name="l01664"></a>01664             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) boxes.push_back(spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l01665"></a>01665 
<a name="l01666"></a>01666             <span class="comment">// if one is a leaf and one is not, the children of the non-leaf</span>
<a name="l01667"></a>01667             <span class="comment">// are all in the intersection</span>
<a name="l01668"></a>01668             <span class="keywordflow">if</span> (!(spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01669"></a>01669                 <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves1;
<a name="l01670"></a>01670                 spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves1);
<a name="l01671"></a>01671                 <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l01672"></a>01672                 <span class="keywordflow">for</span> (it = leaves1.begin(); it &lt; leaves1.end(); it++) {
<a name="l01673"></a>01673                     boxes.push_back((*it)-&gt;getBox());
<a name="l01674"></a>01674                 }
<a name="l01675"></a>01675             }
<a name="l01676"></a>01676 
<a name="l01677"></a>01677             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !(spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l01678"></a>01678                 <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves2;
<a name="l01679"></a>01679                 spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves2);
<a name="l01680"></a>01680                 <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l01681"></a>01681                 <span class="keywordflow">for</span> (it = leaves2.begin(); it &lt; leaves2.end(); it++) {
<a name="l01682"></a>01682                     boxes.push_back((*it)-&gt;getBox());
<a name="l01683"></a>01683                 }
<a name="l01684"></a>01684             }
<a name="l01685"></a>01685 
<a name="l01686"></a>01686             <span class="comment">// if both have children, recurse on the children</span>
<a name="l01687"></a>01687             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l01688"></a>01688                 boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(boxes, spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l01689"></a>01689                                                         spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01690"></a>01690             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l01691"></a>01691                 boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(boxes, spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l01692"></a>01692                                                         spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01693"></a>01693         }
<a name="l01694"></a>01694 
<a name="l01695"></a>01695         <span class="keywordflow">return</span> boxes;
<a name="l01696"></a>01696     }
<a name="l01697"></a>01697 
<a name="l01698"></a>01698     <span class="comment">//Return a subpaving representing intersection of subpavings.</span>
<a name="l01699"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">01699</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">SPnode::spLeafBoxIntersection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01700"></a>01700                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01701"></a>01701     {
<a name="l01702"></a>01702         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* interSP = NULL;
<a name="l01703"></a>01703         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> interBoxes;
<a name="l01704"></a>01704         interBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(interBoxes,
<a name="l01705"></a>01705                         spn1, spn2);
<a name="l01706"></a>01706         <span class="keywordflow">if</span> (!interBoxes.empty()) {
<a name="l01707"></a>01707 
<a name="l01708"></a>01708             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> listBoxes;
<a name="l01709"></a>01709             listBoxes.insert(listBoxes.end(), interBoxes.begin(),
<a name="l01710"></a>01710                                                 interBoxes.end());
<a name="l01711"></a>01711             ivector root = spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01712"></a>01712 
<a name="l01713"></a>01713             interSP = <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(root, listBoxes);
<a name="l01714"></a>01714 
<a name="l01715"></a>01715             <span class="keywordflow">if</span> (interSP != NULL) {
<a name="l01716"></a>01716                 interSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<span class="stringliteral">&quot;X&quot;</span>);
<a name="l01717"></a>01717                 interSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l01718"></a>01718             }
<a name="l01719"></a>01719         }
<a name="l01720"></a>01720 
<a name="l01721"></a>01721         <span class="keywordflow">return</span> interSP;
<a name="l01722"></a>01722     }
<a name="l01723"></a>01723 
<a name="l01724"></a>01724     <span class="comment">// Return the sum of the volume of intersection between two subpavings</span>
<a name="l01725"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">01725</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">SPnode::volIntersection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01726"></a>01726                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01727"></a>01727     {
<a name="l01728"></a>01728         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> interBoxes;
<a name="l01729"></a>01729         interBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(interBoxes,
<a name="l01730"></a>01730                         spn1, spn2);
<a name="l01731"></a>01731         <a class="code" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483" title="Define type BoxVecItr as iterator over BoxVec.">BoxVecItr</a> bit;
<a name="l01732"></a>01732         <span class="keywordtype">double</span> interVol = 0;
<a name="l01733"></a>01733         <span class="keywordflow">for</span> (bit = interBoxes.begin(); bit &lt; interBoxes.end(); bit++) {
<a name="l01734"></a>01734             interVol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a> (*bit);
<a name="l01735"></a>01735         }
<a name="l01736"></a>01736         <span class="keywordflow">return</span> interVol;
<a name="l01737"></a>01737     }
<a name="l01738"></a>01738 
<a name="l01739"></a>01739     <span class="comment">// Return a container of boxes represented by difference between subpavings,</span>
<a name="l01740"></a>01740     <span class="comment">// all the space in spn1 that is not in spn2</span>
<a name="l01741"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">01741</a>     <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">SPnode::vecLeafBoxDifference</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l01742"></a>01742                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01743"></a>01743     {
<a name="l01744"></a>01744         <span class="keywordflow">if</span> (spn1 != NULL &amp;&amp; spn2 == NULL) {
<a name="l01745"></a>01745 
<a name="l01746"></a>01746             <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> leaves1;
<a name="l01747"></a>01747             spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(leaves1);
<a name="l01748"></a>01748             <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> it;
<a name="l01749"></a>01749             <span class="keywordflow">for</span> (it = leaves1.begin(); it &lt; leaves1.end(); it++) {
<a name="l01750"></a>01750                 boxes.push_back((*it)-&gt;getBox());
<a name="l01751"></a>01751             }
<a name="l01752"></a>01752         }
<a name="l01753"></a>01753 
<a name="l01754"></a>01754         <span class="keywordflow">if</span> (spn1 != NULL &amp;&amp; spn2 != NULL
<a name="l01755"></a>01755                 &amp;&amp; (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01756"></a>01756 
<a name="l01757"></a>01757             <span class="keywordflow">if</span> (spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !(spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l01758"></a>01758                 <span class="comment">// now we want to get any part of the box of spn1 that is</span>
<a name="l01759"></a>01759                 <span class="comment">// not represented by whatever boxes hang off spn2</span>
<a name="l01760"></a>01760                 boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(boxes, spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), spn2);
<a name="l01761"></a>01761             }
<a name="l01762"></a>01762 
<a name="l01763"></a>01763             <span class="comment">// if spn1 is not a leaf but spn2 is, then there is nothing</span>
<a name="l01764"></a>01764             <span class="comment">// represented in spn1 that is not already represented in spn2</span>
<a name="l01765"></a>01765 
<a name="l01766"></a>01766             <span class="keywordflow">if</span> (!(spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) &amp;&amp; !(spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l01767"></a>01767                 <span class="comment">// recurse on the children</span>
<a name="l01768"></a>01768                 boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(boxes, spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l01769"></a>01769                             spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01770"></a>01770                 boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(boxes, spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l01771"></a>01771                             spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01772"></a>01772             }
<a name="l01773"></a>01773         }
<a name="l01774"></a>01774 
<a name="l01775"></a>01775         <span class="comment">// if spn1 is null and spn2 is not null we don&#39;t do anything</span>
<a name="l01776"></a>01776         <span class="comment">// if both not null but the boxes don&#39;t match we don&#39;t do anything</span>
<a name="l01777"></a>01777         <span class="keywordflow">return</span> boxes;
<a name="l01778"></a>01778     }
<a name="l01779"></a>01779 
<a name="l01780"></a>01780     <span class="comment">// Return a container of boxes represented by difference between box1 and</span>
<a name="l01781"></a>01781     <span class="comment">// the boxes represented by the leaves of spn2</span>
<a name="l01782"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">01782</a>     <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">SPnode::vecBoxNodeDifference</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l01783"></a>01783         ivector box1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01784"></a>01784     {
<a name="l01785"></a>01785         <span class="keywordflow">if</span> (spn2 == NULL) boxes.push_back(box1);
<a name="l01786"></a>01786 
<a name="l01787"></a>01787         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!(spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>())) {
<a name="l01788"></a>01788             <span class="comment">// bisect box1</span>
<a name="l01789"></a>01789             <span class="keywordtype">int</span> maxdiamcomp = <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(box1);
<a name="l01790"></a>01790             <span class="comment">// new ivectors from splitting root along its biggest dimension</span>
<a name="l01791"></a>01791             ivector leftbox = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(box1, maxdiamcomp);
<a name="l01792"></a>01792             ivector rightbox = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(box1, maxdiamcomp);
<a name="l01793"></a>01793             boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(boxes, leftbox, spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01794"></a>01794             boxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(boxes, rightbox, spn2-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01795"></a>01795         }
<a name="l01796"></a>01796         <span class="comment">// else spn2 must be a leaf so there is no difference</span>
<a name="l01797"></a>01797 
<a name="l01798"></a>01798         <span class="keywordflow">return</span> boxes;
<a name="l01799"></a>01799     }
<a name="l01800"></a>01800 
<a name="l01801"></a>01801     <span class="comment">//Return a subpaving representing the difference between subpavings.</span>
<a name="l01802"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">01802</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">SPnode::spLeafBoxDifference</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01803"></a>01803                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01804"></a>01804     {
<a name="l01805"></a>01805         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* diffSP = NULL;
<a name="l01806"></a>01806         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> diffBoxes;
<a name="l01807"></a>01807         diffBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(diffBoxes, spn1, spn2);
<a name="l01808"></a>01808         <span class="keywordflow">if</span> (!diffBoxes.empty()) {
<a name="l01809"></a>01809 
<a name="l01810"></a>01810             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> listBoxes;
<a name="l01811"></a>01811             listBoxes.insert(listBoxes.end(), diffBoxes.begin(),
<a name="l01812"></a>01812                                                 diffBoxes.end());
<a name="l01813"></a>01813             ivector root = spn1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01814"></a>01814 
<a name="l01815"></a>01815             diffSP = <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(root, listBoxes);
<a name="l01816"></a>01816 
<a name="l01817"></a>01817             <span class="keywordflow">if</span> (diffSP != NULL) {
<a name="l01818"></a>01818                 diffSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<span class="stringliteral">&quot;X&quot;</span>);
<a name="l01819"></a>01819                 diffSP-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l01820"></a>01820             }
<a name="l01821"></a>01821         }
<a name="l01822"></a>01822 
<a name="l01823"></a>01823         <span class="keywordflow">return</span> diffSP;
<a name="l01824"></a>01824     }
<a name="l01825"></a>01825 
<a name="l01826"></a>01826     <span class="comment">// Return the sum of the volume of difference between two subpavings</span>
<a name="l01827"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">01827</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">SPnode::volDifference</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l01828"></a>01828                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2)
<a name="l01829"></a>01829     {
<a name="l01830"></a>01830         <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a> diffBoxes;
<a name="l01831"></a>01831         diffBoxes = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(diffBoxes,
<a name="l01832"></a>01832                         spn1, spn2);
<a name="l01833"></a>01833         <a class="code" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483" title="Define type BoxVecItr as iterator over BoxVec.">BoxVecItr</a> bit;
<a name="l01834"></a>01834         <span class="keywordtype">double</span> diffVol = 0;
<a name="l01835"></a>01835         <span class="keywordflow">for</span> (bit = diffBoxes.begin(); bit &lt; diffBoxes.end(); bit++) {
<a name="l01836"></a>01836             diffVol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a> (*bit);
<a name="l01837"></a>01837         }
<a name="l01838"></a>01838         <span class="keywordflow">return</span> diffVol;
<a name="l01839"></a>01839     }
<a name="l01840"></a>01840 
<a name="l01841"></a>01841 
<a name="l01842"></a>01842     <span class="comment">// Forms a minimal image subpaving from boxes based on voxels</span>
<a name="l01843"></a>01843     <span class="comment">/*</span>
<a name="l01844"></a>01844 <span class="comment">    Make a minimal subpaving tree from a list of interval vectors which approx</span>
<a name="l01845"></a>01845 <span class="comment">    to the leaves of the tree.  The root of the subpaving tree will have</span>
<a name="l01846"></a>01846 <span class="comment">    Box = root, and the boxes in the list will have the same width in each</span>
<a name="l01847"></a>01847 <span class="comment">    dimension and be formable by a series of bisections of the given root.</span>
<a name="l01848"></a>01848 <span class="comment">    i.e. each leaf will be the same size as each other leaf and will be a</span>
<a name="l01849"></a>01849 <span class="comment">    &#39;square&#39; hypercube.</span>
<a name="l01850"></a>01850 <span class="comment">    */</span>
<a name="l01851"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08">01851</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08" title="Forms a minimal SPnode subpaving from voxel boxes.">SPnode::makeTreeFromVoxels</a>(ivector&amp; root, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; leafList,
<a name="l01852"></a>01852                     <span class="keywordtype">double</span> spacing, <span class="keywordtype">size_t</span> dim)
<a name="l01853"></a>01853     {
<a name="l01854"></a>01854         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* newNode = NULL;  <span class="comment">// for return value</span>
<a name="l01855"></a>01855 
<a name="l01856"></a>01856         <span class="keywordflow">if</span> (!leafList.empty())
<a name="l01857"></a>01857         {
<a name="l01858"></a>01858             <span class="comment">//sort using the volCompare function</span>
<a name="l01859"></a>01859             leafList.sort(<a class="code" href="namespacesubpavings.shtml#a19b79319876fc25305936396f24e5a6c" title="A function for comparing ivectors based on volume.">volCompare</a>);   <span class="comment">// sorts smallest to largest</span>
<a name="l01860"></a>01860 
<a name="l01861"></a>01861            <span class="comment">// test if root is equal to the largest image element, ie the last</span>
<a name="l01862"></a>01862             <span class="keywordtype">bool</span> isRootEqual = (root == *leafList.rbegin());
<a name="l01863"></a>01863 
<a name="l01864"></a>01864             <span class="comment">// with given spacing, max width in any should be 1/spacing</span>
<a name="l01865"></a>01865             <span class="comment">// so as soon as max root dimension is below 2/spacing, it should</span>
<a name="l01866"></a>01866             <span class="comment">// be in the subpaving if it has any image data in it</span>
<a name="l01867"></a>01867             <span class="comment">// so be conservative and take 1.5/spacing (between 1/ and 2/)</span>
<a name="l01868"></a>01868             <span class="keywordtype">double</span> eps = 1.5/spacing;
<a name="l01869"></a>01869             <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l01870"></a>01870             <span class="comment">// find the maximum diameter, put the max dimension into maxdiamcomp</span>
<a name="l01871"></a>01871             <span class="keywordtype">double</span> maxDiamRoot = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(root, maxdiamcomp);
<a name="l01872"></a>01872 
<a name="l01873"></a>01873             <span class="comment">// test if maximum root width is smaller than eps</span>
<a name="l01874"></a>01874             <span class="keywordtype">bool</span> isRootSmall = (maxDiamRoot &lt; eps);
<a name="l01875"></a>01875 
<a name="l01876"></a>01876             <span class="comment">// if the list has some images in it</span>
<a name="l01877"></a>01877             <span class="comment">// and either if the root is equal to the largest box in the list</span>
<a name="l01878"></a>01878             <span class="comment">// or if the root max diameter is &lt; eps</span>
<a name="l01879"></a>01879             <span class="comment">// return a new node based on root</span>
<a name="l01880"></a>01880             <span class="keywordflow">if</span> (isRootEqual || isRootSmall) {
<a name="l01881"></a>01881 
<a name="l01882"></a>01882                <span class="keywordflow">try</span> {
<a name="l01883"></a>01883                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(root);
<a name="l01884"></a>01884                }
<a name="l01885"></a>01885                 <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l01886"></a>01886                 {
<a name="l01887"></a>01887                     std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory &quot;</span>
<a name="l01888"></a>01888                         &lt;&lt; <span class="stringliteral">&quot;in makeTreeFromVoxels(...)&quot;</span> &lt;&lt; std::endl;
<a name="l01889"></a>01889                     <span class="keywordflow">throw</span>;
<a name="l01890"></a>01890                 }
<a name="l01891"></a>01891             }
<a name="l01892"></a>01892             <span class="comment">// if the list has some images in it</span>
<a name="l01893"></a>01893             <span class="comment">// and the root is not equal to the largest box in the list</span>
<a name="l01894"></a>01894             <span class="comment">// and the root is not small</span>
<a name="l01895"></a>01895             <span class="comment">// bisect the root, divide up the list, and recurse</span>
<a name="l01896"></a>01896             <span class="keywordflow">else</span> {
<a name="l01897"></a>01897 
<a name="l01898"></a>01898                 <span class="comment">// new ivectors from splitting root along its biggest dimension</span>
<a name="l01899"></a>01899                 ivector leftbox = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(root, maxdiamcomp);
<a name="l01900"></a>01900                 ivector rightbox = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(root, maxdiamcomp);
<a name="l01901"></a>01901 
<a name="l01902"></a>01902                 <span class="comment">// create two empty lists for the left and right side</span>
<a name="l01903"></a>01903                 <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> leftlist, rightlist;
<a name="l01904"></a>01904 
<a name="l01905"></a>01905                 <a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00" title="Define type iterator over ImageList.">ImageListItr</a> it; <span class="comment">// iterator to for the list</span>
<a name="l01906"></a>01906 
<a name="l01907"></a>01907                 <span class="comment">// find a conservative minimum expected volume for a leaf as</span>
<a name="l01908"></a>01908                 <span class="comment">// half of the product of 1/spacing over all dimensions</span>
<a name="l01909"></a>01909                 <span class="comment">// we expect leaves to be the result of successive bisections so</span>
<a name="l01910"></a>01910                 <span class="comment">// if the volume of the intersection is not what we expect</span>
<a name="l01911"></a>01911                 <span class="comment">// then the intersection will be just the boundary</span>
<a name="l01912"></a>01912                 real minVol = 0.5;
<a name="l01913"></a>01913                 <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dim; i++) minVol /= spacing;
<a name="l01914"></a>01914 
<a name="l01915"></a>01915                 <span class="comment">// iterate through the current list, put the intersection of any</span>
<a name="l01916"></a>01916                 <span class="comment">// element with the leftbox into new left list, &amp; intersection</span>
<a name="l01917"></a>01917                 <span class="comment">// of any element with the new right box into new right list</span>
<a name="l01918"></a>01918                 <span class="keywordflow">for</span> (it=leafList.begin(); it!=leafList.end(); it++) {
<a name="l01919"></a>01919                     ivector interLeft;  <span class="comment">// intersection with left hull</span>
<a name="l01920"></a>01920                     ivector interRight;  <span class="comment">// intersection with right hull</span>
<a name="l01921"></a>01921 
<a name="l01922"></a>01922                     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interLeft, *it, leftbox)) {
<a name="l01923"></a>01923                         <span class="keywordflow">if</span> (<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(interLeft) &gt; minVol)
<a name="l01924"></a>01924                             leftlist.push_back(interLeft);
<a name="l01925"></a>01925                     }
<a name="l01926"></a>01926 
<a name="l01927"></a>01927                     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interRight, *it, rightbox)) {
<a name="l01928"></a>01928                         <span class="keywordflow">if</span> (<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(interRight) &gt; minVol)
<a name="l01929"></a>01929                             rightlist.push_back(interRight);
<a name="l01930"></a>01930                     }
<a name="l01931"></a>01931 
<a name="l01932"></a>01932                 } <span class="comment">// end of iteration through list elements</span>
<a name="l01933"></a>01933 
<a name="l01934"></a>01934                 <span class="comment">// recursively call makeTreeFromVoxels with leftbox, leftlist</span>
<a name="l01935"></a>01935                 <span class="comment">// and rightbox, rightlist</span>
<a name="l01936"></a>01936                 <span class="comment">// reunite the results using root as the box for parent node</span>
<a name="l01937"></a>01937                 <span class="comment">// makeTreeFromVoxels creates a minimal subpaving</span>
<a name="l01938"></a>01938                 <span class="comment">// (no sibling child nodes) on the root</span>
<a name="l01939"></a>01939 
<a name="l01940"></a>01940                 newNode = Reunite&lt;SPnode&gt;(<a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08" title="Forms a minimal SPnode subpaving from voxel boxes.">makeTreeFromVoxels</a>(leftbox,
<a name="l01941"></a>01941                                                 leftlist, spacing, dim),
<a name="l01942"></a>01942                                     <a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08" title="Forms a minimal SPnode subpaving from voxel boxes.">makeTreeFromVoxels</a>(rightbox,
<a name="l01943"></a>01943                                                 rightlist, spacing, dim), root);
<a name="l01944"></a>01944 
<a name="l01945"></a>01945             } <span class="comment">// end of is list has elements and first box does not contain root</span>
<a name="l01946"></a>01946         }
<a name="l01947"></a>01947 
<a name="l01948"></a>01948         <span class="comment">// if there is nothing in the list we return the default</span>
<a name="l01949"></a>01949             <span class="comment">// initialisation value of NULL</span>
<a name="l01950"></a>01950 
<a name="l01951"></a>01951         <span class="keywordflow">return</span> newNode;
<a name="l01952"></a>01952 
<a name="l01953"></a>01953     }
<a name="l01954"></a>01954 
<a name="l01955"></a>01955     <span class="comment">// makes a new paving from a vtk file</span>
<a name="l01956"></a>01956     <span class="comment">// expects 3d, structured point data in file</span>
<a name="l01957"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa">01957</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa" title="Make a subpaving from vtk file data.">SPnode::vtkPaving</a>(<span class="keyword">const</span> std::string filename)
<a name="l01958"></a>01958     {
<a name="l01959"></a>01959         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* newTree = NULL;
<a name="l01960"></a>01960 
<a name="l01961"></a>01961         <span class="keywordtype">size_t</span> expectedDims = 3;
<a name="l01962"></a>01962 
<a name="l01963"></a>01963         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> Xs;
<a name="l01964"></a>01964         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> Ys;
<a name="l01965"></a>01965         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> Zs;
<a name="l01966"></a>01966 
<a name="l01967"></a>01967         <span class="comment">// get the spacing and fill in the coordinates vectors using</span>
<a name="l01968"></a>01968         <span class="comment">// getCoordinatesFromVtk.</span>
<a name="l01969"></a>01969         <span class="comment">// getCoordinatesFromVtk expects 10 header lines with spacings on 4th</span>
<a name="l01970"></a>01970         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> spacing = <a class="code" href="namespacesubpavings.shtml#ab55a3f1bfa1cae218886328f19b2208f" title="Get coordinates from a .vtk file.">getCoordinatesFromVtk</a>(Xs, Ys, Zs, filename);
<a name="l01971"></a>01971         <span class="keywordtype">bool</span> success = ((spacing.size() == expectedDims) &amp;&amp; (spacing[0] &gt; 0)
<a name="l01972"></a>01972                                 &amp;&amp; (spacing[0] == spacing[1])
<a name="l01973"></a>01973                                 &amp;&amp; (spacing[0] == spacing[2]));
<a name="l01974"></a>01974 
<a name="l01975"></a>01975         <span class="keywordflow">if</span> (success) {
<a name="l01976"></a>01976 
<a name="l01977"></a>01977             ivector rootbox(expectedDims);
<a name="l01978"></a>01978 
<a name="l01979"></a>01979             <span class="keywordtype">double</span> maxXYZ = spacing[0] * 1.0;
<a name="l01980"></a>01980 
<a name="l01981"></a>01981             <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> boxes;
<a name="l01982"></a>01982 
<a name="l01983"></a>01983             <span class="keywordtype">double</span> totalListVol = 0;
<a name="l01984"></a>01984 
<a name="l01985"></a>01985             <a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137" title="Define type IntVecItr as iterator over IntVec.">IntVecItr</a> xIt = Xs.begin();
<a name="l01986"></a>01986             <a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137" title="Define type IntVecItr as iterator over IntVec.">IntVecItr</a> yIt = Ys.begin();
<a name="l01987"></a>01987             <a class="code" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137" title="Define type IntVecItr as iterator over IntVec.">IntVecItr</a> zIt = Zs.begin();
<a name="l01988"></a>01988 
<a name="l01989"></a>01989             <span class="keywordflow">for</span> (xIt = Xs.begin(); xIt &lt; Xs.end(); xIt++, yIt++, zIt++) {
<a name="l01990"></a>01990                 ivector box(expectedDims);
<a name="l01991"></a>01991                 <span class="comment">// make the box so that its boundaries are on the inner edges</span>
<a name="l01992"></a>01992                 <span class="comment">// of the voxel</span>
<a name="l01993"></a>01993                 interval xdim(Sup(_interval(*xIt/maxXYZ)),
<a name="l01994"></a>01994                             Inf(_interval(*xIt + 1.0)/maxXYZ));
<a name="l01995"></a>01995                 interval ydim(Sup(_interval(*yIt/maxXYZ)),
<a name="l01996"></a>01996                             Inf(_interval(*yIt + 1.0)/maxXYZ));
<a name="l01997"></a>01997                 interval zdim(Sup(_interval(*zIt/maxXYZ)),
<a name="l01998"></a>01998                             Inf(_interval(*zIt + 1.0)/maxXYZ));
<a name="l01999"></a>01999                 box[1] = xdim;
<a name="l02000"></a>02000                 box[2] = ydim;
<a name="l02001"></a>02001                 box[3] = zdim;
<a name="l02002"></a>02002                 boxes.push_back(box);
<a name="l02003"></a>02003                 totalListVol += <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(box);
<a name="l02004"></a>02004 
<a name="l02005"></a>02005             }
<a name="l02006"></a>02006 
<a name="l02007"></a>02007             rootbox[1] = interval(0.0, 1.0);
<a name="l02008"></a>02008             rootbox[2] = interval(0.0, 1.0);
<a name="l02009"></a>02009             rootbox[3] = interval(0.0, 1.0);
<a name="l02010"></a>02010 
<a name="l02011"></a>02011 
<a name="l02012"></a>02012             newTree = <a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08" title="Forms a minimal SPnode subpaving from voxel boxes.">makeTreeFromVoxels</a>(rootbox, boxes,
<a name="l02013"></a>02013                                         maxXYZ, expectedDims);
<a name="l02014"></a>02014         }
<a name="l02015"></a>02015 
<a name="l02016"></a>02016         <span class="keywordflow">if</span> (newTree != NULL) {
<a name="l02017"></a>02017             newTree-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<span class="stringliteral">&quot;X&quot;</span>);
<a name="l02018"></a>02018             newTree-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l02019"></a>02019         }
<a name="l02020"></a>02020 
<a name="l02021"></a>02021 
<a name="l02022"></a>02022         <span class="keywordflow">return</span> newTree;
<a name="l02023"></a>02023     }
<a name="l02024"></a>02024 
<a name="l02025"></a>02025     <span class="comment">// Forms a minimal image subpaving from leaf boxes</span>
<a name="l02026"></a>02026     <span class="comment">/*</span>
<a name="l02027"></a>02027 <span class="comment">    Make a minimal subpaving tree from a list of interval vectors which are</span>
<a name="l02028"></a>02028 <span class="comment">    the leaves of the tree.  The root of the subpaving tree will have</span>
<a name="l02029"></a>02029 <span class="comment">    Box = root, and the boxes in the list will be formable by a series of</span>
<a name="l02030"></a>02030 <span class="comment">    bisections of the given root.</span>
<a name="l02031"></a>02031 <span class="comment">    */</span>
<a name="l02032"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93">02032</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">SPnode::makeTreeFromLeaves</a>(ivector&amp; root, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; leafList)
<a name="l02033"></a>02033     {
<a name="l02034"></a>02034         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* newNode = NULL;  <span class="comment">// for return value</span>
<a name="l02035"></a>02035 
<a name="l02036"></a>02036         <span class="keywordflow">if</span> (!leafList.empty())
<a name="l02037"></a>02037         {
<a name="l02038"></a>02038             <span class="comment">//sort using the volCompare function</span>
<a name="l02039"></a>02039             leafList.sort(<a class="code" href="namespacesubpavings.shtml#a19b79319876fc25305936396f24e5a6c" title="A function for comparing ivectors based on volume.">volCompare</a>);   <span class="comment">// sorts smallest to largest</span>
<a name="l02040"></a>02040 
<a name="l02041"></a>02041             <span class="comment">// test if root is equal to the largest image element, ie the last</span>
<a name="l02042"></a>02042             <span class="keywordtype">bool</span> isRootEqual = (root == *leafList.rbegin());
<a name="l02043"></a>02043 
<a name="l02044"></a>02044             <span class="keywordtype">double</span> smallestVol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(*leafList.begin());
<a name="l02045"></a>02045 
<a name="l02046"></a>02046             <span class="comment">//is root smaller than twice the size of the smallest box in it</span>
<a name="l02047"></a>02047             <span class="keywordtype">bool</span> isRootSmall = (<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(root) &lt; 2*smallestVol);
<a name="l02048"></a>02048 
<a name="l02049"></a>02049             <span class="comment">// if the list has some images in it</span>
<a name="l02050"></a>02050             <span class="comment">// and if the root is equal to the largest box in the list</span>
<a name="l02051"></a>02051             <span class="comment">// or the root is close enough</span>
<a name="l02052"></a>02052             <span class="comment">// return a new node based on root</span>
<a name="l02053"></a>02053             <span class="keywordflow">if</span> (isRootEqual || isRootSmall) {
<a name="l02054"></a>02054 
<a name="l02055"></a>02055                 <span class="keywordflow">try</span> {
<a name="l02056"></a>02056                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(root);
<a name="l02057"></a>02057                 }
<a name="l02058"></a>02058                 <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l02059"></a>02059                 {
<a name="l02060"></a>02060                     std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory &quot;</span>
<a name="l02061"></a>02061                         &lt;&lt; <span class="stringliteral">&quot;in makeTreeFromVoxels(...)&quot;</span> &lt;&lt; std::endl;
<a name="l02062"></a>02062                     <span class="keywordflow">throw</span>;
<a name="l02063"></a>02063                 }
<a name="l02064"></a>02064             }
<a name="l02065"></a>02065             <span class="comment">// if the list has some images in it</span>
<a name="l02066"></a>02066             <span class="comment">// and the root is not equal to the largest box in the list</span>
<a name="l02067"></a>02067             <span class="comment">// and the root is not small</span>
<a name="l02068"></a>02068             <span class="comment">// bisect the root, divide up the list, and recurse</span>
<a name="l02069"></a>02069 
<a name="l02070"></a>02070             <span class="keywordflow">if</span> (!isRootEqual &amp;&amp; !isRootSmall) {
<a name="l02071"></a>02071 
<a name="l02072"></a>02072                 <span class="keywordtype">int</span> maxdiamcomp = 0;
<a name="l02073"></a>02073                 <span class="keywordtype">double</span> rootDiam = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(root, maxdiamcomp);
<a name="l02074"></a>02074                 <span class="comment">// new ivectors from splitting root along its biggest dimension</span>
<a name="l02075"></a>02075                 ivector leftbox = <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(root, maxdiamcomp);
<a name="l02076"></a>02076                 ivector rightbox = <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(root, maxdiamcomp);
<a name="l02077"></a>02077 
<a name="l02078"></a>02078                 <span class="comment">// create two empty lists for the left and right side</span>
<a name="l02079"></a>02079                 <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> leftlist, rightlist;
<a name="l02080"></a>02080 
<a name="l02081"></a>02081                 <a class="code" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00" title="Define type iterator over ImageList.">ImageListItr</a> it; <span class="comment">// iterator to for the list</span>
<a name="l02082"></a>02082 
<a name="l02083"></a>02083                 <span class="comment">// iterate through the current list, put the intersection of any</span>
<a name="l02084"></a>02084                 <span class="comment">// element with the leftbox into new left list, &amp; intersection</span>
<a name="l02085"></a>02085                 <span class="comment">// of any element with the new right box into new right list</span>
<a name="l02086"></a>02086                 <span class="comment">// but only put in whole leaves, ie with vol &gt;= smallest vol</span>
<a name="l02087"></a>02087                 <span class="keywordflow">for</span> (it=leafList.begin(); it!=leafList.end(); it++) {
<a name="l02088"></a>02088                     ivector interLeft;  <span class="comment">// intersection with left hull</span>
<a name="l02089"></a>02089                     ivector interRight;  <span class="comment">// intersection with right hull</span>
<a name="l02090"></a>02090 
<a name="l02091"></a>02091                     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interLeft, *it, leftbox)) {
<a name="l02092"></a>02092                         <span class="keywordflow">if</span> (<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(interLeft) &gt; 0.5*smallestVol)
<a name="l02093"></a>02093                             leftlist.push_back(interLeft);
<a name="l02094"></a>02094                     }
<a name="l02095"></a>02095 
<a name="l02096"></a>02096                     <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(interRight, *it, rightbox)) {
<a name="l02097"></a>02097                         <span class="keywordflow">if</span> (<a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(interRight) &gt; 0.5*smallestVol)
<a name="l02098"></a>02098                             rightlist.push_back(interRight);
<a name="l02099"></a>02099                     }
<a name="l02100"></a>02100 
<a name="l02101"></a>02101                 } <span class="comment">// end of iteration through list elements</span>
<a name="l02102"></a>02102 
<a name="l02103"></a>02103                 <span class="comment">// recursively call makeTreeFromLeaves with leftbox, leftlist</span>
<a name="l02104"></a>02104                 <span class="comment">// and rightbox, rightlist</span>
<a name="l02105"></a>02105                 <span class="comment">// reunite the results using root as the box for parent node</span>
<a name="l02106"></a>02106                 <span class="comment">// makeTreeFromLeavess creates a minimal subpaving</span>
<a name="l02107"></a>02107                 <span class="comment">// (no sibling child nodes) on the root</span>
<a name="l02108"></a>02108 
<a name="l02109"></a>02109                 newNode = Reunite&lt;SPnode&gt;(<a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(leftbox,leftlist),
<a name="l02110"></a>02110                                     <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(rightbox, rightlist),
<a name="l02111"></a>02111                                                                 root);
<a name="l02112"></a>02112 
<a name="l02113"></a>02113             } <span class="comment">// end of is list has elements and first box not root</span>
<a name="l02114"></a>02114         }
<a name="l02115"></a>02115 
<a name="l02116"></a>02116         <span class="comment">// if there is nothing in the list we return the default</span>
<a name="l02117"></a>02117             <span class="comment">// initialisation value of NULL</span>
<a name="l02118"></a>02118 
<a name="l02119"></a>02119         <span class="keywordflow">return</span> newNode;
<a name="l02120"></a>02120 
<a name="l02121"></a>02121     }
<a name="l02122"></a>02122 
<a name="l02123"></a>02123 
<a name="l02124"></a>02124   <span class="comment">//src_trunk_0701</span>
<a name="l02125"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb">02125</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">SPnode::swap</a> (<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; spn) <span class="comment">//throw()</span>
<a name="l02126"></a>02126   {
<a name="l02127"></a>02127     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>, spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>); <span class="comment">// theBox is a pointer</span>
<a name="l02128"></a>02128     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>, spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>);
<a name="l02129"></a>02129     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>, spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>);
<a name="l02130"></a>02130     <span class="comment">// can just swap child pointers</span>
<a name="l02131"></a>02131     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>, spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>);
<a name="l02132"></a>02132     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>, spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>);
<a name="l02133"></a>02133     <span class="comment">// children have to be repointed to the new swapped parents</span>
<a name="l02134"></a>02134     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l02135"></a>02135     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = <span class="keyword">this</span>;
<a name="l02136"></a>02136     <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = &amp;spn;
<a name="l02137"></a>02137     <span class="keywordflow">if</span> (spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> = &amp;spn;
<a name="l02138"></a>02138     
<a name="l02139"></a>02139   }
<a name="l02140"></a>02140 
<a name="l02141"></a>02141 
<a name="l02142"></a>02142     <span class="comment">// ------------------- end of SPnode class definitions ---------------</span>
<a name="l02143"></a>02143 
<a name="l02144"></a>02144     <span class="comment">// ----------------------------- SPnode exceptions definitions</span>
<a name="l02145"></a>02145 
<a name="l02146"></a><a class="code" href="classsubpavings_1_1SPnodeException.shtml#ac288fa89893d06644668fbe38507c6f3">02146</a>     <a class="code" href="classsubpavings_1_1SPnodeException.shtml#ac288fa89893d06644668fbe38507c6f3">SPnodeException::SPnodeException</a>(std::string ss) : s(ss) {}
<a name="l02147"></a><a class="code" href="classsubpavings_1_1SPnodeException.shtml#a5a8534c71a39a06ad55f90398d029959">02147</a>     <a class="code" href="classsubpavings_1_1SPnodeException.shtml#a5a8534c71a39a06ad55f90398d029959">SPnodeException::~SPnodeException</a> () throw () {}
<a name="l02148"></a><a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">02148</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">SPnodeException::what</a>() <span class="keyword">const</span> throw() { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml#ad6356fcb207cb052e9c897f317a64547">s</a>.c_str(); }
<a name="l02149"></a>02149 
<a name="l02150"></a>02150 
<a name="l02151"></a>02151 
<a name="l02152"></a>02152     <span class="comment">// -------------------- start of SPnode non-member functions</span>
<a name="l02153"></a>02153 
<a name="l02154"></a>02154     <span class="comment">//Output the leaf boxes in SubPaving spn</span>
<a name="l02155"></a><a class="code" href="namespacesubpavings.shtml#a7288149f86d1e0c956f45dcd849a08fc">02155</a>     std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02156"></a>02156     {
<a name="l02157"></a>02157         <span class="comment">// uses nodePrint to generate node output</span>
<a name="l02158"></a>02158 
<a name="l02159"></a>02159         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) { <span class="comment">// spn is non-empty leaf</span>
<a name="l02160"></a>02160             spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aaf14185437d50e955c5ea938dc6e7559" title="Output details of a specific node in a tree.">nodePrint</a>(os);
<a name="l02161"></a>02161         }
<a name="l02162"></a>02162 
<a name="l02163"></a>02163         <span class="comment">//recurse on the children</span>
<a name="l02164"></a>02164         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; !(<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn))) {
<a name="l02165"></a>02165             os &lt;&lt; (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02166"></a>02166             os &lt;&lt; (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02167"></a>02167         }
<a name="l02168"></a>02168 
<a name="l02169"></a>02169         <span class="comment">//in the case where spn is empty we just return os</span>
<a name="l02170"></a>02170 
<a name="l02171"></a>02171         <span class="keywordflow">return</span> os;
<a name="l02172"></a>02172     }
<a name="l02173"></a>02173 
<a name="l02174"></a>02174     <span class="comment">// check for containment of ivector or box in the SubPaving</span>
<a name="l02175"></a><a class="code" href="namespacesubpavings.shtml#aca1892906e63d34720305016dd41156d">02175</a>     <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> <a class="code" href="namespacesubpavings.shtml#aca1892906e63d34720305016dd41156d" title="Check for containment of interval vector in the SubPaving.">operator&lt;=</a>(<span class="keyword">const</span> ivector&amp; z, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02176"></a>02176     {
<a name="l02177"></a>02177         <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02178"></a>02178 
<a name="l02179"></a>02179         <span class="keywordflow">if</span> (spn!=NULL)
<a name="l02180"></a>02180         {
<a name="l02181"></a>02181             <span class="keywordflow">if</span> (VecLen(z) != spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>()) {
<a name="l02182"></a>02182                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Dimension do not match&quot;</span>);
<a name="l02183"></a>02183             }
<a name="l02184"></a>02184 
<a name="l02185"></a>02185             retValue = (*spn).spContains(z);
<a name="l02186"></a>02186         }
<a name="l02187"></a>02187         <span class="keywordflow">return</span> retValue;
<a name="l02188"></a>02188     }
<a name="l02189"></a>02189 
<a name="l02190"></a>02190 
<a name="l02191"></a>02191     <span class="comment">// check if a SubPaving is a leaf</span>
<a name="l02192"></a><a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8">02192</a>     <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02193"></a>02193     {
<a name="l02194"></a>02194         <span class="comment">// FALSE if spn is a null pointer, true if spn is not NULL</span>
<a name="l02195"></a>02195         <span class="keywordtype">bool</span> retVal = (spn!=NULL);
<a name="l02196"></a>02196 
<a name="l02197"></a>02197 
<a name="l02198"></a>02198         <span class="keywordflow">if</span> (retVal) { <span class="comment">// if spn points to a non-empty node</span>
<a name="l02199"></a>02199             retVal = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>();
<a name="l02200"></a>02200         }
<a name="l02201"></a>02201 
<a name="l02202"></a>02202         <span class="keywordflow">return</span> retVal;
<a name="l02203"></a>02203     }
<a name="l02204"></a>02204 
<a name="l02205"></a>02205     <span class="comment">// check if a SubPaving is empty</span>
<a name="l02206"></a><a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15">02206</a>     <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *<span class="keyword">const</span> spn)
<a name="l02207"></a>02207     {
<a name="l02208"></a>02208         <span class="comment">// return true if spn is a null pointer or</span>
<a name="l02209"></a>02209         <span class="comment">// node spn points to is empty</span>
<a name="l02210"></a>02210         <span class="keywordflow">return</span> ((spn==NULL) || (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()));
<a name="l02211"></a>02211     }
<a name="l02212"></a>02212 
<a name="l02213"></a>02213     <span class="comment">// get volume of a SubPaving</span>
<a name="l02214"></a><a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6">02214</a>     <span class="keywordtype">double</span> <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02215"></a>02215     {
<a name="l02216"></a>02216         <span class="keywordtype">double</span> retVal =0.0;
<a name="l02217"></a>02217 
<a name="l02218"></a>02218         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) {
<a name="l02219"></a>02219 
<a name="l02220"></a>02220             retVal = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l02221"></a>02221         }
<a name="l02222"></a>02222 
<a name="l02223"></a>02223         <span class="comment">// recurse on children</span>
<a name="l02224"></a>02224         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; !(<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn))) {
<a name="l02225"></a>02225 
<a name="l02226"></a>02226             retVal += <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02227"></a>02227             retVal += <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02228"></a>02228         }
<a name="l02229"></a>02229 
<a name="l02230"></a>02230         <span class="comment">// case of isEmpty(spn) retValue = 0 by default</span>
<a name="l02231"></a>02231 
<a name="l02232"></a>02232         <span class="keywordflow">return</span> retVal;
<a name="l02233"></a>02233     }
<a name="l02234"></a>02234 
<a name="l02235"></a>02235     <span class="comment">// get number of leaves of a SubPaving</span>
<a name="l02236"></a><a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61">02236</a>     <span class="keywordtype">size_t</span> <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02237"></a>02237     {
<a name="l02238"></a>02238         <span class="keywordtype">size_t</span> retVal=0;
<a name="l02239"></a>02239 
<a name="l02240"></a>02240         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) retVal = 1; <span class="comment">// leaf</span>
<a name="l02241"></a>02241 
<a name="l02242"></a>02242         <span class="comment">// recurse on children</span>
<a name="l02243"></a>02243         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn)) &amp;&amp; !(<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn))) {
<a name="l02244"></a>02244 
<a name="l02245"></a>02245             retVal += <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02246"></a>02246             retVal += <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02247"></a>02247 
<a name="l02248"></a>02248         }
<a name="l02249"></a>02249 
<a name="l02250"></a>02250         <span class="comment">// if spn is empty we will return retVal = 0 by default</span>
<a name="l02251"></a>02251 
<a name="l02252"></a>02252         <span class="keywordflow">return</span> retVal;
<a name="l02253"></a>02253     }
<a name="l02254"></a>02254 
<a name="l02255"></a>02255     <span class="comment">//gloria&#39;s additions=======================================</span>
<a name="l02256"></a>02256        <span class="comment">// get number of nodes of a SubPaving</span>
<a name="l02257"></a><a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb">02257</a>     <span class="keywordtype">size_t</span> <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l02258"></a>02258     {
<a name="l02259"></a>02259         <span class="keywordtype">size_t</span> retVal=0;
<a name="l02260"></a>02260         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn))) retVal = 1; <span class="comment">// leaf</span>
<a name="l02261"></a>02261         <span class="comment">// recurse on children</span>
<a name="l02262"></a>02262         <span class="keywordflow">if</span> (!(<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn))) {
<a name="l02263"></a>02263             retVal += <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02264"></a>02264             retVal += <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02265"></a>02265         }
<a name="l02266"></a>02266         <span class="comment">// if spn is empty we will return retVal = 0 by default</span>
<a name="l02267"></a>02267         <span class="keywordflow">return</span> retVal;
<a name="l02268"></a>02268     }
<a name="l02269"></a>02269    <span class="comment">//======end of gloria&#39;s additions==============================</span>
<a name="l02270"></a>02270 
<a name="l02271"></a>02271 } <span class="comment">// end namespace subpavings</span>
<a name="l02272"></a>02272 
<a name="l02273"></a>02273   <span class="comment">//src_trunk_0701</span>
<a name="l02274"></a>02274   <span class="comment">// Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l02275"></a>02275   <span class="keyword">template</span> &lt;&gt;
<a name="l02276"></a>02276   <span class="keywordtype">void</span> std::swap(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">subpavings::SPnode</a> &amp; s1, 
<a name="l02277"></a>02277         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">subpavings::SPnode</a> &amp; s2) <span class="comment">// throw ()</span>
<a name="l02278"></a>02278   {
<a name="l02279"></a>02279     s1.<a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">swap</a>(s2);
<a name="l02280"></a>02280   }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spnode_8cpp.shtml">spnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
