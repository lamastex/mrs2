<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: ImageSetDiff.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ImageSetDiff_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ImageSetDiff.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Image Set Differences example.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="spnodeall_8hpp_source.shtml">spnodeall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="ImageSetDiff_8hpp_source.shtml">ImageSetDiff.hpp</a>&quot;</code><br/>
</div>
<p><a href="ImageSetDiff_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ImageSetDiff_8cpp.shtml#ab26ccdeacd30f342d9c257010f58fb1d">getPavingAndName</a> (string folder, string line, <a class="el" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49">SPnodePtrs</a> &amp;roots, vector&lt; string &gt; &amp;names)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Image Set Differences example. </p>

<p>Definition in file <a class="el" href="ImageSetDiff_8cpp_source.shtml">ImageSetDiff.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="ab26ccdeacd30f342d9c257010f58fb1d"></a><!-- doxytag: member="ImageSetDiff.cpp::getPavingAndName" ref="ab26ccdeacd30f342d9c257010f58fb1d" args="(string folder, string line, SPnodePtrs &amp;roots, vector&lt; string &gt; &amp;names)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="ImageSetDiff_8hpp.shtml#ab26ccdeacd30f342d9c257010f58fb1d">getPavingAndName</a> </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>folder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49">SPnodePtrs</a> &amp;&#160;</td>
          <td class="paramname"><em>roots</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; string &gt; &amp;&#160;</td>
          <td class="paramname"><em>names</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ImageSetDiff_8cpp_source.shtml#l00203">203</a> of file <a class="el" href="ImageSetDiff_8cpp_source.shtml">ImageSetDiff.cpp</a>.</p>

<p>Referenced by <a class="el" href="ImageSetDiff_8cpp_source.shtml#l00038">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
    <span class="keywordtype">string</span> spaces = <span class="stringliteral">&quot; \t&quot;</span>;

    <span class="keywordtype">size_t</span> firstNonSpace = line.find_first_not_of(spaces);
    <span class="keywordflow">if</span> (firstNonSpace != string::npos) {

        <span class="keywordtype">size_t</span> firstSpace = line.find_first_of(spaces, firstNonSpace);
        <span class="comment">// get the filename</span>
        <span class="keywordtype">string</span> fname = line.substr(firstNonSpace, firstSpace-firstNonSpace);
        <span class="comment">// try to make the paving</span>
        <span class="keywordtype">string</span> fullfilename = folder + fname;
        <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* spn = SPnode::vtkPaving(fullfilename);

        <span class="keywordflow">if</span> (spn != NULL) {
            <span class="comment">// put the root into the vector of roots</span>
            roots.push_back(spn);
            success = <span class="keyword">true</span>;
            <span class="comment">// try to get the file name as well</span>
            <span class="keywordtype">string</span> rootName = <span class="stringliteral">&quot;&quot;</span>;
            <span class="keywordflow">if</span> (firstSpace != string::npos) {
                <span class="keywordtype">size_t</span> nextNonSpace =
                    line.find_first_not_of(spaces, firstSpace);
                    <span class="keywordflow">if</span> (nextNonSpace != string::npos) {
                        <span class="keywordtype">size_t</span> nextSpace =
                            line.find_first_of(spaces, nextNonSpace);
                        rootName = line.substr(nextNonSpace,
                                        nextSpace-nextNonSpace);
                    }
            }
            names.push_back(rootName);
        }
    }
    <span class="keywordflow">return</span> success;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="ImageSetDiff.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ImageSetDiff_8cpp_source.shtml#l00038">38</a> of file <a class="el" href="ImageSetDiff_8cpp_source.shtml">ImageSetDiff.cpp</a>.</p>

<p>References <a class="el" href="ImageSetDiff_8cpp_source.shtml#l00203">getPavingAndName()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02214">subpavings::spVolume()</a>.</p>
<div class="fragment"><pre class="fragment">{

    <span class="comment">// read a file of filenames and make a subpaving for each file</span>
    <span class="keywordtype">string</span> folder = <span class="stringliteral">&quot;../h0.2vtk/&quot;</span>;
    <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;h0.2vtk_files.txt&quot;</span>;
    <span class="comment">//set up the file and read input line by line</span>
    <span class="comment">// we need to convert the string argument to a c-string for ifstream</span>
    <span class="keywordtype">string</span> fullfilename = folder+filename;
    ifstream dataFile(fullfilename.c_str());

    <span class="keywordtype">size_t</span> files = 0; <span class="comment">// how many files read in</span>

    <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a> vtkRoots;    <span class="comment">// a container for pointers to the root nodes</span>
    vector&lt;string&gt; vtkNames; <span class="comment">// a container for the names</span>

    <span class="keywordtype">string</span> line;

    <span class="keywordflow">if</span> (dataFile.is_open()) {
        <span class="comment">// count the lines in the file</span>
        <span class="keywordflow">while</span> (dataFile.good() )
        {
            getline (dataFile,line);
            files++;  <span class="comment">// count number of lines in the file</span>
        }
        files--;

        vtkRoots.reserve(files);
        vtkNames.reserve(files);

        dataFile.clear(); <span class="comment">// reset the flags on the file</span>
        dataFile.seekg(0, ios::beg); <span class="comment">// and put file pointer to start</span>

        <span class="comment">// starting from the beginning again, get the filename and name</span>
        <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;
        <span class="comment">// stops if any root node is not added to the container</span>
        <span class="keywordflow">while</span> (dataFile.good() &amp;&amp; success)
        {
            getline (dataFile,line);
            <span class="comment">// fill in the container of root node pointers and names</span>
            success = <a class="code" href="ImageSetDiff_8cpp.shtml#ab26ccdeacd30f342d9c257010f58fb1d">getPavingAndName</a>(folder, line, vtkRoots, vtkNames);
        }


        <span class="keywordflow">if</span> (files == vtkRoots.size()) {
            cout &lt;&lt; <span class="stringliteral">&quot;Have read in &quot;</span> &lt;&lt; files &lt;&lt; <span class="stringliteral">&quot; files&quot;</span> &lt;&lt; endl;
            cout &lt;&lt; <span class="stringliteral">&quot;Starting to compute differences matrix ...&quot;</span> &lt;&lt; endl;
            <span class="comment">// Make a matrix of comparisons between the suppavings.</span>
            <span class="comment">// If matrix is indexed with i for the rows, j for the columns</span>
            <span class="comment">// element at (i,j) is a vector summarising the differences</span>
            <span class="comment">// between image i and j which I have done here as 3 elements:</span>
            <span class="comment">// &lt;intersection i&amp;J volume, vol of diff i-j, vol of diff j-i&gt;</span>
            <span class="comment">// and the matrix is almost symmetric except that element at (j,i)</span>
            <span class="comment">// is &lt;intersection i&amp;j volume, vol of diff j-i, vol of diff i-j&gt;</span>

            <span class="comment">// But to save space, only actually hold the bottom diagonal half</span>
            <span class="comment">// of the matrix and don&#39;t include the diagonal itself.</span>
            <span class="comment">// This reduces what we have to hold from nxn to n(n-1)/2</span>
            <span class="comment">// and means that the difference between elements i and j, i!=j,</span>
            <span class="comment">// is at position [i(1+1)/2 + j] in the vector</span>

            vector&lt; vector&lt;double&gt; &gt; differencesMatrix;
            differencesMatrix.reserve(files*(files-1)/2);
            <span class="keywordtype">size_t</span> toStore = 3; <span class="comment">// elements to store for each difference</span>

            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; files; i++) {
                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; j++) {
                    <span class="comment">//cout &lt;&lt; &quot; i = &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; endl;</span>
                    vector&lt;double&gt; theseDifferences;
                    theseDifferences.reserve(toStore);

                    <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* inter = SPnode::spLeafBoxIntersection(vtkRoots[i],
                        vtkRoots[j]);
                    <span class="keywordtype">double</span> vol_inter = 0;
                    <span class="keywordflow">if</span> (inter != NULL) vol_inter = <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(inter);

                    <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* diff_i_j = SPnode::spLeafBoxDifference(vtkRoots[i],
                        vtkRoots[j]);
                    <span class="keywordtype">double</span> vol_diff_i_j = 0;
                    <span class="keywordflow">if</span> (diff_i_j != NULL) vol_diff_i_j = <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(diff_i_j);

                    <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* diff_j_i = SPnode::spLeafBoxDifference(vtkRoots[j],
                        vtkRoots[i]);
                    <span class="keywordtype">double</span> vol_diff_j_i = 0;
                    <span class="keywordflow">if</span> (diff_j_i != NULL) vol_diff_j_i = <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(diff_j_i);

                    theseDifferences.push_back(vol_inter);
                    theseDifferences.push_back(vol_diff_i_j);
                    theseDifferences.push_back(vol_diff_j_i);
                    differencesMatrix[(i*(i-1))/2 + j] = theseDifferences;

                    <span class="keyword">delete</span>(inter);
                    <span class="keyword">delete</span>(diff_i_j);
                    <span class="keyword">delete</span>(diff_j_i);
                }
            }
            cout &lt;&lt; <span class="stringliteral">&quot;Finished differences matrix, starting output ...&quot;</span> &lt;&lt; endl;

            <span class="keywordtype">string</span> header = <span class="stringliteral">&quot;i \t j \t i&amp;j \t diff i\\j \t diff j\\i \n&quot;</span>;
            <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;ImageSetDiffOutput.txt&quot;</span>;
            ofstream os;
            os.open(filename.c_str()); <span class="comment">// don&#39;t append</span>
            <span class="keywordflow">if</span> (os.is_open()) {
                os &lt;&lt; header;
                os.close();
            }
            <span class="keywordflow">else</span> {
                std::cout &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
                    &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
            }
            <span class="comment">// print out &#39;matrix&#39; to file</span>
            os.open(filename.c_str(), ios::app); <span class="comment">// append to file</span>
            <span class="keywordflow">if</span> (os.is_open()) {
                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; files; i++) {
                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; j++) {
                        vector&lt;double&gt; thisDiff
                                        = differencesMatrix[(i*(i-1))/2 + j];
                        <span class="comment">//convert values to a string</span>
                        std::ostringstream stm;
                        stm &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; thisDiff[0] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>
                                &lt;&lt; thisDiff[1] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; thisDiff[2] &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;

                        os &lt;&lt; stm.str();
                    }
                }
            }
            <span class="keywordflow">else</span> {
                std::cout &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
                    &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
            }
            os.close();
            cout &lt;&lt; <span class="stringliteral">&quot;Finished output - look for file &quot;</span> &lt;&lt; filename &lt;&lt; endl;

        }

        <span class="keywordflow">else</span> cout &lt;&lt; vtkRoots.size() &lt;&lt; <span class="stringliteral">&quot; read in: expected &quot;</span>
                    &lt;&lt; files &lt;&lt; <span class="stringliteral">&quot; files&quot;</span> &lt;&lt; endl;


    }

    <span class="keywordflow">else</span>
    {
        std::cout &lt;&lt; <span class="stringliteral">&quot;Error in main: &quot;</span>
            &lt;&lt; <span class="stringliteral">&quot;Unable to open file &quot;</span> &lt;&lt; fullfilename &lt;&lt; std::endl;
    }
  <span class="comment">/*</span>
<span class="comment">            // To realize a file output of the SubPaving Sc</span>
<span class="comment">            ofstream os(&quot;newtree.txt&quot;);            // Filename</span>
<span class="comment">            newTree-&gt;leavesOutputTabs(os);             // Image SubPaving itself</span>
<span class="comment">            delete(newTree);</span>
<span class="comment">  */</span>

    <span class="comment">// delete the pavings</span>
    <a class="code" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6" title="Define type SPnodePtrsItr as an iterator over SPnodePtrs.">SPnodePtrsItr</a> dit;
    <span class="keywordflow">for</span> (dit = vtkRoots.begin(); dit &lt; vtkRoots.end(); dit++) {
       <span class="keyword">delete</span>(*dit);
    }
        <span class="keywordflow">return</span> 0;
} <span class="comment">// end of image set differences program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ImageSetDiff_8cpp.shtml">ImageSetDiff.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
