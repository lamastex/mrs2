<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AirTraffic.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AirTraffic_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AirTraffic.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AirTraffic_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="comment">// to use std::vector</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="comment">// to use iterators</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>cxsc;
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>std;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">//int main()</span>
<a name="l00043"></a><a class="code" href="AirTraffic_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00043</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045    <span class="comment">//------------------------string formatting------------------------------- </span>
<a name="l00046"></a>00046    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00047"></a>00047    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00048"></a>00048    oss.precision(5);
<a name="l00049"></a>00049    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00050"></a>00050     
<a name="l00051"></a>00051    <span class="comment">//--------------input parameters----------------------------------------//</span>
<a name="l00052"></a>00052    <span class="comment">// names of files</span>
<a name="l00053"></a>00053    <span class="keywordtype">string</span> DataFiles = argv[1]; <span class="comment">// this is a row vector of filenames</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055    <span class="comment">//An approximate volume of the object</span>
<a name="l00056"></a>00056    <span class="comment">//For example:</span>
<a name="l00057"></a>00057    <span class="comment">//The birds have about a 2 metre wing span and are about 80 cm long. </span>
<a name="l00058"></a>00058    <span class="comment">//They fly within about 50 m of the sea surface, and mostly within 2 m of it.</span>
<a name="l00059"></a>00059    <span class="comment">//So the volume of the object is 2/1000 * 80/100/1000 = 0.0000016</span>
<a name="l00060"></a>00060    <span class="keywordtype">double</span> Vol = atof(argv[2]); 
<a name="l00061"></a>00061    <span class="comment">//--------------end of input parameters----------------------------------//</span>
<a name="l00062"></a>00062     
<a name="l00063"></a>00063    <span class="comment">//-------Setup to read in data files------------------------------------//</span>
<a name="l00064"></a>00064    <span class="comment">//create a vector object to store the filenames of simulated data</span>
<a name="l00065"></a>00065   vector&lt;string&gt; DataFilesVec;
<a name="l00066"></a>00066   <span class="keywordtype">string</span> fileName;
<a name="l00067"></a>00067   cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
<a name="l00068"></a>00068   ifstream file; <span class="comment">// create file for input</span>
<a name="l00069"></a>00069   file.open(DataFiles.c_str());
<a name="l00070"></a>00070   <span class="comment">// check if this file exists or not</span>
<a name="l00071"></a>00071   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
<a name="l00072"></a>00072     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; DataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00073"></a>00073          &lt;&lt; endl;
<a name="l00074"></a>00074     exit(1);
<a name="l00075"></a>00075   }
<a name="l00076"></a>00076     <span class="comment">// else read in the filenames</span>
<a name="l00077"></a>00077   <span class="comment">// store the filenames in the vector simDataFilesVec</span>
<a name="l00078"></a>00078   <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
<a name="l00079"></a>00079     file &gt;&gt; fileName;
<a name="l00080"></a>00080     cout &lt;&lt; fileName &lt;&lt; endl; 
<a name="l00081"></a>00081     DataFilesVec.push_back(fileName);
<a name="l00082"></a>00082   }
<a name="l00083"></a>00083   <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
<a name="l00084"></a>00084   DataFilesVec.pop_back();
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="comment">//container to keep data to make root box</span>
<a name="l00087"></a>00087   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
<a name="l00088"></a>00088   dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   <span class="comment">// put all simulated data into container allData</span>
<a name="l00091"></a>00091   cout &lt;&lt; <span class="stringliteral">&quot;\nPut all data in a container to get rootbox: &quot;</span> &lt;&lt; endl;
<a name="l00092"></a>00092   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; DataFilesVec.size(); i++) {
<a name="l00093"></a>00093     cout &lt;&lt; DataFilesVec[i] &lt;&lt; endl;
<a name="l00094"></a>00094     <span class="comment">//read into allData</span>
<a name="l00095"></a>00095     <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), DataFilesVec[i], 0);
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>) {
<a name="l00097"></a>00097       cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; DataFilesVec[i] &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00098"></a>00098         &lt;&lt; endl;
<a name="l00099"></a>00099       exit(1);
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101   }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">//Make root box from all the data</span>
<a name="l00104"></a>00104   cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00105"></a>00105   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
<a name="l00106"></a>00106   histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00107"></a>00107   histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
<a name="l00108"></a>00108   ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00109"></a>00109   <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00110"></a>00110   <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
<a name="l00111"></a>00111   cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
<a name="l00112"></a>00112   
<a name="l00113"></a>00113   <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
<a name="l00114"></a>00114   <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
<a name="l00115"></a>00115   <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117   <span class="comment">//---get minimum volume using the same scale as given position data----------</span>
<a name="l00118"></a>00118   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> hist(pavingBox);
<a name="l00119"></a>00119   cout &lt;&lt; <span class="stringliteral">&quot;getRootBoxVol&quot;</span> &lt;&lt; endl;
<a name="l00120"></a>00120   <span class="keywordtype">double</span> rootBoxVol = hist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00121"></a>00121   <span class="keywordtype">double</span> approxDepth = floor(log(rootBoxVol/Vol)/log(2));
<a name="l00122"></a>00122   <span class="keywordtype">double</span> approxMinVol = rootBoxVol/<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(2,approxDepth);
<a name="l00123"></a>00123   cout &lt;&lt; <span class="stringliteral">&quot;Vol: &quot;</span> &lt;&lt; Vol &lt;&lt; <span class="stringliteral">&quot;\tapproxMinVol: &quot;</span> &lt;&lt; approxMinVol &lt;&lt; endl; 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="comment">//---set up for constructing histograms--------------------------------</span>
<a name="l00126"></a>00126   <span class="comment">//split on k and volume to get tightest possible enclosure</span>
<a name="l00127"></a>00127   <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> splitVolCount(approxMinVol);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129   <span class="comment">//vectors to store number of nodes for spaxe complexity purposes </span>
<a name="l00130"></a>00130   vector&lt;size_t&gt; numNodesAgg;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="comment">//collator object for adding trajectories</span>
<a name="l00133"></a>00133   <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l00134"></a>00134    
<a name="l00135"></a>00135   <span class="comment">//-------------get individual trajectories and add into collator----------- </span>
<a name="l00136"></a>00136   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= DataFilesVec.size(); j++) {
<a name="l00137"></a>00137     cout &lt;&lt; <span class="stringliteral">&quot;================&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;======================&quot;</span> &lt;&lt; endl;
<a name="l00138"></a>00138     ostringstream stm1;
<a name="l00139"></a>00139       stm1 &lt;&lt; j;
<a name="l00140"></a>00140     <span class="comment">// tell user which data is being used.</span>
<a name="l00141"></a>00141     <span class="keywordtype">string</span> inputFileName = DataFilesVec[j];
<a name="l00142"></a>00142     cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
<a name="l00143"></a>00143     <span class="comment">// get a count of lines in the txt file</span>
<a name="l00144"></a>00144     <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
<a name="l00145"></a>00145     <span class="comment">// tell user how many lines there are in the file</span>
<a name="l00146"></a>00146     cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
<a name="l00147"></a>00147           &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="comment">// create histograms </span>
<a name="l00150"></a>00150     clock_t start, end;
<a name="l00151"></a>00151     <span class="keywordtype">double</span> timeTaken;
<a name="l00152"></a>00152     start=clock();
<a name="l00153"></a>00153     cout &lt;&lt; <span class="stringliteral">&quot;Getting enclosure for this trajectory: &quot;</span> &lt;&lt; endl; 
<a name="l00154"></a>00154     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
<a name="l00155"></a>00155     vector&lt;size_t&gt; numNodes;
<a name="l00156"></a>00156     successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(inputFileName, 
<a name="l00157"></a>00157                                         numNodes, 
<a name="l00158"></a>00158                                        splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00159"></a>00159     end=clock();
<a name="l00160"></a>00160     timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00161"></a>00161     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00162"></a>00162     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00163"></a>00163       
<a name="l00164"></a>00164       <span class="comment">// /* optional output histogram</span>
<a name="l00165"></a>00165       <span class="keywordtype">string</span> histFileName = <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00166"></a>00166       histFileName += stm1.str();
<a name="l00167"></a>00167       histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00168"></a>00168       myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(histFileName);
<a name="l00169"></a>00169       <span class="comment">// */</span>
<a name="l00170"></a>00170 
<a name="l00171"></a>00171       <span class="comment">//get number of nodes at each split</span>
<a name="l00172"></a>00172       vector&lt;size_t&gt;::iterator vecIt;
<a name="l00173"></a>00173       <span class="keywordtype">string</span> fileNameCount = <span class="stringliteral">&quot;NumNodes&quot;</span>;
<a name="l00174"></a>00174       
<a name="l00175"></a>00175       fileNameCount += stm1.str();
<a name="l00176"></a>00176       fileNameCount += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00177"></a>00177       ofstream os;
<a name="l00178"></a>00178       os.open(fileNameCount.c_str());
<a name="l00179"></a>00179       <span class="keywordflow">for</span> (vecIt = numNodes.begin(); vecIt &lt; numNodes.end(); vecIt++) {
<a name="l00180"></a>00180           os &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00181"></a>00181       }
<a name="l00182"></a>00182       os &lt;&lt; flush;
<a name="l00183"></a>00183       os.close();
<a name="l00184"></a>00184       std::cout &lt;&lt; <span class="stringliteral">&quot;Number of nodes at each split output to &quot;</span> &lt;&lt; 
<a name="l00185"></a>00185       fileNameCount &lt;&lt; std::endl;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187       <span class="keywordtype">size_t</span> aggBox = 0;
<a name="l00188"></a>00188       cout &lt;&lt; <span class="stringliteral">&quot;\n==========Adding myHist into collator==========&quot;</span> &lt;&lt; endl;
<a name="l00189"></a>00189       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
<a name="l00190"></a>00190       numNodesAgg.push_back(aggBox);
<a name="l00191"></a>00191     } <span class="comment">// end of successful insertion</span>
<a name="l00192"></a>00192   } <span class="comment">// end of number of flights</span>
<a name="l00193"></a>00193     
<a name="l00194"></a>00194     
<a name="l00195"></a>00195     coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b" title="Output the accumulated data over the collation to a txt file.">outputAccumulationToTxtTabs</a>(<span class="stringliteral">&quot;coll.txt&quot;</span>);
<a name="l00196"></a>00196     
<a name="l00197"></a>00197     <span class="comment">//output number of nodes for collator</span>
<a name="l00198"></a>00198     vector&lt;size_t&gt;::iterator vecIt;
<a name="l00199"></a>00199     <span class="keywordtype">string</span> fileNameAgg = <span class="stringliteral">&quot;NumNodesAgg.txt&quot;</span>;
<a name="l00200"></a>00200     ofstream os;
<a name="l00201"></a>00201     os.open(fileNameAgg.c_str());
<a name="l00202"></a>00202     <span class="keywordflow">for</span> (vecIt = numNodesAgg.begin(); vecIt &lt; numNodesAgg.end(); vecIt++) {
<a name="l00203"></a>00203       os &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205     os &lt;&lt; flush;
<a name="l00206"></a>00206     os.close();
<a name="l00207"></a>00207     std::cout &lt;&lt; <span class="stringliteral">&quot;Number of nodes at each split output to &quot;</span> &lt;&lt; fileNameAgg &lt;&lt; std::endl;
<a name="l00208"></a>00208     
<a name="l00209"></a>00209   <span class="keywordflow">return</span> 0;
<a name="l00210"></a>00210 } <span class="comment">// end of air traffic example program</span>
<a name="l00211"></a>00211 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AirTraffic_8cpp.shtml">AirTraffic.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
