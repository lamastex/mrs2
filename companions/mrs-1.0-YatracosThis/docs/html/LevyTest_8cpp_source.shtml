<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: LevyTest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('LevyTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">LevyTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="LevyTest_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>     <span class="comment">// to be able to use the Levy function objects</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="FLevy2D_8hpp.shtml" title="Declarations for example function class FLevy2D (Levy function, 2 dimensions).">FLevy2D.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>    <span class="comment">// to be able to do MRS rejection sampling</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>cxsc;
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>std;
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>subpavings;
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="LevyTest_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00044</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="comment">// example to average 10 samples from a 2-d Levy shape</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     ios::sync_with_stdio (); <span class="comment">// so iostream works with stdio</span>
<a name="l00050"></a>00050     cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     <span class="keywordtype">int</span> n_dimensions = 2;
<a name="l00054"></a>00054     <span class="keywordtype">int</span> n_boxes = 1000;
<a name="l00055"></a>00055     <span class="keywordtype">int</span> n_samples = 100000;
<a name="l00056"></a>00056     <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob.&gt;Alb</span>
<a name="l00057"></a>00057     <span class="keywordtype">unsigned</span> theSeed = 12345;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060     <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">true</span>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes
<a name="l00063"></a>00063         &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed
<a name="l00064"></a>00064         &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066     <span class="comment">//Parameters specific to the Levy target</span>
<a name="l00067"></a>00067     real <a class="code" href="LevyFobj2D_8cpp.shtml#ae3d1dc6c8ff5f4490d10dd105dfce9a7">Temperature</a> = 40.0;
<a name="l00068"></a>00068     real <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> = 1.42513;
<a name="l00069"></a>00069     real <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> = 0.80032;
<a name="l00070"></a>00070     real <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> = 176.14;
<a name="l00071"></a>00071     real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a> = 10.0;    <span class="comment">//0.999999999999999;</span>
<a name="l00072"></a>00072     <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="comment">// make the function object</span>
<a name="l00075"></a>00075     <a class="code" href="classFLevy2D.shtml" title="two-dimensional Levy density as a function object class">FLevy2D</a> F_Levy_Temp_2D(Temperature, GlobalMax,
<a name="l00076"></a>00076                         Center1, Center2, DomainLimit, UseLogPi);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">// create the sampler</span>
<a name="l00079"></a>00079     <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (F_Levy_Temp_2D, n_boxes, Alb, theSeed,
<a name="l00080"></a>00080                         (use_f_scale == 1));
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     <span class="comment">// produce the samples (n_sample samples should be produced)</span>
<a name="l00083"></a>00083     <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample; <span class="comment">// object for the sample</span>
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     theSampler.<a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">RejectionSampleMany</a> (n_samples, rs_sample);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="comment">// make a box: the same box will be used by all histograms</span>
<a name="l00089"></a>00089     <span class="comment">// so should be big enough for all of them, so use the function domain</span>
<a name="l00090"></a>00090     <span class="comment">// set up the domain list</span>
<a name="l00091"></a>00091     ivector pavingBox(2);
<a name="l00092"></a>00092     interval dim1(-DomainLimit, DomainLimit);
<a name="l00093"></a>00093     interval dim2(-DomainLimit, DomainLimit);
<a name="l00094"></a>00094     pavingBox[1] = dim1;
<a name="l00095"></a>00095     pavingBox[2] = dim2;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keywordtype">size_t</span> samplesize = 10000; <span class="comment">// number of samples to take from the RSSample</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="comment">// the number of histograms to generate</span>
<a name="l00100"></a>00100     <span class="keywordtype">size_t</span> numSamples = 10;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="comment">// make a collation object, empty at present</span>
<a name="l00103"></a>00103     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="comment">// set up objects for priority queue splitting</span>
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="comment">// node comparison using count of data points associated with nodes</span>
<a name="l00108"></a>00108     <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     <span class="comment">// stopping on smallest volume criteria for splittable nodes</span>
<a name="l00111"></a>00111     <span class="keywordtype">double</span> vol = 0.05;
<a name="l00112"></a>00112     <a class="code" href="classsubpavings_1_1CritSmallestVol__LTE.shtml" title="Class for testing the volume of the box with the smallest volume in the histogram&#39;s subpaving...">CritSmallestVol_LTE</a> critSmallestVol(vol);
<a name="l00113"></a>00113 
<a name="l00114"></a>00114     <span class="comment">/* A node is not splittable if splitting that node would give at least</span>
<a name="l00115"></a>00115 <span class="comment">    one child with &lt; minPoints of data associated with it.*/</span>
<a name="l00116"></a>00116     <span class="keywordtype">size_t</span> minPoints = 0;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="comment">/* minVolB is the multiplier for (log n)^2/n to determine the minumum</span>
<a name="l00119"></a>00119 <span class="comment">    volume for a splittable node where n is total points in subpaving.</span>
<a name="l00120"></a>00120 <span class="comment">    A node with volume &lt; minVolB(log n)^2/n will not be splittable. */</span>
<a name="l00121"></a>00121     <span class="keywordtype">double</span> minVolB = 0.0;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     <span class="comment">// do the collation of numSamples histograms from the rssample</span>
<a name="l00124"></a>00124     <span class="keywordtype">bool</span> success = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a3ba2c0211c575d8564050292e2b00640" title="Collate samples from RSSample object, priority queue splitting.">collateFromRSSampleSplitPQ</a>(samplesize, numSamples,
<a name="l00125"></a>00125                     rs_sample, pavingBox, compCount,
<a name="l00126"></a>00126                     critSmallestVol, minPoints, minVolB);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="keywordflow">if</span> (success) {
<a name="l00129"></a>00129     <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;CollatorHistogram.txt&quot;</span>;
<a name="l00130"></a>00130     coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(fileName); <span class="comment">// output the collation to file</span>
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     <span class="comment">//  Make an average histogram</span>
<a name="l00133"></a>00133     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avColl = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00134"></a>00134     fileName = <span class="stringliteral">&quot;AverageHistogram.txt&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     avColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(fileName);  <span class="comment">// output the average to file</span>
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <span class="keywordflow">else</span>    cout &lt;&lt; <span class="stringliteral">&quot;Failed to create collation over histograms&quot;</span> &lt;&lt; endl;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <span class="keywordflow">return</span> 0;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 } <span class="comment">// end of Levy test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="LevyTest_8cpp.shtml">LevyTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
