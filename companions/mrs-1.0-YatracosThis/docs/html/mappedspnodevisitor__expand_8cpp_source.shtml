<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: mappedspnodevisitor_expand.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('mappedspnodevisitor__expand_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">mappedspnodevisitor_expand.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mappedspnodevisitor__expand_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2010 Jenny Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*/</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &quot;<a class="code" href="nodecompobjmapped_8hpp.shtml" title="Classes for comparing spnodes visited by mappedspnode.">nodecompobjmapped.hpp</a>&quot;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="keyword">using namespace </span>cxsc;
<a name="l00017"></a>00017 <span class="keyword">using namespace </span>std;
<a name="l00018"></a>00018 <span class="keyword">using namespace </span>subpavings;
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">//gat41</span>
<a name="l00022"></a>00022 <span class="comment">// a class for comparison</span>
<a name="l00023"></a>00023 <span class="keyword">class </span><a class="code" href="classMyCompare.shtml">MyCompare</a>
<a name="l00024"></a>00024 {
<a name="l00025"></a><a class="code" href="classMyCompare.shtml#aa9f27ea198651dc3a8f2b3aaedc3b2ae">00025</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjMapped.shtml" title="A Virtual class providing a way to compare spnodes visited by mappedspnodes.">NodeCompObjMapped</a>&amp; <a class="code" href="classMyCompare.shtml#aa9f27ea198651dc3a8f2b3aaedc3b2ae">myNC</a>;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027     <span class="keyword">public</span>:
<a name="l00028"></a><a class="code" href="classMyCompare.shtml#adeb357f13bed7aa77885efe212b65fbf">00028</a>     <a class="code" href="classMyCompare.shtml#adeb357f13bed7aa77885efe212b65fbf">MyCompare</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjMapped.shtml" title="A Virtual class providing a way to compare spnodes visited by mappedspnodes.">NodeCompObjMapped</a>&amp; nc) : myNC(nc) {}
<a name="l00029"></a>00029 
<a name="l00030"></a><a class="code" href="classMyCompare.shtml#acefac57f95bf5fa66ac62fa08d82e72b">00030</a>     <span class="keywordtype">bool</span> operator()   (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> lhs,
<a name="l00031"></a>00031                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00032"></a>00032 <span class="keyword"></span>
<a name="l00033"></a>00033 <span class="keyword">    </span>{ <span class="keywordflow">return</span> myNC(lhs, rhs); }
<a name="l00034"></a>00034 };
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a292481207d6456275fe92160dbcd82b0">00039</a> MappedSPnodeVisitorExpand::MappedSPnodeVisitorExpand(<a class="code" href="classsubpavings_1_1MappedFobj.shtml">MappedFobj</a>&amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, real tol)
<a name="l00040"></a>00040       : <a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>(), fobj(f), tolerance(tol) {}
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a9ca7e3ae700e79bd8656757cba68fd55">00043</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a9ca7e3ae700e79bd8656757cba68fd55">MappedSPnodeVisitorExpand::visit</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * mspn)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046   <span class="comment">//std::cout &lt;&lt; &quot;in visit, for &quot; &lt;&lt; mspn-&gt;getNodeName() &lt;&lt; std::endl;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   <span class="comment">// check if we need to split</span>
<a name="l00049"></a>00049   ivector box = mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00050"></a>00050   <span class="comment">//std::cout &lt;&lt; &quot;this box is &quot; &lt;&lt; box &lt;&lt; &quot; and has volume &quot; &lt;&lt; mspn-&gt;nodeVolume() &lt;&lt; std::endl;</span>
<a name="l00051"></a>00051   interval thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
<a name="l00052"></a>00052   <span class="comment">//std::cout &lt;&lt; &quot;this range is &quot; &lt;&lt; thisRange &lt;&lt; std::endl;</span>
<a name="l00053"></a>00053   real thisMidImage = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(box);
<a name="l00054"></a>00054   <span class="comment">//std::cout &lt;&lt; &quot;this midImage is &quot; &lt;&lt; thisMidImage &lt;&lt; std::endl;</span>
<a name="l00055"></a>00055   
<a name="l00056"></a>00056   <span class="comment">// split if so and then visit children</span>
<a name="l00057"></a>00057   
<a name="l00058"></a>00058 cout &lt;&lt; diam(thisRange) &lt;&lt; <span class="charliteral">&#39;\t&#39;</span> &lt;&lt; thisRange &lt;&lt; endl;
<a name="l00059"></a>00059   <span class="comment">// wants the simple function approx using the mid image to be within epsilon of the worst-case scenario</span>
<a name="l00060"></a>00060   <span class="keywordflow">if</span> (max(Sup(thisRange) - thisMidImage, thisMidImage - Inf(thisRange)) &gt; <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a>) {
<a name="l00061"></a>00061     <span class="comment">//std::cout &lt;&lt; &quot;expanding&quot; &lt;&lt; std::endl;</span>
<a name="l00062"></a>00062     mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>();
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">//visit the children</span>
<a name="l00065"></a>00065     <span class="comment">//std::cout &lt;&lt; &quot;check children&quot; &lt;&lt; std::endl;</span>
<a name="l00066"></a>00066     (mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;accept(*<span class="keyword">this</span>);
<a name="l00067"></a>00067     (mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;accept(*<span class="keyword">this</span>);
<a name="l00068"></a>00068   }
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#aeed5572a50b11c5f5d49321093188eec">00071</a> real <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#aeed5572a50b11c5f5d49321093188eec">MappedSPnodeVisitorExpand::tellMe</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * mspn)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>.<a class="code" href="classsubpavings_1_1MappedFobj.shtml#afc045feebc8ad8fc2a84e0532bf0648d" title="a virtual function for real image of midpoint of a box">imageMid</a>(mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">/*</span>
<a name="l00077"></a>00077 <span class="comment">real MappedSPnodeVisitorExpand::getSPArea(SPnode * mspn)</span>
<a name="l00078"></a>00078 <span class="comment">{</span>
<a name="l00079"></a>00079 <span class="comment">  std::cout &lt;&lt; &quot;in visit, for &quot; &lt;&lt; mspn-&gt;getNodeName() &lt;&lt; std::endl;</span>
<a name="l00080"></a>00080 <span class="comment"></span>
<a name="l00081"></a>00081 <span class="comment">  ivector box = mspn-&gt;getBox();</span>
<a name="l00082"></a>00082 <span class="comment">  interval thisRange = fobj(box);</span>
<a name="l00083"></a>00083 <span class="comment">  real area = Volume(box) * diam(thisRange);</span>
<a name="l00084"></a>00084 <span class="comment">  </span>
<a name="l00085"></a>00085 <span class="comment">  return area;</span>
<a name="l00086"></a>00086 <span class="comment">}</span>
<a name="l00087"></a>00087 <span class="comment">*/</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">//gat41</span>
<a name="l00090"></a><a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">00090</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">MappedSPnodeVisitorExpand::priorityVisit</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * mspn, <span class="keywordtype">size_t</span> critLeaves, std::vector&lt;real&gt;&amp; eps)
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00093"></a>00093    gsl_rng * rgsl = NULL;
<a name="l00094"></a>00094     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00095"></a>00095     <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00096"></a>00096     <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00097"></a>00097     <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00098"></a>00098     gsl_rng_env_setup();
<a name="l00099"></a>00099     tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00100"></a>00100     rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00101"></a>00101     retValue = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">priorityVisit</a>(mspn, critLeaves, rgsl, eps);
<a name="l00102"></a>00102     gsl_rng_free (rgsl);
<a name="l00103"></a>00103    <span class="keywordflow">return</span> retValue;
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">//gat41</span>
<a name="l00107"></a><a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#ad1b71939066cfd6cda106d03b3ed466e">00107</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a33088d8b066f447fe2626680a2255ec6">MappedSPnodeVisitorExpand::priorityVisit</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * mspn, <span class="keywordtype">size_t</span> critLeaves, gsl_rng * rgsl, std::vector&lt;real&gt;&amp; eps)
<a name="l00108"></a>00108 {    
<a name="l00109"></a>00109    <span class="comment">//cout &lt;&lt; &quot;Calling priority visit: &quot; &lt;&lt; endl;</span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l00112"></a>00112    <span class="keywordtype">size_t</span> numNodes = 0;
<a name="l00113"></a>00113    <span class="comment">//real normConst = 0.0;</span>
<a name="l00114"></a>00114    
<a name="l00115"></a>00115    <span class="comment">//comparison function</span>
<a name="l00116"></a>00116    <a class="code" href="classsubpavings_1_1CompSPArea.shtml" title="Class comparing the approximate area of a box by multiplying the box volume with the diameter of its ...">CompSPArea</a> compTest(<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>);
<a name="l00117"></a>00117    <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l00118"></a>00118    multiset&lt;SPnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l00119"></a>00119 
<a name="l00120"></a>00120    <span class="comment">//cout &lt;&lt; &quot;get fobj of box &quot; &lt;&lt; endl;</span>
<a name="l00121"></a>00121    ivector box = mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00122"></a>00122    interval thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
<a name="l00123"></a>00123    
<a name="l00124"></a>00124    <span class="comment">//cout &lt;&lt; &quot;get fobj of mid point &quot; &lt;&lt; endl;</span>
<a name="l00125"></a>00125    <span class="comment">//real thisMidImage = fobj.imageMid(box);</span>
<a name="l00126"></a>00126    <span class="comment">//normConst = (mspn-&gt;nodeVolume() * thisMidImage);</span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128    interval RiemannDiff = (mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()) * (thisRange);
<a name="l00129"></a>00129    real MaxEps = diam(RiemannDiff);
<a name="l00130"></a>00130    <span class="comment">//normalize MaxEps by normConst</span>
<a name="l00131"></a>00131    interval TotEps = interval(MaxEps); 
<a name="l00132"></a>00132    real midTotEps = mid(TotEps);
<a name="l00133"></a>00133    pq.insert(mspn);
<a name="l00134"></a>00134    mspn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591" title="Get the range collection of the vistitor of the type SPnodeVisitor.">collectRange</a>(*<span class="keyword">this</span>);
<a name="l00135"></a>00135    numNodes++;
<a name="l00136"></a>00136   <span class="comment">// this is optional (collecting midTotEps)</span>
<a name="l00137"></a>00137    eps.push_back(midTotEps);
<a name="l00138"></a>00138    
<a name="l00139"></a>00139    cancontinue = (!pq.empty());
<a name="l00140"></a>00140    <span class="keywordflow">if</span>(!cancontinue) {
<a name="l00141"></a>00141       std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l00142"></a>00142     } 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144    <span class="comment">// split until have desired number of leaf nodes</span>
<a name="l00145"></a>00145    <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l00146"></a>00146    <span class="comment">// that they are splittable when we take them out</span>
<a name="l00147"></a>00147    <span class="keywordflow">while</span> (cancontinue &amp;&amp; (numNodes &lt; critLeaves) &amp;&amp; (midTotEps &gt; <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a77345ab08c67ee3b152e7f48795e1132">tolerance</a>))
<a name="l00148"></a>00148    {
<a name="l00149"></a>00149     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l00150"></a>00150     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* chosenLargest;
<a name="l00151"></a>00151     
<a name="l00152"></a>00152     <span class="comment">// find if there are any more equal to largest around</span>
<a name="l00153"></a>00153     multiset&lt;SPnode*, MyCompare&gt;::iterator mit;
<a name="l00154"></a>00154     pair&lt;multiset&lt;SPnode*, MyCompare&gt;::iterator,
<a name="l00155"></a>00155        multiset&lt;SPnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l00158"></a>00158     <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l00161"></a>00161        <span class="comment">// draw a random number in [0,1)</span>
<a name="l00162"></a>00162        <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l00163"></a>00163        real sum = 0.0;
<a name="l00164"></a>00164 
<a name="l00165"></a>00165        <span class="comment">// random selection of the =largest node to chose</span>
<a name="l00166"></a>00166        <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l00167"></a>00167           sum += 1.0/(1.0*numberLargest);
<a name="l00168"></a>00168           <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l00169"></a>00169             <span class="keywordflow">break</span>;
<a name="l00170"></a>00170           }
<a name="l00171"></a>00171        }
<a name="l00172"></a>00172        chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l00173"></a>00173        pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l00174"></a>00174        numNodes--; <span class="comment">//check if pq.size() == numNodes;</span>
<a name="l00175"></a>00175        assert(numNodes == pq.size());
<a name="l00176"></a>00176     }
<a name="l00177"></a>00177     <span class="keywordflow">else</span> {
<a name="l00178"></a>00178        chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l00179"></a>00179        multiset&lt;SPnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l00180"></a>00180        it--;
<a name="l00181"></a>00181        pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l00182"></a>00182        numNodes--; <span class="comment">//check if pq.size() == numNodes</span>
<a name="l00183"></a>00183        assert(numNodes == pq.size());
<a name="l00184"></a>00184     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <span class="comment">// split the biggest one</span>
<a name="l00187"></a>00187     <span class="comment">//cout &lt;&lt; &quot;---------------splitting &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;-----&quot; &lt;&lt; endl;</span>
<a name="l00188"></a>00188     
<a name="l00189"></a>00189     <span class="comment">//cout &lt;&lt; &quot;get fobj of box &quot; &lt;&lt; endl;</span>
<a name="l00190"></a>00190     box = chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00191"></a>00191     thisRange = <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>(box);
<a name="l00192"></a>00192     <span class="comment">//thisRange = thisRange/normConst; //normalize the heights</span>
<a name="l00193"></a>00193     RiemannDiff = (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()) * (thisRange);
<a name="l00194"></a>00194     MaxEps = diam(RiemannDiff);
<a name="l00195"></a>00195     
<a name="l00196"></a>00196     <span class="comment">// now update TotEps</span>
<a name="l00197"></a>00197     TotEps = TotEps - interval(MaxEps);
<a name="l00198"></a>00198     
<a name="l00199"></a>00199      <span class="comment">// now update the normalizing constant since a node is removed</span>
<a name="l00200"></a>00200      <span class="comment">//thisMidImage = fobj.imageMid(box);</span>
<a name="l00201"></a>00201      <span class="comment">//real remNormConst = thisMidImage * (chosenLargest-&gt;nodeVolume());</span>
<a name="l00202"></a>00202      <span class="comment">//cout &lt;&lt; &quot;to remove: &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; remNormConst &lt;&lt; endl;</span>
<a name="l00203"></a>00203      <span class="comment">//assert(normConst &gt;= remNormConst);</span>
<a name="l00204"></a>00204      <span class="comment">//normConst = normConst - remNormConst;</span>
<a name="l00205"></a>00205      
<a name="l00206"></a>00206      <span class="comment">//now split</span>
<a name="l00207"></a>00207     chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>();
<a name="l00208"></a>00208     
<a name="l00209"></a>00209     <span class="comment">//name the new children</span>
<a name="l00210"></a>00210     (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;recursiveRename();
<a name="l00211"></a>00211     (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;collectRange(*<span class="keyword">this</span>);
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;recursiveRename();
<a name="l00214"></a>00214     (chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;collectRange(*<span class="keyword">this</span>);
<a name="l00215"></a>00215     
<a name="l00216"></a>00216     <span class="comment">// insert these nodes into the priority queue</span>
<a name="l00217"></a>00217     pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00218"></a>00218     pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00219"></a>00219     numNodes = numNodes+2;
<a name="l00220"></a>00220     assert(pq.size() == numNodes);
<a name="l00221"></a>00221     
<a name="l00222"></a>00222     <span class="comment">// update normConst with the addition of the left and right child nodes</span>
<a name="l00223"></a>00223     <span class="comment">//normConst = normConst </span>
<a name="l00224"></a>00224     <span class="comment">//    + (((chosenLargest-&gt;getLeftChild())-&gt;nodeVolume())* </span>
<a name="l00225"></a>00225     <span class="comment">//       (fobj.imageMid((chosenLargest-&gt;getLeftChild())-&gt;getBox()))</span>
<a name="l00226"></a>00226     <span class="comment">//      );</span>
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="comment">//normConst = normConst </span>
<a name="l00229"></a>00229     <span class="comment">//    + (((chosenLargest-&gt;getRightChild())-&gt;nodeVolume())* </span>
<a name="l00230"></a>00230     <span class="comment">//       (fobj.imageMid((chosenLargest-&gt;getRightChild())-&gt;getBox()))</span>
<a name="l00231"></a>00231     <span class="comment">//      );</span>
<a name="l00232"></a>00232 
<a name="l00233"></a>00233     <span class="comment">//normalize TotEps to the current normConst</span>
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     
<a name="l00236"></a>00236     <span class="comment">// get the epsilon for the left child node</span>
<a name="l00237"></a>00237     <span class="comment">//cout &lt;&lt; &quot;get fobj of box and mid point &quot; &lt;&lt; endl;</span>
<a name="l00238"></a>00238     MaxEps = diam(((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;nodeVolume()) * (<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getBox())));
<a name="l00239"></a>00239     TotEps = TotEps + interval(MaxEps);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">// get the epsilon for the right child node</span>
<a name="l00242"></a>00242     MaxEps = diam(((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;nodeVolume()) * (<a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml#a7c071f0df7b4dd7fd009827da8853d35">fobj</a>((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getBox())));
<a name="l00243"></a>00243     TotEps = TotEps + interval(MaxEps);
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     <span class="comment">//get the mid point</span>
<a name="l00246"></a>00246     midTotEps = mid(TotEps);
<a name="l00247"></a>00247     <span class="comment">//optional</span>
<a name="l00248"></a>00248     <span class="comment">//if (normConst != 0.0) </span>
<a name="l00249"></a>00249     eps.push_back(midTotEps); 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     cancontinue = (!pq.empty());
<a name="l00252"></a>00252     <span class="keywordflow">if</span> (!cancontinue)
<a name="l00253"></a>00253        std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l00254"></a>00254           &lt;&lt; std::endl;
<a name="l00255"></a>00255   }
<a name="l00256"></a>00256     <span class="keywordflow">return</span> (cancontinue);
<a name="l00257"></a>00257 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="comment">// end of MappedSPnodeVisitorExpand class</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="mappedspnodevisitor__expand_8cpp.shtml">mappedspnodevisitor_expand.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
