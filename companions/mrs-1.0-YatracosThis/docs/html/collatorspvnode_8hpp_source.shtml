<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: collatorspvnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('collatorspvnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">collatorspvnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="collatorspvnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009, 2010, 2011 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009, 2010, 2011 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#ifndef ___CollatorSPVnode_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#define ___CollatorSPVnode_HPP__</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span>
<a name="l00032"></a>00032 
<a name="l00039"></a>00039 <span class="comment">//=============================subpavings namespace=============================</span>
<a name="l00040"></a>00040 <span class="keyword">namespace </span>subpavings {
<a name="l00041"></a>00041 
<a name="l00068"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml">00068</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> {
<a name="l00069"></a>00069     <span class="keyword">private</span>:
<a name="l00070"></a>00070         <span class="comment">/* theBox, dimension, label, parent, leftChild,</span>
<a name="l00071"></a>00071 <span class="comment">        rightChild and nodeName are inherited from base class.</span>
<a name="l00072"></a>00072 <span class="comment">        */</span>
<a name="l00073"></a>00073 
<a name="l00076"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92">00076</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00077"></a>00077        
<a name="l00081"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4">00081</a>         <span class="keyword">mutable</span> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l00082"></a>00082 
<a name="l00088"></a>00088         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">size_t</span> bigN, <span class="keywordtype">size_t</span> bigM,
<a name="l00089"></a>00089                         <span class="keywordtype">int</span> whatSum);
<a name="l00090"></a>00090         
<a name="l00106"></a>00106         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aac50041302262e7503e68cbd9103aa0b" title="Output for a node in a binary tree, tab-delimited.">leafAverageOutputTabs</a>(
<a name="l00107"></a>00107                             std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00108"></a>00108 
<a name="l00125"></a>00125         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a158da654dc12bf34a61950df57d2d742" title="Output for a node in a binary tree, tab-delimited.">leafAccumulationOutputTabs</a>(
<a name="l00126"></a>00126                             std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00127"></a>00127         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a20f7af5ed80d8860009cfd39f1dafc03">leafDifferenceOutputTabs</a>(
<a name="l00128"></a>00128                             std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00129"></a>00129 
<a name="l00134"></a>00134         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a5fb3b27a05bb36fc409ed1ffe17cab9f">nodeAccumulation</a>() <span class="keyword">const</span>;
<a name="l00135"></a>00135         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8493e447407309758e72abcd2a6faf6a">nodeDifference</a>() <span class="keyword">const</span>;
<a name="l00136"></a>00136       
<a name="l00139"></a>00139     std::vector&lt;CollatorSPVnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aab5d343b96bf5be2ef7ebfaa4ead0319">getLeaves</a>(std::vector&lt;CollatorSPVnode*&gt;&amp; leaves) <span class="keyword">const</span>;
<a name="l00140"></a>00140     
<a name="l00143"></a>00143     std::vector&lt;CollatorSPVnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a49322e88d40a59c02bb6c3eb5841584a">getAllNodes</a>(std::vector&lt;CollatorSPVnode*&gt;&amp; allNodes) <span class="keyword">const</span>;
<a name="l00144"></a>00144       
<a name="l00145"></a>00145       
<a name="l00146"></a>00146 
<a name="l00151"></a>00151         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#acf8c07b59699383cc9983aefb8c8945d">nodeAbsAccumulation</a>() <span class="keyword">const</span>;
<a name="l00152"></a>00152 
<a name="l00157"></a>00157         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c350ae6fe0fc1719ec294f5828c64a6">nodeAccumulationMultVol</a>() <span class="keyword">const</span>;
<a name="l00158"></a>00158 
<a name="l00164"></a>00164         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac89894e566fc5b4f86b2b9d749db10a1">nodeAbsAccumulationMultVol</a>() <span class="keyword">const</span>;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="keyword">public</span>:
<a name="l00167"></a>00167 
<a name="l00170"></a>00170         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>();
<a name="l00171"></a>00171 
<a name="l00181"></a>00181         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">int</span> whatSum);
<a name="l00182"></a>00182 
<a name="l00188"></a>00188         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab, <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> summ, 
<a name="l00189"></a>00189                                 <span class="keywordtype">double</span> Vsumm);
<a name="l00190"></a>00190         
<a name="l00191"></a>00191 
<a name="l00194"></a>00194         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; other);
<a name="l00195"></a>00195       
<a name="l00198"></a>00198         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; other, <span class="keywordtype">int</span> toSubtract);
<a name="l00199"></a>00199         
<a name="l00202"></a>00202         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a36bedf0d99a2a3e1a0188c24b68c2e18" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; rhs);
<a name="l00203"></a>00203 
<a name="l00206"></a>00206         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0d2a5d445ac27dd3bf81a6f55c4087f">makeAverageCollation</a>() <span class="keyword">const</span>;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="comment">// Use base class destructor.</span>
<a name="l00209"></a>00209 
<a name="l00231"></a>00231         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a635b2b0884e6d8fc328e058bd3fadbcc" title="Accessor for the parent of a node.">getParent</a>() <span class="keyword">const</span>;
<a name="l00232"></a>00232 
<a name="l00237"></a>00237         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>() <span class="keyword">const</span>;
<a name="l00238"></a>00238 
<a name="l00243"></a>00243         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>() <span class="keyword">const</span>;
<a name="l00245"></a>00245 
<a name="l00248"></a>00248         <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad7fa37be86eb1d964b384a090dc3552f" title="Accessor for the summary.">getSummary</a>() <span class="keyword">const</span>;
<a name="l00249"></a>00249 
<a name="l00252"></a>00252         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">getVemp</a>() <span class="keyword">const</span>;
<a name="l00253"></a>00253         
<a name="l00256"></a>00256         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a72f2564ee548571ef026a8548ca0b0ba" title="Get number of subpavings summarised.">getNumberSummarised</a>() <span class="keyword">const</span>;
<a name="l00257"></a>00257 
<a name="l00263"></a>00263         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae996eeb1103aa689f6f64d3db742ce2f" title="sum over leaf nodes of absolute accumulated summary x volume.">leavesAbsAccumulationMultVol</a>() <span class="keyword">const</span>;
<a name="l00264"></a>00264 
<a name="l00270"></a>00270         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a782737eae50163bbae2dc9c4b5e23aec" title="Output the details of a specific node.">nodePrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00271"></a>00271 
<a name="l00287"></a>00287         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00288"></a>00288         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(std::ostream &amp;os, 
<a name="l00289"></a>00289                                 <span class="keywordtype">int</span> whichColl) <span class="keyword">const</span>;
<a name="l00290"></a>00290 
<a name="l00298"></a>00298         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(
<a name="l00299"></a>00299         std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00300"></a>00300         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(
<a name="l00301"></a>00301         std::ostream &amp;os, <span class="keywordtype">int</span> whichColl) <span class="keyword">const</span>; 
<a name="l00302"></a>00302 
<a name="l00310"></a>00310         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad2fe162c253c15b43027ccd44ce9136b" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00311"></a>00311 
<a name="l00320"></a>00320         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a74c11c958cf56fbfff724d464c02f03a" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(
<a name="l00321"></a>00321                                             std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00322"></a>00322         std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a63529191a0b2eb1bc253c5c717fc2965">leavesDifferenceOutputTabs</a>(
<a name="l00323"></a>00323                                             std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00333"></a>00333         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">nodeExpand</a>(<span class="keywordtype">int</span> comp);
<a name="l00334"></a>00334 
<a name="l00341"></a>00341         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">nodeExpand</a>();
<a name="l00342"></a>00342         
<a name="l00369"></a>00369        <span class="comment">// virtual void nodeReunite(CollatorSPVnode *lChild,</span>
<a name="l00370"></a>00370        <span class="comment">//                         CollatorSPVnode* rChild);</span>
<a name="l00371"></a>00371       
<a name="l00372"></a>00372       <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#abef4fa1adf9483d78e21350712864fd2" title="Try to reunite nodes to form one leaf.">nodesReunite</a>();
<a name="l00373"></a>00373 
<a name="l00378"></a>00378         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a7a6318a53eb8efeecc8ea81244c98859" title="Builds a higher level of a tree from existing nodes. This adopts a left child rather than attempting ...">nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> *lChild);
<a name="l00379"></a>00379 
<a name="l00385"></a>00385         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a47cfd580379397fa0f713de7306a65c3" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> *rChild);
<a name="l00386"></a>00386       
<a name="l00389"></a>00389         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> spn);
<a name="l00390"></a>00390         
<a name="l00400"></a>00400         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af92d7a31e4c7f97661d3e812948a8aee" title="Add two collator subpavings together.">addPavings</a>(
<a name="l00401"></a>00401                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00402"></a>00402                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> rhs);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 
<a name="l00416"></a>00416         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab662ab5025178c145b83b386ef475415" title="Subtract one collator subpavings from another together.">subtractPavings</a>(
<a name="l00417"></a>00417                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00418"></a>00418                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> rhs, <span class="keywordtype">double</span> c);
<a name="l00419"></a>00419 
<a name="l00422"></a>00422         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(<span class="keywordtype">double</span> c);
<a name="l00423"></a>00423         
<a name="l00438"></a>00438         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a2976605178012f7d9b23bca1d7f9beb4" title="Incorporate negation of a Collator subpaving to this summmary.">addNegatedPaving</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">double</span> c);
<a name="l00439"></a>00439       
<a name="l00440"></a>00440    
<a name="l00446"></a>00446      <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae3670805f36e313e7e541d57552d6b34" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtrCSPV</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * &amp;splitCollNode, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn);
<a name="l00447"></a>00447    
<a name="l00454"></a>00454        <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">getScheffeNode</a>(<span class="keywordtype">int</span> theta1, <span class="keywordtype">int</span> theta2);
<a name="l00455"></a>00455        
<a name="l00462"></a>00462        <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">nodeCheckRowSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k);
<a name="l00463"></a>00463 
<a name="l00470"></a>00470        <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">nodeCheckColSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k);
<a name="l00471"></a>00471 
<a name="l00479"></a>00479       <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a1ebdb63b747d9c7a477b6ad86d58b714" title="Get the delta value for a specific theta.">getNodeDelta</a>(<span class="keywordtype">int</span> thisTheta);
<a name="l00480"></a>00480     
<a name="l00482"></a>00482     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0bdf61f72d586c8944c076e310b3240" title="Get the Yatracos set for a particular pair.">getYatSet</a>(
<a name="l00483"></a>00483          std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSetRow,
<a name="l00484"></a>00484           std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSetCol,
<a name="l00485"></a>00485           <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2);
<a name="l00486"></a>00486        
<a name="l00488"></a>00488     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8d430b2bdfb2d8032e5d7f9e9bddb53d" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(
<a name="l00489"></a>00489          std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &amp; ScheffeSet,
<a name="l00490"></a>00490           <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2);
<a name="l00491"></a>00491      
<a name="l00492"></a>00492 }; 
<a name="l00493"></a>00493 <span class="comment">//=========end of CollatorSPVnode class derived from SPnode class================</span>
<a name="l00494"></a>00494 
<a name="l00495"></a>00495 <span class="comment">//================non-member function declarations==============================</span>
<a name="l00498"></a>00498 <span class="comment"></span>std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l00499"></a>00499                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; spn);
<a name="l00500"></a>00500 
<a name="l00503"></a>00503 <span class="keywordtype">double</span> <a class="code" href="namespacesubpavings.shtml#a97b57336ffc5ebac59abfb36dbd5405b" title="Negate a double.">opNegate</a>(<span class="keywordtype">double</span> d);
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 } <span class="comment">// end namespace subpavings</span>
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="collatorspvnode_8hpp.shtml">collatorspvnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
