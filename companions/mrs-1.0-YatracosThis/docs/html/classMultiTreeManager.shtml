<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MultiTreeManager Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classMultiTreeManager.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">MultiTreeManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="MultiTreeManager" -->
<p>A class which can look into the state space of SPSnode trees.  
 <a href="classMultiTreeManager.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for MultiTreeManager:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classMultiTreeManager__coll__graph.png" border="0" usemap="#MultiTreeManager_coll__map" alt="Collaboration graph"/></div>
<map name="MultiTreeManager_coll__map" id="MultiTreeManager_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classMultiTreeManager-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a4fb2b59dc74b9db44247340eee246948">MultiTreeManager</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">default constructor  <a href="#a4fb2b59dc74b9db44247340eee246948"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a75d0b2730d19db22c94702097138c56a">~MultiTreeManager</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a75d0b2730d19db22c94702097138c56a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">mapPavings</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#ab1524c6866c35ce2cafad068792ec5de">makeAndMapOutcomeSpace</a> (int toLevel)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">makeOutcomeSpace</a> (int toLevel)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#af09e6377690a9ebffc9b141532cb07b2">makeAndGraphOutcomeSpace</a> (int toLevel)</td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a2d48afc2b0c1ee16a512e016cc871643">MultiTreeManager</a> (const <a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor not implemented.  <a href="#a2d48afc2b0c1ee16a512e016cc871643"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a7efa564054ab02d135e76c070431c651">operator=</a> (const <a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator not implemented.  <a href="#a7efa564054ab02d135e76c070431c651"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114">addToOutcomeSpaceAndGraph</a> (const string s, int toLevel, int thisLevel, <a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *tree, set&lt; string &gt; &amp;lines)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Accumulate splitting outcomes in pavings and add to graph.  <a href="#abb477bda6e195ddd91b4f4cf41f90114"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a">addToOutcomeSpace</a> (int toLevel, int thisLevel, <a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *tree)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Accumulate splitting outcomes in pavings.  <a href="#a6661b18a6941311bb5c7ca2d7c6ee10a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990">getLeafLevelsString</a> (const <a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *const spn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get a string of the leaf levels of given subpaving  <a href="#aa0eccb6e029837f3b25c5a80f55e9990"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923">SPSnodePtrs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0">pavings</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">vector of pointers to subpavings managed by this object  <a href="#a69e27576dc42a5433ecc8723503638d0"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A class which can look into the state space of SPSnode trees. </p>
<p>Primary method graphOutcomeSpace creates a collection of all the different possible SPSnode trees down to a specified number of splits.</p>
<p>The number of distinct full binary SPStrees after k splits is the Catalan number Ck. </p>

<p>Definition at line <a class="el" href="multitreemanager_8hpp_source.shtml#l00046">46</a> of file <a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a2d48afc2b0c1ee16a512e016cc871643"></a><!-- doxytag: member="MultiTreeManager::MultiTreeManager" ref="a2d48afc2b0c1ee16a512e016cc871643" args="(const MultiTreeManager &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMultiTreeManager.shtml#a2d48afc2b0c1ee16a512e016cc871643">MultiTreeManager::MultiTreeManager</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td><code> [explicit, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor not implemented. </p>

</div>
</div>
<a class="anchor" id="a4fb2b59dc74b9db44247340eee246948"></a><!-- doxytag: member="MultiTreeManager::MultiTreeManager" ref="a4fb2b59dc74b9db44247340eee246948" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMultiTreeManager.shtml#a2d48afc2b0c1ee16a512e016cc871643">MultiTreeManager::MultiTreeManager</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>default constructor </p>

<p>Definition at line <a class="el" href="multitreemanager_8hpp_source.shtml#l00109">109</a> of file <a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{}
</pre></div>
</div>
</div>
<a class="anchor" id="a75d0b2730d19db22c94702097138c56a"></a><!-- doxytag: member="MultiTreeManager::~MultiTreeManager" ref="a75d0b2730d19db22c94702097138c56a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMultiTreeManager.shtml#a75d0b2730d19db22c94702097138c56a">MultiTreeManager::~MultiTreeManager</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00165">165</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
    <span class="keywordflow">for</span> (it = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); it &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); it++) {
        <span class="keyword">delete</span> *it;
        *it = NULL;
    }
    <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();
}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a6661b18a6941311bb5c7ca2d7c6ee10a"></a><!-- doxytag: member="MultiTreeManager::addToOutcomeSpace" ref="a6661b18a6941311bb5c7ca2d7c6ee10a" args="(int toLevel, int thisLevel, SPSnode *tree)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a">MultiTreeManager::addToOutcomeSpace</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>toLevel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thisLevel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *&#160;</td>
          <td class="paramname"><em>tree</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Accumulate splitting outcomes in pavings. </p>
<p>Pointers to the trees which result from the splitting are put into the data member pavings.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">toLevel</td><td>is the number of splits to get to in total. </td></tr>
    <tr><td class="paramname">thisLevel</td><td>is the number of splits on this loop through the method. </td></tr>
    <tr><td class="paramname">tree</td><td>is the pointer to the tree we are currently working on. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true when done; </dd></dl>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00114">114</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>.</p>

<p>Referenced by <a class="el" href="multitreemanager_8cpp_source.shtml#l00329">makeOutcomeSpace()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;

    <span class="keywordflow">if</span> (thisLevel &lt;= toLevel) {

        <span class="comment">// get how many leaves n there are on the tree</span>
        <span class="keywordtype">size_t</span> n = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(tree);

        <span class="comment">// make a temporary collection container</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> container;
        container.reserve(n); <span class="comment">// reserve space</span>

        <span class="comment">// make one copy of the tree for each leaf</span>
        <span class="comment">// put each copy in the temporary container</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {

            <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* copyTree = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*tree);
            container.push_back(copyTree);
            <span class="comment">// take the jth copy of tree and find its leaves</span>
            <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
            copyTree-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
            <span class="comment">// split the ith leaf of this copy of tree</span>
            leaves[i]-&gt;nodeExpand();

        }

        <span class="comment">// copy the contents of the temporary container to pavings</span>
        <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.insert(<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(), container.begin(),container.end());

        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;

        <span class="comment">// for each copy in the temporary container</span>
        <span class="keywordflow">for</span> (it = container.begin(); it &lt; container.end(); it++) {
            <span class="comment">// recurse addToOutComeSpace(toLevel, thisLevel+1, copy)</span>
            done = <a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a" title="Accumulate splitting outcomes in pavings.">addToOutcomeSpace</a>(toLevel, thisLevel + 1, *it);
        }

    }
    <span class="keywordflow">else</span> {
        done = <span class="keyword">true</span>;
    }
    <span class="keywordflow">return</span> done;

}
</pre></div>
</div>
</div>
<a class="anchor" id="abb477bda6e195ddd91b4f4cf41f90114"></a><!-- doxytag: member="MultiTreeManager::addToOutcomeSpaceAndGraph" ref="abb477bda6e195ddd91b4f4cf41f90114" args="(const string s, int toLevel, int thisLevel, SPSnode *tree, set&lt; string &gt; &amp;lines)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114">MultiTreeManager::addToOutcomeSpaceAndGraph</a> </td>
          <td>(</td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>toLevel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thisLevel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *&#160;</td>
          <td class="paramname"><em>tree</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">set&lt; string &gt; &amp;&#160;</td>
          <td class="paramname"><em>lines</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Accumulate splitting outcomes in pavings and add to graph. </p>
<p>Pointers to the trees which result from the splitting are put into the data member pavings. For each tree made a line is added to the file for a dot graph showing the link from parent to child provided the link indicated by the line has not already been registered in the graph.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>is the name of the graph to add to. </td></tr>
    <tr><td class="paramname">toLevel</td><td>is the number of splits to get to in total. </td></tr>
    <tr><td class="paramname">thisLevel</td><td>is the number of splits on this loop through the method. </td></tr>
    <tr><td class="paramname">tree</td><td>is the pointer to the tree we are currently working on. </td></tr>
    <tr><td class="paramname">lines</td><td>is a set of graph lines to make sure we don't have duplicates. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true when done; </dd></dl>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00058">58</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="multitreemanager_8hpp_source.shtml#l00099">getLeafLevelsString()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7">subpavings::outputFile()</a>, <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>.</p>

<p>Referenced by <a class="el" href="multitreemanager_8cpp_source.shtml#l00292">makeAndGraphOutcomeSpace()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;

    <span class="keywordflow">if</span> (thisLevel &lt;= toLevel) {

        <span class="comment">// get how many leaves n there are on the tree</span>
        <span class="keywordtype">size_t</span> n = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(tree);

        <span class="comment">// make a temporary collection container</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> container;
        container.reserve(n); <span class="comment">// reserve space</span>
        <span class="keywordtype">string</span> parent = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990" title="get a string of the leaf levels of given subpaving">getLeafLevelsString</a>(tree) + <span class="stringliteral">&quot;\&quot;&quot;</span>;

        <span class="comment">// make one copy of the tree for each leaf</span>
        <span class="comment">// put each copy in the temporary container</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
            <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* copyTree = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*tree);
            container.push_back(copyTree);
            <span class="comment">// take the jth copy of tree and find its leaves</span>
            <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
            copyTree-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
            <span class="comment">// split the ith leaf of this copy of tree</span>
            leaves[i]-&gt;nodeExpand();
            <span class="comment">// add the parent child connection to the dot graph</span>
            <span class="keywordtype">string</span> segment = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990" title="get a string of the leaf levels of given subpaving">getLeafLevelsString</a>(copyTree) + <span class="stringliteral">&quot;\&quot;&quot;</span>;
            <span class="keywordtype">string</span> line = <span class="stringliteral">&quot;\t &quot;</span> + parent + <span class="stringliteral">&quot; -&gt; &quot;</span> + segment + <span class="stringliteral">&quot;;&quot;</span>;

            pair&lt;set&lt;string&gt;::iterator, <span class="keywordtype">bool</span>&gt; ret;

            ret = lines.insert(line); <span class="comment">// try and see if the line is a new one</span>
            <span class="keywordflow">if</span> (ret.second==<span class="keyword">true</span>) <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, line);  <span class="comment">// output if new line</span>
        }

        <span class="comment">// copy the contents of the temporary container to pavings</span>
        <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.insert(<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(), container.begin(),container.end());

        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
        <span class="comment">// for each copy in the temporary container</span>

        <span class="keywordflow">for</span> (it = container.begin(); it &lt; container.end(); it++) {
            <span class="comment">// recurse addToOutComeSpace(toLevel, thisLevel+1, copy)</span>
            done = <a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114" title="Accumulate splitting outcomes in pavings and add to graph.">addToOutcomeSpaceAndGraph</a>(s, toLevel,
                                            thisLevel + 1, *it, lines);
        }

    }
    <span class="keywordflow">else</span> {
        done = <span class="keyword">true</span>;
    }
    <span class="keywordflow">return</span> done;

}
</pre></div>
</div>
</div>
<a class="anchor" id="aa0eccb6e029837f3b25c5a80f55e9990"></a><!-- doxytag: member="MultiTreeManager::getLeafLevelsString" ref="aa0eccb6e029837f3b25c5a80f55e9990" args="(const SPSnode *const spn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static string <a class="el" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990">MultiTreeManager::getLeafLevelsString</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SPSnode.shtml">SPSnode</a> *const&#160;</td>
          <td class="paramname"><em>spn</em></td><td>)</td>
          <td><code> [inline, static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get a string of the leaf levels of given subpaving </p>
<p>Left to right, 0 is root </p>

<p>Definition at line <a class="el" href="multitreemanager_8hpp_source.shtml#l00099">99</a> of file <a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00692">subpavings::SPnode::getLeafNodeLevelsString()</a>.</p>

<p>Referenced by <a class="el" href="multitreemanager_8cpp_source.shtml#l00058">addToOutcomeSpaceAndGraph()</a>.</p>
<div class="fragment"><pre class="fragment">    {
        <span class="keywordflow">return</span> spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">getLeafNodeLevelsString</a>();
    }
</pre></div>
</div>
</div>
<a class="anchor" id="af09e6377690a9ebffc9b141532cb07b2"></a><!-- doxytag: member="MultiTreeManager::makeAndGraphOutcomeSpace" ref="af09e6377690a9ebffc9b141532cb07b2" args="(int toLevel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMultiTreeManager.shtml#af09e6377690a9ebffc9b141532cb07b2">MultiTreeManager::makeAndGraphOutcomeSpace</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>toLevel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Make and graph outcome space from continual splitting to level toLevel</p>
<p>The outcome space is all the possible results of up to and including toLevel splits starting from a single root node, ie the number of trees in the outcome space for toLevel = k is the Catalan number Ck.</p>
<p>Pointers to the trees which result from the splitting are put into the data member pavings.</p>
<p>The method makes a dot graph showing all the unique leaf level patterns in the outcome space and the relationship between them, ie. which pattern can lead to which other patterns.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">toLevel</td><td>is the number of splits to go up to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>the data member pavings will contain pointers to all the trees in the outcome space. </dd></dl>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00292">292</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="multitreemanager_8cpp_source.shtml#l00058">addToOutcomeSpaceAndGraph()</a>, <a class="el" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609">subpavings::getUniqueFilename()</a>, <a class="el" href="namespacesubpavings.shtml#abb4671c14005974aeea8f0dd39600ec6">subpavings::makeDotImage()</a>, <a class="el" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7">subpavings::outputFile()</a>, and <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>.</p>
<div class="fragment"><pre class="fragment">{

    <span class="comment">// clear the pavings</span>
    <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();

    std::cout &lt;&lt; <span class="stringliteral">&quot;Making and graphing the outcome space&quot;</span> &lt;&lt; std::endl;

    <span class="comment">//Make a node with a dummy box</span>
    ivector pavingBox(1);
    interval pavingInterval(0,1);
    pavingBox[1] = pavingInterval;
    <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* root = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(pavingBox);

    <span class="keywordtype">int</span> i = 0;
    <span class="keywordtype">string</span> baseFileName = <span class="stringliteral">&quot;outputGraph&quot;</span>;
    <span class="keywordtype">string</span> suffix = <span class="stringliteral">&quot;.dot&quot;</span>;
    <span class="keywordtype">string</span> s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName, suffix);
    <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;digraph G {&quot;</span>); <span class="comment">// opening line</span>

    <span class="comment">// add it to the pavings data member collection</span>
    <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.push_back(root);

    <span class="comment">// Send it into addtoOutComeSpace</span>
    <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
    set&lt;string&gt; lines; <span class="comment">// to check on uniqueness of lines for graph</span>
    done = <a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114" title="Accumulate splitting outcomes in pavings and add to graph.">addToOutcomeSpaceAndGraph</a>(s, toLevel, 1, root, lines);
    <span class="keywordflow">while</span> (!done) {}

    <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;}&quot;</span>); <span class="comment">// closing line</span>

    <span class="comment">// make the image of the graph</span>
    <a class="code" href="namespacesubpavings.shtml#abb4671c14005974aeea8f0dd39600ec6" title="make a Dot graph png image given a dot file.">makeDotImage</a>(s);

}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1524c6866c35ce2cafad068792ec5de"></a><!-- doxytag: member="MultiTreeManager::makeAndMapOutcomeSpace" ref="ab1524c6866c35ce2cafad068792ec5de" args="(int toLevel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMultiTreeManager.shtml#ab1524c6866c35ce2cafad068792ec5de">MultiTreeManager::makeAndMapOutcomeSpace</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>toLevel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get and map the outcome space resulting from splitting to level toLevel.</p>
<p>The outcome space is all the possible results of up to and including toLevel splits starting from a single root node, ie the number of trees in the outcome space for toLevel = k is the Catalan number Ck.</p>
<p>The map creates a summary of the frequencies of each leaf level pattern in the outcome space as a collection of ordered maps, one map for each number of leaves of any tree in the outcome space collection. A map for leaves L has keys the unique leaf level pattern summaries with L leaves and values the number of trees in the outcome space that has that leaf level pattern summary.</p>
<p>Console output and txt file output both give a summary of the frequencies and relative frequencies of each leaf level pattern, grouped by number of leaves.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">toLevel</td><td>is the number of splits to go up to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>output file in tab delimited txt format of summary of the frequencies and relative frequencies of each leaf level pattern, grouped by number of leaves. </dd></dl>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00282">282</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="multitreemanager_8cpp_source.shtml#l00329">makeOutcomeSpace()</a>, and <a class="el" href="multitreemanager_8cpp_source.shtml#l00177">mapPavings()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">makeOutcomeSpace</a>(toLevel);
    <a class="code" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">mapPavings</a>();

}
</pre></div>
</div>
</div>
<a class="anchor" id="a5feeb102bc4ffb52cf5fc11327499a1d"></a><!-- doxytag: member="MultiTreeManager::makeOutcomeSpace" ref="a5feeb102bc4ffb52cf5fc11327499a1d" args="(int toLevel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">MultiTreeManager::makeOutcomeSpace</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>toLevel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Make the outcome space from continual splitting to level toLevel.</p>
<p>The outcome space is all the possible results of up to and including toLevel splits starting from a single root node, ie the number of trees in the outcome space for toLevel = k is the Catalan number Ck.</p>
<p>Pointers to the trees which result from the splitting are put into the data member pavings.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">toLevel</td><td>is the number of splits to go up to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>the data member pavings will contain pointers to all the trees in the outcome space. </dd></dl>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00329">329</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="multitreemanager_8cpp_source.shtml#l00114">addToOutcomeSpace()</a>, and <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>.</p>

<p>Referenced by <a class="el" href="MultiManager_8cpp_source.shtml#l00037">main()</a>, and <a class="el" href="multitreemanager_8cpp_source.shtml#l00282">makeAndMapOutcomeSpace()</a>.</p>
<div class="fragment"><pre class="fragment">{

    <span class="comment">// clear the pavings</span>
    <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();

    std::cout &lt;&lt; <span class="stringliteral">&quot;Making the outcome space&quot;</span> &lt;&lt; std::endl;

    <span class="comment">//Make a node with a dummy box</span>
    ivector pavingBox(1);
    interval pavingInterval(0,1);
    pavingBox[1] = pavingInterval;
    <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* root = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(pavingBox);

    <span class="keywordtype">int</span> i = 0;
    <span class="comment">// add it to the pavings data member collection</span>
    <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.push_back(root);

    <span class="comment">// Send it into addtoOutComeSpace</span>
    <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
    done = <a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a" title="Accumulate splitting outcomes in pavings.">addToOutcomeSpace</a>(toLevel, 1, root);
    <span class="keywordflow">while</span> (!done) {}

}
</pre></div>
</div>
</div>
<a class="anchor" id="ae81995550988df35d1dcb7f0c14b5872"></a><!-- doxytag: member="MultiTreeManager::mapPavings" ref="ae81995550988df35d1dcb7f0c14b5872" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">MultiTreeManager::mapPavings</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Map the leaf levels of trees currently in the pavings collection</p>
<p>Creates a collection of ordered maps, one map for each number of leaves of any tree in the pavings collection. A map for leaves L has keys the unique leaf level pattern summaries with L leaves and values the number of trees in the pavings collection that has that leaf level pattern summary.</p>
<p>Console output gives a summary of the frequencies and relative frequencies of each leaf level pattern, grouped by number of leaves. </p>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00177">177</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609">subpavings::getUniqueFilename()</a>, <a class="el" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7">subpavings::outputFile()</a>, <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">pavings</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>.</p>

<p>Referenced by <a class="el" href="MultiManager_8cpp_source.shtml#l00037">main()</a>, and <a class="el" href="multitreemanager_8cpp_source.shtml#l00282">makeAndMapOutcomeSpace()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// don&#39;t clear the current pavings! - that&#39;s what we use here</span>

    <span class="comment">// go through the pavings and record into the vector of shape count maps</span>
    <span class="keywordflow">if</span> (!<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.empty()) {

         <span class="keywordtype">size_t</span> numberPavings = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.size();

        cout &lt;&lt; <span class="stringliteral">&quot; mapping outcomes... there are &quot;</span> &lt;&lt; numberPavings
                        &lt;&lt; <span class="stringliteral">&quot; outcomes &quot;</span> &lt;&lt; endl;

        std::pair&lt; OrdLeafDepthsMap::iterator, bool &gt; mapBool;

        <span class="comment">// what is the maximum number of leaves we have?</span>
        set&lt;size_t&gt; leafSet;
        <span class="keywordtype">size_t</span> count = 0;
        <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); sit &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); sit++) {
            leafSet.insert(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(*sit));
            count ++;
        }

        <span class="keywordtype">size_t</span> uniqueLeaves = leafSet.size();

        vector&lt; OrdLeafDepthsMap &gt; vecMaps(uniqueLeaves); <span class="comment">// vector of maps</span>

        <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); it &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); it++) {

            <span class="keywordtype">size_t</span> thisLeaves = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>((*it));

            <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> thisLevels;
            thisLevels  = (*it)-&gt;getLeafNodeLevels(thisLevels);

            <span class="keywordtype">int</span> indexer = 0; <span class="comment">// need to find index for maps with this no. leaves</span>
            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; thisLeaves; j++) {
                <span class="keywordflow">if</span> (leafSet.count(j)) indexer++;
            }

            mapBool = vecMaps[indexer].insert(pair&lt;IntVec, int&gt; (thisLevels,1));

            <span class="keywordflow">if</span>(!(mapBool.second)) <span class="comment">// if its a new one, add</span>
                (mapBool.first)-&gt;second +=1; <span class="comment">// else increment count</span>
        }

        <span class="keywordtype">string</span> basefilename = <span class="stringliteral">&quot;multimanager&quot;</span>;
        <span class="keywordtype">string</span> filename = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a> (basefilename);

        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename,
            <span class="stringliteral">&quot;tree shape frequencies and relative frequencies in outcomes&quot;</span>);
        std::ostringstream stm;
        stm &lt;&lt; numberPavings &lt;&lt; <span class="stringliteral">&quot; outcomes altogether&quot;</span>;
        <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, stm.str());

        <span class="comment">// print out the results</span>
        std::cout &lt;&lt; <span class="stringliteral">&quot;tree shape frequencies (relative frequencies) in outcomes&quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;

        vector&lt; OrdLeafDepthsMap &gt;::iterator vecMapsIt = vecMaps.begin();

        <span class="keywordflow">for</span> (set&lt;size_t&gt;::iterator lit = leafSet.begin(); lit != leafSet.end();
                                        lit++) {

            OrdLeafDepthsMap::iterator mapIt;

            cout &lt;&lt; <span class="stringliteral">&quot;Leaves : &quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; *lit &lt;&lt; <span class="stringliteral">&quot;\t(&quot;</span>
                            &lt;&lt; (*vecMapsIt).size() &lt;&lt; <span class="stringliteral">&quot; unique outcomes)\n&quot;</span>;

            std::ostringstream stm1;
            stm1 &lt;&lt; <span class="stringliteral">&quot;Leaves : \t&quot;</span> &lt;&lt; (*lit) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*vecMapsIt).size()
                            &lt;&lt; <span class="stringliteral">&quot;\tunique outcomes&quot;</span>;
            <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, stm1.str());

            <span class="keywordflow">for</span>(mapIt = (*vecMapsIt).begin(); mapIt != (*vecMapsIt).end();
                                        mapIt++) {

                <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> levels = mapIt-&gt;first;

                <span class="keywordtype">size_t</span> freq = (mapIt-&gt;second);
                <span class="keywordtype">double</span> relfreq = (1.0*(mapIt-&gt;second))/numberPavings;

                cout &lt;&lt; freq &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; <span class="stringliteral">&quot;(\t&quot;</span>
                    &lt;&lt; relfreq &lt;&lt; <span class="stringliteral">&quot;)\t&quot;</span>;

                std::ostringstream stm2;
                stm2 &lt;&lt; <span class="stringliteral">&quot;\t\t\t\t&quot;</span> &lt;&lt; freq &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>
                    &lt;&lt; relfreq &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
                <span class="keywordtype">string</span> thisline =  stm2.str();

                <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, thisline, levels);

                copy (levels.begin(), levels.end(),
                      ostream_iterator&lt;int&gt;(cout, <span class="stringliteral">&quot;;&quot;</span>));
                cout &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
            }
            vecMapsIt++; <span class="comment">// move the iterator to the vec maps in step</span>
        }
        std::cout &lt;&lt; <span class="stringliteral">&quot;Output file in &quot;</span> &lt;&lt; filename &lt;&lt; std::endl;
    }
    <span class="keywordflow">else</span> std::cout &lt;&lt; <span class="stringliteral">&quot;There are no pavings in the outcome space to map&quot;</span>
                &lt;&lt; std::endl;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a7efa564054ab02d135e76c070431c651"></a><!-- doxytag: member="MultiTreeManager::operator=" ref="a7efa564054ab02d135e76c070431c651" args="(const MultiTreeManager &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a>&amp; MultiTreeManager::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy assignment operator not implemented. </p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a69e27576dc42a5433ecc8723503638d0"></a><!-- doxytag: member="MultiTreeManager::pavings" ref="a69e27576dc42a5433ecc8723503638d0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923">SPSnodePtrs</a> <a class="el" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0">MultiTreeManager::pavings</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>vector of pointers to subpavings managed by this object </p>

<p>Definition at line <a class="el" href="multitreemanager_8hpp_source.shtml#l00051">51</a> of file <a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a>.</p>

<p>Referenced by <a class="el" href="multitreemanager_8cpp_source.shtml#l00114">addToOutcomeSpace()</a>, <a class="el" href="multitreemanager_8cpp_source.shtml#l00058">addToOutcomeSpaceAndGraph()</a>, <a class="el" href="multitreemanager_8cpp_source.shtml#l00292">makeAndGraphOutcomeSpace()</a>, <a class="el" href="multitreemanager_8cpp_source.shtml#l00329">makeOutcomeSpace()</a>, <a class="el" href="multitreemanager_8cpp_source.shtml#l00177">mapPavings()</a>, and <a class="el" href="multitreemanager_8cpp_source.shtml#l00165">~MultiTreeManager()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="multitreemanager_8hpp_source.shtml">multitreemanager.hpp</a></li>
<li><a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classMultiTreeManager.shtml">MultiTreeManager</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:26 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
