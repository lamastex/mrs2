<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCFunctionSimGaussian.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCFunctionSimGaussian_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCFunctionSimGaussian.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCFunctionSimGaussian_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 s<span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FsITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;intervalmappedspnode_measurers.hpp&quot;</span> <span class="comment">// ordering for pq split</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;functionestimator_interval.hpp&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>  
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj_8hpp.shtml" title="Declarations for multivariate Gaussian example function object class.">GaussianFobj.hpp</a>&quot;</span> <span class="comment">// fobj</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// to get determinant and inverse of a matrix</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;gsl/gsl_linalg.h&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// to access gsl_matrix elements</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;gsl/gsl_matrix.h&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// to perform vector-matrix operations</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;gsl/gsl_blas.h&quot;</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">// to use assert</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;assert.h&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">using namespace </span>cxsc;
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>std;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>subpavings;
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="MCMCFunctionSimGaussian_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00056</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058   <span class="comment">// sort out user-defined parameters------------------//</span>
<a name="l00059"></a>00059   <span class="keywordflow">if</span> ( argc &lt; 5 ) {
<a name="l00060"></a>00060     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: &quot;</span> &lt;&lt; argv[0] &lt;&lt; 
<a name="l00061"></a>00061     <span class="stringliteral">&quot;d maxLeavesEst n dataSeed&quot;</span> &lt;&lt; endl;
<a name="l00062"></a>00062     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Syntax: &quot;</span> + std::string(argv[0]) + <span class="stringliteral">&quot;d n states, symmetryIndicator&quot;</span>);
<a name="l00063"></a>00063   }
<a name="l00064"></a>00064   
<a name="l00065"></a>00065   <span class="keywordtype">int</span> d = atoi(argv[1]);  <span class="comment">// ds</span>
<a name="l00066"></a>00066   <span class="keywordtype">size_t</span> maxLeavesEst = atoi(argv[2]);  <span class="comment">// number of leaves in estimator</span>
<a name="l00067"></a>00067   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[3]);  <span class="comment">// number of points to generate</span>
<a name="l00068"></a>00068   <span class="keywordtype">int</span> dataSeed = atoi(argv[4]); <span class="comment">// seed for data generation</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070   <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00071"></a>00071   <span class="keywordtype">size_t</span> minPQPoints1 = 1;
<a name="l00072"></a>00072   <span class="keywordtype">size_t</span> minPQPoints2 = 1;
<a name="l00073"></a>00073   <span class="keywordtype">size_t</span> minPQPoints3 = 1;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   cout &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; : process id is &quot;</span> &lt;&lt; getpid() &lt;&lt; std::endl;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="comment">// for output purposes</span>
<a name="l00078"></a>00078   <span class="comment">// string formatting</span>
<a name="l00079"></a>00079   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00080"></a>00080    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00081"></a>00081    oss.precision(10);
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="comment">//=======generate actual data and get the root box==============//</span>
<a name="l00084"></a>00084   <span class="comment">// set up a random number generator and use mt19937 for generator</span>
<a name="l00085"></a>00085   gsl_rng * r = gsl_rng_alloc (gsl_rng_mt19937); <span class="comment">// set up with default seed</span>
<a name="l00086"></a>00086   <span class="comment">//long unsigned int seed = 1234;</span>
<a name="l00087"></a>00087   gsl_rng_set (r, dataSeed); <span class="comment">// change the seed</span>
<a name="l00088"></a>00088   cout &lt;&lt; <span class="stringliteral">&quot;Data seed is &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090   cout &lt;&lt; <span class="stringliteral">&quot;\n Generate &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; data from actual density.&quot;</span> &lt;&lt; endl;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* actualDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00095"></a>00095     rvector thisrv(d);
<a name="l00096"></a>00096     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00097"></a>00097       <span class="comment">//double z = gsl_rng_uniform(r);</span>
<a name="l00098"></a>00098       <span class="keywordtype">double</span> z = gsl_ran_gaussian(r, 1.0); <span class="comment">// generate a normal r.v.</span>
<a name="l00099"></a>00099       thisrv[j] = (z);
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101     <span class="comment">// put points generated into container</span>
<a name="l00102"></a>00102     actualDataPtr-&gt;push_back(thisrv);
<a name="l00103"></a>00103   }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* actualHist = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(<span class="keyword">true</span>); 
<a name="l00106"></a>00106   actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*actualDataPtr);
<a name="l00107"></a>00107   ivector pavingBoxEst = actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc" title="Get the box of the subpaving managed by this.">getRootBox</a>();
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="comment">//=========end of getting a root box from the actual data=============</span>
<a name="l00110"></a>00110   
<a name="l00111"></a>00111   <span class="comment">//============== make estimate ============//</span>
<a name="l00112"></a>00112   cout &lt;&lt; <span class="stringliteral">&quot;\nMake the function estimator to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00113"></a>00113   
<a name="l00114"></a>00114   <span class="comment">// specify function object (from /examples/MappedTargets</span>
<a name="l00115"></a>00115   <a class="code" href="classsubpavings_1_1GaussianFobj.shtml">GaussianFobj</a> fobj;
<a name="l00116"></a>00116   
<a name="l00117"></a>00117   <span class="comment">/* function estimate is going to use same box as the histograms */</span>
<a name="l00118"></a>00118   <span class="comment">//ivector pavingBoxEst(d);</span>
<a name="l00119"></a>00119   <span class="comment">//for(int k=1; k &lt;= d; k++) pavingBoxEst[k] = pavingInterval;</span>
<a name="l00120"></a>00120   
<a name="l00121"></a>00121   <span class="comment">// Use fobj and pavingBox to get an estimator</span>
<a name="l00122"></a>00122   FunctionEstimatorInterval estimator(pavingBoxEst, fobj);
<a name="l00123"></a>00123   
<a name="l00124"></a>00124   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logEst = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging for making estimator</span>
<a name="l00125"></a>00125   
<a name="l00126"></a>00126 <span class="preprocessor">  #if(1)</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>  <span class="keywordtype">size_t</span> maxLeavesEstDown = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(1.2*maxLeavesEst); <span class="comment">// go down to 1.2 x max</span>
<a name="l00128"></a>00128 <span class="preprocessor">  #endif</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">  #if(0)</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span>    <span class="keywordtype">size_t</span> maxLeavesEstDown = maxLeavesEst;
<a name="l00131"></a>00131 <span class="preprocessor">  #endif</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>  
<a name="l00133"></a>00133   cout &lt;&lt; <span class="stringliteral">&quot;pq down to max leaves &quot;</span> &lt;&lt; maxLeavesEstDown &lt;&lt; endl;
<a name="l00134"></a>00134   
<a name="l00135"></a>00135   clock_t startEst = clock();
<a name="l00136"></a>00136   
<a name="l00137"></a>00137   <span class="comment">// priority split driven by splitting leaf with max reimann diff</span>
<a name="l00138"></a>00138   ReimannDiffMeasurer measurer;
<a name="l00139"></a>00139   estimator.prioritySplit(measurer, maxLeavesEstDown, logEst);
<a name="l00140"></a>00140       
<a name="l00141"></a>00141   <span class="comment">// stop recording time here</span>
<a name="l00142"></a>00142   clock_t endEst = clock();
<a name="l00143"></a>00143   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves in estimate: &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;  
<a name="l00144"></a>00144   cout &lt;&lt; <span class="stringliteral">&quot;After split, getTotalAreaOfIntervalBand() = &quot;</span>
<a name="l00145"></a>00145     &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00146"></a>00146   <span class="keywordtype">double</span> timingEst1 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00147"></a>00147   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for pq split in estimate: &quot;</span> &lt;&lt; timingEst1 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00148"></a>00148   startEst = clock();
<a name="l00149"></a>00149   
<a name="l00150"></a>00150 <span class="preprocessor">  #if(1) </span>
<a name="l00151"></a>00151 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Hull propagation&quot;</span> &lt;&lt; endl;
<a name="l00152"></a>00152     estimator.hullPropagation();
<a name="l00153"></a>00153     
<a name="l00154"></a>00154     cout &lt;&lt; <span class="stringliteral">&quot;Priority merge to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00155"></a>00155 <span class="preprocessor">    #if(0)</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by minimising increase the reimann diff</span>
<a name="l00157"></a>00157     estimator.priorityMergeOnLoss(maxLeavesEst, logEst);
<a name="l00158"></a>00158 <span class="preprocessor">    #endif</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span><span class="preprocessor">    #if(1)</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by merging cherry with minimum reimann diff</span>
<a name="l00161"></a>00161     estimator.priorityMerge(maxLeavesEst, logEst);
<a name="l00162"></a>00162 <span class="preprocessor">    #endif</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>          
<a name="l00164"></a>00164     <span class="comment">// stop recording time here</span>
<a name="l00165"></a>00165     endEst = clock(); 
<a name="l00166"></a>00166     <span class="keywordtype">double</span> timingEst2 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00167"></a>00167     cout &lt;&lt; <span class="stringliteral">&quot;Computing time for hull propagate and merge up in estimate: &quot;</span> &lt;&lt; timingEst2 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00168"></a>00168     
<a name="l00169"></a>00169     cout &lt;&lt; <span class="stringliteral">&quot;After propagation and priority merge, getTotalAreaOfIntervalBand() = &quot;</span> 
<a name="l00170"></a>00170           &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00171"></a>00171     cout &lt;&lt; <span class="stringliteral">&quot;number of leaves is = &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; endl;
<a name="l00172"></a>00172 <span class="preprocessor">  #endif</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>  
<a name="l00174"></a>00174   cout &lt;&lt; <span class="stringliteral">&quot;Making estimate and normalising&quot;</span> &lt;&lt; endl;
<a name="l00175"></a>00175   <span class="comment">// Make PiecewiseConstantFunction estimate from estimator</span>
<a name="l00176"></a>00176   <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> estimate = estimator.makePiecewiseConstantFunction();cout &lt;&lt; <span class="stringliteral">&quot;estimate has integral &quot;</span> &lt;&lt; estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() &lt;&lt; <span class="stringliteral">&quot; before normalizing&quot;</span> &lt;&lt; endl;
<a name="l00177"></a>00177   real before = estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>();
<a name="l00178"></a>00178   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a>();
<a name="l00179"></a>00179   cout &lt;&lt; <span class="stringliteral">&quot;estimate has integral &quot;</span> &lt;&lt; estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() &lt;&lt; endl;
<a name="l00180"></a>00180   
<a name="l00181"></a>00181   <span class="comment">//optional</span>
<a name="l00182"></a>00182   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(<span class="stringliteral">&quot;PCF.txt&quot;</span>);
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   <span class="keywordtype">string</span> Integral = <span class="stringliteral">&quot;Integral.txt&quot;</span>;
<a name="l00185"></a>00185   oss.open(Integral.c_str());
<a name="l00186"></a>00186   oss &lt;&lt; before &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() &lt;&lt; endl;
<a name="l00187"></a>00187   oss &lt;&lt; flush;
<a name="l00188"></a>00188   oss.close();
<a name="l00189"></a>00189   
<a name="l00190"></a>00190   
<a name="l00191"></a>00191   <span class="comment">//===========end of estimating function using PCF=========================//</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="comment">//===========generate data==============================================//</span>
<a name="l00194"></a>00194   <span class="comment">// Use PiecewiseConstantFunction to generate data, supplying our own rng</span>
<a name="l00195"></a>00195   cout &lt;&lt; <span class="stringliteral">&quot;\nGenerating data for simulation&quot;</span> &lt;&lt; endl;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container for all the points generated</span>
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   clock_t startData = clock();
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <span class="comment">// Gaussian data</span>
<a name="l00202"></a>00202   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(*theDataPtr, n, r);
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   <span class="comment">// stop recording time here</span>
<a name="l00205"></a>00205   clock_t endData = clock();  
<a name="l00206"></a>00206   <span class="keywordtype">double</span> timingData = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endData - startData)) / CLOCKS_PER_SEC);
<a name="l00207"></a>00207   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for simulating data: &quot;</span> &lt;&lt; timingData &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   cout &lt;&lt; (*theDataPtr).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00210"></a>00210   
<a name="l00211"></a>00211   <span class="keywordflow">try</span> {
<a name="l00212"></a>00212     gsl_rng_free (r);
<a name="l00213"></a>00213     r = NULL;
<a name="l00214"></a>00214   }
<a name="l00215"></a>00215   <span class="keywordflow">catch</span>(...) {}<span class="comment">// catch and swallow</span>
<a name="l00216"></a>00216   
<a name="l00217"></a>00217   cout &lt;&lt; <span class="stringliteral">&quot;\nStart example: n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; and d = &quot;</span> &lt;&lt; d &lt;&lt; endl;
<a name="l00218"></a>00218   <span class="comment">//cout &lt;&lt; &quot;Paving interval is &quot; &lt;&lt; pavingInterval &lt;&lt; endl;</span>
<a name="l00219"></a>00219 
<a name="l00220"></a>00220   <span class="comment">//===========end of generating data=================================//</span>
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="comment">//================get the hellinger distance for this set 0f data========//</span>
<a name="l00223"></a>00223   real HDTrue = 0.0;   <span class="comment">//est vs true</span>
<a name="l00224"></a>00224   real HDActual = 0.0;  <span class="comment">// est vs actual</span>
<a name="l00225"></a>00225   real HDTrueActual = 0.0;  <span class="comment">// actual vs true</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* estimateHist = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(<span class="keyword">true</span>); 
<a name="l00228"></a>00228   estimateHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   <span class="comment">// get the mean and var-covar of the mapped data</span>
<a name="l00231"></a>00231   rvector EstMean = (estimateHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getMean(); <span class="comment">// get mean</span>
<a name="l00232"></a>00232   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> EstCovar = (estimateHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getVarCovar(); <span class="comment">//get the covariance matrix/</span>
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">//compare against actual (0,1)</span>
<a name="l00235"></a>00235   {
<a name="l00236"></a>00236     <span class="comment">//get the mean</span>
<a name="l00237"></a>00237     rvector ExactMean(d);
<a name="l00238"></a>00238     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= d; i++) { ExactMean[i] = 0.0; }
<a name="l00239"></a>00239     <span class="comment">//cout &lt;&lt; ExactMean &lt;&lt; endl;</span>
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">//get the differences of the mean vectors</span>
<a name="l00242"></a>00242     rvector diffMean = ExactMean - EstMean;
<a name="l00243"></a>00243     <span class="comment">//cout &lt;&lt; diffMean &lt;&lt; endl;</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     <span class="keywordflow">if</span> (d == 1) {
<a name="l00246"></a>00246       interval covarI = interval(EstCovar[0]);
<a name="l00247"></a>00247       interval actualCovarI = interval(1.0);
<a name="l00248"></a>00248       interval sumVar = covarI + actualCovarI;
<a name="l00249"></a>00249       <span class="comment">//cout &lt;&lt; sumVar &lt;&lt; &quot;\t&quot;;</span>
<a name="l00250"></a>00250       interval insqrt = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(covarI)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(actualCovarI)/sumVar;
<a name="l00251"></a>00251       <span class="comment">//cout &lt;&lt; insqrt &lt;&lt; &quot;\t&quot;;</span>
<a name="l00252"></a>00252       interval H2 = interval(1,1) - <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(insqrt) *<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>((-0.25*diffMean[1]*diffMean[1])/sumVar);
<a name="l00253"></a>00253       <span class="comment">//cout &lt;&lt; &quot;H2: &quot; &lt;&lt; H2 &lt;&lt; endl;</span>
<a name="l00254"></a>00254       HDTrue = mid(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(H2));
<a name="l00255"></a>00255     }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257     <span class="keywordflow">else</span> {
<a name="l00258"></a>00258     <span class="comment">// get the variance-covariances</span>
<a name="l00259"></a>00259     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> ExactCovar;
<a name="l00260"></a>00260     ExactCovar.reserve(d*d);
<a name="l00261"></a>00261 
<a name="l00262"></a>00262     <span class="comment">// fill in the matrix where the off-diag are 0</span>
<a name="l00263"></a>00263     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; d*d; i++) {
<a name="l00264"></a>00264         ExactCovar.push_back(0.0); <span class="comment">//first fill up the container with 1</span>
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266     <span class="comment">// then fill up the diags with 1</span>
<a name="l00267"></a>00267     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; d; i++) {
<a name="l00268"></a>00268       <span class="keywordtype">int</span> pos = i*d + i;
<a name="l00269"></a>00269       ExactCovar[pos] = 1.0;
<a name="l00270"></a>00270     }
<a name="l00271"></a>00271     
<a name="l00272"></a>00272       <span class="comment">//make a gsl matrix for the mean difference</span>
<a name="l00273"></a>00273       gsl_matrix * diffMeanMat = gsl_matrix_alloc(d, 1);
<a name="l00274"></a>00274       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00275"></a>00275         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 1; j++) {
<a name="l00276"></a>00276           gsl_matrix_set (diffMeanMat, i, j, _double(diffMean[i+1]));
<a name="l00277"></a>00277         }
<a name="l00278"></a>00278       }
<a name="l00279"></a>00279   
<a name="l00280"></a>00280       <span class="comment">// initialize matrix objects</span>
<a name="l00281"></a>00281       gsl_matrix * EstCovarMat = gsl_matrix_alloc(d, d);
<a name="l00282"></a>00282       gsl_matrix * ExactCovarMat = gsl_matrix_alloc(d, d);
<a name="l00283"></a>00283       gsl_matrix * PMat = gsl_matrix_alloc(d, d); <span class="comment">//make this same as CovarMat first</span>
<a name="l00284"></a>00284     
<a name="l00285"></a>00285       <span class="keywordtype">int</span> k = 0; <span class="comment">//counter for RealVec</span>
<a name="l00286"></a>00286       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00287"></a>00287         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00288"></a>00288           gsl_matrix_set(EstCovarMat, i, j, _double(EstCovar[k])); <span class="comment">//cast to double</span>
<a name="l00289"></a>00289           gsl_matrix_set(PMat, i, j, _double(EstCovar[k])); <span class="comment">//cast to double</span>
<a name="l00290"></a>00290           gsl_matrix_set(ExactCovarMat, i, j, _double(ExactCovar[k])); <span class="comment">//cast to double</span>
<a name="l00291"></a>00291           k++;
<a name="l00292"></a>00292         }
<a name="l00293"></a>00293       }
<a name="l00294"></a>00294     
<a name="l00295"></a>00295       <span class="comment">//add the two matrices</span>
<a name="l00296"></a>00296       gsl_matrix_add(PMat, ExactCovarMat);
<a name="l00297"></a>00297       gsl_matrix_scale(PMat, 0.5);
<a name="l00298"></a>00298       <span class="comment">//cout &lt;&lt; &quot;add the two matrices: &quot; &lt;&lt; endl;</span>
<a name="l00299"></a>00299     
<a name="l00300"></a>00300       <span class="comment">// get the determinants </span>
<a name="l00301"></a>00301       <span class="keywordtype">int</span> s;
<a name="l00302"></a>00302       gsl_permutation * p = gsl_permutation_alloc(d);
<a name="l00303"></a>00303       gsl_linalg_LU_decomp(EstCovarMat, p, &amp;s);
<a name="l00304"></a>00304       <span class="keywordtype">double</span> detCovarMat = gsl_linalg_LU_det(EstCovarMat, s);
<a name="l00305"></a>00305       gsl_permutation_free(p);
<a name="l00306"></a>00306     
<a name="l00307"></a>00307       <span class="keywordtype">int</span> s1;
<a name="l00308"></a>00308       gsl_permutation * p1 = gsl_permutation_alloc(d);
<a name="l00309"></a>00309       gsl_linalg_LU_decomp(ExactCovarMat, p1, &amp;s1);
<a name="l00310"></a>00310       <span class="keywordtype">double</span> detExactCovarMat = gsl_linalg_LU_det(ExactCovarMat, s1);
<a name="l00311"></a>00311       gsl_permutation_free(p1);
<a name="l00312"></a>00312     
<a name="l00313"></a>00313       <span class="keywordtype">int</span> s2;
<a name="l00314"></a>00314       gsl_permutation * p2 = gsl_permutation_alloc(d);
<a name="l00315"></a>00315       gsl_linalg_LU_decomp(PMat, p2, &amp;s2);
<a name="l00316"></a>00316       <span class="keywordtype">double</span> detPMat = gsl_linalg_LU_det(PMat, s2);
<a name="l00317"></a>00317       
<a name="l00318"></a>00318       <span class="comment">//cout &lt;&lt; detCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detExactCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detPMat &lt;&lt; endl;</span>
<a name="l00319"></a>00319     
<a name="l00320"></a>00320       <span class="comment">//now get the inverse of P</span>
<a name="l00321"></a>00321       gsl_matrix * Pinverse = gsl_matrix_alloc(d, d); 
<a name="l00322"></a>00322       gsl_linalg_LU_invert(PMat, p2, Pinverse);
<a name="l00323"></a>00323       gsl_permutation_free(p2);
<a name="l00324"></a>00324     <span class="comment">/*</span>
<a name="l00325"></a>00325 <span class="comment">      cout &lt;&lt; &quot;PMat: &quot; &lt;&lt; endl;</span>
<a name="l00326"></a>00326 <span class="comment">      for (int i = 0; i &lt; d; i++) {</span>
<a name="l00327"></a>00327 <span class="comment">        for (int j=0; j &lt; d; j++) {</span>
<a name="l00328"></a>00328 <span class="comment">          cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(Pinverse, i, j) &lt;&lt; endl; </span>
<a name="l00329"></a>00329 <span class="comment">        }</span>
<a name="l00330"></a>00330 <span class="comment">      }</span>
<a name="l00331"></a>00331 <span class="comment">    */</span>
<a name="l00332"></a>00332       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00333"></a>00333       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00334"></a>00334       gsl_matrix * diffMeanMatTranspose = gsl_matrix_alloc(1, d);
<a name="l00335"></a>00335       gsl_matrix_transpose_memcpy(diffMeanMatTranspose, diffMeanMat);
<a name="l00336"></a>00336     
<a name="l00337"></a>00337       <span class="comment">// now convert all to rmatrix for easier computations</span>
<a name="l00338"></a>00338       rmatrix diffMeanR(0, d-1, 0, 0);
<a name="l00339"></a>00339       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00340"></a>00340         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; 1; j++) {
<a name="l00341"></a>00341           diffMeanR[i][j] = gsl_matrix_get(diffMeanMat, i, j); 
<a name="l00342"></a>00342           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMat, i, j) &lt;&lt; endl; </span>
<a name="l00343"></a>00343         }
<a name="l00344"></a>00344       }
<a name="l00345"></a>00345     
<a name="l00346"></a>00346       rmatrix diffMeanTransR(0, 0, 0, d-1);
<a name="l00347"></a>00347       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) {
<a name="l00348"></a>00348         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00349"></a>00349           diffMeanTransR[i][j] = gsl_matrix_get(diffMeanMatTranspose, i, j); 
<a name="l00350"></a>00350           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMatTranspose, i, j) &lt;&lt; endl; </span>
<a name="l00351"></a>00351         }
<a name="l00352"></a>00352       }
<a name="l00353"></a>00353     
<a name="l00354"></a>00354       rmatrix PinvR(0, d-1, 0, d-1);
<a name="l00355"></a>00355       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00356"></a>00356         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00357"></a>00357           PinvR[i][j] = gsl_matrix_get(Pinverse, i, j); 
<a name="l00358"></a>00358         }
<a name="l00359"></a>00359       }
<a name="l00360"></a>00360     
<a name="l00361"></a>00361       <span class="comment">//free the gsl_matrices</span>
<a name="l00362"></a>00362       gsl_matrix_free(EstCovarMat);
<a name="l00363"></a>00363       gsl_matrix_free(ExactCovarMat);
<a name="l00364"></a>00364       gsl_matrix_free(PMat);
<a name="l00365"></a>00365     
<a name="l00366"></a>00366       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00367"></a>00367       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00368"></a>00368       rmatrix MatOp = (diffMeanTransR*PinvR)*diffMeanR;
<a name="l00369"></a>00369       <span class="comment">//cout &lt;&lt; MatOp[0][0] &lt;&lt; endl;</span>
<a name="l00370"></a>00370       real DB = 1.0/8.0 * MatOp[0][0] + 0.5*log(detPMat/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(detCovarMat*detExactCovarMat));
<a name="l00371"></a>00371       <span class="comment">//cout &lt;&lt; &quot;DB: &quot; &lt;&lt; DB &lt;&lt; endl;</span>
<a name="l00372"></a>00372       <span class="keywordflow">if</span> (DB &lt; 0) { HDTrue = 0.0; }
<a name="l00373"></a>00373       <span class="keywordflow">else</span> {
<a name="l00374"></a>00374         real BC = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-DB);
<a name="l00375"></a>00375         assert(BC &gt;= 0);
<a name="l00376"></a>00376         <span class="comment">//cout &lt;&lt; &quot;BC: &quot; &lt;&lt; BC &lt;&lt; endl;</span>
<a name="l00377"></a>00377         HDTrue = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-BC);
<a name="l00378"></a>00378         <span class="comment">//cout &lt;&lt; &quot;HD: &quot; &lt;&lt; HDTrue &lt;&lt; endl;</span>
<a name="l00379"></a>00379         assert(HDTrue &gt;=0);
<a name="l00380"></a>00380       }
<a name="l00381"></a>00381     }
<a name="l00382"></a>00382     cout &lt;&lt; <span class="stringliteral">&quot;Hellinger distance: &quot;</span> &lt;&lt; HDTrue &lt;&lt; endl;
<a name="l00383"></a>00383   }
<a name="l00384"></a>00384 
<a name="l00385"></a>00385   <span class="comment">// compare against actual data</span>
<a name="l00386"></a>00386   {
<a name="l00387"></a>00387     <span class="comment">//get the mean</span>
<a name="l00388"></a>00388     rvector ExactMean = actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91" title="Gets the mean from the root box of the paving this manages.">getRootPavingMean</a>();
<a name="l00389"></a>00389     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> ExactCovar = actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f" title="Gets variance covariance vector from root box of rootpaving.">getRootPavingVarCovar</a>();
<a name="l00390"></a>00390 
<a name="l00391"></a>00391     <span class="comment">//get the differences of the mean vectors</span>
<a name="l00392"></a>00392     rvector diffMean = ExactMean - EstMean;
<a name="l00393"></a>00393     <span class="comment">//cout &lt;&lt; diffMean &lt;&lt; endl;</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     <span class="keywordflow">if</span> (d == 1) {
<a name="l00396"></a>00396       interval covarI = interval(EstCovar[0]);
<a name="l00397"></a>00397       interval actualCovarI = interval(ExactCovar[0]);
<a name="l00398"></a>00398       interval sumVar = covarI + actualCovarI;
<a name="l00399"></a>00399       <span class="comment">//cout &lt;&lt; sumVar &lt;&lt; &quot;\t&quot;;</span>
<a name="l00400"></a>00400       interval insqrt = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(covarI)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(actualCovarI)/sumVar;
<a name="l00401"></a>00401       <span class="comment">//cout &lt;&lt; insqrt &lt;&lt; &quot;\t&quot;;</span>
<a name="l00402"></a>00402       interval H2 = interval(1,1) - <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(insqrt) *<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>((-0.25*diffMean[1]*diffMean[1])/sumVar);
<a name="l00403"></a>00403       <span class="comment">//cout &lt;&lt; &quot;H2: &quot; &lt;&lt; H2 &lt;&lt; endl;</span>
<a name="l00404"></a>00404       HDActual = mid(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(H2));
<a name="l00405"></a>00405     }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407     <span class="keywordflow">else</span> {
<a name="l00408"></a>00408       <span class="comment">//make a gsl matrix for the mean difference</span>
<a name="l00409"></a>00409       gsl_matrix * diffMeanMat = gsl_matrix_alloc(d, 1);
<a name="l00410"></a>00410       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00411"></a>00411         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 1; j++) {
<a name="l00412"></a>00412           gsl_matrix_set (diffMeanMat, i, j, _double(diffMean[i+1]));
<a name="l00413"></a>00413         }
<a name="l00414"></a>00414       }
<a name="l00415"></a>00415   
<a name="l00416"></a>00416       <span class="comment">// initialize matrix objects</span>
<a name="l00417"></a>00417       gsl_matrix * EstCovarMat = gsl_matrix_alloc(d, d);
<a name="l00418"></a>00418       gsl_matrix * ExactCovarMat = gsl_matrix_alloc(d, d);
<a name="l00419"></a>00419       gsl_matrix * PMat = gsl_matrix_alloc(d, d); <span class="comment">//make this same as CovarMat first</span>
<a name="l00420"></a>00420     
<a name="l00421"></a>00421       <span class="keywordtype">int</span> k = 0; <span class="comment">//counter for RealVec</span>
<a name="l00422"></a>00422       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00423"></a>00423         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00424"></a>00424           gsl_matrix_set(EstCovarMat, i, j, _double(EstCovar[k])); <span class="comment">//cast to double</span>
<a name="l00425"></a>00425           gsl_matrix_set(PMat, i, j, _double(EstCovar[k])); <span class="comment">//cast to double</span>
<a name="l00426"></a>00426           gsl_matrix_set(ExactCovarMat, i, j, _double(ExactCovar[k])); <span class="comment">//cast to double</span>
<a name="l00427"></a>00427           k++;
<a name="l00428"></a>00428         }
<a name="l00429"></a>00429       }
<a name="l00430"></a>00430     
<a name="l00431"></a>00431       <span class="comment">//add the two matrices</span>
<a name="l00432"></a>00432       gsl_matrix_add(PMat, ExactCovarMat);
<a name="l00433"></a>00433       gsl_matrix_scale(PMat, 0.5);
<a name="l00434"></a>00434       <span class="comment">//cout &lt;&lt; &quot;add the two matrices: &quot; &lt;&lt; endl;</span>
<a name="l00435"></a>00435     
<a name="l00436"></a>00436       <span class="comment">// get the determinants </span>
<a name="l00437"></a>00437       <span class="keywordtype">int</span> s;
<a name="l00438"></a>00438       gsl_permutation * p = gsl_permutation_alloc(d);
<a name="l00439"></a>00439       gsl_linalg_LU_decomp(EstCovarMat, p, &amp;s);
<a name="l00440"></a>00440       <span class="keywordtype">double</span> detCovarMat = gsl_linalg_LU_det(EstCovarMat, s);
<a name="l00441"></a>00441       gsl_permutation_free(p);
<a name="l00442"></a>00442     
<a name="l00443"></a>00443       <span class="keywordtype">int</span> s1;
<a name="l00444"></a>00444       gsl_permutation * p1 = gsl_permutation_alloc(d);
<a name="l00445"></a>00445       gsl_linalg_LU_decomp(ExactCovarMat, p1, &amp;s1);
<a name="l00446"></a>00446       <span class="keywordtype">double</span> detExactCovarMat = gsl_linalg_LU_det(ExactCovarMat, s1);
<a name="l00447"></a>00447       gsl_permutation_free(p1);
<a name="l00448"></a>00448     
<a name="l00449"></a>00449       <span class="keywordtype">int</span> s2;
<a name="l00450"></a>00450       gsl_permutation * p2 = gsl_permutation_alloc(d);
<a name="l00451"></a>00451       gsl_linalg_LU_decomp(PMat, p2, &amp;s2);
<a name="l00452"></a>00452       <span class="keywordtype">double</span> detPMat = gsl_linalg_LU_det(PMat, s2);
<a name="l00453"></a>00453       
<a name="l00454"></a>00454       <span class="comment">//cout &lt;&lt; detCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detExactCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detPMat &lt;&lt; endl;</span>
<a name="l00455"></a>00455     
<a name="l00456"></a>00456       <span class="comment">//now get the inverse of P</span>
<a name="l00457"></a>00457       gsl_matrix * Pinverse = gsl_matrix_alloc(d, d); 
<a name="l00458"></a>00458       gsl_linalg_LU_invert(PMat, p2, Pinverse);
<a name="l00459"></a>00459       gsl_permutation_free(p2);
<a name="l00460"></a>00460     
<a name="l00461"></a>00461     <span class="comment">/*</span>
<a name="l00462"></a>00462 <span class="comment">      cout &lt;&lt; &quot;PMat: &quot; &lt;&lt; endl;</span>
<a name="l00463"></a>00463 <span class="comment">      for (int i = 0; i &lt; d; i++) {</span>
<a name="l00464"></a>00464 <span class="comment">        for (int j=0; j &lt; d; j++) {</span>
<a name="l00465"></a>00465 <span class="comment">          //cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(Pinverse, i, j) &lt;&lt; endl; </span>
<a name="l00466"></a>00466 <span class="comment">        }</span>
<a name="l00467"></a>00467 <span class="comment">      }</span>
<a name="l00468"></a>00468 <span class="comment">    */</span>
<a name="l00469"></a>00469       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00470"></a>00470       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00471"></a>00471       gsl_matrix * diffMeanMatTranspose = gsl_matrix_alloc(1, d);
<a name="l00472"></a>00472       gsl_matrix_transpose_memcpy(diffMeanMatTranspose, diffMeanMat);
<a name="l00473"></a>00473     
<a name="l00474"></a>00474       <span class="comment">// now convert all to rmatrix for easier computations</span>
<a name="l00475"></a>00475       rmatrix diffMeanR(0, d-1, 0, 0);
<a name="l00476"></a>00476       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00477"></a>00477         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; 1; j++) {
<a name="l00478"></a>00478           diffMeanR[i][j] = gsl_matrix_get(diffMeanMat, i, j); 
<a name="l00479"></a>00479           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMat, i, j) &lt;&lt; endl; </span>
<a name="l00480"></a>00480         }
<a name="l00481"></a>00481       }
<a name="l00482"></a>00482     
<a name="l00483"></a>00483       rmatrix diffMeanTransR(0, 0, 0, d-1);
<a name="l00484"></a>00484       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) {
<a name="l00485"></a>00485         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00486"></a>00486           diffMeanTransR[i][j] = gsl_matrix_get(diffMeanMatTranspose, i, j); 
<a name="l00487"></a>00487           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMatTranspose, i, j) &lt;&lt; endl; </span>
<a name="l00488"></a>00488         }
<a name="l00489"></a>00489       }
<a name="l00490"></a>00490     
<a name="l00491"></a>00491       rmatrix PinvR(0, d-1, 0, d-1);
<a name="l00492"></a>00492       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00493"></a>00493         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00494"></a>00494           PinvR[i][j] = gsl_matrix_get(Pinverse, i, j); 
<a name="l00495"></a>00495         }
<a name="l00496"></a>00496       }
<a name="l00497"></a>00497     
<a name="l00498"></a>00498       <span class="comment">//free the gsl_matrices</span>
<a name="l00499"></a>00499       gsl_matrix_free(EstCovarMat);
<a name="l00500"></a>00500       gsl_matrix_free(ExactCovarMat);
<a name="l00501"></a>00501       gsl_matrix_free(PMat);
<a name="l00502"></a>00502     
<a name="l00503"></a>00503       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00504"></a>00504       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00505"></a>00505       rmatrix MatOp = (diffMeanTransR*PinvR)*diffMeanR;
<a name="l00506"></a>00506       <span class="comment">//cout &lt;&lt; MatOp[0][0] &lt;&lt; endl;</span>
<a name="l00507"></a>00507       real DB = 1.0/8.0 * MatOp[0][0] + 0.5*log(detPMat/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(detCovarMat*detExactCovarMat));
<a name="l00508"></a>00508       <span class="comment">//cout &lt;&lt; &quot;DB: &quot; &lt;&lt; DB &lt;&lt; endl;</span>
<a name="l00509"></a>00509       <span class="keywordflow">if</span> (DB &lt; 0) { HDTrue = 0.0; }
<a name="l00510"></a>00510       <span class="keywordflow">else</span> {
<a name="l00511"></a>00511         real BC = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-DB);
<a name="l00512"></a>00512         assert(BC &gt;= 0);
<a name="l00513"></a>00513         <span class="comment">//cout &lt;&lt; &quot;BC: &quot; &lt;&lt; BC &lt;&lt; endl;</span>
<a name="l00514"></a>00514         HDActual = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-BC);
<a name="l00515"></a>00515         <span class="comment">//cout &lt;&lt; &quot;HD: &quot; &lt;&lt; HDActual &lt;&lt; endl;</span>
<a name="l00516"></a>00516         assert(HDActual &gt;=0);
<a name="l00517"></a>00517       }
<a name="l00518"></a>00518     }
<a name="l00519"></a>00519     cout &lt;&lt; <span class="stringliteral">&quot;Hellinger distance: &quot;</span> &lt;&lt; HDActual &lt;&lt; endl;
<a name="l00520"></a>00520   }
<a name="l00521"></a>00521 
<a name="l00522"></a>00522 
<a name="l00523"></a>00523   <span class="comment">// actual vs true</span>
<a name="l00524"></a>00524   {
<a name="l00525"></a>00525     <span class="comment">//get the mean</span>
<a name="l00526"></a>00526     rvector ActualMean = actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91" title="Gets the mean from the root box of the paving this manages.">getRootPavingMean</a>();
<a name="l00527"></a>00527     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> ActualCovar = actualHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f" title="Gets variance covariance vector from root box of rootpaving.">getRootPavingVarCovar</a>();
<a name="l00528"></a>00528 
<a name="l00529"></a>00529     <span class="comment">//get the mean</span>
<a name="l00530"></a>00530     rvector TrueMean(d);
<a name="l00531"></a>00531     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= d; i++) { TrueMean[i] = 0.0; }
<a name="l00532"></a>00532 
<a name="l00533"></a>00533     <span class="comment">//get the differences of the mean vectors</span>
<a name="l00534"></a>00534     rvector diffMean = ActualMean - TrueMean;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536     <span class="keywordflow">if</span> (d == 1) {
<a name="l00537"></a>00537       interval actualCovarI = interval(ActualCovar[0]);
<a name="l00538"></a>00538       interval trueCovarI = interval(1.0);
<a name="l00539"></a>00539       interval sumVar = trueCovarI + actualCovarI;
<a name="l00540"></a>00540       interval insqrt = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(trueCovarI)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(actualCovarI)/sumVar;
<a name="l00541"></a>00541       interval H2 = interval(1,1) - <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(insqrt) *<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>((-0.25*diffMean[1]*diffMean[1])/sumVar);
<a name="l00542"></a>00542       HDTrueActual = mid(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(H2));
<a name="l00543"></a>00543     }
<a name="l00544"></a>00544 
<a name="l00545"></a>00545     <span class="keywordflow">else</span> {
<a name="l00546"></a>00546     <span class="comment">// get the variance-covariances</span>
<a name="l00547"></a>00547     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> TrueCovar;
<a name="l00548"></a>00548     TrueCovar.reserve(d*d);
<a name="l00549"></a>00549 
<a name="l00550"></a>00550     <span class="comment">// fill in the matrix where the off-diag are 0</span>
<a name="l00551"></a>00551     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; d*d; i++) {
<a name="l00552"></a>00552         TrueCovar.push_back(0.0); <span class="comment">//first fill up the container with 1</span>
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554     <span class="comment">// then fill up the diags with 1</span>
<a name="l00555"></a>00555     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; d; i++) {
<a name="l00556"></a>00556       <span class="keywordtype">int</span> pos = i*d + i;
<a name="l00557"></a>00557       TrueCovar[pos] = 1.0;
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559     
<a name="l00560"></a>00560       <span class="comment">//make a gsl matrix for the mean difference</span>
<a name="l00561"></a>00561       gsl_matrix * diffMeanMat = gsl_matrix_alloc(d, 1);
<a name="l00562"></a>00562       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00563"></a>00563         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 1; j++) {
<a name="l00564"></a>00564           gsl_matrix_set (diffMeanMat, i, j, _double(diffMean[i+1]));
<a name="l00565"></a>00565         }
<a name="l00566"></a>00566       }
<a name="l00567"></a>00567   
<a name="l00568"></a>00568       <span class="comment">// initialize matrix objects</span>
<a name="l00569"></a>00569       gsl_matrix * TrueCovarMat = gsl_matrix_alloc(d, d);
<a name="l00570"></a>00570       gsl_matrix * ActualCovarMat = gsl_matrix_alloc(d, d);
<a name="l00571"></a>00571       gsl_matrix * PMat = gsl_matrix_alloc(d, d); <span class="comment">//make this same as CovarMat first</span>
<a name="l00572"></a>00572     
<a name="l00573"></a>00573       <span class="keywordtype">int</span> k = 0; <span class="comment">//counter for RealVec</span>
<a name="l00574"></a>00574       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00575"></a>00575         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00576"></a>00576           gsl_matrix_set(ActualCovarMat, i, j, _double(ActualCovar[k])); <span class="comment">//cast to double</span>
<a name="l00577"></a>00577           gsl_matrix_set(PMat, i, j, _double(ActualCovar[k])); <span class="comment">//cast to double</span>
<a name="l00578"></a>00578           gsl_matrix_set(TrueCovarMat, i, j, _double(TrueCovar[k])); <span class="comment">//cast to double</span>
<a name="l00579"></a>00579           k++;
<a name="l00580"></a>00580         }
<a name="l00581"></a>00581       }
<a name="l00582"></a>00582     
<a name="l00583"></a>00583       <span class="comment">//add the two matrices</span>
<a name="l00584"></a>00584       gsl_matrix_add(PMat, TrueCovarMat);
<a name="l00585"></a>00585       gsl_matrix_scale(PMat, 0.5);
<a name="l00586"></a>00586       <span class="comment">//cout &lt;&lt; &quot;add the two matrices: &quot; &lt;&lt; endl;</span>
<a name="l00587"></a>00587     
<a name="l00588"></a>00588       <span class="comment">// get the determinants </span>
<a name="l00589"></a>00589       <span class="keywordtype">int</span> s;
<a name="l00590"></a>00590       gsl_permutation * p = gsl_permutation_alloc(d);
<a name="l00591"></a>00591       gsl_linalg_LU_decomp(ActualCovarMat, p, &amp;s);
<a name="l00592"></a>00592       <span class="keywordtype">double</span> detCovarMat = gsl_linalg_LU_det(ActualCovarMat, s);
<a name="l00593"></a>00593       gsl_permutation_free(p);
<a name="l00594"></a>00594     
<a name="l00595"></a>00595       <span class="keywordtype">int</span> s1;
<a name="l00596"></a>00596       gsl_permutation * p1 = gsl_permutation_alloc(d);
<a name="l00597"></a>00597       gsl_linalg_LU_decomp(TrueCovarMat, p1, &amp;s1);
<a name="l00598"></a>00598       <span class="keywordtype">double</span> detExactCovarMat = gsl_linalg_LU_det(TrueCovarMat, s1);
<a name="l00599"></a>00599       gsl_permutation_free(p1);
<a name="l00600"></a>00600     
<a name="l00601"></a>00601       <span class="keywordtype">int</span> s2;
<a name="l00602"></a>00602       gsl_permutation * p2 = gsl_permutation_alloc(d);
<a name="l00603"></a>00603       gsl_linalg_LU_decomp(PMat, p2, &amp;s2);
<a name="l00604"></a>00604       <span class="keywordtype">double</span> detPMat = gsl_linalg_LU_det(PMat, s2);
<a name="l00605"></a>00605       
<a name="l00606"></a>00606       <span class="comment">//cout &lt;&lt; detCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detExactCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; detPMat &lt;&lt; endl;</span>
<a name="l00607"></a>00607     
<a name="l00608"></a>00608       <span class="comment">//now get the inverse of P</span>
<a name="l00609"></a>00609       gsl_matrix * Pinverse = gsl_matrix_alloc(d, d); 
<a name="l00610"></a>00610       gsl_linalg_LU_invert(PMat, p2, Pinverse);
<a name="l00611"></a>00611       gsl_permutation_free(p2);
<a name="l00612"></a>00612     <span class="comment">/*</span>
<a name="l00613"></a>00613 <span class="comment">      cout &lt;&lt; &quot;PMat: &quot; &lt;&lt; endl;</span>
<a name="l00614"></a>00614 <span class="comment">      for (int i = 0; i &lt; d; i++) {</span>
<a name="l00615"></a>00615 <span class="comment">        for (int j=0; j &lt; d; j++) {</span>
<a name="l00616"></a>00616 <span class="comment">          cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(Pinverse, i, j) &lt;&lt; endl; </span>
<a name="l00617"></a>00617 <span class="comment">        }</span>
<a name="l00618"></a>00618 <span class="comment">      }</span>
<a name="l00619"></a>00619 <span class="comment">    */</span>
<a name="l00620"></a>00620       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00621"></a>00621       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00622"></a>00622       gsl_matrix * diffMeanMatTranspose = gsl_matrix_alloc(1, d);
<a name="l00623"></a>00623       gsl_matrix_transpose_memcpy(diffMeanMatTranspose, diffMeanMat);
<a name="l00624"></a>00624     
<a name="l00625"></a>00625       <span class="comment">// now convert all to rmatrix for easier computations</span>
<a name="l00626"></a>00626       rmatrix diffMeanR(0, d-1, 0, 0);
<a name="l00627"></a>00627       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00628"></a>00628         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; 1; j++) {
<a name="l00629"></a>00629           diffMeanR[i][j] = gsl_matrix_get(diffMeanMat, i, j); 
<a name="l00630"></a>00630           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMat, i, j) &lt;&lt; endl; </span>
<a name="l00631"></a>00631         }
<a name="l00632"></a>00632       }
<a name="l00633"></a>00633     
<a name="l00634"></a>00634       rmatrix diffMeanTransR(0, 0, 0, d-1);
<a name="l00635"></a>00635       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) {
<a name="l00636"></a>00636         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00637"></a>00637           diffMeanTransR[i][j] = gsl_matrix_get(diffMeanMatTranspose, i, j); 
<a name="l00638"></a>00638           <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(diffMeanMatTranspose, i, j) &lt;&lt; endl; </span>
<a name="l00639"></a>00639         }
<a name="l00640"></a>00640       }
<a name="l00641"></a>00641     
<a name="l00642"></a>00642       rmatrix PinvR(0, d-1, 0, d-1);
<a name="l00643"></a>00643       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; d; i++) {
<a name="l00644"></a>00644         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; d; j++) {
<a name="l00645"></a>00645           PinvR[i][j] = gsl_matrix_get(Pinverse, i, j); 
<a name="l00646"></a>00646         }
<a name="l00647"></a>00647       }
<a name="l00648"></a>00648     
<a name="l00649"></a>00649       <span class="comment">//free the gsl_matrices</span>
<a name="l00650"></a>00650       gsl_matrix_free(TrueCovarMat);
<a name="l00651"></a>00651       gsl_matrix_free(ActualCovarMat);
<a name="l00652"></a>00652       gsl_matrix_free(PMat);
<a name="l00653"></a>00653     
<a name="l00654"></a>00654       <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l00655"></a>00655       <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l00656"></a>00656       rmatrix MatOp = (diffMeanTransR*PinvR)*diffMeanR;
<a name="l00657"></a>00657       <span class="comment">//cout &lt;&lt; MatOp[0][0] &lt;&lt; endl;</span>
<a name="l00658"></a>00658       real DB = 1.0/8.0 * MatOp[0][0] + 0.5*log(detPMat/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(detCovarMat*detExactCovarMat));
<a name="l00659"></a>00659       cout &lt;&lt; <span class="stringliteral">&quot;DB: &quot;</span> &lt;&lt; DB &lt;&lt; endl;
<a name="l00660"></a>00660       <span class="keywordflow">if</span> (DB &lt; 0) { HDTrueActual = 0.0; }
<a name="l00661"></a>00661       <span class="keywordflow">else</span> {
<a name="l00662"></a>00662         real BC = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-DB);
<a name="l00663"></a>00663         assert(BC &gt;= 0);
<a name="l00664"></a>00664         <span class="comment">//cout &lt;&lt; &quot;BC: &quot; &lt;&lt; BC &lt;&lt; endl;</span>
<a name="l00665"></a>00665         HDTrueActual = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-BC);
<a name="l00666"></a>00666         <span class="comment">//cout &lt;&lt; &quot;HD: &quot; &lt;&lt; HDTrue &lt;&lt; endl;</span>
<a name="l00667"></a>00667         assert(HDTrueActual &gt;=0);
<a name="l00668"></a>00668       }
<a name="l00669"></a>00669     }
<a name="l00670"></a>00670     cout &lt;&lt; <span class="stringliteral">&quot;Hellinger distance: &quot;</span> &lt;&lt; HDTrueActual &lt;&lt; endl;
<a name="l00671"></a>00671   }
<a name="l00672"></a>00672 
<a name="l00673"></a>00673   
<a name="l00674"></a>00674 
<a name="l00675"></a>00675   <span class="comment">//output Hellinger distances</span>
<a name="l00676"></a>00676   <span class="keywordtype">string</span> filename;
<a name="l00677"></a>00677   filename = <span class="stringliteral">&quot;HellingerDistance&quot;</span>;
<a name="l00678"></a>00678   ostringstream stm;
<a name="l00679"></a>00679   stm &lt;&lt; dataSeed;
<a name="l00680"></a>00680   filename += stm.str();
<a name="l00681"></a>00681   filename += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00682"></a>00682   oss.open(filename.c_str());
<a name="l00683"></a>00683   oss &lt;&lt; HDTrue &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; HDActual &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; HDTrueActual &lt;&lt; endl;
<a name="l00684"></a>00684   oss &lt;&lt; flush;
<a name="l00685"></a>00685   oss.close();
<a name="l00686"></a>00686   
<a name="l00687"></a>00687 
<a name="l00688"></a>00688   <span class="comment">/*</span>
<a name="l00689"></a>00689 <span class="comment">  //optional </span>
<a name="l00690"></a>00690 <span class="comment">  string dataFileName = &quot;ActualData&quot;;</span>
<a name="l00691"></a>00691 <span class="comment">  dataFileName += stm.str(); </span>
<a name="l00692"></a>00692 <span class="comment">  dataFileName += &quot;.txt&quot;; </span>
<a name="l00693"></a>00693 <span class="comment">  oss.open(dataFileName.c_str());</span>
<a name="l00694"></a>00694 <span class="comment">  for (size_t i = 0; i &lt; n; i++) { </span>
<a name="l00695"></a>00695 <span class="comment">    for (size_t j = 1; j &lt;= d; j++) {</span>
<a name="l00696"></a>00696 <span class="comment">        oss &lt;&lt; (*actualDataPtr)[i][j] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00697"></a>00697 <span class="comment">    }</span>
<a name="l00698"></a>00698 <span class="comment">    oss &lt;&lt; &quot;\n&quot;;</span>
<a name="l00699"></a>00699 <span class="comment">    //cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l00700"></a>00700 <span class="comment">  }</span>
<a name="l00701"></a>00701 <span class="comment">  oss &lt;&lt; flush;</span>
<a name="l00702"></a>00702 <span class="comment">  oss.close();</span>
<a name="l00703"></a>00703 <span class="comment"></span>
<a name="l00704"></a>00704 <span class="comment">  cout &lt;&lt; &quot;Actual data written to  &quot; &lt;&lt; dataFileName &lt;&lt; endl;</span>
<a name="l00705"></a>00705 <span class="comment">  </span>
<a name="l00706"></a>00706 <span class="comment">  //optional </span>
<a name="l00707"></a>00707 <span class="comment">  dataFileName = &quot;MappedData&quot;;</span>
<a name="l00708"></a>00708 <span class="comment">  dataFileName += stm.str(); </span>
<a name="l00709"></a>00709 <span class="comment">  dataFileName += &quot;.txt&quot;; </span>
<a name="l00710"></a>00710 <span class="comment">  oss.open(dataFileName.c_str());</span>
<a name="l00711"></a>00711 <span class="comment">  for (size_t i = 0; i &lt; n; i++) { </span>
<a name="l00712"></a>00712 <span class="comment">    for (size_t j = 1; j &lt;= d; j++) {</span>
<a name="l00713"></a>00713 <span class="comment">        oss &lt;&lt; (*theDataPtr)[i][j] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00714"></a>00714 <span class="comment">    }</span>
<a name="l00715"></a>00715 <span class="comment">    oss &lt;&lt; &quot;\n&quot;;</span>
<a name="l00716"></a>00716 <span class="comment">    //cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l00717"></a>00717 <span class="comment">  }</span>
<a name="l00718"></a>00718 <span class="comment">  oss &lt;&lt; flush;</span>
<a name="l00719"></a>00719 <span class="comment">  oss.close();</span>
<a name="l00720"></a>00720 <span class="comment">  </span>
<a name="l00721"></a>00721 <span class="comment">  cout &lt;&lt; &quot;Estimated data written to  &quot; &lt;&lt; dataFileName &lt;&lt; endl;</span>
<a name="l00722"></a>00722 <span class="comment">  */</span>
<a name="l00723"></a>00723 
<a name="l00724"></a>00724   <span class="keyword">delete</span> estimateHist;
<a name="l00725"></a>00725   <span class="keyword">delete</span> actualHist;
<a name="l00726"></a>00726   <span class="keyword">delete</span> actualDataPtr;
<a name="l00727"></a>00727   <span class="keyword">delete</span> theDataPtr;
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <span class="keywordflow">return</span> 0;
<a name="l00730"></a>00730 } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCFunctionSimGaussian_8cpp.shtml">MCMCFunctionSimGaussian.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
