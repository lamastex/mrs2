<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AirTrafficWeather.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AirTrafficWeather_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AirTrafficWeather.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Arithmetic on trajectory enclosures.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
</div>
<p><a href="AirTrafficWeather_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AirTrafficWeather_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Arithmetic on trajectory enclosures. </p>

<p>Definition in file <a class="el" href="AirTrafficWeather_8cpp_source.shtml">AirTrafficWeather.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="AirTrafficWeather.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AirTrafficWeather_8cpp_source.shtml#l00046">46</a> of file <a class="el" href="AirTrafficWeather_8cpp_source.shtml">AirTrafficWeather.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00466">subpavings::AdaptiveHistogramVCollator::addToCollationWithVal()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00543">subpavings::AdaptiveHistogramValidation::getSubPaving()</a>, <a class="el" href="adaptivehistogramvalidation_8hpp_source.shtml#l00409">subpavings::AdaptiveHistogramValidation::insertRvectorsFromTxt()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00409">subpavings::AdaptiveHistogramVCollator::outputAccumulationToTxtTabs()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> ( argc != 2 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: AirTrafficWeather craftVol&quot;</span> &lt;&lt; endl;
    exit(0);
  }
    
    <span class="comment">//------------------------string formatting----------------------------------- </span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    
   <span class="comment">//-------------- make an Adaptive Histogram object with a specified box-----</span>
    <span class="keywordtype">double</span> mult = -1.0; <span class="comment">//linear combination idea</span>
   <span class="keywordtype">size_t</span> goodWeather = 275;
   <span class="keywordtype">size_t</span> badWeather = 406;
   
   <span class="keywordtype">int</span> d = 2; <span class="comment">// dimension of the sample data</span>
    <span class="comment">//  int d = 3; // dimension of the sample data</span>
    ivector pavingBox(d);
    <span class="comment">//for arr0222.txt</span>
    interval pavingInterval1(810, 1230);
    interval pavingInterval2(550, 1350);
    <span class="comment">//interval pavingInterval3(0,49000);</span>
    pavingBox[2] = pavingInterval1;
    pavingBox[1] = pavingInterval2;
    <span class="comment">//pavingBox[3] = pavingInterval3;</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Box is: &quot;</span> &lt;&lt; pavingBox &lt;&lt; endl;
   
  
   <span class="comment">//------------------get minimum volume--------------------------------------</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> hist(pavingBox);
   <span class="comment">//0.002</span>
   <span class="keywordtype">double</span> craftVol = atof(argv[1]); <span class="comment">//note this can be put into the for loop if we know each individual craft size</span>
   cout &lt;&lt; <span class="stringliteral">&quot;getRootBoxVol&quot;</span> &lt;&lt; endl;
   <span class="keywordtype">double</span> rootBoxVol = hist.getSubPaving()-&gt;nodeVolume();
   <span class="keywordtype">double</span> approxDepth = floor(log(rootBoxVol/craftVol)/log(2));
   <span class="keywordtype">double</span> approxMinVol = rootBoxVol/<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(2,approxDepth);
   cout &lt;&lt; <span class="stringliteral">&quot;craftVol: &quot;</span> &lt;&lt; craftVol &lt;&lt; <span class="stringliteral">&quot;\tapproxMinVol: &quot;</span> &lt;&lt; approxMinVol &lt;&lt; endl; 
 
   <span class="comment">//split on k and volume to get tightest possible enclosure</span>
   <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> splitVolCount(approxMinVol);
   
   <span class="comment">//---------------------good weather trajectories-----------------------------   </span>
   <span class="comment">//-------------get individual trajectories and add into collator----------- </span>
  vector&lt;size_t&gt; numAggGood;
  <span class="keywordtype">string</span> inputFileName = <span class="stringliteral">&quot;arrivals0222/goodWeather.txt&quot;</span>; 
   <span class="comment">// tell user which data is being used.</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
  <span class="comment">// get a count of lines in the txt file</span>
  <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
  <span class="comment">// tell user how many lines there are in the file</span>
  cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
           &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;

  <span class="comment">// read in flight ID</span>
  ifstream infile(inputFileName.c_str());
  <span class="keywordtype">string</span> flightID;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;string&gt; flights;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(inputFileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; flightID;
    flights.push_back(flightID);
  }
  flights.pop_back();

  <span class="comment">//---------------- create histograms -----------------</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> collGood;
  <span class="keywordtype">size_t</span> aggBox = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; flights.size(); i++) {
  
    clock_t start, end;
    <span class="keywordtype">double</span> timeTaken;
    start=clock();
     cout &lt;&lt; <span class="stringliteral">&quot;Getting enclosure for this trajectory: &quot;</span> &lt;&lt; endl; 
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
    vector&lt;size_t&gt; numNodes;
    successfulInsertion = myHist.insertRvectorsFromTxt(flights[i], 
                                                         numNodes, 
                                                        splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    end=clock();
    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulInsertion) {
        
        <span class="comment">/* optional output histogram</span>
<span class="comment">        string histFileName = &quot;goodHist.txt&quot;;</span>
<span class="comment">        myHist.outputToTxtTabs(histFileName);</span>
<span class="comment">        //*/</span>
        
        <span class="comment">/*get number of nodes at each split</span>
<span class="comment">        vector&lt;size_t&gt;::iterator vecIt;</span>
<span class="comment">          string fileNameCount = &quot;goodNumNodes.txt&quot;;</span>
<span class="comment">          ofstream os;</span>
<span class="comment">           os.open(fileNameCount.c_str());</span>
<span class="comment">           for (vecIt = numNodes.begin(); vecIt &lt; numNodes.end(); vecIt++) {</span>
<span class="comment">                os &lt;&lt; *vecIt &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">           }</span>
<span class="comment">           os &lt;&lt; flush;</span>
<span class="comment">           os.close();</span>
<span class="comment">           std::cout &lt;&lt; &quot;Largest count at each split output to &quot; &lt;&lt; </span>
<span class="comment">           fileNameCount &lt;&lt; std::endl;</span>
<span class="comment">           */</span>
           
           collGood.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
    }
  }
  
   <span class="comment">//-------------get individual trajectories and add into collator-----------</span>
   vector&lt;size_t&gt; numNodesBad;
     <span class="comment">//-------------get individual trajectories and add into collator----------- </span>
  vector&lt;size_t&gt; numAggBad;
  inputFileName = <span class="stringliteral">&quot;arrivals1130/badWeather.txt&quot;</span>; 
   <span class="comment">// tell user which data is being used.</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
  <span class="comment">// get a count of lines in the txt file</span>
  dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
  <span class="comment">// tell user how many lines there are in the file</span>
  cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
           &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;

  <span class="comment">// read in flight ID</span>
  ifstream infile1(inputFileName.c_str());

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;string&gt; flightsBad;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
  ifstream file1;
  file1.open(inputFileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file1 ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile1.eof() ) {
    infile1 &gt;&gt; flightID;
    flightsBad.push_back(flightID);
  }
  flightsBad.pop_back();

  <span class="comment">//---------------- create histograms -----------------</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> collBad;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; flightsBad.size(); i++) {
  
    clock_t start, end;
    <span class="keywordtype">double</span> timeTaken;
    start=clock();
     cout &lt;&lt; <span class="stringliteral">&quot;Getting enclosure for this trajectory: &quot;</span> &lt;&lt; endl; 
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
    vector&lt;size_t&gt; numNodes;
    successfulInsertion = myHist.insertRvectorsFromTxt(flightsBad[i], 
                                                         numNodes, 
                                                        splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    end=clock();
    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulInsertion) {
        
        <span class="comment">/* optional output histogram</span>
<span class="comment">        string histFileName = &quot;goodHist.txt&quot;;</span>
<span class="comment">        myHist.outputToTxtTabs(histFileName);</span>
<span class="comment">        //*/</span>
        
        <span class="comment">/*get number of nodes at each split</span>
<span class="comment">        vector&lt;size_t&gt;::iterator vecIt;</span>
<span class="comment">          string fileNameCount = &quot;goodNumNodes.txt&quot;;</span>
<span class="comment">          ofstream os;</span>
<span class="comment">           os.open(fileNameCount.c_str());</span>
<span class="comment">           for (vecIt = numNodes.begin(); vecIt &lt; numNodes.end(); vecIt++) {</span>
<span class="comment">                os &lt;&lt; *vecIt &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">           }</span>
<span class="comment">           os &lt;&lt; flush;</span>
<span class="comment">           os.close();</span>
<span class="comment">           std::cout &lt;&lt; &quot;Largest count at each split output to &quot; &lt;&lt; </span>
<span class="comment">           fileNameCount &lt;&lt; std::endl;</span>
<span class="comment">           */</span>
           
           collBad.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
    }
  }

  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> diffColl;
  diffColl = collGood-collBad;
  diffColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b" title="Output the accumulated data over the collation to a txt file.">outputAccumulationToTxtTabs</a>(<span class="stringliteral">&quot;AccumDiff.txt&quot;</span>);
  
  <span class="keywordflow">return</span> 0;

} <span class="comment">// end of air traffic example program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AirTrafficWeather_8cpp.shtml">AirTrafficWeather.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
