<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Basic C-XSC Examples</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('cxscexamples.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Basic C-XSC Examples </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>To learn how to use the C-XSC class library and the GSL you can read the page <a class="el" href="cxscexamples.shtml">Basic C-XSC Examples</a> and follow the examples described there. For a proper introduction to C-XSC and the accompanying Toolbox with more sophisticated applications see the <a href="http://www.math.uni-wuppertal.de/wrswt/xsc/cxsc/apidoc/html/index.html">C-XSC Documentation</a>.</p>
<p>On this page we will try to show you how to use the C-XSC class library with some short and simple examples.</p>
<ul>
<li><a class="el" href="cxscexamples.shtml#cxscexamples_sec_ex1">Example 1 - Intervals in C-XSC</a></li>
<li><a class="el" href="cxscexamples.shtml#cxscexamples_sec_ex2">Example 2 - Multi-precision Intervals in C-XSC</a></li>
<li><a class="el" href="cxscexamples.shtml#cxscexamples_sec_ex3">Example 3 - Mean in GSL and Dot Precision Accumulators in C-XSC</a></li>
<li><a class="el" href="cxscexamples.shtml#cxscexamples_sec_ex4">Example 4 - Range Enclosure with Automatic Differentiation</a></li>
<li><a class="el" href="cxscexamples.shtml#cxscexamples_sec_ex5">Example 5 - Global Optimisation for Maximum Likelihood</a></li>
</ul>
<h2><a class="anchor" id="cxscexamples_sec_ex1"></a>
Example 1 - Intervals in C-XSC</h2>
<p>In the following simple program we use C-XSC intervals to do basic arithmetic operations and output the results:</p>
<p><div class="fragment"><pre class="fragment"><span class="preprocessor">#include &quot;interval.hpp&quot;</span>  <span class="comment">// include interval arithmetic in C-XSC</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>      <span class="comment">// include standard Input Output STREAM </span>
<span class="keyword">using namespace </span>cxsc;    
<span class="keyword">using namespace </span>std;

<span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
{
  interval a, b;            <span class="comment">// Standard intervals     </span>
  a = 1.0;                  <span class="comment">// a   = [1.0,1.0]       </span>
  <span class="stringliteral">&quot;[1, 2]&quot;</span> &gt;&gt; b;          <span class="comment">// string to interval conversion b   = [1.0,2.0]        </span>
  cout &lt;&lt; <span class="stringliteral">&quot;a - a = &quot;</span> &lt;&lt; a-a &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;b - b = &quot;</span> &lt;&lt; b-b &lt;&lt; endl;
}

<span class="comment">/* --------------------------- Output ------------------------------</span>
<span class="comment">$ ./example </span>
<span class="comment">a - a = [ -0.000000,  0.000000]</span>
<span class="comment">b - b = [ -1.000000,  1.000000]</span>
<span class="comment">------------------------------------------------------------------*/</span>
</pre></div></p>
<p>Let's start examining the code line by line. The first line:</p>
<p><div class="fragment"><pre class="fragment"><span class="preprocessor">#include &quot;interval.hpp&quot;</span>  <span class="comment">// include interval arithmetic in C-XSC</span>
</pre></div></p>
<p>includes the basic interval class of C-XSC in the program. The second line:</p>
<p><div class="fragment"><pre class="fragment"><span class="preprocessor">#include &lt;iostream&gt;</span>      <span class="comment">// include standard Input Output STREAM </span>
</pre></div></p>
<p>includes the standard iostream library for basic input and output operations. The next two lines inform the compiler about C-XSC's namespace cxsc and the standard library namespace std. The namespace cxsc is where all of C-XSC's classes and methods are stored. This allows us to use C-XSC classes without having to fully qualify their identifiers.</p>
<p><div class="fragment"><pre class="fragment"><span class="keyword">using namespace </span>cxsc;    
<span class="keyword">using namespace </span>std;
</pre></div></p>
<p>Next we declare two interval variables and assign adequate values in the following lines.</p>
<p><div class="fragment"><pre class="fragment">  interval a, b;            <span class="comment">// Standard intervals     </span>
  a = 1.0;                  <span class="comment">// a   = [1.0,1.0]       </span>
  <span class="stringliteral">&quot;[1, 2]&quot;</span> &gt;&gt; b;          <span class="comment">// string to interval conversion b   = [1.0,2.0]        </span>
</pre></div></p>
<p>Finally, we print out the result for our desired subtractions.</p>
<p><div class="fragment"><pre class="fragment">  cout &lt;&lt; <span class="stringliteral">&quot;a - a = &quot;</span> &lt;&lt; a-a &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;b - b = &quot;</span> &lt;&lt; b-b &lt;&lt; endl;
</pre></div></p>
<p>To compile the program we edit the Makefile in the examples directory. First we set the 'PROGRAM=example' and the PREFIX to the appropriate directory that contains the C-XSC includes and lib directories. Then we type 'make all' in a Unix system to compile the program.</p>
<h2><a class="anchor" id="cxscexamples_sec_ex2"></a>
Example 2 - Multi-precision Intervals in C-XSC</h2>
<p><div class="fragment"><pre class="fragment"><span class="preprocessor">#include &quot;l_interval.hpp&quot;</span>  <span class="comment">// interval staggered arithmetic in C-XSC</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="keyword">using namespace </span>cxsc;
<span class="keyword">using namespace </span>std;

<span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>() 
{
  l_interval a, b;         <span class="comment">// Multiple-precision intervals in C-XSC</span>
  stagprec = 2;            <span class="comment">// global integer variable      </span>
  cout &lt;&lt; SetDotPrecision(16*stagprec, 16*stagprec-3) &lt;&lt; RndNext;
  <span class="comment">// I/O for variables of type l_interval is done using</span>
  <span class="comment">// the long accumulator (i.e. a dotprecision variable)   </span>

  a = 1.0;                  <span class="comment">// a   = [1.0,1.0]       </span>
  <span class="stringliteral">&quot;[1, 2]&quot;</span> &gt;&gt; b;          <span class="comment">// string to interval conversion b   = [1.0,2.0]        </span>
  cout &lt;&lt; <span class="stringliteral">&quot;a - a = &quot;</span> &lt;&lt; a-a &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;b - b = &quot;</span> &lt;&lt; b-b &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;a/b = &quot;</span> &lt;&lt; a/b &lt;&lt; endl;  
}

<span class="comment">/* --------------------------- Output ------------------------------</span>
<span class="comment">$ ./lexample </span>
<span class="comment">a - a = [ 0.00000000000000000000000000000, 0.00000000000000000000000000000]</span>
<span class="comment">b - b = [-1.00000000000000000000000000000, 1.00000000000000000000000000000]</span>
<span class="comment">a/b = [ 0.50000000000000000000000000000, 1.00000000000000000000000000000]</span>
<span class="comment">------------------------------------------------------------------*/</span>
</pre></div></p>
<h2><a class="anchor" id="cxscexamples_sec_ex3"></a>
Example 3 - Mean in GSL and Dot Precision Accumulators in C-XSC</h2>
<h2><a class="anchor" id="cxscexamples_sec_ex4"></a>
Example 4 - Range Enclosure with Automatic Differentiation</h2>
<h2><a class="anchor" id="cxscexamples_sec_ex5"></a>
Example 5 - Global Optimisation for Maximum Likelihood</h2>
</div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
