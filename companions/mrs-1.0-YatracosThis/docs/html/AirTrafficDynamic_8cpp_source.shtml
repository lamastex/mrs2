<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AirTrafficDynamic.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AirTrafficDynamic_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AirTrafficDynamic.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AirTrafficDynamic_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00024"></a>00024 <span class="comment">// to use std::vector</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="comment">// to use iterators</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00028"></a>00028 <span class="comment">// to use valarray</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include&lt;map&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>cxsc;
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>std;
<a name="l00042"></a>00042 
<a name="l00043"></a><a class="code" href="AirTrafficDynamic_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00043</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046    <span class="comment">//get individual trajectories and add into collator </span>
<a name="l00047"></a>00047   <span class="keywordtype">size_t</span> starttime = atoi(argv[2]);
<a name="l00048"></a>00048   <span class="keywordtype">size_t</span> totalTimeBlock = atoi(argv[3]);
<a name="l00049"></a>00049   <span class="keywordtype">size_t</span> totalFlight = atoi(argv[4]);
<a name="l00050"></a>00050   
<a name="l00051"></a>00051   <span class="comment">//------------------------string formatting-------------------------------- </span>
<a name="l00052"></a>00052     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00053"></a>00053     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00054"></a>00054     oss.precision(5);
<a name="l00055"></a>00055     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00056"></a>00056     
<a name="l00057"></a>00057    <span class="comment">//-------------- make an Adaptive Histogram object with a specified box----  </span>
<a name="l00058"></a>00058    
<a name="l00059"></a>00059    <span class="keywordtype">int</span> d = atoi(argv[5]); <span class="comment">// dimension of the sample data</span>
<a name="l00060"></a>00060     ivector pavingBox(d);
<a name="l00061"></a>00061     
<a name="l00062"></a>00062     <span class="comment">/*</span>
<a name="l00063"></a>00063 <span class="comment">   interval pavingInterval1(70, 750); //lat</span>
<a name="l00064"></a>00064 <span class="comment">    interval pavingInterval2(50, 640); //long</span>
<a name="l00065"></a>00065 <span class="comment">    pavingBox[1] = pavingInterval1;</span>
<a name="l00066"></a>00066 <span class="comment">    pavingBox[2] = pavingInterval2;</span>
<a name="l00067"></a>00067 <span class="comment">    </span>
<a name="l00068"></a>00068 <span class="comment">   if (d==3) {</span>
<a name="l00069"></a>00069 <span class="comment">    interval pavingInterval3(300,47000); //alt</span>
<a name="l00070"></a>00070 <span class="comment">    pavingBox[3] = pavingInterval3;</span>
<a name="l00071"></a>00071 <span class="comment">    }</span>
<a name="l00072"></a>00072 <span class="comment">   */</span>
<a name="l00073"></a>00073    
<a name="l00074"></a>00074    
<a name="l00075"></a>00075    interval pavingInterval1(550, 1350);
<a name="l00076"></a>00076    interval pavingInterval2(810, 1230);
<a name="l00077"></a>00077     pavingBox[1] = pavingInterval1;
<a name="l00078"></a>00078     pavingBox[2] = pavingInterval2;
<a name="l00079"></a>00079    
<a name="l00080"></a>00080     
<a name="l00081"></a>00081     <span class="comment">// /*</span>
<a name="l00082"></a>00082    interval pavingInterval(0,1);
<a name="l00083"></a>00083    pavingBox[1] = pavingInterval;
<a name="l00084"></a>00084    <span class="comment">//*/</span>
<a name="l00085"></a>00085   
<a name="l00086"></a>00086    cout &lt;&lt; <span class="stringliteral">&quot;Box is: &quot;</span> &lt;&lt; pavingBox &lt;&lt; endl;
<a name="l00087"></a>00087    
<a name="l00088"></a>00088    <span class="comment">//------------------get minimum volume--------------------------------------</span>
<a name="l00089"></a>00089    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> hist(pavingBox);
<a name="l00090"></a>00090    <span class="comment">//0.1</span>
<a name="l00091"></a>00091    <span class="keywordtype">double</span> craftVol = atof(argv[1]); <span class="comment">//note this can be put into the for loop if we know each individual craft size</span>
<a name="l00092"></a>00092    cout &lt;&lt; <span class="stringliteral">&quot;getRootBoxVol&quot;</span> &lt;&lt; endl;
<a name="l00093"></a>00093    <span class="keywordtype">double</span> rootBoxVol = hist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00094"></a>00094    <span class="keywordtype">double</span> approxDepth = floor(log(rootBoxVol/craftVol)/log(2));
<a name="l00095"></a>00095    <span class="keywordtype">double</span> approxMinVol = rootBoxVol/<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(2,approxDepth);
<a name="l00096"></a>00096    cout &lt;&lt; <span class="stringliteral">&quot;craftVol: &quot;</span> &lt;&lt; craftVol &lt;&lt; <span class="stringliteral">&quot;\tapproxMinVol: &quot;</span> &lt;&lt; approxMinVol &lt;&lt; endl; 
<a name="l00097"></a>00097  
<a name="l00098"></a>00098    <span class="comment">//split on k and volume to get tightest possible enclosure</span>
<a name="l00099"></a>00099    <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> splitVolCount(approxMinVol);
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   <span class="comment">//vector to store total number of nodes at each spaceColl</span>
<a name="l00102"></a>00102   vector&lt;size_t&gt; numAgg;
<a name="l00103"></a>00103   vector&lt;double&gt; timings;
<a name="l00104"></a>00104   <span class="comment">//create totalTimeBlock collator objects</span>
<a name="l00105"></a>00105   <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> currColl;
<a name="l00106"></a>00106   <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> updColl;
<a name="l00107"></a>00107     
<a name="l00108"></a>00108   <span class="comment">//create AdaptiveHistogramValidation objects</span>
<a name="l00109"></a>00109    vector&lt;AdaptiveHistogramValidation&gt; histVec; 
<a name="l00110"></a>00110    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; totalFlight; i++) {
<a name="l00111"></a>00111     cout &lt;&lt; i &lt;&lt; endl;
<a name="l00112"></a>00112     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
<a name="l00113"></a>00113     histVec.push_back(myHist);
<a name="l00114"></a>00114   }
<a name="l00115"></a>00115   
<a name="l00116"></a>00116   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> t=starttime; t &lt; totalTimeBlock; t++) {
<a name="l00117"></a>00117     clock_t start, end;
<a name="l00118"></a>00118     
<a name="l00119"></a>00119     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> spaceColl;
<a name="l00120"></a>00120     std::ostringstream stm2;
<a name="l00121"></a>00121     stm2 &lt;&lt; t;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     start = clock();
<a name="l00124"></a>00124     <span class="keywordtype">int</span> checkHist = 0;
<a name="l00125"></a>00125     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= totalFlight; j++) {
<a name="l00126"></a>00126       <span class="comment">//name of file to be read in</span>
<a name="l00127"></a>00127       std::ostringstream stm1;
<a name="l00128"></a>00128       stm1 &lt;&lt; j;
<a name="l00129"></a>00129       <span class="keywordtype">string</span> inputFileName = <span class="stringliteral">&quot;Time&quot;</span>; 
<a name="l00130"></a>00130       inputFileName += stm2.str();
<a name="l00131"></a>00131       inputFileName += <span class="stringliteral">&quot;Flight&quot;</span>;
<a name="l00132"></a>00132       inputFileName += stm1.str();
<a name="l00133"></a>00133       inputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00134"></a>00134       
<a name="l00135"></a>00135     <span class="comment">/*  if (d==2) { inputFileName += &quot;xy.txt&quot;; }</span>
<a name="l00136"></a>00136 <span class="comment">       else if (d==3) { inputFileName += &quot;xyAlt.txt&quot;; }</span>
<a name="l00137"></a>00137 <span class="comment">        */</span>
<a name="l00138"></a>00138 
<a name="l00139"></a>00139       <span class="comment">// tell user which data is being used.</span>
<a name="l00140"></a>00140       cout &lt;&lt; <span class="stringliteral">&quot;--------------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00141"></a>00141       cout &lt;&lt; <span class="stringliteral">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; endl;
<a name="l00142"></a>00142       cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
<a name="l00143"></a>00143       <span class="comment">// get a count of lines in the txt file</span>
<a name="l00144"></a>00144       <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
<a name="l00145"></a>00145       <span class="comment">// tell user how many lines there are in the file</span>
<a name="l00146"></a>00146       cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
<a name="l00147"></a>00147           &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;
<a name="l00148"></a>00148       <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
<a name="l00149"></a>00149       myHist = histVec[j-1];
<a name="l00150"></a>00150       
<a name="l00151"></a>00151       cout &lt;&lt; <span class="stringliteral">&quot;inserting and constructing histogram:&quot;</span> &lt;&lt; endl;
<a name="l00152"></a>00152       vector&lt;size_t&gt; numNodes;
<a name="l00153"></a>00153       successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(inputFileName, 
<a name="l00154"></a>00154                     numNodes, splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156       <span class="comment">/* optional</span>
<a name="l00157"></a>00157 <span class="comment">      string histFileName;</span>
<a name="l00158"></a>00158 <span class="comment">      histFileName = &quot;HistTime&quot;;</span>
<a name="l00159"></a>00159 <span class="comment">      histFileName += stm2.str();</span>
<a name="l00160"></a>00160 <span class="comment">      //histFileName += &quot;Flight&quot;;</span>
<a name="l00161"></a>00161 <span class="comment">      //histFileName += stm1.str();</span>
<a name="l00162"></a>00162 <span class="comment">      histFileName += &quot;.txt&quot;;</span>
<a name="l00163"></a>00163 <span class="comment">      myHist.outputToTxtTabs(histFileName);</span>
<a name="l00164"></a>00164 <span class="comment">       */</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166       <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00167"></a>00167         histVec[j-1] = myHist;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         <span class="keywordtype">size_t</span> aggBox = 0;
<a name="l00170"></a>00170         cout &lt;&lt; <span class="stringliteral">&quot;adding myHist into collator&quot;</span> &lt;&lt; endl;
<a name="l00171"></a>00171         updColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
<a name="l00172"></a>00172       } <span class="comment">// end of successful insertion</span>
<a name="l00173"></a>00173       <span class="keywordflow">else</span> { 
<a name="l00174"></a>00174         checkHist++; 
<a name="l00175"></a>00175         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> newHist(pavingBox);
<a name="l00176"></a>00176         histVec[j-1] = newHist;
<a name="l00177"></a>00177       }
<a name="l00178"></a>00178     } <span class="comment">// end of flights</span>
<a name="l00179"></a>00179 
<a name="l00180"></a>00180     <span class="comment">/* optional</span>
<a name="l00181"></a>00181 <span class="comment">    string collFileName = &quot;updColl&quot;;</span>
<a name="l00182"></a>00182 <span class="comment">    collFileName += stm2.str();</span>
<a name="l00183"></a>00183 <span class="comment">    collFileName += &quot;.txt&quot;;</span>
<a name="l00184"></a>00184 <span class="comment">    updColl.outputAccumulationToTxtTabs(collFileName);</span>
<a name="l00185"></a>00185 <span class="comment">    */</span>
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="keywordflow">if</span> (t==starttime) { 
<a name="l00188"></a>00188       <span class="keywordflow">if</span> ( (checkHist &lt; totalFlight) ){
<a name="l00189"></a>00189         cout &lt;&lt; <span class="stringliteral">&quot;get space coll at time &quot;</span> &lt;&lt; t &lt;&lt; endl;
<a name="l00190"></a>00190         currColl = updColl; 
<a name="l00191"></a>00191         currColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">makeMinimal</a>();
<a name="l00192"></a>00192         <span class="comment">//string currCollFileName;</span>
<a name="l00193"></a>00193         <span class="comment">//currCollFileName = &quot;spaceColl&quot;;</span>
<a name="l00194"></a>00194         <span class="comment">//currCollFileName += stm2.str();</span>
<a name="l00195"></a>00195         <span class="comment">//currCollFileName += &quot;.txt&quot;;</span>
<a name="l00196"></a>00196         <span class="comment">//currColl.outputAccumulationToTxtTabs(currCollFileName);</span>
<a name="l00197"></a>00197         <span class="comment">//string spaceCollFileName;</span>
<a name="l00198"></a>00198         <span class="comment">//spaceCollFileName = &quot;spaceColl&quot;;</span>
<a name="l00199"></a>00199         <span class="comment">//spaceCollFileName += stm2.str();</span>
<a name="l00200"></a>00200         <span class="comment">//spaceCollFileName += &quot;.txt&quot;;</span>
<a name="l00201"></a>00201         <span class="comment">//currColl.outputAccumulationToTxtTabs(spaceCollFileName);</span>
<a name="l00202"></a>00202         numAgg.push_back(currColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">getTotalNodes</a>());
<a name="l00203"></a>00203       }
<a name="l00204"></a>00204       <span class="keywordflow">else</span> { starttime++; }
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206     
<a name="l00207"></a>00207     <span class="keywordflow">else</span> { <span class="comment">// ( t &gt; starttime) </span>
<a name="l00208"></a>00208       cout &lt;&lt; <span class="stringliteral">&quot;get space coll at time &quot;</span> &lt;&lt; t &lt;&lt; endl;
<a name="l00209"></a>00209       cout &lt;&lt; <span class="stringliteral">&quot;getDifference&quot;</span> &lt;&lt; endl;
<a name="l00210"></a>00210       spaceColl = updColl - currColl;
<a name="l00211"></a>00211       <span class="comment">//string diffCollFileName;</span>
<a name="l00212"></a>00212       <span class="comment">//diffCollFileName = &quot;diffColl&quot;;</span>
<a name="l00213"></a>00213       <span class="comment">//diffCollFileName += stm2.str();</span>
<a name="l00214"></a>00214       <span class="comment">//diffCollFileName += &quot;.txt&quot;;</span>
<a name="l00215"></a>00215       <span class="comment">//spaceColl.outputToTxtTabs(&quot;diffCollInd.txt&quot;);</span>
<a name="l00216"></a>00216       <span class="comment">//spaceColl.outputAccumulationToTxtTabs(diffCollFileName);</span>
<a name="l00217"></a>00217             
<a name="l00218"></a>00218       cout &lt;&lt; <span class="stringliteral">&quot;Make Minimal:&quot;</span> &lt;&lt; endl;
<a name="l00219"></a>00219       spaceColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">makeMinimal</a>(); <span class="comment">// this collator is the structure we want</span>
<a name="l00220"></a>00220       numAgg.push_back(spaceColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">getTotalNodes</a>());
<a name="l00221"></a>00221       <span class="comment">//output this collator</span>
<a name="l00222"></a>00222       <span class="comment">//string spaceCollFileName;</span>
<a name="l00223"></a>00223       <span class="comment">//spaceCollFileName = &quot;spaceColl&quot;;</span>
<a name="l00224"></a>00224       <span class="comment">//spaceCollFileName += stm2.str();</span>
<a name="l00225"></a>00225       <span class="comment">//spaceCollFileName += &quot;.txt&quot;;</span>
<a name="l00226"></a>00226       <span class="comment">//spaceColl.outputAccumulationToTxtTabs(spaceCollFileName);</span>
<a name="l00227"></a>00227             
<a name="l00228"></a>00228       <span class="comment">//only want the summary of the last column</span>
<a name="l00229"></a>00229       <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> minimalColl(spaceColl, 2);
<a name="l00230"></a>00230       currColl = minimalColl;
<a name="l00231"></a>00231       <span class="comment">//string currCollFileName;</span>
<a name="l00232"></a>00232       <span class="comment">//currCollFileName = &quot;currColl&quot;;</span>
<a name="l00233"></a>00233       <span class="comment">//currCollFileName += stm2.str();</span>
<a name="l00234"></a>00234       <span class="comment">//currCollFileName += &quot;.txt&quot;;</span>
<a name="l00235"></a>00235       <span class="comment">//currColl.outputAccumulationToTxtTabs(currCollFileName);</span>
<a name="l00236"></a>00236       updColl = minimalColl;
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238     end = clock();
<a name="l00239"></a>00239     <span class="keywordtype">double</span> timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00240"></a>00240     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00241"></a>00241     timings.push_back(timing);  
<a name="l00242"></a>00242     cout &lt;&lt; <span class="stringliteral">&quot;**************time &quot;</span> &lt;&lt; t &lt;&lt; <span class="stringliteral">&quot; done****************&quot;</span> &lt;&lt; endl;
<a name="l00243"></a>00243   } <span class="comment">// end of time</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     vector&lt;size_t&gt;::iterator vecIt;
<a name="l00247"></a>00247       <span class="keywordtype">string</span> fileNameCount = <span class="stringliteral">&quot;NumAgg.txt&quot;</span>;
<a name="l00248"></a>00248     ofstream os1;
<a name="l00249"></a>00249       os1.open(fileNameCount.c_str());
<a name="l00250"></a>00250       <span class="keywordflow">for</span> (vecIt = numAgg.begin(); vecIt &lt; numAgg.end(); vecIt++) {
<a name="l00251"></a>00251          os1 &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00252"></a>00252       }
<a name="l00253"></a>00253       os1 &lt;&lt; flush;
<a name="l00254"></a>00254       os1.close();
<a name="l00255"></a>00255     
<a name="l00256"></a>00256     vector&lt;double&gt;::iterator It;
<a name="l00257"></a>00257       fileNameCount = <span class="stringliteral">&quot;TimesDynamic.txt&quot;</span>;
<a name="l00258"></a>00258       os1.open(fileNameCount.c_str());
<a name="l00259"></a>00259   os1 &lt;&lt; starttime &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00260"></a>00260       <span class="keywordflow">for</span> (It = timings.begin(); It &lt; timings.end(); It++) {
<a name="l00261"></a>00261          os1 &lt;&lt; *It &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263       os1 &lt;&lt; flush;
<a name="l00264"></a>00264       os1.close();
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   <span class="keywordflow">return</span> 0;
<a name="l00267"></a>00267 } <span class="comment">// end of air traffic example program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AirTrafficDynamic_8cpp.shtml">AirTrafficDynamic.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
