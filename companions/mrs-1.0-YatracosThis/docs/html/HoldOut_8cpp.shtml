<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOut.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOut_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">HoldOut.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Hold out estimation.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="HoldOut_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOut_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Hold out estimation. </p>

<p>Definition in file <a class="el" href="HoldOut_8cpp_source.shtml">HoldOut.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="HoldOut.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOut_8cpp_source.shtml#l00039">39</a> of file <a class="el" href="HoldOut_8cpp_source.shtml">HoldOut.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00709">subpavings::AdaptiveHistogramValidation::insertFromRVecForHoldOut()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">subpavings::AdaptiveHistogramValidation::prioritySplitAndEstimate()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
  <span class="keywordtype">int</span> shape = atoi(argv[3]);
  <span class="keywordtype">int</span> hist = atoi(argv[5]); <span class="comment">//the hist-th histogram</span>
  <span class="keywordtype">int</span> maxCheck = atoi(argv[6]); <span class="comment">//number of checks for successive error increase in MDE</span>
   
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream os;         <span class="comment">// ofstream object</span>
   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   os.precision(5);
    
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   <span class="keywordtype">long</span> s = time (NULL) * getpid();
   gsl_rng_set(r, s);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="keywordtype">size_t</span> PartSize;
  
   <span class="comment">// mixture shape</span>
   <span class="keywordtype">string</span> mixShape;
  <span class="keywordflow">if</span> (shape == 1) { mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( shape == 2) { mixShape = <span class="stringliteral">&quot;3,3,2,1&quot;</span>; }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==3 ) { mixShape = <span class="stringliteral">&quot;3,4,4, 2, 2, 3, 3&quot;</span>; } 
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==4) {
    mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }       
  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture      </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
   myPart.getSubPaving()-&gt;getLeaves(Pleaves); <span class="comment">// fill the container</span>
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
      Pboxes.push_back((*it)-&gt;getBox());
   }
  PartSize = Pboxes.size();
  <span class="comment">//cout &lt;&lt; &quot;Partition size:&quot; &lt;&lt; PartSize &lt;&lt; endl;</span>
    
  <span class="comment">// cout &lt;&lt; &quot;Generating data: &quot; &lt;&lt; endl;</span>
   <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
   }  <span class="comment">// data  should be in theData</span>
    
   <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
   <span class="comment">// indicators</span>
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
  
    <span class="comment">//maximum number of points in each leaf box        </span>
    <span class="keywordtype">int</span> finalK = atoi(argv[4]);;
    <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
       
    <span class="comment">// now split with priority queue</span>
    <span class="comment">// Stopping Criteria: critCount</span>
    <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
    <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);
    <span class="keywordtype">size_t</span> finalLeaves = 32;
   <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTEV</a>  critLeaves(finalLeaves);
  
   cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Running hold out estimation...&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Max k is: &quot;</span> &lt;&lt; finalK &lt;&lt; endl; 
    cout &lt;&lt; <span class="stringliteral">&quot;Performing hold-out estimation: &quot;</span> &lt;&lt; endl;
   
    <span class="comment">// Put the data from the container into the histogram  </span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal(pavingBox);
    <span class="keywordtype">int</span> holdOutCount = int(n*0.3);   
    successfulInsertion = myHistVal.insertFromRVecForHoldOut(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
      &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
 
    <span class="comment">// clock</span>
       clock_t start, end;
       <span class="keywordtype">double</span> timing; 
    
   <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
      
     <span class="keywordtype">string</span> timeFile = <span class="stringliteral">&quot;Times.txt&quot;</span>;
     vector&lt;double&gt; times;
     
  <span class="comment">//==============MDEAll and STAll==============================//      </span>
      <span class="comment">//start the hold out estimation</span>
      <span class="comment">//with stopping criteria</span>
      <span class="keywordtype">bool</span> stopCrit = <span class="keyword">true</span>;
     cout &lt;&lt; <span class="stringliteral">&quot;------Running MDEAll with stopping criteria-----------&quot;</span> &lt;&lt; endl;
    <span class="keywordtype">int</span> method = 2;
    start = clock();
      <span class="comment">//create an AdaptiveHistogramCollator object</span>
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> collStop; 
      <span class="comment">//maximum number of leavef nodes allowed in the PQ and MDE</span>
    <span class="keywordtype">double</span> beta = 0.95;
    <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, beta));
    collStop = myHistVal.prioritySplitAndEstimate(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                           0, 0.0, stopCrit, myPart, method, hist, maxLeafNodes, maxCheck);
      end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    times.push_back(timing);

    <span class="comment">/*</span>
<span class="comment">    //without stopping criteria</span>
<span class="comment">      stopCrit = false;</span>
<span class="comment">     cout &lt;&lt; &quot;\n------Running MDEAll without stopping criteria-----------&quot; &lt;&lt; endl;</span>
<span class="comment">    start = clock();</span>
<span class="comment">    //create an AdaptiveHistogramCollator object</span>
<span class="comment">      AdaptiveHistogramVCollator collNoStop; </span>
<span class="comment">     AdaptiveHistogramValidation myHistValNoStop(pavingBox);</span>
<span class="comment">     successfulInsertion = myHistValNoStop.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment"> </span>
<span class="comment">    collNoStop = myHistValNoStop.prioritySplitAndEstimate(nodeCompCount, critCount, NOLOG, </span>
<span class="comment">                           0, 0.0, stopCrit, myPart, method);                   </span>
<span class="comment">      end = clock();  </span>
<span class="comment">    timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">    cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment">    times.push_back(timing);  </span>
<span class="comment">    */</span>
  <span class="comment">//===============end of MDE and STAll======================================//</span>
       
    
  <span class="comment">//output timings  </span>
  os.open(timeFile.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; times.size(); i++) {
    os &lt;&lt; times[i] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();
    
  } <span class="comment">// end of successful insertion  </span>
  
  <span class="keywordflow">return</span> 0; 
} <span class="comment">// end of uniform mixture test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOut_8cpp.shtml">HoldOut.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
