<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOutUniform.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOutUniform_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">HoldOutUniform.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Hold out estimation for uniform (or uniform mixtures).  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="HoldOutUniform_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutUniform_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Hold out estimation for uniform (or uniform mixtures). </p>

<p>Definition in file <a class="el" href="HoldOutUniform_8cpp_source.shtml">HoldOutUniform.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="HoldOutUniform.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutUniform_8cpp_source.shtml#l00038">38</a> of file <a class="el" href="HoldOutUniform_8cpp_source.shtml">HoldOutUniform.cpp</a>.</p>

<p>References <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
   
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
    
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   <span class="keywordtype">long</span> s = time (NULL) * getpid();
   gsl_rng_set(r, s);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="keywordtype">size_t</span> PartSize;
  
   <span class="keywordtype">bool</span> Mixture_bool = <span class="keyword">true</span>;
  <span class="comment">//if Mixture_bool == false, true density = 1</span>
  <span class="keywordtype">double</span> trueF=1;
  
   vector&lt;int&gt; mixShapeInt;
   <span class="keywordflow">if</span> (Mixture_bool) {
      <span class="comment">// mixture shape</span>
  <span class="comment">//   string mixShape = &quot;2,2,1&quot;;</span>
    <span class="comment">//string mixShape = &quot;1,1&quot;;</span>
    <span class="comment">//string mixShape = &quot;3,3,2,1&quot;;</span>
    <span class="keywordtype">string</span> mixShape = <span class="stringliteral">&quot;3,4,4, 2, 2, 3, 3&quot;</span>;      
    myPart.splitToShape(mixShape);<span class="comment">// uniform mixture      </span>
      <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
      <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
      myPart.getSubPaving()-&gt;getLeaves(Pleaves); <span class="comment">// fill the container</span>
      <span class="comment">// container is filled by reading leaves off tree from left to right</span>
      <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
         Pboxes.push_back((*it)-&gt;getBox());
      }
    PartSize = Pboxes.size();
    cout &lt;&lt; PartSize &lt;&lt; endl;
    
  
   } <span class="comment">// end of Mixture_bool == true</span>
  
  
   <span class="comment">//----end of data generating partition----------------------------------------</span>
     <span class="comment">/*</span>
<span class="comment">    cout &lt;&lt; &quot;Generating data: &quot; &lt;&lt; endl;</span>
<span class="comment">     // data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<span class="comment">     RVecData theData;   </span>
<span class="comment">     for (int i = 0; i &lt; n; i++) {</span>
<span class="comment">            rvector thisrv(d);</span>
<span class="comment">            if(Mixture_bool) {</span>
<span class="comment">              size_t RndBoxNum = floor(PartSize*gsl_rng_uniform(r));</span>
<span class="comment">              //cout &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
<span class="comment">              thisrv = DrawUnifBox(r,Pboxes[RndBoxNum]);</span>
<span class="comment">            }</span>
<span class="comment">            else {</span>
<span class="comment">              for(int i=1; i &lt;= d; i++) {</span>
<span class="comment">                  thisrv[i]  = gsl_rng_uniform(r);</span>
<span class="comment">              }</span>
<span class="comment">            }</span>
<span class="comment">            // put points generated into container</span>
<span class="comment">            //cout &lt;&lt; thisrv;</span>
<span class="comment">            theData.push_back(thisrv);</span>
<span class="comment">      }  // data  should be in theData</span>
<span class="comment">    </span>
<span class="comment">    //==============start priorityStageSplit=====================================</span>
<span class="comment">    // indicators</span>
<span class="comment">    bool successfulInsertion = false;</span>
<span class="comment">  </span>
<span class="comment">    //maximum number of points in each leaf box        </span>
<span class="comment">    int finalK = 1;</span>
<span class="comment">    SplitNever sn;</span>
<span class="comment">       </span>
<span class="comment">    // now split with priority queue</span>
<span class="comment">    // Stopping Criteria: critCount</span>
<span class="comment">    CompCountVal nodeCompCount;</span>
<span class="comment">    CritLargestCount_LTEV critCount(finalK);</span>
<span class="comment">    cout &lt;&lt; &quot;========================================================&quot; &lt;&lt; endl;</span>
<span class="comment">    cout &lt;&lt; &quot;Running hold out estimation for a uniform mixture distribution...&quot; &lt;&lt; endl;</span>
<span class="comment">    cout &lt;&lt; &quot;Max k is: &quot; &lt;&lt; finalK &lt;&lt; endl; </span>
<span class="comment">    cout &lt;&lt; &quot;Performing hold-out estimation: &quot; &lt;&lt; endl;</span>
<span class="comment">   </span>
<span class="comment">    // Put the data from the container into the histogram  </span>
<span class="comment">    AdaptiveHistogramValidation myHistVal(pavingBox);</span>
<span class="comment">    int holdOutCount = int(n*1.0/(3.0));   </span>
<span class="comment">    successfulInsertion = myHistVal.insertFromRVecForHoldOut(theData, sn, holdOutCount, NOLOG);</span>
<span class="comment"> </span>
<span class="comment">    /* //optional output for counters in leaf boxes</span>
<span class="comment">  SPSVnodePtrs leaves; // set up empty container for leaf node pointers</span>
<span class="comment">  SPSVnodePtrsItr it; // and an iterator over the container</span>
<span class="comment">  myHist.getSubPaving()-&gt;getLeaves(leaves); // fill the container</span>
<span class="comment">  // container is filled by reading leaves off tree from left to right</span>
<span class="comment">  // a container for the counts</span>
<span class="comment">  IntVec counts;  // IntVec is a typedef for vector&lt;int&gt;</span>
<span class="comment">                        // the iterator is typedefed as IntVecItr</span>
<span class="comment">        for(it = leaves.begin(); it &lt; leaves.end(); it++) {</span>
<span class="comment">      // remember that it points to a pointer, so *it is still a ptr</span>
<span class="comment">            // get the counts in all the leaves</span>
<span class="comment">      cout &lt;&lt; &quot;Counter \t VCounter\n&quot; &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t\t&quot; &lt;&lt; (*it)-&gt;getVcounter() &lt;&lt; endl;</span>
<span class="comment">        }</span>
<span class="comment">   */</span> <span class="comment">// end of optional output</span>
<span class="comment">/*  </span>
<span class="comment">   if (successfulInsertion) { // if data successfully inserted       </span>
<span class="comment">       //create an AdaptiveHistogramCollator object</span>
<span class="comment">       AdaptiveHistogramVCollator coll;</span>
<span class="comment">    </span>
<span class="comment">       //start the clock</span>
<span class="comment">       clock_t start, end;</span>
<span class="comment">       start = clock();</span>
<span class="comment">       </span>
<span class="comment">       //start the hold out estimation</span>
<span class="comment">       //tolerance for stopping criteria</span>
<span class="comment">       long double tol = pow(10, -2);</span>
<span class="comment">       int distr = 1;</span>
<span class="comment">       cout &lt;&lt; &quot;running priorityStageSplit: &quot; &lt;&lt; endl;</span>
<span class="comment">       coll=myHistVal.priorityStageSplit(nodeCompCount, critCount, NOLOG, </span>
<span class="comment">                                        0, 0.0, tol, distr, trueF);</span>
<span class="comment"></span>
<span class="comment">       //output time taken</span>
<span class="comment">       end = clock();</span>
<span class="comment">       double timing;</span>
<span class="comment">       timing = ((static_cast&lt;double&gt;(end - start)) / CLOCKS_PER_SEC);</span>
<span class="comment">       cout &lt;&lt; &quot;Computing time : &quot; &lt;&lt; timing &lt;&lt; &quot; s.&quot;&lt;&lt; endl;</span>
<span class="comment"> </span>
<span class="comment">      //cout &lt;&lt; coll &lt;&lt; endl;</span>
<span class="comment">      int numberCollated = coll.getNumberCollated();</span>
<span class="comment">      cout &lt;&lt; numberCollated &lt;&lt; &quot; histograms collated.&quot; &lt;&lt; endl;</span>
<span class="comment">      </span>
<span class="comment">      //output the collator to a .txt file</span>
<span class="comment">     // coll.outputToTxtTabs(&quot;CollatorHistogram.txt&quot;); </span>
<span class="comment">   </span>
<span class="comment">   //===========================================================================</span>
<span class="comment">   /* </span>
<span class="comment">   RegHist myRegHist;</span>
<span class="comment">   myRegHist = makeRegularHist(theData, pavingBox);</span>
<span class="comment">  </span>
<span class="comment">   cout &lt;&lt; &quot;get the IAE of the regular histogram: &quot; &lt;&lt; endl;</span>
<span class="comment">  real regHistIAE;</span>
<span class="comment">  regHistIAE = getRegHistUnifIAE(n, weights, trueBoxes, myRegHist.theBoxes, </span>
<span class="comment">                                   myRegHist.heights, myRegHist.binwidth);</span>
<span class="comment">                                   </span>
<span class="comment">  cout &lt;&lt; &quot;output IAE to .txt file&quot; &lt;&lt; endl;</span>
<span class="comment">                        </span>
<span class="comment">  //output IAE to .txt file------------------</span>
<span class="comment">  ofstream os;         // ofstream object</span>
<span class="comment">        os &lt;&lt; scientific;  // set formatting for input to oss</span>
<span class="comment">        os.precision(5);</span>
<span class="comment">  </span>
<span class="comment">  string outputFileName;// for output file</span>
<span class="comment">  outputFileName = &quot;IAERegHist.txt&quot;;</span>
<span class="comment">  os.open(outputFileName.c_str());</span>
<span class="comment">  os &lt;&lt; regHistIAE &lt;&lt; endl;</span>
<span class="comment">  os &lt;&lt; flush;</span>
<span class="comment">  os.close();</span>
<span class="comment">  std::cout &lt;&lt; &quot;IAE output to &quot; &lt;&lt; outputFileName &lt;&lt; endl;</span>
<span class="comment">*/</span>  
<span class="comment">//  } // end of successful insertion            </span>
   
  <span class="keywordflow">return</span> 0; 
} <span class="comment">// end of uniform mixture test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOutUniform_8cpp.shtml">HoldOutUniform.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
