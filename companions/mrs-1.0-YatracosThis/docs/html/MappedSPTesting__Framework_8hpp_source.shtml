<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPTesting_Framework.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPTesting__Framework_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPTesting_Framework.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPTesting__Framework_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef __MAPPEDSP_TESTING_FRAMEWORK_HPP__</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define __MAPPEDSP_TESTING_FRAMEWORK_HPP__</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>cxsc;
<a name="l00012"></a>00012 <span class="keyword">using namespace </span>std;
<a name="l00013"></a>00013 <span class="keyword">using namespace </span>subpavings;
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00017"></a><a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">00017</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> lhs, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> rhs)
<a name="l00018"></a>00018 {
<a name="l00019"></a>00019     cout &lt;&lt; <span class="stringliteral">&quot;lhs is &quot;</span> &lt;&lt; endl;
<a name="l00020"></a>00020     cout &lt;&lt;lhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00021"></a>00021     cout &lt;&lt; endl;
<a name="l00022"></a>00022 
<a name="l00023"></a>00023     cout &lt;&lt; <span class="stringliteral">&quot;rhs is &quot;</span> &lt;&lt; endl;
<a name="l00024"></a>00024     cout &lt;&lt;rhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00025"></a>00025     cout &lt;&lt; endl;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 }
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00030"></a><a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">00030</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> lhs, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> rhs)
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy1 = NULL;
<a name="l00033"></a>00033     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy2 = NULL;
<a name="l00034"></a>00034     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedReduced = NULL;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036     <span class="keywordflow">try</span> {
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a>00039         cout &lt;&lt; <span class="stringliteral">&quot;Trying lazy &#39;addition&#39;, creating addedLazy1 = addedLazy2 = rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
<a name="l00040"></a>00040         cout &lt;&lt; endl;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042         addedLazy1 = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         addedLazy2 = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>(*addedLazy1);
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 and addedLazy2 are the same, both are &quot;</span> &lt;&lt; endl;
<a name="l00047"></a>00047         cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00048"></a>00048         cout &lt;&lt; endl;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050         cout &lt;&lt; <span class="stringliteral">&quot;Trying addition with reduction, creating addedReduced = rhs reduced(+) lhs&quot;</span> &lt;&lt; endl;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052         addedReduced = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::reducedAddNonMinimalUnion</a>(lhs, rhs);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         cout &lt;&lt; <span class="stringliteral">&quot;addedReduced is &quot;</span> &lt;&lt; endl;
<a name="l00056"></a>00056         cout &lt;&lt; addedReduced-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00057"></a>00057         cout &lt;&lt; endl;
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildren() on addedLazy1&quot;</span> &lt;&lt; endl;
<a name="l00060"></a>00060         addedLazy1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l00061"></a>00061 
<a name="l00062"></a>00062         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 now is &quot;</span> &lt;&lt; endl;
<a name="l00063"></a>00063         cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00064"></a>00064         cout &lt;&lt; endl;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066         cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildrenWithHullPropagation() on addedLazy2&quot;</span> &lt;&lt; endl;
<a name="l00067"></a>00067         addedLazy2-&gt;nodeReabsorbChildrenWithHullPropagation();
<a name="l00068"></a>00068 
<a name="l00069"></a>00069         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy2 now is &quot;</span> &lt;&lt; endl;
<a name="l00070"></a>00070         cout &lt;&lt; addedLazy2-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00071"></a>00071         cout &lt;&lt; endl;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildrenWithHullPropagation() on addedReduced&quot;</span> &lt;&lt; endl;
<a name="l00074"></a>00074         addedReduced-&gt;nodeReabsorbChildrenWithHullPropagation();
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         cout &lt;&lt; <span class="stringliteral">&quot;addedReduced now is &quot;</span> &lt;&lt; endl;
<a name="l00077"></a>00077         cout &lt;&lt; addedReduced-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00078"></a>00078         cout &lt;&lt; endl;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="keyword">delete</span> addedLazy1;
<a name="l00081"></a>00081         <span class="keyword">delete</span> addedLazy2;
<a name="l00082"></a>00082         <span class="keyword">delete</span> addedReduced;
<a name="l00083"></a>00083         addedLazy1 = NULL; addedLazy2 = NULL; addedReduced = NULL;
<a name="l00084"></a>00084     }
<a name="l00085"></a>00085     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00086"></a>00086             <span class="keywordflow">if</span> (addedLazy1) {
<a name="l00087"></a>00087                 <span class="keyword">delete</span> addedLazy1;
<a name="l00088"></a>00088                 addedLazy1 = NULL;
<a name="l00089"></a>00089             }
<a name="l00090"></a>00090             <span class="keywordflow">if</span> (addedLazy2) {
<a name="l00091"></a>00091                 <span class="keyword">delete</span> addedLazy2;
<a name="l00092"></a>00092                 addedLazy2 = NULL;
<a name="l00093"></a>00093             }
<a name="l00094"></a>00094             <span class="keywordflow">if</span> (addedReduced) {
<a name="l00095"></a>00095                 <span class="keyword">delete</span> addedReduced;
<a name="l00096"></a>00096                 addedReduced = NULL;
<a name="l00097"></a>00097             }
<a name="l00098"></a>00098             <span class="keywordflow">throw</span>;
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 } <span class="comment">// end of absolute difference test</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00108"></a><a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">00108</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> lhs, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> rhs)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy1 = NULL;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="keywordflow">try</span> {
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         cout &lt;&lt; <span class="stringliteral">&quot;creating addedLazy1 rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
<a name="l00115"></a>00115         cout &lt;&lt; endl;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         addedLazy1 = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 is &quot;</span> &lt;&lt; endl;
<a name="l00120"></a>00120         cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00121"></a>00121         cout &lt;&lt; endl;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123         cout &lt;&lt; <span class="stringliteral">&quot;Trying productUnion() on addedLazy1&quot;</span> &lt;&lt; endl;
<a name="l00124"></a>00124         addedLazy1-&gt;productUnion();
<a name="l00125"></a>00125 
<a name="l00126"></a>00126         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 now is &quot;</span> &lt;&lt; endl;
<a name="l00127"></a>00127         cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00128"></a>00128         cout &lt;&lt; endl;
<a name="l00129"></a>00129 
<a name="l00130"></a>00130         <span class="keyword">delete</span> addedLazy1;
<a name="l00131"></a>00131         addedLazy1 = NULL;
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00134"></a>00134             <span class="keywordflow">if</span> (addedLazy1) {
<a name="l00135"></a>00135                 <span class="keyword">delete</span> addedLazy1;
<a name="l00136"></a>00136                 addedLazy1 = NULL;
<a name="l00137"></a>00137             }
<a name="l00138"></a>00138             <span class="keywordflow">throw</span>;
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00143"></a><a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">00143</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> lhs,
<a name="l00144"></a>00144                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* <span class="keyword">const</span> rhs,
<a name="l00145"></a>00145                             <span class="keyword">const</span> T multiplier)
<a name="l00146"></a>00146 {
<a name="l00147"></a>00147     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy = NULL;
<a name="l00148"></a>00148     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* multAdded = NULL;
<a name="l00149"></a>00149     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* multLhs = NULL;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     <span class="keywordflow">try</span> {
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154         cout &lt;&lt; <span class="stringliteral">&quot;creating addedLazy rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
<a name="l00155"></a>00155         cout &lt;&lt; endl;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157         addedLazy = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         cout &lt;&lt; <span class="stringliteral">&quot;addedLazy is &quot;</span> &lt;&lt; endl;
<a name="l00160"></a>00160         cout &lt;&lt; addedLazy-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00161"></a>00161         cout &lt;&lt; endl;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164         cout &lt;&lt; <span class="stringliteral">&quot;Trying own type scalar multiplication multLhs = lhs * (supplied multiplier)&quot;</span> &lt;&lt; endl;
<a name="l00165"></a>00165         cout &lt;&lt; <span class="stringliteral">&quot;Supplied multiplier is &quot;</span> &lt;&lt; multiplier &lt;&lt; endl;
<a name="l00166"></a>00166         cout &lt;&lt; endl;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168         multLhs = lhs-&gt;scalarMult(multiplier);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170         cout &lt;&lt; <span class="stringliteral">&quot;multLhs now is &quot;</span> &lt;&lt; endl;
<a name="l00171"></a>00171         cout &lt;&lt; multLhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00172"></a>00172         cout &lt;&lt; endl;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         cout &lt;&lt; <span class="stringliteral">&quot;Trying own type scalar multiplication multAdded = addedLazy * (supplied multiplier)&quot;</span> &lt;&lt; endl;
<a name="l00175"></a>00175         cout &lt;&lt; <span class="stringliteral">&quot;Supplied multiplier is &quot;</span> &lt;&lt; multiplier &lt;&lt; endl;
<a name="l00176"></a>00176         cout &lt;&lt; endl;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         multAdded = addedLazy-&gt;scalarMult(multiplier);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180         cout &lt;&lt; <span class="stringliteral">&quot;multAdded now is &quot;</span> &lt;&lt; endl;
<a name="l00181"></a>00181         cout &lt;&lt; multAdded-&gt;nodesAllPrint(cout) &lt;&lt; endl;
<a name="l00182"></a>00182         cout &lt;&lt; endl;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="keyword">delete</span> addedLazy;
<a name="l00186"></a>00186         addedLazy = NULL;
<a name="l00187"></a>00187         <span class="keyword">delete</span> multAdded;
<a name="l00188"></a>00188         multAdded = NULL;
<a name="l00189"></a>00189         <span class="keyword">delete</span> multLhs;
<a name="l00190"></a>00190         multLhs = NULL;
<a name="l00191"></a>00191     }
<a name="l00192"></a>00192     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00193"></a>00193             <span class="keywordflow">if</span> (addedLazy) {
<a name="l00194"></a>00194                 <span class="keyword">delete</span> addedLazy;
<a name="l00195"></a>00195                 addedLazy = NULL;
<a name="l00196"></a>00196             }
<a name="l00197"></a>00197             <span class="keywordflow">if</span> (multAdded) {
<a name="l00198"></a>00198                 <span class="keyword">delete</span> multAdded;
<a name="l00199"></a>00199                 multAdded = NULL;
<a name="l00200"></a>00200             }
<a name="l00201"></a>00201             <span class="keywordflow">if</span> (multLhs) {
<a name="l00202"></a>00202                 <span class="keyword">delete</span> multLhs;
<a name="l00203"></a>00203                 multLhs = NULL;
<a name="l00204"></a>00204             }
<a name="l00205"></a>00205             <span class="keywordflow">throw</span>;
<a name="l00206"></a>00206     }
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml">MappedSPTesting_Framework.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
