<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MRSampler.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MRSampler_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MRSampler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MRSampler_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00026"></a>00026 <span class="comment">// Including STD headers</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">// Including interval arithmetic package C-XSC headers                    </span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;rvector.hpp&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;imatrix.hpp&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">// Including GSL headers</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;numeric&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">using namespace </span>std;
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>cxsc;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">// Including MRS headers</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a><a class="code" href="MRSampler_8cpp.shtml#afea1691d86573780fa46039a644d0ef0">00061</a> <span class="preprocessor">#define USEFSCALE 1</span>
<a name="l00062"></a><a class="code" href="MRSampler_8cpp.shtml#ad122025112f01afde28a624bd67fecd0">00062</a> <span class="preprocessor"></span><span class="preprocessor">#define MAXNTRIES 100000</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>
<a name="l00064"></a>00064 <span class="comment">// when max of f is known to lie in a interval x </span>
<a name="l00065"></a>00065 <span class="comment">// with log(diam(x)) &lt; this, set scale and stop updating Umax</span>
<a name="l00066"></a><a class="code" href="MRSampler_8cpp.shtml#a3d8d8a3b843d32eb688d5b3bf6fa4b8f">00066</a> <span class="preprocessor">#define LOGDIAMFMAX (25.0)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="comment">// scale so Umax has this value</span>
<a name="l00068"></a><a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">00068</a> <span class="preprocessor">#define UmaxMAX (1.0e200)</span>
<a name="l00069"></a><a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">00069</a> <span class="preprocessor"></span><span class="preprocessor">#define RS_SQUEEZE 1</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="comment">// for doing integration, get integral of lower bound </span>
<a name="l00071"></a>00071 <span class="comment">// as sum(L_i*V_i), plus IS estimate of integral of (U - L)</span>
<a name="l00072"></a><a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">00072</a> <span class="preprocessor">#define WEIGHTED_SQUEEZE 0</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="comment">// could put in neg infinity here in extended interval arithmetic</span>
<a name="l00074"></a>00074 <span class="comment">// at the expense of speed </span>
<a name="l00075"></a><a class="code" href="MRSampler_8cpp.shtml#ae1758ec128ca919e83bfb56f65d5d9f5">00075</a> <span class="preprocessor">#define BIGNEGATIVE (-1.0e-307)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="comment">//#define DO_F_SCALING 1</span>
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">// implementation of class MRSampler</span>
<a name="l00079"></a>00079 <span class="comment">// public member functions</span>
<a name="l00080"></a><a class="code" href="classMRSampler.shtml#a6fc8464ae6da9a1721ff3f437e03d8ef">00080</a> <a class="code" href="classMRSampler.shtml#a6fc8464ae6da9a1721ff3f437e03d8ef" title="Initialised constructor.">MRSampler::MRSampler</a> (<a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> &amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keywordtype">int</span> max_n_boxes, <span class="keywordtype">double</span> Alb, 
<a name="l00081"></a>00081                       <span class="keywordtype">unsigned</span> seed, <span class="keywordtype">bool</span> use_f_scale)
<a name="l00082"></a>00082 :
<a name="l00083"></a>00083 <span class="comment">// target density or shape</span>
<a name="l00084"></a>00084 <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> (f),
<a name="l00085"></a>00085 <span class="comment">// should be vector of LabBox</span>
<a name="l00086"></a>00086 Domain (f.get_domain ()),
<a name="l00087"></a>00087 <span class="comment">// should be corresponding labels</span>
<a name="l00088"></a>00088 DomainLabelSet (f.get_labelset ()),
<a name="l00089"></a>00089 n_dim_max(0),
<a name="l00090"></a>00090 Max_n_boxes (max_n_boxes),
<a name="l00091"></a>00091 f_scale(0),
<a name="l00092"></a>00092 f_scaleDone(false),
<a name="l00093"></a>00093 UseFScale(use_f_scale),
<a name="l00094"></a>00094 own_rng (false),
<a name="l00095"></a>00095 gslpdfstruct (NULL),
<a name="l00096"></a>00096 proposalpmf (NULL),
<a name="l00097"></a>00097 residual_proposalpmf (NULL),
<a name="l00098"></a>00098 proposalpdf (NULL),
<a name="l00099"></a>00099 RangeDomainSet (<a class="code" href="classSortBox.shtml" title="A Function Object class for a sorting criterion between one RangedLabBox and another.">SortBox</a> (<a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>.getUsingLogDensity ()))
<a name="l00100"></a>00100 {                   <span class="comment">// constructor</span>
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = <a class="code" href="MRSampler_8cpp.shtml#ae1758ec128ca919e83bfb56f65d5d9f5">BIGNEGATIVE</a>;
<a name="l00103"></a>00103   <a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a> = 0.0;
<a name="l00104"></a>00104   <a class="code" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">wmax</a> = -1.0;
<a name="l00105"></a>00105   <a class="code" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">wmin</a> = 1.0e100;
<a name="l00106"></a>00106   <a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a> = 0;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   vector &lt; LabBox &gt;::const_iterator it = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.begin();
<a name="l00109"></a>00109   <span class="comment">//n_dimensions = 1 + Ub (it-&gt;Box) - Lb (it-&gt;Box);</span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111   <span class="keywordflow">for</span>(it = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.begin(); it != <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.end(); it++)
<a name="l00112"></a>00112   {
<a name="l00113"></a>00113     <span class="comment">//int label = it-&gt;L;</span>
<a name="l00114"></a>00114     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_dimensions = 1 + <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (it-&gt;Box) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (it-&gt;Box);
<a name="l00115"></a>00115     <span class="comment">//   cout &lt;&lt; &quot;label, n_dimensions[label]: &quot; &lt;&lt; label &lt;&lt; &quot; &quot; </span>
<a name="l00116"></a>00116     <span class="comment">//          &lt;&lt;  n_dimensions[label] &lt;&lt; endl;</span>
<a name="l00117"></a>00117     <span class="keywordflow">if</span>(n_dimensions &gt; <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>){ <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a> = n_dimensions; }
<a name="l00118"></a>00118   }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120                     <span class="comment">// Domain.size()</span>
<a name="l00121"></a>00121   <a class="code" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">topologies</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size());
<a name="l00122"></a>00122   <span class="comment">//cout &lt;&lt; &quot;number of topologies = &quot; &lt;&lt; topologies &lt;&lt; endl;</span>
<a name="l00123"></a>00123   <a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92" title="get the target scale being used">getUsingLogDensity</a> ();
<a name="l00124"></a>00124   <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> = 0;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="comment">//  cout &lt;&lt; &quot;#x, f(x) &quot; &lt;&lt; endl;</span>
<a name="l00127"></a>00127   <span class="comment">//   ofstream outx (&quot;fout&quot;);</span>
<a name="l00128"></a>00128   <span class="comment">//   for(int i=1; i&lt;1000; i++){</span>
<a name="l00129"></a>00129   <span class="comment">//       LabPnt P;</span>
<a name="l00130"></a>00130   <span class="comment">//       rvector x (1, n_dimensions);</span>
<a name="l00131"></a>00131   <span class="comment">//       x[1] = i*0.001;</span>
<a name="l00132"></a>00132   <span class="comment">//       P.Pnt = x;</span>
<a name="l00133"></a>00133   <span class="comment">//       P.L = 0;</span>
<a name="l00134"></a>00134   <span class="comment">//       outx &lt;&lt; P.Pnt[1] &lt;&lt; &quot;  &quot; &lt;&lt; F(P) &lt;&lt; &quot;   &quot; &lt;&lt; exp(F(P)) &lt;&lt; endl;</span>
<a name="l00135"></a>00135   <span class="comment">//   }</span>
<a name="l00136"></a>00136   <span class="comment">//   cout &lt;&lt; &quot;after printing fout&quot; &lt;&lt; endl;</span>
<a name="l00137"></a>00137   <a class="code" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc" title="Initialize pseudo and Quasi Random Number Generators in GSL.">InitRNG</a> (seed);   <span class="comment">// initialize the random number generator</span>
<a name="l00138"></a>00138   <a class="code" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">FirstBox</a> ();
<a name="l00139"></a>00139   cout &lt;&lt; <span class="stringliteral">&quot;after FirstBox, before Refine &quot;</span> &lt;&lt; endl;
<a name="l00140"></a>00140   <a class="code" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23" title="Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf.">Refine</a> (Alb);
<a name="l00141"></a>00141   cout &lt;&lt; <span class="stringliteral">&quot;after Refine &quot;</span> &lt;&lt; endl;
<a name="l00142"></a>00142   <span class="comment">//cout &lt;&lt; &quot;making pdf structure&quot; &lt;&lt; endl;</span>
<a name="l00143"></a>00143   <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> =
<a name="l00144"></a>00144     gsl_ran_discrete_preproc ((<span class="keywordtype">size_t</span>) <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (), <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
<a name="l00145"></a>00145 }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="comment">// destructor</span>
<a name="l00148"></a><a class="code" href="classMRSampler.shtml#ab7fdfefd1123153f759ae4ceb775a10a">00148</a> <a class="code" href="classMRSampler.shtml#ab7fdfefd1123153f759ae4ceb775a10a" title="Destructor.">MRSampler::~MRSampler</a> ()
<a name="l00149"></a>00149 {                   
<a name="l00150"></a>00150   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a>)
<a name="l00151"></a>00151     gsl_rng_free (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
<a name="l00152"></a>00152   gsl_qrng_free (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>);
<a name="l00153"></a>00153   gsl_ran_discrete_free (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>);
<a name="l00154"></a>00154   free (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
<a name="l00155"></a>00155   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> != NULL)
<a name="l00156"></a>00156   {
<a name="l00157"></a>00157     free (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
<a name="l00158"></a>00158   }
<a name="l00159"></a>00159   free (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>);
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="comment">// Return lower bound on the acceptance prob.</span>
<a name="l00163"></a>00163 <span class="keywordtype">double</span>
<a name="l00164"></a><a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d">00164</a> <a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">MRSampler::getPALB</a> ()
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <span class="keywordflow">return</span> _double (Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) / Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
<a name="l00167"></a>00167 }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="comment">// Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf</span>
<a name="l00170"></a>00170 <span class="keywordtype">void</span>
<a name="l00171"></a><a class="code" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23">00171</a> <a class="code" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23" title="Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf.">MRSampler::Refine</a> (<span class="keywordtype">double</span> Alb)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173   <a class="code" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419" title="Adaptively partition domain by bisecting the most prioritised labeled box.">AdaptPartition</a> (Alb);
<a name="l00174"></a>00174   <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="comment">// Refine partition by bisections until Desired_N_boxes many boxes is reached, </span>
<a name="l00178"></a>00178 <span class="comment">// then setup pdf</span>
<a name="l00179"></a>00179 <span class="keywordtype">void</span>
<a name="l00180"></a><a class="code" href="classMRSampler.shtml#ab6456ed49e2b5a903035ae7ef32cc5f2">00180</a> <a class="code" href="classMRSampler.shtml#ab6456ed49e2b5a903035ae7ef32cc5f2" title="Refine partition by bisections until Desired_N_boxes many boxes is reached, then setup pdf...">MRSampler::RefineUntil</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Desired_N_boxes)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () &lt; Desired_N_boxes)
<a name="l00183"></a>00183   {
<a name="l00184"></a>00184     <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
<a name="l00185"></a>00185   }
<a name="l00186"></a>00186   <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 <span class="comment">// Refine partition by doing Nbisect many bisections</span>
<a name="l00190"></a>00190 <span class="keywordtype">void</span>
<a name="l00191"></a><a class="code" href="classMRSampler.shtml#ae72be9880b00d25266c10d2f13365abf">00191</a> <a class="code" href="classMRSampler.shtml#a975802b28786372a0b1ee461184d3b23" title="Do further partitioning until acc. prob. lower bound &gt; Alb, then setup pdf.">MRSampler::Refine</a> (<span class="keywordtype">int</span> Nbisect)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; Nbisect; j++)
<a name="l00194"></a>00194   {
<a name="l00195"></a>00195     <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
<a name="l00196"></a>00196   }
<a name="l00197"></a>00197   <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">SetupPDF</a> ();
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 <span class="comment">// Return the number of boxes in RangeDomainSet, ie RangeDomainSet.size ()</span>
<a name="l00201"></a>00201 <span class="keywordtype">int</span>
<a name="l00202"></a><a class="code" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321">00202</a> <a class="code" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321" title="Return the number of boxes in RangeDomainSet.">MRSampler::get_n_boxes</a> ()
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204   <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
<a name="l00205"></a>00205 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="comment">// Print the boxes in the Domain Partition to ostream out</span>
<a name="l00208"></a>00208 <span class="keywordtype">void</span>
<a name="l00209"></a><a class="code" href="classMRSampler.shtml#a92103320447370feb1f9452915534a91">00209</a> <a class="code" href="classMRSampler.shtml#a92103320447370feb1f9452915534a91" title="Print labeled boxes in domain partition DomainParts [C-XSC output format].">MRSampler::Print_Domain_Partition</a> (std::ostream&amp; out)
<a name="l00210"></a>00210 {
<a name="l00211"></a>00211   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (); ui++)
<a name="l00212"></a>00212     out &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].L &lt;&lt; endl &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].Box &lt;&lt; endl;
<a name="l00213"></a>00213 }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 <span class="comment">// Output the boxes in the Domain Partition to ostream out</span>
<a name="l00216"></a>00216 <span class="keywordtype">void</span>
<a name="l00217"></a><a class="code" href="classMRSampler.shtml#a7c1905d15eef55fd405cf6e03550f6c1">00217</a> <a class="code" href="classMRSampler.shtml#a7c1905d15eef55fd405cf6e03550f6c1" title="Print labeled boxes in domain partition DomainParts [naive TAB-delimited numeric only format]...">MRSampler::Output_Domain_Partition</a> (std::ostream&amp; out)
<a name="l00218"></a>00218 {
<a name="l00219"></a>00219   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size (); ui++)
<a name="l00220"></a>00220   {
<a name="l00221"></a>00221     out &lt;&lt; <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].L;
<a name="l00222"></a>00222     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box); i++)
<a name="l00223"></a>00223     {
<a name="l00224"></a>00224       out &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box[i]) 
<a name="l00225"></a>00225           &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup((<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui]).Box[i]);
<a name="l00226"></a>00226     }
<a name="l00227"></a>00227     out &lt;&lt; endl;
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">// Print the RangeDomainSet in tab-delimited numeric only format</span>
<a name="l00235"></a><a class="code" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78">00235</a> <span class="comment"></span>std::ostream&amp; <a class="code" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78" title="Print the RangeDomainSet in tab-delimited numeric only format.">MRSampler::MRSoutput</a>(std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">double</span> eps)<span class="keyword"> const</span>
<a name="l00236"></a>00236 <span class="keyword"></span>{
<a name="l00237"></a>00237   <span class="comment">// do nothing if there is nothing in the set</span>
<a name="l00238"></a>00238   <span class="keywordflow">if</span>(!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.empty())
<a name="l00239"></a>00239   {
<a name="l00240"></a>00240     
<a name="l00241"></a>00241     RangedLabBoxSet::const_iterator it;
<a name="l00242"></a>00242     
<a name="l00243"></a>00243     it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin();
<a name="l00244"></a>00244     
<a name="l00245"></a>00245     <span class="keywordtype">double</span> vol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>((it-&gt;LBox).Box);
<a name="l00246"></a>00246     
<a name="l00247"></a>00247     <span class="keywordflow">while</span> (vol&gt;eps  &amp;&amp; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end())
<a name="l00248"></a>00248     {               <span class="comment">// pull em out from top of pq</span>
<a name="l00249"></a>00249       <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox = *it;
<a name="l00250"></a>00250       ivector x = it-&gt;<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00251"></a>00251       
<a name="l00252"></a>00252       <span class="comment">// label</span>
<a name="l00253"></a>00253       os &lt;&lt; (it-&gt;LBox.L);
<a name="l00254"></a>00254       
<a name="l00255"></a>00255       <span class="comment">// range enclosure</span>
<a name="l00256"></a>00256       os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(it-&gt;BoxRE) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(it-&gt;BoxRE);
<a name="l00257"></a>00257       
<a name="l00258"></a>00258       <span class="comment">//then the box</span>
<a name="l00259"></a>00259       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) ; i++)
<a name="l00260"></a>00260       {
<a name="l00261"></a>00261         os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(x[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(x[i]);
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263       
<a name="l00264"></a>00264       os&lt;&lt;endl;
<a name="l00265"></a>00265       
<a name="l00266"></a>00266       vol = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>((it-&gt;LBox).Box);
<a name="l00267"></a>00267       
<a name="l00268"></a>00268       it++;
<a name="l00269"></a>00269       
<a name="l00270"></a>00270     }               <span class="comment">// end iteration through the set</span>
<a name="l00271"></a>00271     
<a name="l00272"></a>00272   }                 <span class="comment">// end if set not empty</span>
<a name="l00273"></a>00273   
<a name="l00274"></a>00274   <span class="keywordflow">return</span> os;
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="comment">// Return one sample via rejection sampling, if possible</span>
<a name="l00278"></a>00278 <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>
<a name="l00279"></a><a class="code" href="classMRSampler.shtml#a3ab6aa3b0bb466c67c69db97e2dad5f2">00279</a> <a class="code" href="classMRSampler.shtml#a3ab6aa3b0bb466c67c69db97e2dad5f2" title="Return one sample of labeled point via rejection sampling, if possible.">MRSampler::RejectionSampleOnce</a> (<span class="keywordtype">int</span>&amp; tries)
<a name="l00280"></a>00280 {
<a name="l00281"></a>00281 
<a name="l00282"></a>00282   <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> proposed_LPnt;
<a name="l00283"></a>00283   <span class="keywordflow">for</span> (tries = 1; tries &lt;= <a class="code" href="MRSampler_8cpp.shtml#ad122025112f01afde28a624bd67fecd0">MAXNTRIES</a>; tries++)
<a name="l00284"></a>00284   {                 <span class="comment">// try a bunch of times</span>
<a name="l00285"></a>00285     <span class="keywordtype">int</span> proposed_index = 
<a name="l00286"></a>00286                         <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>));
<a name="l00287"></a>00287     <span class="comment">//  int ndim = VecLen(DomainParts[proposed_index].Box);</span>
<a name="l00288"></a>00288     rvector proposed_point;
<a name="l00289"></a>00289     <span class="keywordflow">if</span>(0)           <span class="comment">// old way in mrs-0.1; uniform prior -- left for recall!!!</span>
<a name="l00290"></a>00290     {
<a name="l00291"></a>00291       <span class="comment">//Different boxes can be different dimensionalities.</span>
<a name="l00292"></a>00292       proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].Box);
<a name="l00293"></a>00293     }
<a name="l00294"></a>00294     <span class="keywordflow">else</span>
<a name="l00295"></a>00295     {
<a name="l00296"></a>00296       <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index];
<a name="l00297"></a>00297       <span class="keywordtype">int</span> BoxDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>) + 1;
<a name="l00298"></a>00298       rvector rand_vector(1,BoxDim);
<a name="l00299"></a>00299       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=BoxDim; k++)
<a name="l00300"></a>00300       {
<a name="l00301"></a>00301         rand_vector[k] = gsl_rng_uniform(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
<a name="l00302"></a>00302       }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304       proposed_point = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index], 
<a name="l00305"></a>00305                                           rand_vector);
<a name="l00306"></a>00306     }
<a name="l00307"></a>00307     proposed_LPnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
<a name="l00308"></a>00308     proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].L;
<a name="l00309"></a>00309     proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac3062583331b0ca4591047cc79a0c3af" title="print Pnt of the labeled point LabPnt to an output file stream out">Print</a>(cout);
<a name="l00310"></a>00310 
<a name="l00311"></a>00311     real rand = gsl_rng_uniform (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
<a name="l00312"></a>00312     real Fprop;
<a name="l00313"></a>00313     <span class="keywordflow">if</span> (rand &gt; 1.0)
<a name="l00314"></a>00314     {
<a name="l00315"></a>00315       printf
<a name="l00316"></a>00316         (<span class="stringliteral">&quot;#proposed_index, UBox[proposed_index], height: %i %g %g \n&quot;</span>,
<a name="l00317"></a>00317         proposed_index, _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]), _double (rand));
<a name="l00318"></a>00318       getchar ();
<a name="l00319"></a>00319     }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00322"></a>00322     {
<a name="l00323"></a>00323       <span class="comment">// Ah but Ubox is now the log</span>
<a name="l00324"></a>00324       <span class="comment">//   cout &lt;&lt; &quot;RSonce: rany: &quot; &lt;&lt; rany &lt;&lt; &quot;  Ubox: &quot; </span>
<a name="l00325"></a>00325       <span class="comment">//        &lt;&lt; UBox[proposed_index] &lt;&lt;endl;</span>
<a name="l00326"></a>00326       <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; 
<a name="l00327"></a>00327            (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index] - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
<a name="l00328"></a>00328         || (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>(proposed_LPnt) - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
<a name="l00329"></a>00329       {
<a name="l00330"></a>00330         <span class="keywordflow">return</span> proposed_LPnt;
<a name="l00331"></a>00331       }
<a name="l00332"></a>00332     }
<a name="l00333"></a>00333     <span class="keywordflow">else</span>
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335       real rany = rand * <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index];
<a name="l00336"></a>00336                     <span class="comment">// &lt; lower bound, don&#39;t need to eval. function</span>
<a name="l00337"></a>00337       <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; (rany &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index]))
<a name="l00338"></a>00338         || (rany &lt;= (Fprop = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (proposed_LPnt))))
<a name="l00339"></a>00339       {
<a name="l00340"></a>00340         <span class="keywordflow">return</span> proposed_LPnt;
<a name="l00341"></a>00341       }
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343   }                 <span class="comment">// loop over tries</span>
<a name="l00344"></a>00344   cerr &lt;&lt; <span class="stringliteral">&quot;In MRSample.SampleOnce. After &quot;</span> &lt;&lt; <a class="code" href="MRSampler_8cpp.shtml#ad122025112f01afde28a624bd67fecd0">MAXNTRIES</a>
<a name="l00345"></a>00345     &lt;&lt; <span class="stringliteral">&quot; proposals, none accepted. Acceptance prob. very low. &quot;</span> &lt;&lt; endl;
<a name="l00346"></a>00346   cout &lt;&lt; <span class="stringliteral">&quot;estimated acceptance prob: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">getPAest</a> () &lt;&lt; endl;
<a name="l00347"></a>00347   getchar ();
<a name="l00348"></a>00348   <span class="keywordflow">return</span> proposed_LPnt;
<a name="l00349"></a>00349 }
<a name="l00350"></a>00350 
<a name="l00353"></a>00353 <span class="keywordtype">void</span>
<a name="l00354"></a><a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12">00354</a> <a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">MRSampler::RejectionSampleMany</a> (<span class="keywordtype">int</span> nRS, <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; theSample)
<a name="l00355"></a>00355 {
<a name="l00356"></a>00356   <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> proposed_LPnt;
<a name="l00357"></a>00357   <span class="keywordtype">int</span> total_tries = 0;
<a name="l00359"></a>00359   <span class="keywordflow">for</span> (; theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size () &lt; unsigned(nRS);)
<a name="l00360"></a>00360   {
<a name="l00361"></a>00361     <span class="keywordtype">int</span> proposed_index = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(gsl_ran_discrete 
<a name="l00362"></a>00362                                           (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>));
<a name="l00363"></a>00363     <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index];
<a name="l00364"></a>00364     rvector proposed_point = 
<a name="l00365"></a>00365               <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a>(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>)));
<a name="l00366"></a>00366 
<a name="l00367"></a>00367     proposed_LPnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
<a name="l00368"></a>00368     proposed_LPnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[proposed_index].L;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371     real rand = gsl_rng_uniform (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>);
<a name="l00372"></a>00372     real Fprop;
<a name="l00373"></a>00373     <span class="keywordflow">if</span> (rand &gt; 1.0)
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375       printf
<a name="l00376"></a>00376         (<span class="stringliteral">&quot;#proposed_index, UBox[proposed_index], height: %i %g %g \n&quot;</span>,
<a name="l00377"></a>00377         proposed_index, _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]), _double (rand));
<a name="l00378"></a>00378       getchar ();
<a name="l00379"></a>00379     }
<a name="l00380"></a>00380 
<a name="l00381"></a>00381     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       <span class="comment">// real rany = rand * UBox[proposed_index];</span>
<a name="l00384"></a>00384       <span class="comment">// cout &lt;&lt; &quot;RSmany. rany: &quot; &lt;&lt; rany &lt;&lt; &quot;  Ubox: &quot; </span>
<a name="l00385"></a>00385       <span class="comment">//      &lt;&lt; UBox[proposed_index] &lt;&lt; endl;</span>
<a name="l00386"></a>00386       <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; 
<a name="l00387"></a>00387            (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(rand) &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index] - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index]))
<a name="l00388"></a>00388         || <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (rand) &lt;= <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>(proposed_LPnt) - <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index])
<a name="l00389"></a>00389       {
<a name="l00390"></a>00390         <span class="comment">//  proposed_LPnt.Print(cout);</span>
<a name="l00391"></a>00391         theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back (proposed_LPnt);
<a name="l00392"></a>00392       }
<a name="l00393"></a>00393     }
<a name="l00394"></a>00394     <span class="keywordflow">else</span>
<a name="l00395"></a>00395     {
<a name="l00396"></a>00396       real rany = rand * <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[proposed_index];
<a name="l00397"></a>00397                     <span class="comment">// less than lower bound, don&#39;t need to eval. function</span>
<a name="l00398"></a>00398       <span class="keywordflow">if</span> (((<a class="code" href="MRSampler_8cpp.shtml#a95709e71d232d35e41fc9ce012f70890">RS_SQUEEZE</a>) &amp;&amp; (rany &lt;= <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[proposed_index]))
<a name="l00399"></a>00399         || (rany &lt;= (Fprop = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (proposed_LPnt))))
<a name="l00400"></a>00400       {
<a name="l00401"></a>00401         <span class="comment">// proposed_LPnt.Print(cout);</span>
<a name="l00402"></a>00402         theSample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back (proposed_LPnt);
<a name="l00403"></a>00403       }
<a name="l00404"></a>00404     }
<a name="l00405"></a>00405     <span class="comment">// } // loop over tries</span>
<a name="l00406"></a>00406     <span class="comment">// if(tries == MAXNTRIES){ cout &lt;&lt; &quot;No RS accepted in &quot; </span>
<a name="l00407"></a>00407     <span class="comment">//                    &lt;&lt; MAXNTRIES &lt;&lt; &quot; tries. Refine partition?&quot; &lt;&lt; endl; }</span>
<a name="l00408"></a>00408     total_tries++;  <span class="comment">// += tries;</span>
<a name="l00409"></a>00409     <span class="comment">// cout &lt;&lt; &quot;RS accepted, tries: &quot; &lt;&lt; theSample.Samples.size() </span>
<a name="l00410"></a>00410     <span class="comment">//      &lt;&lt; &quot;  &quot; &lt;&lt; total_tries &lt;&lt; endl;</span>
<a name="l00411"></a>00411   }                 <span class="comment">// loop over samples</span>
<a name="l00412"></a>00412   theSample.<a class="code" href="classRSSample.shtml#ada252846a5f08bfad0ceb6debd2054b8" title="Number of draws from proposal distribution.">Nprop</a> = total_tries;
<a name="l00413"></a>00413   theSample.<a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4" title="Number of labels or topologies.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size ();
<a name="l00414"></a>00414   theSample.<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>;
<a name="l00415"></a>00415   theSample.<a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894" title="The maximum dimension of the labeled boxes in LabDomainList.">n_Dim_Max</a> = <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>;
<a name="l00416"></a>00416   theSample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
<a name="l00417"></a>00417   <span class="comment">// cerr &lt;&lt; &quot;In MRSample.SampleOnce. After &quot; &lt;&lt; MAXNTRIES</span>
<a name="l00418"></a>00418   <span class="comment">//      &lt;&lt; &quot; proposals, none accepted. Acceptance prob. very low. &quot; &lt;&lt; endl;</span>
<a name="l00419"></a>00419   <span class="comment">//  return proposed_LPnt;</span>
<a name="l00420"></a>00420 }
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 <span class="keywordtype">void</span>
<a name="l00423"></a><a class="code" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d">00423</a> <a class="code" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d" title="Importance sampling with Pseudo/Quasi random numbers.">MRSampler::ImportanceSampleMany</a> (<span class="keywordtype">int</span> NSamples, <span class="keywordtype">bool</span> residual, 
<a name="l00424"></a>00424                                  <span class="keywordtype">bool</span> pseudoRNG, <a class="code" href="classISSample.shtml" title="A class for the status of an Importance Sampler.">ISSample</a>&amp; theSample)
<a name="l00425"></a>00425 {
<a name="l00426"></a>00426   <a class="code" href="classWLabPnt.shtml" title="A weighted labeled point class for a labeled point-valued particle.">WLabPnt</a> Sample;
<a name="l00427"></a>00427                     <span class="comment">// n_dimensions); </span>
<a name="l00428"></a>00428   <span class="comment">// can we do this, and have dimensionality automatically increased </span>
<a name="l00429"></a>00429   <span class="comment">// as necessary by assignment?</span>
<a name="l00430"></a>00430   rvector proposed_point (1, 1);
<a name="l00431"></a>00431   <span class="comment">//double v[n_dimensions];</span>
<a name="l00432"></a>00432   cout &lt;&lt; <span class="stringliteral">&quot;n_dim_max: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a> &lt;&lt; endl;
<a name="l00433"></a>00433                     <span class="comment">// n_dimensions[0]);</span>
<a name="l00434"></a>00434   vector&lt;double&gt; v(<a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);
<a name="l00435"></a>00435   cout &lt;&lt; <span class="stringliteral">&quot;after alloc v &quot;</span> &lt;&lt; endl;
<a name="l00436"></a>00436   <span class="keywordtype">int</span> NBoxes = int (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
<a name="l00437"></a>00437 
<a name="l00438"></a>00438   <span class="keywordflow">if</span> (residual)
<a name="l00439"></a>00439   {
<a name="l00440"></a>00440     <a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">SetupWalker</a> (NSamples);
<a name="l00441"></a>00441   }                 <span class="comment">// will this work ok here?</span>
<a name="l00442"></a>00442   <span class="keywordflow">else</span>
<a name="l00443"></a>00443   {
<a name="l00444"></a>00444     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
<a name="l00445"></a>00445     {
<a name="l00446"></a>00446       <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo = 0;
<a name="l00447"></a>00447     }
<a name="l00448"></a>00448   }                 <span class="comment">//initialize</span>
<a name="l00449"></a>00449 
<a name="l00450"></a>00450                     <span class="comment">// N is number of residual samples</span>
<a name="l00451"></a>00451   <span class="keywordtype">int</span> Nresidual = (NSamples - <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a>);
<a name="l00452"></a>00452   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Nresidual; i++)
<a name="l00453"></a>00453   {                 <span class="comment">// randomly choose the boxes for the residual samples</span>
<a name="l00454"></a>00454     <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>))].SamplesToDo++;
<a name="l00455"></a>00455   }
<a name="l00456"></a>00456   <span class="comment">// now the number of samples to be drawn from each box is set, </span>
<a name="l00457"></a>00457   <span class="comment">// and stored in DomainParts[index].SamplesToDo</span>
<a name="l00458"></a>00458   <span class="keywordtype">size_t</span> sample_num = 0;
<a name="l00459"></a>00459   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
<a name="l00460"></a>00460   {
<a name="l00461"></a>00461     <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo &gt; 0)
<a name="l00462"></a>00462     {               <span class="comment">//until all samples from Box i are exhausted</span>
<a name="l00463"></a>00463                     <span class="comment">//decrement the sample that&#39;s about to be taken care of</span>
<a name="l00464"></a>00464       <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo--;
<a name="l00465"></a>00465       sample_num++; <span class="comment">//increment sample_num</span>
<a name="l00466"></a>00466       <span class="keywordflow">if</span>(1)
<a name="l00467"></a>00467       {
<a name="l00468"></a>00468         <span class="keywordflow">if</span> (pseudoRNG)
<a name="l00469"></a>00469         {
<a name="l00470"></a>00470           proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
<a name="l00471"></a>00471         }
<a name="l00472"></a>00472         <span class="keywordflow">else</span>
<a name="l00473"></a>00473         {           <span class="comment">// quasi RNG</span>
<a name="l00474"></a>00474                     <span class="comment">// the quasi-random state is v at current sweep</span>
<a name="l00475"></a>00475           gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
<a name="l00476"></a>00476           <span class="comment">// Note: QR vector v may have more dimensions than box; </span>
<a name="l00477"></a>00477           <span class="comment">// in this case don&#39;t use the extra elements.</span>
<a name="l00478"></a>00478           proposed_point = <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a> ((&amp;v[0]), <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
<a name="l00479"></a>00479         }
<a name="l00480"></a>00480       }
<a name="l00481"></a>00481       <span class="keywordflow">else</span>          <span class="comment">//</span>
<a name="l00482"></a>00482       {
<a name="l00483"></a>00483         <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i];
<a name="l00484"></a>00484         <span class="comment">//  rvector proposed_point;</span>
<a name="l00485"></a>00485         <span class="keywordflow">if</span> (pseudoRNG)
<a name="l00486"></a>00486         {
<a name="l00487"></a>00487           proposed_point = 
<a name="l00488"></a>00488             <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a>(<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>)));
<a name="l00489"></a>00489           <span class="comment">//  proposed_point = DrawUnifBox (rgsl, DomainParts[i].Box);</span>
<a name="l00490"></a>00490         }
<a name="l00491"></a>00491         <span class="keywordflow">else</span>
<a name="l00492"></a>00492         {           <span class="comment">// quasi RNG</span>
<a name="l00493"></a>00493                     <span class="comment">// the quasi-random state is v at current sweep</span>
<a name="l00494"></a>00494           gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
<a name="l00495"></a>00495           <span class="comment">// Note: QR vector v may have more dimensions than box; </span>
<a name="l00496"></a>00496           <span class="comment">// in this case don&#39;t use the extra elements.</span>
<a name="l00497"></a>00497           <span class="comment">// get a rvector from a double* ???</span>
<a name="l00498"></a>00498           <span class="keywordtype">int</span> ndim = VecLen(LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00499"></a>00499           rvector rand_vector(1, ndim);
<a name="l00500"></a>00500           <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ii=1; ii&lt;=ndim; ii++){ rand_vector[ii] = v[ii-1]; }
<a name="l00501"></a>00501 
<a name="l00502"></a>00502           proposed_point = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0" title="Draw a real point in labeled box from density proportional to prior.">DrawFromBoxPrior</a>(LBox, rand_vector);
<a name="l00503"></a>00503           <span class="comment">// proposed_point = DrawQZUnifBoxV ((&amp;v[0]), DomainParts[i].Box);</span>
<a name="l00504"></a>00504         }
<a name="l00505"></a>00505       }
<a name="l00506"></a>00506       Sample.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
<a name="l00507"></a>00507       Sample.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].L;
<a name="l00508"></a>00508       <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00509"></a>00509       {
<a name="l00510"></a>00510         cerr &lt;&lt;
<a name="l00511"></a>00511           <span class="stringliteral">&quot;UsingLogDensity=true is not defined for MRSampler::ImpPDSampleOnce()&quot;</span>
<a name="l00512"></a>00512           &lt;&lt; endl;
<a name="l00513"></a>00513         exit(1);
<a name="l00514"></a>00514       }
<a name="l00515"></a>00515       <span class="keywordflow">else</span>
<a name="l00516"></a>00516       {
<a name="l00517"></a>00517         Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (Sample));
<a name="l00518"></a>00518         <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
<a name="l00519"></a>00519         {
<a name="l00520"></a>00520           Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> -= _double (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[i]);
<a name="l00521"></a>00521         }           <span class="comment">// FIXME scaling??</span>
<a name="l00522"></a>00522                     <span class="comment">//proposalpdf has been MODIFIED after pdfstruct was made</span>
<a name="l00523"></a>00523         Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[i] * <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b" title="prior density of a labeled real point">PriorDensity</a>(Sample));
<a name="l00524"></a>00524         Sample.<a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a> = Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> / Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a>;
<a name="l00525"></a>00525       }
<a name="l00526"></a>00526       theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.push_back (Sample);
<a name="l00527"></a>00527     }               <span class="comment">//end while(DomainParts[i].SamplesToDo &gt; 0)</span>
<a name="l00528"></a>00528   }                 <span class="comment">// end i-loop</span>
<a name="l00529"></a>00529   <span class="comment">//  Offset = (WEIGHTED_SQUEEZE)? _double(Inf(Integral)): 0.0;</span>
<a name="l00530"></a>00530   assert (sample_num == theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size ());
<a name="l00531"></a>00531   theSample.<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>.size ();
<a name="l00532"></a>00532   theSample.<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a> = <a class="code" href="classMRSampler.shtml#a8497e118c2d180ff59884897ff97ff4d" title="The set of unique integer labels in LabDomainList.">DomainLabelSet</a>;
<a name="l00533"></a>00533   theSample.<a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd" title="The integral of the envelope function.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
<a name="l00534"></a>00534 }                   <span class="comment">// end ImportanceSampleMany</span>
<a name="l00535"></a>00535 
<a name="l00536"></a>00536 <span class="keywordtype">void</span>
<a name="l00537"></a><a class="code" href="classMRSampler.shtml#a1e1e42a57421caa0b13b194372d0b067">00537</a> <a class="code" href="classMRSampler.shtml#a1e1e42a57421caa0b13b194372d0b067" title="Importance sampling with Quasi random numbers -- [Ignore: experimental].">MRSampler::ImportanceSampleManyQuasi</a> (<span class="keywordtype">int</span> NSamples, <span class="keywordtype">bool</span> residual, 
<a name="l00538"></a>00538                                       <a class="code" href="classISSample.shtml" title="A class for the status of an Importance Sampler.">ISSample</a> &amp; theSample)
<a name="l00539"></a>00539 {
<a name="l00540"></a>00540   <a class="code" href="classWLabPnt.shtml" title="A weighted labeled point class for a labeled point-valued particle.">WLabPnt</a> Sample;
<a name="l00541"></a>00541   rvector proposed_point (1, 1);
<a name="l00542"></a>00542   <span class="comment">// the double vector to store the quasi-random state vector</span>
<a name="l00543"></a>00543   vector&lt;double&gt; v(<a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);
<a name="l00544"></a>00544 
<a name="l00545"></a>00545   <span class="keywordtype">int</span> NBoxes = int (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
<a name="l00546"></a>00546 
<a name="l00547"></a>00547   <span class="keywordflow">if</span> (residual)
<a name="l00548"></a>00548   {
<a name="l00549"></a>00549     <a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">SetupWalker</a> (NSamples);
<a name="l00550"></a>00550   }                 <span class="comment">// will this work ok here?</span>
<a name="l00551"></a>00551   <span class="keywordflow">else</span>
<a name="l00552"></a>00552   {
<a name="l00553"></a>00553     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
<a name="l00554"></a>00554     {
<a name="l00555"></a>00555       <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo = 0;
<a name="l00556"></a>00556     }               <span class="comment">//initialize</span>
<a name="l00557"></a>00557   }
<a name="l00558"></a>00558 
<a name="l00559"></a>00559                     <span class="comment">// N is number of residual samples</span>
<a name="l00560"></a>00560   <span class="keywordtype">int</span> Nresidual = (NSamples - <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a>);
<a name="l00561"></a>00561   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Nresidual; i++)
<a name="l00562"></a>00562   {                 <span class="comment">// randomly choose the boxes for the residual samples</span>
<a name="l00563"></a>00563     <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[(gsl_ran_discrete (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>))].SamplesToDo++;
<a name="l00564"></a>00564   }
<a name="l00565"></a>00565   <span class="comment">// now the number of samples to be drawn from each box is set, </span>
<a name="l00566"></a>00566   <span class="comment">// and stored in DomainParts[index].SamplesToDo</span>
<a name="l00567"></a>00567   <span class="keywordtype">size_t</span> sample_num = 0;
<a name="l00568"></a>00568   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; NBoxes; i++)
<a name="l00569"></a>00569   {
<a name="l00570"></a>00570     <span class="keywordflow">while</span> (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo &gt; 0)
<a name="l00571"></a>00571     {               <span class="comment">//until all samples from Box i are exhausted</span>
<a name="l00572"></a>00572                     <span class="comment">//decrement the sample that&#39;s about to be taken care of</span>
<a name="l00573"></a>00573       <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].SamplesToDo--;
<a name="l00574"></a>00574       sample_num++; <span class="comment">//increment sample_num</span>
<a name="l00575"></a>00575       <span class="keywordflow">if</span> (0)
<a name="l00576"></a>00576       {
<a name="l00577"></a>00577         proposed_point = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a> (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
<a name="l00578"></a>00578       }
<a name="l00579"></a>00579       <span class="keywordflow">else</span>
<a name="l00580"></a>00580       {
<a name="l00581"></a>00581                     <span class="comment">// the quasi-random state is v at current sweep</span>
<a name="l00582"></a>00582         gsl_qrng_get (<a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a>, (&amp;v[0]));
<a name="l00583"></a>00583         proposed_point = <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a> ((&amp;v[0]), <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].Box);
<a name="l00584"></a>00584       }
<a name="l00585"></a>00585 
<a name="l00586"></a>00586       Sample.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = proposed_point;
<a name="l00587"></a>00587       Sample.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[i].L;
<a name="l00588"></a>00588       <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00589"></a>00589       {
<a name="l00590"></a>00590         cerr &lt;&lt;
<a name="l00591"></a>00591           <span class="stringliteral">&quot;UsingLogDensity=true is not defined for MRSampler::ImpPDSampleOnce()&quot;</span>
<a name="l00592"></a>00592           &lt;&lt; endl;
<a name="l00593"></a>00593         exit (1);
<a name="l00594"></a>00594       }
<a name="l00595"></a>00595       <span class="keywordflow">else</span>
<a name="l00596"></a>00596       {
<a name="l00597"></a>00597         Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (Sample));
<a name="l00598"></a>00598         <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
<a name="l00599"></a>00599         {
<a name="l00600"></a>00600           Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> -= _double (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[i]);
<a name="l00601"></a>00601         }           <span class="comment">// FIXME scaling??</span>
<a name="l00602"></a>00602                     <span class="comment">//proposalpdf has been MODIFIED after pdfstruct was made</span>
<a name="l00603"></a>00603         Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a> = _double (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[i] * <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b" title="prior density of a labeled real point">PriorDensity</a>(Sample));
<a name="l00604"></a>00604         Sample.<a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a> = Sample.<a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a> / Sample.<a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a>;
<a name="l00605"></a>00605       }
<a name="l00606"></a>00606       theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.push_back (Sample);
<a name="l00607"></a>00607     }               <span class="comment">//end while(DomainParts[i].SamplesToDo &gt; 0)</span>
<a name="l00608"></a>00608   }                 <span class="comment">// end i-loop</span>
<a name="l00609"></a>00609   <span class="comment">//  Offset = (WEIGHTED_SQUEEZE)? _double(Inf(Integral)): 0.0;</span>
<a name="l00610"></a>00610   <span class="comment">//  theSample.N = sample_num;</span>
<a name="l00611"></a>00611   assert (sample_num == theSample.<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size ());
<a name="l00612"></a>00612   theSample.<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a> = <a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>.size ();
<a name="l00613"></a>00613   theSample.<a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd" title="The integral of the envelope function.">EnvelopeIntegral</a> = <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> ();
<a name="l00614"></a>00614 }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616 <span class="keywordtype">void</span>
<a name="l00617"></a><a class="code" href="classMRSampler.shtml#a25d99bdee1a715fb2a8e2a8068b890db">00617</a> <a class="code" href="classMRSampler.shtml#a25d99bdee1a715fb2a8e2a8068b890db">MRSampler::PrintBoxes</a> (<span class="keywordtype">int</span> Nprint)
<a name="l00618"></a>00618 {
<a name="l00619"></a>00619   <span class="comment">//this is quick and dirty Matlab code generator for visualising range enclosure in 1D cases</span>
<a name="l00620"></a>00620   Nprint = 0;       <span class="comment">//output through cout</span>
<a name="l00621"></a>00621   <span class="keywordtype">int</span> NBoxesToPrint=1000;
<a name="l00622"></a>00622   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
<a name="l00623"></a>00623   RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
<a name="l00624"></a>00624   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end () &amp;&amp; i &lt; NBoxesToPrint; it++, i++)
<a name="l00625"></a>00625   {                 <span class="comment">// pull em out from top of pq</span>
<a name="l00626"></a>00626     theBox = *it;
<a name="l00627"></a>00627     ivector x = it-&gt;<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00628"></a>00628     <span class="comment">//cout &lt;&lt; &quot;i: &quot; &lt;&lt; i &lt;&lt; &quot;  Box: &quot; &lt;&lt; it-&gt;LBox.Box &lt;&lt; &quot; RE: :&quot; </span>
<a name="l00629"></a>00629     <span class="comment">//     &lt;&lt; it-&gt;BoxRE &lt;&lt; &quot;  Vol: &quot; &lt;&lt; it-&gt;BoxVol;</span>
<a name="l00630"></a>00630     <span class="comment">//cout &lt;&lt; &quot; IntDiam: &quot; &lt;&lt; it-&gt;BoxIntegral (UsingLogDensity) &lt;&lt; endl;</span>
<a name="l00631"></a>00631     cout &lt;&lt; <span class="stringliteral">&quot;rectangle(&#39;Position&#39;,[&quot;</span>
<a name="l00632"></a>00632       &lt;&lt; Inf(x[1]) &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Inf(it-&gt;BoxRE) &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Sup(x[1])-Inf(x[1]) 
<a name="l00633"></a>00633       &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; Sup(it-&gt;BoxRE)-Inf(it-&gt;BoxRE)
<a name="l00634"></a>00634       &lt;&lt; <span class="stringliteral">&quot;], &#39;FaceColor&#39;,&#39;b&#39;)&quot;</span> &lt;&lt; endl;
<a name="l00635"></a>00635   } cout &lt;&lt; endl;
<a name="l00636"></a>00636 }
<a name="l00637"></a>00637 
<a name="l00638"></a>00638 
<a name="l00639"></a>00639 <span class="keywordtype">double</span>
<a name="l00640"></a><a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">00640</a> <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">MRSampler::getIU</a> ()
<a name="l00641"></a>00641 {
<a name="l00642"></a>00642   <span class="keywordflow">return</span> _double (Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
<a name="l00643"></a>00643 }
<a name="l00644"></a>00644 
<a name="l00645"></a>00645 <span class="keywordtype">double</span>
<a name="l00646"></a><a class="code" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">00646</a> <a class="code" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">MRSampler::getIL</a> ()
<a name="l00647"></a>00647 {
<a name="l00648"></a>00648   <span class="keywordflow">return</span> _double (Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
<a name="l00649"></a>00649 }
<a name="l00650"></a>00650 
<a name="l00651"></a>00651 <span class="keywordtype">double</span>
<a name="l00652"></a><a class="code" href="classMRSampler.shtml#a6d1a6fd3218a62ac5e77abe2a00ac84a">00652</a> <a class="code" href="classMRSampler.shtml#a6d1a6fd3218a62ac5e77abe2a00ac84a">MRSampler::getIUminusL</a> ()
<a name="l00653"></a>00653 {
<a name="l00654"></a>00654   <span class="keywordflow">return</span> _double (diam (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>));
<a name="l00655"></a>00655 }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657 <span class="keywordtype">double</span>
<a name="l00658"></a><a class="code" href="classMRSampler.shtml#ab663935171c58ac98f0eeee73c02cbc6">00658</a> <a class="code" href="classMRSampler.shtml#ab663935171c58ac98f0eeee73c02cbc6">MRSampler::getUmax</a> ()
<a name="l00659"></a>00659 {
<a name="l00660"></a>00660   <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a>);
<a name="l00661"></a>00661 }
<a name="l00662"></a>00662 
<a name="l00663"></a>00663 <span class="keywordtype">double</span>
<a name="l00664"></a><a class="code" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">00664</a> <a class="code" href="classMRSampler.shtml#a71c9e4432504b5dcb9591265c4cfba50">MRSampler::getPAest</a> ()
<a name="l00665"></a>00665 {
<a name="l00666"></a>00666   <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a> / _double (<a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a>));
<a name="l00667"></a>00667 }
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 <span class="keywordtype">double</span>
<a name="l00670"></a><a class="code" href="classMRSampler.shtml#a37146ff923183a8563e57191d3e6bfa4">00670</a> <a class="code" href="classMRSampler.shtml#a37146ff923183a8563e57191d3e6bfa4">MRSampler::get_wsum</a> ()
<a name="l00671"></a>00671 {
<a name="l00672"></a>00672   <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#aa569a3c7e50e947daddfe9766e6aa206">wsum</a>);
<a name="l00673"></a>00673 }
<a name="l00674"></a>00674 
<a name="l00675"></a>00675 <span class="keywordtype">int</span>
<a name="l00676"></a><a class="code" href="classMRSampler.shtml#a281cb5fb693559dcbd4f90e7d5f37d3e">00676</a> <a class="code" href="classMRSampler.shtml#a281cb5fb693559dcbd4f90e7d5f37d3e">MRSampler::get_nsum</a> ()
<a name="l00677"></a>00677 {
<a name="l00678"></a>00678   <span class="keywordflow">return</span> <a class="code" href="classMRSampler.shtml#ab82586caa232037dde75eba134f035ae">nsum</a>;
<a name="l00679"></a>00679 }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681 <span class="keywordtype">double</span>
<a name="l00682"></a><a class="code" href="classMRSampler.shtml#a85b66f54b156a0a742b48afcf2997379">00682</a> <a class="code" href="classMRSampler.shtml#a85b66f54b156a0a742b48afcf2997379">MRSampler::get_wmax</a> ()
<a name="l00683"></a>00683 {
<a name="l00684"></a>00684   <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#af151b4e7e703ba21c87ae895c6b904f4">wmax</a>);
<a name="l00685"></a>00685 }
<a name="l00686"></a>00686 
<a name="l00687"></a>00687 <span class="keywordtype">double</span>
<a name="l00688"></a><a class="code" href="classMRSampler.shtml#aa2d8b962208940151e182e6b3ccb3874">00688</a> <a class="code" href="classMRSampler.shtml#aa2d8b962208940151e182e6b3ccb3874">MRSampler::get_wmin</a> ()
<a name="l00689"></a>00689 {
<a name="l00690"></a>00690   <span class="keywordflow">return</span> _double (<a class="code" href="classMRSampler.shtml#ad222a996bc96c32c89586628583be8bb">wmin</a>);
<a name="l00691"></a>00691 }
<a name="l00692"></a>00692 
<a name="l00694"></a>00694 <span class="keywordtype">void</span>
<a name="l00695"></a><a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da">00695</a> <a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da" title="update Integral using present partition">MRSampler::updateIntegral</a> ()
<a name="l00696"></a>00696 {
<a name="l00697"></a>00697   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
<a name="l00698"></a>00698   interval localIntegral (0.0, 0.0);
<a name="l00699"></a>00699   RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
<a name="l00700"></a>00700   <span class="keywordflow">for</span> (; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++)
<a name="l00701"></a>00701   {
<a name="l00702"></a>00702     theBox = *it;
<a name="l00703"></a>00703     <span class="comment">//    localIntegral += theBox.BoxIntegral (UsingLogDensity);</span>
<a name="l00704"></a>00704     localIntegral += theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
<a name="l00705"></a>00705   }
<a name="l00706"></a>00706   cout &lt;&lt; <span class="stringliteral">&quot;in updateIntegral. IL, IU: &quot;</span> &lt;&lt; Inf (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt;
<a name="l00707"></a>00707     Sup (<a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a>) &lt;&lt; endl;
<a name="l00708"></a>00708   <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> = localIntegral;
<a name="l00709"></a>00709 }
<a name="l00710"></a>00710 
<a name="l00712"></a>00712 <span class="keywordtype">void</span>
<a name="l00713"></a><a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e">00713</a> <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">MRSampler::updateUmax</a> ()
<a name="l00714"></a>00714 {
<a name="l00722"></a>00722   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
<a name="l00723"></a>00723   real fmid_max = <a class="code" href="MRSampler_8cpp.shtml#ae1758ec128ca919e83bfb56f65d5d9f5">BIGNEGATIVE</a>;
<a name="l00724"></a>00724   real f_scale_local;
<a name="l00725"></a>00725   <span class="keywordtype">bool</span> f_scaleDone_local = <span class="keyword">false</span>;
<a name="l00726"></a>00726 
<a name="l00727"></a>00727   RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
<a name="l00728"></a>00728   <span class="keywordtype">bool</span> first = <span class="keyword">true</span>;
<a name="l00729"></a>00729   <span class="keywordflow">for</span> (; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++)
<a name="l00730"></a>00730   {
<a name="l00731"></a>00731     theBox = *it;
<a name="l00732"></a>00732     real U = Sup (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
<a name="l00733"></a>00733     <span class="keywordflow">if</span> (U &gt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> || first)
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735       <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = U;
<a name="l00736"></a>00736       cout &lt;&lt; <span class="stringliteral">&quot;Umax: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt;&lt; endl;
<a name="l00737"></a>00737       <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> lab_midpnt;
<a name="l00738"></a>00738       lab_midpnt.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = mid (theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00739"></a>00739       lab_midpnt.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00740"></a>00740       real fmid = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (lab_midpnt);
<a name="l00741"></a>00741       <span class="keywordflow">if</span> (fmid &gt; fmid_max)
<a name="l00742"></a>00742                     <span class="comment">// f eval&#39;d in middle of box with greatest U.</span>
<a name="l00743"></a>00743         fmid_max = fmid;
<a name="l00744"></a>00744       first = <span class="keyword">false</span>;
<a name="l00745"></a>00745     }
<a name="l00746"></a>00746   }
<a name="l00747"></a>00747   <span class="comment">//   Umax rigorous upper bound on f</span>
<a name="l00748"></a>00748                     <span class="comment">// fMaxLB is lower bound on maximum of f</span>
<a name="l00749"></a>00749   <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a> = (<a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> &gt; fmid_max) ? <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> : fmid_max;
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00752"></a>00752   {
<a name="l00753"></a>00753     <span class="comment">// could use F - scale</span>
<a name="l00754"></a>00754 
<a name="l00755"></a>00755     f_scale_local = <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (<a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a>);
<a name="l00756"></a>00756     cout &lt;&lt; <span class="stringliteral">&quot;UmaxMAX, Umax, f_scale_local: &quot;</span> &lt;&lt; <a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
<a name="l00757"></a>00757          &lt;&lt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; f_scale_local &lt;&lt; endl;
<a name="l00758"></a>00758     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> - <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a> &lt; <a class="code" href="MRSampler_8cpp.shtml#a3d8d8a3b843d32eb688d5b3bf6fa4b8f">LOGDIAMFMAX</a>)
<a name="l00759"></a>00759     {
<a name="l00760"></a>00760       f_scaleDone_local = <span class="keyword">true</span>;
<a name="l00761"></a>00761     }
<a name="l00762"></a>00762   }
<a name="l00763"></a>00763   <span class="keywordflow">else</span>
<a name="l00764"></a>00764   {
<a name="l00765"></a>00765     <span class="comment">// could use F/f_scale</span>
<a name="l00766"></a>00766     f_scale_local = <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> / <a class="code" href="MRSampler_8cpp.shtml#a8eccc0df28913d0d118413d09bc50a9c">UmaxMAX</a>;
<a name="l00767"></a>00767     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> &lt; <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="MRSampler_8cpp.shtml#a3d8d8a3b843d32eb688d5b3bf6fa4b8f">LOGDIAMFMAX</a>) * <a class="code" href="classMRSampler.shtml#a5980112acaced10adc29397c200fa798">fMaxLB</a>)
<a name="l00768"></a>00768     {
<a name="l00769"></a>00769       f_scaleDone_local = <span class="keyword">true</span>;
<a name="l00770"></a>00770     }
<a name="l00771"></a>00771   }
<a name="l00772"></a>00772 
<a name="l00773"></a>00773   <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a> = (<a class="code" href="classMRSampler.shtml#a64134c93ecebc9f1a53b32c07bc18858">UseFScale</a>)? f_scale_local: (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)? 0: 1.0;
<a name="l00774"></a>00774   cout &lt;&lt; <span class="stringliteral">&quot;f_scale: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a> &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; f_scale_local &lt;&lt; endl;
<a name="l00775"></a>00775   <a class="code" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a> = f_scaleDone_local;
<a name="l00776"></a>00776   cout &lt;&lt; <span class="stringliteral">&quot;bottom of updateUmax \n&quot;</span>;
<a name="l00777"></a>00777 }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 <span class="comment">// private member functions</span>
<a name="l00780"></a>00780 <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>
<a name="l00781"></a><a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">00781</a> <a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">MRSampler::getBoxREInfo</a> (<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox)
<a name="l00782"></a>00782 { <span class="comment">// return the RangedLabBox with information about Labelled Box LBox</span>
<a name="l00783"></a>00783   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> result;
<a name="l00784"></a>00784   ivector Box = LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   <span class="comment">//  cout &lt;&lt; &quot;in getBoxREInfo. before F(LBox) &quot; &lt;&lt; endl;</span>
<a name="l00787"></a>00787   interval RangeEnclosure = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a> (LBox);
<a name="l00788"></a>00788   <span class="comment">//  cout &lt;&lt; &quot;in getBoxREInfo. after F(LBox). RE: &quot; &lt;&lt; RangeEnclosure &lt;&lt; endl;</span>
<a name="l00789"></a>00789   <span class="comment">//cout &lt;&lt; &quot;RangeEnclosure = &quot; &lt;&lt; RangeEnclosure &lt;&lt; &#39;\n&#39;; getchar();</span>
<a name="l00790"></a>00790 
<a name="l00791"></a>00791   <span class="comment">// this is the RE of the function supplied, could be either pi or log(pi)</span>
<a name="l00792"></a>00792   result.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a> = RangeEnclosure;
<a name="l00793"></a>00793   result.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a> = LBox;
<a name="l00794"></a>00794   result.<a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03" title="Product of diams of intervals in labeled box, ie volume of labeled box.">BoxVol</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5" title="a defined pure virtual function for default Lebesgue measure (volume) of a labelled box...">LabBoxVolume</a>(LBox);
<a name="l00795"></a>00795   result.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a> = <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">LabBoxPriorIntegral</a>(LBox);
<a name="l00796"></a>00796 
<a name="l00797"></a>00797   <span class="keywordflow">return</span> result;
<a name="l00798"></a>00798 }
<a name="l00799"></a>00799 
<a name="l00800"></a>00800 <span class="comment">// initialize rng</span>
<a name="l00801"></a>00801 <span class="keywordtype">void</span>
<a name="l00802"></a><a class="code" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc">00802</a> <a class="code" href="classMRSampler.shtml#acea6f64c0aba88187122af49c5949ddc" title="Initialize pseudo and Quasi Random Number Generators in GSL.">MRSampler::InitRNG</a> (<span class="keywordtype">unsigned</span> seed)
<a name="l00803"></a>00803 {                   
<a name="l00804"></a>00804   <span class="keyword">const</span> gsl_rng_type *Tgsl;
<a name="l00805"></a>00805   gsl_rng_env_setup ();
<a name="l00806"></a>00806   Tgsl = gsl_rng_default;
<a name="l00807"></a>00807   <a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a> = gsl_rng_alloc (Tgsl);
<a name="l00808"></a>00808   gsl_rng_set (<a class="code" href="classMRSampler.shtml#a83ea740a453f9274eb77909ba0573a97">rgsl</a>, seed);
<a name="l00809"></a>00809   <span class="comment">/* Note Regarding Quasi RNG: </span>
<a name="l00810"></a>00810 <span class="comment">    For now we will just use one quasi rng, with dimension equal to dmax, </span>
<a name="l00811"></a>00811 <span class="comment">    the max. dimension of all the labeled subdomains. Then when getting a </span>
<a name="l00812"></a>00812 <span class="comment">    point in a d dimension box (d&lt;dmax), just use the first d elements, </span>
<a name="l00813"></a>00813 <span class="comment">    ignoring the rest. Not really sure whether this is legit.</span>
<a name="l00814"></a>00814 <span class="comment">  */</span>
<a name="l00815"></a>00815   <a class="code" href="classMRSampler.shtml#a3045790ee467171c7ed5b1a7520457f6">qrgsl</a> = gsl_qrng_alloc (gsl_qrng_sobol, <a class="code" href="classMRSampler.shtml#afa30f614f3bf25d89990256e2e0c38bd">n_dim_max</a>);
<a name="l00816"></a>00816   <a class="code" href="classMRSampler.shtml#aa3abc2865eb1f5eed99f3b4017621d04">own_rng</a> = <span class="keyword">true</span>;
<a name="l00817"></a>00817 }
<a name="l00818"></a>00818 
<a name="l00819"></a>00819 <span class="keywordtype">void</span>
<a name="l00820"></a><a class="code" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">00820</a> <a class="code" href="classMRSampler.shtml#a0de2c0d6196f77662bb11304e3bec13d">MRSampler::FirstBox</a> ()
<a name="l00821"></a>00821 { <span class="comment">// setup the initial box (whole domain)</span>
<a name="l00822"></a>00822   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
<a name="l00823"></a>00823   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> k = 0; k &lt; <a class="code" href="classMRSampler.shtml#aa245fc901ea417e5b19f3e26c63cebad">topologies</a>; k++)
<a name="l00824"></a>00824   {
<a name="l00825"></a>00825     cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, before getBoxREInfo. k: &quot;</span> &lt;&lt; k &lt;&lt; endl;
<a name="l00826"></a>00826     theBox = <a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">getBoxREInfo</a> (<a class="code" href="classMRSampler.shtml#ab3c9a0e232b8145574c28989b9d25791">Domain</a>[k]);
<a name="l00827"></a>00827     theBox.<a class="code" href="classRangedLabBox.shtml#a9e8b6e359342c3273f655507a7b9c6b9" title="print the label, components of the box, range enclosure and integral.">Print</a>(cout);
<a name="l00828"></a>00828     cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, after getBoxREInfo &quot;</span> &lt;&lt; endl;
<a name="l00829"></a>00829     theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a93f97cf6932b8caf8911a0cf440807e6" title="Output formatted with brackets etc, suitable for human reading.">Print</a>(cout);
<a name="l00830"></a>00830     <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.insert (theBox).second)
<a name="l00831"></a>00831     {
<a name="l00832"></a>00832       cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, failed to insert theBox. &quot;</span> &lt;&lt; endl;
<a name="l00833"></a>00833     }
<a name="l00834"></a>00834   }
<a name="l00835"></a>00835   <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> = Inf (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
<a name="l00836"></a>00836   <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
<a name="l00837"></a>00837   cout &lt;&lt; <span class="stringliteral">&quot;in FirstBox, after updateUmax \n&quot;</span>;
<a name="l00838"></a>00838   <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> = theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
<a name="l00839"></a>00839   cout &lt;&lt; <span class="stringliteral">&quot;bottom of FirstBox. \n&quot;</span>;
<a name="l00840"></a>00840   <span class="comment">// exit(1);</span>
<a name="l00841"></a>00841 }
<a name="l00842"></a>00842 
<a name="l00847"></a>00847 <span class="keywordtype">void</span>
<a name="l00848"></a><a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489">00848</a> <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">MRSampler::Bisect</a> ()
<a name="l00849"></a>00849 {
<a name="l00850"></a>00850   <span class="comment">//cout &lt;&lt; &quot;bisecting\n&quot;; getchar();</span>
<a name="l00851"></a>00851   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox (*(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ()));
<a name="l00852"></a>00852   <span class="comment">//   cout &lt;&lt; &quot;top two boxes: &quot; &lt;&lt; endl;</span>
<a name="l00853"></a>00853   <span class="comment">//   theBox.Print(cout);</span>
<a name="l00854"></a>00854                     <span class="comment">// remove from the set the box to be bisected.</span>
<a name="l00855"></a>00855   <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.erase (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ());
<a name="l00856"></a>00856 
<a name="l00857"></a>00857   <span class="comment">//   theBox = (*(RangeDomainSet.begin ()));</span>
<a name="l00858"></a>00858   <span class="comment">//   theBox.Print(cout);</span>
<a name="l00859"></a>00859   <span class="comment">//  (RangeDomainSet.begin())-&gt;Print(cout);</span>
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   ivector B (theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00862"></a>00862   <span class="keywordtype">int</span> BoxDimensions = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(B) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(B) + 1;
<a name="l00863"></a>00863                     <span class="comment">// midpoint of box</span>
<a name="l00864"></a>00864   rvector c (mid (B));
<a name="l00865"></a>00865                     <span class="comment">// Subboxes of Y</span>
<a name="l00866"></a>00866   imatrix U (0, 1, 1, BoxDimensions);
<a name="l00867"></a>00867 
<a name="l00868"></a>00868   real IBisectedBoxIntegral =  
<a name="l00869"></a>00869     Inf (theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>));
<a name="l00870"></a>00870   
<a name="l00871"></a>00871   real SBisectedBoxIntegral = 
<a name="l00872"></a>00872     Sup (theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>));
<a name="l00873"></a>00873   <span class="comment">// index of longest dimension of box</span>
<a name="l00874"></a>00874   <span class="keywordtype">int</span> k = <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a> (B);
<a name="l00875"></a>00875   real cc = (0)? c[k]: <a class="code" href="classMRSampler.shtml#ab836cfbff1570a96b8af9c384226edfc">F</a>.<a class="code" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3" title="return the point at which to bisect a labeled box along dimension k">BisectPt</a>(theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>, k);
<a name="l00876"></a>00876   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> LBox;
<a name="l00877"></a>00877   LBox.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00878"></a>00878   U[0] = U[1] = B;
<a name="l00879"></a>00879   SetSup (U[0][k], cc);
<a name="l00880"></a>00880   SetInf (U[1][k], cc);
<a name="l00881"></a>00881   <span class="comment">//  cout &lt;&lt; &quot;the 2 new boxes &quot; &lt;&lt; endl;</span>
<a name="l00882"></a>00882   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; j++)
<a name="l00883"></a>00883   {
<a name="l00884"></a>00884     LBox.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = U[j];
<a name="l00885"></a>00885     <span class="comment">//cout &lt;&lt;&quot;getting rangeinfo for\n&quot; &lt;&lt; LBox.L &lt;&lt; &#39;\n&#39; &lt;&lt; LBox.Box; getchar();</span>
<a name="l00886"></a>00886     theBox = <a class="code" href="classMRSampler.shtml#a727ae6c7bafcf46f34c320e902cf43fe">getBoxREInfo</a> (LBox);
<a name="l00887"></a>00887     <span class="comment">//  cout &lt;&lt; &quot;j: &quot; &lt;&lt; j &lt;&lt; endl; theBox.Print(cout);</span>
<a name="l00888"></a>00888     <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.insert (theBox).second)
<a name="l00889"></a>00889     {
<a name="l00890"></a>00890       cout &lt;&lt; <span class="stringliteral">&quot;in Bisect. failed to insert theBox into RangeDomainSet &quot;</span> &lt;&lt;
<a name="l00891"></a>00891         endl;
<a name="l00892"></a>00892     }
<a name="l00893"></a>00893     real newBoxL = Inf (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
<a name="l00894"></a>00894     <span class="comment">//cout &lt;&lt; &quot;newBoxL = &quot; &lt;&lt; newBoxL; getchar();</span>
<a name="l00895"></a>00895     <span class="keywordflow">if</span> (newBoxL &gt; <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a>)
<a name="l00896"></a>00896     {
<a name="l00897"></a>00897       <a class="code" href="classMRSampler.shtml#a977efd8e3ab58d4e88bc647e68460071">Lmax</a> = newBoxL;
<a name="l00898"></a>00898     }               <span class="comment">// update Lmax</span>
<a name="l00899"></a>00899     <a class="code" href="classMRSampler.shtml#ada8a56adf645018f986090ca485049f5">Integral</a> += theBox.<a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>, <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>);
<a name="l00900"></a>00900   }
<a name="l00901"></a>00901 
<a name="l00902"></a>00902   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () % 100000 == 0)
<a name="l00903"></a>00903     cout &lt;&lt; <span class="stringliteral">&quot;# boxes: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a30f5c5489a08545226b462ace92dc321" title="Return the number of boxes in RangeDomainSet.">get_n_boxes</a> () &lt;&lt; <span class="stringliteral">&quot;  Acceptance Prob. &gt;= &quot;</span> &lt;&lt;
<a name="l00904"></a>00904       <a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt;&lt; <span class="stringliteral">&quot;\r&quot;</span>;
<a name="l00905"></a>00905   <span class="comment">// cout &lt;&lt; &quot;end of bisect\n&quot;; //getchar();</span>
<a name="l00906"></a>00906 
<a name="l00907"></a>00907   <span class="comment">// RangedLabBoxSet::const_iterator rdsit = RangeDomainSet.begin ();</span>
<a name="l00908"></a>00908   <span class="comment">//  for( ; rdsit!= RangeDomainSet.end ();rdsit++){</span>
<a name="l00909"></a>00909   <span class="comment">//      rdsit-&gt;Print(cout);</span>
<a name="l00910"></a>00910   <span class="comment">//  }</span>
<a name="l00911"></a>00911 }
<a name="l00912"></a>00912 
<a name="l00913"></a>00913 <span class="comment">// adaptively partition by bisection along longest dimension of box with </span>
<a name="l00914"></a>00914 <span class="comment">// largest (vol*diam(range enclosure))</span>
<a name="l00915"></a>00915 <span class="keywordtype">void</span>
<a name="l00916"></a><a class="code" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419">00916</a> <a class="code" href="classMRSampler.shtml#a68198444d2875642e8ee2cb3f3120419" title="Adaptively partition domain by bisecting the most prioritised labeled box.">MRSampler::AdaptPartition</a> (<span class="keywordtype">double</span> Alb)
<a name="l00917"></a>00917 {                  
<a name="l00918"></a>00918   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> next_updateUmax = 32;
<a name="l00919"></a>00919   <span class="comment">//  cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
<a name="l00920"></a>00920   <span class="keywordflow">while</span> ((<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () &lt; <a class="code" href="classMRSampler.shtml#adf95f77ac86c63eef71474204ac28efc">Max_n_boxes</a>) &amp;&amp; (<a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt; Alb))
<a name="l00921"></a>00921   {
<a name="l00922"></a>00922     <a class="code" href="classMRSampler.shtml#ae665da26800e35c295359e0d2dffb489" title="Bisect the box at top of priority queue.">Bisect</a> ();
<a name="l00923"></a>00923     <span class="comment">//cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
<a name="l00924"></a>00924     <span class="comment">//cout &lt;&lt; &quot;in AdaptPartition. &quot;  &lt;&lt; RangeDomainSet.size() &lt;&lt; endl;</span>
<a name="l00925"></a>00925     <span class="keywordflow">if</span> (!<a class="code" href="classMRSampler.shtml#aa677251ac24e0083e75a9ba5f4aa02ca">f_scaleDone</a> &amp;&amp; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size () == next_updateUmax)
<a name="l00926"></a>00926     {
<a name="l00927"></a>00927       cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition before updateUmax. \n&quot;</span>;
<a name="l00928"></a>00928       <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
<a name="l00929"></a>00929       cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition after updateUmax. \n&quot;</span>;
<a name="l00930"></a>00930       <a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da" title="update Integral using present partition">updateIntegral</a> ();
<a name="l00931"></a>00931       next_updateUmax *= 2;
<a name="l00932"></a>00932     }
<a name="l00933"></a>00933   }
<a name="l00934"></a>00934 
<a name="l00935"></a>00935   <a class="code" href="classMRSampler.shtml#a7e98b9c2e972668a7df1b1b4853bef6e" title="Updating the upper and lower bounds for the global maximum of target F.">updateUmax</a> ();
<a name="l00936"></a>00936   cout &lt;&lt; <span class="stringliteral">&quot;in AdaptPartition after updateUmax2 \n&quot;</span>;
<a name="l00937"></a>00937   <a class="code" href="classMRSampler.shtml#a973099a9a64b6e447b196e8fecc121da" title="update Integral using present partition">updateIntegral</a> ();
<a name="l00938"></a>00938   <span class="comment">//   cout &lt;&lt; &quot;Integral: &quot; &lt;&lt; Integral &lt;&lt; endl;</span>
<a name="l00939"></a>00939   cout &lt;&lt; <span class="stringliteral">&quot;# Adaptive partitioning complete. Boxes: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.
<a name="l00940"></a>00940     size () &lt;&lt; <span class="stringliteral">&quot;  Lower bound on Acceptance Prob.: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#addd59ad1e400adae3c46b562c7ceb80d" title="Return lower bound on the acceptance prob.">getPALB</a> () &lt;&lt;
<a name="l00941"></a>00941     <span class="stringliteral">&quot; IL, IU: &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#aaf6497221623367c28cd9054eb52cbba">getIL</a> () &lt;&lt; <span class="stringliteral">&quot;   &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a92b7d631e838539d7c9dcd047bd2936c">getIU</a> () &lt;&lt; endl;
<a name="l00942"></a>00942   <span class="comment">//  getchar();</span>
<a name="l00943"></a>00943 }
<a name="l00944"></a>00944 
<a name="l00945"></a>00945 <span class="keywordtype">void</span>
<a name="l00946"></a><a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">00946</a> <a class="code" href="classMRSampler.shtml#a91a20bb1df74b36668d4ea206685246f">MRSampler::SetupPDF</a> ()
<a name="l00947"></a>00947 {
<a name="l00948"></a>00948   <span class="comment">//cout &lt;&lt; &quot;inside SetupPDF \n&quot;;</span>
<a name="l00949"></a>00949   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NBoxes = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
<a name="l00950"></a>00950   rvector VolBox(0, NBoxes-1);
<a name="l00951"></a>00951   rvector PriorIntegralBox(0, NBoxes-1);
<a name="l00952"></a>00952   Resize (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>, 0, NBoxes - 1);
<a name="l00953"></a>00953   Resize (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>, 0, NBoxes - 1);
<a name="l00954"></a>00954 
<a name="l00955"></a>00955   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> != NULL)
<a name="l00956"></a>00956     free (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>);
<a name="l00957"></a>00957   <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));
<a name="l00958"></a>00958   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a> != NULL)
<a name="l00959"></a>00959     free (<a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>);
<a name="l00960"></a>00960   <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));
<a name="l00961"></a>00961 
<a name="l00962"></a>00962   <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a> theBox;
<a name="l00963"></a>00963   <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = Sup (<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ()-&gt;BoxRE);
<a name="l00964"></a>00964   RangedLabBoxSet::const_iterator it = <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.begin ();
<a name="l00965"></a>00965   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; it != <a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.end (); it++, ui++)
<a name="l00966"></a>00966   {                 <span class="comment">// pull em out from top of pq</span>
<a name="l00967"></a>00967     theBox = *it;
<a name="l00968"></a>00968     <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>.push_back (theBox.<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>);
<a name="l00969"></a>00969     <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] = Sup (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
<a name="l00970"></a>00970     <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui] = Inf (theBox.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>);
<a name="l00971"></a>00971     VolBox[ui] = theBox.<a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03" title="Product of diams of intervals in labeled box, ie volume of labeled box.">BoxVol</a>;
<a name="l00972"></a>00972     PriorIntegralBox[ui] = theBox.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>;
<a name="l00973"></a>00973     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] &gt; <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a>)
<a name="l00974"></a>00974       <a class="code" href="classMRSampler.shtml#ac22f171e36cc11caa473d8232e9c0786">Umax</a> = <a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui];
<a name="l00975"></a>00975   }
<a name="l00976"></a>00976 
<a name="l00977"></a>00977                     <span class="comment">//getchar();</span>
<a name="l00978"></a>00978   cout &lt;&lt; <span class="stringliteral">&quot;#Using log(pi)? &quot;</span> &lt;&lt; <a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a> &lt;&lt; endl;
<a name="l00979"></a>00979   <span class="keywordtype">double</span> pTotal = 0.0;
<a name="l00980"></a>00980 
<a name="l00981"></a>00981                     <span class="comment">// reset proposalpmf</span>
<a name="l00982"></a>00982   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
<a name="l00983"></a>00983   {
<a name="l00984"></a>00984     real BoxI = (0)? VolBox[ui]: PriorIntegralBox[ui];
<a name="l00985"></a>00985     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a5f1bfb7fca5ef5a992a9bc812b19bddd">UsingLogDensity</a>)
<a name="l00986"></a>00986     {
<a name="l00987"></a>00987       <span class="comment">//  UBox[ui] = exp (UBox[ui] - f_scale); </span>
<a name="l00988"></a>00988       <span class="comment">// leave Ubox as just Sup RE of logdensity</span>
<a name="l00989"></a>00989       <span class="comment">//  LoBox[ui] = exp (LoBox[ui] - f_scale);</span>
<a name="l00990"></a>00990       <span class="comment">// could we use BoxIntegral here?</span>
<a name="l00991"></a>00991       <span class="keywordflow">if</span>(<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
<a name="l00992"></a>00992       {
<a name="l00993"></a>00993         <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double((<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>) - 
<a name="l00994"></a>00994                                    <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (<a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>)) * BoxI);
<a name="l00995"></a>00995       }
<a name="l00996"></a>00996       <span class="keywordflow">else</span>
<a name="l00997"></a>00997       {
<a name="l00998"></a>00998         <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a9c85b485d8d4ed429e23af0e0427cbe8">f_scale</a>) * BoxI);
<a name="l00999"></a>00999       }
<a name="l01000"></a>01000     }
<a name="l01001"></a>01001     <span class="keywordflow">else</span>
<a name="l01002"></a>01002     {
<a name="l01003"></a>01003                     <span class="comment">//</span>
<a name="l01004"></a>01004       <span class="keywordflow">if</span> (<a class="code" href="MRSampler_8cpp.shtml#afa38f0d1735edb0d91fdf2283fa84e0d">WEIGHTED_SQUEEZE</a>)
<a name="l01005"></a>01005       {
<a name="l01006"></a>01006         <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double ((<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] - <a class="code" href="classMRSampler.shtml#a541ae11d9bfc46da67065796901740a4">LoBox</a>[ui]) * BoxI);
<a name="l01007"></a>01007       }
<a name="l01008"></a>01008       <span class="keywordflow">else</span>
<a name="l01009"></a>01009       {
<a name="l01010"></a>01010         <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] = _double (<a class="code" href="classMRSampler.shtml#ae15d963eb51af7923bdb0dc4a1784208">UBox</a>[ui] * BoxI);
<a name="l01011"></a>01011       }
<a name="l01012"></a>01012     }
<a name="l01013"></a>01013 
<a name="l01014"></a>01014                     <span class="comment">//initialize</span>
<a name="l01015"></a>01015     <a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].SamplesToDo = 0;
<a name="l01016"></a>01016   }
<a name="l01017"></a>01017   <span class="comment">//make pmf a probability mass function -- normalize</span>
<a name="l01018"></a>01018   pTotal =
<a name="l01019"></a>01019     std::accumulate (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> + NBoxes, 0.0,
<a name="l01020"></a>01020     <a class="code" href="structkahan__sum.shtml" title="Stable Summation Routine of Kahan&#39;s.">kahan_sum &lt; double &gt;</a>());
<a name="l01021"></a>01021 
<a name="l01022"></a>01022   <span class="comment">//   UBIntegral = pTotal;</span>
<a name="l01023"></a>01023   std::transform (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a> + NBoxes, <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>,
<a name="l01024"></a>01024     bind2nd (divides &lt; double &gt;(), pTotal));
<a name="l01025"></a>01025 
<a name="l01026"></a>01026   <span class="comment">//Now we will use proposalpdf to keep track of </span>
<a name="l01027"></a>01027   <span class="comment">// the DENSITY (normalized simple fnctn) of a proposed point</span>
<a name="l01028"></a>01028   <span class="keywordtype">int</span> count0probBoxes16 = 0, count0probBoxes10 = 0, count0probBoxes6 =
<a name="l01029"></a>01029     0, count0probBoxes3 = 0;
<a name="l01030"></a>01030   <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
<a name="l01031"></a>01031   {
<a name="l01032"></a>01032     <span class="keywordflow">if</span>(0)
<a name="l01033"></a>01033     {
<a name="l01034"></a>01034                     <span class="comment">// (BoxI); // ????</span>
<a name="l01035"></a>01035       <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[ui] = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] / _double (VolBox[ui]);
<a name="l01036"></a>01036     }
<a name="l01037"></a>01037     <span class="keywordflow">else</span>
<a name="l01038"></a>01038     {
<a name="l01039"></a>01039       <a class="code" href="classMRSampler.shtml#ad32ae929145a5d9a1b042aaf4bd34952">proposalpdf</a>[ui] = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] / _double (PriorIntegralBox[ui]);
<a name="l01040"></a>01040     }
<a name="l01041"></a>01041     <span class="comment">// do we need proposalpdf??? </span>
<a name="l01042"></a>01042     <span class="comment">// it will not be const over box, if prior is not const.</span>
<a name="l01043"></a>01043     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &gt;= 1e-3)
<a name="l01044"></a>01044       count0probBoxes3++;
<a name="l01045"></a>01045     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &gt;= 1e-6)
<a name="l01046"></a>01046       count0probBoxes6++;
<a name="l01047"></a>01047     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &lt;= 1e-16)
<a name="l01048"></a>01048       count0probBoxes16++;
<a name="l01049"></a>01049     <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] &lt;= 1e-10)
<a name="l01050"></a>01050       count0probBoxes10++;
<a name="l01051"></a>01051   }
<a name="l01052"></a>01052   <span class="comment">// sometimes 20% of the boxes have mass &lt;= 1e-16 !!!  this unnecessarily </span>
<a name="l01053"></a>01053   <span class="comment">// enlarges our priority queue and the SetupWalker</span>
<a name="l01054"></a>01054   <span class="comment">// need regular sub-paving to make this efficient </span>
<a name="l01055"></a>01055   <span class="comment">// perhaps have &gt; 1 list of boxes</span>
<a name="l01056"></a>01056   cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &lt;= 1e-16 &quot;</span> &lt;&lt;
<a name="l01057"></a>01057     count0probBoxes16 &lt;&lt; endl;
<a name="l01058"></a>01058   cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &lt;= 1e-10 &quot;</span> &lt;&lt;
<a name="l01059"></a>01059     count0probBoxes10 &lt;&lt; endl;
<a name="l01060"></a>01060   cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &gt;= 1e-6 &quot;</span> &lt;&lt;
<a name="l01061"></a>01061     count0probBoxes6 &lt;&lt; endl;
<a name="l01062"></a>01062   cout &lt;&lt; <span class="stringliteral">&quot;#No. of Boxes with proposal mass function &gt;= 1e-3 &quot;</span> &lt;&lt;
<a name="l01063"></a>01063     count0probBoxes3 &lt;&lt; endl;
<a name="l01064"></a>01064 }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066 <span class="keywordtype">void</span>
<a name="l01067"></a><a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">01067</a> <a class="code" href="classMRSampler.shtml#a4898e0225312caca6bdc53d034b8cd2a">MRSampler::SetupWalker</a> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> samples)
<a name="l01068"></a>01068 {                   <span class="comment">// Setup residual_proposalpmf</span>
<a name="l01069"></a>01069   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NBoxes = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classMRSampler.shtml#aec967af4872910cd04b49227d843ec66">RangeDomainSet</a>.size ());
<a name="l01070"></a>01070 
<a name="l01071"></a>01071   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> != NULL)
<a name="l01072"></a>01072                     <span class="comment">// start over again</span>
<a name="l01073"></a>01073     free (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
<a name="l01074"></a>01074   <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> = (<span class="keywordtype">double</span> *) malloc (NBoxes * <span class="keyword">sizeof</span> (<span class="keywordtype">double</span>));
<a name="l01075"></a>01075 
<a name="l01076"></a>01076   <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> = 0;
<a name="l01077"></a>01077   <span class="comment">// preprocess proposalpmf to get gslpdfstruct, used by gsl_ran_discrete</span>
<a name="l01078"></a>01078   <span class="keywordflow">if</span> (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> != NULL)
<a name="l01079"></a>01079     gsl_ran_discrete_free (<a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a>);
<a name="l01080"></a>01080   <span class="keywordflow">if</span> (samples != 0)
<a name="l01081"></a>01081   {                 <span class="comment">// modify pmf for residual sampling to minimizing variance</span>
<a name="l01082"></a>01082     <span class="keywordtype">double</span> blowup, intpart;
<a name="l01083"></a>01083     <span class="keywordtype">double</span> dsamples = double (samples);
<a name="l01084"></a>01084     <span class="keywordtype">double</span> count_residuals = 0;
<a name="l01085"></a>01085     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ui = 0; ui &lt; NBoxes; ui++)
<a name="l01086"></a>01086     {
<a name="l01087"></a>01087       blowup = <a class="code" href="classMRSampler.shtml#a0019552cda42dbc57e0bbf88b661fbce">proposalpmf</a>[ui] * dsamples;
<a name="l01088"></a>01088                     <span class="comment">// save the residue in the revided residual pmf</span>
<a name="l01089"></a>01089       count_residuals += (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>[ui] = modf (blowup, &amp;intpart));
<a name="l01090"></a>01090       <a class="code" href="classMRSampler.shtml#a31a44287b73bf986bbddcf67245d3c9c">nonresidual_samples</a> += (<a class="code" href="classMRSampler.shtml#aea43aaf9d80cae23dc971ab12d706ef8">DomainParts</a>[ui].SamplesToDo =
<a name="l01091"></a>01091         int (intpart));
<a name="l01092"></a>01092     }
<a name="l01093"></a>01093     std::transform (<a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>, <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a> + NBoxes,
<a name="l01094"></a>01094       <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>, bind2nd (divides &lt; double &gt;(),
<a name="l01095"></a>01095       count_residuals));
<a name="l01096"></a>01096   }
<a name="l01097"></a>01097                     <span class="comment">// this is residual part now</span>
<a name="l01098"></a>01098   <a class="code" href="classMRSampler.shtml#aeb2b7cd2e8b2459ed444a38b327897fd">gslpdfstruct</a> = gsl_ran_discrete_preproc ((<span class="keywordtype">size_t</span>) NBoxes, 
<a name="l01099"></a>01099                                            <a class="code" href="classMRSampler.shtml#adf347c7e241dda4ccd20e8d661da5e72">residual_proposalpmf</a>);
<a name="l01100"></a>01100 }
<a name="l01101"></a>01101 
<a name="l01102"></a>01102 <span class="comment">//Output the RangeDomain set</span>
<a name="l01103"></a><a class="code" href="MRSampler_8hpp.shtml#a5405921d0ad6cd3f7d084367e9f8405a">01103</a> std::ostream &amp; <a class="code" href="adaptivehistogram_8cpp.shtml#ae2f172a2081430943222aff00bd4d1e8" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a>&amp; mrs)
<a name="l01104"></a>01104 {
<a name="l01105"></a>01105   <span class="comment">// uses public member function MRSoutput to generate output</span>
<a name="l01106"></a>01106   mrs.<a class="code" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78" title="Print the RangeDomainSet in tab-delimited numeric only format.">MRSoutput</a>(os);
<a name="l01107"></a>01107 
<a name="l01108"></a>01108   <span class="keywordflow">return</span> os;
<a name="l01109"></a>01109 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MRSampler_8cpp.shtml">MRSampler.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
