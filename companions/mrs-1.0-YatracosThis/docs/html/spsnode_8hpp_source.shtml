<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spsnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spsnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spsnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spsnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef ___SPSNODE_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define ___SPSNODE_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="comment">// for spnode class</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span> <span class="comment">// includes sptypes.hpp</span>
<a name="l00027"></a>00027 
<a name="l00039"></a>00039 <span class="keyword">namespace </span>subpavings {
<a name="l00040"></a>00040 
<a name="l00042"></a><a class="code" href="namespacesubpavings.shtml#ace6b16f0adf0db13eeb38e124d5328c6">00042</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>;
<a name="l00043"></a>00043 
<a name="l00046"></a>00046     <span class="keyword">typedef</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="namespacesubpavings.shtml#ace6b16f0adf0db13eeb38e124d5328c6" title="StatsSubPaving is an alias for a pointer to an SPSnode.">StatsSubPaving</a>;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00109"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml">00109</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> {
<a name="l00110"></a>00110     <span class="keyword">private</span>:
<a name="l00111"></a>00111         <span class="comment">/* theBox, dimension, label, parent, leftChild,</span>
<a name="l00112"></a>00112 <span class="comment">        rightChild and nodeName are inherited from base class */</span>
<a name="l00113"></a>00113 
<a name="l00121"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">00121</a>         <span class="keyword">enum</span> {<a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">defaultMaxPts</a> = 1000};
<a name="l00122"></a>00122 
<a name="l00128"></a>00128         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8011280b8a3a0729c581a00f3bb031ff" title="Recalculate summary statistics associated with node.">recalculateStats</a>(rvector&amp; newdata) <span class="keyword">const</span>;
<a name="l00129"></a>00129 
<a name="l00134"></a>00134         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa70c978a273b7266c75e7d617ae4d100" title="Recalculate summary statistics associated with node.">recalculateSums</a>(rvector&amp; newdata) <span class="keyword">const</span>;
<a name="l00135"></a>00135 
<a name="l00140"></a>00140         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab49e57afe0939b41930e0cbb22c9ba8a" title="Recalculate summary statistics associated with node.">recalculateSumProducts</a>(rvector&amp; newdata) <span class="keyword">const</span>;
<a name="l00141"></a>00141 
<a name="l00148"></a>00148         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac549870ef3b7994d9e87b952a012a7e9" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(<span class="keywordtype">int</span> comp);
<a name="l00149"></a>00149 
<a name="l00154"></a>00154         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf3d76ca267b87c46d1fcb1ca3cecd84" title="Send the data associated with this down to children.">splitData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest);
<a name="l00155"></a>00155 
<a name="l00165"></a>00165         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a799dd8e194518c3dd525ecba26072585" title="Print the data in a specified format.">nodeDataPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00166"></a>00166 
<a name="l00169"></a>00169         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a5f5cc02f707a2b98f7a93543c71298b2" title="Print the mean in a specified format.">nodeMeanPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00170"></a>00170 
<a name="l00173"></a>00173         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a03042a5084349960b1fd35396dc509a5" title="Print the variance-covariance in a specified format.">nodeVarCovarPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00174"></a>00174 
<a name="l00180"></a>00180         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; container, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * spn);
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00204"></a>00204         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac273545c33e3abb0114811e7a1b06f98" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00205"></a>00205                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 
<a name="l00227"></a>00227         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#aaf9ac8d98bda6e99c74b946d85c6bc61" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeight</a>(
<a name="l00228"></a>00228                                 <span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN, std::ostream &amp;os,
<a name="l00229"></a>00229                                 <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00256"></a>00256         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad64bd4af47589b21d9c8dde5135c3d0a" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeightAndEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00257"></a>00257                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00269"></a>00269         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a785e03fc466a6a1ea851f08338f8103d" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>();
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00284"></a>00284         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6c28eccf9962c4b9010f2f04b0231d30">unionNoData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00285"></a>00285                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs);
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <span class="keyword">protected</span>:
<a name="l00289"></a>00289 
<a name="l00297"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95">00297</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>;
<a name="l00298"></a>00298 
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5">00316</a>         <span class="keyword">mutable</span> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l00317"></a>00317 
<a name="l00344"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643">00344</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>;
<a name="l00345"></a>00345 
<a name="l00381"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78">00381</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>;
<a name="l00382"></a>00382 
<a name="l00393"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8">00393</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>;
<a name="l00395"></a>00395 
<a name="l00401"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154">00401</a>         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00402"></a>00402 
<a name="l00408"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6">00408</a>         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00409"></a>00409 
<a name="l00418"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02">00418</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>;
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <span class="comment">//src_trunk_0701</span>
<a name="l00422"></a>00422 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e" title="Internal method to reshape this to a union.">_reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other);
<a name="l00423"></a>00423     
<a name="l00436"></a>00436     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e" title="Internal method to reshape this to a union.">_reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other,
<a name="l00437"></a>00437               <span class="keywordtype">size_t</span> minChildPoints,
<a name="l00438"></a>00438               <span class="keyword">const</span> std::string&amp; errorFilename);
<a name="l00439"></a>00439     <span class="comment">//src_trunk_0701</span>
<a name="l00440"></a>00440 
<a name="l00441"></a>00441     <span class="keyword">public</span>:
<a name="l00444"></a>00444         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>();
<a name="l00445"></a>00445 
<a name="l00453"></a>00453         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(ivector&amp; v, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab = 0);
<a name="l00454"></a>00454 
<a name="l00462"></a>00462         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab = 0);
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 
<a name="l00473"></a>00473         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab = 0);
<a name="l00474"></a>00474 
<a name="l00482"></a>00482         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">int</span> lab = 0);
<a name="l00483"></a>00483 
<a name="l00490"></a>00490         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">bool</span> cntOnly = <span class="keyword">false</span>);
<a name="l00491"></a>00491 
<a name="l00498"></a>00498         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly = <span class="keyword">false</span>);
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 
<a name="l00503"></a>00503         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; other);
<a name="l00504"></a>00504 
<a name="l00505"></a>00505         <span class="comment">// Use base class destructor</span>
<a name="l00506"></a>00506 
<a name="l00509"></a>00509         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a65971d98a726cba6cf111882f984de06" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; rhs);
<a name="l00510"></a>00510 
<a name="l00511"></a>00511         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">strippedConstructor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> other);  
<a name="l00512"></a>00512         
<a name="l00515"></a>00515         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() <span class="keyword">const</span>;
<a name="l00516"></a>00516        
<a name="l00517"></a>00517 
<a name="l00520"></a>00520         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac" title="Accessor for the split dimension.">getSplitDim</a>() <span class="keyword">const</span>;
<a name="l00521"></a>00521 
<a name="l00524"></a>00524         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420" title="Accessor for the split value.">getSplitValue</a>() <span class="keyword">const</span>;
<a name="l00525"></a>00525 
<a name="l00528"></a>00528         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4285801767cd577432a0b13cdbdaba43" title="Accessor for the countsOnly value.">getCountsOnly</a>() <span class="keyword">const</span>;
<a name="l00529"></a>00529 
<a name="l00535"></a>00535         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a" title="Accessor for the node&#39;s data collection.">getData</a>() <span class="keyword">const</span>;
<a name="l00536"></a>00536 
<a name="l00539"></a>00539         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa4b207c66d28113dc641d7cddf691547" title="Clears the node&#39;s data collection.">clearData</a>() <span class="keyword">const</span>;
<a name="l00540"></a>00540       
<a name="l00543"></a>00543       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a69cbe84e4c59cd1369d3900d3ff05a01" title="Clears the node&#39;s data collection and counter.">makeEmptyNode</a>();
<a name="l00544"></a>00544 
<a name="l00568"></a>00568         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>() <span class="keyword">const</span>;
<a name="l00569"></a>00569 
<a name="l00576"></a>00576         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>() <span class="keyword">const</span>;
<a name="l00577"></a>00577 
<a name="l00584"></a>00584         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>() <span class="keyword">const</span>;
<a name="l00586"></a>00586 
<a name="l00587"></a>00587     <span class="comment">//--src_trunk_0701</span>
<a name="l00597"></a>00597 <span class="comment"></span>        <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>() <span class="keyword">const</span> ;
<a name="l00598"></a>00598     
<a name="l00614"></a>00614         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(<span class="keywordtype">size_t</span> minChildPoints, 
<a name="l00615"></a>00615                 <span class="keywordtype">double</span> minVol) <span class="keyword">const</span>;
<a name="l00616"></a>00616     
<a name="l00630"></a>00630         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(<span class="keywordtype">size_t</span> minChildPoints);
<a name="l00631"></a>00631         <span class="comment">//--src_trunk_0701</span>
<a name="l00632"></a>00632 
<a name="l00633"></a>00633 
<a name="l00634"></a>00634     <span class="comment">//--src_trunk_0701</span>
<a name="l00635"></a>00635         
<a name="l00640"></a>00640     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>() <span class="keyword">const</span>;
<a name="l00641"></a>00641     
<a name="l00679"></a>00679       <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>(<span class="keywordtype">size_t</span> minChildPoints, 
<a name="l00680"></a>00680                 <span class="keywordtype">double</span> minVol) <span class="keyword">const</span>;
<a name="l00681"></a>00681     
<a name="l00711"></a>00711     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>(<span class="keywordtype">size_t</span> minChildPoints) <span class="keyword">const</span>;
<a name="l00712"></a>00712     <span class="comment">//--src_trunk_0701</span>
<a name="l00713"></a>00713 
<a name="l00723"></a>00723         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00724"></a>00724 
<a name="l00734"></a>00734         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa10917d57d9a50cb2d393a422188a51f" title="The count the right child would have if this node was split.">getRightCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00735"></a>00735 
<a name="l00736"></a>00736         
<a name="l00743"></a>00743         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00744"></a>00744         <span class="comment">//src_trunk_0701</span>
<a name="l00745"></a>00745       <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3df75e24c4a3a468b63f79667645c1dc">getMinChildCountIfSplitNEW</a>() <span class="keyword">const</span>;
<a name="l00746"></a>00746       
<a name="l00760"></a>00760         <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#acbe47754c218f0c895a900330491cbb3" title="return a container of counts for prospective grandchildren.">getChildrensLeftAndRightCountsIfSplit</a>
<a name="l00761"></a>00761                     (<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; grandchildCounts) <span class="keyword">const</span>;
<a name="l00762"></a>00762                     
<a name="l00768"></a>00768         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#abd4de519f005b145ef131f0c9d4331a0" title="Smallest volume of either child if this was split.">getMinChildVolIfSplit</a>() <span class="keyword">const</span>;
<a name="l00769"></a>00769 
<a name="l00777"></a>00777         <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">getLeafNodeCounts</a>(<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; counts) <span class="keyword">const</span>;
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 
<a name="l00786"></a>00786         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; leaves) <span class="keyword">const</span>;
<a name="l00787"></a>00787 
<a name="l00792"></a>00792         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8683fb9b17016cbe615408b51e791b9c" title="Return a reference to all nodes.">getAllNodes</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; allNodes) <span class="keyword">const</span>;
<a name="l00793"></a>00793 
<a name="l00803"></a>00803         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; subleaves) <span class="keyword">const</span>;
<a name="l00804"></a>00804 
<a name="l00805"></a>00805         
<a name="l00806"></a>00806 
<a name="l00809"></a>00809         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>() <span class="keyword">const</span>;
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 
<a name="l00817"></a>00817         rvector <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">getMean</a>() <span class="keyword">const</span>;
<a name="l00818"></a>00818         
<a name="l00819"></a>00819         <span class="comment">//gat41</span>
<a name="l00823"></a>00823 <span class="comment"></span>         rvector <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>() <span class="keyword">const</span>;
<a name="l00824"></a>00824          
<a name="l00825"></a>00825          <span class="comment">//gat41</span>
<a name="l00828"></a>00828 <span class="comment"></span>         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>() <span class="keyword">const</span>; 
<a name="l00829"></a>00829 
<a name="l00830"></a>00830       <span class="comment">//gat41</span>
<a name="l00833"></a>00833 <span class="comment"></span>       <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">getEmpMass</a>() <span class="keyword">const</span>;
<a name="l00834"></a>00834        
<a name="l00835"></a>00835        <span class="comment">//gat41</span>
<a name="l00838"></a>00838 <span class="comment"></span>         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>() <span class="keyword">const</span>; 
<a name="l00839"></a>00839       
<a name="l00840"></a>00840       <span class="comment">//gat41</span>
<a name="l00843"></a>00843 <span class="comment"></span>      real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>() <span class="keyword">const</span>;
<a name="l00844"></a>00844       real <a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">getHellingerDist1D</a>() <span class="keyword">const</span>;
<a name="l00845"></a>00845        
<a name="l00859"></a>00859 
<a name="l00860"></a>00860         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>() <span class="keyword">const</span>;
<a name="l00861"></a>00861 
<a name="l00862"></a>00862         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar) <span class="keyword">const</span>;
<a name="l00863"></a>00863   
<a name="l00864"></a>00864       <span class="comment">//gat41</span>
<a name="l00865"></a>00865       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>() <span class="keyword">const</span>;
<a name="l00866"></a>00866       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar) <span class="keyword">const</span>;
<a name="l00868"></a>00868 
<a name="l00871"></a>00871         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf589d16a3e20b4285f428c8dc42d75d" title="Get the sum of the count over volume in the leaf nodes.">getSumLeafCountOverVol</a>() <span class="keyword">const</span>;
<a name="l00872"></a>00872 
<a name="l00877"></a>00877         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a75d9675312fb76aaf98bbeb084f9d6" title="Get the count of the leaf with the smallest count.">getSmallestLeafCount</a>() <span class="keyword">const</span>;
<a name="l00878"></a>00878 
<a name="l00883"></a>00883         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae094573d2988d458e00a549039a6ad56" title="Get the count in the leaf with the smallest count.">getLargestLeafCount</a>() <span class="keyword">const</span>;
<a name="l00884"></a>00884 
<a name="l00885"></a>00885 
<a name="l00896"></a>00896         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">getLogLik</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l00897"></a>00897 
<a name="l00909"></a>00909         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433" title="Get change in log likelihood on split of this node.">getSplitChangeLogLik</a>() <span class="keyword">const</span>;
<a name="l00910"></a>00910 
<a name="l00923"></a>00923         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef" title="Get change in log likelihood on merge of this&#39; leaf chidren.">getMergeChangeLogLik</a>() <span class="keyword">const</span>;
<a name="l00924"></a>00924 
<a name="l00925"></a>00925 
<a name="l00933"></a>00933         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4" title="Get best change in EMP under COPERR from splitting any leaf.">getBestSplitChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l00934"></a>00934 
<a name="l00935"></a>00935 
<a name="l00943"></a>00943         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a53b9e7117d36f7730d458f26d74e0d28" title="Get best change in EMP under AIC from splitting any leaf.">getBestSplitChangeEMPAIC</a>() <span class="keyword">const</span>;
<a name="l00944"></a>00944 
<a name="l00951"></a>00951         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf8fbd3c03d1edeedbd5a793c9b822d" title="Get best change in EMP under COPERR from merging any subleaf.">getBestMergeChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l00952"></a>00952 
<a name="l00960"></a>00960         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a0e8b9126a14255276600bf5293d33e24" title="Get best change in EMP under AIC from merging any subleaf.">getBestMergeChangeEMPAIC</a>() <span class="keyword">const</span>;
<a name="l00961"></a>00961 
<a name="l00971"></a>00971         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a483f3b91707cda0deaee7a05d0523f3b" title="Get this node&#39;s scaled contribution to EMP under COPERR.">getEMPContributionCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l00972"></a>00972 
<a name="l00985"></a>00985         real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa939623d58172bc7f24ddf5dd249b5c2" title="Get this node&#39;s scaled contribution to EMP under AIC.">getEMPContributionAIC</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l00986"></a>00986 
<a name="l01000"></a>01000         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">getSplitChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l01001"></a>01001 
<a name="l01013"></a>01013         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">getSplitChangeEMPAIC</a>() <span class="keyword">const</span>;
<a name="l01014"></a>01014 
<a name="l01028"></a>01028         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l01029"></a>01029 
<a name="l01041"></a>01041         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>() <span class="keyword">const</span>;
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 
<a name="l01044"></a>01044     <span class="comment">//src_trunk_0701</span>
<a name="l01061"></a>01061 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other);
<a name="l01062"></a>01062     
<a name="l01089"></a>01089     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other,
<a name="l01090"></a>01090             <span class="keywordtype">size_t</span> minChildPoints);
<a name="l01091"></a>01091     <span class="comment">//--src_trunk_0701</span>
<a name="l01092"></a>01092 
<a name="l01098"></a>01098         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#aba02715cb75f803df7c3ffd1eaf027e8" title="Output details of a specific node.">nodePrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l01099"></a>01099 
<a name="l01113"></a>01113         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3cc0c8bb64c854ef16ba03891f5945d6" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l01114"></a>01114 
<a name="l01115"></a>01115 
<a name="l01123"></a>01123         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l01124"></a>01124 
<a name="l01136"></a>01136         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l01137"></a>01137                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l01138"></a>01138 
<a name="l01150"></a>01150         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(std::ostream &amp;os,
<a name="l01151"></a>01151                                     <span class="keyword">const</span> <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l01152"></a>01152 
<a name="l01165"></a>01165         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l01166"></a>01166                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l01167"></a>01167 
<a name="l01168"></a>01168 
<a name="l01181"></a>01181         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeightAndEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l01182"></a>01182                             std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l01183"></a>01183 
<a name="l01184"></a>01184 
<a name="l01189"></a>01189         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278" title="Get scaled EMP sum under COPERR for tree rooted at this.">getEMPSumCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l01190"></a>01190 
<a name="l01195"></a>01195         dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15" title="Get the unscaled EMP sum under AIC for tree rooted at this.">getEMPSumAIC</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n) <span class="keyword">const</span>;
<a name="l01196"></a>01196 
<a name="l01233"></a>01233         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l01234"></a>01234                         <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd = <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>) <span class="keyword">const</span>;
<a name="l01235"></a>01235                 
<a name="l01244"></a>01244         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988" title="Get the number of points in any box.">spsContains</a>(ivector &amp; z, <span class="keywordtype">int</span> countBox, <span class="keywordtype">int</span> countInBox) <span class="keyword">const</span>;             
<a name="l01245"></a>01245                 
<a name="l01246"></a>01246 
<a name="l01258"></a>01258         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(<span class="keywordtype">int</span> comp);
<a name="l01259"></a>01259 
<a name="l01269"></a>01269         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> comp);
<a name="l01270"></a>01270 
<a name="l01278"></a>01278         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>();
<a name="l01279"></a>01279 
<a name="l01280"></a>01280 
<a name="l01291"></a>01291         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest);
<a name="l01292"></a>01292 
<a name="l01302"></a>01302         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l01303"></a>01303 
<a name="l01304"></a>01304 
<a name="l01331"></a>01331         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a61c584952df4fa77109cb4bb9b46f657" title="Try to reunite nodes to form one leaf.">nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* rChild);
<a name="l01332"></a>01332 
<a name="l01338"></a>01338         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae1d11e62b133e13be6c14f7ff759f152" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *lChild);
<a name="l01339"></a>01339 
<a name="l01345"></a>01345         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4049a0078541b24d5451957f6f7dcd68" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *rChild);
<a name="l01346"></a>01346 
<a name="l01347"></a>01347 
<a name="l01367"></a>01367         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(<a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr,
<a name="l01368"></a>01368                             <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd,
<a name="l01369"></a>01369                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest);
<a name="l01370"></a>01370 
<a name="l01371"></a>01371 
<a name="l01384"></a>01384         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2dfb3087cff36fdf558bf75d5ee039c9">unionTreeStructure</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l01385"></a>01385                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs);
<a name="l01386"></a>01386 
<a name="l01387"></a>01387       <span class="comment">//src_trunk_0701</span>
<a name="l01395"></a>01395 <span class="comment"></span>      <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8ce80cd650645f34e79fbc1d4beb2326" title="Swap this and another node. Swaps all the data members of this with the other node.">swapSPS</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn); <span class="comment">// throw()</span>
<a name="l01396"></a>01396 
<a name="l01397"></a>01397 
<a name="l01398"></a>01398     };    <span class="comment">// end of SPSnode class derived from SPnode class</span>
<a name="l01399"></a>01399 
<a name="l01400"></a>01400 
<a name="l01401"></a>01401 
<a name="l01402"></a>01402 
<a name="l01403"></a>01403 } <span class="comment">// end namespace subpavings</span>
<a name="l01404"></a>01404 
<a name="l01406"></a>01406 <span class="keyword">namespace </span>std
<a name="l01407"></a>01407 {
<a name="l01408"></a>01408   <span class="keyword">template</span> &lt;&gt;
<a name="l01409"></a>01409   <span class="keywordtype">void</span> swap(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">subpavings::SPSnode</a> &amp; s1, 
<a name="l01410"></a>01410       <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">subpavings::SPSnode</a> &amp; s2); <span class="comment">// throw ()</span>
<a name="l01411"></a>01411   
<a name="l01412"></a>01412 }
<a name="l01413"></a>01413 
<a name="l01414"></a>01414 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spsnode_8hpp.shtml">spsnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
