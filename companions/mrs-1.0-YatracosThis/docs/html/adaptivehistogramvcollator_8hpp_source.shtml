<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogramvcollator.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogramvcollator_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogramvcollator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogramvcollator_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___ADAPTIVEHISTVCOLL_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___ADAPTIVEHISTVCOLL_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramvalidation_8hpp.shtml" title="AdaptiveHistogramValidation declarations.">adaptivehistogramvalidation.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="sptypes_8hpp.shtml" title="Includes and general typedefs for subpavings.">sptypes.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="histevalobjval_8hpp.shtml">histevalobjval.hpp</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>subpavings {
<a name="l00037"></a>00037 
<a name="l00075"></a>00075 <span class="comment">//==============AdaptiveHistogramVCollator class declarations================//</span>
<a name="l00076"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml">00076</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> {
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">//----------------private members-----------------------------------------------</span>
<a name="l00079"></a>00079 <span class="keyword">private</span>:
<a name="l00080"></a>00080 
<a name="l00085"></a>00085     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * spn);
<a name="l00086"></a>00086 
<a name="l00099"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac">00099</a>     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aceeaa0eac30ad826088e670544e1fcac" title="Pointer to the root CollatorSPVnode.">rootVCollator</a>;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="comment">//----------------public members-----------------------------------------------</span>
<a name="l00102"></a>00102 <span class="keyword">public</span>:
<a name="l00105"></a>00105     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator</a>();
<a name="l00106"></a>00106 
<a name="l00110"></a>00110     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; adh, 
<a name="l00111"></a>00111                                         <span class="keywordtype">int</span> whatSum);
<a name="l00112"></a>00112 
<a name="l00115"></a>00115     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator</a>
<a name="l00116"></a>00116         (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; other);
<a name="l00117"></a>00117   
<a name="l00120"></a>00120    <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#addfe1e7d9ec6cfeed3bcbd6f35ce98b2" title="Default constructor.">AdaptiveHistogramVCollator</a>(
<a name="l00121"></a>00121       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; other, <span class="keywordtype">int</span> toSubtract);   
<a name="l00122"></a>00122 
<a name="l00125"></a>00125     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp;
<a name="l00126"></a>00126         <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a06855795e0d1d9c5a268ec91153346d4" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs);
<a name="l00127"></a>00127 
<a name="l00137"></a>00137     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ae8856c3f66db77b6f0ce896ff4f54ce5">operator+=</a>(<span class="keyword">const</span>
<a name="l00138"></a>00138                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs);
<a name="l00139"></a>00139 
<a name="l00149"></a>00149     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a56acb0f59cd7c99a5ef8db73fd2b3294">operator-</a>(<span class="keyword">const</span>
<a name="l00150"></a>00150                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00155"></a>00155     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7fdc8a90199d4b39d4fb9179a8aada56" title="Destructor.">~AdaptiveHistogramVCollator</a>();
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00169"></a>00169     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1d9fe1618884a4cdbfc211a04dcd4a65">makeAverage</a>() <span class="keyword">const</span>;
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00174"></a>00174     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4fc5807fde8de008b9551f6347c6d46e" title="Return a pointer to the CollatorSPVnode this manages.">getSubPaving</a>() <span class="keyword">const</span>;
<a name="l00175"></a>00175 
<a name="l00178"></a>00178     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() <span class="keyword">const</span>;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a6cbc7efc97efaa397a6ed5c38b817e3a" title="Make a .dot graph file from collated histogram structure.">outputGraphDot</a>() <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00203"></a>00203     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#af05a34e32911a81b2af37529994bae57" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00204"></a>00204 
<a name="l00212"></a>00212     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b" title="Output the accumulated data over the collation to a txt file.">outputAccumulationToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00213"></a>00213    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ac58c3f7d536168d4c9c8cbceb95b1908">outputDifferenceToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00222"></a>00222     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l00223"></a>00223    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> whichColl) <span class="keyword">const</span>;
<a name="l00224"></a>00224 
<a name="l00227"></a>00227     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; adh, 
<a name="l00228"></a>00228                       <span class="keywordtype">int</span> whatSum,
<a name="l00229"></a>00229                       <span class="keywordtype">size_t</span> &amp; agg);
<a name="l00230"></a>00230    
<a name="l00236"></a>00236    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* &amp;splitCollNode, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn);
<a name="l00237"></a>00237     
<a name="l00262"></a>00262   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> splitCollNode,
<a name="l00263"></a>00263   std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecRowYatSet,
<a name="l00264"></a>00264   std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecColYatSet,
<a name="l00265"></a>00265   std::list&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listYatSet );
<a name="l00266"></a>00266  
<a name="l00281"></a>00281     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a174349942bc7f76e6804aeb3714d1f3b" title="Get the delta value for each Yatracos element at the specified split number.">getNodesDelta</a>(
<a name="l00282"></a>00282         std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSet, 
<a name="l00283"></a>00283         <span class="keywordtype">int</span> thisTheta);
<a name="l00284"></a>00284    <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a045c1338ed19503f5485f40ee7d2e218">getNodesMaxDelta</a>(
<a name="l00285"></a>00285         std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecYatSet, 
<a name="l00286"></a>00286         <span class="keywordtype">int</span> thisTheta);
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 
<a name="l00299"></a>00299    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(std::list&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listYatSet, 
<a name="l00300"></a>00300    std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecRowYatSet, 
<a name="l00301"></a>00301    std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecColYatSet, 
<a name="l00302"></a>00302    std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecMaxDeltaVec);
<a name="l00303"></a>00303   
<a name="l00312"></a>00312   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a6b81c529e7249fa666b288e24cbac5fd" title="Get the minimum distance estimate from the MDE method.">getBisectionSearchEstimate</a>(<span class="keywordtype">int</span> method, std::vector&lt;size_t&gt; &amp; winner, 
<a name="l00313"></a>00313                               std::vector&lt;size_t&gt; &amp; loser,
<a name="l00314"></a>00314                       std::vector&lt;double&gt; &amp; deltaWinner,
<a name="l00315"></a>00315                      std::vector&lt;double&gt; &amp; deltaLoser); 
<a name="l00316"></a>00316 
<a name="l00326"></a>00326    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a78eefcadb3a5247ce6712493b85976f9" title="Get the thetas that gives the minimum distance. Get the thetas that gives the minimum distance...">getMinDistTheta</a>(
<a name="l00327"></a>00327    std::vector&lt; std::vector&lt;int&gt; &gt; &amp; vecMinDistTheta, 
<a name="l00328"></a>00328    std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaMaxVec, <span class="keywordtype">int</span> n);
<a name="l00329"></a>00329   
<a name="l00330"></a>00330    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(<span class="keywordtype">int</span> maxCheck, std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaMaxVec);
<a name="l00331"></a>00331   
<a name="l00332"></a>00332   
<a name="l00343"></a>00343   std::vector&lt;double&gt; <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab121bb960439438575c2115944990724" title="Get the infimum delta value for all thetas.">getInfDelta</a>(std::vector&lt;double&gt; &amp; vecInfDelta, 
<a name="l00344"></a>00344                    std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaMaxVec, <span class="keywordtype">int</span> n);
<a name="l00345"></a>00345 
<a name="l00349"></a>00349   ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a53105611d6db4dc208275fd049475cd6" title="Get the root box. Get the root box of the AdaptiveHistogramVCollator object.">getRootBox</a>();
<a name="l00350"></a>00350   
<a name="l00351"></a>00351   
<a name="l00362"></a>00362   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#aa66a678df6a370f60bb7141ddb28a043">getScheffeSetAll</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> splitNode,
<a name="l00363"></a>00363     vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecScheffeSet,
<a name="l00364"></a>00364     list&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; listScheffeSet);
<a name="l00365"></a>00365     
<a name="l00368"></a>00368    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a4b3830bf47fe4738c22f4a53858d90fc">getScheffeWinner</a>( 
<a name="l00369"></a>00369     std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecScheffeSet, 
<a name="l00370"></a>00370     std::vector&lt; std::vector&lt;int&gt; &gt; &amp; vecWinnerVec,
<a name="l00371"></a>00371     std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaWinnerVec);
<a name="l00372"></a>00372 
<a name="l00374"></a>00374   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a8f7b4de816404be827c1b201aa0d6edc">getHistScheffeSet</a>(
<a name="l00375"></a>00375   std::vector&lt; std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec);
<a name="l00376"></a>00376   
<a name="l00377"></a>00377   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a596a34b5f83f532160c5ab9104d6aa00">getHistYatSet</a>(
<a name="l00378"></a>00378   std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; vecYatSet);
<a name="l00379"></a>00379   
<a name="l00380"></a>00380   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a1ea3cb0ee5fea756fc45445fec2db166">getHistScheffeWinner</a>( 
<a name="l00381"></a>00381   std::vector&lt; std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec, 
<a name="l00382"></a>00382   std::vector&lt; std::vector&lt;int&gt; &gt; &amp; vecWinnerVec,
<a name="l00383"></a>00383   std::vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaWinnerVec);
<a name="l00384"></a>00384   
<a name="l00385"></a>00385   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a130f3418c9610b38030221924a846011">getMinDistEst</a>(std::vector&lt;double&gt; &amp; maxDelta, std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less&lt;CollatorSPVnode*&gt; &gt; &gt; &amp; veYatSet);
<a name="l00386"></a>00386   
<a name="l00387"></a>00387 
<a name="l00389"></a>00389   
<a name="l00390"></a>00390    <span class="comment">// computes minimal subpavings from sibling subpavings</span>
<a name="l00391"></a>00391    <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l00392"></a>00392    <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l00393"></a>00393    <span class="comment">// and create summary data for new parent from children</span>
<a name="l00394"></a>00394    <span class="comment">// warning: nodeReunite would not normally be used with</span>
<a name="l00395"></a>00395    <span class="comment">// CollatorSPVnodes but is in the base class and is</span>
<a name="l00396"></a>00396    <span class="comment">// reimplemented to try do it appropriately for this</span>
<a name="l00397"></a>00397    <span class="comment">// derived class should it be needed.</span>
<a name="l00398"></a>00398    <span class="comment">// This function is untested.</span>
<a name="l00399"></a>00399   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">makeMinimal</a>(); 
<a name="l00400"></a>00400   
<a name="l00401"></a>00401                     
<a name="l00404"></a>00404    std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a503d9bbe2f7854466570bad4fd2d0d42" title="get leaf levels string">getLeafLevelsString</a>() <span class="keyword">const</span>;
<a name="l00405"></a>00405    
<a name="l00406"></a>00406    <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">getTotalNodes</a>();
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 }; <span class="comment">// end of declaring functions of AdaptiveHistogramVCollator class</span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment">//=========End of AdaptiveHistogramVCollator class declarations================//</span>
<a name="l00411"></a>00411 } <span class="comment">// end of namespace subpavings</span>
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="comment">//===============Non-member function declarations=============================// </span>
<a name="l00418"></a>00418 <span class="comment"></span>std::ostream &amp; <a class="code" href="adaptivehistogram_8cpp.shtml#ae2f172a2081430943222aff00bd4d1e8" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l00419"></a>00419             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">subpavings::AdaptiveHistogramVCollator</a>&amp; adhc);
<a name="l00420"></a>00420 
<a name="l00423"></a>00423 <span class="keywordtype">double</span> <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#af83155cd50512e4cbad3f931370478ee" title="Find if double is negative.">isNegative</a>(<span class="keywordtype">double</span> d);
<a name="l00424"></a>00424 
<a name="l00427"></a>00427 <span class="keywordtype">void</span> <a class="code" href="adaptivehistogramvcollator_8cpp.shtml#a39dfa308727bd7dc5fcd538fa199ca49" title="Output all boxes in collator to text file.">outputAllNodesToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">subpavings::AdaptiveHistogramVCollator</a>&amp; adhc); 
<a name="l00428"></a>00428 <span class="comment">//===============Non-member function declarations=============================//</span>
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="preprocessor">#endif</span>
<a name="l00433"></a>00433 <span class="preprocessor"></span>
<a name="l00434"></a>00434  
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogramvcollator_8hpp.shtml">adaptivehistogramvcollator.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
