<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: taylor Namespace Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('namespacetaylor.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">taylor Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>, 
<a class="el" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>
<br/>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>, 
<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>, 
<br/>
&#160;&#160;<a class="el" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a> (int order, int nr, const interval &amp;value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a> (int order, const interval &amp;value)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a23cd9841df525cfac085fbeb62bf52a9">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#ac90353a98ada0c22146b3ea9f0ac7a4d">d2t</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a729ed4a1540f3e481333c864233cd8ad">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6d905ffff19d4d823f32782893096d4a">operator-</a> (const interval &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a2a26f996b068d51e9ee8d146d0dbcf19">operator+</a> (const interval &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a773f854b7253664683fcdc3c2c31279a">operator*</a> (const interval &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac0269d08341f74bef9f161ce04311b99">operator/</a> (const interval &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a27893615a38a300f3a98f155f97554ab">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const interval &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a84b7a1ad831a7d8ff885b7d62c12776c">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const interval &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a4cf47e58467d78b59fb31fe7d4a03ec6">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const interval &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a20f576697e1b2eb2a4247ffe570c4f69">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const interval &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad8414f5a1f2b7470dbac63025f7b60b7">operator-</a> (const real &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a4cd1e6c0c0f68726e5b5e95dfd562a70">operator+</a> (const real &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a778ece51c4eb943bcb8fefc1c98c66f4">operator*</a> (const real &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a627c5d5998ccdab6c81f898f33b3a0a3">operator/</a> (const real &amp;s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a583320e2035ee35796b1dc51d126a40e">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const real &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6aba8d7ae778ad5a8def497a81f93492">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const real &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3fab97783f44e1f70ee6a7b8ac7be6b9">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const real &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a83601375c928236047d6b8dc3158825c">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const real &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a75af8bfdf49bcf4578549a97b6516967">operator-</a> (int s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a0700323b633a69c7be77f26b66949859">operator+</a> (int s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a8437d42cd673464c45a80ba9550e6940">operator*</a> (int s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a7ad8547d33175b25f92470ef452be7e4">operator/</a> (int s, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa5a95b7e47b25250650f42f3aa9d3804">operator-</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, int t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a59f1aebf6bfff7b2b294cd5d50f11f15">operator+</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, int t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a7c14e8a638ba74fc191880a4eae70174">operator*</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, int t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#afed918a308085255f702c43ce94eb87d">operator/</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, int t)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, const interval &amp;alpha)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s, int n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">erfc</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a> (const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;g, const <a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> &amp;u, int _fkt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac56dff7aa717d97652479e90f605ab2e">init_var</a> (int order, ivector &amp;values)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (const <a class="el" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#a40f7b267e7bca7091a0d4b941ebe3495">d2tv</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (const <a class="el" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#a40f7b267e7bca7091a0d4b941ebe3495">d2tv</a>)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">var_itaylor</a> (int ord, const real &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a44a70c367b1b6a794db51766b92e6199">var_itaylor</a> (int ord, const interval &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">const_itaylor</a> (int ord, const real &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a181e11b88a03a4851d44b5cfd6adbd78">const_itaylor</a> (int ord, const interval &amp;c)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">ivector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a50419e8b461f8b4155495d943cbc4469">get_all_coef</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a6694e32c6d5d68b7081fe4079435279e">get_j_coef</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int j)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">print_itaylor</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a48b8404764aa49f337985ba478f4e201">print_itaylor</a> (std::ostream &amp;os, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int width, int digits)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af2f42b7045a6bc7bdf5225bb5b7f07bc">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a92d08c093471e48086af561e044283d2">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3a700687e786e96af9fb63575f941188">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a02e03dd1f37b791466c6ceaff7dadb36">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a67bd05fe808051b2bd312fb3f488d448">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a782087dc9a12d1b6eb6ecd189b7454f8">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac0be684300be0c2c140b5f21a18a021d">operator-</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a0ccc4b187f19c84e174cff0e0415baf9">operator+</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a852eb06a98b349480553d8124724dbc0">operator*</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a38d9e25f2193b6de0fb6a5a235c4a617">operator/</a> (const interval &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a5fbafc16645c05d60634be3ba1ae75fe">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a73e071be2c515e2213963c5d4adfd978">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a464e53f823f12c772db53cf1a34583d6">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa35f5bbbbd3b7efecf6db9a0900e3a58">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aea48d1e448300b1b05ce34a3c9228fd6">operator-</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a401f53ac76107b6d9b890b4b0ecbd423">operator+</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#afb0205c63be46b8c4d65b46f0f2c63d5">operator*</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ab62d7c3647e2a62d7863f6cb838ed71f">operator/</a> (const real &amp;x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a32e05ef71dbf31a76381ce8e36d8684d">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa32df806dfcdb79632f619d6e725877b">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac5cd097e68711b10ef867594c1c4873e">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a240b2c541cf0d46b9a7810987448631c">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const real &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a8ba1d848b912b57f58e2dbbbb1da7091">operator-</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad3050b08b9a846b6b6d7556593d4d43f">operator+</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a0584bb8817c35fb018eb6a16346396fa">operator*</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aa68052fbd6ae385609fb861cd61c970d">operator/</a> (int x, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a99a5e76ba886177f7789b309a1321c32">operator-</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad7810135b75df4525eeaa320940436d3">operator+</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aabf6fb8b1928b06ac73dfc55bee2e993">operator*</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a770113818b5fc83f7eefe876cbdd8295">operator/</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int y)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9962829203c2ce858b9158543d577e0d">f_g_u</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;g, const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;u, int nb_function)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a37319bcf4ecec3b74d87c39c9b5a8fce">sqr</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a5a055d2fa829aab1ef9d9d452dbf635b">sqrt</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af9650236965b00326a3be8175c47789c">sqrt</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int n)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a72536b0978e6cdcec6adf898e2642d31">sqrtx2m1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a8a7b5c467bf63f6e51bd5b6c55ddd74d">sqrtp1m1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a585467c43fcacacb16fcfa01320f4a15">pow</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, const interval &amp;alpha)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af95b8719093fcf56b4c366a57a604c0e">exp</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af148c02264bd6b573ce1edf7fca71aa0">expm1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ac7c27e2d4a78dbeaa37fb7803f8d1170">ln</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ae68d1b569d3411210304ec4001ea4a1e">lnp1</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a62ec379740c8e57b65eb49a4f78c86f5">sin</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3ffa0c28ccb08c1f1b043e9dfab43c04">cos</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3cbd901c0e176be2efe58be70bb48db6">tan</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9e16ad2608259386bb54992b05bb9da9">cot</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ace92ea0efa6fa5768a476784b1761859">sinh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a964f8e36028c83bc8ae0b836730a900c">cosh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a0de984183956000ebf6f44a817719266">tanh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a968502b349e1cd5621644b34495d9b3f">coth</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a8d6631d0906e0dbe8d5e0e573e6197ae">asin</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a10ee4a237acfa23e5566bdbc6256c34b">acos</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ad4efebf4e010be4ae41fdc661f00417d">atan</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#af339a9fb39e8c7141cc881baa47c4ea8">acot</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#aea804ac21a6ac493d1b3b94c320c6d5f">asinh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a9aedcec32b2edf6a4f93169199469bb5">acosh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a3f93cbff36aa827c4da8179674cc1d41">atanh</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a425c4a560efdc61060e7c8d368c56a8f">acoth</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#ae34779c49ee5e1ce798eafb83de238d0">erf</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a33b5e2b4ab7dcafac6e1d96991c94e8d">erfc</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a319f85acd3f83eb66fba6be32346573e">sqrt1px2</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacetaylor.shtml#a51730e93b533e086e3d94d2aaeba4e24">powerAtZero</a> (const <a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> &amp;x, int n)</td></tr>
</table>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1"></a><!-- doxytag: member="taylor::@2" ref="ab4d808ea2ed63652c85b7ab94c9f92f1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad"></a><!-- doxytag: member="_ln" ref="ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad" args="" -->_ln</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce"></a><!-- doxytag: member="_lnp1" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce" args="" -->_lnp1</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311"></a><!-- doxytag: member="_tan" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311" args="" -->_tan</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb"></a><!-- doxytag: member="_cot" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb" args="" -->_cot</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244"></a><!-- doxytag: member="_asin" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244" args="" -->_asin</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef"></a><!-- doxytag: member="_acos" ref="ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef" args="" -->_acos</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070"></a><!-- doxytag: member="_atan" ref="ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070" args="" -->_atan</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b"></a><!-- doxytag: member="_acot" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b" args="" -->_acot</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f"></a><!-- doxytag: member="_tanh" ref="ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f" args="" -->_tanh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b"></a><!-- doxytag: member="_coth" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b" args="" -->_coth</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab"></a><!-- doxytag: member="_asinh" ref="ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab" args="" -->_asinh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d"></a><!-- doxytag: member="_acosh" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d" args="" -->_acosh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627"></a><!-- doxytag: member="_atanh" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627" args="" -->_atanh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c"></a><!-- doxytag: member="_acoth" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c" args="" -->_acoth</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd"></a><!-- doxytag: member="_sqrtp1m1" ref="ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd" args="" -->_sqrtp1m1</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">40</a> of file <a class="el" href="dim2taylor_8hpp_source.shtml">dim2taylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>,
       <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>,<a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>};
</pre></div>
</div>
</div>
<a class="anchor" id="ad243b95550a1735c01bab6b0461151e5"></a><!-- doxytag: member="taylor::@3" ref="ad243b95550a1735c01bab6b0461151e5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615"></a><!-- doxytag: member="_i_ln" ref="ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615" args="" -->_i_ln</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7"></a><!-- doxytag: member="_i_tan" ref="ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7" args="" -->_i_tan</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166"></a><!-- doxytag: member="_i_cot" ref="ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166" args="" -->_i_cot</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0"></a><!-- doxytag: member="_i_asin" ref="ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0" args="" -->_i_asin</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538"></a><!-- doxytag: member="_i_acos" ref="ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538" args="" -->_i_acos</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8"></a><!-- doxytag: member="_i_atan" ref="ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8" args="" -->_i_atan</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a"></a><!-- doxytag: member="_i_acot" ref="ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a" args="" -->_i_acot</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034"></a><!-- doxytag: member="_i_tanh" ref="ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034" args="" -->_i_tanh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb"></a><!-- doxytag: member="_i_coth" ref="ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb" args="" -->_i_coth</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351"></a><!-- doxytag: member="_i_asinh" ref="ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351" args="" -->_i_asinh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1"></a><!-- doxytag: member="_i_acosh" ref="ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1" args="" -->_i_acosh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e"></a><!-- doxytag: member="_i_atanh" ref="ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e" args="" -->_i_atanh</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd"></a><!-- doxytag: member="_i_acoth" ref="ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd" args="" -->_i_acoth</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="itaylor_8hpp_source.shtml#l00073">73</a> of file <a class="el" href="itaylor_8hpp_source.shtml">itaylor.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>,

    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>,

    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>,

    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>,

    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>,
    <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>

};
</pre></div>
</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3867edce0982f0a3c9a43dc31482e182"></a><!-- doxytag: member="taylor::acos" ref="a3867edce0982f0a3c9a43dc31482e182" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">taylor::acos</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">1267</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_acos</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s) );

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acos : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a10ee4a237acfa23e5566bdbc6256c34b"></a><!-- doxytag: member="taylor::acos" ref="a10ee4a237acfa23e5566bdbc6256c34b" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">taylor::acos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01373">1373</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00080">_i_acos</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g = -<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acos : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9f1462a458f207377ed02a451a36ff1f"></a><!-- doxytag: member="taylor::acosh" ref="a9f1462a458f207377ed02a451a36ff1f" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">taylor::acosh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">1336</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_acosh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">sqrtx2m1()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

<span class="comment">// g=sqrt(sqr(s)-interval(1.0));</span>
 g = <a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acosh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9aedcec32b2edf6a4f93169199469bb5"></a><!-- doxytag: member="taylor::acosh" ref="a9aedcec32b2edf6a4f93169199469bb5" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">taylor::acosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01443">1443</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00088">_i_acosh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">sqrtx2m1()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">sqrtx2m1</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acosh : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0139feef1c89483743115ace4c903cb3"></a><!-- doxytag: member="taylor::acot" ref="a0139feef1c89483743115ace4c903cb3" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">taylor::acot</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">1301</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_acot</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-(interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acot : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af339a9fb39e8c7141cc881baa47c4ea8"></a><!-- doxytag: member="taylor::acot" ref="af339a9fb39e8c7141cc881baa47c4ea8" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">taylor::acot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01411">1411</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00082">_i_acot</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-(interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));

    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9af34046db505e67a68ae0d5d279c253"></a><!-- doxytag: member="taylor::acoth" ref="a9af34046db505e67a68ae0d5d279c253" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">taylor::acoth</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">1371</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_acoth</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor acoth : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a425c4a560efdc61060e7c8d368c56a8f"></a><!-- doxytag: member="taylor::acoth" ref="a425c4a560efdc61060e7c8d368c56a8f" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">taylor::acoth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01487">1487</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00090">_i_acoth</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, acoth : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  

    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa70b136998e9a89b2d6a27321d8feece"></a><!-- doxytag: member="taylor::asin" ref="aa70b136998e9a89b2d6a27321d8feece" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">taylor::asin</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">1250</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_asin</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s) );

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asin : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8d6631d0906e0dbe8d5e0e573e6197ae"></a><!-- doxytag: member="taylor::asin" ref="a8d6631d0906e0dbe8d5e0e573e6197ae" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">taylor::asin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01351">1351</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00079">_i_asin</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, asin : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afcdc71ef653789e9ca26967ff46eff8f"></a><!-- doxytag: member="taylor::asinh" ref="afcdc71ef653789e9ca26967ff46eff8f" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">taylor::asinh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">1318</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_asinh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">sqrt1px2()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

<span class="comment">// g=sqrt(interval(1.0)+sqr(s));</span>
 g = <a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(s); <span class="comment">// Blomquist, 05.10.05;</span>

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor asinh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aea804ac21a6ac493d1b3b94c320c6d5f"></a><!-- doxytag: member="taylor::asinh" ref="aea804ac21a6ac493d1b3b94c320c6d5f" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">taylor::asinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01427">1427</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00087">_i_asinh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">sqrt1px2()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">sqrt1px2</a>(x);

    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a00d9d7639819d35765a178885d274518"></a><!-- doxytag: member="taylor::atan" ref="a00d9d7639819d35765a178885d274518" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">taylor::atan</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">1284</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_atan</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atan : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad4efebf4e010be4ae41fdc661f00417d"></a><!-- doxytag: member="taylor::atan" ref="ad4efebf4e010be4ae41fdc661f00417d" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">taylor::atan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01395">1395</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00081">_i_atan</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);

    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad1aa16e085966399831df0b1718a7e89"></a><!-- doxytag: member="taylor::atanh" ref="ad1aa16e085966399831df0b1718a7e89" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">taylor::atanh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">1354</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_atanh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s);

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor atanh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f93cbff36aa827c4da8179674cc1d41"></a><!-- doxytag: member="taylor::atanh" ref="a3f93cbff36aa827c4da8179674cc1d41" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">taylor::atanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01465">1465</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00089">_i_atanh</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=interval(1.0)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, atanh : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a08f702327849871fe51880e06ca9d597"></a><!-- doxytag: member="taylor::const_itaylor" ref="a08f702327849871fe51880e06ca9d597" args="(int ord, const real &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">taylor::const_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00162">162</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord);
 erg.tayl[0]=interval(c);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.tayl);i++) erg.tayl[i]=interval(0.0);
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a181e11b88a03a4851d44b5cfd6adbd78"></a><!-- doxytag: member="taylor::const_itaylor" ref="a181e11b88a03a4851d44b5cfd6adbd78" args="(int ord, const interval &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a08f702327849871fe51880e06ca9d597">taylor::const_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00172">172</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord);
 erg.tayl[0]=c;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(erg.tayl);i++) erg.tayl[i]=interval(0.0);
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af7e3108838177d298e5ef3930dd9605f"></a><!-- doxytag: member="taylor::cos" ref="af7e3108838177d298e5ef3930dd9605f" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">taylor::cos</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">1052</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l01185">cos()</a>, <a class="el" href="Quadrature_8cpp_source.shtml#l00040">Levy()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00088">LevyOP()</a>, <a class="el" href="LevyFobj2D_8cpp_source.shtml#l00025">LevyFobj2D::operator()()</a>, <a class="el" href="LevyDensityFobj2D_8cpp_source.shtml#l00026">LevyDensityFobj2D::operator()()</a>, <a class="el" href="oscFobj1_8cpp_source.shtml#l00053">OscFobj::operator()()</a>, <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00047">FCesaroBellNo::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">tan()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=-sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ffa0c28ccb08c1f1b043e9dfab43c04"></a><!-- doxytag: member="taylor::cos" ref="a3ffa0c28ccb08c1f1b043e9dfab43c04" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">taylor::cos</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01185">1185</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(order);   <span class="comment">// sin</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(order);   <span class="comment">// cos</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
    erg2.tayl[0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= real(-1.0)/interval(j)*s2;
    }
 <span class="keywordflow">return</span> erg2; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9a41b2f1f6cfea4f5146f27d8d9ee641"></a><!-- doxytag: member="taylor::cosh" ref="a9a41b2f1f6cfea4f5146f27d8d9ee641" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">taylor::cosh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">1173</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l01285">cosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">tanh()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg2;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a964f8e36028c83bc8ae0b836730a900c"></a><!-- doxytag: member="taylor::cosh" ref="a964f8e36028c83bc8ae0b836730a900c" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">taylor::cosh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01285">1285</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(order); <span class="comment">// sinh</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(order); <span class="comment">// cosh</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
    erg2.tayl[0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>

    <span class="comment">// remaining elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= s2/interval(j);
    }
    <span class="keywordflow">return</span> erg2; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8bcfd211cb4e124595338a744cdb6384"></a><!-- doxytag: member="taylor::cot" ref="a8bcfd211cb4e124595338a744cdb6384" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">taylor::cot</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">1113</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_cot</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor cot : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9e16ad2608259386bb54992b05bb9da9"></a><!-- doxytag: member="taylor::cot" ref="a9e16ad2608259386bb54992b05bb9da9" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">taylor::cot</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01235">1235</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00077">_i_cot</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, cot : wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aefaa4af7f76ead12f661bc9dba615f13"></a><!-- doxytag: member="taylor::coth" ref="aefaa4af7f76ead12f661bc9dba615f13" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">taylor::coth</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">1233</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_coth</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor coth : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a968502b349e1cd5621644b34495d9b3f"></a><!-- doxytag: member="taylor::coth" ref="a968502b349e1cd5621644b34495d9b3f" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">taylor::coth</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01329">1329</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00085">_i_coth</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, coth : wrong argument &quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac58758459f916c91fbadcdb56c22c543"></a><!-- doxytag: member="taylor::erf" ref="ac58758459f916c91fbadcdb56c22c543" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">taylor::erf</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">1389</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">exp()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="FShiryaev1D_8hpp_source.shtml#l00025">Pi</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01509">erf()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01434">erfc()</a>, and <a class="el" href="errorfunc_8cpp_source.shtml#l00176">FinMixCDF()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);

 idotprecision sum_idot;
 interval sum;

 dim2taylor g(s.p);

 g=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s));

 erg[0][0]=<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
                                     <span class="comment">// equiv. to erg(k1,k2) in Braeuer Thesis</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot, h*g[l][m], s[i-l][k-i-m]);
                                             <span class="comment">//Braeuer:s[k1-j1][k2-j2]</span>
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot, sum);  
       erg[i][k-i]=interval(2)*sum/(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
     }
       }
   }

 <span class="keywordflow">return</span> erg;

}
</pre></div>
</div>
</div>
<a class="anchor" id="ae34779c49ee5e1ce798eafb83de238d0"></a><!-- doxytag: member="taylor::erf" ref="ae34779c49ee5e1ce798eafb83de238d0" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">taylor::erf</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01509">1509</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="FShiryaev1D_8hpp_source.shtml#l00025">Pi</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
   
    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
        erg.tayl[k] = 0;
        
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*g.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] = 2*erg.tayl[k]/(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="FShiryaev1D_8hpp.shtml#a0c233fcb94ea9f05596b48427095806e">Pi</a>())*interval(k));
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7ba8a01793192f1b63febdb1dd9e3da0"></a><!-- doxytag: member="taylor::erfc" ref="a7ba8a01793192f1b63febdb1dd9e3da0" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">taylor::erfc</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01434">1434</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);

 erg=interval(1)-<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(s);

 <span class="keywordflow">return</span> erg;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a33b5e2b4ab7dcafac6e1d96991c94e8d"></a><!-- doxytag: member="taylor::erfc" ref="a33b5e2b4ab7dcafac6e1d96991c94e8d" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a7ba8a01793192f1b63febdb1dd9e3da0">taylor::erfc</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01533">1533</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);

    erg=interval(1)-<a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>(x); 

    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a478ad7631859d3793d8fc867cbd813d6"></a><!-- doxytag: member="taylor::exp" ref="a478ad7631859d3793d8fc867cbd813d6" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">taylor::exp</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">923</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="errorfunc_8cpp_source.shtml#l00059">BiGOP()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00140">RangedLabBox::BoxIntegral()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01085">exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01104">expm1()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="CoverageNormal_8cpp_source.shtml#l00461">FinMixInt1()</a>, <a class="el" href="CoverageNormal_8cpp_source.shtml#l00469">FinMixInt2()</a>, <a class="el" href="CoverageNormal_8cpp_source.shtml#l00422">FinMixPDF()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00668">gaussian()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01419">subpavings::SPSVnode::getHellingerDist()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01591">subpavings::SPSnode::getHellingerDist()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01651">subpavings::SPSVnode::getHellingerDist1D()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01820">subpavings::SPSnode::getHellingerDist1D()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01551">integrand()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00177">Fobj::inv_cdf()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00263">Fobj::LabBoxPriorIntegral()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01620">LaplaceIntegrand()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01589">LaplacePDF()</a>, <a class="el" href="Quadrature_8cpp_source.shtml#l00040">Levy()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00088">LevyOP()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01821">LognormalIntegrand()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01807">LognormalPDF()</a>, <a class="el" href="HellingerFunctionSimRosen_8cpp_source.shtml#l00116">main()</a>, <a class="el" href="GaussianFobj1D_8cpp_source.shtml#l00016">GaussianFobj1D::operator()()</a>, <a class="el" href="GaussianFobj2D_8cpp_source.shtml#l00016">GaussianFobj2D::operator()()</a>, <a class="el" href="LevyFobj2D_8cpp_source.shtml#l00025">LevyFobj2D::operator()()</a>, <a class="el" href="LevyDensityFobj2D_8cpp_source.shtml#l00026">LevyDensityFobj2D::operator()()</a>, <a class="el" href="ExampleFobj2D_8cpp_source.shtml#l00020">ExampleMappedFobj2D::operator()()</a>, <a class="el" href="RosenDensityFobj_8cpp_source.shtml#l00024">RosenDensityFobj::operator()()</a>, <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00020">RosenFobj2D::operator()()</a>, <a class="el" href="GaussianFobj9D_8cpp_source.shtml#l00016">GaussianFobj9D::operator()()</a>, <a class="el" href="GaussianFobj10D_8cpp_source.shtml#l00016">GaussianFobj10D::operator()()</a>, <a class="el" href="RosenFobj10D_8cpp_source.shtml#l00017">RosenFobj10D::operator()()</a>, <a class="el" href="GaussianFobj_8cpp_source.shtml#l00035">subpavings::GaussianFobj::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00075">FCFN3Star::operator()()</a>, <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00047">FCesaroBellNo::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00151">FCFN3UnRooted::operator()()</a>, <a class="el" href="RosenFobj100D_8cpp_source.shtml#l00018">RosenFobj100D::operator()()</a>, <a class="el" href="GaussianFobj100D_8cpp_source.shtml#l00016">GaussianFobj100D::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00279">FCFN3Rooted::operator()()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00203">SortBox::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, <a class="el" href="RosenFobj1000D_8cpp_source.shtml#l00018">RosenFobj1000D::operator()()</a>, <a class="el" href="GaussianFobj1000D_8cpp_source.shtml#l00016">GaussianFobj1000D::operator()()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00074">PijofT_CFNR()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00061">PijofT_JC69H()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00048">PijofT_JC69I()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00035">PijofT_JC69R()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00133">Fobj::PriorDensity()</a>, <a class="el" href="Quadrature_8cpp_source.shtml#l00015">Rosenbrock()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00129">RosenOP()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00946">MRSampler::SetupPDF()</a>, <a class="el" href="sptools_8cpp_source.shtml#l00471">subpavings::tryExp()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">MRSampler::updateUmax()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);

 idotprecision sum_idot;
 interval sum;

 erg[0][0]=<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating erg(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot, h*erg[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot, sum);  
       erg[i][k-i]=sum/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af95b8719093fcf56b4c366a57a604c0e"></a><!-- doxytag: member="taylor::exp" ref="af95b8719093fcf56b4c366a57a604c0e" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">taylor::exp</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01085">1085</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);

    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*erg.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] /= interval(k);
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="af148c02264bd6b573ce1edf7fca71aa0"></a><!-- doxytag: member="taylor::expm1" ref="af148c02264bd6b573ce1edf7fca71aa0" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#af148c02264bd6b573ce1edf7fca71aa0">taylor::expm1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01104">1104</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);

    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.tayl[0]); <span class="comment">// element No. 0; function value</span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += interval(k-j)*erg.tayl[j]*x.tayl[k-j]; 
  erg.tayl[k] /= interval(k);
    }
    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x.tayl[0])-real(1); <span class="comment">// = expm1(x.tayl[0]); Blomi</span>
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9962829203c2ce858b9158543d577e0d"></a><!-- doxytag: member="taylor::f_g_u" ref="a9962829203c2ce858b9158543d577e0d" args="(const itaylor &amp;f, const itaylor &amp;g, const itaylor &amp;u, int nb_function)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">taylor::f_g_u</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nb_function</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00807">807</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00080">_i_acos</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00088">_i_acosh</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00082">_i_acot</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00090">_i_acoth</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00079">_i_asin</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00087">_i_asinh</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00081">_i_atan</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00089">_i_atanh</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00077">_i_cot</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00085">_i_coth</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00074">_i_ln</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00076">_i_tan</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00084">_i_tanh</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">acosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">acot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">acoth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">asin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">asinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">atan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">atanh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">cot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">coth()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">ln()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">tan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">tanh()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(f);
 <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(g);
 <span class="keywordtype">int</span> order3=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(u);

 <span class="comment">// The following errors should be caught before </span>
 <span class="comment">// but for security here again:</span>
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error1 in f_g_u: different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <span class="keywordflow">if</span>(order3 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error2 in f_g_u: different orders &quot;</span> &lt;&lt; std::endl;
   exit(1);
  };

 <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in f_g_u : wrong argument &quot;</span> &lt;&lt; std::endl;
   exit(1);
  }; 

 <span class="keywordflow">switch</span>(nb_function) <span class="comment">// element No. 0</span>
   {
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a8fcf6f875b37c0aa5c89644590b86166">_i_cot</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abfe003e0629057bffb89b651938bf1b0">_i_asin</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0e6bfb124f89b1bf294b175f06077538">_i_acos</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5abf65dc4b082ecf737384746d43b1a5c8">_i_atan</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a61b3c0fd6458bc76fc889a2987130c0a">_i_acot</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a27bc1b9fb4071f33e5ac8ec97b5425bb">_i_coth</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(u.tayl[0]); <span class="keywordflow">break</span>; 

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeef7b8ef180b87cb529952918c694351">_i_asinh</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5a0db9706328a7be16f61b43452b6895c1">_i_acosh</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(u.tayl[0]); <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5af7bdf3211a989ae56091c95fbcc7998e">_i_atanh</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(u.tayl[0]); <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5ab65960d6f5503e0746118770cb8cd0cd">_i_acoth</a>:f.tayl[0]=<a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(u.tayl[0]); <span class="keywordflow">break</span>;
   }
 
 <span class="comment">// remaining elements:</span>
 interval sum; 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(f.tayl); j++) 
 {
     sum = interval(0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j-1; i++)
   sum += interval(i)*f.tayl[i]*g.tayl[j-i];
     f.tayl[j] = (u.tayl[j]-sum/interval(j)) / g.tayl[0];
 }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa89cea38f6aff7d86e21c6b63c526e3c"></a><!-- doxytag: member="taylor::f_g_u" ref="aa89cea38f6aff7d86e21c6b63c526e3c" args="(const dim2taylor &amp;f, const dim2taylor &amp;g, const dim2taylor &amp;u, int _fkt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">taylor::f_g_u</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>u</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>_fkt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">1447</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_acos</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_acosh</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_acot</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_acoth</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_asin</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_asinh</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_atan</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_atanh</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_cot</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_coth</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_ln</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_lnp1</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_sqrtp1m1</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_tan</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_tanh</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">acosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">acot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">acoth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">asin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">asinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">atan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">atanh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">cot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">coth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">ln()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">lnp1()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">sqrtp1m1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">tan()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">tanh()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">acosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">acot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">acoth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">asin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">asinh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">atan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">atanh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">cot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">coth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">ln()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">lnp1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">sqrtp1m1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">tan()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">tanh()</a>.</p>
<div class="fragment"><pre class="fragment">{
 idotprecision sum_idot;

 interval sum1, sum2;
 
 <span class="keywordflow">switch</span>(_fkt)   { 
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>:       {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(u[0][0]);       <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>:     {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(u[0][0]);     <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>: {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(u[0][0]); <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>:      {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>(u[0][0]);      <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8e16448040e0577e2d54efd850df73cb">_cot</a>:      {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a8bcfd211cb4e124595338a744cdb6384">cot</a>(u[0][0]);      <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a285abbcf70f448f346c71e90679b7244">_asin</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#aa70b136998e9a89b2d6a27321d8feece">asin</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad584b51cd03e28e6821ea9012e8c6aef">_acos</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a3867edce0982f0a3c9a43dc31482e182">acos</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aee68433a00c64958a6c5e9d305f53070">_atan</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a00d9d7639819d35765a178885d274518">atan</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6cb91208f1542d454f2dd9cac7d91e4b">_acot</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a0139feef1c89483743115ace4c903cb3">acot</a>(u[0][0]);  <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">tanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a16912e869aedbabf598bb9539dbb0b2b">_coth</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#aefaa4af7f76ead12f661bc9dba615f13">coth</a>(u[0][0]);  <span class="keywordflow">break</span>;}

   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ad04b620be8dd424ae4a571e133e97eab">_asinh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#afcdc71ef653789e9ca26967ff46eff8f">asinh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a46f7e46582bd21f8031ebfa7b839780d">_acosh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a9f1462a458f207377ed02a451a36ff1f">acosh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a10bce80ca8323339c499a71ca8ef0627">_atanh</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#ad1aa16e085966399831df0b1718a7e89">atanh</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   <span class="keywordflow">case</span> <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a9958dcef3779d3e3246c964e6ca36f8c">_acoth</a>:  {<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][0]=<a class="code" href="namespacetaylor.shtml#a9af34046db505e67a68ae0d5d279c253">acoth</a>(u[0][0]);  <span class="keywordflow">break</span>;}
   } 

 <span class="keywordflow">if</span>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p; k++)
       {
   sum_idot=interval(0.0);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
     {
       accumulate(sum_idot, interval(j)*<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][j], g[0][k-j]);
     }
   rnd(sum_idot, sum1);
   <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[0][k]=(u[0][k]-sum1/interval(k))/g[0][0];
       }

     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p; i++) <span class="comment">// now calculating the remainding f(i,j)</span>
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>.p-i; j++)
     {
       sum_idot=interval(0.0);
       
       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i-1; l++) 
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=j; m++)
      {
      accumulate(sum_idot, interval(l)*<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[l][m], g[i-l][j-m]);
      }
         }
       rnd(sum_idot, sum1); 
       
       sum_idot=interval(0.0);
       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=j; m++) 
         {
     accumulate(sum_idot, g[0][m], <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[i][j-m]);
         }
       rnd(sum_idot, sum2); 
       
       <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>[i][j]=(u[i][j]-sum1/interval(i)-sum2)/g[0][0];
     }
       } 
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a50419e8b461f8b4155495d943cbc4469"></a><!-- doxytag: member="taylor::get_all_coef" ref="a50419e8b461f8b4155495d943cbc4469" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ivector <a class="el" href="namespacetaylor.shtml#a50419e8b461f8b4155495d943cbc4469">taylor::get_all_coef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00284">284</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.tayl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6694e32c6d5d68b7081fe4079435279e"></a><!-- doxytag: member="taylor::get_j_coef" ref="a6694e32c6d5d68b7081fe4079435279e" args="(const itaylor &amp;x, int j)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval <a class="el" href="namespacetaylor.shtml#a6694e32c6d5d68b7081fe4079435279e">taylor::get_j_coef</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>j</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00292">292</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.tayl[j];
}
</pre></div>
</div>
</div>
<a class="anchor" id="abdd8de17279023fa411c8c69dbce60df"></a><!-- doxytag: member="taylor::get_order" ref="abdd8de17279023fa411c8c69dbce60df" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">taylor::get_order</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00276">276</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00106">taylor::itaylor::p</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l01373">acos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01443">acosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01411">acot()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01487">acoth()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01351">asin()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01427">asinh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01395">atan()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01465">atanh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01185">cos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01285">cosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01235">cot()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01329">coth()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01509">erf()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01533">erfc()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01085">exp()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01104">expm1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00807">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01124">ln()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01137">lnp1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00402">operator*()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00384">operator+()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00354">operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00432">operator/()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01057">pow()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01565">powerAtZero()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01157">sin()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01257">sinh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00868">sqr()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00894">sqrt()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01547">sqrt1px2()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01022">sqrtp1m1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00984">sqrtx2m1()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01213">tan()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01313">tanh()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordflow">return</span> x.p;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2d1667d3b5c500795eb06c586d75c309"></a><!-- doxytag: member="taylor::init_const" ref="a2d1667d3b5c500795eb06c586d75c309" args="(int order, const interval &amp;value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">132</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="errorfunc_8cpp_source.shtml#l00059">BiGOP()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00088">LevyOP()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00370">operator*()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00361">operator+()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00352">operator-()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00379">operator/()</a>, and <a class="el" href="errorfunc_8cpp_source.shtml#l00129">RosenOP()</a>.</p>
<div class="fragment"><pre class="fragment">{

 dim2taylor t(order);

 <span class="keywordflow">if</span>(t.p&gt;0)
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=t.p ; j++) 
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.p-j ; i++) t[j][i]=interval(0.0);       
  }

 t[0][0]=value;

 <span class="keywordflow">return</span> t;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af8a36be36ab6bac844a69a3e14e2cc4d"></a><!-- doxytag: member="taylor::init_var" ref="af8a36be36ab6bac844a69a3e14e2cc4d" args="(int order, int nr, const interval &amp;value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">taylor::init_var</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00101">101</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01603">init_var()</a>.</p>
<div class="fragment"><pre class="fragment">{

 dim2taylor t(order);

 <span class="keywordflow">if</span>( (nr&lt;1) &amp;&amp; (nr&gt;2) ) std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor::init_var&quot;</span> 
                                  &lt;&lt; std::endl;

 t[0][0]=value;

 <span class="keywordflow">if</span>(t.p&gt;0)
  {
   <span class="keywordflow">if</span>(nr==1) t[1][0]=interval(1.0);
   <span class="keywordflow">else</span> t[1][0]=interval(0.0);

   <span class="keywordflow">if</span>(nr==2) t[0][1]=interval(1.0);
   <span class="keywordflow">else</span> t[0][1]=interval(0.0);
   
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=2; i&lt;=t.p; i++) {t[0][i]=interval(0.0);}   <span class="comment">// Rest 0. line</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=t.p-1; i++) {t[1][i]=interval(0.0);} <span class="comment">// Rest 1. line  </span>

   <span class="comment">// remaining elements</span>
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=2; j&lt;=t.p ; j++) 
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=t.p-j ; i++) t[j][i]=interval(0.0);       
  }

 <span class="keywordflow">return</span> t;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac56dff7aa717d97652479e90f605ab2e"></a><!-- doxytag: member="taylor::init_var" ref="ac56dff7aa717d97652479e90f605ab2e" args="(int order, ivector &amp;values)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor__vector.shtml">dim2taylor_vector</a> <a class="el" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">taylor::init_var</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01603">1603</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00101">init_var()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> dimension = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)-<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)+1;

 <span class="keywordflow">if</span>(dimension != 2) 
  {
   cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor_vector::init_var&quot;</span> &lt;&lt; endl;
   cerr &lt;&lt; <span class="stringliteral">&quot;! 2-dimensional Taylor arithmetic !&quot;</span> &lt;&lt; endl; 
   exit(1);
  } 

 dim2taylor_vector erg(order, <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values), <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values));

 erg[<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)] = <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(order,1,values[<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(values)]);
 erg[<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)] = <a class="code" href="namespacetaylor.shtml#af8a36be36ab6bac844a69a3e14e2cc4d">init_var</a>(order,2,values[<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(values)]);

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2bb1593763f084acddd2e1a1e1efaa11"></a><!-- doxytag: member="taylor::Lb" ref="a2bb1593763f084acddd2e1a1e1efaa11" args="(const dim2taylor_vector &amp;d2tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">taylor::Lb</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor_vector &amp;&#160;</td>
          <td class="paramname"><em>d2tv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">1624</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00188">taylor::dim2taylor_vector::lb</a>.</p>

<p>Referenced by <a class="el" href="collatorspnode_8cpp_source.shtml#l01503">subpavings::CollatorSPnode::_marginalise()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00783">subpavings::RealMappedSPnode::_marginalise()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01357">subpavings::MappedSPnode&lt; cxsc::real &gt;::_slice()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00731">subpavings::RealMappedSPnode::_start_marginalise()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01211">subpavings::CollatorSPnode::addPaving()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l01048">subpavings::CollatorSPVnode::addPavingWithVal()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00848">MRSampler::Bisect()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00175">BlowUpFromZero()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00116">subpavings::AdaptiveHistogramValidation::completeDataInsertionFromVec()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l00119">subpavings::AdaptiveHistogram::completeDataInsertionFromVec()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01538">taylor::dim2taylor_vector::dim2taylor_vector()</a>, <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00244">subpavings::CollatorSPnode::dotDiffPaving()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00112">Fobj::DrawFromBoxPrior()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00128">DrawQZUnifBox()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00147">DrawQZUnifBoxV()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">PhyloTree::fillProbIntervalJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">PhyloTree::fillProbRealCFN()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">PhyloTree::fillProbRealJC69()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00987">subpavings::AdaptiveHistogramCollator::findDensityRegion()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l04629">subpavings::AdaptiveHistogram::findDensityRegion()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00202">Fobj::getLabeledDomainDim()</a>, <a class="el" href="sptools_8cpp_source.shtml#l01021">subpavings::getRvectorsFromRSSample()</a>, <a class="el" href="sptools_8cpp_source.shtml#l01115">subpavings::getRvectorsFromRSSampleForSampling()</a>, <a class="el" href="sptools_8cpp_source.shtml#l00930">subpavings::getRvectorsFromRVec()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00515">subpavings::SPnode::getSplitDim()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01698">subpavings::CollatorSPnode::getSplitDim()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00100">GOptMax()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00061">GOptMin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01603">init_var()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01387">subpavings::AdaptiveHistogram::insertOne()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00213">Intersection()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00147">subpavings::CollatorSPVnode::leafAccumulationOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01348">subpavings::CollatorSPnode::leafAccumulationOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00107">subpavings::CollatorSPnode::leafAverageOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00109">subpavings::CollatorSPVnode::leafAverageOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00182">subpavings::CollatorSPVnode::leafDifferenceOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00547">subpavings::CollatorSPVnode::leafOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00607">subpavings::CollatorSPnode::leafOutputTabs()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00899">subpavings::SPnode::leafOutputTabs()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00373">subpavings::SPSVnode::leafOutputTabs()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01005">subpavings::MappedSPnode&lt; cxsc::real &gt;::leafOutputTabs()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00348">subpavings::SPSnode::leafOutputTabs()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00378">subpavings::SPSnode::leafOutputTabsWithEMPs()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00405">subpavings::SPSVnode::leafOutputTabsWithHistHeight()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00414">subpavings::SPSnode::leafOutputTabsWithHistHeight()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00444">subpavings::SPSnode::leafOutputTabsWithHistHeightAndEMPs()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00250">Lower()</a>, <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01636">subpavings::CollatorSPnode::marginalise()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00192">MaxDiam()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00159">MaxDiamComp()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler::MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00235">MRSampler::MRSoutput()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00677">subpavings::CollatorSPnode::nodePrint()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00726">subpavings::CollatorSPVnode::nodePrint()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00877">subpavings::SPnode::nodePrint()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01765">subpavings::SPSVnode::nodePrint()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l00977">subpavings::MappedSPnode&lt; cxsc::real &gt;::nodePrint()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01995">subpavings::SPSnode::nodePrint()</a>, <a class="el" href="RosenDensityFobj_8cpp_source.shtml#l00024">RosenDensityFobj::operator()()</a>, <a class="el" href="oscFobj1_8cpp_source.shtml#l00020">OscFobj::operator()()</a>, <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00020">RosenFobj2D::operator()()</a>, <a class="el" href="RosenFobj10D_8cpp_source.shtml#l00017">RosenFobj10D::operator()()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="GaussianFobj_8cpp_source.shtml#l00035">subpavings::GaussianFobj::operator()()</a>, <a class="el" href="UniformFobj_8cpp_source.shtml#l00037">subpavings::UniformFobj::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00075">FCFN3Star::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00151">FCFN3UnRooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00279">FCFN3Rooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00340">subpavings::AdaptiveHistogramCollator::operator+()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00384">operator+()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01166">subpavings::AdaptiveHistogram::operator+()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00233">subpavings::AdaptiveHistogramVCollator::operator-()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00422">subpavings::AdaptiveHistogramCollator::operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00354">operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00333">operator&lt;&lt;()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00097">LabBox::Output()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00217">MRSampler::Output_Domain_Partition()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00380">plainPrint()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00346">prettyPrint()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00037">LabPnt::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00060">WLabPnt::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00082">LabBox::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00153">RangedLabBox::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00336">RSSample::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00462">ISSample::Print()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00308">print_itaylor()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00133">Fobj::PriorDensity()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00285">realVolume()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">MRSampler::RejectionSampleOnce()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00457">subpavings::SPSVnode::setSplits()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00507">subpavings::SPSnode::setSplits()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01591">subpavings::MappedSPnode&lt; cxsc::real &gt;::sliceCheck()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00195">subpavings::SPnode::SPnode()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00258">Upper()</a>, <a class="el" href="sptools_8cpp_source.shtml#l00450">subpavings::volCompare()</a>, <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00397">volCompare()</a>, and <a class="el" href="toolz_8cpp_source.shtml#l00266">Volume()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a>.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a2ba35c1941839c74ae6e29477df56163">lb</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a41b79fca8d7b9a92dee56066fe632560"></a><!-- doxytag: member="taylor::ln" ref="a41b79fca8d7b9a92dee56066fe632560" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">taylor::ln</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">960</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_ln</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="realmappedspnode_8cpp_source.shtml#l01065">subpavings::RealMappedSPnode::_getLogLikelihood()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00177">Fobj::inv_cdf()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00075">FCFN3Star::operator()()</a>, <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00047">FCesaroBellNo::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00151">FCFN3UnRooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00279">FCFN3Rooted::operator()()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00203">SortBox::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">FPhyloPOT::operator()()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">MRSampler::RejectionSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">MRSampler::RejectionSampleOnce()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00713">MRSampler::updateUmax()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p);

 <span class="keywordflow">if</span>(0&lt;=s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor ln : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, s, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1aa42826c6802c76448d255508882a24ad">_ln</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac7c27e2d4a78dbeaa37fb7803f8d1170"></a><!-- doxytag: member="taylor::ln" ref="ac7c27e2d4a78dbeaa37fb7803f8d1170" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">taylor::ln</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01124">1124</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00074">_i_ln</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);

    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,x,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5acedae39bc412313947cb09432bf6e615">_i_ln</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f3028a96916fee45ecb547821e379e7"></a><!-- doxytag: member="taylor::lnp1" ref="a3f3028a96916fee45ecb547821e379e7" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">taylor::lnp1</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">975</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_lnp1</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01137">lnp1()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);
 g = interval(1) + s;

 <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor lnp1 : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a641518bc6a8a090e6e5a21e4029013ce">_lnp1</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae68d1b569d3411210304ec4001ea4a1e"></a><!-- doxytag: member="taylor::lnp1" ref="ae68d1b569d3411210304ec4001ea4a1e" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">taylor::lnp1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01137">1137</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00975">lnp1()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order), g(order);

    g = interval(1) + x;
    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a3f3028a96916fee45ecb547821e379e7">lnp1</a>(x.tayl[0]);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k-1; j++)
      erg.tayl[k] += interval(j) * erg.tayl[j] * g.tayl[k-j];
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]/interval(k)) / g.tayl[0];
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a50aeb0816ed5baecbdd1bc3885a2fbb9"></a><!-- doxytag: member="taylor::operator*" ref="a50aeb0816ed5baecbdd1bc3885a2fbb9" args="(const dim2taylor &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00259">259</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator* : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 dim2taylor erg(order1);

 idotprecision sum_idot;

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++)
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// calculating erg(i,k-i)</span>
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
    {
      accumulate(sum_idot, s[l][m], t[i-l][k-i-m]);
    } 
  }  

      rnd(sum_idot, erg[i][k-i]);      
     }
  }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a773f854b7253664683fcdc3c2c31279a"></a><!-- doxytag: member="taylor::operator*" ref="a773f854b7253664683fcdc3c2c31279a" args="(const interval &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00370">370</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(t.p);
 dim2taylor s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p, s);

 erg=s_ty*t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a67bd05fe808051b2bd312fb3f488d448"></a><!-- doxytag: member="taylor::operator*" ref="a67bd05fe808051b2bd312fb3f488d448" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00402">402</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator * : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 interval sum; 
 idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
 {
  sum_idot=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j; i++)
   {
    accumulate(sum_idot, x.tayl[i],y.tayl[j-i]);
   }
  rnd(sum_idot,sum);
  erg.tayl[j]= sum;
 }
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4cf47e58467d78b59fb31fe7d4a03ec6"></a><!-- doxytag: member="taylor::operator*" ref="a4cf47e58467d78b59fb31fe7d4a03ec6" args="(const dim2taylor &amp;s, const interval &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00408">408</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);
 dim2taylor t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p, t);

 erg=s*t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a778ece51c4eb943bcb8fefc1c98c66f4"></a><!-- doxytag: member="taylor::operator*" ref="a778ece51c4eb943bcb8fefc1c98c66f4" args="(const real &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00449">449</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i); 
    erg = s_ty * t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3fab97783f44e1f70ee6a7b8ac7be6b9"></a><!-- doxytag: member="taylor::operator*" ref="a3fab97783f44e1f70ee6a7b8ac7be6b9" args="(const dim2taylor &amp;s, const real &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00487">487</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s * t_ty;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a852eb06a98b349480553d8124724dbc0"></a><!-- doxytag: member="taylor::operator*" ref="a852eb06a98b349480553d8124724dbc0" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00494">494</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8437d42cd673464c45a80ba9550e6940"></a><!-- doxytag: member="taylor::operator*" ref="a8437d42cd673464c45a80ba9550e6940" args="(int s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00526">526</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i); 
    erg = s_ty * t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a464e53f823f12c772db53cf1a34583d6"></a><!-- doxytag: member="taylor::operator*" ref="a464e53f823f12c772db53cf1a34583d6" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00556">556</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]*y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c14e8a638ba74fc191880a4eae70174"></a><!-- doxytag: member="taylor::operator*" ref="a7c14e8a638ba74fc191880a4eae70174" args="(const dim2taylor &amp;s, int t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00564">564</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s * t_ty;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afb0205c63be46b8c4d65b46f0f2c63d5"></a><!-- doxytag: member="taylor::operator*" ref="afb0205c63be46b8c4d65b46f0f2c63d5" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00602">602</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac5cd097e68711b10ef867594c1c4873e"></a><!-- doxytag: member="taylor::operator*" ref="ac5cd097e68711b10ef867594c1c4873e" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00664">664</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]*y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0584bb8817c35fb018eb6a16346396fa"></a><!-- doxytag: member="taylor::operator*" ref="a0584bb8817c35fb018eb6a16346396fa" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00714">714</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = interval(x)*y.tayl[j];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aabf6fb8b1928b06ac73dfc55bee2e993"></a><!-- doxytag: member="taylor::operator*" ref="aabf6fb8b1928b06ac73dfc55bee2e993" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00776">776</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]*interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a21e6c0930f861f85d9bdb26d9c413339"></a><!-- doxytag: member="taylor::operator+" ref="a21e6c0930f861f85d9bdb26d9c413339" args="(const dim2taylor &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00235">235</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordtype">int</span> order1=s.p;
<span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator+ : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 dim2taylor erg(order1);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=s[j][i]+t[j][i];
  }

 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2a26f996b068d51e9ee8d146d0dbcf19"></a><!-- doxytag: member="taylor::operator+" ref="a2a26f996b068d51e9ee8d146d0dbcf19" args="(const interval &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00361">361</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(t.p);
 dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p, s);

 erg = s_ty + t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a02e03dd1f37b791466c6ceaff7dadb36"></a><!-- doxytag: member="taylor::operator+" ref="a02e03dd1f37b791466c6ceaff7dadb36" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00384">384</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator + : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= x.tayl[j]+y.tayl[j];
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a84b7a1ad831a7d8ff885b7d62c12776c"></a><!-- doxytag: member="taylor::operator+" ref="a84b7a1ad831a7d8ff885b7d62c12776c" args="(const dim2taylor &amp;s, const interval &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00399">399</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);
 dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p, t);

 erg=s+t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4cd1e6c0c0f68726e5b5e95dfd562a70"></a><!-- doxytag: member="taylor::operator+" ref="a4cd1e6c0c0f68726e5b5e95dfd562a70" args="(const real &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00439">439</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{    
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);
    erg = s_ty + t;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6aba8d7ae778ad5a8def497a81f93492"></a><!-- doxytag: member="taylor::operator+" ref="a6aba8d7ae778ad5a8def497a81f93492" args="(const dim2taylor &amp;s, const real &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00478">478</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s + t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0ccc4b187f19c84e174cff0e0415baf9"></a><!-- doxytag: member="taylor::operator+" ref="a0ccc4b187f19c84e174cff0e0415baf9" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00483">483</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = y;
    erg.tayl[0] = x + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0700323b633a69c7be77f26b66949859"></a><!-- doxytag: member="taylor::operator+" ref="a0700323b633a69c7be77f26b66949859" args="(int s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00516">516</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{    
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);
    erg = s_ty + t;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a73e071be2c515e2213963c5d4adfd978"></a><!-- doxytag: member="taylor::operator+" ref="a73e071be2c515e2213963c5d4adfd978" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00545">545</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] + y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a59f1aebf6bfff7b2b294cd5d50f11f15"></a><!-- doxytag: member="taylor::operator+" ref="a59f1aebf6bfff7b2b294cd5d50f11f15" args="(const dim2taylor &amp;s, int t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00555">555</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s + t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a401f53ac76107b6d9b890b4b0ecbd423"></a><!-- doxytag: member="taylor::operator+" ref="a401f53ac76107b6d9b890b4b0ecbd423" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00591">591</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = y;
    erg.tayl[0] = x + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa32df806dfcdb79632f619d6e725877b"></a><!-- doxytag: member="taylor::operator+" ref="aa32df806dfcdb79632f619d6e725877b" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00653">653</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] + y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad3050b08b9a846b6b6d7556593d4d43f"></a><!-- doxytag: member="taylor::operator+" ref="ad3050b08b9a846b6b6d7556593d4d43f" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00703">703</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = y;
    erg.tayl[0] = interval(x) + y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad7810135b75df4525eeaa320940436d3"></a><!-- doxytag: member="taylor::operator+" ref="ad7810135b75df4525eeaa320940436d3" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00765">765</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] + interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6e1382a183bbab0366f7d451aa1d34d3"></a><!-- doxytag: member="taylor::operator&#45;" ref="a6e1382a183bbab0366f7d451aa1d34d3" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00196">196</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order=s.p;
 dim2taylor erg(order);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=-s[j][i];
  }
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a729ed4a1540f3e481333c864233cd8ad"></a><!-- doxytag: member="taylor::operator&#45;" ref="a729ed4a1540f3e481333c864233cd8ad" args="(const dim2taylor &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00211">211</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     std::cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator- : Operands with different orders&quot;</span>;
     std::cerr &lt;&lt; std::endl;
     exit(1);
   }

 dim2taylor erg(order1);

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=erg.p ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=erg.p-j ; i++) erg[j][i]=s[j][i]-t[j][i];
  }
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6d905ffff19d4d823f32782893096d4a"></a><!-- doxytag: member="taylor::operator&#45;" ref="a6d905ffff19d4d823f32782893096d4a" args="(const interval &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00352">352</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(t.p);
 dim2taylor s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p, s);

 erg=s_ty-t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a92d08c093471e48086af561e044283d2"></a><!-- doxytag: member="taylor::operator&#45;" ref="a92d08c093471e48086af561e044283d2" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00354">354</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= -x.tayl[j];
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3a700687e786e96af9fb63575f941188"></a><!-- doxytag: member="taylor::operator&#45;" ref="a3a700687e786e96af9fb63575f941188" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00366">366</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
 <span class="keywordtype">int</span> order2=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y);
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator - : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) erg.tayl[j]= x.tayl[j]-y.tayl[j];
 <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a27893615a38a300f3a98f155f97554ab"></a><!-- doxytag: member="taylor::operator&#45;" ref="a27893615a38a300f3a98f155f97554ab" args="(const dim2taylor &amp;s, const interval &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00390">390</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);
 dim2taylor t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p, t);

 erg=s-t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad8414f5a1f2b7470dbac63025f7b60b7"></a><!-- doxytag: member="taylor::operator&#45;" ref="ad8414f5a1f2b7470dbac63025f7b60b7" args="(const real &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00428">428</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);
    erg = s_ty - t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a583320e2035ee35796b1dc51d126a40e"></a><!-- doxytag: member="taylor::operator&#45;" ref="a583320e2035ee35796b1dc51d126a40e" args="(const dim2taylor &amp;s, const real &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00469">469</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s - t_ty; 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac0be684300be0c2c140b5f21a18a021d"></a><!-- doxytag: member="taylor::operator&#45;" ref="ac0be684300be0c2c140b5f21a18a021d" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00472">472</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = -y;
    erg.tayl[0] = x - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a75af8bfdf49bcf4578549a97b6516967"></a><!-- doxytag: member="taylor::operator&#45;" ref="a75af8bfdf49bcf4578549a97b6516967" args="(int s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00507">507</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);
    erg = s_ty - t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5fbafc16645c05d60634be3ba1ae75fe"></a><!-- doxytag: member="taylor::operator&#45;" ref="a5fbafc16645c05d60634be3ba1ae75fe" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00534">534</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] - y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa5a95b7e47b25250650f42f3aa9d3804"></a><!-- doxytag: member="taylor::operator&#45;" ref="aa5a95b7e47b25250650f42f3aa9d3804" args="(const dim2taylor &amp;s, int t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00546">546</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s - t_ty; 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aea48d1e448300b1b05ce34a3c9228fd6"></a><!-- doxytag: member="taylor::operator&#45;" ref="aea48d1e448300b1b05ce34a3c9228fd6" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00580">580</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = -y;
    erg.tayl[0] = x - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a32e05ef71dbf31a76381ce8e36d8684d"></a><!-- doxytag: member="taylor::operator&#45;" ref="a32e05ef71dbf31a76381ce8e36d8684d" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00642">642</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] - y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8ba1d848b912b57f58e2dbbbb1da7091"></a><!-- doxytag: member="taylor::operator&#45;" ref="a8ba1d848b912b57f58e2dbbbb1da7091" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00692">692</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = -y;
    erg.tayl[0] = interval(x) - y.tayl[0];
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a99a5e76ba886177f7789b309a1321c32"></a><!-- doxytag: member="taylor::operator&#45;" ref="a99a5e76ba886177f7789b309a1321c32" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00754">754</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    erg = x;
    erg.tayl[0] = x.tayl[0] - interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a19fd6334248ac67ca9af590bf1eef26a"></a><!-- doxytag: member="taylor::operator/" ref="a19fd6334248ac67ca9af590bf1eef26a" args="(const dim2taylor &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00298">298</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1=s.p;
 <span class="keywordtype">int</span> order2=t.p;

 <span class="keywordflow">if</span>(order1 != order2)
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : Operands with different orders&quot;</span>;
     cerr &lt;&lt; endl;
     exit(1);
   }

 dim2taylor erg(order1);

 idotprecision sum_idot;

 interval h, sum;

 <span class="keywordflow">if</span>(0.0 &lt;= t[0][0]) 
  {
    cerr &lt;&lt; <span class="stringliteral">&quot;dim2taylor operator/ : 0 in denominator&quot;</span> &lt;&lt; endl;
    exit(1);
  }
 h=interval(1.0)/t[0][0];
 

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++) <span class="comment">// calculating erg(i,k-i)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// Without Coeff. (l,m)=(0,0)</span>
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k-i; m++) <span class="comment">// m &gt;= 1</span>
    {
      accumulate(sum_idot, t[l][m], erg[i-l][k-i-m]);
    }  <span class="comment">//for m</span>
  }    <span class="comment">//for l</span>

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=1; l&lt;=i; l++) <span class="comment">//  m=0, l!=0</span>
  {
   accumulate(sum_idot, t[l][0], erg[i-l][k-i]);
  }  <span class="comment">// for l</span>

      rnd(sum_idot, sum);  
      erg[i][k-i]=h*(s[i][k-i]-sum);
     }
  }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac0269d08341f74bef9f161ce04311b99"></a><!-- doxytag: member="taylor::operator/" ref="ac0269d08341f74bef9f161ce04311b99" args="(const interval &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00379">379</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(t.p);
 dim2taylor s_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p, s);

 erg=s_ty/t;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a20f576697e1b2eb2a4247ffe570c4f69"></a><!-- doxytag: member="taylor::operator/" ref="a20f576697e1b2eb2a4247ffe570c4f69" args="(const dim2taylor &amp;s, const interval &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00417">417</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);
 dim2taylor t_ty=<a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p, t);

 erg=s/t_ty;
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a782087dc9a12d1b6eb6ecd189b7454f8"></a><!-- doxytag: member="taylor::operator/" ref="a782087dc9a12d1b6eb6ecd189b7454f8" args="(const itaylor &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00432">432</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
 <span class="keywordtype">int</span> order1(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
 <span class="keywordtype">int</span> order2(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
 <span class="keywordflow">if</span>(order1 != order2) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : different orders &quot;</span> 
             &lt;&lt; std::endl;
   exit(1);
  };
 
 <span class="keywordflow">if</span>(0 &lt;= y.tayl[0]) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> &lt;&lt; std::endl;
   exit(1);
  };

 <a class="code" href="classitaylor.shtml">itaylor</a> erg(order1);
 interval sum; 
 idotprecision sum_idot; <span class="comment">// for accumulate(...), scalar product</span>

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=order1; j++) 
 {
  sum_idot=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=j; i++)
   {
    accumulate(sum_idot, y.tayl[i],erg.tayl[j-i]);
   }
  rnd(sum_idot,sum);
  erg.tayl[j]= (x.tayl[j]-sum)/y.tayl[0];
 }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a627c5d5998ccdab6c81f898f33b3a0a3"></a><!-- doxytag: member="taylor::operator/" ref="a627c5d5998ccdab6c81f898f33b3a0a3" args="(const real &amp;s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00458">458</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);  
    erg = s_ty / t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a83601375c928236047d6b8dc3158825c"></a><!-- doxytag: member="taylor::operator/" ref="a83601375c928236047d6b8dc3158825c" args="(const dim2taylor &amp;s, const real &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00496">496</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s / t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38d9e25f2193b6de0fb6a5a235c4a617"></a><!-- doxytag: member="taylor::operator/" ref="a38d9e25f2193b6de0fb6a5a235c4a617" args="(const interval &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00504">504</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(order);
    w.tayl[0] = x / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7ad8547d33175b25f92470ef452be7e4"></a><!-- doxytag: member="taylor::operator/" ref="a7ad8547d33175b25f92470ef452be7e4" args="(int s, const dim2taylor &amp;t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00535">535</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(t.p);
    interval s_i(s);
    dim2taylor s_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(t.p,s_i);  
    erg = s_ty / t; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa35f5bbbbd3b7efecf6db9a0900e3a58"></a><!-- doxytag: member="taylor::operator/" ref="aa35f5bbbbd3b7efecf6db9a0900e3a58" args="(const itaylor &amp;x, const interval &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00566">566</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]/y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afed918a308085255f702c43ce94eb87d"></a><!-- doxytag: member="taylor::operator/" ref="afed918a308085255f702c43ce94eb87d" args="(const dim2taylor &amp;s, int t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00573">573</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00132">init_const()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{   
    dim2taylor erg(s.p);
    interval t_i(t);
    dim2taylor t_ty = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">init_const</a>(s.p,t_i);  
    erg = s / t_ty; 
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab62d7c3647e2a62d7863f6cb838ed71f"></a><!-- doxytag: member="taylor::operator/" ref="ab62d7c3647e2a62d7863f6cb838ed71f" args="(const real &amp;x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00612">612</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(order);
    w.tayl[0] = x / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a240b2c541cf0d46b9a7810987448631c"></a><!-- doxytag: member="taylor::operator/" ref="a240b2c541cf0d46b9a7810987448631c" args="(const itaylor &amp;x, const real &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00674">674</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (y==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]/y;
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa68052fbd6ae385609fb861cd61c970d"></a><!-- doxytag: member="taylor::operator/" ref="aa68052fbd6ae385609fb861cd61c970d" args="(int x, const itaylor &amp;y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00724">724</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (0&lt;=y.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, operator / : 0 in interval &quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    }; 
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(y));
    <a class="code" href="classitaylor.shtml">itaylor</a> w(order);
    w.tayl[0] = interval(x) / y.tayl[0];
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  idot=0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=k; j++) 
      accumulate(idot,y.tayl[j],w.tayl[k-j]);
  rnd(idot,sum);
  w.tayl[k] = -sum / y.tayl[0];
    }
    <span class="keywordflow">return</span> w;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a770113818b5fc83f7eefe876cbdd8295"></a><!-- doxytag: member="taylor::operator/" ref="a770113818b5fc83f7eefe876cbdd8295" args="(const itaylor &amp;x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> taylor::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00786">786</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (y==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor: division by 0&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=order; j++) erg.tayl[j] = x.tayl[j]/interval(y);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a23cd9841df525cfac085fbeb62bf52a9"></a><!-- doxytag: member="taylor::operator&lt;&lt;" ref="a23cd9841df525cfac085fbeb62bf52a9" args="(std::ostream &amp;os, dim2taylor &amp;d2t)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; taylor::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>d2t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00176">176</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00060">taylor::dim2taylor::dat</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;[dim2taylor object, order &quot;</span> &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a> ; j++) 
  {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=<a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a68bb1d15f4bee8bf2a437d1558c9b28b">p</a>-j ; i++) std::cout &lt;&lt; <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a>.<a class="code" href="classtaylor_1_1dim2taylor.shtml#a831423b7ae2f1d7595c7786029612942">dat</a>[j][i]&lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
   os &lt;&lt; std::endl;
  }
 os &lt;&lt; std::endl;
 <span class="keywordflow">return</span> os;
}                                 
</pre></div>
</div>
</div>
<a class="anchor" id="af2f42b7045a6bc7bdf5225bb5b7f07bc"></a><!-- doxytag: member="taylor::operator&lt;&lt;" ref="af2f42b7045a6bc7bdf5225bb5b7f07bc" args="(std::ostream &amp;os, itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; taylor::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00333">333</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">taylor::itaylor::p</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;[itaylor object, order &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot;:]&quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;
   os &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 os &lt;&lt; std::endl;
 <span class="keywordflow">return</span> os;
}                                
</pre></div>
</div>
</div>
<a class="anchor" id="a769606a4634cc75e25da1a652cf19b14"></a><!-- doxytag: member="taylor::pow" ref="a769606a4634cc75e25da1a652cf19b14" args="(const dim2taylor &amp;s, const interval &amp;alpha)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">taylor::pow</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">815</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml#l00213">doMCMCGRAuto()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="CoverageNormal_8cpp_source.shtml#l00422">FinMixPDF()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01419">subpavings::SPSVnode::getHellingerDist()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01591">subpavings::SPSnode::getHellingerDist()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01736">LaplaceRiemannTerm()</a>, <a class="el" href="Quadrature_8cpp_source.shtml#l00040">Levy()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01920">LognormalRiemannTerm()</a>, <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00272">makeRegularHist()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00651">myStd()</a>, <a class="el" href="Vec_8cpp_source.shtml#l00015">Vec::normalise()</a>, <a class="el" href="LevyDensityFobj2D_8cpp_source.shtml#l00026">LevyDensityFobj2D::operator()()</a>, <a class="el" href="GaussianFobj9D_8cpp_source.shtml#l00016">GaussianFobj9D::operator()()</a>, <a class="el" href="GaussianFobj10D_8cpp_source.shtml#l00016">GaussianFobj10D::operator()()</a>, <a class="el" href="oscFobj1_8cpp_source.shtml#l00053">OscFobj::operator()()</a>, <a class="el" href="GaussianFobj_8cpp_source.shtml#l00035">subpavings::GaussianFobj::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01057">pow()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00450">psi()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01462">riemannTerm()</a>, and <a class="el" href="Quadrature_8cpp_source.shtml#l00015">Rosenbrock()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);

 idotprecision sum_idot;
 interval sum1, sum2, h;

 erg[0][0]=<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(s[0][0], alpha); 
 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.p; j++)
   {
     sum_idot=interval(0.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
       {
   h=alpha*(interval(j)-interval(i))-interval(i);
   accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
       }
     rnd(sum_idot, sum1);
     erg[0][j]=sum1/interval(j)/s[0][0];
   }

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.p; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p-i; k++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
  {
   h=alpha*(interval(i)-interval(l))-interval(l);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
    {
      accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
    }
  }
      rnd(sum_idot, sum1); 
        
      sum_idot=interval(0.0);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
  {
   accumulate(sum_idot, s[0][m], erg[i][k-m]);
  }
      rnd(sum_idot, sum2); 

      erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
     }
  } 
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a585467c43fcacacb16fcfa01320f4a15"></a><!-- doxytag: member="taylor::pow" ref="a585467c43fcacacb16fcfa01320f4a15" args="(const itaylor &amp;x, const interval &amp;alpha)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">taylor::pow</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01057">1057</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">pow()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);

    <span class="keywordflow">if</span> (0&lt;=x.tayl[0])
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in interval x&quot;</span> 
                  &lt;&lt; std::endl;
  exit(1);
    };

    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(x.tayl[0],alpha); <span class="comment">// element No. 0</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += (interval(k-j)*alpha-interval(j))
               * erg.tayl[j] * x.tayl[k-j];
  erg.tayl[k] /= (interval(k)*x.tayl[0]);
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a09dab31240298a683a7912d43938e0bb"></a><!-- doxytag: member="taylor::power" ref="a09dab31240298a683a7912d43938e0bb" args="(const dim2taylor &amp;s, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">taylor::power</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00869">869</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="Exm__3__4_8cpp_source.shtml#l00037">IBT_ex3_4()</a>, <a class="el" href="GaussianFobj1D_8cpp_source.shtml#l00016">GaussianFobj1D::operator()()</a>, <a class="el" href="GaussianFobj2D_8cpp_source.shtml#l00016">GaussianFobj2D::operator()()</a>, <a class="el" href="GaussianFobj9D_8cpp_source.shtml#l00016">GaussianFobj9D::operator()()</a>, <a class="el" href="GaussianFobj10D_8cpp_source.shtml#l00016">GaussianFobj10D::operator()()</a>, <a class="el" href="GaussianFobj_8cpp_source.shtml#l00035">subpavings::GaussianFobj::operator()()</a>, <a class="el" href="RosenFobj100D_8cpp_source.shtml#l00018">RosenFobj100D::operator()()</a>, <a class="el" href="GaussianFobj100D_8cpp_source.shtml#l00016">GaussianFobj100D::operator()()</a>, <a class="el" href="RosenFobj1000D_8cpp_source.shtml#l00018">RosenFobj1000D::operator()()</a>, <a class="el" href="GaussianFobj1000D_8cpp_source.shtml#l00016">GaussianFobj1000D::operator()()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01565">powerAtZero()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);

 idotprecision sum_idot;
 interval sum1, sum2, h;

 erg[0][0]=<a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(s[0][0], n); 
 
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=erg.p; j++)
   {
     sum_idot=interval(0.0);
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
       {
   h=interval(n)*(interval(j)-interval(i))-interval(i);
   accumulate(sum_idot, h*erg[0][i], s[0][j-i]);
       }
     rnd(sum_idot, sum1);
     erg[0][j]=sum1/interval(j)/s[0][0];
   }

 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i&lt;=erg.p; i++) <span class="comment">// now calculating the remaining erg(i,k)</span>
  {
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p-i; k++)
     {
      sum_idot=interval(0.0);

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i-1; l++) <span class="comment">// Koeff. (l,m)=(0,0) nicht summieren</span>
  {
   h=interval(n)*(interval(i)-interval(l))-interval(l);

   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k; m++)
    {
      accumulate(sum_idot, h*erg[l][m], s[i-l][k-m]);
    }
  }
      rnd(sum_idot, sum1); 
        
      sum_idot=interval(0.0);
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=1; m&lt;=k; m++) 
  {
   accumulate(sum_idot, s[0][m], erg[i][k-m]);
  }
      rnd(sum_idot, sum2); 

      erg[i][k]=(sum1/interval(i)-sum2)/s[0][0];
     }
  } 
 
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a51730e93b533e086e3d94d2aaeba4e24"></a><!-- doxytag: member="taylor::powerAtZero" ref="a51730e93b533e086e3d94d2aaeba4e24" args="(const itaylor &amp;x, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a51730e93b533e086e3d94d2aaeba4e24">taylor::powerAtZero</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01565">1565</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00869">power()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">                                             {
  <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
  <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
  
  <span class="keywordflow">if</span> (0&lt;=x.tayl[1])
    {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, pow(x,a): 0 in the derivative of x&quot;</span> 
    &lt;&lt; std::endl;
      exit(1);
    };
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt;n; k++)
    erg.tayl[k]=0.0;

  erg.tayl[n] = <a class="code" href="namespacetaylor.shtml#a09dab31240298a683a7912d43938e0bb">power</a>(x.tayl[1],n); <span class="comment">// element No. n</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=n+1; k&lt;=order; k++)
    {
      erg.tayl[k] = 0;
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1-n; j++)
  erg.tayl[k] += (interval(k-n-j)*n-interval(j))
               * erg.tayl[j+n] * x.tayl[k+1-n-j];
      erg.tayl[k] /= (interval(k-n)*x.tayl[1]);
    }
  <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac75b67e2f3d78871403f431867807ee0"></a><!-- doxytag: member="taylor::print_itaylor" ref="ac75b67e2f3d78871403f431867807ee0" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">taylor::print_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00308">308</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">taylor::itaylor::p</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 std::cerr &lt;&lt;<span class="stringliteral">&quot;Output itaylor of order &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   std::cerr &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span> &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 std::cerr &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a48b8404764aa49f337985ba478f4e201"></a><!-- doxytag: member="taylor::print_itaylor" ref="a48b8404764aa49f337985ba478f4e201" args="(std::ostream &amp;os, const itaylor &amp;x, int width, int digits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacetaylor.shtml#ac75b67e2f3d78871403f431867807ee0">taylor::print_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>width</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>digits</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00318">318</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">Lb()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00106">taylor::itaylor::p</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
 os &lt;&lt;<span class="stringliteral">&quot;Ausgabe itaylor der Ordnung &quot;</span> &lt;&lt; x.p &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; std::endl;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x.tayl); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl);i++) 
  {
   os &lt;&lt; <span class="stringliteral">&quot;i  &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;  component: &quot;</span>;
   <span class="keywordflow">if</span> (width&gt;0||digits&gt;0) os &lt;&lt; SetPrecision(width,digits);
   os &lt;&lt; x.tayl[i] &lt;&lt; std::endl;
  };
 os &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae72c8b625cbb6c9d852c823755ea5299"></a><!-- doxytag: member="taylor::sin" ref="ae72c8b625cbb6c9d852c823755ea5299" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">taylor::sin</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">1008</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">cot()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00627">PhyloTree::findLabel()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00682">PhyloTree::findSeqNo()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00569">PhyloTree::findTime()</a>, <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00077">main()</a>, <a class="el" href="oscFobj1_8cpp_source.shtml#l00053">OscFobj::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00047">FCesaroBellNo::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">FPhyloPOT::ReadSequence()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01157">sin()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       } <span class="comment">// for m</span>
         }     <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=-sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a62ec379740c8e57b65eb49a4f78c86f5"></a><!-- doxytag: member="taylor::sin" ref="a62ec379740c8e57b65eb49a4f78c86f5" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">taylor::sin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01157">1157</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">sin()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(order);   <span class="comment">// sin</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(order);   <span class="comment">// cos</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg1 (sin)</span>
    erg2.tayl[0]=<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x.tayl[0]); <span class="comment">// Element No. 0:  erg2 (cos)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= real(-1.0)/interval(j)*s2;
    }
    <span class="keywordflow">return</span> erg1; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6f0c4e9743ae662446f65e3c367452b3"></a><!-- doxytag: member="taylor::sinh" ref="a6f0c4e9743ae662446f65e3c367452b3" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">taylor::sinh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">1130</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, and <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">coth()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01257">sinh()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg1(s.p), erg2(s.p); 

 idotprecision sum_idot1, sum_idot2;
 interval sum1, sum2;

 erg1[0][0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(s[0][0]);
 erg2[0][0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s[0][0]);

 <span class="keywordflow">if</span>(s.p&gt;0)
   {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg1.p; k++)
       {
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
     {
       sum_idot1=interval(0.0);
       sum_idot2=interval(0.0);

       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=i; l++) <span class="comment">// now calculating ergs(i,k-i)</span>
         {
     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
       { 
         interval h=interval(k)-interval(l)-interval(m);
         accumulate(sum_idot1, h*erg2[l][m], s[i-l][k-i-m]);
         accumulate(sum_idot2, h*erg1[l][m], s[i-l][k-i-m]);
       }  <span class="comment">// for m</span>
         }      <span class="comment">// for l</span>

       rnd(sum_idot1, sum1);  
       rnd(sum_idot2, sum2);

       erg1[i][k-i]=sum1/interval(k);
       erg2[i][k-i]=sum2/interval(k);
     }
       }
   }

 <span class="keywordflow">return</span> erg1;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ace92ea0efa6fa5768a476784b1761859"></a><!-- doxytag: member="taylor::sinh" ref="ace92ea0efa6fa5768a476784b1761859" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">taylor::sinh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01257">1257</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01130">sinh()</a>, <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg1(order);  <span class="comment">// sinh</span>
    <a class="code" href="classitaylor.shtml">itaylor</a> erg2(order);  <span class="comment">// cosh</span>
    interval s1,s2;

    erg1.tayl[0]=<a class="code" href="namespacetaylor.shtml#a6f0c4e9743ae662446f65e3c367452b3">sinh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg1 (sinh)</span>
    erg2.tayl[0]=<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x.tayl[0]); <span class="comment">// element No. 0:  erg2 (cosh)</span>

    <span class="comment">// remainig elements: </span>
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=1; j&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x.tayl); j++) 
    {
  s1=s2=interval(0);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=j-1; i++)
  {
      s1 += interval(j-i) * erg2.tayl[i] * x.tayl[j-i];
      s2 += interval(j-i) * erg1.tayl[i] * x.tayl[j-i];
  }
  erg1.tayl[j]= s1/interval(j);
  erg2.tayl[j]= s2/interval(j);
    }
    <span class="keywordflow">return</span> erg1; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="ad814819d656f5760e836bfa130f1d3a4"></a><!-- doxytag: member="taylor::sqr" ref="ad814819d656f5760e836bfa130f1d3a4" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">taylor::sqr</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">592</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01301">acot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01371">acoth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">asin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01284">atan()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01354">atanh()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00059">BiGOP()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01113">cot()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01233">coth()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00037">IBT_ex3_4()</a>, <a class="el" href="Exm__3__3_8cpp_source.shtml#l00036">IBTAnnular()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00051">IBTFinverse_ex3_4()</a>, <a class="el" href="Exr__11__35_8cpp_source.shtml#l00035">IVF_ex11_35()</a>, <a class="el" href="Exm__3__4_8cpp_source.shtml#l00070">IVF_ex3_4()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00088">LevyOP()</a>, <a class="el" href="RosenDensityFobj_8cpp_source.shtml#l00024">RosenDensityFobj::operator()()</a>, <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00020">RosenFobj2D::operator()()</a>, <a class="el" href="RosenFobj10D_8cpp_source.shtml#l00017">RosenFobj10D::operator()()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00129">RosenOP()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00868">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">sqrt1px2()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01022">sqrtp1m1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">sqrtx2m1()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">tan()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">tanh()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor erg(s.p);
 
 idotprecision sum_idot;
 interval sum1=interval(0.0);
 interval sum2=interval(0.0);

 erg[0][0]=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s[0][0]); <span class="comment">//Koeff. (0,0)</span>

 <span class="keywordflow">if</span>(erg.p &gt; 0)
  {
    
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;=erg.p; k++) <span class="comment">// calculating the remaining coefficients</span>
      {
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
    {
      <span class="keywordflow">if</span>(i%2==1) <span class="comment">// i: odd</span>
        {
    sum_idot=interval(0.0);
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
      {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
          {
      accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
          } <span class="comment">//for m</span>
      }     <span class="comment">//for l</span>

    rnd(sum_idot, sum1);
    erg[i][k-i]=interval(2.0)*sum1;     
        }
      <span class="keywordflow">else</span> <span class="comment">//i%2==0: i: even </span>
        {
    <span class="keywordflow">if</span>( (k-i)%2==1 ) <span class="comment">//k-i: odd</span>
      {
        sum_idot=interval(0.0); 
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
          {
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
        {
          accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
        } <span class="comment">//for m</span>
          }     <span class="comment">//for l</span>
        rnd(sum_idot, sum1);
       
        sum_idot=interval(0.0);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-1)/2; m++)
          {
      accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
          }<span class="comment">//for m</span>
        rnd(sum_idot, sum2);

        erg[i][k-i]=interval(2.0)*(sum1+sum2);  
             
      }
    <span class="keywordflow">else</span> <span class="comment">//(k-i)%2==0: k-i even</span>
      {
        sum_idot=interval(0.0); 
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) <span class="comment">// calculating erg(i,k-i)</span>
          {
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=k-i; m++)
        {
          accumulate(sum_idot, s[l][m], s[i-l][k-i-m]);
        } <span class="comment">// for m</span>
          }     <span class="comment">// for l</span>
        rnd(sum_idot, sum1);
       
        sum_idot=interval(0.0);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(k-i-2)/2; m++)
          {
      accumulate(sum_idot, s[i/2][m], s[i/2][k-i-m]);
          } <span class="comment">// for m</span>
        rnd(sum_idot, sum2);

        erg[i][k-i]=interval(2.0)*(sum1+sum2);
        erg[i][k-i]=erg[i][k-i]+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(s[i/2][(k-i)/2]);   
      }
        }
    } <span class="comment">// for i</span>
      }     <span class="comment">// for k</span>
  }
 <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a37319bcf4ecec3b74d87c39c9b5a8fce"></a><!-- doxytag: member="taylor::sqr" ref="a37319bcf4ecec3b74d87c39c9b5a8fce" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">taylor::sqr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00868">868</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);

    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.tayl[0]);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  m = (k+1) / 2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=m-1; j++) 
      accumulate(idot,x.tayl[j],x.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.tayl[m]); <span class="comment">// k even </span>
    }
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="af90786d46d07cc1e02c6011fee55f165"></a><!-- doxytag: member="taylor::sqrt" ref="af90786d46d07cc1e02c6011fee55f165" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">taylor::sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">678</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01267">acos()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01250">asin()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00059">BiGOP()</a>, <a class="el" href="AHABCObsMCMCL1_8cpp_source.shtml#l00126">doMCMCGRAuto()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00200">dpFinMixIAEBoun()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01389">erf()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00176">FinMixCDF()</a>, <a class="el" href="CoverageNormal_8cpp_source.shtml#l00422">FinMixPDF()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00668">gaussian()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01419">subpavings::SPSVnode::getHellingerDist()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01591">subpavings::SPSnode::getHellingerDist()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01651">subpavings::SPSVnode::getHellingerDist1D()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01820">subpavings::SPSnode::getHellingerDist1D()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01551">integrand()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01821">LognormalIntegrand()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01807">LognormalPDF()</a>, <a class="el" href="CesaroBellNo_8cpp_source.shtml#l00063">main()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00260">RSSample::Mean()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00651">myStd()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="histpenalty_8hpp_source.shtml#l00106">subpavings::PenAIC1::operator()()</a>, <a class="el" href="Quadrature1_8cpp_source.shtml#l00040">Rosenbrock()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00894">sqrt()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">sqrt1px2()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">sqrtp1m1()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">sqrtx2m1()</a>.</p>
<div class="fragment"><pre class="fragment">{ 
 dim2taylor erg(s.p);
 idotprecision sum_idot;
 interval sum(0.0);

 erg[0][0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(s[0][0]);  <span class="comment">// Coeff. (0,0) --&gt; function value</span>
  
  <span class="keywordflow">if</span>(erg.p &gt; 0)
  { 
   <span class="keywordflow">if</span>(0.0 &lt;= erg[0][0])
      {
  cout &lt;&lt; <span class="stringliteral">&quot;error here: &quot;</span> &lt;&lt; erg[0][0] &lt;&lt; endl;
   
  cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrt: 0 in argument interval&quot;</span>;
  cerr &lt;&lt; endl;
  exit(1);
      }
      
    
    interval h = erg[0][0]; 
    times2pown(h,1); <span class="comment">// fast multiplication with 2;</span>
    <span class="keywordtype">int</span> ki,il,z;
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k&lt;=erg.p; k++) <span class="comment">// calculating all other coefficients</span>
    {   
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;=k; i++)
  {   
      sum_idot=interval(0.0);
    <span class="comment">// do not sum (l,m)=(0,0) and (l,m)=(i,k-i), see continue assignments</span>
      ki = k-i;   z = 0; <span class="comment">// z: Numbering the following summands </span>
      <span class="keywordflow">if</span> (i%2==1) <span class="comment">// i: odd</span>
      { 
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-1)/2; l++) 
    {
        il = i-l;   
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
        {
      z++; <span class="comment">// Numbering the summands, z = 1,2,3,...</span>
      <span class="comment">// (l,m) = (0,0) is the first summand (z=1),</span>
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>; <span class="comment">// skipping accumulate(...)</span>
      accumulate(sum_idot, erg[l][m], erg[il][ki-m]);
        }
    }
    rnd(sum_idot,sum);
    times2pown(sum,1);
    erg[i][ki] = (s[i][ki]-sum)/h;
      }
      <span class="keywordflow">else</span> <span class="comment">// i: even</span>
      {
    <span class="keywordflow">if</span> (ki%2==1) <span class="comment">// ki=k-i: odd</span>
    {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++) 
        {
      il = i-l;
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
      {
          z++;
          <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
          accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
      }
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-1)/2; m++)
        {
      z++;
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
      accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
        }
        rnd(sum_idot,sum);
        times2pown(sum,1);
        erg[i][ki] = (s[i][ki]-sum)/h;
    }
    <span class="keywordflow">else</span> <span class="comment">// ki=k-i: even</span>
    {
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> l=0; l&lt;=(i-2)/2; l++)
        {
      il = i-l;
      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=ki; m++)
      {
          z++;
          <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
          accumulate(sum_idot,erg[l][m],erg[il][ki-m]);
      }
        }
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> m=0; m&lt;=(ki-2)/2; m++)
        {
      z++;
      <span class="keywordflow">if</span> (z==1) <span class="keywordflow">continue</span>;
      accumulate(sum_idot,erg[i/2][m],erg[i/2][ki-m]);
        }
        rnd(sum_idot,sum);
        times2pown(sum,1);
        sum += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg[i/2][ki/2]);
        erg[i][ki] = (s[i][ki]-sum)/h;
    }
      }
  } <span class="comment">// for i</span>
      }   <span class="comment">// for k</span>
  }

 <span class="keywordflow">return</span> erg;
 }
</pre></div>
</div>
</div>
<a class="anchor" id="a5a055d2fa829aab1ef9d9d452dbf635b"></a><!-- doxytag: member="taylor::sqrt" ref="a5a055d2fa829aab1ef9d9d452dbf635b" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">taylor::sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00894">894</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">if</span> (0&lt;=x.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt: 0 in interval&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(x.tayl[0]);
    h = erg.tayl[0];
    times2pown(h,1);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  m = (k+1) / 2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]) / h;
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af9650236965b00326a3be8175c47789c"></a><!-- doxytag: member="taylor::sqrt" ref="af9650236965b00326a3be8175c47789c" args="(const itaylor &amp;x, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">taylor::sqrt</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00927">927</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keywordflow">if</span> (0&lt;=x.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt(x,n): 0 in interval&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(x.tayl[0],n); <span class="comment">// element No. 0</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  erg.tayl[k] = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;=k-1; j++)
      erg.tayl[k] += (interval(k-j)/real(n)-interval(j))
               * erg.tayl[j] * x.tayl[k-j];
  erg.tayl[k] /= (interval(k)*x.tayl[0]);
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a282c010c1d5e11c9363b21a788e9b1d5"></a><!-- doxytag: member="taylor::sqrt1mx2" ref="a282c010c1d5e11c9363b21a788e9b1d5" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">taylor::sqrt1mx2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00950">950</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>

<p>Referenced by <a class="el" href="itaylor_8cpp_source.shtml#l01373">acos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01351">asin()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l00984">sqrtx2m1()</a>.</p>
<div class="fragment"><pre class="fragment">{
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order), g(order);

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&lt;=-1 || Sup(x.tayl[0])&gt;=1)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrt1mx2: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };
    erg.tayl[0]=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.tayl[0])); <span class="comment">// =sqrt1mx2(x.tayl[0]); Blomi </span>
    h = real(-1)/erg.tayl[0];
    times2pown(h,-1);
    g = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  m = (k+1)/2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,sum);
  times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
  erg.tayl[k] = sum;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
  erg.tayl[k] = (g.tayl[k]+erg.tayl[k])*h;
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a269ca1cb03661bb2b2649b5de7cfb2fe"></a><!-- doxytag: member="taylor::sqrt1px2" ref="a269ca1cb03661bb2b2649b5de7cfb2fe" args="(const dim2taylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">taylor::sqrt1px2</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00788">788</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01318">asinh()</a>.</p>
<div class="fragment"><pre class="fragment">                                        {
    <span class="comment">// sqrt(1+x^2);</span>
    dim2taylor erg;
    <span class="keywordflow">if</span> (Inf(x[0][0])&gt;1) erg = x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x));
    <span class="keywordflow">else</span> 
  <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-1)
      erg = -x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x));
  <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
    <span class="keywordflow">return</span> erg; 
}
</pre></div>
</div>
</div>
<a class="anchor" id="a319f85acd3f83eb66fba6be32346573e"></a><!-- doxytag: member="taylor::sqrt1px2" ref="a319f85acd3f83eb66fba6be32346573e" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a269ca1cb03661bb2b2649b5de7cfb2fe">taylor::sqrt1px2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01547">1547</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x));
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    <span class="keyword">const</span> real c = 500.0;

    <span class="keywordflow">if</span> (Inf(x.tayl[0]) &gt; c) erg = x*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+real(1)/<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.tayl[0]) &lt; -c) erg = -x*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+real(1)/<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x)); 
    <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(real(1)+<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x));  
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4bc5f46fac7267d44a627cf61276e6c1"></a><!-- doxytag: member="taylor::sqrtp1m1" ref="a4bc5f46fac7267d44a627cf61276e6c1" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">taylor::sqrtp1m1</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">991</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00041">_sqrtp1m1</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, and <a class="el" href="itaylor_8cpp_source.shtml#l01022">sqrtp1m1()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);
 g = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1+s);;

 <span class="keywordflow">if</span>(0&lt;=interval(1)+s[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor sqrtp1m1 : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a6b91f75f7157a0a92605618a89471cdd">_sqrtp1m1</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a7b5c467bf63f6e51bd5b6c55ddd74d"></a><!-- doxytag: member="taylor::sqrtp1m1" ref="a8a7b5c467bf63f6e51bd5b6c55ddd74d" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">taylor::sqrtp1m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01022">1022</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00991">sqrtp1m1()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order);
    idotprecision idot;
    interval h,Ne;

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&lt;=-1)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtp1m1: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };

    erg.tayl[0] = <a class="code" href="namespacetaylor.shtml#a4bc5f46fac7267d44a627cf61276e6c1">sqrtp1m1</a>(x.tayl[0]);
    Ne = real(1.0)+erg.tayl[0];
    times2pown(Ne,1);

    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
    {
  m = (k+1)/2;
  idot = 0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++)
      accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
  rnd(idot,h);
  times2pown(h,1);
  erg.tayl[k] = h;
  <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]);
  erg.tayl[k] = (x.tayl[k]-erg.tayl[k]) / Ne; 
    }
    <span class="keywordflow">return</span> erg;
} <span class="comment">// sqrtp1m1</span>
</pre></div>
</div>
</div>
<a class="anchor" id="adb8c00fba0cd105428efb20583e3eb57"></a><!-- doxytag: member="taylor::sqrtx2m1" ref="adb8c00fba0cd105428efb20583e3eb57" args="(const dim2taylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">taylor::sqrtx2m1</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l00801">801</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01336">acosh()</a>.</p>
<div class="fragment"><pre class="fragment">                                        {
    <span class="comment">// sqrt(x^2-1);</span>
    dim2taylor erg;
    <span class="keywordflow">if</span> (Inf(x[0][0])&gt;4) erg = x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( 1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x) );
    <span class="keywordflow">else</span> 
  <span class="keywordflow">if</span> (Sup(x[0][0])&lt;-4)
      erg = -x * <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>( 1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(1/x) );
  <span class="keywordflow">else</span> erg = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x)-1);
    <span class="keywordflow">return</span> erg; 
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a72536b0978e6cdcec6adf898e2642d31"></a><!-- doxytag: member="taylor::sqrtx2m1" ref="a72536b0978e6cdcec6adf898e2642d31" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#adb8c00fba0cd105428efb20583e3eb57">taylor::sqrtx2m1</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00984">984</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">sqrt()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00950">sqrt1mx2()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keyword">const</span> real c = 30.0; 
    idotprecision idot;
    interval sum,h;
    <span class="keywordtype">int</span> order(<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x)),m;
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(order), g(order);

    <span class="keywordflow">if</span> (Disjoint(x.tayl[0],interval(-1,1))==0)
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, sqrtx2m1: wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };

    <span class="keywordflow">if</span> (Inf(x.tayl[0])&gt;c) erg = x*<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(real(1)/x);
    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Sup(x.tayl[0])&lt;-c) erg = -x*<a class="code" href="namespacetaylor.shtml#a282c010c1d5e11c9363b21a788e9b1d5">sqrt1mx2</a>(real(1)/x);
    <span class="keywordflow">else</span> {
  erg.tayl[0]=<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x.tayl[0])-real(1)); <span class="comment">// =sqrtx2m1(x.tayl[0]); Blomi </span>
  g = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x);
  h = real(1)/erg.tayl[0];
  times2pown(h,-1);
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k&lt;=order; k++)
  {
      m = (k+1)/2;
      idot = 0;
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=m-1; j++) 
    accumulate(idot,erg.tayl[j],erg.tayl[k-j]);
      rnd(idot,sum);
      times2pown(sum,1);  <span class="comment">// Multiplication with 2</span>
      erg.tayl[k] = sum;
      <span class="keywordflow">if</span> (k%2==0) erg.tayl[k] += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(erg.tayl[m]); <span class="comment">// k even </span>
      erg.tayl[k] = (g.tayl[k]-erg.tayl[k])*h;
  }
    }
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac2888bbea40e7b720c6502639680302a"></a><!-- doxytag: member="taylor::tan" ref="ac2888bbea40e7b720c6502639680302a" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">taylor::tan</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01095">1095</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_tan</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, and <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tan : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1a8fa6c5ebd0e9c8935a4c71fe0236f311">_tan</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3cbd901c0e176be2efe58be70bb48db6"></a><!-- doxytag: member="taylor::tan" ref="a3cbd901c0e176be2efe58be70bb48db6" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">taylor::tan</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01213">1213</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00076">_i_tan</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01052">cos()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>, and <a class="el" href="itaylor_8hpp_source.shtml#l00107">taylor::itaylor::tayl</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>(x));

    <span class="keywordflow">if</span>(0 &lt;= g.tayl[0]) 
    {
  std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in itaylor, tan : wrong argument&quot;</span> &lt;&lt; std::endl;
  exit(1);
    };  
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aa1ca8293db76eed1be002571ab8be4a7">_i_tan</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af271b075d149cf3f1a4305bda028d56b"></a><!-- doxytag: member="taylor::tanh" ref="af271b075d149cf3f1a4305bda028d56b" args="(const dim2taylor &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1dim2taylor.shtml">dim2taylor</a> <a class="el" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">taylor::tanh</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01216">1216</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00040">_tanh</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="dim2taylor_8hpp_source.shtml#l00059">taylor::dim2taylor::p</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>

<p>Referenced by <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>.</p>
<div class="fragment"><pre class="fragment">{
 dim2taylor <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(s.p), g(s.p);

 g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(s));

 <span class="keywordflow">if</span>(0&lt;=g[0][0])
   {
     cerr &lt;&lt; <span class="stringliteral">&quot;Error in dim2taylor tanh : 0 in interval&quot;</span> &lt;&lt; endl;
     exit(1);
   }
 <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, g, s, <a class="code" href="namespacetaylor.shtml#ab4d808ea2ed63652c85b7ab94c9f92f1ab261121e55d08cd277013d28906f5d8f">_tanh</a>);
 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0de984183956000ebf6f44a817719266"></a><!-- doxytag: member="taylor::tanh" ref="a0de984183956000ebf6f44a817719266" args="(const itaylor &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#af271b075d149cf3f1a4305bda028d56b">taylor::tanh</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classitaylor.shtml">itaylor</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l01313">1313</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>

<p>References <a class="el" href="itaylor_8hpp_source.shtml#l00084">_i_tanh</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01173">cosh()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01447">f_g_u()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00276">get_order()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00592">sqr()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">int</span> order=<a class="code" href="namespacetaylor.shtml#abdd8de17279023fa411c8c69dbce60df">get_order</a>(x);
    <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(order);
    <a class="code" href="classitaylor.shtml">itaylor</a> g(order);

    g=<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(<a class="code" href="namespacetaylor.shtml#a9a41b2f1f6cfea4f5146f27d8d9ee641">cosh</a>(x)); 
 
    <a class="code" href="namespacetaylor.shtml#aa89cea38f6aff7d86e21c6b63c526e3c">f_g_u</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>,g,x,<a class="code" href="namespacetaylor.shtml#ad243b95550a1735c01bab6b0461151e5aeffde8f5b520f64540cd53ca84b93034">_i_tanh</a>);
  
    <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a38b201904beee95d9528b9d656430c07"></a><!-- doxytag: member="taylor::Ub" ref="a38b201904beee95d9528b9d656430c07" args="(const dim2taylor_vector &amp;d2tv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">taylor::Ub</a> </td>
          <td>(</td>
          <td class="paramtype">const dim2taylor_vector &amp;&#160;</td>
          <td class="paramname"><em>d2tv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">1629</a> of file <a class="el" href="dim2taylor_8cpp_source.shtml">dim2taylor.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8hpp_source.shtml#l00189">taylor::dim2taylor_vector::ub</a>.</p>

<p>Referenced by <a class="el" href="collatorspnode_8cpp_source.shtml#l01503">subpavings::CollatorSPnode::_marginalise()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00783">subpavings::RealMappedSPnode::_marginalise()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01357">subpavings::MappedSPnode&lt; cxsc::real &gt;::_slice()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00731">subpavings::RealMappedSPnode::_start_marginalise()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01211">subpavings::CollatorSPnode::addPaving()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l01048">subpavings::CollatorSPVnode::addPavingWithVal()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00848">MRSampler::Bisect()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00175">BlowUpFromZero()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00116">subpavings::AdaptiveHistogramValidation::completeDataInsertionFromVec()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l00119">subpavings::AdaptiveHistogram::completeDataInsertionFromVec()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00162">const_itaylor()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01185">cos()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01285">cosh()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01538">taylor::dim2taylor_vector::dim2taylor_vector()</a>, <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00244">subpavings::CollatorSPnode::dotDiffPaving()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00112">Fobj::DrawFromBoxPrior()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00128">DrawQZUnifBox()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00147">DrawQZUnifBoxV()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00807">f_g_u()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">PhyloTree::fillProbIntervalJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">PhyloTree::fillProbRealCFN()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">PhyloTree::fillProbRealJC69()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00987">subpavings::AdaptiveHistogramCollator::findDensityRegion()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l04629">subpavings::AdaptiveHistogram::findDensityRegion()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00202">Fobj::getLabeledDomainDim()</a>, <a class="el" href="sptools_8cpp_source.shtml#l01021">subpavings::getRvectorsFromRSSample()</a>, <a class="el" href="sptools_8cpp_source.shtml#l01115">subpavings::getRvectorsFromRSSampleForSampling()</a>, <a class="el" href="sptools_8cpp_source.shtml#l00930">subpavings::getRvectorsFromRVec()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00100">GOptMax()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00061">GOptMin()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01603">init_var()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01387">subpavings::AdaptiveHistogram::insertOne()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00213">Intersection()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00095">taylor::itaylor::itaylor()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00147">subpavings::CollatorSPVnode::leafAccumulationOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01348">subpavings::CollatorSPnode::leafAccumulationOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00107">subpavings::CollatorSPnode::leafAverageOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00109">subpavings::CollatorSPVnode::leafAverageOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00182">subpavings::CollatorSPVnode::leafDifferenceOutputTabs()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00547">subpavings::CollatorSPVnode::leafOutputTabs()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00607">subpavings::CollatorSPnode::leafOutputTabs()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00899">subpavings::SPnode::leafOutputTabs()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00373">subpavings::SPSVnode::leafOutputTabs()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01005">subpavings::MappedSPnode&lt; cxsc::real &gt;::leafOutputTabs()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00348">subpavings::SPSnode::leafOutputTabs()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00378">subpavings::SPSnode::leafOutputTabsWithEMPs()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00405">subpavings::SPSVnode::leafOutputTabsWithHistHeight()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00414">subpavings::SPSnode::leafOutputTabsWithHistHeight()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00444">subpavings::SPSnode::leafOutputTabsWithHistHeightAndEMPs()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00250">Lower()</a>, <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01636">subpavings::CollatorSPnode::marginalise()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00192">MaxDiam()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00159">MaxDiamComp()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler::MRSampler()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00235">MRSampler::MRSoutput()</a>, <a class="el" href="collatorspvnode_8cpp_source.shtml#l00726">subpavings::CollatorSPVnode::nodePrint()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00677">subpavings::CollatorSPnode::nodePrint()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00877">subpavings::SPnode::nodePrint()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l01765">subpavings::SPSVnode::nodePrint()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l00977">subpavings::MappedSPnode&lt; cxsc::real &gt;::nodePrint()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01995">subpavings::SPSnode::nodePrint()</a>, <a class="el" href="RosenDensityFobj_8cpp_source.shtml#l00024">RosenDensityFobj::operator()()</a>, <a class="el" href="oscFobj1_8cpp_source.shtml#l00020">OscFobj::operator()()</a>, <a class="el" href="RosenFobj2D_8cpp_source.shtml#l00020">RosenFobj2D::operator()()</a>, <a class="el" href="RosenFobj10D_8cpp_source.shtml#l00017">RosenFobj10D::operator()()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="GaussianFobj_8cpp_source.shtml#l00035">subpavings::GaussianFobj::operator()()</a>, <a class="el" href="UniformFobj_8cpp_source.shtml#l00037">subpavings::UniformFobj::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00075">FCFN3Star::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00181">FLevy2D_Lkl_Tfrom1data::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00151">FCFN3UnRooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00279">FCFN3Rooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00340">subpavings::AdaptiveHistogramCollator::operator+()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00384">operator+()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01166">subpavings::AdaptiveHistogram::operator+()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00233">subpavings::AdaptiveHistogramVCollator::operator-()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00422">subpavings::AdaptiveHistogramCollator::operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00354">operator-()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00333">operator&lt;&lt;()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00097">LabBox::Output()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00217">MRSampler::Output_Domain_Partition()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00380">plainPrint()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00346">prettyPrint()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00037">LabPnt::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00060">WLabPnt::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00082">LabBox::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00153">RangedLabBox::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00336">RSSample::Print()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00462">ISSample::Print()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l00308">print_itaylor()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00133">Fobj::PriorDensity()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00285">realVolume()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00279">MRSampler::RejectionSampleOnce()</a>, <a class="el" href="spsvnode_8cpp_source.shtml#l00457">subpavings::SPSVnode::setSplits()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l00507">subpavings::SPSnode::setSplits()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01157">sin()</a>, <a class="el" href="itaylor_8cpp_source.shtml#l01257">sinh()</a>, <a class="el" href="mappedspnode_8hpp_source.shtml#l01591">subpavings::MappedSPnode&lt; cxsc::real &gt;::sliceCheck()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00195">subpavings::SPnode::SPnode()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00258">Upper()</a>, <a class="el" href="sptools_8cpp_source.shtml#l00450">subpavings::volCompare()</a>, <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00397">volCompare()</a>, and <a class="el" href="toolz_8cpp_source.shtml#l00266">Volume()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">return</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a>.<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml#a5a1d2347123e0bbc823b57a8d6f4d74c">ub</a>;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6e77b6cb75729b58b05e3b3c5709aefc"></a><!-- doxytag: member="taylor::var_itaylor" ref="a6e77b6cb75729b58b05e3b3c5709aefc" args="(int ord, const real &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">taylor::var_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const real &amp;&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00144">144</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord,x);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a44a70c367b1b6a794db51766b92e6199"></a><!-- doxytag: member="taylor::var_itaylor" ref="a44a70c367b1b6a794db51766b92e6199" args="(int ord, const interval &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classtaylor_1_1itaylor.shtml">itaylor</a> <a class="el" href="namespacetaylor.shtml#a6e77b6cb75729b58b05e3b3c5709aefc">taylor::var_itaylor</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const interval &amp;&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="itaylor_8cpp_source.shtml#l00152">152</a> of file <a class="el" href="itaylor_8cpp_source.shtml">itaylor.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classitaylor.shtml">itaylor</a> erg(ord,x);
    <span class="keywordflow">return</span> erg;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacetaylor.shtml">taylor</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:43 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
