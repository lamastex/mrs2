<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Averaging.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Averaging_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Averaging.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Averaging_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">using namespace </span>cxsc;
<a name="l00035"></a>00035 <span class="keyword">using namespace </span>std;
<a name="l00036"></a>00036 <span class="keyword">using namespace </span>subpavings;
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="Averaging_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00038</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
<a name="l00043"></a>00043     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00044"></a>00044     gsl_rng * r;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046     <span class="keyword">const</span> <span class="keywordtype">int</span> n=10;  <span class="comment">// number to generate</span>
<a name="l00047"></a>00047     <span class="keywordtype">double</span> sigma_x=1;   <span class="comment">// distribution parameter</span>
<a name="l00048"></a>00048     <span class="keywordtype">double</span> sigma_y=1;   <span class="comment">// distribution parameter</span>
<a name="l00049"></a>00049     <span class="keywordtype">double</span> rho=0;       <span class="comment">// x and y uncorrelated</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053     gsl_rng_env_setup();
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     T = gsl_rng_default;
<a name="l00056"></a>00056     r = gsl_rng_alloc (T);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">// ----------------   example to create and ------------------</span>
<a name="l00059"></a>00059     <span class="comment">//---------------- collate multiple histograms -------------------</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061     <span class="comment">// make a box: the same box will be used by all histograms</span>
<a name="l00062"></a>00062     <span class="comment">// so should be big enough for all of them</span>
<a name="l00063"></a>00063     <span class="keywordtype">int</span> d = 2; <span class="comment">// dimensions</span>
<a name="l00064"></a>00064     ivector pavingBox(d);
<a name="l00065"></a>00065     interval dim1(-5,5);
<a name="l00066"></a>00066     interval dim2(-5,5);
<a name="l00067"></a>00067     pavingBox[1] = dim1;
<a name="l00068"></a>00068     pavingBox[2] = dim2;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <span class="comment">// make a collation object, empty at present</span>
<a name="l00071"></a>00071     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <span class="comment">// the number of histograms to generate</span>
<a name="l00074"></a>00074     <span class="keywordtype">int</span> numHist = 10000;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <span class="comment">// for loop to generate histograms and add to collation</span>
<a name="l00077"></a>00077     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=numHist; j++) {
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="comment">//get n random variates chosen from the bivariate Gaussian</span>
<a name="l00080"></a>00080         <span class="comment">// distribution with mean zero and given sigma_x, sigma_y.</span>
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084         <span class="comment">// make a sample</span>
<a name="l00085"></a>00085         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00086"></a>00086 
<a name="l00087"></a>00087             rvector thisrv(d);
<a name="l00088"></a>00088             <span class="keywordtype">double</span> x = 0;
<a name="l00089"></a>00089             <span class="keywordtype">double</span> y = 0;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091             gsl_ran_bivariate_gaussian(r, sigma_x, sigma_y,
<a name="l00092"></a>00092                                     rho, &amp;x, &amp;y);
<a name="l00093"></a>00093             thisrv[1] = x;
<a name="l00094"></a>00094             thisrv[2] = y;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096             <span class="comment">// put points generated into container</span>
<a name="l00097"></a>00097             theData.push_back(thisrv);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099         }  <span class="comment">// data should be in theData</span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="comment">// make an Adaptive Histogram object with a specified box.  By default,</span>
<a name="l00103"></a>00103         <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00104"></a>00104         <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00105"></a>00105         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="comment">// find k, the maximum number of data members</span>
<a name="l00108"></a>00108         <span class="comment">// to be allowed in each box of the histogram</span>
<a name="l00109"></a>00109         <span class="comment">// as a function of j and n</span>
<a name="l00110"></a>00110         <span class="comment">// applying SEB heuristics for k to satisfy k/n -&gt; 0 as n -&gt; +oo</span>
<a name="l00111"></a>00111         <span class="keywordtype">int</span> k_int = (int(log2(<span class="keywordtype">double</span>(n)))*2*j);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         cout &lt;&lt; <span class="stringliteral">&quot;Splitting with k = &quot;</span> &lt;&lt; k_int &lt;&lt; endl;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="comment">// make the function object to get max myK data members in each box</span>
<a name="l00118"></a>00118         <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(k_int);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120         <span class="comment">// insert data into the histogram, splitting as we go, no logging</span>
<a name="l00121"></a>00121         successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData, splitK, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00122"></a>00122 
<a name="l00123"></a>00123         <span class="comment">// only do more if some data was fed in</span>
<a name="l00124"></a>00124         <span class="keywordflow">if</span>(successfulInsertion) {
<a name="l00125"></a>00125 
<a name="l00126"></a>00126             <span class="comment">// create a name for the file to output</span>
<a name="l00127"></a>00127             <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;BivGaussian&quot;</span>;
<a name="l00128"></a>00128             <span class="comment">//convert j to a string</span>
<a name="l00129"></a>00129             std::ostringstream stm2;
<a name="l00130"></a>00130             stm2 &lt;&lt; j;
<a name="l00131"></a>00131             <span class="comment">// add the stringed j to the filename</span>
<a name="l00132"></a>00132             fileName += stm2.str();
<a name="l00133"></a>00133             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00134"></a>00134 
<a name="l00135"></a>00135             <span class="comment">// To realize a file output</span>
<a name="l00136"></a>00136             myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138             <span class="comment">// add the histogram to the collection</span>
<a name="l00139"></a>00139             coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(myHist);
<a name="l00140"></a>00140 
<a name="l00141"></a>00141             <span class="comment">// optional- create graph output</span>
<a name="l00142"></a>00142             <span class="comment">// myHist.outputGraphDot();</span>
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     } <span class="comment">// end of for loop creating histograms</span>
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <span class="comment">// free the random number generator</span>
<a name="l00148"></a>00148     gsl_rng_free (r);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     <span class="keywordtype">string</span> collfileName = <span class="stringliteral">&quot;CollatorHistogram.txt&quot;</span>;
<a name="l00151"></a>00151     coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(collfileName); <span class="comment">// output the collation to file</span>
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     <span class="comment">// optional - create graph output - don&#39;t do for lots of leaves!</span>
<a name="l00154"></a>00154     <span class="comment">//coll.outputGraphDot();</span>
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">//  Make an average</span>
<a name="l00157"></a>00157   <span class="keywordtype">string</span> avgfileName = <span class="stringliteral">&quot;AverageBG.txt&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avColl = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l00160"></a>00160   avColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(avgfileName);  <span class="comment">// output the average to file</span>
<a name="l00161"></a>00161   
<a name="l00162"></a>00162   avColl.getAvgHistUnifIAE(); <span class="comment">// get the IAE for the averaged histogram</span>
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="comment">// ---- end of example to create and collate multiple histograms -----</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="keywordflow">return</span> 0;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 } <span class="comment">// end of averaging test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Averaging_8cpp.shtml">Averaging.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
