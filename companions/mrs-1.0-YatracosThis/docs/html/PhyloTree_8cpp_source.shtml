<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: PhyloTree.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('PhyloTree_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">PhyloTree.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="PhyloTree_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="PhyloTree_8hpp.shtml" title="Declarations for a class of objects to represent Phylogenetic Trees.">PhyloTree.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// functions which conform the the typedefs for transition probability functions</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">// conforms to typedef for *RealTranProb_FctPtr</span>
<a name="l00031"></a>00031 <span class="comment">// Jukes Cantor formula for transition from nucleotype </span>
<a name="l00032"></a>00032 <span class="comment">// i to j for an unrooted tree</span>
<a name="l00033"></a>00033 <span class="comment">// t is branchlength</span>
<a name="l00034"></a>00034 <span class="comment">// returns a real</span>
<a name="l00035"></a><a class="code" href="PhyloTree_8hpp.shtml#aa9345a2830ad2dc42d513ff3438b51f6">00035</a> real <a class="code" href="PhyloTree_8cpp.shtml#aa9345a2830ad2dc42d513ff3438b51f6" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69R</a> (<span class="keyword">const</span> real&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j )
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037   real p;
<a name="l00038"></a>00038   p = (i==j) ? ( (0.25)+(0.75 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) ) : 
<a name="l00039"></a>00039     ( (0.25)-(0.25 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) );
<a name="l00040"></a>00040   <span class="keywordflow">return</span> p;
<a name="l00041"></a>00041 }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// conforms to typedef for *IntervalTranProb_FctPtr</span>
<a name="l00044"></a>00044 <span class="comment">// Jukes Cantor formula for transition from nucleotype </span>
<a name="l00045"></a>00045 <span class="comment">// i to j for an unrooted tree</span>
<a name="l00046"></a>00046 <span class="comment">// t is branchlength as an interval</span>
<a name="l00047"></a>00047 <span class="comment">// returns an interval</span>
<a name="l00048"></a><a class="code" href="PhyloTree_8hpp.shtml#a56808e5beae03768e4d46dc72617f722">00048</a> interval <a class="code" href="PhyloTree_8cpp.shtml#a56808e5beae03768e4d46dc72617f722" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69I</a> (<span class="keyword">const</span> interval&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j )
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050   interval p;
<a name="l00051"></a>00051   p = (i==j) ? ( (0.25)+(0.75 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) ) : 
<a name="l00052"></a>00052     ( (0.25)-(0.25 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) );
<a name="l00053"></a>00053   <span class="keywordflow">return</span> p;
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">// conforms to typedef for *HessTranProb_FctPtr</span>
<a name="l00057"></a>00057 <span class="comment">// Jukes Cantor formula for transition from nucleotype </span>
<a name="l00058"></a>00058 <span class="comment">// i to j for an unrooted tree</span>
<a name="l00059"></a>00059 <span class="comment">// t is branchlength</span>
<a name="l00060"></a>00060 <span class="comment">// returns a HessType</span>
<a name="l00061"></a><a class="code" href="PhyloTree_8hpp.shtml#a2ffe000f93e3429bd11c7921fe152f53">00061</a> HessType <a class="code" href="PhyloTree_8cpp.shtml#a2ffe000f93e3429bd11c7921fe152f53" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69H</a> (<span class="keyword">const</span> HessType&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j )
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   HessType p;
<a name="l00064"></a>00064   p = (i==j) ? ( (0.25)+(0.75 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) ) : 
<a name="l00065"></a>00065     ( (0.25)-(0.25 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(4.0/3.0)*t)) );
<a name="l00066"></a>00066   <span class="keywordflow">return</span> p;
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">// transition probability, from j to i, under CFN model </span>
<a name="l00070"></a>00070 <span class="comment">// (2 characters in character space)</span>
<a name="l00071"></a>00071 <span class="comment">// conforms to typedef for *RealTranProb_FctPtr</span>
<a name="l00072"></a>00072 <span class="comment">// CFN formula for transition from nucleotype i to j // t is branchlength</span>
<a name="l00073"></a>00073 <span class="comment">// returns a real</span>
<a name="l00074"></a><a class="code" href="PhyloTree_8hpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb">00074</a> real <a class="code" href="PhyloTree_8cpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb" title="CFN formula for transition from nucleotype i to j with character space 2.">PijofT_CFNR</a>(<span class="keyword">const</span> real&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j)
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076   real p;
<a name="l00077"></a>00077   p = (i==j) ? ( (0.5)+(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) ) : 
<a name="l00078"></a>00078     ( (0.5)-(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) );
<a name="l00079"></a>00079   <span class="keywordflow">return</span> p;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">// transition probability, from j to i, under CFN model </span>
<a name="l00083"></a>00083 <span class="comment">// (2 characters in character space)</span>
<a name="l00084"></a>00084 <span class="comment">// conforms to typedef for *IntervalTranProb_FctPtr</span>
<a name="l00085"></a>00085 <span class="comment">// CFN formula for transition from nucleotype i to j // t is branchlength</span>
<a name="l00086"></a>00086 <span class="comment">// returns an interval</span>
<a name="l00087"></a><a class="code" href="PhyloTree_8hpp.shtml#a7d42a5b4171b33c9a2eb051860d7b564">00087</a> interval <a class="code" href="PhyloTree_8cpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb" title="CFN formula for transition from nucleotype i to j with character space 2.">PijofT_CFNR</a>(<span class="keyword">const</span> interval&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089   interval p;
<a name="l00090"></a>00090   p = (i==j) ? ( (0.5)+(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) ) : 
<a name="l00091"></a>00091     ( (0.5)-(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) );
<a name="l00092"></a>00092   <span class="keywordflow">return</span> p;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="comment">// transition probability, from j to i, under CFN model </span>
<a name="l00097"></a>00097 <span class="comment">// (2 characters in character space)</span>
<a name="l00098"></a>00098 <span class="comment">// conforms to typedef for *HessTranProb_FctPtr</span>
<a name="l00099"></a>00099 <span class="comment">// CFN formula for transition from nucleotype i to j // t is branchlength</span>
<a name="l00100"></a>00100 <span class="comment">// returns a HessTupe</span>
<a name="l00101"></a><a class="code" href="PhyloTree_8hpp.shtml#a5d2cf8b67d0cd86687725e3b4a0cc4c6">00101</a> HessType <a class="code" href="PhyloTree_8cpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb" title="CFN formula for transition from nucleotype i to j with character space 2.">PijofT_CFNR</a>(<span class="keyword">const</span> HessType&amp; t, <span class="keyword">const</span> <span class="keywordtype">int</span> i, <span class="keyword">const</span> <span class="keywordtype">int</span> j)
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103   HessType p;
<a name="l00104"></a>00104   p = (i==j) ? ( (0.5)+(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) ) : 
<a name="l00105"></a>00105     ( (0.5)-(0.5 * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(1.0/2.0)*t)) );
<a name="l00106"></a>00106   <span class="keywordflow">return</span> p;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 <span class="comment">//------------------------------ PhyloNode class implementation</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="comment">// Destructor</span>
<a name="l00113"></a><a class="code" href="classPhyloNode.shtml#ac1753eafd402a1c709bed60c2a3d04bb">00113</a> <a class="code" href="classPhyloNode.shtml#ac1753eafd402a1c709bed60c2a3d04bb" title="Destructor.">PhyloNode::~PhyloNode</a>()
<a name="l00114"></a>00114 {
<a name="l00115"></a>00115   <span class="comment">// call DeleteObject to delete all the child nodes</span>
<a name="l00116"></a>00116   for_each(<a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.begin(), <a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.end(), <a class="code" href="structDeleteObject.shtml" title="A struct to make a templatised function to delete objects pointed to by pointers.">DeleteObject</a>());
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 }                   <span class="comment">// end destructor</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 <span class="comment">// Add a child to this node</span>
<a name="l00121"></a><a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228">00121</a> <span class="keywordtype">void</span> <a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228" title="Add a child to this node.">PhyloNode::addChild</a>(<a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * <span class="keyword">const</span> child)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123   child-&gt;<a class="code" href="classPhyloNode.shtml#a2393043d53032824ed9de2ed0429f7d7" title="Set the parent of this node.">setParent</a>(<span class="keyword">this</span>);
<a name="l00124"></a>00124   <a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.push_back(child);
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a><a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">00127</a> <span class="keywordtype">size_t</span> <a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">PhyloNode::noChildren</a>()<span class="keyword"> const</span>
<a name="l00128"></a>00128 <span class="keyword"></span>{
<a name="l00129"></a>00129   <span class="keywordflow">return</span> <a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.size();
<a name="l00130"></a>00130 }
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classPhyloNode.shtml#adbb02a774b9fe0125d646d96c59c9a46">00132</a> <span class="keywordtype">size_t</span> <a class="code" href="classPhyloNode.shtml#adbb02a774b9fe0125d646d96c59c9a46">PhyloNode::noDescendents</a>()<span class="keyword"> const</span>
<a name="l00133"></a>00133 <span class="keyword"></span>{
<a name="l00134"></a>00134   <span class="keywordtype">size_t</span> noDes = <a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.size();
<a name="l00135"></a>00135   <span class="comment">//iterate over each child and repeat</span>
<a name="l00136"></a>00136   PhyloPtrs::const_iterator it;
<a name="l00137"></a>00137   <span class="comment">//PhyloPtrsItr it;</span>
<a name="l00138"></a>00138   <span class="keywordflow">for</span> (it=<a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.begin(); it &lt; <a class="code" href="classPhyloNode.shtml#ae90d7dd10164a001107371397dc036be">childNodes</a>.end(); it++)
<a name="l00139"></a>00139   {
<a name="l00140"></a>00140     noDes += (*it)-&gt;noDescendents();
<a name="l00141"></a>00141   }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="keywordflow">return</span> noDes;
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a><a class="code" href="classPhyloNode.shtml#a11c02f207d02d5c75103a5aaf51bde0d">00146</a> <span class="keywordtype">void</span> <a class="code" href="classPhyloNode.shtml#a11c02f207d02d5c75103a5aaf51bde0d" title="Print node details.">PhyloNode::printNode</a>()<span class="keyword"> const</span>
<a name="l00147"></a>00147 <span class="keyword"></span>{
<a name="l00148"></a>00148   <span class="comment">// branch, sequence number, sequence name, time, label, newline</span>
<a name="l00149"></a>00149   std::cout &lt;&lt; <span class="stringliteral">&quot;ibranch is \t&quot;</span> &lt;&lt; <a class="code" href="classPhyloNode.shtml#a08d47840fd629726502a4c83ee7f97d0" title="signifies the edge number, ie the correspondence to the dimensions of the problem">ibranch</a> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;seq_no \t&quot;</span> &lt;&lt; <a class="code" href="classPhyloNode.shtml#ac50e08220f3cfb519d0e21ae4dd53dd2" title="every leaf node should have a sequence number">seq_no</a>
<a name="l00150"></a>00150     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;time \t&quot;</span> &lt;&lt; <a class="code" href="classPhyloNode.shtml#a24cf3f05065a31fde05a428d0eca87cf" title="some nodes may be given a time in the tree file">time</a> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;label \t&quot;</span> &lt;&lt; <a class="code" href="classPhyloNode.shtml#a4abacdd01e6c36193c6372758a05debf" title="some nodes may be given a label in the input file">label</a>  &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> 
<a name="l00151"></a>00151     &lt;&lt; <span class="stringliteral">&quot;name \t&quot;</span> &lt;&lt; <a class="code" href="classPhyloNode.shtml#aa99afd949e72b932d9c0d89d06c2a890" title="sequence name for leaf notes, derived from the sequence number and sequence file">seq_name</a> &lt;&lt; endl;
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="comment">// --------------------------- end of PhyloNode implementation -----------------</span>
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">// --------------------------- start PhyloTree implementation ------------------</span>
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">// Constructor</span>
<a name="l00159"></a><a class="code" href="classPhyloTree.shtml#a0b54fc5ece14eeec6f28945306d070fd">00159</a> <a class="code" href="classPhyloTree.shtml#ab6e00efe0c10f4a93d34e7d027489ac6" title="Default constructor.">PhyloTree::PhyloTree</a>(<span class="keywordtype">int</span> cs, <span class="keywordtype">string</span>&amp; line, <span class="keyword">const</span> vector&lt;string&gt;&amp; seqnames) 
<a name="l00160"></a>00160 : 
<a name="l00161"></a>00161 CharacterSpace(cs)
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163   <span class="comment">// use decode tree to decode the line, returns a pointer to a PhyloNode</span>
<a name="l00164"></a>00164   <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a> = <a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e" title="Decodes and makes a tree from a line from the tree file.">DecodeTree</a>(line, seqnames);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 }                   <span class="comment">// end constructor</span>
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="comment">// Constructor</span>
<a name="l00169"></a><a class="code" href="classPhyloTree.shtml#a70200f6baa49702caa47c79d59d92a39">00169</a> <a class="code" href="classPhyloTree.shtml#ab6e00efe0c10f4a93d34e7d027489ac6" title="Default constructor.">PhyloTree::PhyloTree</a>(<span class="keywordtype">int</span> cs, <span class="keywordtype">string</span>&amp; line) : CharacterSpace(cs)
<a name="l00170"></a>00170 {
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   <span class="comment">// make an empty container</span>
<a name="l00173"></a>00173   vector&lt;string&gt; seqnames;
<a name="l00174"></a>00174   
<a name="l00175"></a>00175   <span class="comment">// use decode tree to decode the line, returns a pointer to a PhyloNode</span>
<a name="l00176"></a>00176   <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a> = <a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e" title="Decodes and makes a tree from a line from the tree file.">DecodeTree</a>(line, seqnames);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 }                   <span class="comment">// end constructor</span>
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">// Get the number of nodes in the tree, including the root</span>
<a name="l00181"></a><a class="code" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7">00181</a> <span class="keywordtype">size_t</span> <a class="code" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7" title="Get the number of nodes in the tree, including the root.">PhyloTree::getNumberNodes</a>()<span class="keyword"> const</span>
<a name="l00182"></a>00182 <span class="keyword"></span>{
<a name="l00183"></a>00183   <span class="keywordtype">size_t</span> noNodes = 0;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185   <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>!=NULL)
<a name="l00186"></a>00186   {
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     noNodes++;      <span class="comment">// count the root</span>
<a name="l00189"></a>00189     <span class="comment">// and add on descendents of root</span>
<a name="l00190"></a>00190     noNodes += <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#adbb02a774b9fe0125d646d96c59c9a46">noDescendents</a>();
<a name="l00191"></a>00191   }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="keywordflow">return</span> noNodes;
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">// print a tree starting with the root</span>
<a name="l00197"></a><a class="code" href="classPhyloTree.shtml#ac593ca7be08c1b02b1b9e4d5229363bd">00197</a> <span class="keywordtype">void</span> <a class="code" href="classPhyloTree.shtml#ac593ca7be08c1b02b1b9e4d5229363bd" title="print a tree starting with the root">PhyloTree::PrintTree</a>()<span class="keyword"> const</span>
<a name="l00198"></a>00198 <span class="keyword"></span>{
<a name="l00199"></a>00199 
<a name="l00200"></a>00200   <a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30" title="Prints a branch of the tree.">PrintBranch</a>(<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, 0);
<a name="l00201"></a>00201   std:: cout &lt;&lt; std::endl;
<a name="l00202"></a>00202   std:: cout &lt;&lt; std::endl;
<a name="l00203"></a>00203 }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="comment">// return the probability of a given pattern for this tree</span>
<a name="l00206"></a>00206 <span class="comment">// version dealing with rvectors, ie points</span>
<a name="l00207"></a>00207 <span class="comment">// and applying JC69 transition probabilities</span>
<a name="l00208"></a><a class="code" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24">00208</a> <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24" title="Return the probability of a given pattern for this tree.">PhyloTree::fillProbRealJC69</a>(<span class="keyword">const</span> rvector&amp; x, 
<a name="l00209"></a>00209                                        <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00210"></a>00210                                        <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; rNucProb)<span class="keyword"> const</span>
<a name="l00211"></a>00211 <span class="keyword"></span>{
<a name="l00212"></a>00212 
<a name="l00213"></a>00213   <span class="comment">// check we have some children</span>
<a name="l00214"></a>00214   <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
<a name="l00215"></a>00215   {
<a name="l00216"></a>00216     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
<a name="l00217"></a>00217               &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
<a name="l00218"></a>00218     exit(1);
<a name="l00219"></a>00219   }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221   <span class="comment">// check the dimensions of the point matches dimensions for this tree</span>
<a name="l00222"></a>00222   <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
<a name="l00223"></a>00223   <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
<a name="l00224"></a>00224   {
<a name="l00225"></a>00225     std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
<a name="l00226"></a>00226       &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
<a name="l00227"></a>00227     exit(1);
<a name="l00228"></a>00228   }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   <span class="comment">// use the root as the node to start post order traversal</span>
<a name="l00231"></a>00231   <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
<a name="l00232"></a>00232   rNucProb = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#aa9345a2830ad2dc42d513ff3438b51f6" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69R</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, rNucProb);
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00235"></a>00235   <span class="keywordflow">return</span> rNucProb;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="comment">// return the probability of a given pattern for this tree</span>
<a name="l00240"></a>00240 <span class="comment">// version dealing with ivectors, ie boxes</span>
<a name="l00241"></a>00241 <span class="comment">// and applying JC69 transition probabilities</span>
<a name="l00242"></a><a class="code" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a">00242</a> <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a" title="Return the probability of a given pattern for this tree.">PhyloTree::fillProbIntervalJC69</a>(<span class="keyword">const</span> ivector&amp; x, 
<a name="l00243"></a>00243                                                <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00244"></a>00244                                                <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a>&amp; iNucProb)<span class="keyword"> const</span>
<a name="l00245"></a>00245 <span class="keyword"></span>{
<a name="l00246"></a>00246 
<a name="l00247"></a>00247   <span class="comment">// check we have some children</span>
<a name="l00248"></a>00248   <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
<a name="l00249"></a>00249   {
<a name="l00250"></a>00250     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
<a name="l00251"></a>00251               &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
<a name="l00252"></a>00252     exit(1);
<a name="l00253"></a>00253   }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255   <span class="comment">// check the dimensions of the box matches dimensions for this tree</span>
<a name="l00256"></a>00256   <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
<a name="l00257"></a>00257   <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
<a name="l00258"></a>00258   {
<a name="l00259"></a>00259     std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
<a name="l00260"></a>00260       &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
<a name="l00261"></a>00261     exit(1);
<a name="l00262"></a>00262   }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264   <span class="comment">// use the root as the node to start post order traversal</span>
<a name="l00265"></a>00265   <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
<a name="l00266"></a>00266   iNucProb = <a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba" title="Calculates the probabilities as an interval of each character for a node given its children&#39;s state...">nodePOTinterval</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a56808e5beae03768e4d46dc72617f722" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69I</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, iNucProb);
<a name="l00267"></a>00267 
<a name="l00268"></a>00268   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00269"></a>00269   <span class="keywordflow">return</span> iNucProb;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="comment">// return the probability of a given pattern for this tree</span>
<a name="l00274"></a>00274 <span class="comment">// version dealing with HTvectors</span>
<a name="l00275"></a>00275 <span class="comment">// and applying JC69 transition probabilities</span>
<a name="l00276"></a><a class="code" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183">00276</a> <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183" title="Return the probability of a given pattern for this tree.">PhyloTree::fillProbHessJC69</a>(<span class="keyword">const</span> HTvector&amp; x, 
<a name="l00277"></a>00277                                        <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00278"></a>00278                                        <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a>&amp; hNucProb)<span class="keyword"> const</span>
<a name="l00279"></a>00279 <span class="keyword"></span>{
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="comment">// check we have some children</span>
<a name="l00282"></a>00282   <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
<a name="l00283"></a>00283   {
<a name="l00284"></a>00284     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
<a name="l00285"></a>00285               &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
<a name="l00286"></a>00286     exit(1);
<a name="l00287"></a>00287   }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   <span class="comment">// check the dimensions of the HTVector matches dimensions for this tree</span>
<a name="l00290"></a>00290   <span class="keywordtype">int</span> d = x.Dim();
<a name="l00291"></a>00291   <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
<a name="l00292"></a>00292   {
<a name="l00293"></a>00293     std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
<a name="l00294"></a>00294       &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
<a name="l00295"></a>00295     exit(1);
<a name="l00296"></a>00296   }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="comment">// use the root as the node to start post order traversal</span>
<a name="l00299"></a>00299   <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
<a name="l00300"></a>00300   hNucProb = <a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e" title="Calculates the probabilities as HessType of each character in a character space for a node given its ...">nodePOTHess</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a2ffe000f93e3429bd11c7921fe152f53" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69H</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, hNucProb);
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00303"></a>00303   <span class="keywordflow">return</span> hNucProb;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="comment">// return the probability of a given pattern for this tree</span>
<a name="l00308"></a>00308 <span class="comment">// version dealing with rvectors, ie points</span>
<a name="l00309"></a>00309 <span class="comment">// and applying CFN transition probabilities</span>
<a name="l00310"></a><a class="code" href="classPhyloTree.shtml#a29c5f4195d70604d82ac900a97e05d1a">00310</a> <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#a29c5f4195d70604d82ac900a97e05d1a" title="Return the probability of a given pattern for this tree.">PhyloTree::fillProbRealCFN</a>(<span class="keyword">const</span> rvector&amp; x, 
<a name="l00311"></a>00311                                       <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00312"></a>00312                                       <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; rNucProb)<span class="keyword"> const</span>
<a name="l00313"></a>00313 <span class="keyword"></span>{
<a name="l00314"></a>00314 
<a name="l00315"></a>00315   <span class="comment">// check we have some children</span>
<a name="l00316"></a>00316   <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
<a name="l00317"></a>00317   {
<a name="l00318"></a>00318     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
<a name="l00319"></a>00319               &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
<a name="l00320"></a>00320     exit(1);
<a name="l00321"></a>00321   }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323   <span class="comment">// check the dimensions of the point matches dimensions for this tree</span>
<a name="l00324"></a>00324   <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
<a name="l00325"></a>00325   <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
<a name="l00326"></a>00326   {
<a name="l00327"></a>00327     std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
<a name="l00328"></a>00328       &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
<a name="l00329"></a>00329     exit(1);
<a name="l00330"></a>00330   }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   <span class="comment">// use the root as the node to start post order traversal</span>
<a name="l00333"></a>00333   <span class="comment">// and pass in pointer to CFN transition probabilites function</span>
<a name="l00334"></a>00334   rNucProb = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb" title="CFN formula for transition from nucleotype i to j with character space 2.">PijofT_CFNR</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, rNucProb);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00337"></a>00337   <span class="keywordflow">return</span> rNucProb;
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 }
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 <span class="comment">// decodes a tree from a line</span>
<a name="l00342"></a>00342 <span class="comment">// expects all sequence numbers to be followed by &#39;,&#39; or )&#39; </span>
<a name="l00343"></a>00343 <span class="comment">// so that it can distinguish &#39;12&#39; from &#39;1,2&#39;</span>
<a name="l00344"></a>00344 <span class="comment">// returns a pointer to the root node of the new tree</span>
<a name="l00345"></a><a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e">00345</a> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* <a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e" title="Decodes and makes a tree from a line from the tree file.">PhyloTree::DecodeTree</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; line, 
<a name="l00346"></a>00346                                  <span class="keyword">const</span> vector&lt;string&gt;&amp; seqnames)<span class="keyword"> const</span>
<a name="l00347"></a>00347 <span class="keyword"></span>{
<a name="l00348"></a>00348 
<a name="l00349"></a>00349   <span class="comment">// set up a pointer to node for a new tree</span>
<a name="l00350"></a>00350   <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* newtree = NULL;
<a name="l00351"></a>00351   <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* currentParent = NULL;
<a name="l00352"></a>00352   <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* currentNode = NULL;
<a name="l00353"></a>00353 
<a name="l00354"></a>00354   <span class="keywordtype">int</span> nodesRead = 0;<span class="comment">// to track number of nodes read in</span>
<a name="l00355"></a>00355   <span class="keywordtype">int</span> level = 0;    <span class="comment">// to track of tree levels</span>
<a name="l00356"></a>00356   <span class="keywordtype">int</span> branch = -1;  <span class="comment">// to track branch numbers</span>
<a name="l00357"></a>00357 
<a name="l00358"></a>00358   string::iterator it;
<a name="l00359"></a>00359   <span class="keywordtype">size_t</span> pos = 0;   <span class="comment">// a counter for characters in the line dealt with</span>
<a name="l00360"></a>00360 
<a name="l00361"></a>00361                     <span class="comment">// the length of the line</span>
<a name="l00362"></a>00362   <span class="keywordtype">size_t</span> lineLength = line.size();
<a name="l00363"></a>00363 
<a name="l00364"></a>00364   <span class="keywordflow">while</span> (pos &lt; lineLength)
<a name="l00365"></a>00365   {
<a name="l00366"></a>00366 
<a name="l00367"></a>00367     real time = 0.0;
<a name="l00368"></a>00368     <span class="keywordtype">int</span> label = 0;
<a name="l00369"></a>00369     <span class="keywordtype">int</span> sequenceNumber = 0;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371     <span class="keywordtype">char</span> ch = line[pos];
<a name="l00372"></a>00372     <span class="comment">// pos should show the position we are at in the string</span>
<a name="l00373"></a>00373 
<a name="l00374"></a>00374     <span class="keywordflow">switch</span> (ch)
<a name="l00375"></a>00375     {
<a name="l00376"></a>00376       <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:     <span class="comment">// ignore spaces</span>
<a name="l00377"></a>00377         pos++;
<a name="l00378"></a>00378         <span class="keywordflow">break</span>;
<a name="l00379"></a>00379 
<a name="l00380"></a>00380       <span class="keywordflow">case</span> <span class="charliteral">&#39;,&#39;</span>:     <span class="comment">// ignore commas</span>
<a name="l00381"></a>00381         <span class="comment">// commas are used as delimiters between sequence numbers, </span>
<a name="l00382"></a>00382         <span class="comment">// but once found</span>
<a name="l00383"></a>00383         <span class="comment">// and used to identify the end of the number, they can be ignored</span>
<a name="l00384"></a>00384         pos++;
<a name="l00385"></a>00385         <span class="keywordflow">break</span>;
<a name="l00386"></a>00386 
<a name="l00387"></a>00387       <span class="keywordflow">case</span> <span class="charliteral">&#39;;&#39;</span>:     <span class="comment">// ignore semicolons</span>
<a name="l00388"></a>00388         pos++;
<a name="l00389"></a>00389         <span class="keywordflow">break</span>;
<a name="l00390"></a>00390 
<a name="l00391"></a>00391       <span class="keywordflow">case</span> <span class="charliteral">&#39;(&#39;</span>:     <span class="comment">// go down a level in the tree, making new nodes </span>
<a name="l00392"></a>00392                     <span class="comment">// for each level</span>
<a name="l00393"></a>00393         <span class="comment">// set up a root node for a new tree</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395         <span class="keywordflow">try</span>
<a name="l00396"></a>00396         {
<a name="l00397"></a>00397                     <span class="comment">// ibranch is -1, parent is NULL</span>
<a name="l00398"></a>00398           currentNode = <span class="keyword">new</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>();
<a name="l00399"></a>00399         }
<a name="l00400"></a>00400         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00401"></a>00401         {
<a name="l00402"></a>00402           cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in DecodeTree&quot;</span> &lt;&lt; std::endl;
<a name="l00403"></a>00403           <span class="keyword">delete</span> newtree;
<a name="l00404"></a>00404           exit(1);
<a name="l00405"></a>00405         }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407         <span class="keywordflow">if</span> (newtree == NULL)
<a name="l00408"></a>00408         {
<a name="l00409"></a>00409           newtree = currentNode;
<a name="l00410"></a>00410           currentParent = newtree;
<a name="l00411"></a>00411           <span class="comment">// currentParent is NULL</span>
<a name="l00412"></a>00412         }
<a name="l00413"></a>00413         <span class="keywordflow">else</span>        <span class="comment">// there is already a root node</span>
<a name="l00414"></a>00414         {
<a name="l00415"></a>00415           <span class="comment">// make a new node</span>
<a name="l00416"></a>00416                     <span class="comment">// set branch of currentNode</span>
<a name="l00417"></a>00417           currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a9744c7676674e8e988449bda24808d54" title="Set the ibranch member.">setBranch</a>(branch);
<a name="l00418"></a>00418                     <span class="comment">// make the current node a child of the current parent</span>
<a name="l00419"></a>00419           currentParent-&gt;<a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228" title="Add a child to this node.">addChild</a>(currentNode);
<a name="l00420"></a>00420           currentParent = currentNode;
<a name="l00421"></a>00421         }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423         level++;
<a name="l00424"></a>00424         branch++;
<a name="l00425"></a>00425         nodesRead++;
<a name="l00426"></a>00426         pos++;
<a name="l00427"></a>00427 
<a name="l00428"></a>00428         <span class="keywordflow">break</span>;      <span class="comment">// end &#39;(&#39;</span>
<a name="l00429"></a>00429 
<a name="l00430"></a>00430       <span class="keywordflow">case</span> <span class="charliteral">&#39;)&#39;</span>:     <span class="comment">// go up a level in the tree</span>
<a name="l00431"></a>00431 
<a name="l00432"></a>00432         level--;
<a name="l00433"></a>00433                     <span class="comment">// check we can go up</span>
<a name="l00434"></a>00434         <span class="keywordflow">if</span> (level &lt; 0)
<a name="l00435"></a>00435         {
<a name="l00436"></a>00436           <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file: reading too many &#39;)&#39;&quot;</span>;
<a name="l00437"></a>00437           <span class="comment">// delete any tree that has been set up</span>
<a name="l00438"></a>00438           <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, newtree);
<a name="l00439"></a>00439         }
<a name="l00440"></a>00440         <span class="keywordflow">else</span>        <span class="comment">// level is okay</span>
<a name="l00441"></a>00441         {
<a name="l00442"></a>00442           <span class="comment">// make the currentParent into the parent </span>
<a name="l00443"></a>00443           <span class="comment">// of the present current parent</span>
<a name="l00444"></a>00444           currentNode = currentParent;
<a name="l00445"></a>00445           currentParent = currentParent-&gt;<a class="code" href="classPhyloNode.shtml#a960666762aaed1c4f6ddfbc2aa413892" title="Get the parent of this node.">getParent</a>();
<a name="l00446"></a>00446           pos++;
<a name="l00447"></a>00447         }
<a name="l00448"></a>00448 
<a name="l00449"></a>00449         <span class="comment">// no change in nodesRead</span>
<a name="l00450"></a>00450         <span class="comment">// no change in branch</span>
<a name="l00451"></a>00451 
<a name="l00452"></a>00452         <span class="keywordflow">break</span>;      <span class="comment">// end &#39;)&#39;</span>
<a name="l00453"></a>00453 
<a name="l00454"></a>00454       <span class="keywordflow">case</span> <span class="charliteral">&#39;:&#39;</span>:     <span class="comment">// signifies start of a time given as a length, </span>
<a name="l00455"></a>00455                     <span class="comment">// eg ((1:0.5,2;0.5):0.25,3:0.75, 4:0.75);</span>
<a name="l00456"></a>00456         time = <a class="code" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1" title="Extract a time given in a tree file if the identifier for a time has been found.">findTime</a>(line, lineLength, pos, newtree);
<a name="l00457"></a>00457         <span class="comment">// this moves pos to be the first character following </span>
<a name="l00458"></a>00458         <span class="comment">// the time characters</span>
<a name="l00459"></a>00459 
<a name="l00460"></a>00460         <span class="comment">// make this the time for the current node</span>
<a name="l00461"></a>00461         currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ac1e882ec990671ad78dc76218aa80610" title="Set the time member.">setTime</a>(time);
<a name="l00462"></a>00462 
<a name="l00463"></a>00463         <span class="comment">// no change in level</span>
<a name="l00464"></a>00464         <span class="comment">// no change in branch</span>
<a name="l00465"></a>00465 
<a name="l00466"></a>00466         <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;:&#39;</span>
<a name="l00467"></a>00467 
<a name="l00468"></a>00468       <span class="keywordflow">case</span> <span class="charliteral">&#39;#&#39;</span>:     <span class="comment">// signifies the start of a label, which is expected to a </span>
<a name="l00469"></a>00469                     <span class="comment">// single digit integer</span>
<a name="l00470"></a>00470         label = <a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55" title="Extract a label given in a tree file if the identifier for a label has been found.">findLabel</a>(line, lineLength, pos, newtree);
<a name="l00471"></a>00471         <span class="comment">// findLabel() updates pos to be the character after </span>
<a name="l00472"></a>00472         <span class="comment">// the end of the label</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474                     <span class="comment">// make the currentNode label the integer at this pos</span>
<a name="l00475"></a>00475         currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ab5fcae88b5e5a29c0619b2f1b85958be" title="Set the label member.">setLabel</a>(label);
<a name="l00476"></a>00476 
<a name="l00477"></a>00477         <span class="comment">// no change in level</span>
<a name="l00478"></a>00478         <span class="comment">// no change in branch</span>
<a name="l00479"></a>00479 
<a name="l00480"></a>00480         <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;#&#39;</span>
<a name="l00481"></a>00481 
<a name="l00482"></a>00482       <span class="keywordflow">case</span> <span class="charliteral">&#39;$&#39;</span> :    <span class="comment">// signifies the start of a label, which is expected </span>
<a name="l00483"></a>00483                     <span class="comment">// to a single digit integer</span>
<a name="l00484"></a>00484         label = <a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55" title="Extract a label given in a tree file if the identifier for a label has been found.">findLabel</a>(line, lineLength, pos, newtree);
<a name="l00485"></a>00485         <span class="comment">// findLabel() updates pos to be the character after </span>
<a name="l00486"></a>00486         <span class="comment">// the end of the label</span>
<a name="l00487"></a>00487 
<a name="l00488"></a>00488                     <span class="comment">// make the currentNode label the integer at this pos</span>
<a name="l00489"></a>00489         currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ab5fcae88b5e5a29c0619b2f1b85958be" title="Set the label member.">setLabel</a>(label);
<a name="l00490"></a>00490 
<a name="l00491"></a>00491         <span class="comment">// no change in level</span>
<a name="l00492"></a>00492         <span class="comment">// no change in branch</span>
<a name="l00493"></a>00493 
<a name="l00494"></a>00494         <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;$&#39;</span>
<a name="l00495"></a>00495 
<a name="l00496"></a>00496       <span class="keywordflow">default</span>:      <span class="comment">// not one of the recognised characters signifying </span>
<a name="l00497"></a>00497                     <span class="comment">// tree structure or a character to be ignored</span>
<a name="l00498"></a>00498         <span class="comment">// so expected to be either a sequence number or a sequence name</span>
<a name="l00499"></a>00499         <span class="comment">// we need to identify the sequence number and make a new node and add </span>
<a name="l00500"></a>00500         <span class="comment">// it to the tree</span>
<a name="l00501"></a>00501 
<a name="l00502"></a>00502         sequenceNumber = <a class="code" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f" title="Extract a sequence number from a tree file.">findSeqNo</a>(line, lineLength, pos, newtree, seqnames);
<a name="l00503"></a>00503         <span class="comment">// pos will be moved to first character following the sequence </span>
<a name="l00504"></a>00504         <span class="comment">// identifier (number or name)</span>
<a name="l00505"></a>00505 
<a name="l00506"></a>00506         <span class="comment">// make a new node</span>
<a name="l00507"></a>00507         <span class="keywordflow">try</span>
<a name="l00508"></a>00508         {
<a name="l00509"></a>00509                     <span class="comment">// ibranch is -1, parent is NULL</span>
<a name="l00510"></a>00510           currentNode = <span class="keyword">new</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>();
<a name="l00511"></a>00511         }
<a name="l00512"></a>00512         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00513"></a>00513         {
<a name="l00514"></a>00514           cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in DecodeTree&quot;</span> &lt;&lt; std::endl;
<a name="l00515"></a>00515           <span class="keyword">delete</span> newtree;
<a name="l00516"></a>00516           exit(1);
<a name="l00517"></a>00517         }
<a name="l00518"></a>00518 
<a name="l00519"></a>00519                     <span class="comment">// set branch of currentNode</span>
<a name="l00520"></a>00520         currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a9744c7676674e8e988449bda24808d54" title="Set the ibranch member.">setBranch</a>(branch);
<a name="l00521"></a>00521                     <span class="comment">// set the sequence number of the current node</span>
<a name="l00522"></a>00522         currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a30b68416bbeabe566b2d17ef43ff753c" title="Set the seq_no member.">setSeqNo</a>(sequenceNumber);
<a name="l00523"></a>00523 
<a name="l00524"></a>00524         <span class="keywordflow">if</span> (!seqnames.empty())
<a name="l00525"></a>00525         {
<a name="l00526"></a>00526                     <span class="comment">// and set the corresponding name</span>
<a name="l00527"></a>00527           currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a30c30789517e9f40bec24c7f665c4675" title="Set the seq_name member.">setSeqName</a>(seqnames[sequenceNumber-1]);
<a name="l00528"></a>00528         }
<a name="l00529"></a>00529         <span class="comment">// make it a child of the current parent</span>
<a name="l00530"></a>00530         currentParent-&gt;<a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228" title="Add a child to this node.">addChild</a>(currentNode);
<a name="l00531"></a>00531 
<a name="l00532"></a>00532         <span class="comment">// no change in level;</span>
<a name="l00533"></a>00533         branch++;
<a name="l00534"></a>00534         nodesRead++;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536         <span class="keywordflow">break</span>;      <span class="comment">// end default</span>
<a name="l00537"></a>00537     }               <span class="comment">// end switch</span>
<a name="l00538"></a>00538   }                 <span class="comment">// end while</span>
<a name="l00539"></a>00539 
<a name="l00540"></a>00540   <span class="comment">// we expect to find that level = 0 at the end</span>
<a name="l00541"></a>00541   <span class="comment">// and something has been read in for the tree</span>
<a name="l00542"></a>00542   <span class="comment">// and number of branches+1 is number of nodes</span>
<a name="l00543"></a>00543   <span class="keywordflow">if</span> (level != 0 || newtree == NULL || (branch+1 != nodesRead))
<a name="l00544"></a>00544   {
<a name="l00545"></a>00545     <span class="comment">// error in tree file</span>
<a name="l00546"></a>00546 
<a name="l00547"></a>00547     <span class="keywordtype">string</span> msg = 
<a name="l00548"></a>00548     <span class="stringliteral">&quot;Error in tree file, please check the number of branches and nodes:  Expecting unrooted tree&quot;</span>;
<a name="l00549"></a>00549     <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, newtree);
<a name="l00550"></a>00550   }
<a name="l00551"></a>00551   <span class="keywordflow">return</span> newtree;
<a name="l00552"></a>00552 }
<a name="l00553"></a>00553 
<a name="l00554"></a><a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962">00554</a> <span class="keywordtype">void</span> <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">PhyloTree::TreeFileErrorExit</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; msg, 
<a name="l00555"></a>00555                                   <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * node)<span class="keyword"> const</span>
<a name="l00556"></a>00556 <span class="keyword"></span>{
<a name="l00557"></a>00557   std::cerr &lt;&lt; msg &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00558"></a>00558   <span class="keyword">delete</span> node;
<a name="l00559"></a>00559   exit(1);
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 <span class="comment">// finds a double time number</span>
<a name="l00564"></a>00564 <span class="comment">// called when a &#39;:&#39; character has been found in a tree file</span>
<a name="l00565"></a>00565 <span class="comment">// changes the value of pos so that after routine has been called, pos points </span>
<a name="l00566"></a>00566 <span class="comment">// to character after time</span>
<a name="l00567"></a>00567 <span class="comment">// aborts if expected time not found</span>
<a name="l00568"></a>00568 
<a name="l00569"></a><a class="code" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1">00569</a> real <a class="code" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1" title="Extract a time given in a tree file if the identifier for a time has been found.">PhyloTree::findTime</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; line, <span class="keyword">const</span> <span class="keywordtype">size_t</span> lineLength, 
<a name="l00570"></a>00570                          <span class="keywordtype">size_t</span>&amp; pos, <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* node)<span class="keyword"> const</span>
<a name="l00571"></a>00571 <span class="keyword"></span>{
<a name="l00572"></a>00572   pos++;
<a name="l00573"></a>00573                     <span class="comment">// characters accepted as part of a double number</span>
<a name="l00574"></a>00574   <span class="keywordtype">string</span> doubleChars = <span class="stringliteral">&quot;.0123456789&quot;</span>;
<a name="l00575"></a>00575                     <span class="comment">// space characters</span>
<a name="l00576"></a>00576   <span class="keywordtype">string</span> space = <span class="stringliteral">&quot; &quot;</span>;
<a name="l00577"></a>00577 
<a name="l00578"></a>00578   <span class="comment">// find the first non space and make sure it is acceptable </span>
<a name="l00579"></a>00579   <span class="comment">// as the start of a double</span>
<a name="l00580"></a>00580   pos = line.find_first_not_of(space, pos);
<a name="l00581"></a>00581 
<a name="l00582"></a>00582   <span class="keywordflow">if</span> (pos==string::npos)
<a name="l00583"></a>00583   {
<a name="l00584"></a>00584     <span class="keywordtype">string</span> msg = 
<a name="l00585"></a>00585     <span class="stringliteral">&quot;Error in tree file: no double for time following &#39;:&#39; character &quot;</span>;
<a name="l00586"></a>00586     <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00587"></a>00587   }
<a name="l00588"></a>00588 
<a name="l00589"></a>00589   <span class="keywordtype">size_t</span> firstPos = line.find_first_of(doubleChars, pos);
<a name="l00590"></a>00590 
<a name="l00591"></a>00591   <span class="comment">// check that first integer is the first non space character following &#39;:&#39;</span>
<a name="l00592"></a>00592   <span class="keywordflow">if</span> ((firstPos==string::npos) || (firstPos != pos))
<a name="l00593"></a>00593   {
<a name="l00594"></a>00594     <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file: no integer following &#39;#&#39; character&quot;</span>;
<a name="l00595"></a>00595     <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00596"></a>00596   }
<a name="l00597"></a>00597   <span class="comment">// pos is the same as firstPos</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599   <span class="comment">// find last of the following doubleChars</span>
<a name="l00600"></a>00600   <span class="keywordtype">size_t</span> posUpTo = line.find_first_not_of(doubleChars, pos);
<a name="l00601"></a>00601 
<a name="l00602"></a>00602                     <span class="comment">// there could be no non-numeric character before the end</span>
<a name="l00603"></a>00603   <span class="keywordflow">if</span> (posUpTo==string::npos)
<a name="l00604"></a>00604   {
<a name="l00605"></a>00605     posUpTo = lineLength;
<a name="l00606"></a>00606   }
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="comment">// using the part of the string comprising the numbers</span>
<a name="l00609"></a>00609                     <span class="comment">// convert to a stream</span>
<a name="l00610"></a>00610   istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line.substr(pos, posUpTo-pos));
<a name="l00611"></a>00611   <span class="keywordtype">double</span> dblValue = 0.0;
<a name="l00612"></a>00612   <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; dblValue;  <span class="comment">// extract number from the stream</span>
<a name="l00613"></a>00613 
<a name="l00614"></a>00614   real retValue = _real(dblValue);
<a name="l00615"></a>00615 
<a name="l00616"></a>00616   <span class="comment">// make this the time for the current node</span>
<a name="l00617"></a>00617   pos = posUpTo;    <span class="comment">// move pos up the first non-numeric character</span>
<a name="l00618"></a>00618 
<a name="l00619"></a>00619   <span class="keywordflow">return</span> retValue;
<a name="l00620"></a>00620 }
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="comment">// finds an integer label</span>
<a name="l00623"></a>00623 <span class="comment">// called when a &#39;$&#39; or &#39;#&#39; character has been found in a tree file</span>
<a name="l00624"></a>00624 <span class="comment">// changes the value of pos so that after routine has been called, </span>
<a name="l00625"></a>00625 <span class="comment">// pos points to character after label</span>
<a name="l00626"></a>00626 <span class="comment">// aborts if expected label not found or more than 1 digit long</span>
<a name="l00627"></a><a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55">00627</a> <span class="keywordtype">int</span> <a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55" title="Extract a label given in a tree file if the identifier for a label has been found.">PhyloTree::findLabel</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; line, <span class="keyword">const</span> <span class="keywordtype">size_t</span> lineLength, 
<a name="l00628"></a>00628                          <span class="keywordtype">size_t</span>&amp; pos, <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* node)<span class="keyword"> const</span>
<a name="l00629"></a>00629 <span class="keyword"></span>{
<a name="l00630"></a>00630   pos++;            <span class="comment">// move to the next character after the &#39;#&#39; or &#39;$&#39; character</span>
<a name="l00631"></a>00631 
<a name="l00632"></a>00632                     <span class="comment">// characters accepted as part of an integer</span>
<a name="l00633"></a>00633   <span class="keywordtype">string</span> intChars = <span class="stringliteral">&quot;0123456789&quot;</span>;
<a name="l00634"></a>00634                     <span class="comment">// space characters</span>
<a name="l00635"></a>00635   <span class="keywordtype">string</span> space = <span class="stringliteral">&quot; &quot;</span>;
<a name="l00636"></a>00636 
<a name="l00637"></a>00637   <span class="comment">// find the first non space and make sure it is an integer</span>
<a name="l00638"></a>00638   pos = line.find_first_not_of(space, pos);
<a name="l00639"></a>00639 
<a name="l00640"></a>00640   <span class="keywordflow">if</span> (pos==string::npos)
<a name="l00641"></a>00641   {
<a name="l00642"></a>00642     <span class="keywordtype">string</span> msg = 
<a name="l00643"></a>00643     <span class="stringliteral">&quot;Error in tree file: no integer label following &#39;#&#39; or &#39;$&#39; character&quot;</span>;
<a name="l00644"></a>00644     <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00645"></a>00645   }
<a name="l00646"></a>00646 
<a name="l00647"></a>00647   <span class="keywordtype">size_t</span> numerpos = line.find_first_of(intChars, pos);
<a name="l00648"></a>00648 
<a name="l00649"></a>00649   <span class="comment">// check that first integer is the first non space character following &#39;:&#39;</span>
<a name="l00650"></a>00650   <span class="keywordflow">if</span> ((numerpos==string::npos) || (numerpos != pos))
<a name="l00651"></a>00651   {
<a name="l00652"></a>00652     <span class="keywordtype">string</span> msg = 
<a name="l00653"></a>00653     <span class="stringliteral">&quot;Error in tree file: no integer following &#39;#&#39; or &#39;$&#39; character &quot;</span>;
<a name="l00654"></a>00654     <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00655"></a>00655   }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657   <span class="keywordtype">int</span> retValue = 1000;
<a name="l00658"></a>00658 
<a name="l00659"></a>00659   <span class="comment">// string to int</span>
<a name="l00660"></a>00660   <span class="keywordtype">string</span> singleCharStr = line.substr(pos, 1);
<a name="l00661"></a>00661   istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(singleCharStr);
<a name="l00662"></a>00662   sin &gt;&gt; retValue;  <span class="comment">// store integer at pos as sequenceNumber</span>
<a name="l00663"></a>00663 
<a name="l00664"></a>00664   pos++;
<a name="l00665"></a>00665 
<a name="l00666"></a>00666   <span class="comment">// now we expect a non integer character or the end of the line</span>
<a name="l00667"></a>00667   <span class="keywordflow">if</span> (pos &lt; lineLength)
<a name="l00668"></a>00668   {
<a name="l00669"></a>00669     numerpos = line.find_first_of(intChars, pos);
<a name="l00670"></a>00670     <span class="keywordflow">if</span> (numerpos == pos)
<a name="l00671"></a>00671     {
<a name="l00672"></a>00672       <span class="keywordtype">string</span> msg = 
<a name="l00673"></a>00673       <span class="stringliteral">&quot;Sorry:  DecodeTree() can only cope with single-digit labels at present&quot;</span>;
<a name="l00674"></a>00674       <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00675"></a>00675     }
<a name="l00676"></a>00676   }                 <span class="comment">// end check on next digit</span>
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   <span class="keywordflow">return</span> retValue;
<a name="l00679"></a>00679 }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681 <span class="comment">// expects sequence numbers to be delimited by commas</span>
<a name="l00682"></a><a class="code" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f">00682</a> <span class="keywordtype">int</span> <a class="code" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f" title="Extract a sequence number from a tree file.">PhyloTree::findSeqNo</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; line, <span class="keyword">const</span> <span class="keywordtype">size_t</span> lineLength, 
<a name="l00683"></a>00683                          <span class="keywordtype">size_t</span>&amp; pos, <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* node, 
<a name="l00684"></a>00684                          <span class="keyword">const</span> vector&lt;string&gt;&amp; seqnames)<span class="keyword"> const</span>
<a name="l00685"></a>00685 <span class="keyword"></span>{
<a name="l00686"></a>00686 
<a name="l00687"></a>00687                     <span class="comment">// characters accepted as part of an integer</span>
<a name="l00688"></a>00688   <span class="keywordtype">string</span> intChars = <span class="stringliteral">&quot;0123456789&quot;</span>;
<a name="l00689"></a>00689                     <span class="comment">//characters accepted as part of an alphabetical label</span>
<a name="l00690"></a>00690   <span class="keywordtype">string</span> alphaChars = <span class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;
<a name="l00691"></a>00691 
<a name="l00692"></a>00692   <span class="comment">// we know that there will be no spaces at the start since they are dealt </span>
<a name="l00693"></a>00693   <span class="comment">// with in DecodeTree()</span>
<a name="l00694"></a>00694   <span class="comment">// we expect each distinct sequence number to be followed by a comma or a ), </span>
<a name="l00695"></a>00695   <span class="comment">// signifying the end of the number</span>
<a name="l00696"></a>00696 
<a name="l00697"></a>00697   <span class="keywordtype">int</span> sequenceNumber = -1;
<a name="l00698"></a>00698 
<a name="l00699"></a>00699   <span class="keywordtype">int</span> noseq = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(seqnames.size());
<a name="l00700"></a>00700 
<a name="l00701"></a>00701   <span class="comment">// check if character at this pos numeric?</span>
<a name="l00702"></a>00702   <span class="keywordtype">size_t</span> numerpos = line.find_first_of(intChars, pos);
<a name="l00703"></a>00703 
<a name="l00704"></a>00704                     <span class="comment">// the character at pos is numeric</span>
<a name="l00705"></a>00705   <span class="keywordflow">if</span> (pos == numerpos)
<a name="l00706"></a>00706   {
<a name="l00707"></a>00707     <span class="comment">// should be the start of our sequence number</span>
<a name="l00708"></a>00708 
<a name="l00709"></a>00709     <span class="comment">// find the non numeric character</span>
<a name="l00710"></a>00710                     <span class="comment">// first occurence of something non-int</span>
<a name="l00711"></a>00711     <span class="keywordtype">size_t</span> notnumerpos = line.find_first_not_of(intChars, pos);
<a name="l00712"></a>00712 
<a name="l00713"></a>00713     <span class="comment">// the number we want starts at pos and has it&#39;s final character </span>
<a name="l00714"></a>00714     <span class="comment">// at notnumerpos-1</span>
<a name="l00715"></a>00715     <span class="comment">// and so has length notnumberpos-1 - pos +1 = notnumererpos-pos</span>
<a name="l00716"></a>00716     <span class="keywordtype">string</span> numberStr = line.substr(pos, (notnumerpos-pos));
<a name="l00717"></a>00717     <span class="comment">// string to int</span>
<a name="l00718"></a>00718     istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(numberStr);
<a name="l00719"></a>00719                     <span class="comment">// store the integer we are after as sequenceNumber</span>
<a name="l00720"></a>00720     sin &gt;&gt; sequenceNumber;
<a name="l00721"></a>00721 
<a name="l00722"></a>00722     <span class="comment">//check sequenceNumber against number of sequence names if given</span>
<a name="l00723"></a>00723     <span class="keywordflow">if</span> ((noseq &gt; 0) &amp;&amp; (noseq &lt; sequenceNumber))
<a name="l00724"></a>00724     {
<a name="l00725"></a>00725       <span class="keywordtype">string</span> msg = 
<a name="l00726"></a>00726       <span class="stringliteral">&quot;Error in tree file: A sequence number is \n greater than the number of sequences&quot;</span>;
<a name="l00727"></a>00727       <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00728"></a>00728     }
<a name="l00729"></a>00729 
<a name="l00730"></a>00730                     <span class="comment">// move pos to next character after the number</span>
<a name="l00731"></a>00731     pos = notnumerpos;
<a name="l00732"></a>00732   }
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <span class="keywordflow">else</span>              <span class="comment">// the character at pos is not numeric</span>
<a name="l00735"></a>00735   {
<a name="l00736"></a>00736     <span class="comment">// should be the start of a recognised sequence name</span>
<a name="l00737"></a>00737 
<a name="l00738"></a>00738     <span class="keywordflow">if</span> (noseq == 0)
<a name="l00739"></a>00739     {
<a name="l00740"></a>00740       <span class="keywordtype">string</span> msg = 
<a name="l00741"></a>00741       <span class="stringliteral">&quot;Error constructing tree: can deal only with sequences identified by number&quot;</span>;
<a name="l00742"></a>00742       <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00743"></a>00743     }
<a name="l00744"></a>00744 
<a name="l00745"></a>00745     <span class="keywordtype">size_t</span> posUpTo = line.find_first_not_of(alphaChars, pos);
<a name="l00746"></a>00746 
<a name="l00747"></a>00747     <span class="comment">// but really there should be at least one non-alpha character </span>
<a name="l00748"></a>00748     <span class="comment">// before the end?</span>
<a name="l00749"></a>00749     <span class="keywordflow">if</span> (posUpTo==string::npos)
<a name="l00750"></a>00750     {
<a name="l00751"></a>00751       posUpTo = lineLength;
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754     <span class="comment">// using the part of the string comprising the alpha characters</span>
<a name="l00755"></a>00755     <span class="keywordtype">string</span> name = line.substr(pos, posUpTo-pos);
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     <span class="comment">// compare to the seqnames</span>
<a name="l00758"></a>00758 
<a name="l00759"></a>00759     <span class="keywordtype">int</span> i = 0;
<a name="l00760"></a>00760     <span class="keywordflow">while</span> ((sequenceNumber == -1) &amp;&amp; (i &lt; noseq))
<a name="l00761"></a>00761     {
<a name="l00762"></a>00762 
<a name="l00763"></a>00763                     <span class="comment">// find the ith sequence name</span>
<a name="l00764"></a>00764       <span class="keywordtype">string</span> seqName = seqnames[i];
<a name="l00765"></a>00765 
<a name="l00766"></a>00766       <span class="comment">// make both names all lower case</span>
<a name="l00767"></a>00767       std::transform(name.begin(), name.end(), name.begin(), ::tolower);
<a name="l00768"></a>00768       std::transform(seqName.begin(), 
<a name="l00769"></a>00769                      seqName.end(), seqName.begin(), ::tolower);
<a name="l00770"></a>00770 
<a name="l00771"></a>00771       <span class="keywordflow">if</span> (seqName == name)
<a name="l00772"></a>00772       {
<a name="l00773"></a>00773         sequenceNumber = i+1;
<a name="l00774"></a>00774 
<a name="l00775"></a>00775       }
<a name="l00776"></a>00776       i++;
<a name="l00777"></a>00777     }               <span class="comment">// end while</span>
<a name="l00778"></a>00778 
<a name="l00779"></a>00779                     <span class="comment">// did not find a match for a sequence name</span>
<a name="l00780"></a>00780     <span class="keywordflow">if</span> (sequenceNumber == -1)
<a name="l00781"></a>00781     {
<a name="l00782"></a>00782       <span class="keywordtype">string</span> msg = 
<a name="l00783"></a>00783       <span class="stringliteral">&quot;Error in tree file: a name in tree file did not match \n any in the sequence file (case insensitive matching)&quot;</span>;
<a name="l00784"></a>00784       <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
<a name="l00785"></a>00785     }
<a name="l00786"></a>00786 
<a name="l00787"></a>00787     pos = posUpTo;  <span class="comment">// move pos up the first non-alpha character</span>
<a name="l00788"></a>00788   }                 <span class="comment">// end of alpha name for node identifier</span>
<a name="l00789"></a>00789 
<a name="l00790"></a>00790   <span class="keywordflow">return</span> sequenceNumber;
<a name="l00791"></a>00791 }
<a name="l00792"></a>00792 
<a name="l00793"></a>00793 <span class="comment">// print a level of the tree starting with the root</span>
<a name="l00794"></a><a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30">00794</a> <span class="keywordtype">void</span> <a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30" title="Prints a branch of the tree.">PhyloTree::PrintBranch</a>(<span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * <span class="keyword">const</span> node, <span class="keywordtype">int</span> level)
<a name="l00795"></a>00795 {
<a name="l00796"></a>00796   <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();
<a name="l00797"></a>00797   <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;
<a name="l00798"></a>00798 
<a name="l00799"></a>00799   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++)
<a name="l00800"></a>00800   {
<a name="l00801"></a>00801     std:: cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00802"></a>00802   }
<a name="l00803"></a>00803 
<a name="l00804"></a>00804   node-&gt;<a class="code" href="classPhyloNode.shtml#a11c02f207d02d5c75103a5aaf51bde0d" title="Print node details.">printNode</a>();
<a name="l00805"></a>00805 
<a name="l00806"></a>00806   <span class="keywordflow">if</span>(!theChildren.empty())
<a name="l00807"></a>00807   {
<a name="l00808"></a>00808     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++)
<a name="l00809"></a>00809     {
<a name="l00810"></a>00810       std::cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00811"></a>00811     }
<a name="l00812"></a>00812     std::cout &lt;&lt; <span class="stringliteral">&quot;Children are:&quot;</span> &lt;&lt; std::endl;
<a name="l00813"></a>00813   }
<a name="l00814"></a>00814 
<a name="l00815"></a>00815   level++;
<a name="l00816"></a>00816   <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
<a name="l00817"></a>00817   {
<a name="l00818"></a>00818     <a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30" title="Prints a branch of the tree.">PrintBranch</a>(*it, level);
<a name="l00819"></a>00819   }
<a name="l00820"></a>00820 }
<a name="l00821"></a>00821 
<a name="l00822"></a>00822 <span class="comment">// return the probability of a given pattern on a tree with given root</span>
<a name="l00823"></a>00823 <span class="comment">// version dealing with rvectors, ie points</span>
<a name="l00824"></a><a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1">00824</a> <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">PhyloTree::nodePOTreal</a>(<a class="code" href="PhyloTree_8hpp.shtml#a4457ee43eaa9b550b64e1542c62f7a6f" title="for probabilities as reals">RealTranProb_FctPtr</a> tpf, 
<a name="l00825"></a>00825                                   <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * <span class="keyword">const</span> node, 
<a name="l00826"></a>00826                                   <span class="keyword">const</span> rvector&amp; x, 
<a name="l00827"></a>00827                                   <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00828"></a>00828                                   <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a>&amp; rNucProb)<span class="keyword"> const</span>
<a name="l00829"></a>00829 <span class="keyword"></span>{
<a name="l00830"></a>00830   rNucProb.clear(); <span class="comment">// make sure the container is empty</span>
<a name="l00831"></a>00831   rNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);
<a name="l00832"></a>00832 
<a name="l00833"></a>00833                     <span class="comment">// get the children of the node of this tree</span>
<a name="l00834"></a>00834   <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();
<a name="l00835"></a>00835 
<a name="l00836"></a>00836   <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;
<a name="l00837"></a>00837 
<a name="l00838"></a>00838   <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
<a name="l00839"></a>00839   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
<a name="l00840"></a>00840   {
<a name="l00841"></a>00841     real prob(1.0);
<a name="l00842"></a>00842 
<a name="l00843"></a>00843     <span class="comment">// for each child</span>
<a name="l00844"></a>00844     <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
<a name="l00845"></a>00845     {
<a name="l00846"></a>00846 
<a name="l00847"></a>00847       <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
<a name="l00848"></a>00848                     <span class="comment">// add one because rvectors are indexed 1 to n not 0 to n-1</span>
<a name="l00849"></a>00849       <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
<a name="l00850"></a>00850                     <span class="comment">// the element in x corresponding to the child&#39;s branch</span>
<a name="l00851"></a>00851       real ptElem = x[branchIndex];
<a name="l00852"></a>00852       <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();
<a name="l00853"></a>00853 
<a name="l00854"></a>00854                     <span class="comment">// this child of this node has no children</span>
<a name="l00855"></a>00855       <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
<a name="l00856"></a>00856       {
<a name="l00857"></a>00857 
<a name="l00858"></a>00858         <span class="comment">// get the coded character for this child&#39;s sequence </span>
<a name="l00859"></a>00859         <span class="comment">// number in the supplied pattern</span>
<a name="l00860"></a>00860         <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];
<a name="l00861"></a>00861 
<a name="l00862"></a>00862         <span class="comment">// get prob of transition from childNuc to thisNuc</span>
<a name="l00863"></a>00863         prob = prob * tpf(ptElem, thisNuc, childNuc);
<a name="l00864"></a>00864 
<a name="l00865"></a>00865       }             <span class="comment">// end if child has no children</span>
<a name="l00866"></a>00866 
<a name="l00867"></a>00867       <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
<a name="l00868"></a>00868       {
<a name="l00869"></a>00869 
<a name="l00870"></a>00870                     <span class="comment">// fill this in by recursing on fillProbReal with child</span>
<a name="l00871"></a>00871         <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a> childProbs;
<a name="l00872"></a>00872         childProbs = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(tpf, child, x, pattern, childProbs);
<a name="l00873"></a>00873 
<a name="l00874"></a>00874         real tt(0.0);
<a name="l00875"></a>00875 
<a name="l00876"></a>00876         <span class="comment">// run over the childProbs, accumulating</span>
<a name="l00877"></a>00877         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
<a name="l00878"></a>00878         {
<a name="l00879"></a>00879           tt = tt+ (tpf(ptElem, thisNuc, j) * childProbs[j]);
<a name="l00880"></a>00880         }
<a name="l00881"></a>00881         prob = prob * tt;
<a name="l00882"></a>00882       }             <span class="comment">// end case child has children</span>
<a name="l00883"></a>00883 
<a name="l00884"></a>00884       <span class="comment">// the child, whether it has children or not, has now </span>
<a name="l00885"></a>00885       <span class="comment">// multiplied prob by something</span>
<a name="l00886"></a>00886     }               <span class="comment">// end of loop through children</span>
<a name="l00887"></a>00887 
<a name="l00888"></a>00888     <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
<a name="l00889"></a>00889                     <span class="comment">// copy of prob goes into rNucProb</span>
<a name="l00890"></a>00890     rNucProb.push_back(prob);
<a name="l00891"></a>00891   }                 <span class="comment">// end of loop through CharacterSpace</span>
<a name="l00892"></a>00892 
<a name="l00893"></a>00893   <span class="comment">// rNucProb should have had CharacterSpace intervals pushed into it</span>
<a name="l00894"></a>00894 
<a name="l00895"></a>00895   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00896"></a>00896   <span class="keywordflow">return</span> rNucProb;
<a name="l00897"></a>00897 }
<a name="l00898"></a>00898 
<a name="l00899"></a>00899 <span class="comment">// return the probability of a given pattern for a given node</span>
<a name="l00900"></a>00900 <span class="comment">// version dealing with ivectors, ie boxes</span>
<a name="l00901"></a><a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba">00901</a> <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba" title="Calculates the probabilities as an interval of each character for a node given its children&#39;s state...">PhyloTree::nodePOTinterval</a>(<a class="code" href="PhyloTree_8hpp.shtml#a6961512ff8fd6fa5a520b93c63c4ad60" title="for probabilities as intervals">IntervalTranProb_FctPtr</a> tpf, 
<a name="l00902"></a>00902                                           <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * <span class="keyword">const</span> node, 
<a name="l00903"></a>00903                                           <span class="keyword">const</span> ivector&amp; x, 
<a name="l00904"></a>00904                                           <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00905"></a>00905                                           <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a>&amp; iNucProb)<span class="keyword"> const</span>
<a name="l00906"></a>00906 <span class="keyword"></span>{
<a name="l00907"></a>00907   iNucProb.clear(); <span class="comment">// make sure the container is empty</span>
<a name="l00908"></a>00908   iNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);
<a name="l00909"></a>00909 
<a name="l00910"></a>00910                     <span class="comment">// get the children of the node</span>
<a name="l00911"></a>00911   <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();
<a name="l00912"></a>00912 
<a name="l00913"></a>00913   <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;
<a name="l00914"></a>00914 
<a name="l00915"></a>00915   <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
<a name="l00916"></a>00916   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
<a name="l00917"></a>00917   {
<a name="l00918"></a>00918     interval prob(1.0, 1.0);
<a name="l00919"></a>00919 
<a name="l00920"></a>00920     <span class="comment">// for each child</span>
<a name="l00921"></a>00921     <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
<a name="l00922"></a>00922     {
<a name="l00923"></a>00923 
<a name="l00924"></a>00924       <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
<a name="l00925"></a>00925                     <span class="comment">// add one because ivectors are indexed 1 to n not 0 to n-1</span>
<a name="l00926"></a>00926       <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
<a name="l00927"></a>00927                     <span class="comment">// the interval in x corresponding to the child&#39;s branch</span>
<a name="l00928"></a>00928       interval boxSide = x[branchIndex];
<a name="l00929"></a>00929       <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();
<a name="l00930"></a>00930 
<a name="l00931"></a>00931                     <span class="comment">// this child of this node has no children</span>
<a name="l00932"></a>00932       <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
<a name="l00933"></a>00933       {
<a name="l00934"></a>00934 
<a name="l00935"></a>00935         <span class="comment">// get the coded character for this child&#39;s sequence number in the </span>
<a name="l00936"></a>00936         <span class="comment">// pattern_i-th base sequence</span>
<a name="l00937"></a>00937         <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];
<a name="l00938"></a>00938 
<a name="l00939"></a>00939         <span class="comment">// get prob of transition from childNuc to thisNuc</span>
<a name="l00940"></a>00940         prob = prob * tpf(boxSide, thisNuc, childNuc);
<a name="l00941"></a>00941 
<a name="l00942"></a>00942       }             <span class="comment">// end if child has no children</span>
<a name="l00943"></a>00943 
<a name="l00944"></a>00944       <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
<a name="l00945"></a>00945       {
<a name="l00946"></a>00946 
<a name="l00947"></a>00947                     <span class="comment">// fill this in by recursing on fillProbInterval with child</span>
<a name="l00948"></a>00948         <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a> childProbs;
<a name="l00949"></a>00949         childProbs = <a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba" title="Calculates the probabilities as an interval of each character for a node given its children&#39;s state...">nodePOTinterval</a>(tpf, child, x, pattern, childProbs);
<a name="l00950"></a>00950 
<a name="l00951"></a>00951         interval tt(0.0, 0.0);
<a name="l00952"></a>00952 
<a name="l00953"></a>00953         <span class="comment">// run over the childProbs, accumulating</span>
<a name="l00954"></a>00954         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
<a name="l00955"></a>00955         {
<a name="l00956"></a>00956           tt = tt+ (tpf(boxSide, thisNuc, j) * childProbs[j]);
<a name="l00957"></a>00957         }
<a name="l00958"></a>00958         prob = prob * tt;
<a name="l00959"></a>00959       }             <span class="comment">// end case child has children</span>
<a name="l00960"></a>00960 
<a name="l00961"></a>00961       <span class="comment">// the child, whether it has children or not, has now </span>
<a name="l00962"></a>00962       <span class="comment">// multiplied prob by something</span>
<a name="l00963"></a>00963     }               <span class="comment">// end of loop through children</span>
<a name="l00964"></a>00964 
<a name="l00965"></a>00965     <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
<a name="l00966"></a>00966                     <span class="comment">// copy of prob goes into iNucProb</span>
<a name="l00967"></a>00967     iNucProb.push_back(prob);
<a name="l00968"></a>00968   }                 <span class="comment">// end of loop through CharacterSpace</span>
<a name="l00969"></a>00969 
<a name="l00970"></a>00970   <span class="comment">// iNucProb should have had CharacterSpace intervals pushed into it</span>
<a name="l00971"></a>00971 
<a name="l00972"></a>00972   <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l00973"></a>00973   <span class="keywordflow">return</span> iNucProb;
<a name="l00974"></a>00974 }
<a name="l00975"></a>00975 
<a name="l00976"></a>00976 <span class="comment">// return the probability of a given pattern for given node</span>
<a name="l00977"></a>00977 <span class="comment">// version dealing with HessTypes, for global optimisation</span>
<a name="l00978"></a><a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e">00978</a> <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a>&amp; <a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e" title="Calculates the probabilities as HessType of each character in a character space for a node given its ...">PhyloTree::nodePOTHess</a>(<a class="code" href="PhyloTree_8hpp.shtml#aa81a7e0d071642af42626caebfef6eeb" title="for probabilities as HessTypes">HessTranProb_FctPtr</a> tpf, 
<a name="l00979"></a>00979                                   <span class="keyword">const</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> * <span class="keyword">const</span> node, 
<a name="l00980"></a>00980                                   <span class="keyword">const</span> HTvector&amp; x, 
<a name="l00981"></a>00981                                   <span class="keyword">const</span> vector&lt;int&gt;&amp; pattern, 
<a name="l00982"></a>00982                                   <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a>&amp; hNucProb)<span class="keyword"> const</span>
<a name="l00983"></a>00983 <span class="keyword"></span>{
<a name="l00984"></a>00984   hNucProb.clear(); <span class="comment">// make sure the container is empty</span>
<a name="l00985"></a>00985   hNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);
<a name="l00986"></a>00986 
<a name="l00987"></a>00987                     <span class="comment">// get the children of the node</span>
<a name="l00988"></a>00988   <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();
<a name="l00989"></a>00989 
<a name="l00990"></a>00990   <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;
<a name="l00991"></a>00991 
<a name="l00992"></a>00992   <span class="keywordtype">int</span> d = x.Dim();  <span class="comment">// dimensions of x</span>
<a name="l00993"></a>00993 
<a name="l00994"></a>00994   <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
<a name="l00995"></a>00995   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
<a name="l00996"></a>00996   {
<a name="l00997"></a>00997                     <span class="comment">// HessType of same dimensions as x</span>
<a name="l00998"></a>00998     HessType prob(d);
<a name="l00999"></a>00999     prob = 1.0;
<a name="l01000"></a>01000 
<a name="l01001"></a>01001     <span class="comment">// for each child</span>
<a name="l01002"></a>01002     <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
<a name="l01003"></a>01003     {
<a name="l01004"></a>01004 
<a name="l01005"></a>01005       <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
<a name="l01006"></a>01006                     <span class="comment">// add one because ivectors are indexed 1 to n not 0 to n-1</span>
<a name="l01007"></a>01007       <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
<a name="l01008"></a>01008                     <span class="comment">// the element of x corresponding to the child&#39;s branch</span>
<a name="l01009"></a>01009       HessType ptElem(x[branchIndex]);
<a name="l01010"></a>01010       <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();
<a name="l01011"></a>01011 
<a name="l01012"></a>01012                     <span class="comment">// this child of this node has no children</span>
<a name="l01013"></a>01013       <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
<a name="l01014"></a>01014       {
<a name="l01015"></a>01015 
<a name="l01016"></a>01016         <span class="comment">// get the coded character for this child&#39;s sequence number in </span>
<a name="l01017"></a>01017         <span class="comment">// the pattern_i-th base sequence</span>
<a name="l01018"></a>01018         <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];
<a name="l01019"></a>01019 
<a name="l01020"></a>01020         <span class="comment">// get prob of transition from childNuc to thisNuc</span>
<a name="l01021"></a>01021         prob = prob * tpf(ptElem, thisNuc, childNuc);
<a name="l01022"></a>01022 
<a name="l01023"></a>01023       }             <span class="comment">// end if child has no children</span>
<a name="l01024"></a>01024 
<a name="l01025"></a>01025       <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
<a name="l01026"></a>01026       {
<a name="l01027"></a>01027 
<a name="l01028"></a>01028                     <span class="comment">// fill this in by recursing on fillProbHess with child</span>
<a name="l01029"></a>01029         <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a> childProbs;
<a name="l01030"></a>01030         childProbs = <a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e" title="Calculates the probabilities as HessType of each character in a character space for a node given its ...">nodePOTHess</a>(tpf, child, x, pattern, childProbs);
<a name="l01031"></a>01031 
<a name="l01032"></a>01032         HessType tt(d);
<a name="l01033"></a>01033         tt = 0.0;
<a name="l01034"></a>01034 
<a name="l01035"></a>01035         <span class="comment">// run over the childProbs, accumulating</span>
<a name="l01036"></a>01036         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
<a name="l01037"></a>01037         {
<a name="l01038"></a>01038           tt = tt+ (tpf(ptElem, thisNuc, j) * childProbs[j]);
<a name="l01039"></a>01039         }
<a name="l01040"></a>01040 
<a name="l01041"></a>01041         prob = prob * tt;
<a name="l01042"></a>01042       }             <span class="comment">// end case child has children</span>
<a name="l01043"></a>01043 
<a name="l01044"></a>01044       <span class="comment">// the child, whether it has children or not, </span>
<a name="l01045"></a>01045       <span class="comment">// has now multiplied prob by something</span>
<a name="l01046"></a>01046     }               <span class="comment">// end of loop through children</span>
<a name="l01047"></a>01047 
<a name="l01048"></a>01048     <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
<a name="l01049"></a>01049                     <span class="comment">// copy of prob goes into hNucProb</span>
<a name="l01050"></a>01050     hNucProb.push_back(prob);
<a name="l01051"></a>01051   }                 <span class="comment">// end of loop through CharacterSpace</span>
<a name="l01052"></a>01052 
<a name="l01053"></a>01053   <span class="comment">// hNucProb should have had CharacterSpace intervals pushed into it</span>
<a name="l01054"></a>01054 
<a name="l01055"></a>01055   <span class="keywordflow">return</span> hNucProb;  <span class="comment">// return the same vector but note that return is by reference</span>
<a name="l01056"></a>01056 }
<a name="l01057"></a>01057 
<a name="l01058"></a>01058 <span class="comment">// -------------------------------------- end PhyloTree implementation ---------</span>
<a name="l01059"></a>01059 
<a name="l01060"></a>01060 <span class="comment">// utility function to sum reals</span>
<a name="l01061"></a><a class="code" href="PhyloTree_8hpp.shtml#ae36eeec3df01dff75dc04065eb5095f4">01061</a> real <a class="code" href="PhyloTree_8cpp.shtml#ae36eeec3df01dff75dc04065eb5095f4" title="operator const LabPnt&amp; X Utility function to sum reals">realSum</a>(real sumSoFar, <span class="keyword">const</span> real r)
<a name="l01062"></a>01062 {
<a name="l01063"></a>01063   <span class="keywordflow">return</span> sumSoFar+r;
<a name="l01064"></a>01064 }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066 <span class="comment">// utility function to sum intervals</span>
<a name="l01067"></a><a class="code" href="PhyloTree_8hpp.shtml#a84ced4c363a59a5168225a9396ce2b84">01067</a> interval <a class="code" href="PhyloTree_8cpp.shtml#a84ced4c363a59a5168225a9396ce2b84" title="operator const LabBox&amp; X Utility function to sum intervals">intervalSum</a>(interval sumSoFar, <span class="keyword">const</span> interval x)
<a name="l01068"></a>01068 {
<a name="l01069"></a>01069   <span class="keywordflow">return</span> sumSoFar+x;
<a name="l01070"></a>01070 }
<a name="l01071"></a>01071 
<a name="l01072"></a>01072 <span class="comment">// utility function to sum HessTypes</span>
<a name="l01073"></a><a class="code" href="PhyloTree_8hpp.shtml#a62f64b7d245c1108fa85ec6509952932">01073</a> HessType <a class="code" href="PhyloTree_8cpp.shtml#a62f64b7d245c1108fa85ec6509952932" title="operator const HTvector&amp; X Utility function to sum HessTypes">hessSum</a>(HessType sumSoFar, <span class="keyword">const</span> HessType x)
<a name="l01074"></a>01074 {
<a name="l01075"></a>01075   <span class="keywordflow">return</span> sumSoFar+x;
<a name="l01076"></a>01076 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="PhyloTree_8cpp.shtml">PhyloTree.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
