<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: errorfunc.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('errorfunc_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">errorfunc.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="errorfunc_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="AIAsubpaving_8hpp.shtml" title="AIASPnode (AISSubPaving) declarations.">AIAsubpaving.hpp</a>&quot;</span> <span class="comment">// to use Volume</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span> <span class="comment">// to use standard input and output</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;string&gt;</span>   <span class="comment">// to use the C++ string class</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>   <span class="comment">// to use the  stl::vector container</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;set&gt;</span>      <span class="comment">// to use the stl::multiset container</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;list&gt;</span>     <span class="comment">// to use stl:: lists</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;map&gt;</span>      <span class="comment">// to use stl::maps</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;iomanip&gt;</span> <span class="comment">// format manipulation on streams</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;exception&gt;</span> <span class="comment">// use exceptions</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;math.h&gt;</span> <span class="comment">// math library</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span> <span class="comment">// to use the constant M_PI </span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00045"></a>00045 <span class="comment">//these are needed for 2D taylor integration</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>  
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00048"></a>00048 <span class="comment">// to access gsl_matrix elements</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;gsl/gsl_matrix.h&quot;</span>
<a name="l00050"></a>00050 <span class="comment">// to perform vector-matrix operations</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;gsl/gsl_blas.h&quot;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>subpavings;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>std;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">//-------------IAE for Bivariate gaussian, Levy 2D, Rosen 2D----------------//</span>
<a name="l00059"></a><a class="code" href="errorfunc_8hpp.shtml#abd72fe76528917561a4e1a7fdf7890d9">00059</a> <span class="comment"></span><a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#abd72fe76528917561a4e1a7fdf7890d9" title="IAE for the bivariate gaussian.">BiGOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat) 
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061   <span class="comment">//cout &lt;&lt; &quot;Calling BiGOP: &quot; &lt;&lt; endl;</span>
<a name="l00062"></a>00062    <span class="comment">// Parameters specific to the Bivariate Gaussian target</span>
<a name="l00063"></a>00063   real rsigma_x = 1.0;
<a name="l00064"></a>00064   real rsigma_y = 1.0;
<a name="l00065"></a>00065   real rrho = 0;
<a name="l00066"></a>00066   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00067"></a>00067   real det = 1.0/(2*M_PI*rsigma_x*rsigma_y*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(rrho)));
<a name="l00068"></a>00068   f = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(X[1]/rsigma_x) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(X[2]/rsigma_y) - 
<a name="l00069"></a>00069             (2*rrho*X[1]*X[2])/(rsigma_x*rsigma_y);
<a name="l00070"></a>00070   f = det * <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-((1.0/2*(1-<a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(rrho))) * f));
<a name="l00071"></a>00071   
<a name="l00072"></a>00072   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> result = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="comment">//split the integrand to get positive values only (absolute values) </span>
<a name="l00075"></a>00075   <span class="keywordflow">if</span> ( (Sup(f[0][0]) &lt; Inf(fhat)) ) {   
<a name="l00076"></a>00076     result = fhat - <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l00077"></a>00077     <span class="comment">//cout &lt;&lt; &quot;fhat - f: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00078"></a>00078   }  
<a name="l00079"></a>00079   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((Sup(f[0][0]) &gt; Inf(fhat))) { 
<a name="l00080"></a>00080      result = f - fhat; 
<a name="l00081"></a>00081     <span class="comment">//cout &lt;&lt; &quot;f-fhat: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00082"></a>00082   }   
<a name="l00083"></a>00083   <span class="keywordflow">return</span> result;
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00088"></a><a class="code" href="errorfunc_8hpp.shtml#a72f3aaf218533dc785d09b0dffacbad7">00088</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#a72f3aaf218533dc785d09b0dffacbad7" title="IAE for the Levy 2D.">LevyOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat) 
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090   <span class="comment">//cout &lt;&lt; &quot;Calling LevyOP: &quot; &lt;&lt; endl;</span>
<a name="l00091"></a>00091   <span class="comment">// Parameters specific to the Levy target </span>
<a name="l00092"></a>00092   real <a class="code" href="LevyFobj2D_8cpp.shtml#ae3d1dc6c8ff5f4490d10dd105dfce9a7">Temperature</a> = 40.0;
<a name="l00093"></a>00093   real <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> = 1.42513; 
<a name="l00094"></a>00094   real <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> = 0.80032; 
<a name="l00095"></a>00095   real <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> = 176.14;
<a name="l00096"></a>00096   
<a name="l00097"></a>00097   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> isum = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00098"></a>00098   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> jsum = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00099"></a>00099 
<a name="l00100"></a>00100   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00101"></a>00101   {
<a name="l00102"></a>00102     isum = isum + i * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> ((i - 1) * X[1] + (i));
<a name="l00103"></a>00103     jsum = jsum + i * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> ((i + 1) * X[2] + (i));
<a name="l00104"></a>00104   }
<a name="l00105"></a>00105                     <span class="comment">// Avoid real conversion error</span>
<a name="l00106"></a>00106   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X[1] + Center1) +
<a name="l00107"></a>00107     <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X[2] + Center2);
<a name="l00108"></a>00108   hh = hh + <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a>;  
<a name="l00109"></a>00109   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00110"></a>00110   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / Temperature);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="comment">//integrand  </span>
<a name="l00113"></a>00113   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> result = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00114"></a>00114   <span class="comment">//split the integrand to get positive values only (absolute values) </span>
<a name="l00115"></a>00115   <span class="keywordflow">if</span> ( (Sup(f[0][0]) &lt; Inf(fhat)) ) {   
<a name="l00116"></a>00116     result = fhat - <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l00117"></a>00117     <span class="comment">//cout &lt;&lt; &quot;fhat - f: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00118"></a>00118   }  
<a name="l00119"></a>00119   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((Sup(f[0][0]) &gt; Inf(fhat))) { 
<a name="l00120"></a>00120      result = f - fhat; 
<a name="l00121"></a>00121     <span class="comment">//cout &lt;&lt; &quot;f-fhat: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00122"></a>00122   }   
<a name="l00123"></a>00123   
<a name="l00124"></a>00124   <span class="keywordflow">return</span> result;
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00129"></a><a class="code" href="errorfunc_8hpp.shtml#a77af86554abcee2e013b9d8631ed4c5f">00129</a> <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#a77af86554abcee2e013b9d8631ed4c5f" title="IAE for a Rosenbrock 2D.">RosenOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat) 
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131   <span class="comment">//cout &lt;&lt; &quot;Calling RosenOP: &quot; &lt;&lt; endl;</span>
<a name="l00132"></a>00132   <span class="comment">// Parameters specific to the Rosenbrock 2D target </span>
<a name="l00133"></a>00133   real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00134"></a>00134   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00135"></a>00135   
<a name="l00136"></a>00136   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00137"></a>00137   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; 2; i++) <span class="comment">//2nd term should be size_k</span>
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139       f = f + (Height * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(X[i+1] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(X[i])) +
<a name="l00140"></a>00140         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(X[i] - 1.0));
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142   f = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(Tinverse * f));
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="comment">//integrand  </span>
<a name="l00145"></a>00145   <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> result = <a class="code" href="namespacetaylor.shtml#a2d1667d3b5c500795eb06c586d75c309">taylor::init_const</a>(X[1].order(),interval(0.0));
<a name="l00146"></a>00146   <span class="comment">//split the integrand to get positive values only (absolute values) </span>
<a name="l00147"></a>00147   <span class="keywordflow">if</span> ( (Sup(f[0][0]) &lt; Inf(fhat)) ) {   
<a name="l00148"></a>00148     result = fhat - <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;
<a name="l00149"></a>00149     <span class="comment">//cout &lt;&lt; &quot;fhat - f: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00150"></a>00150   }  
<a name="l00151"></a>00151   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((Sup(f[0][0]) &gt; Inf(fhat))) { 
<a name="l00152"></a>00152      result = f - fhat; 
<a name="l00153"></a>00153     <span class="comment">//cout &lt;&lt; &quot;f-fhat: &quot; &lt;&lt; result[0][0] &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00154"></a>00154   }   
<a name="l00155"></a>00155   <span class="keywordflow">return</span> result;
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 <span class="comment">//-----------------End of 2D integrations----------------------------------//</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="comment">//-------------Family of functions for finite mixtures---------------------//</span>
<a name="l00162"></a><a class="code" href="errorfunc_8hpp.shtml#a2f3a0386e9b82f691a73f7710b759117">00162</a> <span class="comment"></span><span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span> x, vector&lt;double&gt; &amp;W, vector&lt;double&gt; &amp;M, 
<a name="l00163"></a>00163                           vector&lt;double&gt; &amp;S)
<a name="l00164"></a>00164 {
<a name="l00165"></a>00165 <span class="keywordtype">int</span> Ncomp = W.size();
<a name="l00166"></a>00166 <span class="keywordtype">double</span> PDF = 0;
<a name="l00167"></a>00167   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++){
<a name="l00168"></a>00168     <span class="keywordtype">double</span> z = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((x-M[c])/S[c], 2);
<a name="l00169"></a>00169     PDF += W[c]*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*z)/(S[c]*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI));
<a name="l00170"></a>00170   }  
<a name="l00171"></a>00171 <span class="keywordflow">return</span> PDF;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00176"></a><a class="code" href="errorfunc_8hpp.shtml#aa5f10d5325f39aa971fc7e984557514a">00176</a> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, vector&lt;double&gt;&amp; W, 
<a name="l00177"></a>00177                           vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S)
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179 <span class="keywordtype">double</span> Ncomp = W.size();
<a name="l00180"></a>00180 <span class="keywordtype">double</span> CDF = 0;
<a name="l00181"></a>00181 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++){
<a name="l00182"></a>00182 CDF += 0.5*(1 + <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>((x2-M[c])/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2))) -
<a name="l00183"></a>00183        0.5*(1 + <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>((x1-M[c])/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2)));
<a name="l00184"></a>00184 <span class="comment">//cout &lt;&lt; &quot;CDF is: &quot; &lt;&lt; CDF &lt;&lt; endl;</span>
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 <span class="keywordflow">return</span> CDF;
<a name="l00187"></a>00187 }
<a name="l00188"></a>00188 
<a name="l00191"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#ab91f1fa7223911ea415a2637eadb6a26">00191</a> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193 <a class="code" href="structFinMix.shtml">FinMix</a> mixt = *(<a class="code" href="structFinMix.shtml">FinMix</a> *) params;
<a name="l00194"></a>00194 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a> = fabs(mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> - <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(x, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>));
<a name="l00195"></a>00195 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00196"></a>00196 }
<a name="l00197"></a>00197 
<a name="l00200"></a><a class="code" href="errorfunc_8hpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4">00200</a> dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt)
<a name="l00201"></a>00201 { 
<a name="l00202"></a>00202   dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00203"></a>00203   dpFinMixIAEBoun = 0.0;
<a name="l00204"></a>00204   <span class="keywordtype">double</span> Ncomp = (mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>).size();
<a name="l00205"></a>00205   <span class="keywordtype">double</span> cdfLeft = 0.0;
<a name="l00206"></a>00206   <span class="keywordtype">double</span> cdfRight = 0.0;
<a name="l00207"></a>00207   <span class="keywordtype">int</span> c;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209   <span class="keywordflow">for</span> (c=0; c &lt; Ncomp; c++) {
<a name="l00210"></a>00210     cdfLeft += mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>[c]*0.5*(1 + <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>((x1-mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>[c])/mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2)));
<a name="l00211"></a>00211     cdfRight += 1-mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>[c]*0.5*(1 + <a class="code" href="namespacetaylor.shtml#ac58758459f916c91fbadcdb56c22c543">erf</a>((x2-mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>[c])/mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2)));
<a name="l00212"></a>00212   }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214   accumulate(dpFinMixIAEBoun, cdfLeft, 1.0);
<a name="l00215"></a>00215   accumulate(dpFinMixIAEBoun, cdfRight, 1.0);
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00218"></a>00218 } 
<a name="l00219"></a>00219 
<a name="l00223"></a><a class="code" href="errorfunc_8hpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417">00223</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(vector&lt;double&gt; &amp; u, <span class="keywordtype">int</span>&amp; intp, <span class="keyword">const</span> <span class="keywordtype">int</span> n, 
<a name="l00224"></a>00224               <span class="keywordtype">double</span>* weight, <span class="keywordtype">int</span> w)
<a name="l00225"></a>00225 {     
<a name="l00226"></a>00226   <span class="comment">// set up an array that checks whether a U(0,1) r.v. is a member of that </span>
<a name="l00227"></a>00227   <span class="comment">// component or not. &#39;1&#39; if true; &#39;0&#39; if false.</span>
<a name="l00228"></a>00228   <span class="comment">//vector&lt;int&gt; u_one(n);</span>
<a name="l00229"></a>00229   
<a name="l00230"></a>00230   <span class="keywordtype">int</span> j;
<a name="l00231"></a>00231   <span class="comment">// check if the U(0,1) r.v. is a member of the component or not.</span>
<a name="l00232"></a>00232   <span class="keywordflow">if</span> (w==0) {
<a name="l00233"></a>00233     <span class="keywordflow">for</span> (j=0; j&lt;n; j++) {
<a name="l00234"></a>00234       <span class="keywordflow">if</span> (u[j] &lt;= *(weight + w))
<a name="l00235"></a>00235       { intp++; }
<a name="l00236"></a>00236       <span class="comment">//cout&lt;&lt;u_one[j1]&lt;&lt;endl;</span>
<a name="l00237"></a>00237     }
<a name="l00238"></a>00238   }
<a name="l00239"></a>00239   <span class="keywordflow">else</span> {
<a name="l00240"></a>00240   <span class="comment">//cout &lt;&lt; &quot;Checking for members between &quot; &lt;&lt; *(WeightCumPtr + m-1) &lt;&lt; </span>
<a name="l00241"></a>00241   <span class="comment">//&quot; and &quot; &lt;&lt; *(WeightCumPtr + m) &lt;&lt; endl;</span>
<a name="l00242"></a>00242     <span class="keywordflow">for</span> (j=0; j&lt;n; j++) {
<a name="l00243"></a>00243       <span class="keywordtype">bool</span> a = (u[j] &gt; (*(weight + w-1)));
<a name="l00244"></a>00244       <span class="keywordtype">bool</span> b = ( u[j] &lt;= (*(weight + w)));
<a name="l00245"></a>00245       <span class="keywordflow">if</span> (a==1 &amp;&amp; b==1) { intp++; }
<a name="l00246"></a>00246       <span class="comment">//cout&lt;&lt;u_one[j]&lt;&lt;endl;</span>
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248   }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   <span class="comment">// count how many &#39;1&#39;s are there in u_rv. This is the number of members </span>
<a name="l00251"></a>00251   <span class="comment">//in component m.</span>
<a name="l00252"></a>00252   <span class="comment">//intp = (int) count(u_one, u_one+n, 1);</span>
<a name="l00253"></a>00253 } <span class="comment">//end find_comp()</span>
<a name="l00254"></a>00254 
<a name="l00256"></a><a class="code" href="errorfunc_8cpp.shtml#a31f8e88e696aca2c21e65dfb42175d04">00256</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a31f8e88e696aca2c21e65dfb42175d04" title="Function to get cumulative sum.">cumsum</a>(vector&lt;double&gt; weight, <span class="keywordtype">double</span>* w) {
<a name="l00257"></a>00257   <span class="keywordtype">double</span> cum =0;
<a name="l00258"></a>00258   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; weight.size(); j++) {
<a name="l00259"></a>00259     cum += weight[j];
<a name="l00260"></a>00260     *w++ = cum;
<a name="l00261"></a>00261   }
<a name="l00262"></a>00262 } <span class="comment">// end of function cumsum()</span>
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="comment">//-----------------End of family of functions for finite mixtures-----------//</span>
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 <span class="comment">//---------------Family of functions for regular histograms-----------------//</span>
<a name="l00272"></a><a class="code" href="errorfunc_8hpp.shtml#a1cbeb2c4ee32bf849533e448710c50e3">00272</a> <span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(<a class="code" href="structRegHist.shtml">RegHist</a>&amp; myRegHist, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; sortedData, 
<a name="l00273"></a>00273                 ivector theBox, <span class="keywordtype">int</span> bwmethod)
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275   <span class="comment">// vector for heights</span>
<a name="l00276"></a>00276   vector&lt;double&gt; heights;
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   <span class="keywordtype">size_t</span> n = sortedData.size();
<a name="l00279"></a>00279   <span class="comment">//cout &lt;&lt; &quot;there are &quot; &lt;&lt; n &lt;&lt; &quot; points.&quot; &lt;&lt; endl;</span>
<a name="l00280"></a>00280 
<a name="l00281"></a>00281   <span class="comment">// determine the bandwidth</span>
<a name="l00282"></a>00282   <span class="keywordtype">double</span> n3 = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, -1.0/3.0); 
<a name="l00283"></a>00283   <span class="keywordtype">double</span> n5 = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, -0.2); 
<a name="l00284"></a>00284   <span class="keywordtype">double</span> n7 = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, -1.0/7.0);
<a name="l00285"></a>00285   <span class="comment">//cout &lt;&lt; &quot;n3: &quot; &lt;&lt; n3 &lt;&lt; &quot;\tn5: &quot; &lt;&lt; n5 &lt;&lt; &quot;\tn7: &quot; &lt;&lt; n7 &lt;&lt; endl;</span>
<a name="l00286"></a>00286 
<a name="l00287"></a>00287   <span class="comment">/*</span>
<a name="l00288"></a>00288 <span class="comment">  // put the data into a list to sort the data</span>
<a name="l00289"></a>00289 <span class="comment">  RVecDataCItr rvecIt;</span>
<a name="l00290"></a>00290 <span class="comment">  list&lt;rvector&gt; rvecList;</span>
<a name="l00291"></a>00291 <span class="comment">  list&lt;rvector&gt;::iterator rvecListIt;</span>
<a name="l00292"></a>00292 <span class="comment">  for (rvecIt = rvec.begin(); rvecIt &lt; rvec.end(); rvecIt++){</span>
<a name="l00293"></a>00293 <span class="comment">    rvector thisrv(1);</span>
<a name="l00294"></a>00294 <span class="comment">    thisrv = *rvecIt;</span>
<a name="l00295"></a>00295 <span class="comment">    rvecList.push_back(thisrv);</span>
<a name="l00296"></a>00296 <span class="comment">  }</span>
<a name="l00297"></a>00297 <span class="comment">  rvecList.sort(); //sort the data</span>
<a name="l00298"></a>00298 <span class="comment">  RVecData sortedData; // put back into vector</span>
<a name="l00299"></a>00299 <span class="comment">  for (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)</span>
<a name="l00300"></a>00300 <span class="comment">  { </span>
<a name="l00301"></a>00301 <span class="comment">    rvector thisrv(1);</span>
<a name="l00302"></a>00302 <span class="comment">    thisrv = *rvecListIt;</span>
<a name="l00303"></a>00303 <span class="comment">    sortedData.push_back(thisrv);</span>
<a name="l00304"></a>00304 <span class="comment">  }</span>
<a name="l00305"></a>00305 <span class="comment">  */</span>
<a name="l00306"></a>00306   
<a name="l00307"></a>00307   <span class="comment">// get the interquartile range</span>
<a name="l00308"></a>00308   <span class="keywordtype">int</span> upperQ = ceil(0.75*n);  <span class="comment">//upper quartile</span>
<a name="l00309"></a>00309   <span class="keywordtype">int</span> lowerQ = ceil(0.25*n);  <span class="comment">//lower quartile</span>
<a name="l00310"></a>00310   <span class="keywordtype">double</span> upperQx = _double((sortedData[upperQ-1])[1]);
<a name="l00311"></a>00311   <span class="keywordtype">double</span> lowerQx = _double((sortedData[lowerQ-1])[1]);
<a name="l00312"></a>00312   <span class="keywordtype">double</span> xiq = upperQx - lowerQx; <span class="comment">// interquartile range</span>
<a name="l00313"></a>00313 
<a name="l00314"></a>00314   <span class="keywordtype">double</span> xsd = <a class="code" href="errorfunc_8cpp.shtml#a674756d3d6aae91356b22688a849bd0f" title="get the standard deviation of the data (this is used when building the regular histogram)">myStd</a>(sortedData);
<a name="l00315"></a>00315   <span class="comment">// determine which sigma to use</span>
<a name="l00316"></a>00316   <span class="keywordtype">double</span> sigma;
<a name="l00317"></a>00317   <span class="keywordflow">if</span> (xiq == 0) { sigma = xsd; }
<a name="l00318"></a>00318   <span class="keywordflow">else</span> { sigma = min(xsd, (xiq/1.349)); }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320   <span class="comment">// determine which bandwidth method to use</span>
<a name="l00321"></a>00321   <span class="keywordtype">double</span> bw = 0.0;
<a name="l00322"></a>00322   
<a name="l00323"></a>00323   cout &lt;&lt; <span class="stringliteral">&quot;determine which bandwidth method to use:&quot;</span> &lt;&lt; endl;
<a name="l00324"></a>00324   <span class="comment">// Scott if bwmethod == 0</span>
<a name="l00325"></a>00325   <span class="keywordflow">if</span> (bwmethod == 0) { bw = 3.4908 * sigma * n3; } 
<a name="l00326"></a>00326   <span class="comment">// Wand&#39;s one stage if bwmethod == 1 </span>
<a name="l00327"></a>00327   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bwmethod == 1) {
<a name="l00328"></a>00328     <span class="keywordtype">double</span> g11 = 1.3041 * sigma * n5;
<a name="l00329"></a>00329     bw  = 1.8171 * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(-<a class="code" href="errorfunc_8cpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983" title="Function required for regular histogram.">psi</a>(sortedData, g11, 2), (-1.0/3.0)) * n3;
<a name="l00330"></a>00330   }
<a name="l00331"></a>00331   <span class="comment">// Wand&#39;s two stage if bwmethod == 2</span>
<a name="l00332"></a>00332   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (bwmethod == 2) {
<a name="l00333"></a>00333     <span class="keywordtype">double</span> g22 = 1.2407 * sigma * n7;
<a name="l00334"></a>00334     <span class="keywordtype">double</span> g21 = 0.9558 * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((<a class="code" href="errorfunc_8cpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983" title="Function required for regular histogram.">psi</a>(sortedData,g22,4)),(-0.2)) * n5; 
<a name="l00335"></a>00335     bw  = 1.8171 * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((-<a class="code" href="errorfunc_8cpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983" title="Function required for regular histogram.">psi</a>(sortedData,g21,2)),(-1.0/3.0)) * n3;
<a name="l00336"></a>00336   }
<a name="l00337"></a>00337 
<a name="l00338"></a>00338   <span class="comment">// Determine bin origin</span>
<a name="l00339"></a>00339   <span class="comment">//cout &lt;&lt; &quot;determine the bin origin&quot; &lt;&lt; endl;</span>
<a name="l00340"></a>00340   rvector xmin = sortedData[0]; <span class="comment">//the minimum value;</span>
<a name="l00341"></a>00341   rvector xmax = sortedData[n-1]; <span class="comment">//the maximum value</span>
<a name="l00342"></a>00342   <span class="keywordtype">double</span> xrange =  _double(xmax[1]) - _double(xmin[1]); <span class="comment">// range of data  </span>
<a name="l00343"></a>00343   <span class="keywordtype">int</span> nbin  = ceil(xrange/ bw); <span class="comment">// number of bins</span>
<a name="l00344"></a>00344   real xoffset = _real((nbin * bw - xrange) / 2); <span class="comment">// offset</span>
<a name="l00345"></a>00345   rvector xlow = Inf(theBox);
<a name="l00346"></a>00346   rvector xupp = Sup(theBox);
<a name="l00347"></a>00347   real bbeg = max(xlow[1], xmin[1] - xoffset); <span class="comment">// bin origin</span>
<a name="l00348"></a>00348   real bend = min(xupp[1], xmax[1] + xoffset); <span class="comment">// bin end</span>
<a name="l00349"></a>00349   real bwR = (bend - bbeg) / (nbin*1.0); <span class="comment">// binwidth</span>
<a name="l00350"></a>00350   myRegHist.<a class="code" href="structRegHist.shtml#a4303d3e3de079e309a6b71a422a13947">binwidth</a> = bwR;
<a name="l00351"></a>00351 
<a name="l00352"></a>00352   cout &lt;&lt; <span class="stringliteral">&quot;there are &quot;</span> &lt;&lt; nbin &lt;&lt; <span class="stringliteral">&quot; bins&quot;</span> &lt;&lt; endl;
<a name="l00353"></a>00353   <span class="keywordtype">int</span> J = 0;
<a name="l00354"></a>00354   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nbin; i++) {
<a name="l00355"></a>00355     <span class="comment">// bin edges</span>
<a name="l00356"></a>00356     myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>.push_back(bbeg + bwR*i);
<a name="l00357"></a>00357     myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>.push_back(bbeg + bwR*(i+1));
<a name="l00358"></a>00358 
<a name="l00359"></a>00359     <span class="comment">//cout &lt;&lt; &quot;getting the counts:&quot; &lt;&lt; endl;</span>
<a name="l00360"></a>00360     <span class="keywordtype">size_t</span> P = 0;
<a name="l00361"></a>00361     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = J; j &lt; n; j++) {
<a name="l00362"></a>00362       rvector thisrv(1);
<a name="l00363"></a>00363       thisrv = sortedData[j];
<a name="l00364"></a>00364       <span class="keywordflow">if</span> (thisrv[1] &gt;= (bbeg + bwR*i) &amp;&amp; thisrv[1] &lt; (bbeg + bwR*(i+1)) ) {
<a name="l00365"></a>00365         P += 1; <span class="comment">// Count frequencies:</span>
<a name="l00366"></a>00366       }
<a name="l00367"></a>00367       <span class="keywordflow">else</span> { J = j+1; <span class="keywordflow">break</span>; }
<a name="l00368"></a>00368     }
<a name="l00369"></a>00369     myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.push_back((P*1.0)/(n*1.0*_double(bwR)));  <span class="comment">//height  </span>
<a name="l00370"></a>00370   }
<a name="l00371"></a>00371 }  
<a name="l00372"></a>00372 
<a name="l00373"></a><a class="code" href="errorfunc_8hpp.shtml#accc20534ffc0e82153262d1a063c2059">00373</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(<a class="code" href="structRegHist.shtml">RegHist</a>&amp; myRegHist, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; sortedData, 
<a name="l00374"></a>00374                 ivector theBox, <span class="keywordtype">double</span> bw)
<a name="l00375"></a>00375 {
<a name="l00376"></a>00376   <span class="comment">// vector for heights</span>
<a name="l00377"></a>00377   vector&lt;double&gt; heights;
<a name="l00378"></a>00378 
<a name="l00379"></a>00379   <span class="keywordtype">size_t</span> n = sortedData.size();
<a name="l00380"></a>00380   <span class="comment">//cout &lt;&lt; &quot;there are &quot; &lt;&lt; n &lt;&lt; &quot; points.&quot; &lt;&lt; endl;</span>
<a name="l00381"></a>00381 
<a name="l00382"></a>00382   <span class="comment">/*</span>
<a name="l00383"></a>00383 <span class="comment">  // put the data into a list to sort the data</span>
<a name="l00384"></a>00384 <span class="comment">  RVecDataCItr rvecIt;</span>
<a name="l00385"></a>00385 <span class="comment">  list&lt;rvector&gt; rvecList;</span>
<a name="l00386"></a>00386 <span class="comment">  list&lt;rvector&gt;::iterator rvecListIt;</span>
<a name="l00387"></a>00387 <span class="comment">  for (rvecIt = rvec.begin(); rvecIt &lt; rvec.end(); rvecIt++){</span>
<a name="l00388"></a>00388 <span class="comment">    rvector thisrv(1);</span>
<a name="l00389"></a>00389 <span class="comment">    thisrv = *rvecIt;</span>
<a name="l00390"></a>00390 <span class="comment">    rvecList.push_back(thisrv);</span>
<a name="l00391"></a>00391 <span class="comment">  }</span>
<a name="l00392"></a>00392 <span class="comment">  rvecList.sort(); //sort the data</span>
<a name="l00393"></a>00393 <span class="comment">  RVecData sortedData; // put back into vector</span>
<a name="l00394"></a>00394 <span class="comment">  for (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)</span>
<a name="l00395"></a>00395 <span class="comment">  { </span>
<a name="l00396"></a>00396 <span class="comment">    rvector thisrv(1);</span>
<a name="l00397"></a>00397 <span class="comment">    thisrv = *rvecListIt;</span>
<a name="l00398"></a>00398 <span class="comment">    sortedData.push_back(thisrv);</span>
<a name="l00399"></a>00399 <span class="comment">  } */</span>
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="comment">// get the interquartile range</span>
<a name="l00402"></a>00402   <span class="keywordtype">int</span> upperQ = ceil(0.75*n);  <span class="comment">//upper quartile</span>
<a name="l00403"></a>00403   <span class="keywordtype">int</span> lowerQ = ceil(0.25*n);  <span class="comment">//lower quartile</span>
<a name="l00404"></a>00404   <span class="keywordtype">double</span> upperQx = _double((sortedData[upperQ-1])[1]);
<a name="l00405"></a>00405   <span class="keywordtype">double</span> lowerQx = _double((sortedData[lowerQ-1])[1]);
<a name="l00406"></a>00406   <span class="keywordtype">double</span> xiq = upperQx - lowerQx; <span class="comment">// interquartile range</span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408   <span class="comment">// determine which sigma to use</span>
<a name="l00409"></a>00409   <span class="keywordtype">double</span> xsd = <a class="code" href="errorfunc_8cpp.shtml#a674756d3d6aae91356b22688a849bd0f" title="get the standard deviation of the data (this is used when building the regular histogram)">myStd</a>(sortedData); <span class="comment">// standard deviation</span>
<a name="l00410"></a>00410   <span class="keywordtype">double</span> sigma;
<a name="l00411"></a>00411   <span class="keywordflow">if</span> (xiq == 0) { sigma = xsd; }
<a name="l00412"></a>00412   <span class="keywordflow">else</span> { sigma = min(xsd, (xiq/1.349)); }
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <span class="comment">// Determine bin origin</span>
<a name="l00415"></a>00415   <span class="comment">//cout &lt;&lt; &quot;determine the bin origin&quot; &lt;&lt; endl;</span>
<a name="l00416"></a>00416   rvector xmin = sortedData[0]; <span class="comment">//the minimum value;</span>
<a name="l00417"></a>00417   rvector xmax = sortedData[n-1]; <span class="comment">//the maximum value</span>
<a name="l00418"></a>00418   <span class="keywordtype">double</span> xrange =  _double(xmax[1]) - _double(xmin[1]); <span class="comment">// range of data  </span>
<a name="l00419"></a>00419   <span class="keywordtype">int</span> nbin  = ceil(xrange/ bw); <span class="comment">// number of bins</span>
<a name="l00420"></a>00420   real xoffset = _real((nbin * bw - xrange) / 2); <span class="comment">// offset</span>
<a name="l00421"></a>00421   rvector xlow = Inf(theBox);
<a name="l00422"></a>00422   rvector xupp = Sup(theBox);
<a name="l00423"></a>00423   real bbeg = max(xlow[1], xmin[1] - xoffset); <span class="comment">// bin origin</span>
<a name="l00424"></a>00424   real bend = min(xupp[1], xmax[1] + xoffset); <span class="comment">// bin end</span>
<a name="l00425"></a>00425   real bwR = (bend - bbeg) / (nbin*1.0); <span class="comment">// binwidth</span>
<a name="l00426"></a>00426   myRegHist.<a class="code" href="structRegHist.shtml#a4303d3e3de079e309a6b71a422a13947">binwidth</a> = bwR;
<a name="l00427"></a>00427 
<a name="l00428"></a>00428   <span class="keywordtype">int</span> J = 0;
<a name="l00429"></a>00429   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nbin; i++) {
<a name="l00430"></a>00430     <span class="comment">// bin edges</span>
<a name="l00431"></a>00431     myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>.push_back(bbeg + bwR*i);
<a name="l00432"></a>00432     myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>.push_back(bbeg + bwR*(i+1));
<a name="l00433"></a>00433 
<a name="l00434"></a>00434     <span class="comment">//cout &lt;&lt; &quot;getting the counts:&quot; &lt;&lt; endl;</span>
<a name="l00435"></a>00435     <span class="keywordtype">size_t</span> P = 0;
<a name="l00436"></a>00436     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = J; j &lt; n; j++) {
<a name="l00437"></a>00437       rvector thisrv(1);
<a name="l00438"></a>00438       thisrv = sortedData[j];           
<a name="l00439"></a>00439       <span class="keywordflow">if</span> (thisrv[1] &gt;= (bbeg + bwR*i) &amp;&amp; thisrv[1] &lt; (bbeg + bwR*(i+1)) ) {
<a name="l00440"></a>00440         P += 1; <span class="comment">// Count frequencies:</span>
<a name="l00441"></a>00441       }
<a name="l00442"></a>00442       <span class="keywordflow">else</span> { J = j+1; <span class="keywordflow">break</span>; }
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444     myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.push_back((P*1.0)/(n*1.0*_double(bwR)));  <span class="comment">//height  </span>
<a name="l00445"></a>00445   }
<a name="l00446"></a>00446 }  
<a name="l00447"></a>00447 
<a name="l00450"></a><a class="code" href="errorfunc_8hpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983">00450</a> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983" title="Function required for regular histogram.">psi</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keywordtype">double</span> g, <span class="keywordtype">double</span> r)
<a name="l00451"></a>00451 {
<a name="l00452"></a>00452   <span class="comment">// value to be returned by this function</span>
<a name="l00453"></a>00453   <span class="keywordtype">double</span> myPsi = 0;
<a name="l00454"></a>00454   
<a name="l00455"></a>00455   <span class="comment">//sample size</span>
<a name="l00456"></a>00456   <span class="keywordtype">int</span> n = rvec.size();
<a name="l00457"></a>00457   
<a name="l00458"></a>00458   <span class="comment">//put the sample into a vector&lt;double&gt;</span>
<a name="l00459"></a>00459   <span class="comment">//cout &lt;&lt; &quot;data in rvector type:&quot; &lt;&lt; endl;</span>
<a name="l00460"></a>00460   <span class="comment">//vector&lt;double&gt; theData;</span>
<a name="l00461"></a>00461   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; n; i++){
<a name="l00462"></a>00462     rvector thisrv = rvec[i];
<a name="l00463"></a>00463   <span class="comment">//  cout &lt;&lt; thisrv[1] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00464"></a>00464   }
<a name="l00465"></a>00465 <span class="comment">//  cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;</span>
<a name="l00466"></a>00466   
<a name="l00467"></a>00467   <span class="comment">//data-based value</span>
<a name="l00468"></a>00468   <span class="keywordtype">double</span> c = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((<span class="keywordtype">double</span>(n)),(-2)) * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(g,(-r-1));
<a name="l00469"></a>00469    <span class="comment">//cout &lt;&lt; &quot;C: &quot; &lt;&lt; c &lt;&lt; endl;</span>
<a name="l00470"></a>00470   
<a name="l00471"></a>00471    <span class="keywordflow">if</span> (n &lt; 1000) {       
<a name="l00472"></a>00472       vector&lt;double&gt; XX, XX2;
<a name="l00473"></a>00473       
<a name="l00474"></a>00474       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00475"></a>00475         rvector rv1 = rvec[i];
<a name="l00476"></a>00476         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; n; j++) {
<a name="l00477"></a>00477           rvector rv2 = rvec[j];    
<a name="l00478"></a>00478           XX.push_back((_double(rv2[1])-_double(rv1[1]))/g);      
<a name="l00479"></a>00479           XX2.push_back(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((_double(rv2[1])-_double(rv1[1]))/g, 2));
<a name="l00480"></a>00480         }     
<a name="l00481"></a>00481       }
<a name="l00482"></a>00482     
<a name="l00483"></a>00483     <span class="comment">// get the normal probability density values corresponding to X</span>
<a name="l00484"></a>00484     vector&lt;double&gt; vecNPD;
<a name="l00485"></a>00485     vecNPD = <a class="code" href="errorfunc_8cpp.shtml#ae767ea3ddeac1e55d74384fe0cd42ecd" title="Gaussian probability density function. Generates normal probability density values corresponding to X...">gaussian</a>(vecNPD, XX, 1);
<a name="l00486"></a>00486    
<a name="l00487"></a>00487     <span class="keywordflow">if</span> (r == 2) {
<a name="l00488"></a>00488        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; XX2.size(); i++) {
<a name="l00489"></a>00489         myPsi += (XX2[i]-1)*vecNPD[i];
<a name="l00490"></a>00490       }
<a name="l00491"></a>00491       
<a name="l00492"></a>00492       myPsi *= c;
<a name="l00493"></a>00493     <span class="comment">//  cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00494"></a>00494     } <span class="comment">// end of r==2</span>
<a name="l00495"></a>00495     
<a name="l00496"></a>00496     
<a name="l00497"></a>00497     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (r == 4) {
<a name="l00498"></a>00498       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; XX2.size(); i++) {
<a name="l00499"></a>00499          <span class="keywordtype">double</span> XX4 = XX2[i] * XX2[i];
<a name="l00500"></a>00500         myPsi += (XX4 - 6*XX2[i] + 3) * vecNPD[i];
<a name="l00501"></a>00501       }     
<a name="l00502"></a>00502       myPsi *= c;
<a name="l00503"></a>00503     <span class="comment">//  cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00504"></a>00504     }
<a name="l00505"></a>00505     
<a name="l00506"></a>00506     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (r == 6) {
<a name="l00507"></a>00507       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; XX2.size(); i++) {
<a name="l00508"></a>00508          <span class="keywordtype">double</span> XX4 = XX2[i] * XX2[i];
<a name="l00509"></a>00509         <span class="keywordtype">double</span> XX6 = XX4 * XX2[i];
<a name="l00510"></a>00510         myPsi += (XX6 - 15*XX4 + 45*XX2[i] - 15) * vecNPD[i];
<a name="l00511"></a>00511       }     
<a name="l00512"></a>00512       myPsi *= c;
<a name="l00513"></a>00513     <span class="comment">//  cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00514"></a>00514     }
<a name="l00515"></a>00515     
<a name="l00516"></a>00516     <span class="keywordflow">else</span> {
<a name="l00517"></a>00517       cout &lt;&lt; <span class="stringliteral">&quot;Error: Input r for Function PSI must be 2, 4 or 6.&quot;</span> &lt;&lt; endl;
<a name="l00518"></a>00518     }
<a name="l00519"></a>00519   
<a name="l00520"></a>00520   } <span class="comment">// end of if n &lt; 1000</span>
<a name="l00521"></a>00521   
<a name="l00522"></a>00522   <span class="keywordflow">else</span> { <span class="comment">// n &gt;= 1000   </span>
<a name="l00523"></a>00523     rvector xmin = rvec[0]; <span class="comment">//the minimum value;</span>
<a name="l00524"></a>00524     rvector xmax = rvec[n-1]; <span class="comment">//the maximum value</span>
<a name="l00525"></a>00525     <span class="keywordtype">int</span> m = 500; 
<a name="l00526"></a>00526     rvector d =  (xmax(1) - xmin(1)) / (m - 1);
<a name="l00527"></a>00527     
<a name="l00528"></a>00528     <span class="comment">/*</span>
<a name="l00529"></a>00529 <span class="comment">    rmatrix Data(n, 1);</span>
<a name="l00530"></a>00530 <span class="comment">    rmatrix Ones(n, 1);</span>
<a name="l00531"></a>00531 <span class="comment">    for (int i = 0; i &lt; n; i++) {</span>
<a name="l00532"></a>00532 <span class="comment">      Data[i+1][1] = (rvec[i][1] - xmin[1])/d[1];</span>
<a name="l00533"></a>00533 <span class="comment">      Ones[i+1][1] = 1;</span>
<a name="l00534"></a>00534 <span class="comment">    }*/</span>
<a name="l00535"></a>00535 
<a name="l00536"></a>00536     cout &lt;&lt; <span class="stringliteral">&quot;get c&quot;</span> &lt;&lt; endl;
<a name="l00537"></a>00537     vector&lt;rvector&gt; C; 
<a name="l00538"></a>00538     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m; j++) {
<a name="l00539"></a>00539 
<a name="l00540"></a>00540       rvector indC(1);
<a name="l00541"></a>00541       indC[1] = 0;
<a name="l00542"></a>00542 
<a name="l00543"></a>00543       <span class="comment">/*rmatrix J(n, 1);</span>
<a name="l00544"></a>00544 <span class="comment">      for (int i = 0; i &lt; n; i++) {</span>
<a name="l00545"></a>00545 <span class="comment">        J[i+1][1] = -j + 2;</span>
<a name="l00546"></a>00546 <span class="comment">      }*/</span>
<a name="l00547"></a>00547 
<a name="l00548"></a>00548       <span class="comment">//else { //cout &lt;&lt; ((Ones - abs(Data + J)) &gt;= 0) &lt;&lt; endl; } </span>
<a name="l00549"></a>00549       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; n; i++) {
<a name="l00550"></a>00550         rvector newX(1);
<a name="l00551"></a>00551         rvector thisrv = rvec[i];
<a name="l00552"></a>00552         newX[1] = thisrv[1] - xmin[1]; 
<a name="l00553"></a>00553         indC[1] += max((1 - abs((newX[1] / d[1]) - j + 1 + 1)), 0);
<a name="l00554"></a>00554       }
<a name="l00555"></a>00555         C.push_back(indC);
<a name="l00556"></a>00556       <span class="comment">//}</span>
<a name="l00557"></a>00557     }
<a name="l00558"></a>00558 
<a name="l00559"></a>00559     cout &lt;&lt; <span class="stringliteral">&quot;get cc&quot;</span> &lt;&lt; endl;
<a name="l00560"></a>00560     vector&lt;rvector&gt; CC;
<a name="l00561"></a>00561     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; C.size(); i++) {
<a name="l00562"></a>00562       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; C.size(); j++) {
<a name="l00563"></a>00563         rvector thisrv(1);
<a name="l00564"></a>00564         thisrv[1] = C[j]*C[i];
<a name="l00565"></a>00565         CC.push_back(thisrv);
<a name="l00566"></a>00566       }
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568     
<a name="l00569"></a>00569     cout &lt;&lt; <span class="stringliteral">&quot;get jj and jj2&quot;</span> &lt;&lt; endl;
<a name="l00570"></a>00570     vector&lt;double&gt; JJ, JJ2;     
<a name="l00571"></a>00571     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m; i++) {
<a name="l00572"></a>00572       rvector rv1(1);
<a name="l00573"></a>00573       rv1[1] = i;
<a name="l00574"></a>00574       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; m; j++) {
<a name="l00575"></a>00575         rvector rv2(1);
<a name="l00576"></a>00576         rv2[1] = j;   
<a name="l00577"></a>00577         JJ.push_back(_double(d[1])*( _double(rv2[1]) - _double(rv1[1]))/g);     
<a name="l00578"></a>00578         JJ2.push_back(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(_double(d[1])*(_double(rv2[1]) - _double(rv1[1]))/g, 2));
<a name="l00579"></a>00579         <span class="comment">//cout &lt;&lt; &quot;JJ: &quot; &lt;&lt; _double(d[1])*( _double(rv2[1]) - _double(rv1[1]))/g &lt;&lt; endl;</span>
<a name="l00580"></a>00580       }     
<a name="l00581"></a>00581     }
<a name="l00582"></a>00582     
<a name="l00583"></a>00583     cout &lt;&lt; <span class="stringliteral">&quot;get gaussian&quot;</span> &lt;&lt; endl;
<a name="l00584"></a>00584     vector&lt;double&gt; vecJJNPD;
<a name="l00585"></a>00585     vecJJNPD = <a class="code" href="errorfunc_8cpp.shtml#ae767ea3ddeac1e55d74384fe0cd42ecd" title="Gaussian probability density function. Generates normal probability density values corresponding to X...">gaussian</a>(vecJJNPD, JJ,1);
<a name="l00586"></a>00586   
<a name="l00587"></a>00587     cout &lt;&lt; <span class="stringliteral">&quot;get cphi &quot;</span> &lt;&lt; endl;
<a name="l00588"></a>00588     vector&lt;double&gt; CPhi;
<a name="l00589"></a>00589      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; vecJJNPD.size(); i++) {
<a name="l00590"></a>00590       rvector thisrv(1);
<a name="l00591"></a>00591       thisrv = CC[i];
<a name="l00592"></a>00592       CPhi.push_back(_double(thisrv[1])*vecJJNPD[i]);
<a name="l00593"></a>00593     }
<a name="l00594"></a>00594       
<a name="l00595"></a>00595     cout &lt;&lt; <span class="stringliteral">&quot;get psi &quot;</span> &lt;&lt; endl;
<a name="l00596"></a>00596     <span class="keywordflow">if</span>  (r == 2) {       
<a name="l00597"></a>00597       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; JJ2.size(); i++) {        
<a name="l00598"></a>00598         myPsi += ( JJ2[i] - 1) * CPhi[i];
<a name="l00599"></a>00599       }     
<a name="l00600"></a>00600       myPsi *= c;
<a name="l00601"></a>00601   <span class="comment">//    cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00602"></a>00602     } <span class="comment">// end of if r = 2</span>
<a name="l00603"></a>00603      
<a name="l00604"></a>00604     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (r == 4) {      
<a name="l00605"></a>00605       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; JJ2.size(); i++) {
<a name="l00606"></a>00606         <span class="keywordtype">double</span> JJ4 = JJ2[i] * JJ2[i];
<a name="l00607"></a>00607         myPsi += (JJ4 - 6*JJ2[i] + 3) * CPhi[i];
<a name="l00608"></a>00608       }     
<a name="l00609"></a>00609       myPsi *= c;
<a name="l00610"></a>00610   <span class="comment">//    cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00611"></a>00611     } <span class="comment">// end of r = 4</span>
<a name="l00612"></a>00612      
<a name="l00613"></a>00613     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (r == 6) {
<a name="l00614"></a>00614       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; JJ2.size(); i++) {
<a name="l00615"></a>00615         <span class="keywordtype">double</span> JJ4 = JJ2[i] * JJ2[i];
<a name="l00616"></a>00616         <span class="keywordtype">double</span> JJ6 = JJ4 * JJ2[i];
<a name="l00617"></a>00617         myPsi += (JJ6 - 15*JJ4 + 45*JJ2[i] - 15) * CPhi[i];
<a name="l00618"></a>00618       }     
<a name="l00619"></a>00619       myPsi *= c;
<a name="l00620"></a>00620     <span class="comment">//  cout &lt;&lt; &quot;r=&quot; &lt;&lt; r &lt;&lt; &quot;\tmyPsi: &quot; &lt;&lt; myPsi &lt;&lt; endl; </span>
<a name="l00621"></a>00621     } <span class="comment">// end of r =6 </span>
<a name="l00622"></a>00622     
<a name="l00623"></a>00623     <span class="keywordflow">else</span> {
<a name="l00624"></a>00624         cout &lt;&lt; <span class="stringliteral">&quot;Error: Input r for Function PSI must be 2, 4 or 6.&quot;</span> &lt;&lt; endl;
<a name="l00625"></a>00625       }    
<a name="l00626"></a>00626    } <span class="comment">// end of n &gt;= 1000    </span>
<a name="l00627"></a>00627     
<a name="l00628"></a>00628     <span class="keywordflow">return</span> myPsi;
<a name="l00629"></a>00629   } <span class="comment">// end of function psi</span>
<a name="l00630"></a>00630 
<a name="l00631"></a>00631                 
<a name="l00634"></a><a class="code" href="errorfunc_8hpp.shtml#a64a6fd302dffeebb366383e265ea20f6">00634</a> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a64a6fd302dffeebb366383e265ea20f6" title="Get the mean of the data (this is used when building the regular histogram)">myMean</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec)
<a name="l00635"></a>00635 {
<a name="l00636"></a>00636   <span class="comment">//cout &lt;&lt; &quot;getmean&quot; &lt;&lt; endl;</span>
<a name="l00637"></a>00637   <span class="keywordtype">size_t</span> n = rvec.size(); <span class="comment">// number of points</span>
<a name="l00638"></a>00638   <span class="comment">// get the sum</span>
<a name="l00639"></a>00639   <span class="keywordtype">double</span> mySum = 0;
<a name="l00640"></a>00640   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; n; i++){
<a name="l00641"></a>00641     rvector thisrv = rvec[i];
<a name="l00642"></a>00642     mySum += _double(thisrv[1]);
<a name="l00643"></a>00643   }
<a name="l00644"></a>00644    <span class="keywordtype">double</span> theMean = mySum/n;
<a name="l00645"></a>00645   
<a name="l00646"></a>00646   <span class="keywordflow">return</span> theMean; 
<a name="l00647"></a>00647 }
<a name="l00648"></a>00648 
<a name="l00651"></a><a class="code" href="errorfunc_8hpp.shtml#a674756d3d6aae91356b22688a849bd0f">00651</a> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a674756d3d6aae91356b22688a849bd0f" title="get the standard deviation of the data (this is used when building the regular histogram)">myStd</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec)
<a name="l00652"></a>00652 {
<a name="l00653"></a>00653   <span class="comment">//cout &lt;&lt; &quot;get std dev&quot; &lt;&lt; endl;</span>
<a name="l00654"></a>00654   <span class="keywordtype">size_t</span> n = rvec.size(); <span class="comment">// number of points</span>
<a name="l00655"></a>00655   <span class="keywordtype">double</span> theMean = <a class="code" href="errorfunc_8cpp.shtml#a64a6fd302dffeebb366383e265ea20f6" title="Get the mean of the data (this is used when building the regular histogram)">myMean</a>(rvec);
<a name="l00656"></a>00656   <span class="comment">// get the sum of squares of the deviation</span>
<a name="l00657"></a>00657   <span class="keywordtype">double</span> mySquaredSum = 0;
<a name="l00658"></a>00658   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; n; i++){
<a name="l00659"></a>00659     rvector thisrv = rvec[i];
<a name="l00660"></a>00660     mySquaredSum += <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(_double(thisrv[1]) - theMean, 2);
<a name="l00661"></a>00661   }
<a name="l00662"></a>00662   <span class="keywordtype">double</span> theStd = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(mySquaredSum/(n-1));
<a name="l00663"></a>00663   <span class="keywordflow">return</span> theStd; 
<a name="l00664"></a>00664 }
<a name="l00665"></a>00665 
<a name="l00668"></a><a class="code" href="errorfunc_8hpp.shtml#ae767ea3ddeac1e55d74384fe0cd42ecd">00668</a> std::vector&lt;double&gt; <a class="code" href="errorfunc_8cpp.shtml#ae767ea3ddeac1e55d74384fe0cd42ecd" title="Gaussian probability density function. Generates normal probability density values corresponding to X...">gaussian</a>(std::vector&lt;double&gt; &amp;vecNPD, 
<a name="l00669"></a>00669                                std::vector&lt;double&gt; &amp;XX, <span class="keywordtype">double</span> SS)
<a name="l00670"></a>00670 {
<a name="l00671"></a>00671   vector&lt;double&gt;::iterator vecIt;
<a name="l00672"></a>00672   
<a name="l00673"></a>00673   <span class="keywordflow">for</span> (vecIt = XX.begin(); vecIt &lt; XX.end(); vecIt++){
<a name="l00674"></a>00674     <span class="keywordtype">double</span> X = *vecIt;
<a name="l00675"></a>00675       vecNPD.push_back(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(X*X)/(2*SS*SS))/(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)*SS));
<a name="l00676"></a>00676   }
<a name="l00677"></a>00677 
<a name="l00678"></a>00678  <span class="keywordflow">return</span> vecNPD;
<a name="l00679"></a>00679 }
<a name="l00680"></a>00680 
<a name="l00683"></a><a class="code" href="errorfunc_8hpp.shtml#a538c5046923fbdee301324f35285d79c">00683</a> real <a class="code" href="errorfunc_8cpp.shtml#a538c5046923fbdee301324f35285d79c">getRegHistFinMixIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp; myRegHist, <a class="code" href="structFinMix.shtml">FinMix</a> &amp; mixt)
<a name="l00684"></a>00684 {
<a name="l00685"></a>00685 <span class="comment">//----------------get the IAE-----------------------------------------------</span>
<a name="l00686"></a>00686 dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00687"></a>00687 dpIAE = 0.0;
<a name="l00688"></a>00688 <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>).size();
<a name="l00689"></a>00689 
<a name="l00690"></a>00690 gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l00691"></a>00691 <span class="keywordtype">double</span> result = 0.0;
<a name="l00692"></a>00692 <span class="keywordtype">double</span> error;
<a name="l00693"></a>00693 gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00696"></a>00696 F.params =  &amp;mixt;
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l00699"></a>00699   mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[j];
<a name="l00700"></a>00700   <span class="keywordtype">double</span> xupp = _double(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[j]);
<a name="l00701"></a>00701   <span class="keywordtype">double</span> xlow = _double(myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[j]);
<a name="l00702"></a>00702   gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l00703"></a>00703   accumulate(dpIAE, result, 1.0);
<a name="l00704"></a>00704 }
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 <span class="comment">/*</span>
<a name="l00707"></a>00707 <span class="comment">// Accounting for the boundaries</span>
<a name="l00708"></a>00708 <span class="comment">ivector theBoxVec;</span>
<a name="l00709"></a>00709 <span class="comment">interval boxes;</span>
<a name="l00710"></a>00710 <span class="comment">//upper bound</span>
<a name="l00711"></a>00711 <span class="comment">theBoxVec = myRegHist.theBoxes[Nbin-1];</span>
<a name="l00712"></a>00712 <span class="comment">boxes = theBoxVec[1];</span>
<a name="l00713"></a>00713 <span class="comment">double xupp1 = _double(Sup(boxes));</span>
<a name="l00714"></a>00714 <span class="comment">//lower bound</span>
<a name="l00715"></a>00715 <span class="comment">theBoxVec = myRegHist.theBoxes[0];</span>
<a name="l00716"></a>00716 <span class="comment">boxes = theBoxVec[1];</span>
<a name="l00717"></a>00717 <span class="comment">double xlow1 = _double(Inf(boxes));</span>
<a name="l00718"></a>00718 <span class="comment">dpIAEBoun = dpFinMixIAEBoun(xlow1, xupp1, mixt);</span>
<a name="l00719"></a>00719 <span class="comment">dpIAE += dpIAEBoun;</span>
<a name="l00720"></a>00720 <span class="comment">*/</span>
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 <span class="comment">// cast dot precision to real</span>
<a name="l00723"></a>00723 real FinMixIAE = rnd(dpIAE);
<a name="l00724"></a>00724 
<a name="l00725"></a>00725 <span class="comment">// free the workspace</span>
<a name="l00726"></a>00726 gsl_integration_workspace_free (w);
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 <span class="keywordflow">return</span> FinMixIAE;
<a name="l00729"></a>00729 }
<a name="l00730"></a>00730 
<a name="l00733"></a><a class="code" href="errorfunc_8hpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">00733</a> interval <a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp; myRegHist, <a class="code" href="structFinMix.shtml">FinMix</a> &amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l00734"></a>00734 {
<a name="l00735"></a>00735   interval totalArea(0.0);
<a name="l00736"></a>00736   <span class="keywordtype">size_t</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size();
<a name="l00737"></a>00737   
<a name="l00738"></a>00738   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l00739"></a>00739     <span class="keywordtype">double</span> fhat = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[j];
<a name="l00740"></a>00740     <span class="keywordtype">double</span> xupp = _double(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[j]);
<a name="l00741"></a>00741     <span class="keywordtype">double</span> xlow = _double(myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[j]);
<a name="l00742"></a>00742     
<a name="l00743"></a>00743     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l00744"></a>00744     vector&lt;intervalw&gt; rootVec;
<a name="l00745"></a>00745 
<a name="l00746"></a>00746     <span class="comment">//---------find the root at this domain</span>
<a name="l00747"></a>00747     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l00748"></a>00748     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(xlow, xupp);
<a name="l00749"></a>00749     interval thisInt(xlow, xupp);
<a name="l00750"></a>00750 
<a name="l00751"></a>00751     <span class="comment">// find the root</span>
<a name="l00752"></a>00752     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l00753"></a>00753     <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 
<a name="l00754"></a>00754 
<a name="l00755"></a>00755     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l00756"></a>00756     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l00757"></a>00757     <span class="comment">//this domain</span>
<a name="l00758"></a>00758     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l00759"></a>00759       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l00760"></a>00760       <span class="comment">//get the L1 error</span>
<a name="l00761"></a>00761       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00762"></a>00762       <span class="comment">//add to totalArea</span>
<a name="l00763"></a>00763       totalArea += diffArea;
<a name="l00764"></a>00764     } <span class="comment">//end of rootVec is empty</span>
<a name="l00765"></a>00765 
<a name="l00766"></a>00766     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l00767"></a>00767       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l00768"></a>00768       <span class="comment">// make the elements in vector unique</span>
<a name="l00769"></a>00769       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l00770"></a>00770         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l00771"></a>00771         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l00772"></a>00772         uniqueRootVec.push_back(rootVec[i]);
<a name="l00773"></a>00773         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l00774"></a>00774         <span class="comment">//now check for uniqueness</span>
<a name="l00775"></a>00775         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l00776"></a>00776           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l00777"></a>00777           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l00778"></a>00778           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l00779"></a>00779             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l00780"></a>00780             uniqueRootVec.pop_back(); }
<a name="l00781"></a>00781         }
<a name="l00782"></a>00782       }
<a name="l00783"></a>00783       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l00784"></a>00784       
<a name="l00785"></a>00785       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l00786"></a>00786       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l00787"></a>00787         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l00788"></a>00788         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l00789"></a>00789         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l00790"></a>00790             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l00791"></a>00791           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l00792"></a>00792           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00793"></a>00793           totalArea += diffArea;
<a name="l00794"></a>00794         }
<a name="l00795"></a>00795         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l00796"></a>00796           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l00797"></a>00797           <span class="comment">//get the left sub-interval</span>
<a name="l00798"></a>00798           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l00799"></a>00799           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l00800"></a>00800           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00801"></a>00801           totalArea += diffArea;
<a name="l00802"></a>00802           
<a name="l00803"></a>00803           <span class="comment">//get the right sub-interval</span>
<a name="l00804"></a>00804           <span class="comment">//get the left sub-interval</span>
<a name="l00805"></a>00805           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l00806"></a>00806           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l00807"></a>00807           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00808"></a>00808           totalArea += diffArea;
<a name="l00809"></a>00809         }
<a name="l00810"></a>00810       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l00811"></a>00811 
<a name="l00812"></a>00812         <span class="comment">// if there is more than 1 root</span>
<a name="l00813"></a>00813       <span class="keywordflow">else</span> {
<a name="l00814"></a>00814         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l00815"></a>00815         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l00816"></a>00816           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l00817"></a>00817         <span class="comment">//}</span>
<a name="l00818"></a>00818 
<a name="l00819"></a>00819         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l00820"></a>00820         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l00821"></a>00821         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l00822"></a>00822           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l00823"></a>00823           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l00824"></a>00824           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l00825"></a>00825           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00826"></a>00826           totalArea += diffArea;
<a name="l00827"></a>00827           
<a name="l00828"></a>00828           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l00829"></a>00829           <span class="comment">// get the sub-itnervals</span>
<a name="l00830"></a>00830           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l00831"></a>00831           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l00832"></a>00832             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l00833"></a>00833             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l00834"></a>00834               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l00835"></a>00835               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l00836"></a>00836               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00837"></a>00837               totalArea += diffArea;
<a name="l00838"></a>00838             }
<a name="l00839"></a>00839             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l00840"></a>00840               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l00841"></a>00841               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l00842"></a>00842               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00843"></a>00843               totalArea += diffArea;
<a name="l00844"></a>00844             }
<a name="l00845"></a>00845           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l00846"></a>00846           
<a name="l00847"></a>00847           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l00848"></a>00848           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l00849"></a>00849             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l00850"></a>00850             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l00851"></a>00851             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l00852"></a>00852             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00853"></a>00853             totalArea += diffArea;
<a name="l00854"></a>00854           }
<a name="l00855"></a>00855           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l00856"></a>00856             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l00857"></a>00857             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l00858"></a>00858             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00859"></a>00859             totalArea += diffArea;
<a name="l00860"></a>00860           } 
<a name="l00861"></a>00861         } <span class="comment">// end of if first root is the boundary</span>
<a name="l00862"></a>00862         
<a name="l00863"></a>00863         <span class="keywordflow">else</span> {
<a name="l00864"></a>00864           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l00865"></a>00865           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l00866"></a>00866           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l00867"></a>00867           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l00868"></a>00868           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00869"></a>00869           totalArea += diffArea;
<a name="l00870"></a>00870           
<a name="l00871"></a>00871           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l00872"></a>00872           <span class="comment">// get the sub-itnervals</span>
<a name="l00873"></a>00873           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l00874"></a>00874           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l00875"></a>00875             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l00876"></a>00876               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l00877"></a>00877               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l00878"></a>00878               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l00879"></a>00879               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00880"></a>00880               totalArea += diffArea;
<a name="l00881"></a>00881             }
<a name="l00882"></a>00882             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l00883"></a>00883               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l00884"></a>00884               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l00885"></a>00885               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l00886"></a>00886               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00887"></a>00887               totalArea += diffArea;
<a name="l00888"></a>00888             }
<a name="l00889"></a>00889           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l00890"></a>00890           
<a name="l00891"></a>00891           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l00892"></a>00892           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l00893"></a>00893             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l00894"></a>00894             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l00895"></a>00895             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l00896"></a>00896             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00897"></a>00897             totalArea += diffArea;
<a name="l00898"></a>00898           }
<a name="l00899"></a>00899           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l00900"></a>00900             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l00901"></a>00901             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l00902"></a>00902             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l00903"></a>00903             totalArea += diffArea;
<a name="l00904"></a>00904           } 
<a name="l00905"></a>00905         } <span class="comment">// end of first root is not the boundary</span>
<a name="l00906"></a>00906       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l00907"></a>00907     } <span class="comment">// end of rootVec is not empty</span>
<a name="l00908"></a>00908 
<a name="l00909"></a>00909   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l00910"></a>00910   
<a name="l00911"></a>00911   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l00912"></a>00912   <span class="keywordflow">return</span> totalArea;
<a name="l00913"></a>00913 }
<a name="l00914"></a>00914 
<a name="l00917"></a><a class="code" href="errorfunc_8hpp.shtml#a7edbd158ed300803fe59b38c60f90875">00917</a> interval <a class="code" href="errorfunc_8cpp.shtml#a7edbd158ed300803fe59b38c60f90875">getRegHistLaplaceIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp; myRegHist, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l00918"></a>00918 {
<a name="l00919"></a>00919   interval totalArea(0.0);
<a name="l00920"></a>00920   <span class="keywordtype">size_t</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size();
<a name="l00921"></a>00921   
<a name="l00922"></a>00922   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l00923"></a>00923     <span class="keywordtype">double</span> fhat = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[j];
<a name="l00924"></a>00924     <span class="keywordtype">double</span> xupp = _double(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[j]);
<a name="l00925"></a>00925     <span class="keywordtype">double</span> xlow = _double(myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[j]);
<a name="l00926"></a>00926     
<a name="l00927"></a>00927     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l00928"></a>00928     vector&lt;intervalw&gt; rootVec;
<a name="l00929"></a>00929 
<a name="l00930"></a>00930     <span class="comment">//---------find the root at this domain</span>
<a name="l00931"></a>00931     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l00932"></a>00932     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(xlow, xupp);
<a name="l00933"></a>00933     interval thisInt(xlow, xupp);
<a name="l00934"></a>00934 
<a name="l00935"></a>00935     <span class="comment">// find the root</span>
<a name="l00936"></a>00936     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l00937"></a>00937     <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(thisIntW, tol, fhat, rootVec); 
<a name="l00938"></a>00938 
<a name="l00939"></a>00939     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l00940"></a>00940     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l00941"></a>00941     <span class="comment">//this domain</span>
<a name="l00942"></a>00942     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l00943"></a>00943       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l00944"></a>00944       <span class="comment">//get the L1 error</span>
<a name="l00945"></a>00945       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l00946"></a>00946       <span class="comment">//add to totalArea</span>
<a name="l00947"></a>00947       totalArea += diffArea;
<a name="l00948"></a>00948     } <span class="comment">//end of rootVec is empty</span>
<a name="l00949"></a>00949 
<a name="l00950"></a>00950     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l00951"></a>00951       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l00952"></a>00952       <span class="comment">// make the elements in vector unique</span>
<a name="l00953"></a>00953       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l00954"></a>00954         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l00955"></a>00955         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l00956"></a>00956         uniqueRootVec.push_back(rootVec[i]);
<a name="l00957"></a>00957         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l00958"></a>00958         <span class="comment">//now check for uniqueness</span>
<a name="l00959"></a>00959         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l00960"></a>00960           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l00961"></a>00961           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l00962"></a>00962           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l00963"></a>00963             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l00964"></a>00964             uniqueRootVec.pop_back(); }
<a name="l00965"></a>00965         }
<a name="l00966"></a>00966       }
<a name="l00967"></a>00967       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l00968"></a>00968       
<a name="l00969"></a>00969       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l00970"></a>00970       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l00971"></a>00971         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l00972"></a>00972         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l00973"></a>00973         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l00974"></a>00974             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l00975"></a>00975           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l00976"></a>00976           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l00977"></a>00977           totalArea += diffArea;
<a name="l00978"></a>00978         }
<a name="l00979"></a>00979         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l00980"></a>00980           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l00981"></a>00981           <span class="comment">//get the left sub-interval</span>
<a name="l00982"></a>00982           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l00983"></a>00983           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l00984"></a>00984           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLeft, deg, tol);
<a name="l00985"></a>00985           totalArea += diffArea;
<a name="l00986"></a>00986           
<a name="l00987"></a>00987           <span class="comment">//get the right sub-interval</span>
<a name="l00988"></a>00988           <span class="comment">//get the left sub-interval</span>
<a name="l00989"></a>00989           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l00990"></a>00990           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l00991"></a>00991           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntRight, deg, tol);
<a name="l00992"></a>00992           totalArea += diffArea;
<a name="l00993"></a>00993         }
<a name="l00994"></a>00994       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l00995"></a>00995 
<a name="l00996"></a>00996         <span class="comment">// if there is more than 1 root</span>
<a name="l00997"></a>00997       <span class="keywordflow">else</span> {
<a name="l00998"></a>00998         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l00999"></a>00999         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l01000"></a>01000           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l01001"></a>01001         <span class="comment">//}</span>
<a name="l01002"></a>01002 
<a name="l01003"></a>01003         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l01004"></a>01004         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l01005"></a>01005         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l01006"></a>01006           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01007"></a>01007           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l01008"></a>01008           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01009"></a>01009           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l01010"></a>01010           totalArea += diffArea;
<a name="l01011"></a>01011           
<a name="l01012"></a>01012           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01013"></a>01013           <span class="comment">// get the sub-itnervals</span>
<a name="l01014"></a>01014           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01015"></a>01015           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01016"></a>01016             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l01017"></a>01017             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01018"></a>01018               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01019"></a>01019               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01020"></a>01020               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01021"></a>01021               totalArea += diffArea;
<a name="l01022"></a>01022             }
<a name="l01023"></a>01023             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01024"></a>01024               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01025"></a>01025               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01026"></a>01026               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01027"></a>01027               totalArea += diffArea;
<a name="l01028"></a>01028             }
<a name="l01029"></a>01029           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l01030"></a>01030           
<a name="l01031"></a>01031           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01032"></a>01032           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01033"></a>01033             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01034"></a>01034             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01035"></a>01035             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01036"></a>01036             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01037"></a>01037             totalArea += diffArea;
<a name="l01038"></a>01038           }
<a name="l01039"></a>01039           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01040"></a>01040             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01041"></a>01041             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01042"></a>01042             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01043"></a>01043             totalArea += diffArea;
<a name="l01044"></a>01044           } 
<a name="l01045"></a>01045         } <span class="comment">// end of if first root is the boundary</span>
<a name="l01046"></a>01046         
<a name="l01047"></a>01047         <span class="keywordflow">else</span> {
<a name="l01048"></a>01048           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l01049"></a>01049           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l01050"></a>01050           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l01051"></a>01051           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01052"></a>01052           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l01053"></a>01053           totalArea += diffArea;
<a name="l01054"></a>01054           
<a name="l01055"></a>01055           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01056"></a>01056           <span class="comment">// get the sub-itnervals</span>
<a name="l01057"></a>01057           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01058"></a>01058           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01059"></a>01059             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01060"></a>01060               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l01061"></a>01061               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01062"></a>01062               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01063"></a>01063               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01064"></a>01064               totalArea += diffArea;
<a name="l01065"></a>01065             }
<a name="l01066"></a>01066             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01067"></a>01067               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l01068"></a>01068               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01069"></a>01069               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01070"></a>01070               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01071"></a>01071               totalArea += diffArea;
<a name="l01072"></a>01072             }
<a name="l01073"></a>01073           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l01074"></a>01074           
<a name="l01075"></a>01075           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01076"></a>01076           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01077"></a>01077             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01078"></a>01078             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01079"></a>01079             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01080"></a>01080             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01081"></a>01081             totalArea += diffArea;
<a name="l01082"></a>01082           }
<a name="l01083"></a>01083           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01084"></a>01084             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01085"></a>01085             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01086"></a>01086             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01087"></a>01087             totalArea += diffArea;
<a name="l01088"></a>01088           } 
<a name="l01089"></a>01089         } <span class="comment">// end of first root is not the boundary</span>
<a name="l01090"></a>01090       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l01091"></a>01091     } <span class="comment">// end of rootVec is not empty</span>
<a name="l01092"></a>01092 
<a name="l01093"></a>01093   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l01094"></a>01094   
<a name="l01095"></a>01095   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l01096"></a>01096   <span class="keywordflow">return</span> totalArea;
<a name="l01097"></a>01097 }
<a name="l01098"></a>01098 
<a name="l01101"></a><a class="code" href="errorfunc_8hpp.shtml#ac2e78d0ba1f818d2e1a81b95544972d8">01101</a> interval <a class="code" href="errorfunc_8cpp.shtml#ac2e78d0ba1f818d2e1a81b95544972d8">getRegHistLognormalIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp; myRegHist, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l01102"></a>01102 {
<a name="l01103"></a>01103   interval totalArea(0.0);
<a name="l01104"></a>01104   <span class="keywordtype">size_t</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size();
<a name="l01105"></a>01105   
<a name="l01106"></a>01106   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l01107"></a>01107     <span class="keywordtype">double</span> fhat = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[j];
<a name="l01108"></a>01108     <span class="keywordtype">double</span> xupp = _double(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[j]);
<a name="l01109"></a>01109     <span class="keywordtype">double</span> xlow = _double(myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[j]);
<a name="l01110"></a>01110     
<a name="l01111"></a>01111     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l01112"></a>01112     vector&lt;intervalw&gt; rootVec;
<a name="l01113"></a>01113 
<a name="l01114"></a>01114     <span class="comment">//---------find the root at this domain</span>
<a name="l01115"></a>01115     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l01116"></a>01116     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(xlow, xupp);
<a name="l01117"></a>01117     interval thisInt(xlow, xupp);
<a name="l01118"></a>01118 
<a name="l01119"></a>01119     <span class="comment">// find the root</span>
<a name="l01120"></a>01120     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l01121"></a>01121     <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(thisIntW, tol, fhat, rootVec); 
<a name="l01122"></a>01122 
<a name="l01123"></a>01123     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l01124"></a>01124     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l01125"></a>01125     <span class="comment">//this domain</span>
<a name="l01126"></a>01126     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l01127"></a>01127       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l01128"></a>01128       <span class="comment">//get the L1 error</span>
<a name="l01129"></a>01129       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l01130"></a>01130       <span class="comment">//add to totalArea</span>
<a name="l01131"></a>01131       totalArea += diffArea;
<a name="l01132"></a>01132     } <span class="comment">//end of rootVec is empty</span>
<a name="l01133"></a>01133 
<a name="l01134"></a>01134     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l01135"></a>01135       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l01136"></a>01136       <span class="comment">// make the elements in vector unique</span>
<a name="l01137"></a>01137       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l01138"></a>01138         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l01139"></a>01139         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l01140"></a>01140         uniqueRootVec.push_back(rootVec[i]);
<a name="l01141"></a>01141       <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l01142"></a>01142         <span class="comment">//now check for uniqueness</span>
<a name="l01143"></a>01143         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l01144"></a>01144           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l01145"></a>01145           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l01146"></a>01146           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l01147"></a>01147             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l01148"></a>01148             uniqueRootVec.pop_back(); }
<a name="l01149"></a>01149         }
<a name="l01150"></a>01150       }
<a name="l01151"></a>01151       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l01152"></a>01152       
<a name="l01153"></a>01153       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l01154"></a>01154       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l01155"></a>01155         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l01156"></a>01156         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l01157"></a>01157         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l01158"></a>01158             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l01159"></a>01159           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l01160"></a>01160           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l01161"></a>01161           totalArea += diffArea;
<a name="l01162"></a>01162         }
<a name="l01163"></a>01163         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l01164"></a>01164           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l01165"></a>01165           <span class="comment">//get the left sub-interval</span>
<a name="l01166"></a>01166           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l01167"></a>01167           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l01168"></a>01168           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLeft, deg, tol);
<a name="l01169"></a>01169           totalArea += diffArea;
<a name="l01170"></a>01170           
<a name="l01171"></a>01171           <span class="comment">//get the right sub-interval</span>
<a name="l01172"></a>01172           <span class="comment">//get the left sub-interval</span>
<a name="l01173"></a>01173           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l01174"></a>01174           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l01175"></a>01175           diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntRight, deg, tol);
<a name="l01176"></a>01176           totalArea += diffArea;
<a name="l01177"></a>01177         }
<a name="l01178"></a>01178       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l01179"></a>01179 
<a name="l01180"></a>01180         <span class="comment">// if there is more than 1 root</span>
<a name="l01181"></a>01181       <span class="keywordflow">else</span> {
<a name="l01182"></a>01182         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l01183"></a>01183         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l01184"></a>01184           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l01185"></a>01185         <span class="comment">//}</span>
<a name="l01186"></a>01186 
<a name="l01187"></a>01187         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l01188"></a>01188         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l01189"></a>01189         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l01190"></a>01190           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01191"></a>01191           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l01192"></a>01192           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01193"></a>01193           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l01194"></a>01194           totalArea += diffArea;
<a name="l01195"></a>01195           
<a name="l01196"></a>01196           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01197"></a>01197           <span class="comment">// get the sub-itnervals</span>
<a name="l01198"></a>01198           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01199"></a>01199           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01200"></a>01200             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l01201"></a>01201             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01202"></a>01202               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01203"></a>01203               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01204"></a>01204               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01205"></a>01205               totalArea += diffArea;
<a name="l01206"></a>01206             }
<a name="l01207"></a>01207             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01208"></a>01208               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01209"></a>01209               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01210"></a>01210               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01211"></a>01211               totalArea += diffArea;
<a name="l01212"></a>01212             }
<a name="l01213"></a>01213           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l01214"></a>01214           
<a name="l01215"></a>01215           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01216"></a>01216           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01217"></a>01217             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01218"></a>01218             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01219"></a>01219             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01220"></a>01220             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01221"></a>01221             totalArea += diffArea;
<a name="l01222"></a>01222           }
<a name="l01223"></a>01223           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01224"></a>01224             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01225"></a>01225             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01226"></a>01226             interval diffArea =<a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01227"></a>01227             totalArea += diffArea;
<a name="l01228"></a>01228           } 
<a name="l01229"></a>01229         } <span class="comment">// end of if first root is the boundary</span>
<a name="l01230"></a>01230         
<a name="l01231"></a>01231         <span class="keywordflow">else</span> {
<a name="l01232"></a>01232           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l01233"></a>01233           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l01234"></a>01234           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l01235"></a>01235           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01236"></a>01236           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l01237"></a>01237           totalArea += diffArea;
<a name="l01238"></a>01238           
<a name="l01239"></a>01239           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01240"></a>01240           <span class="comment">// get the sub-itnervals</span>
<a name="l01241"></a>01241           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01242"></a>01242           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01243"></a>01243             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01244"></a>01244               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l01245"></a>01245               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01246"></a>01246               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01247"></a>01247               interval diffArea =<a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01248"></a>01248               totalArea += diffArea;
<a name="l01249"></a>01249             }
<a name="l01250"></a>01250             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01251"></a>01251               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l01252"></a>01252               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01253"></a>01253               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01254"></a>01254               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l01255"></a>01255               totalArea += diffArea;
<a name="l01256"></a>01256             }
<a name="l01257"></a>01257           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l01258"></a>01258           
<a name="l01259"></a>01259           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01260"></a>01260           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01261"></a>01261             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01262"></a>01262             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01263"></a>01263             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01264"></a>01264             interval diffArea =<a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01265"></a>01265             totalArea += diffArea;
<a name="l01266"></a>01266           }
<a name="l01267"></a>01267           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01268"></a>01268             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01269"></a>01269             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01270"></a>01270             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l01271"></a>01271             totalArea += diffArea;
<a name="l01272"></a>01272           } 
<a name="l01273"></a>01273         } <span class="comment">// end of first root is not the boundary</span>
<a name="l01274"></a>01274       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l01275"></a>01275     } <span class="comment">// end of rootVec is not empty</span>
<a name="l01276"></a>01276 
<a name="l01277"></a>01277   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l01278"></a>01278   
<a name="l01279"></a>01279   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l01280"></a>01280   <span class="keywordflow">return</span> totalArea;
<a name="l01281"></a>01281 }
<a name="l01282"></a>01282 
<a name="l01283"></a>01283 
<a name="l01286"></a><a class="code" href="errorfunc_8hpp.shtml#a9e8c99f0ea9229f7e86f263f834e9869">01286</a> real <a class="code" href="errorfunc_8cpp.shtml#a63593212e4bbb8cbe660d8bf3209f4b4">getRegHistUnifIAE</a>(<a class="code" href="structRegHist.shtml">RegHist</a> &amp; myRegHist, 
<a name="l01287"></a>01287                        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; myPart, <span class="keywordtype">size_t</span> n, <span class="keywordtype">double</span> weight, 
<a name="l01288"></a>01288                        std::vector&lt;int&gt; holesLoc)
<a name="l01289"></a>01289 {
<a name="l01290"></a>01290   <span class="comment">//-------setting up containers-------------------------------</span>
<a name="l01291"></a>01291    dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l01292"></a>01292    dpIAE=0.0;
<a name="l01293"></a>01293 
<a name="l01294"></a>01294    <span class="comment">// get the true height, rueF of the corresponding box in myPart</span>
<a name="l01295"></a>01295   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
<a name="l01296"></a>01296   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
<a name="l01297"></a>01297   (myPart).getSubPaving()-&gt;getLeaves(trueLeaves);
<a name="l01298"></a>01298 
<a name="l01299"></a>01299   ivector temp; <span class="comment">//for the intersections</span>
<a name="l01300"></a>01300   
<a name="l01301"></a>01301    <span class="comment">//go through all the leaves in the regular histogram</span>
<a name="l01302"></a>01302   <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=(myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>).size();
<a name="l01303"></a>01303 
<a name="l01304"></a>01304    
<a name="l01305"></a>01305    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; i++) {
<a name="l01306"></a>01306     <span class="comment">// get the height of this leaf</span>
<a name="l01307"></a>01307       <span class="keywordtype">double</span> fhat = myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i];
<a name="l01308"></a>01308     
<a name="l01309"></a>01309     <span class="comment">//make this box into an ivector</span>
<a name="l01310"></a>01310     interval iBox(myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i], myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i]);
<a name="l01311"></a>01311     ivector thisBox(1);
<a name="l01312"></a>01312     thisBox[1] = iBox;
<a name="l01313"></a>01313     
<a name="l01314"></a>01314     <span class="comment">//cout &lt;&lt; &quot;====checking &quot; &lt;&lt; thisBox &lt;&lt; endl;</span>
<a name="l01315"></a>01315       <span class="comment">//cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l01316"></a>01316 
<a name="l01317"></a>01317     <span class="keywordtype">size_t</span> L = 0;
<a name="l01318"></a>01318     <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l01319"></a>01319       <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l01320"></a>01320       ivector trueBox = (*trueIt)-&gt;getBox();
<a name="l01321"></a>01321 
<a name="l01322"></a>01322       <span class="keywordtype">double</span> trueF;
<a name="l01323"></a>01323       <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
<a name="l01324"></a>01324       <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
<a name="l01325"></a>01325       <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF &lt;&lt; &quot;------&quot; &lt;&lt; endl;</span>
<a name="l01326"></a>01326       
<a name="l01327"></a>01327       <span class="comment">// if this is contained in trueBox</span>
<a name="l01328"></a>01328       <span class="keywordflow">if</span> ( thisBox &lt;= trueBox || thisBox == trueBox ) {
<a name="l01329"></a>01329         <span class="comment">//use the volume of this</span>
<a name="l01330"></a>01330         real r = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(thisBox)*(fhat - trueF);
<a name="l01331"></a>01331         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01332"></a>01332         accumulate(dpIAE, abs(r), 1.0);
<a name="l01333"></a>01333         <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
<a name="l01334"></a>01334         <span class="comment">//think about this later</span>
<a name="l01335"></a>01335       } <span class="comment">//end of if this box is in trueBox</span>
<a name="l01336"></a>01336       
<a name="l01337"></a>01337       <span class="comment">// if this contains trueBox</span>
<a name="l01338"></a>01338       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( trueBox &lt;= thisBox) {
<a name="l01339"></a>01339         <span class="comment">//use the volume of trueBox</span>
<a name="l01340"></a>01340         real r = ((*trueIt)-&gt;nodeVolume())*(fhat - trueF);
<a name="l01341"></a>01341         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01342"></a>01342         accumulate(dpIAE, abs(r), 1.0);
<a name="l01343"></a>01343       } <span class="comment">//end of if trueBox is in this box</span>
<a name="l01344"></a>01344       
<a name="l01345"></a>01345       <span class="comment">// if this is partially contained in trueBox </span>
<a name="l01346"></a>01346       <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
<a name="l01347"></a>01347         <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
<a name="l01348"></a>01348           <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
<a name="l01349"></a>01349           real r = volume*(fhat - trueF);
<a name="l01350"></a>01350           <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01351"></a>01351           accumulate(dpIAE, abs(r), 1.0);
<a name="l01352"></a>01352         }
<a name="l01353"></a>01353       }
<a name="l01354"></a>01354       L++;
<a name="l01355"></a>01355     } <span class="comment">// end of going through trueBoxes</span>
<a name="l01356"></a>01356   } <span class="comment">// end of going through thisBoxes</span>
<a name="l01357"></a>01357   
<a name="l01358"></a>01358     
<a name="l01359"></a>01359     
<a name="l01360"></a>01360    <span class="comment">//cast dotprecision to real</span>
<a name="l01361"></a>01361    real unifIAE = rnd(dpIAE);
<a name="l01362"></a>01362   <span class="keywordflow">return</span> unifIAE;                
<a name="l01363"></a>01363 }
<a name="l01364"></a>01364 
<a name="l01365"></a>01365 <span class="comment">//output regular histogram to .txt</span>
<a name="l01366"></a><a class="code" href="errorfunc_8hpp.shtml#aad70f5031a514e5cc5799cda7e878258">01366</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(<a class="code" href="structRegHist.shtml">RegHist</a>&amp; myRegHist, std::string&amp; s)
<a name="l01367"></a>01367 {
<a name="l01368"></a>01368   <span class="keywordtype">int</span> prec = 5; <span class="comment">// precision for output</span>
<a name="l01369"></a>01369   ofstream os(s.c_str()); 
<a name="l01370"></a>01370   <span class="comment">//output the nodeVolume, height, boxes</span>
<a name="l01371"></a>01371   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>.size(); i++) {
<a name="l01372"></a>01372     os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i];
<a name="l01373"></a>01373     streamsize oldPrec = os.precision();
<a name="l01374"></a>01374     os &lt;&lt; setprecision(prec);
<a name="l01375"></a>01375     <span class="comment">// intervals of box using Inf and Sup</span>
<a name="l01376"></a>01376     os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i];
<a name="l01377"></a>01377     os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i];
<a name="l01378"></a>01378     os &lt;&lt; setprecision(oldPrec);
<a name="l01379"></a>01379     os &lt;&lt; endl;
<a name="l01380"></a>01380   }
<a name="l01381"></a>01381 }
<a name="l01382"></a>01382 <span class="comment">//---------------End of family of function for regular histograms------------//</span>
<a name="l01383"></a>01383 
<a name="l01384"></a>01384 <span class="comment">//----------functions for finding roots----------------------------------//</span>
<a name="l01385"></a>01385 <span class="comment">//return the interval function?</span>
<a name="l01386"></a><a class="code" href="errorfunc_8hpp.shtml#a9b001c0caead3a0c05ed60872773d535">01386</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S) 
<a name="l01387"></a>01387 { <span class="keywordflow">return</span> value(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(x, W, M, S)); }
<a name="l01388"></a>01388 
<a name="l01389"></a>01389 <span class="comment">//return the derivative of the function?</span>
<a name="l01390"></a><a class="code" href="errorfunc_8hpp.shtml#a118fce03849bd0483b3b66ae6df14365">01390</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a118fce03849bd0483b3b66ae6df14365">DF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S) 
<a name="l01391"></a>01391 { <span class="keywordflow">return</span> deriv(<a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(x, W, M, S)); }
<a name="l01392"></a>01392 
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 <span class="comment">//newton&#39;s routine</span>
<a name="l01395"></a>01395 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l01396"></a><a class="code" href="errorfunc_8hpp.shtml#abcd464084d71d1ca5caf89793fa1d050">01396</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, 
<a name="l01397"></a>01397           vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S, <span class="keywordtype">double</span> fhat)
<a name="l01398"></a>01398 {
<a name="l01399"></a>01399   <a class="code" href="classintervalw.shtml">intervalw</a> midX(mid(x));
<a name="l01400"></a>01400   <span class="keywordflow">return</span> midX - <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>(midX, W, M, S)/<a class="code" href="errorfunc_8cpp.shtml#a118fce03849bd0483b3b66ae6df14365">DF</a>(x, W, M, S);
<a name="l01401"></a>01401 }
<a name="l01402"></a>01402 
<a name="l01403"></a>01403 <span class="comment">//find the root using interval newton method</span>
<a name="l01404"></a><a class="code" href="errorfunc_8hpp.shtml#a4954d5b0e64b315bea343c911e1cd0e3">01404</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#ac2e7de1da18a8a42ff1752b888026284">findRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, 
<a name="l01405"></a>01405           vector&lt;double&gt;&amp; S, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootVec)
<a name="l01406"></a>01406 {
<a name="l01407"></a>01407   <span class="comment">//cout &lt;&lt; &quot;finding root at &quot; &lt;&lt; domain &lt;&lt; &quot; for &quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l01408"></a>01408   
<a name="l01409"></a>01409   <a class="code" href="classintervalw.shtml">intervalw</a> newX       = domain;
<a name="l01410"></a>01410   <a class="code" href="classintervalw.shtml">intervalw</a> oldX       = domain + 1;
<a name="l01411"></a>01411   <span class="keywordtype">bool</span>     rootUnique = <span class="keyword">false</span>;
<a name="l01412"></a>01412   <span class="keywordtype">bool</span>     rootExists = <span class="keyword">true</span>;
<a name="l01413"></a>01413 
<a name="l01414"></a>01414   <span class="keywordflow">while</span>( (newX != oldX) &amp;&amp; rootExists ) {
<a name="l01415"></a>01415     oldX = newX;
<a name="l01416"></a>01416     <span class="keywordflow">if</span>( !intersect(newX, <a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a>(oldX, W, M, S, fhat), oldX) ) 
<a name="l01417"></a>01417       rootExists = <span class="keyword">false</span>;
<a name="l01418"></a>01418     <span class="keywordflow">if</span> ( subset(newX, oldX) ) 
<a name="l01419"></a>01419       rootUnique = <span class="keyword">true</span>;
<a name="l01420"></a>01420   }
<a name="l01421"></a>01421   <span class="keywordflow">if</span> ( rootExists ) {
<a name="l01422"></a>01422     cout &lt;&lt; newX;
<a name="l01423"></a>01423     rootVec.push_back(newX);
<a name="l01424"></a>01424     <span class="keywordflow">if</span> ( rootUnique )
<a name="l01425"></a>01425       cout &lt;&lt; <span class="stringliteral">&quot; contains a unique root.&quot;</span> &lt;&lt; endl;
<a name="l01426"></a>01426     <span class="keywordflow">else</span>
<a name="l01427"></a>01427       cout &lt;&lt; <span class="stringliteral">&quot; may contain a simple root.&quot;</span> &lt;&lt; endl;
<a name="l01428"></a>01428   } 
<a name="l01429"></a>01429 }
<a name="l01430"></a>01430 
<a name="l01431"></a>01431 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l01432"></a><a class="code" href="errorfunc_8hpp.shtml#afbbae9b11925b35788b24ce58e63336f">01432</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l01433"></a>01433         vector&lt;intervalw&gt;&amp; rootVec, vector&lt;double&gt;&amp; W, 
<a name="l01434"></a>01434         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S)
<a name="l01435"></a>01435 {
<a name="l01436"></a>01436   <span class="comment">//cout &lt;&lt; &quot;root finding routine: &quot; &lt;&lt; endl;</span>
<a name="l01437"></a>01437   <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot;\t&quot; &lt;&lt; F(x, W, M, S)  &lt;&lt; &quot;\t&quot; &lt;&lt; DF(x, W, M, S) &lt;&lt; endl;</span>
<a name="l01438"></a>01438 
<a name="l01439"></a>01439   <span class="comment">//if the function is twice differentiable?</span>
<a name="l01440"></a>01440   <span class="keywordflow">if</span> ( !subset(0.0, <a class="code" href="errorfunc_8cpp.shtml#a118fce03849bd0483b3b66ae6df14365">DF</a>(x, W, M, S)) ) {
<a name="l01441"></a>01441     <span class="comment">//cout &lt;&lt; &quot;Sending &quot; &lt;&lt; x &lt;&lt; &quot; to the Newton operator...&quot; &lt;&lt; endl;</span>
<a name="l01442"></a>01442     <a class="code" href="errorfunc_8cpp.shtml#ac2e7de1da18a8a42ff1752b888026284">findRoot</a>(x, W, M, S, fhat, rootVec);
<a name="l01443"></a>01443   }
<a name="l01444"></a>01444   
<a name="l01445"></a>01445   <span class="keywordflow">else</span> {
<a name="l01446"></a>01446    <span class="comment">// if the function is not differentiable</span>
<a name="l01447"></a>01447     <span class="keywordflow">if</span> ( subset(fhat, <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>(x, W, M, S)) ) {
<a name="l01448"></a>01448       <span class="comment">//cout &lt;&lt; diam(x) &lt;&lt; &quot;\t&quot; &lt;&lt; TOL &lt;&lt; endl;</span>
<a name="l01449"></a>01449       <span class="keywordflow">if</span> ( diam(x) &lt; TOL ) {
<a name="l01450"></a>01450         <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot; may contain roots. &quot; &lt;&lt; endl;</span>
<a name="l01451"></a>01451         rootVec.push_back(x); <span class="comment">//keep the roots in a container</span>
<a name="l01452"></a>01452       }
<a name="l01453"></a>01453       <span class="keywordflow">else</span> {
<a name="l01454"></a>01454         <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(inf(x), mid(x)), TOL, fhat, rootVec, W, M, S);
<a name="l01455"></a>01455         <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(mid(x), sup(x)), TOL, fhat, rootVec, W, M, S);
<a name="l01456"></a>01456       }
<a name="l01457"></a>01457     }
<a name="l01458"></a>01458   }
<a name="l01459"></a>01459 }
<a name="l01460"></a>01460 
<a name="l01461"></a>01461 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l01462"></a><a class="code" href="errorfunc_8hpp.shtml#ad7abf0d6b473ad78b1737a9e972395c2">01462</a> interval <a class="code" href="errorfunc_8cpp.shtml#ad7abf0d6b473ad78b1737a9e972395c2">riemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, vector&lt;double&gt;&amp; W, 
<a name="l01463"></a>01463         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S) {
<a name="l01464"></a>01464   
<a name="l01465"></a>01465   interval Mid = interval(mid(X));
<a name="l01466"></a>01466 
<a name="l01467"></a>01467   <span class="comment">// Taylor series...</span>
<a name="l01468"></a>01468   <span class="comment">// cout &lt;&lt; &quot;taylor series:&quot; &lt;&lt; endl;</span>
<a name="l01469"></a>01469   <a class="code" href="classitaylor.shtml">itaylor</a> fx  = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(Mid, Deg), W, M, S);
<a name="l01470"></a>01470   interval sum = fx[0]*(diam(X))/2;
<a name="l01471"></a>01471   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 2; k &lt;= Deg; k += 2) 
<a name="l01472"></a>01472    { sum += fx[k]*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, k + 1)/(k + 1); }
<a name="l01473"></a>01473 
<a name="l01474"></a>01474   <span class="comment">// Remainder term...</span>
<a name="l01475"></a>01475   <span class="comment">// cout &lt;&lt; &quot;remainder term: &quot; &lt;&lt; endl;</span>
<a name="l01476"></a>01476   <a class="code" href="classitaylor.shtml">itaylor</a> Fx  = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(X, Deg), W, M, S);
<a name="l01477"></a>01477   <span class="comment">//cout &lt;&lt; &quot;Fx: &quot; &lt;&lt; Fx &lt;&lt; endl;</span>
<a name="l01478"></a>01478   interval eps = abs(Fx[Deg] - fx[Deg]); 
<a name="l01479"></a>01479   <span class="comment">//cout &lt;&lt; &quot;eps: &quot; &lt;&lt; eps &lt;&lt; endl;</span>
<a name="l01480"></a>01480   sum += interval(-1.0*Sup(eps), Sup(eps))*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, Deg + 1)/(Deg + 1); 
<a name="l01481"></a>01481 
<a name="l01482"></a>01482   <span class="keywordflow">return</span> 2*sum;
<a name="l01483"></a>01483 }
<a name="l01484"></a>01484 
<a name="l01485"></a><a class="code" href="errorfunc_8hpp.shtml#aa0f25ae1a698fab2a49e83283c2b0dd1">01485</a> interval <a class="code" href="errorfunc_8cpp.shtml#aa0f25ae1a698fab2a49e83283c2b0dd1">integrate</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol, vector&lt;double&gt;&amp; W, 
<a name="l01486"></a>01486         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S) 
<a name="l01487"></a>01487 {
<a name="l01488"></a>01488   <span class="comment">//cout &lt;&lt; &quot;-------integrating over the domain -------------&quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01489"></a>01489   <span class="comment">//cout &lt;&lt; &quot;get  riemann term of &quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01490"></a>01490   interval sum = <a class="code" href="errorfunc_8cpp.shtml#ad7abf0d6b473ad78b1737a9e972395c2">riemannTerm</a>(f, X, Deg, W, M, S);
<a name="l01491"></a>01491   <span class="comment">//cout &lt;&lt; &quot;sum: &quot; &lt;&lt; sum &lt;&lt; &quot;\t diam(sum):&quot; &lt;&lt; diam(sum) &lt;&lt; &quot;\t Tol: &quot; &lt;&lt; Tol &lt;&lt;  endl;</span>
<a name="l01492"></a>01492   
<a name="l01493"></a>01493   <span class="keywordflow">if</span> ( diam(sum) &lt;= Tol ) {
<a name="l01494"></a>01494     <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; X &lt;&lt; &quot;\t Sum: &quot; &lt;&lt; sum &lt;&lt; endl;</span>
<a name="l01495"></a>01495     <span class="keywordflow">return</span> sum;
<a name="l01496"></a>01496   }
<a name="l01497"></a>01497   <span class="keywordflow">else</span> {  
<a name="l01498"></a>01498     <span class="comment">//cout &lt;&lt; &quot;*****diam(sum) &gt; tol: inf(x), mid(x) + mid(x), sup(x)*****&quot; &lt;&lt; endl;</span>
<a name="l01499"></a>01499     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#aa0f25ae1a698fab2a49e83283c2b0dd1">integrate</a>(f, interval(Inf(X), mid(X)), Deg, Tol/2, W, M, S) + \
<a name="l01500"></a>01500         integrate(f, interval(mid(X), Sup(X)), Deg, Tol/2, W, M, S);
<a name="l01501"></a>01501   }
<a name="l01502"></a>01502 }
<a name="l01503"></a>01503 
<a name="l01504"></a><a class="code" href="errorfunc_8hpp.shtml#a2fbcb5575d9958b3d4168369e3425258">01504</a> interval <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL, 
<a name="l01505"></a>01505               vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S)
<a name="l01506"></a>01506 {
<a name="l01507"></a>01507   <span class="comment">//cout &lt;&lt; &quot;==========get L1 error for &quot; &lt;&lt; thisInt &lt;&lt;  endl;</span>
<a name="l01508"></a>01508   <span class="comment">//hard-code this temporarily</span>
<a name="l01509"></a>01509   <span class="keywordtype">double</span> Tol = 0.0000001;
<a name="l01510"></a>01510   <span class="comment">//cout &lt;&lt; Tol &lt;&lt; endl;</span>
<a name="l01511"></a>01511   
<a name="l01512"></a>01512   <span class="comment">//get the area of the histogram at this interval</span>
<a name="l01513"></a>01513   real histArea = diam(thisInt) * fhat;
<a name="l01514"></a>01514 
<a name="l01515"></a>01515   <span class="comment">//integrate the function at this sub-interval</span>
<a name="l01516"></a>01516   interval fArea = <a class="code" href="errorfunc_8cpp.shtml#aa0f25ae1a698fab2a49e83283c2b0dd1">integrate</a>(<a class="code" href="errorfunc_8cpp.shtml#ae473bc19e57e3781680652a61018aa79">integrand</a>, thisInt, Deg, Tol, W, M, S);
<a name="l01517"></a>01517 
<a name="l01518"></a>01518   <span class="comment">//cout &lt;&lt; &quot;get the differences &quot; &lt;&lt; endl;</span>
<a name="l01519"></a>01519   <span class="comment">//get the differences of the areas</span>
<a name="l01520"></a>01520   interval diffArea = abs(abs(fArea) - histArea);
<a name="l01521"></a>01521   <span class="comment">//cout &lt;&lt; &quot;fArea: &quot; &lt;&lt; fArea &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;\t histArea: &quot; &lt;&lt; histArea &lt;&lt; endl;</span>
<a name="l01522"></a>01522   <span class="comment">//cout &lt;&lt; diffArea &lt;&lt; endl;</span>
<a name="l01523"></a>01523 
<a name="l01524"></a>01524   <span class="keywordflow">return</span> diffArea;
<a name="l01525"></a>01525 }
<a name="l01526"></a>01526 
<a name="l01527"></a>01527 <span class="comment">//----the true density for gaussian mixtures-------//</span>
<a name="l01528"></a>01528 <span class="comment">//for root finding routine</span>
<a name="l01529"></a><a class="code" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">01529</a> <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S)
<a name="l01530"></a>01530 {
<a name="l01531"></a>01531   <a class="code" href="classia__ad.shtml">ia_ad</a> PDF(<a class="code" href="classia__ad.shtml#a4b29351e6e75dabcdc06ea86a83d1212">ia_ad::variable</a>(x));
<a name="l01532"></a>01532 
<a name="l01533"></a>01533   <a class="code" href="classintervalw.shtml">intervalw</a> startPDF(0,0);
<a name="l01534"></a>01534   PDF = startPDF;
<a name="l01535"></a>01535   
<a name="l01536"></a>01536   <span class="keywordtype">size_t</span> Ncomp = W.size();
<a name="l01537"></a>01537   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> c=0; c &lt; Ncomp; c++){
<a name="l01538"></a>01538     <span class="comment">//cout &lt;&lt; c &lt;&lt; &quot;-th component:&quot; &lt;&lt; W[c] &lt;&lt; &quot;\t&quot; &lt;&lt; M[c] &lt;&lt; &quot;\t&quot; &lt;&lt; S[c] &lt;&lt; endl;</span>
<a name="l01539"></a>01539     <a class="code" href="classintervalw.shtml">intervalw</a> z = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((x-M[c])/S[c], 2);
<a name="l01540"></a>01540     <a class="code" href="classintervalw.shtml">intervalw</a> expPart = <a class="code" href="classintervalw.shtml">intervalw</a>(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*sup(z)), <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*inf(z)));
<a name="l01541"></a>01541     PDF = PDF + expPart*(W[c]/(S[c]*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)));
<a name="l01542"></a>01542   }
<a name="l01543"></a>01543   <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; x &lt;&lt; &quot;\t PDF: &quot; &lt;&lt; PDF &lt;&lt; endl;</span>
<a name="l01544"></a>01544 
<a name="l01545"></a>01545   <span class="keywordflow">return</span> PDF;
<a name="l01546"></a>01546 }
<a name="l01547"></a>01547 
<a name="l01548"></a>01548 <span class="comment">//for integration routine</span>
<a name="l01549"></a><a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">01549</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;, vector&lt;double&gt;&amp;, vector&lt;double&gt;&amp;, vector&lt;double&gt;&amp;);
<a name="l01550"></a>01550 
<a name="l01551"></a><a class="code" href="errorfunc_8hpp.shtml#ae473bc19e57e3781680652a61018aa79">01551</a> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#ae473bc19e57e3781680652a61018aa79">integrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S) 
<a name="l01552"></a>01552 { 
<a name="l01553"></a>01553   
<a name="l01554"></a>01554   <a class="code" href="classitaylor.shtml">itaylor</a> PDF(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(interval(0,0), orderOf(x)));
<a name="l01555"></a>01555   <span class="comment">//cout &lt;&lt; &quot;-------initializing variable PDF: ---------&quot; &lt;&lt; PDF &lt;&lt; endl;</span>
<a name="l01556"></a>01556 
<a name="l01557"></a>01557   <span class="comment">//cout &lt;&lt; &quot;x: &quot; &lt;&lt; x[0] &lt;&lt; endl;</span>
<a name="l01558"></a>01558   <span class="keywordtype">size_t</span> Ncomp = W.size();
<a name="l01559"></a>01559   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> c=0; c &lt; Ncomp; c++){
<a name="l01560"></a>01560     <span class="comment">//cout &lt;&lt; c &lt;&lt; &quot;-th component: &quot; &lt;&lt; W[c] &lt;&lt; &quot;\t&quot; &lt;&lt; M[c] &lt;&lt; &quot;\t&quot; &lt;&lt; S[c] &lt;&lt; endl;</span>
<a name="l01561"></a>01561 
<a name="l01562"></a>01562     <a class="code" href="classitaylor.shtml">itaylor</a> z1 = (x-M[c])/S[c]; 
<a name="l01563"></a>01563     <span class="comment">//when inf is negative and sup is positive - split into two parts </span>
<a name="l01564"></a>01564     <span class="keywordflow">if</span> (Inf(z1[0]) &lt; 0 &amp;&amp; Sup(z1[0]) &gt; 0) {  
<a name="l01565"></a>01565       <span class="comment">//cout &lt;&lt; &quot;===========&quot; &lt;&lt; endl;</span>
<a name="l01566"></a>01566       <span class="comment">//cout &lt;&lt; z1[0] &lt;&lt; endl;</span>
<a name="l01567"></a>01567       <a class="code" href="classitaylor.shtml">itaylor</a> z = z1*z1;
<a name="l01568"></a>01568       <span class="comment">//cout &lt;&lt; z[0] &lt;&lt; endl;</span>
<a name="l01569"></a>01569       Inf(z[0]) = 0;
<a name="l01570"></a>01570       <span class="comment">//cout &lt;&lt; z[0] &lt;&lt; endl;</span>
<a name="l01571"></a>01571       PDF = PDF + <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*z)*(W[c]/(S[c]*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)));
<a name="l01572"></a>01572     }  
<a name="l01573"></a>01573     <span class="keywordflow">else</span> {
<a name="l01574"></a>01574       <a class="code" href="classitaylor.shtml">itaylor</a> z = z1*z1;
<a name="l01575"></a>01575       <span class="comment">//cout &lt;&lt; &quot;z: &quot; &lt;&lt; z[0] &lt;&lt; endl;</span>
<a name="l01576"></a>01576       <a class="code" href="classitaylor.shtml">itaylor</a> expPart = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*z);
<a name="l01577"></a>01577       <span class="comment">//cout &lt;&lt; &quot;exp part:&quot; &lt;&lt; expPart[0] &lt;&lt; endl;</span>
<a name="l01578"></a>01578       PDF = PDF + expPart*(W[c]/(S[c]*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)));
<a name="l01579"></a>01579     }
<a name="l01580"></a>01580   }
<a name="l01581"></a>01581   <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; x[0] &lt;&lt; &quot;\t PDF: &quot; &lt;&lt; PDF[0] &lt;&lt; endl;</span>
<a name="l01582"></a>01582   
<a name="l01583"></a>01583   <span class="keywordflow">return</span> PDF;
<a name="l01584"></a>01584 }
<a name="l01585"></a>01585 
<a name="l01586"></a>01586 <span class="comment">//========functions for laplace distribution================//</span>
<a name="l01587"></a>01587 <span class="comment">//The Laplace Distribution</span>
<a name="l01588"></a>01588 <span class="comment">//for root finding routine</span>
<a name="l01589"></a><a class="code" href="errorfunc_8hpp.shtml#a5c072ddf22efaed3c1dc612f42290f30">01589</a> <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#a5c072ddf22efaed3c1dc612f42290f30">LaplacePDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x)
<a name="l01590"></a>01590 {
<a name="l01591"></a>01591   <a class="code" href="classia__ad.shtml">ia_ad</a> PDF(<a class="code" href="classia__ad.shtml#a4b29351e6e75dabcdc06ea86a83d1212">ia_ad::variable</a>(x));
<a name="l01592"></a>01592 
<a name="l01593"></a>01593   <span class="comment">//strictly negative cases</span>
<a name="l01594"></a>01594   <span class="keywordflow">if</span> ( sup(x) &lt; 0.0 ) {
<a name="l01595"></a>01595     PDF = 0.5*<a class="code" href="classintervalw.shtml">intervalw</a>(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(inf(x)), <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(sup(x)));
<a name="l01596"></a>01596   }
<a name="l01597"></a>01597   <span class="comment">//strictly positive</span>
<a name="l01598"></a>01598   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( inf(x) &gt;= 0.0 ) {
<a name="l01599"></a>01599     PDF = 0.5*<a class="code" href="classintervalw.shtml">intervalw</a>(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-sup(x)), <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-inf(x)));
<a name="l01600"></a>01600   }
<a name="l01601"></a>01601   <span class="comment">// 0 is inside the interval x</span>
<a name="l01602"></a>01602   <span class="keywordflow">else</span> {
<a name="l01603"></a>01603      <span class="comment">// this is a symmetric density</span>
<a name="l01604"></a>01604      <span class="keywordflow">if</span> ( fabs(inf(x)) &gt;= sup(x) ) {
<a name="l01605"></a>01605       PDF = 0.5*<a class="code" href="classintervalw.shtml">intervalw</a>(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(inf(x)), <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(0));
<a name="l01606"></a>01606      }
<a name="l01607"></a>01607      <span class="keywordflow">else</span> { 
<a name="l01608"></a>01608        PDF = 0.5*<a class="code" href="classintervalw.shtml">intervalw</a>(<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-sup(x)), <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(0));
<a name="l01609"></a>01609      }
<a name="l01610"></a>01610   }
<a name="l01611"></a>01611   
<a name="l01612"></a>01612   <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; x &lt;&lt; &quot;PDF: &quot; &lt;&lt; PDF &lt;&lt; endl;</span>
<a name="l01613"></a>01613 
<a name="l01614"></a>01614   <span class="keywordflow">return</span> PDF;
<a name="l01615"></a>01615 }
<a name="l01616"></a>01616 
<a name="l01617"></a>01617 <span class="comment">//for integration routine</span>
<a name="l01618"></a><a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">01618</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">pfcnLaplace</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;);
<a name="l01619"></a>01619 
<a name="l01620"></a><a class="code" href="errorfunc_8hpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">01620</a> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">LaplaceIntegrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x) 
<a name="l01621"></a>01621 { 
<a name="l01622"></a>01622   <span class="comment">//cout &lt;&lt; &quot;-------Integrand: ---------&quot; &lt;&lt; x[0] &lt;&lt; &quot;\t&quot;;</span>
<a name="l01623"></a>01623   <a class="code" href="classitaylor.shtml">itaylor</a> PDF(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(interval(0,0), orderOf(x)));
<a name="l01624"></a>01624 
<a name="l01625"></a>01625   <span class="keywordflow">if</span> ( Sup(x[0]) &lt; 0.0 ) {
<a name="l01626"></a>01626     PDF = 0.5*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(-x));
<a name="l01627"></a>01627   }
<a name="l01628"></a>01628   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( Inf(x[0]) &gt;= 0.0 ) { 
<a name="l01629"></a>01629     PDF = 0.5*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(x));
<a name="l01630"></a>01630   }
<a name="l01631"></a>01631   <span class="comment">// 0 is inside the interval x</span>
<a name="l01632"></a>01632   <span class="keywordflow">else</span> { 
<a name="l01633"></a>01633     <span class="comment">//cout &lt;&lt; gsl_ran_laplace_pdf(_double(Inf(x[0])), 1) &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_ran_laplace_pdf(_double(Sup(x[0])), 1) &lt;&lt; endl;</span>
<a name="l01634"></a>01634     <span class="keywordflow">if</span> ( abs(Inf(x[0])) &gt;= Sup(x[0]) ) {
<a name="l01635"></a>01635       PDF = 0.5*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(x);
<a name="l01636"></a>01636     }
<a name="l01637"></a>01637     <span class="keywordflow">else</span> {
<a name="l01638"></a>01638       PDF = 0.5*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-x);
<a name="l01639"></a>01639     }
<a name="l01640"></a>01640   }
<a name="l01641"></a>01641   
<a name="l01642"></a>01642   <span class="comment">//cout &lt;&lt; &quot;PDF: &quot; &lt;&lt; PDF[0] &lt;&lt; endl;</span>
<a name="l01643"></a>01643   <span class="keywordflow">return</span> PDF;
<a name="l01644"></a>01644 }
<a name="l01645"></a>01645 
<a name="l01646"></a>01646 <span class="comment">//----------functions for finding roots: Laplace----------//</span>
<a name="l01647"></a>01647 <span class="comment">//return the interval function?</span>
<a name="l01648"></a><a class="code" href="errorfunc_8hpp.shtml#a83cb93d97adbc26d2b6731e89725b7d6">01648</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a83cb93d97adbc26d2b6731e89725b7d6">LaplaceF</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x) 
<a name="l01649"></a>01649 { <span class="keywordflow">return</span> value(<a class="code" href="errorfunc_8cpp.shtml#a5c072ddf22efaed3c1dc612f42290f30">LaplacePDF</a>(x)); }
<a name="l01650"></a>01650 
<a name="l01651"></a>01651 <span class="comment">//return the derivative of the function?</span>
<a name="l01652"></a><a class="code" href="errorfunc_8hpp.shtml#a1df0b848b1e7ebd2de5866266df70ceb">01652</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a1df0b848b1e7ebd2de5866266df70ceb">LaplaceDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x) 
<a name="l01653"></a>01653 { <span class="keywordflow">return</span> deriv(<a class="code" href="errorfunc_8cpp.shtml#a5c072ddf22efaed3c1dc612f42290f30">LaplacePDF</a>(x)); }
<a name="l01654"></a>01654 
<a name="l01655"></a>01655 
<a name="l01656"></a>01656 <span class="comment">//newton&#39;s routine</span>
<a name="l01657"></a>01657 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l01658"></a><a class="code" href="errorfunc_8hpp.shtml#a64a77490c542f82e7ae00ab525f3efe1">01658</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a64a77490c542f82e7ae00ab525f3efe1">LaplaceNewton</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keywordtype">double</span> fhat)
<a name="l01659"></a>01659 {
<a name="l01660"></a>01660   <a class="code" href="classintervalw.shtml">intervalw</a> midX(mid(x));
<a name="l01661"></a>01661   <span class="keywordflow">return</span> midX - <a class="code" href="errorfunc_8cpp.shtml#a83cb93d97adbc26d2b6731e89725b7d6">LaplaceF</a>(midX)/<a class="code" href="errorfunc_8cpp.shtml#a1df0b848b1e7ebd2de5866266df70ceb">LaplaceDF</a>(x);
<a name="l01662"></a>01662 }
<a name="l01663"></a>01663 
<a name="l01664"></a>01664 <span class="comment">//find the root using interval newton method</span>
<a name="l01665"></a><a class="code" href="errorfunc_8hpp.shtml#aeda7aada753d81a54e812a7ce416d0f5">01665</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a6c2d3ad910df045a1fa44cb3fd190bbe">LaplacefindRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootVec)
<a name="l01666"></a>01666 {
<a name="l01667"></a>01667   <span class="comment">//cout &lt;&lt; &quot;finding root at &quot; &lt;&lt; domain &lt;&lt; &quot; for &quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l01668"></a>01668  
<a name="l01669"></a>01669   <a class="code" href="classintervalw.shtml">intervalw</a> newX       = domain;
<a name="l01670"></a>01670   <a class="code" href="classintervalw.shtml">intervalw</a> oldX       = domain + 1;
<a name="l01671"></a>01671   <span class="keywordtype">bool</span>     rootUnique = <span class="keyword">false</span>;
<a name="l01672"></a>01672   <span class="keywordtype">bool</span>     rootExists = <span class="keyword">true</span>;
<a name="l01673"></a>01673 
<a name="l01674"></a>01674   <span class="keywordflow">while</span>( (newX != oldX) &amp;&amp; rootExists ) {
<a name="l01675"></a>01675     oldX = newX;
<a name="l01676"></a>01676     <span class="keywordflow">if</span>( !intersect(newX, <a class="code" href="errorfunc_8cpp.shtml#a64a77490c542f82e7ae00ab525f3efe1">LaplaceNewton</a>(oldX, fhat), oldX) ) 
<a name="l01677"></a>01677       rootExists = <span class="keyword">false</span>;
<a name="l01678"></a>01678     <span class="keywordflow">if</span> ( subset(newX, oldX) ) 
<a name="l01679"></a>01679       rootUnique = <span class="keyword">true</span>;
<a name="l01680"></a>01680   }
<a name="l01681"></a>01681   <span class="keywordflow">if</span> ( rootExists ) {
<a name="l01682"></a>01682     cout &lt;&lt; newX;
<a name="l01683"></a>01683     rootVec.push_back(newX);
<a name="l01684"></a>01684     <span class="keywordflow">if</span> ( rootUnique )
<a name="l01685"></a>01685       cout &lt;&lt; <span class="stringliteral">&quot; contains a unique root.&quot;</span> &lt;&lt; endl;
<a name="l01686"></a>01686     <span class="keywordflow">else</span>
<a name="l01687"></a>01687       cout &lt;&lt; <span class="stringliteral">&quot; may contain a simple root.&quot;</span> &lt;&lt; endl;
<a name="l01688"></a>01688   } 
<a name="l01689"></a>01689 }
<a name="l01690"></a>01690 
<a name="l01691"></a>01691 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l01692"></a><a class="code" href="errorfunc_8hpp.shtml#ac2975a7f53b8bbdf01bb073b661a766d">01692</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l01693"></a>01693         vector&lt;intervalw&gt;&amp; rootVec)
<a name="l01694"></a>01694 {
<a name="l01695"></a>01695   <span class="comment">//cout &lt;&lt; &quot;===========root finding routine at domain: &quot; &lt;&lt; x &lt;&lt;  endl;</span>
<a name="l01696"></a>01696   <span class="comment">//cout &lt;&lt; LaplacePDF(x) &lt;&lt; endl;</span>
<a name="l01697"></a>01697   <span class="comment">//cout &lt;&lt; &quot;gsl: &quot; &lt;&lt; gsl_ran_laplace_pdf(inf(x), 1) &lt;&lt; &quot;\t&quot; &lt;&lt;  gsl_ran_laplace_pdf(sup(x), 1) &lt;&lt; endl;</span>
<a name="l01698"></a>01698   <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot;\t&quot; &lt;&lt; LaplaceF(x)  &lt;&lt; &quot;\t&quot; &lt;&lt; LaplaceDF(x) &lt;&lt; endl;</span>
<a name="l01699"></a>01699 
<a name="l01700"></a>01700   <span class="comment">//if the function is twice differentiable?</span>
<a name="l01701"></a>01701   <span class="keywordflow">if</span> ( !subset(0.0, <a class="code" href="errorfunc_8cpp.shtml#a1df0b848b1e7ebd2de5866266df70ceb">LaplaceDF</a>(x)) ) {
<a name="l01702"></a>01702     cout &lt;&lt; <span class="stringliteral">&quot;Sending &quot;</span> &lt;&lt; x &lt;&lt; <span class="stringliteral">&quot; to the Newton operator...&quot;</span> &lt;&lt; endl;
<a name="l01703"></a>01703     <a class="code" href="errorfunc_8cpp.shtml#a6c2d3ad910df045a1fa44cb3fd190bbe">LaplacefindRoot</a>(x, fhat, rootVec);
<a name="l01704"></a>01704     cerr &lt;&lt; <span class="stringliteral">&quot;check this!&quot;</span> &lt;&lt; endl;
<a name="l01705"></a>01705     exit(0);
<a name="l01706"></a>01706   }
<a name="l01707"></a>01707   
<a name="l01708"></a>01708   <span class="keywordflow">else</span> {
<a name="l01709"></a>01709    <span class="comment">// if the function is not differentiable</span>
<a name="l01710"></a>01710     <span class="comment">//cout &lt;&lt; &quot;------------compare fhats&quot; &lt;&lt; endl;</span>
<a name="l01711"></a>01711     <span class="comment">//cout.precision(10);</span>
<a name="l01712"></a>01712     <span class="comment">//cout &lt;&lt; intervalw(fhat) &lt;&lt; &quot;\t&quot; &lt;&lt; LaplaceF(x) &lt;&lt; endl;</span>
<a name="l01713"></a>01713     <span class="comment">//cout &lt;&lt; ( fhat &lt;= sup(LaplaceF(x)) ) &lt;&lt; endl;</span>
<a name="l01714"></a>01714     
<a name="l01715"></a>01715     <span class="keywordflow">if</span> ( subset(<a class="code" href="classintervalw.shtml">intervalw</a>(fhat), <a class="code" href="errorfunc_8cpp.shtml#a83cb93d97adbc26d2b6731e89725b7d6">LaplaceF</a>(x)) ) {
<a name="l01716"></a>01716       <span class="comment">//cout &lt;&lt; &quot;check tolerance: &quot; &lt;&lt; endl;</span>
<a name="l01717"></a>01717       <span class="comment">//cout &lt;&lt; diam(x) &lt;&lt; &quot;\t&quot; &lt;&lt; TOL &lt;&lt; endl;</span>
<a name="l01718"></a>01718       <span class="keywordflow">if</span> ( diam(x) &lt; TOL ) {
<a name="l01719"></a>01719         <span class="comment">//cout &lt;&lt; diam(x) &lt;&lt; &quot;\t&quot; &lt;&lt; TOL &lt;&lt; endl;</span>
<a name="l01720"></a>01720         <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot; may contain roots. &quot; &lt;&lt; endl;</span>
<a name="l01721"></a>01721         rootVec.push_back(x); <span class="comment">//keep the roots in a container</span>
<a name="l01722"></a>01722       }
<a name="l01723"></a>01723       <span class="keywordflow">else</span> {
<a name="l01724"></a>01724         <span class="comment">//cout &lt;&lt; &quot;bisect: &quot; &lt;&lt; endl;</span>
<a name="l01725"></a>01725         <span class="comment">//cout &lt;&lt; &quot;left&quot; &lt;&lt; endl;</span>
<a name="l01726"></a>01726         <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(inf(x), mid(x)), TOL, fhat, rootVec);
<a name="l01727"></a>01727         <span class="comment">//cout &lt;&lt; &quot;right&quot; &lt;&lt; endl;</span>
<a name="l01728"></a>01728         <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(mid(x), sup(x)), TOL, fhat, rootVec);
<a name="l01729"></a>01729       }
<a name="l01730"></a>01730     }
<a name="l01731"></a>01731     <span class="comment">//else { cout &lt;&lt; &quot;fhat not here. &quot; &lt;&lt; endl; }</span>
<a name="l01732"></a>01732   }
<a name="l01733"></a>01733 }
<a name="l01734"></a>01734 
<a name="l01735"></a>01735 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l01736"></a><a class="code" href="errorfunc_8cpp.shtml#acaee4b1f2fbef568e6c87428028de1c1">01736</a> interval <a class="code" href="errorfunc_8cpp.shtml#acaee4b1f2fbef568e6c87428028de1c1">LaplaceRiemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">pfcnLaplace</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg) {
<a name="l01737"></a>01737   
<a name="l01738"></a>01738   interval Mid = interval(mid(X));
<a name="l01739"></a>01739 
<a name="l01740"></a>01740   <span class="comment">// Taylor series...</span>
<a name="l01741"></a>01741   <span class="comment">// cout &lt;&lt; &quot;taylor series:&quot; &lt;&lt; endl;</span>
<a name="l01742"></a>01742   <a class="code" href="classitaylor.shtml">itaylor</a> fx  = <a class="code" href="errorfunc_8cpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">LaplaceIntegrand</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(Mid, Deg));
<a name="l01743"></a>01743   interval sum = fx[0]*(diam(X))/2;
<a name="l01744"></a>01744   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 2; k &lt;= Deg; k += 2) 
<a name="l01745"></a>01745    { sum += fx[k]*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, k + 1)/(k + 1); }
<a name="l01746"></a>01746 
<a name="l01747"></a>01747   <span class="comment">// Remainder term...</span>
<a name="l01748"></a>01748   <span class="comment">// cout &lt;&lt; &quot;remainder term: &quot; &lt;&lt; endl;</span>
<a name="l01749"></a>01749   <a class="code" href="classitaylor.shtml">itaylor</a> Fx  = <a class="code" href="errorfunc_8cpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">LaplaceIntegrand</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(X, Deg));
<a name="l01750"></a>01750   <span class="comment">//cout &lt;&lt; &quot;Fx: &quot; &lt;&lt; Fx &lt;&lt; endl;</span>
<a name="l01751"></a>01751   interval eps = abs(Fx[Deg] - fx[Deg]); 
<a name="l01752"></a>01752   <span class="comment">//cout &lt;&lt; &quot;eps: &quot; &lt;&lt; eps &lt;&lt; endl;</span>
<a name="l01753"></a>01753   sum += interval(-1.0*Sup(eps), Sup(eps))*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, Deg + 1)/(Deg + 1); 
<a name="l01754"></a>01754 
<a name="l01755"></a>01755   <span class="keywordflow">return</span> 2*sum;
<a name="l01756"></a>01756 }
<a name="l01757"></a>01757 
<a name="l01758"></a><a class="code" href="errorfunc_8cpp.shtml#ae9e1f8084e10ac335146e7849cc23fbd">01758</a> interval <a class="code" href="errorfunc_8cpp.shtml#ae9e1f8084e10ac335146e7849cc23fbd">LaplaceIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">pfcnLaplace</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol) 
<a name="l01759"></a>01759 {
<a name="l01760"></a>01760   <span class="comment">//cout &lt;&lt; &quot;-------integrating over the domain -------------&quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01761"></a>01761   <span class="comment">//cout &lt;&lt; &quot;get  riemann term of &quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01762"></a>01762   interval sum = <a class="code" href="errorfunc_8cpp.shtml#acaee4b1f2fbef568e6c87428028de1c1">LaplaceRiemannTerm</a>(f, X, Deg);
<a name="l01763"></a>01763   <span class="comment">//cout &lt;&lt; &quot;sum: &quot; &lt;&lt; sum &lt;&lt; &quot;\t diam(sum):&quot; &lt;&lt; diam(sum) &lt;&lt; &quot;\t Tol: &quot; &lt;&lt; Tol &lt;&lt;  endl;</span>
<a name="l01764"></a>01764   
<a name="l01765"></a>01765   <span class="keywordflow">if</span> ( diam(sum) &lt;= Tol ) {
<a name="l01766"></a>01766     <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; X &lt;&lt; &quot;\t Sum: &quot; &lt;&lt; sum &lt;&lt; endl;</span>
<a name="l01767"></a>01767     <span class="keywordflow">return</span> sum;
<a name="l01768"></a>01768   }
<a name="l01769"></a>01769   <span class="keywordflow">else</span> {  
<a name="l01770"></a>01770     <span class="comment">//cout &lt;&lt; &quot;*****diam(sum) &gt; tol: inf(x), mid(x) + mid(x), sup(x)*****&quot; &lt;&lt; endl;</span>
<a name="l01771"></a>01771     <span class="comment">//cout &lt;&lt; &quot;sum: &quot; &lt;&lt; sum &lt;&lt; &quot;\t Tol: &quot; &lt;&lt; Tol &lt;&lt; endl;</span>
<a name="l01772"></a>01772     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#ae9e1f8084e10ac335146e7849cc23fbd">LaplaceIntegrate</a>(f, interval(Inf(X), mid(X)), Deg, Tol/2) + \
<a name="l01773"></a>01773         LaplaceIntegrate(f, interval(mid(X), Sup(X)), Deg, Tol/2);
<a name="l01774"></a>01774   }
<a name="l01775"></a>01775 }
<a name="l01776"></a>01776 
<a name="l01777"></a><a class="code" href="errorfunc_8hpp.shtml#a76a4c9e6350419472c3285481c1690e2">01777</a> interval <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL)
<a name="l01778"></a>01778 {
<a name="l01779"></a>01779 <span class="comment">//  cout &lt;&lt; &quot;==========get L1 error for &quot; &lt;&lt; thisInt &lt;&lt;  endl;</span>
<a name="l01780"></a>01780   <span class="comment">//hard-code this temporarily</span>
<a name="l01781"></a>01781   <span class="keywordtype">double</span> Tol = 0.0000001;
<a name="l01782"></a>01782   <span class="comment">//cout &lt;&lt; Tol &lt;&lt; endl;</span>
<a name="l01783"></a>01783   
<a name="l01784"></a>01784   <span class="comment">//get the area of the histogram at this interval</span>
<a name="l01785"></a>01785   real histArea = diam(thisInt) * fhat;
<a name="l01786"></a>01786 
<a name="l01787"></a>01787   <span class="comment">//integrate the function at this sub-interval</span>
<a name="l01788"></a>01788   interval fArea = <a class="code" href="errorfunc_8cpp.shtml#ae9e1f8084e10ac335146e7849cc23fbd">LaplaceIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">LaplaceIntegrand</a>, thisInt, Deg, Tol);
<a name="l01789"></a>01789   <span class="comment">//cout &lt;&lt; &quot;integrate: &quot; &lt;&lt; fArea &lt;&lt; endl;</span>
<a name="l01790"></a>01790 
<a name="l01791"></a>01791   <span class="comment">//cout &lt;&lt; &quot;get the differences &quot; &lt;&lt; endl;</span>
<a name="l01792"></a>01792   <span class="comment">//get the differences of the areas</span>
<a name="l01793"></a>01793   <span class="comment">//double up = gsl_cdf_laplace_P(_double(Sup(thisInt)), 1);</span>
<a name="l01794"></a>01794   <span class="comment">//double low = gsl_cdf_laplace_P(_double(Inf(thisInt)), 1);</span>
<a name="l01795"></a>01795   <span class="comment">//cout &lt;&lt; &quot;gsl: &quot; &lt;&lt; up-low &lt;&lt; endl;</span>
<a name="l01796"></a>01796   interval diffArea = abs(abs(fArea) - histArea);
<a name="l01797"></a>01797   <span class="comment">//cout &lt;&lt; &quot;fArea: &quot; &lt;&lt; fArea &lt;&lt; &quot;\t&quot; &lt;&lt; diam(thisInt) &lt;&lt; </span>
<a name="l01798"></a>01798   <span class="comment">//&quot;\t fhat:&quot; &lt;&lt; fhat &lt;&lt; &quot;\t histArea: &quot; &lt;&lt; histArea &lt;&lt; endl;</span>
<a name="l01799"></a>01799   <span class="comment">//cout &lt;&lt; diffArea &lt;&lt; endl;</span>
<a name="l01800"></a>01800 
<a name="l01801"></a>01801   <span class="keywordflow">return</span> diffArea;
<a name="l01802"></a>01802 }
<a name="l01803"></a>01803 <span class="comment">//============end of functions for Laplace============================//</span>
<a name="l01804"></a>01804 
<a name="l01805"></a>01805 <span class="comment">//========functions for lognormal=================================//</span>
<a name="l01806"></a>01806 <span class="comment">//for root finding routine</span>
<a name="l01807"></a><a class="code" href="errorfunc_8hpp.shtml#a6640f4518f5a29d2caa7dd15c3d05be0">01807</a> <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#a6640f4518f5a29d2caa7dd15c3d05be0">LognormalPDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x)
<a name="l01808"></a>01808 {
<a name="l01809"></a>01809   <a class="code" href="classia__ad.shtml">ia_ad</a> PDF(<a class="code" href="classia__ad.shtml#a4b29351e6e75dabcdc06ea86a83d1212">ia_ad::variable</a>(x));
<a name="l01810"></a>01810   
<a name="l01811"></a>01811   PDF = 1/x*1/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*log(x)*log(x));
<a name="l01812"></a>01812   
<a name="l01813"></a>01813   <span class="keywordflow">return</span> PDF;
<a name="l01814"></a>01814   
<a name="l01815"></a>01815   <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; x &lt;&lt; &quot;PDF: &quot; &lt;&lt; PDF &lt;&lt; endl;</span>
<a name="l01816"></a>01816 }
<a name="l01817"></a>01817 
<a name="l01818"></a>01818 <span class="comment">//for integration routine</span>
<a name="l01819"></a><a class="code" href="errorfunc_8cpp.shtml#a48908ee3bc312005f3b46888bcc0cdd3">01819</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#a48908ee3bc312005f3b46888bcc0cdd3">pfcnLognormal</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;);
<a name="l01820"></a>01820 
<a name="l01821"></a><a class="code" href="errorfunc_8hpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">01821</a> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">LognormalIntegrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x) 
<a name="l01822"></a>01822 { 
<a name="l01823"></a>01823   <span class="comment">//cout &lt;&lt; &quot;-------Integrand: ---------&quot; &lt;&lt; endl;</span>
<a name="l01824"></a>01824   <a class="code" href="classitaylor.shtml">itaylor</a> PDF(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(interval(0,0), orderOf(x)));
<a name="l01825"></a>01825   
<a name="l01826"></a>01826   PDF = 1/x*1/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI)*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*log(x)*log(x));
<a name="l01827"></a>01827 
<a name="l01828"></a>01828   <span class="comment">//cout &lt;&lt; PDF[0] &lt;&lt; endl;</span>
<a name="l01829"></a>01829   
<a name="l01830"></a>01830   <span class="keywordflow">return</span> PDF;
<a name="l01831"></a>01831 }
<a name="l01832"></a>01832 
<a name="l01833"></a>01833 <span class="comment">//----------functions for finding roots: Lognormal----------//</span>
<a name="l01834"></a>01834 <span class="comment">//return the interval function?</span>
<a name="l01835"></a><a class="code" href="errorfunc_8hpp.shtml#a256e19e7647e7510144ff8e3064b07c1">01835</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a256e19e7647e7510144ff8e3064b07c1">LognormalF</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x) 
<a name="l01836"></a>01836 { <span class="keywordflow">return</span> value(<a class="code" href="errorfunc_8cpp.shtml#a6640f4518f5a29d2caa7dd15c3d05be0">LognormalPDF</a>(x)); }
<a name="l01837"></a>01837 
<a name="l01838"></a>01838 <span class="comment">//return the derivative of the function?</span>
<a name="l01839"></a><a class="code" href="errorfunc_8hpp.shtml#a45238105e02452f020b01a332fee8913">01839</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a45238105e02452f020b01a332fee8913">LognormalDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x) 
<a name="l01840"></a>01840 { <span class="keywordflow">return</span> deriv(<a class="code" href="errorfunc_8cpp.shtml#a6640f4518f5a29d2caa7dd15c3d05be0">LognormalPDF</a>(x)); }
<a name="l01841"></a>01841 
<a name="l01842"></a>01842 <span class="comment">//newton&#39;s routine</span>
<a name="l01843"></a>01843 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l01844"></a><a class="code" href="errorfunc_8hpp.shtml#a2ad23089c1ee547e199a0e481a973f02">01844</a> <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a2ad23089c1ee547e199a0e481a973f02">LognormalNewton</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keywordtype">double</span> fhat)
<a name="l01845"></a>01845 {
<a name="l01846"></a>01846   <a class="code" href="classintervalw.shtml">intervalw</a> midX(mid(x));
<a name="l01847"></a>01847   <span class="keywordflow">return</span> midX - <a class="code" href="errorfunc_8cpp.shtml#a256e19e7647e7510144ff8e3064b07c1">LognormalF</a>(midX)/<a class="code" href="errorfunc_8cpp.shtml#a45238105e02452f020b01a332fee8913">LognormalDF</a>(x);
<a name="l01848"></a>01848 }
<a name="l01849"></a>01849 
<a name="l01850"></a>01850 <span class="comment">//find the root using interval newton method</span>
<a name="l01851"></a><a class="code" href="errorfunc_8hpp.shtml#ad0d44cb3344c0a21cfbf56bb7d263066">01851</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a75c63219b8792609e96391a851a5306e">LognormalfindRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootVec)
<a name="l01852"></a>01852 {
<a name="l01853"></a>01853   cout &lt;&lt; <span class="stringliteral">&quot;finding root at &quot;</span> &lt;&lt; domain &lt;&lt; <span class="stringliteral">&quot; for &quot;</span> &lt;&lt; fhat &lt;&lt; endl;
<a name="l01854"></a>01854  
<a name="l01855"></a>01855   <a class="code" href="classintervalw.shtml">intervalw</a> newX       = domain;
<a name="l01856"></a>01856   <a class="code" href="classintervalw.shtml">intervalw</a> oldX       = domain + 1;
<a name="l01857"></a>01857   <span class="keywordtype">bool</span>     rootUnique = <span class="keyword">false</span>;
<a name="l01858"></a>01858   <span class="keywordtype">bool</span>     rootExists = <span class="keyword">true</span>;
<a name="l01859"></a>01859 
<a name="l01860"></a>01860   <span class="keywordflow">while</span>( (newX != oldX) &amp;&amp; rootExists ) {
<a name="l01861"></a>01861     oldX = newX;
<a name="l01862"></a>01862     <span class="keywordflow">if</span>( !intersect(newX, <a class="code" href="errorfunc_8cpp.shtml#a2ad23089c1ee547e199a0e481a973f02">LognormalNewton</a>(oldX, fhat), oldX) ) 
<a name="l01863"></a>01863       rootExists = <span class="keyword">false</span>;
<a name="l01864"></a>01864     <span class="keywordflow">if</span> ( subset(newX, oldX) ) 
<a name="l01865"></a>01865       rootUnique = <span class="keyword">true</span>;
<a name="l01866"></a>01866   }
<a name="l01867"></a>01867   <span class="keywordflow">if</span> ( rootExists ) {
<a name="l01868"></a>01868     cout &lt;&lt; newX;
<a name="l01869"></a>01869     rootVec.push_back(newX);
<a name="l01870"></a>01870     <span class="keywordflow">if</span> ( rootUnique )
<a name="l01871"></a>01871       cout &lt;&lt; <span class="stringliteral">&quot; contains a unique root.&quot;</span> &lt;&lt; endl;
<a name="l01872"></a>01872     <span class="keywordflow">else</span>
<a name="l01873"></a>01873       cout &lt;&lt; <span class="stringliteral">&quot; may contain a simple root.&quot;</span> &lt;&lt; endl;
<a name="l01874"></a>01874   } 
<a name="l01875"></a>01875 }
<a name="l01876"></a>01876 
<a name="l01877"></a>01877 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l01878"></a><a class="code" href="errorfunc_8hpp.shtml#ae609c2490a47ae5b66bbc9ed34ede493">01878</a> <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l01879"></a>01879         vector&lt;intervalw&gt;&amp; rootVec)
<a name="l01880"></a>01880 {
<a name="l01881"></a>01881   <span class="comment">//cout &lt;&lt; &quot;===========root finding routine at domain: &quot; &lt;&lt; x &lt;&lt;  endl;</span>
<a name="l01882"></a>01882   <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot;\t&quot; &lt;&lt; LaplaceF(x)  &lt;&lt; &quot;\t&quot; &lt;&lt; LognormalDF(x) &lt;&lt; endl;</span>
<a name="l01883"></a>01883 
<a name="l01884"></a>01884   <span class="comment">//if the function is twice differentiable?</span>
<a name="l01885"></a>01885   <span class="keywordflow">if</span> ( !subset(0.0, <a class="code" href="errorfunc_8cpp.shtml#a45238105e02452f020b01a332fee8913">LognormalDF</a>(x)) ) {
<a name="l01886"></a>01886     cout &lt;&lt; <span class="stringliteral">&quot;Sending &quot;</span> &lt;&lt; x &lt;&lt; <span class="stringliteral">&quot; to the Newton operator...&quot;</span> &lt;&lt; endl;
<a name="l01887"></a>01887     <a class="code" href="errorfunc_8cpp.shtml#a75c63219b8792609e96391a851a5306e">LognormalfindRoot</a>(x, fhat, rootVec);
<a name="l01888"></a>01888     cerr &lt;&lt; <span class="stringliteral">&quot;check this!&quot;</span> &lt;&lt; endl;
<a name="l01889"></a>01889     exit(1);
<a name="l01890"></a>01890   }
<a name="l01891"></a>01891   
<a name="l01892"></a>01892   <span class="keywordflow">else</span> {
<a name="l01893"></a>01893    <span class="comment">// if the function is not differentiable</span>
<a name="l01894"></a>01894   <span class="comment">//  cout &lt;&lt; &quot;------------compare fhats&quot; &lt;&lt; endl;</span>
<a name="l01895"></a>01895 <span class="comment">//    cout.precision(10);</span>
<a name="l01896"></a>01896   <span class="comment">//  cout &lt;&lt; intervalw(fhat) &lt;&lt; &quot;\t&quot; &lt;&lt; LaplaceF(x) &lt;&lt; endl;</span>
<a name="l01897"></a>01897     <span class="comment">//cout &lt;&lt; ( fhat &lt;= sup(LaplaceF(x)) ) &lt;&lt; endl;</span>
<a name="l01898"></a>01898     
<a name="l01899"></a>01899     <span class="keywordflow">if</span> ( subset(<a class="code" href="classintervalw.shtml">intervalw</a>(fhat), <a class="code" href="errorfunc_8cpp.shtml#a256e19e7647e7510144ff8e3064b07c1">LognormalF</a>(x)) ) {
<a name="l01900"></a>01900     <span class="comment">//  cout &lt;&lt; &quot;check tolerance: &quot; &lt;&lt; endl;</span>
<a name="l01901"></a>01901   <span class="comment">//    cout &lt;&lt; diam(x) &lt;&lt; &quot;\t&quot; &lt;&lt; TOL &lt;&lt; endl;</span>
<a name="l01902"></a>01902       <span class="keywordflow">if</span> ( diam(x) &lt; TOL ) {
<a name="l01903"></a>01903         <span class="comment">//cout &lt;&lt; diam(x) &lt;&lt; &quot;\t&quot; &lt;&lt; TOL &lt;&lt; endl;</span>
<a name="l01904"></a>01904         <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot; may contain roots. &quot; &lt;&lt; endl;</span>
<a name="l01905"></a>01905         rootVec.push_back(x); <span class="comment">//keep the roots in a container</span>
<a name="l01906"></a>01906       }
<a name="l01907"></a>01907       <span class="keywordflow">else</span> {
<a name="l01908"></a>01908     <span class="comment">//    cout &lt;&lt; &quot;bisect: &quot; &lt;&lt; endl;</span>
<a name="l01909"></a>01909     <span class="comment">//    cout &lt;&lt; &quot;left&quot; &lt;&lt; endl;</span>
<a name="l01910"></a>01910         <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(inf(x), mid(x)), TOL, fhat, rootVec);
<a name="l01911"></a>01911       <span class="comment">//  cout &lt;&lt; &quot;right&quot; &lt;&lt; endl;</span>
<a name="l01912"></a>01912         <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(<a class="code" href="classintervalw.shtml">intervalw</a>(mid(x), sup(x)), TOL, fhat, rootVec);
<a name="l01913"></a>01913       }
<a name="l01914"></a>01914     }
<a name="l01915"></a>01915     <span class="comment">//else { cout &lt;&lt; &quot;fhat not here. &quot; &lt;&lt; endl; }</span>
<a name="l01916"></a>01916   }
<a name="l01917"></a>01917 }
<a name="l01918"></a>01918 
<a name="l01919"></a>01919 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l01920"></a><a class="code" href="errorfunc_8cpp.shtml#a41284dca34be2cdf1f056da340d15ea1">01920</a> interval <a class="code" href="errorfunc_8cpp.shtml#a41284dca34be2cdf1f056da340d15ea1">LognormalRiemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">pfcnLaplace</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg) {
<a name="l01921"></a>01921   
<a name="l01922"></a>01922   interval Mid = interval(mid(X));
<a name="l01923"></a>01923 
<a name="l01924"></a>01924   <span class="comment">// Taylor series...</span>
<a name="l01925"></a>01925   <span class="comment">// cout &lt;&lt; &quot;taylor series:&quot; &lt;&lt; endl;</span>
<a name="l01926"></a>01926   <a class="code" href="classitaylor.shtml">itaylor</a> fx  = <a class="code" href="errorfunc_8cpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">LognormalIntegrand</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(Mid, Deg));
<a name="l01927"></a>01927   interval sum = fx[0]*(diam(X))/2;
<a name="l01928"></a>01928   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 2; k &lt;= Deg; k += 2) 
<a name="l01929"></a>01929    { sum += fx[k]*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, k + 1)/(k + 1); }
<a name="l01930"></a>01930 
<a name="l01931"></a>01931   <span class="comment">// Remainder term...</span>
<a name="l01932"></a>01932   <span class="comment">// cout &lt;&lt; &quot;remainder term: &quot; &lt;&lt; endl;</span>
<a name="l01933"></a>01933   <a class="code" href="classitaylor.shtml">itaylor</a> Fx  = <a class="code" href="errorfunc_8cpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">LognormalIntegrand</a>(<a class="code" href="classitaylor.shtml#a2c8074fdc97258d6581ce18a6d76d8d8">itaylor::variable</a>(X, Deg));
<a name="l01934"></a>01934   <span class="comment">//cout &lt;&lt; &quot;Fx: &quot; &lt;&lt; Fx &lt;&lt; endl;</span>
<a name="l01935"></a>01935   interval eps = abs(Fx[Deg] - fx[Deg]); 
<a name="l01936"></a>01936   <span class="comment">//cout &lt;&lt; &quot;eps: &quot; &lt;&lt; eps &lt;&lt; endl;</span>
<a name="l01937"></a>01937   sum += interval(-1.0*Sup(eps), Sup(eps))*<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((diam(X))/2, Deg + 1)/(Deg + 1); 
<a name="l01938"></a>01938 
<a name="l01939"></a>01939   <span class="keywordflow">return</span> 2*sum;
<a name="l01940"></a>01940 }
<a name="l01941"></a>01941 
<a name="l01942"></a><a class="code" href="errorfunc_8cpp.shtml#af9a4802a471fb3809209d48e33864b6d">01942</a> interval <a class="code" href="errorfunc_8cpp.shtml#af9a4802a471fb3809209d48e33864b6d">LognormalIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#a48908ee3bc312005f3b46888bcc0cdd3">pfcnLognormal</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol) 
<a name="l01943"></a>01943 {
<a name="l01944"></a>01944   <span class="comment">//cout &lt;&lt; &quot;-------integrating over the domain -------------&quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01945"></a>01945   <span class="comment">//cout &lt;&lt; &quot;get  riemann term of &quot; &lt;&lt; X &lt;&lt; endl;</span>
<a name="l01946"></a>01946   interval sum = <a class="code" href="errorfunc_8cpp.shtml#a41284dca34be2cdf1f056da340d15ea1">LognormalRiemannTerm</a>(f, X, Deg);
<a name="l01947"></a>01947   <span class="comment">//cout &lt;&lt; &quot;sum: &quot; &lt;&lt; sum &lt;&lt; &quot;\t diam(sum):&quot; &lt;&lt; diam(sum) &lt;&lt; &quot;\t Tol: &quot; &lt;&lt; Tol &lt;&lt;  endl;</span>
<a name="l01948"></a>01948   
<a name="l01949"></a>01949   <span class="keywordflow">if</span> ( diam(sum) &lt;= Tol ) {
<a name="l01950"></a>01950     <span class="comment">//cout &lt;&lt; &quot;Domain: &quot; &lt;&lt; X &lt;&lt; &quot;\t Sum: &quot; &lt;&lt; sum &lt;&lt; endl;</span>
<a name="l01951"></a>01951     <span class="keywordflow">return</span> sum;
<a name="l01952"></a>01952   }
<a name="l01953"></a>01953   <span class="keywordflow">else</span> {  
<a name="l01954"></a>01954     <span class="comment">//cout &lt;&lt; &quot;*****diam(sum) &gt; tol: inf(x), mid(x) + mid(x), sup(x)*****&quot; &lt;&lt; endl;</span>
<a name="l01955"></a>01955     <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#af9a4802a471fb3809209d48e33864b6d">LognormalIntegrate</a>(f, interval(Inf(X), mid(X)), Deg, Tol/2) + \
<a name="l01956"></a>01956         LognormalIntegrate(f, interval(mid(X), Sup(X)), Deg, Tol/2);
<a name="l01957"></a>01957   }
<a name="l01958"></a>01958 }
<a name="l01959"></a>01959 
<a name="l01960"></a><a class="code" href="errorfunc_8hpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">01960</a> interval <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL)
<a name="l01961"></a>01961 {
<a name="l01962"></a>01962   <span class="comment">//cout &lt;&lt; &quot;==========get L1 error for &quot; &lt;&lt; thisInt &lt;&lt;  endl;</span>
<a name="l01963"></a>01963   <span class="comment">//cout.precision(10);</span>
<a name="l01964"></a>01964   
<a name="l01965"></a>01965   <span class="comment">//hard-code this temporarily</span>
<a name="l01966"></a>01966   <span class="keywordtype">double</span> Tol = 0.0000001;
<a name="l01967"></a>01967   <span class="comment">//cout &lt;&lt; Tol &lt;&lt; endl;</span>
<a name="l01968"></a>01968   
<a name="l01969"></a>01969   <span class="comment">//get the area of the histogram at this interval</span>
<a name="l01970"></a>01970   real histArea = diam(thisInt) * fhat;
<a name="l01971"></a>01971 
<a name="l01972"></a>01972   <span class="comment">//integrate the function at this sub-interval</span>
<a name="l01973"></a>01973   interval fArea = <a class="code" href="errorfunc_8cpp.shtml#af9a4802a471fb3809209d48e33864b6d">LognormalIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">LognormalIntegrand</a>, thisInt, Deg, Tol);
<a name="l01974"></a>01974   <span class="comment">//cout &lt;&lt; &quot;integrate: &quot; &lt;&lt; fArea &lt;&lt; endl;</span>
<a name="l01975"></a>01975 
<a name="l01976"></a>01976   <span class="comment">//cout &lt;&lt; &quot;get the differences &quot; &lt;&lt; endl;</span>
<a name="l01977"></a>01977   <span class="comment">//get the differences of the areas</span>
<a name="l01978"></a>01978   <span class="comment">//double up = gsl_cdf_lognormal_P(_double(Sup(thisInt)), 0, 1);</span>
<a name="l01979"></a>01979   <span class="comment">//double low = gsl_cdf_lognormal_P(_double(Inf(thisInt)), 0, 1);</span>
<a name="l01980"></a>01980   <span class="comment">//cout &lt;&lt; &quot;gsl: &quot; &lt;&lt; up-low &lt;&lt; endl;</span>
<a name="l01981"></a>01981   interval diffArea = abs(abs(fArea) - histArea);
<a name="l01982"></a>01982   <span class="comment">//cout &lt;&lt; &quot;fArea: &quot; &lt;&lt; fArea &lt;&lt; &quot;\t&quot; &lt;&lt; diam(thisInt) &lt;&lt; </span>
<a name="l01983"></a>01983   <span class="comment">//&quot;\t fhat:&quot; &lt;&lt; fhat &lt;&lt; &quot;\t histArea: &quot; &lt;&lt; histArea &lt;&lt; endl;</span>
<a name="l01984"></a>01984   <span class="comment">//cout &lt;&lt; diffArea &lt;&lt; endl;</span>
<a name="l01985"></a>01985 
<a name="l01986"></a>01986   <span class="keywordflow">return</span> diffArea;
<a name="l01987"></a>01987 }
<a name="l01988"></a>01988 <span class="comment">//==========end of functions for lognormal==========================//</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="errorfunc_8cpp.shtml">errorfunc.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
