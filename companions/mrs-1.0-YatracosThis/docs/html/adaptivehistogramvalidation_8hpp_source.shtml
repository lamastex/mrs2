<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogramvalidation.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogramvalidation_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogramvalidation.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogramvalidation_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___ADAPTIVEHISTVAL_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___ADAPTIVEHISTVAL_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="spsvnode_8hpp.shtml">spsvnode.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="splitdecisionobj_8hpp.shtml" title="classes for determining whether to split an SPSnode.">splitdecisionobj.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="nodecompobjval_8hpp.shtml" title="Classes for comparing SPSVnodes.">nodecompobjval.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to know about the gsl random number generator</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>    <span class="comment">// we need these libraries to get the IAE for</span>
<a name="l00038"></a>00038                       <span class="comment">// finite mixtures</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">struct </span><a class="code" href="structRegHist.shtml">RegHist</a>;
<a name="l00046"></a>00046 <span class="keyword">struct </span><a class="code" href="structFinMix.shtml">FinMix</a>;
<a name="l00047"></a>00047 <span class="keyword">class </span><a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">namespace </span>subpavings {
<a name="l00050"></a>00050   
<a name="l00052"></a>00052 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00053"></a>00053 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>;
<a name="l00054"></a>00054 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a>;
<a name="l00055"></a>00055 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keyword">using namespace </span>subpavings;
<a name="l00058"></a>00058 
<a name="l00082"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml">00082</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> {
<a name="l00083"></a>00083 <span class="keyword">private</span>:
<a name="l00084"></a>00084 
<a name="l00090"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea">00090</a>     <span class="keyword">static</span> <span class="keyword">const</span> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea" title="a constant for padding a box if it is tailor-made for data.">padding</a>;
<a name="l00091"></a>00091 
<a name="l00097"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c">00097</a>     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>;
<a name="l00098"></a>00098 
<a name="l00104"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c">00104</a>     ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a>;
<a name="l00105"></a>00105 
<a name="l00110"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93">00110</a>     <a class="code" href="namespacesubpavings.shtml#aa79f33663da92502ce1a37f3fd1f3d85" title="Define type BigData Collection as a container for data.">BigDataCollection</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l00111"></a>00111 
<a name="l00115"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd">00115</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l00116"></a>00116 
<a name="l00119"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2">00119</a>     std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a>;
<a name="l00120"></a>00120 
<a name="l00124"></a>00124     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * spn, <span class="keywordtype">bool</span> as);
<a name="l00125"></a>00125 
<a name="l00150"></a>00150     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">completeDataInsertionFromVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00151"></a>00151                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00152"></a>00152                     <span class="keywordtype">size_t</span> holdOutCount, std::vector&lt;size_t&gt; &amp; numNodes);
<a name="l00153"></a>00153 
<a name="l00168"></a>00168     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7b6e78d7a069536dd096e81c6e3d8e1f" title="Checks if we need to make root paving for the histogram object.">haveMadePaving</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim);
<a name="l00169"></a>00169 
<a name="l00180"></a>00180     <span class="keyword">static</span> ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abaa0f3ffd23bccd07a2c4a4b9a60e579" title="Make a box to contain all the data.">makeBox</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim);
<a name="l00181"></a>00181 
<a name="l00204"></a>00204     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac57fa83d1ec2fc1e9cf1565c9cc07f91" title="Insert training and validation data from a container.">insertDataFromContainer</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00205"></a>00205                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00206"></a>00206                     <span class="keywordtype">size_t</span> holdOutCount, std::vector&lt;size_t&gt; &amp; numNodes);
<a name="l00207"></a>00207       
<a name="l00213"></a>00213     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;   
<a name="l00214"></a>00214    
<a name="l00243"></a>00243     <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn,
<a name="l00244"></a>00244                 <span class="keywordtype">bool</span> volChecking, <span class="keywordtype">double</span> minVol, <span class="keywordtype">size_t</span> minChildPoints);
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="keyword">public</span>:
<a name="l00247"></a>00247 
<a name="l00253"></a>00253     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation</a>();
<a name="l00254"></a>00254 
<a name="l00261"></a>00261     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation</a>  (<span class="keywordtype">bool</span> as);
<a name="l00262"></a>00262 
<a name="l00273"></a>00273     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation</a>(ivector&amp; v, <span class="keywordtype">bool</span> as = <span class="keyword">false</span>);
<a name="l00274"></a>00274 
<a name="l00277"></a>00277     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; other);
<a name="l00278"></a>00278 
<a name="l00281"></a>00281     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aba8d900d6f696824de3e6cb5bb99e794" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; rhs);
<a name="l00282"></a>00282 
<a name="l00293"></a>00293     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad3d12ca5330306b377001a4064599430" title="Overloaded addition operator.">operator+</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; rhs);
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 
<a name="l00297"></a>00297     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a26664847dd161cb938bddb579946b018" title="Destructor.">~AdaptiveHistogramValidation</a>();
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00303"></a>00303     <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>() <span class="keyword">const</span>;
<a name="l00304"></a>00304 
<a name="l00307"></a>00307     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a23a25c2169c94e019859f8efc2657c1b" title="Gets count in the rootpaving in the root paving.">getRootVcounter</a>() <span class="keyword">const</span>;
<a name="l00308"></a>00308 
<a name="l00311"></a>00311     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() <span class="keyword">const</span>;
<a name="l00312"></a>00312 
<a name="l00315"></a>00315     real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a22ac33f1952cfb6b605193cddab42bae" title="Gets the sum of leaf count over volume in root paving.">getRootSumLeafCountOverVol</a>() <span class="keyword">const</span>;
<a name="l00316"></a>00316        
<a name="l00326"></a>00326     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(<span class="keywordtype">double</span> minVolB) <span class="keyword">const</span>;
<a name="l00327"></a>00327 
<a name="l00333"></a>00333     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abfd3760f709336024357625903d9f2e9" title="get the value of holdAllStats field.">getHoldAllStats</a>() <span class="keyword">const</span>;
<a name="l00334"></a>00334 
<a name="l00341"></a>00341     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab9672c3fe9ee4ced96a1ad03ee12c1c9">getLeafLevels</a>() <span class="keyword">const</span>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 
<a name="l00351"></a>00351     std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acba6350d62c4aa8c1d9de5589c039543">getLeafLevelsString</a>() <span class="keyword">const</span>;
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 
<a name="l00358"></a>00358     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a234fc6618948f692ea2458cedb4fed8f">getLeafCounts</a>() <span class="keyword">const</span>;
<a name="l00359"></a>00359 
<a name="l00369"></a>00369     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a75453f853b530cd3e2a7afccf25e39d0" title="Append current state of histogram to a txt log file.">outputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00370"></a>00370     
<a name="l00409"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">00409</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00410"></a>00410                        std::vector&lt;size_t&gt;&amp; numNodes,
<a name="l00411"></a>00411                       <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00412"></a>00412                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)
<a name="l00413"></a>00413     {
<a name="l00414"></a>00414         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// a dummy split decision object</span>
<a name="l00415"></a>00415         <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(s, numNodes, sn, headerlines, logging);
<a name="l00416"></a>00416     }
<a name="l00417"></a>00417 
<a name="l00419"></a>00419     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00420"></a>00420                        std::vector&lt;size_t&gt;&amp; numNodes,
<a name="l00421"></a>00421                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00422"></a>00422                       <span class="keyword">const</span> std::size_t headerlines = 0,
<a name="l00423"></a>00423                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426  
<a name="l00431"></a>00431     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa0d5d92e0474bfc0574340b34268dd39">insertFromRVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00432"></a>00432                              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>); 
<a name="l00433"></a>00433                                                              
<a name="l00435"></a>00435     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, 
<a name="l00436"></a>00436                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00437"></a>00437                       <span class="keywordtype">int</span> holdOutCount,
<a name="l00438"></a>00438                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging=<a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00439"></a>00439 
<a name="l00441"></a>00441     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ace1a6eca888d6251a7e3db5d1c59bf2b">insertFromRSSampleForHoldOut</a>(<span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keywordtype">int</span> label,   
<a name="l00442"></a>00442                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00443"></a>00443                       <span class="keywordtype">int</span> holdOutCount,
<a name="l00444"></a>00444                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging);
<a name="l00445"></a>00445 
<a name="l00447"></a>00447 
<a name="l00500"></a>00500     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00501"></a>00501                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00502"></a>00502                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00503"></a>00503                   <span class="keywordtype">bool</span> stopCrit, <span class="keywordtype">int</span> distr, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00504"></a>00504                   <span class="keywordtype">size_t</span> maxLeafNodes);             
<a name="l00505"></a>00505                   
<a name="l00507"></a>00507     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00508"></a>00508                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00509"></a>00509                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, 
<a name="l00510"></a>00510                   <span class="keywordtype">bool</span> stopCrit, <span class="keywordtype">int</span> distr, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00511"></a>00511                   <span class="keywordtype">size_t</span> maxLeafNodes);
<a name="l00512"></a>00512   
<a name="l00514"></a>00514   
<a name="l00541"></a>00541     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00542"></a>00542                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00543"></a>00543                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00544"></a>00544                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00545"></a>00545                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l00546"></a>00546                   std::vector&lt;int&gt; holesLoc,
<a name="l00547"></a>00547                   <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00548"></a>00548                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00549"></a>00549                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00550"></a>00550 
<a name="l00552"></a>00552     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00553"></a>00553                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00554"></a>00554                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00555"></a>00555                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00556"></a>00556                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l00557"></a>00557                   std::vector&lt;int&gt; holesLoc,
<a name="l00558"></a>00558                   <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00559"></a>00559                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00560"></a>00560                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00561"></a>00561                   
<a name="l00562"></a>00562   <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00563"></a>00563                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00564"></a>00564                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00565"></a>00565                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00566"></a>00566                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l00567"></a>00567                   std::vector&lt;int&gt; holesLoc, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00568"></a>00568                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00569"></a>00569                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00571"></a>00571     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00572"></a>00572                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00573"></a>00573                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00574"></a>00574                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00575"></a>00575                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l00576"></a>00576                   std::vector&lt;int&gt; holesLoc, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00577"></a>00577                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, 
<a name="l00578"></a>00578                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00579"></a>00579                   
<a name="l00581"></a>00581    
<a name="l00608"></a>00608     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00609"></a>00609                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00610"></a>00610                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00611"></a>00611                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00612"></a>00612                   <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00613"></a>00613                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l00614"></a>00614                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00615"></a>00615 
<a name="l00617"></a>00617     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00618"></a>00618                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00619"></a>00619                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00620"></a>00620                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00621"></a>00621                   <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00622"></a>00622                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l00623"></a>00623                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00624"></a>00624                   
<a name="l00625"></a>00625    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00626"></a>00626                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00627"></a>00627                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00628"></a>00628                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00629"></a>00629                   <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00630"></a>00630                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l00631"></a>00631                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00633"></a>00633     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00634"></a>00634                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00635"></a>00635                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00636"></a>00636                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00637"></a>00637                   <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00638"></a>00638                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l00639"></a>00639                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; opthist);
<a name="l00641"></a>00641   
<a name="l00668"></a>00668     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00669"></a>00669                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00670"></a>00670                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00671"></a>00671                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00672"></a>00672                   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00673"></a>00673                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00674"></a>00674                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00676"></a>00676     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00677"></a>00677                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00678"></a>00678                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00679"></a>00679                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00680"></a>00680                   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00681"></a>00681                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00682"></a>00682                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00683"></a>00683                   
<a name="l00684"></a>00684    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00685"></a>00685                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00686"></a>00686                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00687"></a>00687                   <span class="keywordtype">bool</span> stopCrit, 
<a name="l00688"></a>00688                   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00689"></a>00689                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00690"></a>00690                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00692"></a>00692     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00693"></a>00693                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00694"></a>00694                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00695"></a>00695                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit,
<a name="l00696"></a>00696                   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00697"></a>00697                   <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00698"></a>00698                   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist);
<a name="l00699"></a>00699 
<a name="l00701"></a>00701   
<a name="l00730"></a>00730     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00731"></a>00731                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00732"></a>00732                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00733"></a>00733                   <span class="keywordtype">bool</span> stopCrit, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00734"></a>00734                   <span class="keywordtype">size_t</span> maxLeafNodes, <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst);
<a name="l00736"></a>00736     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00737"></a>00737                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00738"></a>00738                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00739"></a>00739                   gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, <span class="keywordtype">int</span> method, 
<a name="l00740"></a>00740                   <span class="keywordtype">size_t</span> hist, <span class="keywordtype">size_t</span> maxLeafNodes, <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst);
<a name="l00742"></a>00742     
<a name="l00743"></a>00743   
<a name="l00773"></a>00773     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a86feeca7ad74bc1c9ebc35f2ef0dd5e6">prioritySplit</a>(
<a name="l00774"></a>00774                           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest,
<a name="l00775"></a>00775                   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l00776"></a>00776                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00777"></a>00777                   <span class="keywordtype">long</span> <span class="keywordtype">double</span> tol, 
<a name="l00778"></a>00778                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">size_t</span> maxLeafNodes);
<a name="l00780"></a>00780     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a86feeca7ad74bc1c9ebc35f2ef0dd5e6">prioritySplit</a>(
<a name="l00781"></a>00781                           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, 
<a name="l00782"></a>00782                            <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, 
<a name="l00783"></a>00783                            <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l00784"></a>00784                   gsl_rng * rgsl, <span class="keywordtype">long</span> <span class="keywordtype">double</span> tol,
<a name="l00785"></a>00785                   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">size_t</span> maxLeafNodes);
<a name="l00787"></a>00787   
<a name="l00792"></a>00792     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a30cd1199dfab7883a8191e501d372613" title="Merge a multileaf histogram up to just root box.">mergeUp</a>();
<a name="l00793"></a>00793 
<a name="l00798"></a>00798     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7498bdc1663c857052e5bc147bf086f7" title="Split a histogram to a specified shape.">splitToShape</a>(std::string instruction);
<a name="l00799"></a>00799 
<a name="l00809"></a>00809     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0286278b4e489ed8809dcb60d136dce7" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>() <span class="keyword">const</span>;
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 
<a name="l00822"></a>00822     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00823"></a>00823 
<a name="l00832"></a>00832     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a78d5c3ad5e31fc438e0c4cac65e73313" title="Output details of full sample (from root) to txt tile.">outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">bool</span> confirm = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00833"></a>00833     
<a name="l00845"></a>00845   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae599e0bbb226dc0610c4ec25845533d8">getIAE</a>(<span class="keywordtype">int</span> distr);
<a name="l00846"></a>00846 
<a name="l00848"></a>00848   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a034c61becd57f5d282435f5881950035">getFinMixIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt); 
<a name="l00849"></a>00849   
<a name="l00851"></a>00851   cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg, <span class="keywordtype">bool</span> full);
<a name="l00852"></a>00852   
<a name="l00853"></a>00853   
<a name="l00854"></a>00854   
<a name="l00856"></a>00856   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">get2DIAE</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval));
<a name="l00857"></a>00857   
<a name="l00859"></a>00859   cxsc::real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, 
<a name="l00860"></a>00860                   vector&lt;int&gt; holesLoc, <span class="keywordtype">bool</span> full);
<a name="l00861"></a>00861   
<a name="l00863"></a>00863   <span class="comment">//cxsc::real getMappedFunctionIAE(RealMappedSPnode&amp; nodeEst, bool full);</span>
<a name="l00864"></a>00864 
<a name="l00866"></a>00866   
<a name="l00867"></a>00867 
<a name="l00868"></a>00868 }; <span class="comment">// end of AdaptiveHistogramValidation class declarations</span>
<a name="l00869"></a>00869 
<a name="l00870"></a>00870 } <span class="comment">// end of namespace subpavings</span>
<a name="l00871"></a>00871 
<a name="l00872"></a>00872 <span class="comment">// ----------  declarations of non-member functions ----------------------</span>
<a name="l00873"></a>00873 
<a name="l00879"></a>00879 std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">subpavings::AdaptiveHistogramValidation</a>&amp; adh);
<a name="l00880"></a>00880 
<a name="l00881"></a>00881 <span class="keywordtype">size_t</span> <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a5028384ac48cd67696b157d497c422fe">checkNumValley</a>(std::vector&lt;double&gt; vecMaxDelta, 
<a name="l00882"></a>00882               std::vector&lt;int&gt;&amp; valleyHistPos, <span class="keywordtype">bool</span>&amp; plateau, <span class="keywordtype">int</span>&amp; currentSmallest);
<a name="l00883"></a>00883               
<a name="l00884"></a>00884 <span class="keywordtype">void</span> <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#accbf75aa99bc63d1c10e85e3f3f24f3c">getCurrentYatClass</a>(std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; vecRowYatSet,
<a name="l00885"></a>00885 std::vector&lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; vecColYatSet, 
<a name="l00886"></a>00886 std::list &lt; std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, std::less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; listYatSet);
<a name="l00887"></a>00887 
<a name="l00889"></a>00889   cxsc::interval <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg, 
<a name="l00890"></a>00890     std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet);
<a name="l00891"></a>00891 
<a name="l00892"></a>00892 
<a name="l00894"></a>00894   cxsc::real <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, vector&lt;int&gt; holesLoc, 
<a name="l00895"></a>00895     std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet);
<a name="l00896"></a>00896 
<a name="l00898"></a>00898   cxsc::real <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a49d507fa0b75a7ad720204f0f581af6d">getMappedFunctionTrueDelta</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEstHist, 
<a name="l00899"></a>00899         std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet);
<a name="l00900"></a>00900 
<a name="l00901"></a>00901 
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 <span class="preprocessor">#endif</span>
<a name="l00904"></a>00904 <span class="preprocessor"></span>
<a name="l00905"></a>00905 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogramvalidation_8hpp.shtml">adaptivehistogramvalidation.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:10 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
