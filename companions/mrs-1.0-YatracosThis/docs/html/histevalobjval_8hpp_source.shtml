<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: histevalobjval.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('histevalobjval_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">histevalobjval.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="histevalobjval_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef ___HISTEVALOBJVAL_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define ___HISTEVALOBJVAL_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="keyword">namespace </span>subpavings {
<a name="l00030"></a>00030 
<a name="l00032"></a>00032 <span class="keyword">class </span>AdaptiveHistogramValidation;
<a name="l00033"></a>00033 
<a name="l00036"></a><a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml">00036</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a> {
<a name="l00037"></a>00037 
<a name="l00038"></a>00038     <span class="keyword">public</span>:
<a name="l00039"></a>00039 
<a name="l00041"></a>00041     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml#a8a2e88be92ac0dff1ce9de2250ec34bd">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh) <span class="keyword">const</span> = 0;
<a name="l00042"></a>00042 };
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00056"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml">00056</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00057"></a>00057 {
<a name="l00058"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a13c42d36731adfa02041fa1a62812ed4">00058</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a13c42d36731adfa02041fa1a62812ed4">test</a>;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060     <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a1d532ecb400345956848b55954a747e3">CritLeaves_GTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062     <span class="keyword">public</span>:
<a name="l00063"></a>00063 
<a name="l00064"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#af476aff8ed1cba5642698b9b7510e9bc">00064</a>     <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#af476aff8ed1cba5642698b9b7510e9bc">CritLeaves_GTEV</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a13c42d36731adfa02041fa1a62812ed4">test</a>(t) {}
<a name="l00065"></a>00065 
<a name="l00067"></a>00067     <span class="keywordtype">bool</span> <span class="keyword">operator</span>()
<a name="l00068"></a><a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a89c436b8604c88d2b49e97b6015039bf">00068</a>         (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh) <span class="keyword">const</span>
<a name="l00069"></a>00069     {
<a name="l00070"></a>00070         <span class="keywordflow">return</span> (<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()) &gt;= <a class="code" href="classsubpavings_1_1CritLeaves__GTEV.shtml#a13c42d36731adfa02041fa1a62812ed4">test</a>);
<a name="l00071"></a>00071     }
<a name="l00072"></a>00072 };
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00077"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml">00077</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00078"></a>00078 {
<a name="l00079"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#aa89f9c6b90f4472cd45dbb21f9658152">00079</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#aa89f9c6b90f4472cd45dbb21f9658152">test</a>;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#a7487eb532d0eec38777cd97e8ed91327">CritLeaves_LTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keyword">public</span>:
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#a9d5c9272d5b73caee48f245fcc6889e5">00085</a>     <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#a9d5c9272d5b73caee48f245fcc6889e5">CritLeaves_LTEV</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#aa89f9c6b90f4472cd45dbb21f9658152">test</a>(t) {}
<a name="l00086"></a>00086 
<a name="l00088"></a><a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#af02abe8af576a43ccd40e44cc55fcf1e">00088</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#af02abe8af576a43ccd40e44cc55fcf1e">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00089"></a>00089 <span class="keyword">    </span>{
<a name="l00090"></a>00090         <span class="keywordflow">return</span> (<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()) &lt;= <a class="code" href="classsubpavings_1_1CritLeaves__LTEV.shtml#aa89f9c6b90f4472cd45dbb21f9658152">test</a>);
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092 };
<a name="l00093"></a>00093 
<a name="l00097"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml">00097</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml" title="Class for testing the count of the node with the smallest count in histogram&#39;s subpaving.">CritSmallestCount_LTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00098"></a>00098 {
<a name="l00099"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#aee3cca6ae148635a8377362170ca8d91">00099</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#aee3cca6ae148635a8377362170ca8d91">test</a>;
<a name="l00100"></a>00100 
<a name="l00101"></a>00101     <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#a0bf335ff5c4d2adb259b2300f9c8653c">CritSmallestCount_LTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00102"></a>00102 
<a name="l00103"></a>00103     <span class="keyword">public</span>:
<a name="l00104"></a>00104 
<a name="l00105"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#a0c2e26830ed18e8be3fe992a33fd3857">00105</a>     <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#a0c2e26830ed18e8be3fe992a33fd3857">CritSmallestCount_LTEV</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#aee3cca6ae148635a8377362170ca8d91">test</a>(t) {}
<a name="l00106"></a>00106 
<a name="l00108"></a><a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#a7ed9d4d8c01c6de7f57113fbc6483401">00108</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#a7ed9d4d8c01c6de7f57113fbc6483401">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00109"></a>00109 <span class="keyword">    </span>{
<a name="l00110"></a>00110         <span class="keywordflow">return</span> (((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>())-&gt;getSmallestLeafCount()) &lt;= <a class="code" href="classsubpavings_1_1CritSmallestCount__LTEV.shtml#aee3cca6ae148635a8377362170ca8d91">test</a>);
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 };
<a name="l00114"></a>00114 
<a name="l00118"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml">00118</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00119"></a>00119 {
<a name="l00120"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a49fe3740ffe286d9295c935d8f1f902d">00120</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a49fe3740ffe286d9295c935d8f1f902d">test</a>;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a223a25dec185b862eefc974e456d0dbb">CritLargestCount_LTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="keyword">public</span>:
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#aaa171b921a6dfe57f88ec2a8140eed9c">00126</a>     <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#aaa171b921a6dfe57f88ec2a8140eed9c">CritLargestCount_LTEV</a>(<span class="keywordtype">size_t</span> t) : <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a49fe3740ffe286d9295c935d8f1f902d">test</a>(t) {}
<a name="l00127"></a>00127 
<a name="l00129"></a><a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a91c526ecfba7c9463ac6a45df852f8dd">00129</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a91c526ecfba7c9463ac6a45df852f8dd">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00130"></a>00130 <span class="keyword">    </span>{
<a name="l00131"></a>00131         <span class="keywordflow">return</span> (((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>())-&gt;getLargestLeafCount()) &lt;= <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml#a49fe3740ffe286d9295c935d8f1f902d">test</a>);
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133 };
<a name="l00134"></a>00134 
<a name="l00138"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml">00138</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml" title="Class for testing the volume of the box with the smallest volume in the histogram&#39;s subpaving...">CritSmallestVol_LTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00139"></a>00139 {
<a name="l00140"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#ab806e08cdf3e5c0b4e6411df0d76db3c">00140</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#ab806e08cdf3e5c0b4e6411df0d76db3c">test</a>;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#a2a61ec982685893c7c20355c8270d92d">CritSmallestVol_LTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keyword">public</span>:
<a name="l00145"></a>00145 
<a name="l00146"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#aaf21b36c466714a020f6e5cd60b4b745">00146</a>     <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#aaf21b36c466714a020f6e5cd60b4b745">CritSmallestVol_LTEV</a>(<span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#ab806e08cdf3e5c0b4e6411df0d76db3c">test</a>(t) {}
<a name="l00147"></a>00147 
<a name="l00149"></a><a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#a333d65dbd5d82b81df266cb1d2372acd">00149</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#a333d65dbd5d82b81df266cb1d2372acd">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00150"></a>00150 <span class="keyword">    </span>{
<a name="l00151"></a>00151         <span class="keywordflow">return</span> ((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>())-&gt;getSmallestLeafVol() &lt;= <a class="code" href="classsubpavings_1_1CritSmallestVol__LTEV.shtml#ab806e08cdf3e5c0b4e6411df0d76db3c">test</a>);
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153 };
<a name="l00154"></a>00154 
<a name="l00158"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml">00158</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml" title="Class for testing the volume of the box with the largest volume in the histogram&#39;s subpaving...">CritLargestVol_LTEV</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00159"></a>00159 {
<a name="l00160"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af79b24be539ff92de434c87babebd81d">00160</a>     <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af79b24be539ff92de434c87babebd81d">test</a>;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162     <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#a8a9647f0583062c965fbe6aefe13eaa2">CritLargestVol_LTEV</a>(); <span class="comment">// private default constructor</span>
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="keyword">public</span>:
<a name="l00165"></a>00165 
<a name="l00166"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#aa3f0985b901e415aee337e1bd232e395">00166</a>     <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#aa3f0985b901e415aee337e1bd232e395">CritLargestVol_LTEV</a>(<span class="keywordtype">double</span> t) : <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af79b24be539ff92de434c87babebd81d">test</a>(t) {}
<a name="l00167"></a>00167 
<a name="l00169"></a><a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af596395bc98265787a542d4a4c3862e0">00169</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af596395bc98265787a542d4a4c3862e0">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00170"></a>00170 <span class="keyword">    </span>{
<a name="l00171"></a>00171         <span class="keywordflow">return</span> ((adh-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>())-&gt;getLargestLeafVol() &lt;= <a class="code" href="classsubpavings_1_1CritLargestVol__LTEV.shtml#af79b24be539ff92de434c87babebd81d">test</a>);
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173 };
<a name="l00174"></a>00174 
<a name="l00177"></a><a class="code" href="classsubpavings_1_1CritStopAllV.shtml">00177</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CritStopAllV.shtml" title="Class to bale out of priority queue splitting.">CritStopAllV</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179     <span class="keyword">public</span>:
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="comment">// use default constructor</span>
<a name="l00182"></a>00182 
<a name="l00184"></a><a class="code" href="classsubpavings_1_1CritStopAllV.shtml#ab18d1db7cca80d5700780bece7719c57">00184</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CritStopAllV.shtml#ab18d1db7cca80d5700780bece7719c57">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> * <span class="keyword">const</span> adh)<span class="keyword"> const</span>
<a name="l00185"></a>00185 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l00186"></a>00186 };
<a name="l00187"></a>00187 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 } <span class="comment">// end of namespace subpavings</span>
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="preprocessor">#endif</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>
<a name="l00194"></a>00194 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="histevalobjval_8hpp.shtml">histevalobjval.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
