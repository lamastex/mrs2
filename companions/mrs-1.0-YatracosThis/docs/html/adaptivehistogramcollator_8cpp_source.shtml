<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogramcollator.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogramcollator_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogramcollator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogramcollator_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramcollator_8hpp.shtml" title="AdaptiveHistogramCollator declarations.">adaptivehistogramcollator.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>   <span class="comment">// to use the C++ string class</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;set&gt;</span>      <span class="comment">// to use the stl::multiset container</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;list&gt;</span>     <span class="comment">// to use stl:: lists</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;exception&gt;</span> <span class="comment">// use exceptions</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// use functionals</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to use the gsl random number generator</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;math.h&gt;</span> <span class="comment">// math library</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">//to use subpavings</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="spalgorithms_8hpp.shtml" title="SPnode (SubPaving) algorithm function declarations.">spalgorithms.hpp</a>&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment">// to use stats subpavings</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span> <span class="comment">// includes spnode.hpp includes sptypes.hpp</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="collatorspnode_8hpp.shtml" title="CollatorSPnode declarations.">collatorspnode.hpp</a>&quot;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">// to use histogram penalty function objects</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="histpenalty_8hpp.shtml" title="Declaration of classes for histogram penalty objects declarations.">histpenalty.hpp</a>&quot;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">using namespace </span>subpavings;
<a name="l00063"></a>00063 <span class="keyword">using namespace </span>std;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">// ---------- implementation of AdaptiveHistogramCollator class -------------</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">// ----------------private methods</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">// initialised constructor, initialised with a subpaving pointer</span>
<a name="l00071"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">00071</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6" title="Default constructor.">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> * spn)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073     <span class="keywordflow">if</span> (NULL == spn) {
<a name="l00074"></a>00074         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Null CollatorSPnode pointer in constructor&quot;</span>);
<a name="l00075"></a>00075     }
<a name="l00076"></a>00076     rootCollator = spn;
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 <span class="comment">// Make a collated histogram from a container of rvectors</span>
<a name="l00080"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6">00080</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6" title="Private method for making a collation histogram from RVecData.">AdaptiveHistogramCollator::collateFromRVec</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00081"></a>00081                 <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> rv, ivector pavingBox,
<a name="l00082"></a>00082                 <span class="keywordtype">int</span> indImmedSplit, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00083"></a>00083                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l00084"></a>00084                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB)
<a name="l00085"></a>00085 {
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00088"></a>00088     gsl_rng * rgsl = NULL;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordflow">try</span> {
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         <span class="keywordtype">size_t</span> countIn = 0; <span class="comment">// track the number of histograms made and added</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         <span class="comment">// set up a random number sampler</span>
<a name="l00095"></a>00095         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00098"></a>00098         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00099"></a>00099         gsl_rng_env_setup();
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00102"></a>00102         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         std::string fileName; <span class="comment">// a name for the files to use</span>
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="comment">// for loop to generate histograms and add to collation</span>
<a name="l00108"></a>00108         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=1; j&lt;=numberSamples; j++) {
<a name="l00109"></a>00109 
<a name="l00110"></a>00110             <span class="keywordtype">bool</span> successfulInsertion; <span class="comment">// recognise successes</span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112             <span class="comment">// make an Adaptive Histogram object with a specified box</span>
<a name="l00113"></a>00113             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115             <span class="keywordflow">if</span> (indImmedSplit == 1) { <span class="comment">// doing immediate splitting</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117                 successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize,
<a name="l00118"></a>00118                     rgsl, rv, boolTest);
<a name="l00119"></a>00119             }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121             <span class="keywordflow">if</span> (indImmedSplit == 0) { <span class="comment">// doing priority queue splitting</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123                 successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize,
<a name="l00124"></a>00124                     rgsl, rv);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126                 <span class="keywordtype">bool</span> successfulPQSplit;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128                 <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00129"></a>00129 
<a name="l00130"></a>00130                     successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compTest, he,
<a name="l00131"></a>00131                                                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minChildPoints, minVolB);
<a name="l00132"></a>00132                 }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134                 successfulInsertion = successfulInsertion &amp;&amp; successfulPQSplit;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136             }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138             <span class="comment">// only do more if some data was fed in</span>
<a name="l00139"></a>00139             <span class="keywordflow">if</span>(successfulInsertion) {
<a name="l00140"></a>00140 
<a name="l00141"></a>00141                 <span class="comment">// create a name for the file to output</span>
<a name="l00142"></a>00142                 fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00143"></a>00143                 <span class="comment">//convert j to a string</span>
<a name="l00144"></a>00144                 std::ostringstream stm2;
<a name="l00145"></a>00145                 stm2 &lt;&lt; j;
<a name="l00146"></a>00146                 <span class="comment">// add the stringed j to the filename</span>
<a name="l00147"></a>00147                 fileName += stm2.str();
<a name="l00148"></a>00148                 fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 
<a name="l00151"></a>00151                 <span class="comment">// To realize a file output</span>
<a name="l00152"></a>00152                 myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154                 <span class="comment">// add the histogram to the collection represented by this</span>
<a name="l00155"></a>00155                 addToCollation(myHist);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157                 countIn++; <span class="comment">// increment the counter</span>
<a name="l00158"></a>00158             }
<a name="l00159"></a>00159         } <span class="comment">// end of for loop creating histograms</span>
<a name="l00160"></a>00160 
<a name="l00161"></a>00161         <span class="keywordflow">if</span> (countIn == numberSamples) {
<a name="l00162"></a>00162 
<a name="l00163"></a>00163             retValue = <span class="keyword">true</span>;
<a name="l00164"></a>00164         }
<a name="l00165"></a>00165         <span class="keywordflow">else</span> { <span class="comment">// did not add required number of histograms</span>
<a name="l00166"></a>00166             std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem in collateFromRVec(): check &quot;</span>
<a name="l00167"></a>00167                     &lt;&lt; <span class="stringliteral">&quot;console for error reports &quot;</span> &lt;&lt; std::endl;
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169         <span class="comment">// free the random number generator</span>
<a name="l00170"></a>00170         gsl_rng_free (rgsl);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173     <span class="keywordflow">catch</span> (exception&amp;) {
<a name="l00174"></a>00174         <span class="keywordflow">if</span> (NULL != rgsl) <span class="comment">// free the random number generator</span>
<a name="l00175"></a>00175             gsl_rng_free (rgsl);
<a name="l00176"></a>00176         <span class="keywordflow">throw</span>;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     <span class="keywordflow">return</span> retValue;
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">// Make a collated histogram from an RSSample</span>
<a name="l00184"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa">00184</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa" title="Private method for making a collation histogram from RSSample.">AdaptiveHistogramCollator::collateFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00185"></a>00185                 <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rss, ivector pavingBox,
<a name="l00186"></a>00186                 <span class="keywordtype">int</span> indImmedSplit, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00187"></a>00187                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l00188"></a>00188                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, <span class="keywordtype">int</span> label)
<a name="l00189"></a>00189 {
<a name="l00190"></a>00190     <span class="comment">// container to put the rvectors into</span>
<a name="l00191"></a>00191     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> allData;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <span class="comment">//get the container of rvectors</span>
<a name="l00194"></a>00194     <span class="comment">//use getRvectorsFromRSSample to put rvectors from labeled points in</span>
<a name="l00195"></a>00195     <span class="comment">// rss.Samples into allData where the labeled point label matches label</span>
<a name="l00196"></a>00196     <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#ad435f1951db3078702d178b718018651" title="Get all rvectors from an RSSample object.">getRvectorsFromRSSample</a>(allData, rss, label);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198     <span class="keywordtype">bool</span> cancontinue = (numberFound &gt; 0);
<a name="l00199"></a>00199     <span class="comment">// cancontinue will be false if there was a problem getting data points</span>
<a name="l00200"></a>00200     <span class="comment">// if cancontinue is true data should contain at least some data points</span>
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="keywordflow">if</span> (cancontinue) {
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         <span class="comment">// use the RVec method to complete the process of histogram</span>
<a name="l00207"></a>00207         <span class="comment">// creation and averaging</span>
<a name="l00208"></a>00208         retValue = collateFromRVec(samplesize, numberSamples, allData,
<a name="l00209"></a>00209                                 pavingBox, indImmedSplit, boolTest,
<a name="l00210"></a>00210                                 compTest, he, minChildPoints, minVolB);
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="keywordflow">return</span> retValue;
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="comment">// Method to add current state of the histogram collator to a log file</span>
<a name="l00217"></a>00217 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l00218"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aad6e5e6bd009ca64209c471c55a8d43e">00218</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aad6e5e6bd009ca64209c471c55a8d43e" title="Add current state of collation to a log file.">AdaptiveHistogramCollator::outputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l00219"></a>00219 <span class="keyword"></span>{
<a name="l00220"></a>00220     <span class="comment">// To add output of the AdaptiveHistogramCollator object to file</span>
<a name="l00221"></a>00221     ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
<a name="l00222"></a>00222     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00223"></a>00223         os &lt;&lt; std::endl;
<a name="l00224"></a>00224         os &lt;&lt; <span class="stringliteral">&quot;Pass &quot;</span> &lt;&lt; i &lt;&lt; std::endl; <span class="comment">// numbering</span>
<a name="l00225"></a>00225         getSubPaving()-&gt;leavesOutputTabs(os); <span class="comment">// the output</span>
<a name="l00226"></a>00226         os.close();
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228     <span class="keywordflow">else</span> {
<a name="l00229"></a>00229         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00230"></a>00230             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00231"></a>00231     }
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="comment">// --------------- end private methods</span>
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 <span class="comment">// ---------------- public methods</span>
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="comment">// default constructor</span>
<a name="l00240"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6">00240</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6" title="Default constructor.">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a>()
<a name="l00241"></a>00241 {
<a name="l00242"></a>00242     <span class="keywordflow">try</span> {
<a name="l00243"></a>00243         rootCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>();
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00246"></a>00246         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00247"></a>00247         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00248"></a>00248                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00249"></a>00249         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="comment">// initialised constructor, initialised with an AdaptiveHistogram object</span>
<a name="l00256"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a51aba61f8db338d32c2fa5a4de9648f6">00256</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6" title="Default constructor.">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a>(<span class="keyword">const</span>
<a name="l00257"></a>00257     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh)
<a name="l00258"></a>00258 {
<a name="l00259"></a>00259     <span class="keywordflow">try</span> {
<a name="l00260"></a>00260         rootCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
<a name="l00261"></a>00261     }
<a name="l00262"></a>00262     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00263"></a>00263         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00264"></a>00264         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00265"></a>00265                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00266"></a>00266         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268 }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 <span class="comment">// copy constructor</span>
<a name="l00272"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aca2fcef56fc73925701375fa0e551d8b">00272</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6" title="Default constructor.">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a>(
<a name="l00273"></a>00273                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; other)
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275     <span class="keywordflow">try</span> {
<a name="l00276"></a>00276         rootCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>));
<a name="l00277"></a>00277     }
<a name="l00278"></a>00278     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00279"></a>00279         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00280"></a>00280         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00281"></a>00281                                             &lt;&lt; msg &lt;&lt; std:: endl;
<a name="l00282"></a>00282         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l00283"></a>00283     }
<a name="l00284"></a>00284     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00285"></a>00285         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00286"></a>00286         std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00287"></a>00287                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00288"></a>00288         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00291"></a>00291         <span class="keywordtype">string</span> msg(e.what());
<a name="l00292"></a>00292         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00293"></a>00293                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00294"></a>00294         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 <span class="comment">// assignment operator</span>
<a name="l00299"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a812e5e60dd3d233274738d823c9010b2">00299</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a812e5e60dd3d233274738d823c9010b2" title="Copy assignment operator.">AdaptiveHistogramCollator::operator=</a>(<span class="keyword">const</span>
<a name="l00300"></a>00300     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; rhs)
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302     <span class="keywordflow">try</span> {
<a name="l00303"></a>00303 
<a name="l00304"></a>00304         <span class="comment">// we have to make sure we delete the current paving</span>
<a name="l00305"></a>00305         <span class="keywordflow">if</span> (NULL != rootCollator) {
<a name="l00306"></a>00306             <span class="keyword">delete</span> rootCollator;
<a name="l00307"></a>00307             rootCollator = NULL;
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310         <span class="keywordflow">if</span> (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>)
<a name="l00311"></a>00311             rootCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>));
<a name="l00312"></a>00312     }
<a name="l00313"></a>00313     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00314"></a>00314         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00315"></a>00315         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in assignment: original error &quot;</span>
<a name="l00316"></a>00316                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00317"></a>00317         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00318"></a>00318     }
<a name="l00319"></a>00319     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00320"></a>00320         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00321"></a>00321         std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in assignment: original error &quot;</span>
<a name="l00322"></a>00322                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00323"></a>00323         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in assignment: &quot;</span> + msg);
<a name="l00324"></a>00324     }
<a name="l00325"></a>00325     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00326"></a>00326         <span class="keywordtype">string</span> msg(e.what());
<a name="l00327"></a>00327         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in assignment: original error &quot;</span>
<a name="l00328"></a>00328                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00329"></a>00329         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in assignment: &quot;</span> + msg);
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 <span class="comment">// Destructor.</span>
<a name="l00336"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a487740c9ae8d812861ff7847718924ff">00336</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a487740c9ae8d812861ff7847718924ff" title="Destructor.">AdaptiveHistogramCollator::~AdaptiveHistogramCollator</a>()
<a name="l00337"></a>00337 { <span class="keyword">delete</span> rootCollator; }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="comment">// addition operator</span>
<a name="l00340"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a25deb4940f2a4df6ea84ad6ffe5090d3">00340</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">AdaptiveHistogramCollator::operator+</a>(<span class="keyword">const</span>
<a name="l00341"></a>00341     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; rhs)<span class="keyword"> const</span>
<a name="l00342"></a>00342 <span class="keyword"></span>{
<a name="l00343"></a>00343     <span class="keywordflow">if</span> ((NULL != rootCollator) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp;
<a name="l00344"></a>00344     ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rootCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l00345"></a>00345     || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rootCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
<a name="l00346"></a>00346         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Added histogram collators have unequal dimensions&quot;</span>);
<a name="l00347"></a>00347 
<a name="l00348"></a>00348     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newnode = NULL;
<a name="l00349"></a>00349 
<a name="l00350"></a>00350     <span class="keywordflow">try</span> {
<a name="l00351"></a>00351 
<a name="l00352"></a>00352         newnode =
<a name="l00353"></a>00353             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437" title="Add two collator subpavings together.">CollatorSPnode::addPavings</a>(rootCollator, rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>);
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00356"></a>00356         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00357"></a>00357         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addition: original error &quot;</span>
<a name="l00358"></a>00358                                     &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00359"></a>00359         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in addition: &quot;</span> + msg);
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00362"></a>00362         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00363"></a>00363         std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in addition: original error &quot;</span>
<a name="l00364"></a>00364                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00365"></a>00365         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in addition: &quot;</span> + msg);
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00368"></a>00368         <span class="keywordtype">string</span> msg(e.what());
<a name="l00369"></a>00369         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in addition: original error &quot;</span>
<a name="l00370"></a>00370                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00371"></a>00371         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in addition: &quot;</span> + msg);
<a name="l00372"></a>00372     }
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 
<a name="l00375"></a>00375     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollatorHist(newnode);
<a name="l00376"></a>00376 
<a name="l00377"></a>00377     <span class="keywordflow">return</span> newCollatorHist;
<a name="l00378"></a>00378 }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 <span class="comment">// increment addition operator</span>
<a name="l00381"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ab1c2f300d93647faa0ca12e52b6405f0">00381</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ab1c2f300d93647faa0ca12e52b6405f0">AdaptiveHistogramCollator::operator+=</a>(<span class="keyword">const</span>
<a name="l00382"></a>00382     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; rhs)
<a name="l00383"></a>00383 {
<a name="l00384"></a>00384     <span class="keywordflow">try</span> {
<a name="l00385"></a>00385         <span class="comment">// get the subpaving out of rhs to form a new CollatorSPnode</span>
<a name="l00386"></a>00386         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toAdd(*rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>());
<a name="l00387"></a>00387         <span class="comment">// add the new CollatorSPnode into the collation</span>
<a name="l00388"></a>00388         <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
<a name="l00389"></a>00389         <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>
<a name="l00390"></a>00390         rootCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(&amp;toAdd);
<a name="l00391"></a>00391     }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 
<a name="l00394"></a>00394     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00395"></a>00395         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00396"></a>00396         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
<a name="l00397"></a>00397                                             + oldmsg;
<a name="l00398"></a>00398         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00399"></a>00399     }
<a name="l00400"></a>00400     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00401"></a>00401         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00402"></a>00402         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00403"></a>00403         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00404"></a>00404     }
<a name="l00405"></a>00405     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00406"></a>00406         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00407"></a>00407         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00408"></a>00408         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00411"></a>00411         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00412"></a>00412         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00413"></a>00413         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00414"></a>00414     }
<a name="l00415"></a>00415     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 <span class="comment">// subtraction operator</span>
<a name="l00422"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa7ed65f2fced9b8e9e727876e84661c5">00422</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">AdaptiveHistogramCollator::operator-</a>(<span class="keyword">const</span>
<a name="l00423"></a>00423     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; rhs)<span class="keyword"> const</span>
<a name="l00424"></a>00424 <span class="keyword"></span>{
<a name="l00425"></a>00425     <span class="keywordflow">if</span> ((NULL != rootCollator) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp;
<a name="l00426"></a>00426     ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rootCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l00427"></a>00427     || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rootCollator-&gt;getBox()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
<a name="l00428"></a>00428         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Histogram collators have unequal dimensions&quot;</span>);
<a name="l00429"></a>00429 
<a name="l00430"></a>00430     <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newnode = NULL;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432     <span class="keywordflow">try</span> {
<a name="l00433"></a>00433 
<a name="l00434"></a>00434         <span class="keywordtype">double</span> c = -1.0;
<a name="l00435"></a>00435         newnode =
<a name="l00436"></a>00436             <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a79e263c5e6b22baeb2f4e543f33f6d5e" title="Subtract one collator subpavings from another together.">CollatorSPnode::subtractPavings</a>(rootCollator, rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>, c);
<a name="l00437"></a>00437     }
<a name="l00438"></a>00438     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00439"></a>00439         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00440"></a>00440         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in subtraction: original error &quot;</span>
<a name="l00441"></a>00441                                     &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00442"></a>00442         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in subtraction: &quot;</span> + msg);
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00445"></a>00445         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00446"></a>00446         std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in subtraction: original error &quot;</span>
<a name="l00447"></a>00447                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00448"></a>00448         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in subtraction: &quot;</span> + msg);
<a name="l00449"></a>00449     }
<a name="l00450"></a>00450     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00451"></a>00451         <span class="keywordtype">string</span> msg(e.what());
<a name="l00452"></a>00452         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in subtraction: original error &quot;</span>
<a name="l00453"></a>00453                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00454"></a>00454         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in subtraction: &quot;</span> + msg);
<a name="l00455"></a>00455     }
<a name="l00456"></a>00456 
<a name="l00457"></a>00457 
<a name="l00458"></a>00458     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollatorHist(newnode);
<a name="l00459"></a>00459 
<a name="l00460"></a>00460     <span class="keywordflow">return</span> newCollatorHist;
<a name="l00461"></a>00461 }
<a name="l00462"></a>00462 
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 <span class="comment">// Return a pointer to the CollatorPSnode this manages</span>
<a name="l00465"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294">00465</a> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">AdaptiveHistogramCollator::getSubPaving</a>()<span class="keyword"> const</span>
<a name="l00466"></a>00466 <span class="keyword"></span>{<span class="keywordflow">return</span> rootCollator;} <span class="comment">// boost::shared_ptr might be better</span>
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="comment">// averaging method</span>
<a name="l00470"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">00470</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">AdaptiveHistogramCollator::makeAverage</a>()<span class="keyword"> const</span>
<a name="l00471"></a>00471 <span class="keyword"></span>{
<a name="l00472"></a>00472     <span class="keywordflow">if</span> (NULL == rootCollator) {
<a name="l00473"></a>00473             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: rootCollator is NULL&quot;</span>;
<a name="l00474"></a>00474             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00475"></a>00475     }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477     <span class="comment">//average only makes sense if all values in the summary are positive</span>
<a name="l00478"></a>00478     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = rootCollator-&gt;getSummary();
<a name="l00479"></a>00479 
<a name="l00480"></a>00480     <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
<a name="l00481"></a>00481                     bind2nd(less&lt;double&gt;(), 0.0));
<a name="l00482"></a>00482     <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l00483"></a>00483             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
<a name="l00484"></a>00484             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00485"></a>00485     }
<a name="l00486"></a>00486 
<a name="l00487"></a>00487     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollator;
<a name="l00488"></a>00488     <span class="keywordflow">try</span> {
<a name="l00489"></a>00489         newCollator.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = (getSubPaving())-&gt;makeAverageCollation();
<a name="l00490"></a>00490     }
<a name="l00491"></a>00491     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00492"></a>00492         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00493"></a>00493         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory making average.  Orginal error: &quot;</span>
<a name="l00494"></a>00494                                             + oldmsg;
<a name="l00495"></a>00495         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00496"></a>00496     }
<a name="l00497"></a>00497     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00498"></a>00498         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00499"></a>00499         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00500"></a>00500         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00501"></a>00501     }
<a name="l00502"></a>00502     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00503"></a>00503         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00504"></a>00504         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00505"></a>00505         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00506"></a>00506     }
<a name="l00507"></a>00507     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00508"></a>00508         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00509"></a>00509         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error making average.  Orginal error: &quot;</span> + oldmsg;
<a name="l00510"></a>00510         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00511"></a>00511     }
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 
<a name="l00514"></a>00514     <span class="keywordflow">return</span> newCollator;
<a name="l00515"></a>00515 }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 
<a name="l00518"></a>00518 
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">// Add an AdaptiveHistogram into the collation</span>
<a name="l00521"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486">00521</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">AdaptiveHistogramCollator::addToCollation</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh)
<a name="l00522"></a>00522 {
<a name="l00523"></a>00523     <span class="keywordflow">try</span> {
<a name="l00524"></a>00524         <span class="comment">// get the subpaving out of adh to form a new CollatorSPnode</span>
<a name="l00525"></a>00525         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toAdd(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
<a name="l00526"></a>00526         <span class="comment">// add the new CollatorSPnode into the collation</span>
<a name="l00527"></a>00527         <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
<a name="l00528"></a>00528         <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>
<a name="l00529"></a>00529 
<a name="l00530"></a>00530         <span class="comment">//rootCollator-&gt;addPaving(&amp;toAdd);</span>
<a name="l00531"></a>00531 
<a name="l00532"></a>00532         <span class="keywordtype">bool</span> successfullyAdded = rootCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(&amp;toAdd);
<a name="l00533"></a>00533         <span class="keywordflow">if</span> (!successfullyAdded) { <span class="comment">// addition returned false</span>
<a name="l00534"></a>00534             std::cout &lt;&lt; <span class="stringliteral">&quot;Nothing added - check console output &quot;</span>
<a name="l00535"></a>00535                 &lt;&lt; <span class="stringliteral">&quot;for error messages&quot;</span> &lt;&lt; std::endl;
<a name="l00536"></a>00536         }
<a name="l00537"></a>00537     }
<a name="l00538"></a>00538     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00539"></a>00539         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00540"></a>00540         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
<a name="l00541"></a>00541                                             + oldmsg;
<a name="l00542"></a>00542         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00543"></a>00543     }
<a name="l00544"></a>00544     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00545"></a>00545         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00546"></a>00546         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00547"></a>00547         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00548"></a>00548     }
<a name="l00549"></a>00549     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00550"></a>00550         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00551"></a>00551         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00552"></a>00552         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00553"></a>00553     }
<a name="l00554"></a>00554     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00555"></a>00555         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00556"></a>00556         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
<a name="l00557"></a>00557         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00558"></a>00558     }
<a name="l00559"></a>00559 }
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 <span class="comment">// Add the negation of an AdaptiveHistogram into the collation</span>
<a name="l00564"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa6e9f2b8750f087a86ac72fe6e1487a9">00564</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa6e9f2b8750f087a86ac72fe6e1487a9" title="Add the negation of an AdaptiveHistogram object to data collation.">AdaptiveHistogramCollator::addNegationToCollation</a>(
<a name="l00565"></a>00565                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh, <span class="keywordtype">double</span> c)
<a name="l00566"></a>00566 {
<a name="l00567"></a>00567     <span class="keywordflow">try</span> {
<a name="l00568"></a>00568         <span class="comment">// make the AdaptiveHistogram into a new CollatorSPnode</span>
<a name="l00569"></a>00569         <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toNeg(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
<a name="l00570"></a>00570        <span class="comment">// put the negation of the new CollatorSPnode into the collation</span>
<a name="l00571"></a>00571        <span class="comment">// note that addNegatedPaving will alter toNeg, but that is okay because</span>
<a name="l00572"></a>00572        <span class="comment">// toNeg is a temporary object created and deleted in this procedure</span>
<a name="l00573"></a>00573         rootCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4" title="Incorporate negation of a Collator subpaving to this summmary.">addNegatedPaving</a>(&amp;toNeg, c);
<a name="l00574"></a>00574     }
<a name="l00575"></a>00575     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00576"></a>00576         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00577"></a>00577         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding negation to collation. &quot;</span>;
<a name="l00578"></a>00578         msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
<a name="l00579"></a>00579         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00580"></a>00580     }
<a name="l00581"></a>00581     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00582"></a>00582         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00583"></a>00583         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding negation to collation. &quot;</span>;
<a name="l00584"></a>00584         msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
<a name="l00585"></a>00585         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00586"></a>00586     }
<a name="l00587"></a>00587     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00588"></a>00588         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00589"></a>00589         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding negation to collation. &quot;</span>;
<a name="l00590"></a>00590         msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
<a name="l00591"></a>00591         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00592"></a>00592     }
<a name="l00593"></a>00593     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00594"></a>00594         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00595"></a>00595         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding negation to collation. &quot;</span>;
<a name="l00596"></a>00596         msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
<a name="l00597"></a>00597         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00598"></a>00598     }
<a name="l00599"></a>00599 }
<a name="l00600"></a>00600 
<a name="l00601"></a>00601 
<a name="l00602"></a>00602 <span class="comment">// Make a collated histogram from a container of rvectors</span>
<a name="l00603"></a>00603 <span class="comment">// immediate splitting</span>
<a name="l00604"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4aeff90166d5791306cddff68289cd22">00604</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4aeff90166d5791306cddff68289cd22" title="Collate samples from container of rvectors, immediate splitting.">AdaptiveHistogramCollator::collateFromRVecSplitNow</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00605"></a>00605                     <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> rv, ivector pavingBox,
<a name="l00606"></a>00606                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest)
<a name="l00607"></a>00607 {
<a name="l00608"></a>00608     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00609"></a>00609 
<a name="l00610"></a>00610     <span class="keywordflow">try</span> {
<a name="l00611"></a>00611         <span class="keywordtype">int</span> indImmedSplit = 1; <span class="comment">// immediate splitting</span>
<a name="l00612"></a>00612 
<a name="l00613"></a>00613         <a class="code" href="classsubpavings_1_1CompNothing.shtml" title="Class comparing nodes to give no change in ordering.">CompNothing</a> compTest; <span class="comment">// dummy comparison test</span>
<a name="l00614"></a>00614         <a class="code" href="classsubpavings_1_1CritStopAll.shtml" title="Class to bale out of priority queue splitting.">CritStopAll</a> he; <span class="comment">// dummy stopping function object</span>
<a name="l00615"></a>00615         <span class="keywordtype">size_t</span> minPoints = 0; <span class="comment">// dummy minPoints</span>
<a name="l00616"></a>00616         <span class="keywordtype">double</span> minVolB = 0.0; <span class="comment">// dummy minVolB</span>
<a name="l00617"></a>00617 
<a name="l00618"></a>00618 
<a name="l00619"></a>00619         retValue = collateFromRVec(samplesize, numberSamples, rv,
<a name="l00620"></a>00620                                     pavingBox, indImmedSplit, boolTest,
<a name="l00621"></a>00621                                     compTest, he, minPoints, minVolB);
<a name="l00622"></a>00622     }
<a name="l00623"></a>00623     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00624"></a>00624         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00625"></a>00625         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
<a name="l00626"></a>00626                                             + oldmsg;
<a name="l00627"></a>00627         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00628"></a>00628     }
<a name="l00629"></a>00629     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00630"></a>00630         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00631"></a>00631         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00632"></a>00632         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00633"></a>00633     }
<a name="l00634"></a>00634     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00635"></a>00635         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00636"></a>00636         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00637"></a>00637         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00638"></a>00638     }
<a name="l00639"></a>00639     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00640"></a>00640         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00641"></a>00641         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00642"></a>00642         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00643"></a>00643     }
<a name="l00644"></a>00644 
<a name="l00645"></a>00645     <span class="keywordflow">return</span> retValue;
<a name="l00646"></a>00646 }
<a name="l00647"></a>00647 
<a name="l00648"></a>00648 <span class="comment">// Make a collated histogram from an RSSample</span>
<a name="l00649"></a>00649 <span class="comment">// priority queue splitting</span>
<a name="l00650"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa529397618b12232af3dc816957a5180">00650</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa529397618b12232af3dc816957a5180" title="Collate samples from container of rvectors, priority queue split.">AdaptiveHistogramCollator::collateFromRVecSplitPQ</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00651"></a>00651                     <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> rv, ivector pavingBox,
<a name="l00652"></a>00652                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l00653"></a>00653                     <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB)
<a name="l00654"></a>00654 {
<a name="l00655"></a>00655     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00656"></a>00656 
<a name="l00657"></a>00657     <span class="keywordflow">try</span> {
<a name="l00658"></a>00658 
<a name="l00659"></a>00659         <span class="keywordtype">int</span> indImmedSplit = 0; <span class="comment">// pq rather than immediate splitting</span>
<a name="l00660"></a>00660 
<a name="l00661"></a>00661         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy</span>
<a name="l00662"></a>00662 
<a name="l00663"></a>00663         retValue = collateFromRVec(samplesize, numberSamples, rv,
<a name="l00664"></a>00664                                     pavingBox, indImmedSplit, sn,
<a name="l00665"></a>00665                                     compTest, he, minChildPoints, minVolB);
<a name="l00666"></a>00666     }
<a name="l00667"></a>00667     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00668"></a>00668         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00669"></a>00669         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
<a name="l00670"></a>00670                                             + oldmsg;
<a name="l00671"></a>00671         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00672"></a>00672     }
<a name="l00673"></a>00673     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00674"></a>00674         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00675"></a>00675         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00676"></a>00676         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00677"></a>00677     }
<a name="l00678"></a>00678     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00679"></a>00679         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00680"></a>00680         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00681"></a>00681         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00682"></a>00682     }
<a name="l00683"></a>00683     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00684"></a>00684         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00685"></a>00685         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00686"></a>00686         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00687"></a>00687     }
<a name="l00688"></a>00688 
<a name="l00689"></a>00689     <span class="keywordflow">return</span> retValue;
<a name="l00690"></a>00690 }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692 <span class="comment">// Make an collated histogram from an RSSample</span>
<a name="l00693"></a>00693 <span class="comment">// immediate splitting</span>
<a name="l00694"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2e8d1edcfe594020e1dfa8135dd20f9d">00694</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2e8d1edcfe594020e1dfa8135dd20f9d" title="Collate samples from an RSSample object, immediate splitting.">AdaptiveHistogramCollator::collateFromRSSampleSplitNow</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00695"></a>00695                     <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rss, ivector pavingBox,
<a name="l00696"></a>00696                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> label)
<a name="l00697"></a>00697 {
<a name="l00698"></a>00698     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700     <span class="keywordflow">try</span> {
<a name="l00701"></a>00701 
<a name="l00702"></a>00702         <span class="keywordtype">int</span> indImmedSplit = 1; <span class="comment">// immediate splitting</span>
<a name="l00703"></a>00703 
<a name="l00704"></a>00704         <a class="code" href="classsubpavings_1_1CompNothing.shtml" title="Class comparing nodes to give no change in ordering.">CompNothing</a> compTest; <span class="comment">// dummy comparison test</span>
<a name="l00705"></a>00705         <a class="code" href="classsubpavings_1_1CritStopAll.shtml" title="Class to bale out of priority queue splitting.">CritStopAll</a> he; <span class="comment">// dummy stopping function object</span>
<a name="l00706"></a>00706         <span class="keywordtype">size_t</span> minPoints = 0; <span class="comment">// dummy minPoints</span>
<a name="l00707"></a>00707         <span class="keywordtype">double</span> minVolB = 0.0; <span class="comment">// dummy minVolB</span>
<a name="l00708"></a>00708 
<a name="l00709"></a>00709         retValue = collateFromRSSample(samplesize, numberSamples, rss,
<a name="l00710"></a>00710                                     pavingBox, indImmedSplit, boolTest,
<a name="l00711"></a>00711                                     compTest, he, minPoints, minVolB, label);
<a name="l00712"></a>00712     }
<a name="l00713"></a>00713     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00714"></a>00714         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00715"></a>00715         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
<a name="l00716"></a>00716                                             + oldmsg;
<a name="l00717"></a>00717         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00718"></a>00718     }
<a name="l00719"></a>00719     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00720"></a>00720         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00721"></a>00721         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00722"></a>00722         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00723"></a>00723     }
<a name="l00724"></a>00724     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00725"></a>00725         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00726"></a>00726         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00727"></a>00727         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00728"></a>00728     }
<a name="l00729"></a>00729     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00730"></a>00730         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00731"></a>00731         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00732"></a>00732         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00733"></a>00733     }
<a name="l00734"></a>00734 
<a name="l00735"></a>00735     <span class="keywordflow">return</span> retValue;
<a name="l00736"></a>00736 }
<a name="l00737"></a>00737 
<a name="l00738"></a>00738 <span class="comment">// Make a collated histogram from an RSSample</span>
<a name="l00739"></a>00739 <span class="comment">// priority queue splitting</span>
<a name="l00740"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a3ba2c0211c575d8564050292e2b00640">00740</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a3ba2c0211c575d8564050292e2b00640" title="Collate samples from RSSample object, priority queue splitting.">AdaptiveHistogramCollator::collateFromRSSampleSplitPQ</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l00741"></a>00741                     <span class="keywordtype">size_t</span> numberSamples, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rss,
<a name="l00742"></a>00742                     ivector pavingBox, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l00743"></a>00743                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l00744"></a>00744                     <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, <span class="keywordtype">int</span> label)
<a name="l00745"></a>00745 {
<a name="l00746"></a>00746     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00747"></a>00747 
<a name="l00748"></a>00748     <span class="keywordflow">try</span> {
<a name="l00749"></a>00749         <span class="keywordtype">int</span> indImmedSplit = 0; <span class="comment">// pq rather than immediate splitting</span>
<a name="l00750"></a>00750 
<a name="l00751"></a>00751         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy</span>
<a name="l00752"></a>00752 
<a name="l00753"></a>00753         retValue = collateFromRSSample(samplesize, numberSamples, rss,
<a name="l00754"></a>00754                                     pavingBox, indImmedSplit, sn,
<a name="l00755"></a>00755                                     compTest, he, minChildPoints, minVolB, label);
<a name="l00756"></a>00756     }
<a name="l00757"></a>00757     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00758"></a>00758         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00759"></a>00759         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
<a name="l00760"></a>00760                                             + oldmsg;
<a name="l00761"></a>00761         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00762"></a>00762     }
<a name="l00763"></a>00763     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00764"></a>00764         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00765"></a>00765         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00766"></a>00766         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00767"></a>00767     }
<a name="l00768"></a>00768     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00769"></a>00769         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00770"></a>00770         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00771"></a>00771         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00772"></a>00772     }
<a name="l00773"></a>00773     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00774"></a>00774         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00775"></a>00775         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
<a name="l00776"></a>00776         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00777"></a>00777     }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779     <span class="keywordflow">return</span> retValue;
<a name="l00780"></a>00780 }
<a name="l00781"></a>00781 
<a name="l00782"></a>00782 <span class="comment">// make a .dot file for the histogram</span>
<a name="l00783"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a130fc9b9b02214769aece5969de0d8fc">00783</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a130fc9b9b02214769aece5969de0d8fc" title="Make a .dot graph file from collated histogram structure.">AdaptiveHistogramCollator::outputGraphDot</a>()<span class="keyword"> const</span>
<a name="l00784"></a>00784 <span class="keyword"></span>{
<a name="l00785"></a>00785 
<a name="l00786"></a>00786 
<a name="l00787"></a>00787     <span class="keywordflow">if</span> (NULL == rootCollator) {
<a name="l00788"></a>00788 
<a name="l00789"></a>00789         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for graph output&quot;</span>);
<a name="l00790"></a>00790     }
<a name="l00791"></a>00791 
<a name="l00792"></a>00792     <span class="keywordtype">bool</span> success = rootCollator-&gt;outputGraphDot();
<a name="l00793"></a>00793 
<a name="l00794"></a>00794     <span class="keywordflow">return</span> success;
<a name="l00795"></a>00795 }
<a name="l00796"></a>00796 
<a name="l00797"></a>00797 <span class="comment">// Get the number of Adaptive Histogram objects collated.</span>
<a name="l00798"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5">00798</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">AdaptiveHistogramCollator::getNumberCollated</a>()<span class="keyword"> const</span>
<a name="l00799"></a>00799 <span class="keyword"></span>{ <span class="keywordflow">return</span> rootCollator-&gt;getNumberSummarised(); }
<a name="l00800"></a>00800 
<a name="l00801"></a>00801 <span class="comment">// Output the collated normalised histogram heights and bins data to a txt file</span>
<a name="l00802"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352">00802</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">AdaptiveHistogramCollator::outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00803"></a>00803                                         <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l00804"></a>00804 <span class="keyword"></span>{
<a name="l00805"></a>00805     <span class="comment">// To generate a file output of the AdaptiveHistogramCollator object</span>
<a name="l00806"></a>00806     ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00807"></a>00807 
<a name="l00808"></a>00808     rootCollator-&gt;leavesOutputTabs(os);
<a name="l00809"></a>00809     <span class="keywordflow">if</span> (confirm)
<a name="l00810"></a>00810         std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogramCollator has been &quot;</span>
<a name="l00811"></a>00811             &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 }
<a name="l00814"></a>00814 
<a name="l00815"></a>00815 
<a name="l00816"></a>00816 <span class="comment">// get number of leaf nodes</span>
<a name="l00817"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a421a5769038047a2a9867235e8fd95a1">00817</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a421a5769038047a2a9867235e8fd95a1" title="Get number of leaf nodes.">AdaptiveHistogramCollator::getNumLeaves</a>()
<a name="l00818"></a>00818 {
<a name="l00819"></a>00819   vector&lt;CollatorSPnode*&gt; leaves;
<a name="l00820"></a>00820   getSubPaving()-&gt;getLeaves(leaves); 
<a name="l00821"></a>00821 
<a name="l00822"></a>00822   <span class="keywordflow">return</span> leaves.size();
<a name="l00823"></a>00823 }
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 <span class="comment">// Output the average data over the collation to a txt file</span>
<a name="l00826"></a>00826 <span class="comment">// this outputs the normalised average histogram heights and bins</span>
<a name="l00827"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b">00827</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">AdaptiveHistogramCollator::outputAverageToTxtTabs</a>(<span class="keyword">const</span>
<a name="l00828"></a>00828     std::string&amp; s, <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l00829"></a>00829 <span class="keyword"></span>{
<a name="l00830"></a>00830     <span class="keywordflow">try</span> {
<a name="l00831"></a>00831 
<a name="l00832"></a>00832         <span class="keywordflow">if</span> (NULL != rootCollator) {
<a name="l00833"></a>00833 
<a name="l00834"></a>00834             <span class="comment">//average only makes sense if all values in the summary are positive</span>
<a name="l00835"></a>00835             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = rootCollator-&gt;getSummary();
<a name="l00836"></a>00836 
<a name="l00837"></a>00837             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
<a name="l00838"></a>00838                                                 bind2nd(less&lt;double&gt;(), 0.0));
<a name="l00839"></a>00839             <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l00840"></a>00840                     <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
<a name="l00841"></a>00841                     std::cerr &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; msg &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; std::endl;
<a name="l00842"></a>00842             }
<a name="l00843"></a>00843             <span class="keywordflow">else</span> {
<a name="l00844"></a>00844 
<a name="l00845"></a>00845                 <span class="comment">// To generate a file output of the AdaptiveHistogramCollator object</span>
<a name="l00846"></a>00846                 ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00847"></a>00847 
<a name="l00848"></a>00848                 <span class="keywordflow">if</span> (NULL != rootCollator) {
<a name="l00849"></a>00849                     rootCollator-&gt;leavesAverageOutputTabs(os);
<a name="l00850"></a>00850                     <span class="keywordflow">if</span> (confirm)
<a name="l00851"></a>00851                         std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the average AdaptiveHistogram has been &quot;</span>
<a name="l00852"></a>00852                             &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00853"></a>00853                 }
<a name="l00854"></a>00854                 <span class="keywordflow">else</span> {
<a name="l00855"></a>00855                     std::cerr &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to average&quot;</span>
<a name="l00856"></a>00856                         &lt;&lt; std::endl;
<a name="l00857"></a>00857                 }
<a name="l00858"></a>00858             }
<a name="l00859"></a>00859         }
<a name="l00860"></a>00860     }
<a name="l00861"></a>00861 
<a name="l00862"></a>00862     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00863"></a>00863         std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem averaging: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;
<a name="l00864"></a>00864     }
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 }
<a name="l00867"></a>00867 
<a name="l00868"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0">00868</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">AdaptiveHistogramCollator::publicOutputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l00869"></a>00869 <span class="keyword"></span>{
<a name="l00870"></a>00870     <span class="comment">// use the private version</span>
<a name="l00871"></a>00871     outputLog(s, i);
<a name="l00872"></a>00872 }
<a name="l00873"></a>00873 
<a name="l00874"></a>00874 <span class="comment">//--this was removed then re-inserted-----</span>
<a name="l00875"></a>00875 <span class="comment">// Output the accumulated data over the collation to a txt file</span>
<a name="l00876"></a>00876 <span class="comment">// this outputs the sum over the collation summary</span>
<a name="l00877"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4fab24a598b5d30ff259e71d29e2aebd">00877</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4fab24a598b5d30ff259e71d29e2aebd" title="Output the accumulated data over the collation to a txt file.">AdaptiveHistogramCollator::outputAccumulationToTxtTabs</a>(<span class="keyword">const</span>
<a name="l00878"></a>00878     std::string&amp; s)<span class="keyword"> const</span>
<a name="l00879"></a>00879 <span class="keyword"></span>{
<a name="l00880"></a>00880     <span class="keywordflow">try</span> {
<a name="l00881"></a>00881          <span class="keywordflow">if</span> (NULL != rootCollator) {
<a name="l00882"></a>00882 
<a name="l00883"></a>00883             <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
<a name="l00884"></a>00884             ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00885"></a>00885 
<a name="l00886"></a>00886             <span class="keywordflow">if</span> (NULL != rootCollator) {
<a name="l00887"></a>00887                 rootCollator-&gt;leavesAccumulationOutputTabs(os);
<a name="l00888"></a>00888                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the accumulated AdaptiveHistograms &quot;</span>
<a name="l00889"></a>00889                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00890"></a>00890             }
<a name="l00891"></a>00891             <span class="keywordflow">else</span> {
<a name="l00892"></a>00892                 std::cout &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to accumulate&quot;</span>
<a name="l00893"></a>00893                     &lt;&lt; std::endl;
<a name="l00894"></a>00894             }
<a name="l00895"></a>00895         }
<a name="l00896"></a>00896     }
<a name="l00897"></a>00897     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
<a name="l00898"></a>00898         std::cout &lt;&lt; <span class="stringliteral">&quot;Problem acccumulating: &quot;</span> &lt;&lt; e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>() &lt;&lt; std::endl;
<a name="l00899"></a>00899     }
<a name="l00900"></a>00900 }
<a name="l00901"></a>00901 
<a name="l00904"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2c32c30f302a52df863a05f852dd7ea8">00904</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample</a>(
<a name="l00905"></a>00905                 <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; labSampledData, <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> wt,
<a name="l00906"></a>00906                 <span class="keywordtype">double</span> WeightHist,
<a name="l00907"></a>00907             std::map&lt;rvector, <span class="keywordtype">double</span>, std::less&lt;rvector&gt; &gt;&amp; WeightsPM)
<a name="l00908"></a>00908 {
<a name="l00909"></a>00909   <span class="keywordflow">if</span> (NULL != rootCollator) {     
<a name="l00910"></a>00910     <span class="comment">// container to store heights</span>
<a name="l00911"></a>00911     vector&lt;double&gt; fhatNew;         
<a name="l00912"></a>00912       <span class="comment">// make new fhat by adding some mass</span>
<a name="l00913"></a>00913       <span class="comment">// maybe can update the summary instead of outputting as vector of</span>
<a name="l00914"></a>00914       <span class="comment">// doubles</span>
<a name="l00915"></a>00915     rootCollator-&gt;leavesMakeNewFhat(wt, fhatNew);
<a name="l00916"></a>00916 
<a name="l00917"></a>00917     <span class="comment">// get pointers to the leaf nodes</span>
<a name="l00918"></a>00918     vector&lt;CollatorSPnode*&gt; leaves;
<a name="l00919"></a>00919     vector&lt;CollatorSPnode*&gt;::iterator it;
<a name="l00920"></a>00920     getSubPaving()-&gt;getLeaves(leaves); 
<a name="l00921"></a>00921     vector&lt;LabPnt&gt;::iterator dataIt;
<a name="l00922"></a>00922 
<a name="l00923"></a>00923     dotprecision dpEstLogLik;
<a name="l00924"></a>00924     dpEstLogLik = 0.0;
<a name="l00925"></a>00925     <span class="comment">//iterated through labSampledData</span>
<a name="l00926"></a>00926     <span class="keywordflow">for</span> (dataIt = labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin(); 
<a name="l00927"></a>00927       dataIt &lt; labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); dataIt++) {
<a name="l00928"></a>00928       <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00929"></a>00929       <span class="keywordflow">while</span> ( !done ) {
<a name="l00930"></a>00930         <span class="comment">// start the counts for the leaves so that it corresponds to the </span>
<a name="l00931"></a>00931         <span class="comment">// right fhat</span>
<a name="l00932"></a>00932         <span class="keywordtype">size_t</span> pos = 0;
<a name="l00933"></a>00933         <span class="comment">//iterate through the leaves</span>
<a name="l00934"></a>00934         <span class="keywordflow">for</span> (it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00935"></a>00935           <span class="comment">//get the box of this leaf node</span>
<a name="l00936"></a>00936           ivector theBox = (*it)-&gt;getBox();
<a name="l00937"></a>00937           <span class="comment">//make a pointer to an SPSnode with the box</span>
<a name="l00938"></a>00938           <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newNode = NULL;
<a name="l00939"></a>00939           newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(theBox, 0);
<a name="l00940"></a>00940         
<a name="l00941"></a>00941           <span class="comment">//now check if this data is inside the box</span>
<a name="l00942"></a>00942           <span class="keywordflow">if</span> ( newNode-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>((*dataIt).Pnt, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>) ) {  
<a name="l00943"></a>00943             
<a name="l00944"></a>00944             <span class="comment">//if data is a point mass in current simulated dataset from theta</span>
<a name="l00945"></a>00945             <span class="keywordflow">if</span> ( (*dataIt).L == 0 &amp;&amp; WeightsPM[(*dataIt).Pnt] != 0 ) {       
<a name="l00946"></a>00946               accumulate(dpEstLogLik, 
<a name="l00947"></a>00947               log(WeightsPM[(*dataIt).Pnt] + dx*WeightHist*fhatNew[pos]), 1);       
<a name="l00948"></a>00948             }
<a name="l00949"></a>00949             
<a name="l00950"></a>00950             <span class="comment">//if data is a point mass but not in current simulated dataset from theta</span>
<a name="l00951"></a>00951             <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( (*dataIt).L == 0 &amp;&amp; WeightsPM[(*dataIt).Pnt] == 0 ) {      
<a name="l00952"></a>00952               accumulate(dpEstLogLik, log(dx*WeightHist*fhatNew[pos]), 1);        
<a name="l00953"></a>00953             } 
<a name="l00954"></a>00954 
<a name="l00955"></a>00955             <span class="comment">//if data is unique</span>
<a name="l00956"></a>00956             <span class="keywordflow">else</span> {
<a name="l00957"></a>00957               accumulate(dpEstLogLik, log(dx*WeightHist*fhatNew[pos]), 1);
<a name="l00958"></a>00958             }
<a name="l00959"></a>00959             
<a name="l00960"></a>00960             done = <span class="keyword">true</span>; <span class="comment">//so that don&#39;t have to iterate through ALL the leaves</span>
<a name="l00961"></a>00961                       <span class="comment">//just for this data</span>
<a name="l00962"></a>00962             <span class="keywordflow">break</span>;
<a name="l00963"></a>00963           }
<a name="l00964"></a>00964           pos++; <span class="comment">// increment position</span>
<a name="l00965"></a>00965           <span class="keyword">delete</span> newNode; <span class="comment">//free memory</span>
<a name="l00966"></a>00966         } <span class="comment">// end of iterating though leaves</span>
<a name="l00967"></a>00967       } <span class="comment">// end of while loop </span>
<a name="l00968"></a>00968       
<a name="l00969"></a>00969     } <span class="comment">// end of going through the data</span>
<a name="l00970"></a>00970       
<a name="l00971"></a>00971     real estLogLik = rnd(dpEstLogLik);
<a name="l00972"></a>00972     <span class="keywordflow">return</span> estLogLik;
<a name="l00973"></a>00973   } <span class="comment">// end of if NULL != rootCollator</span>
<a name="l00974"></a>00974   <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;Empty collator&quot;</span> &lt;&lt; endl; exit(1); }
<a name="l00975"></a>00975 }
<a name="l00976"></a>00976 
<a name="l00977"></a>00977 <span class="comment">//marginalisation</span>
<a name="l00978"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab">00978</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">AdaptiveHistogramCollator::marginalise</a>(
<a name="l00979"></a>00979                 <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims)<span class="keyword"> const</span>
<a name="l00980"></a>00980 <span class="keyword"></span>{
<a name="l00981"></a>00981   <span class="comment">// take the root of the other and marginalise it</span>
<a name="l00982"></a>00982   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aec7d6bcee79660a09914100f9b878611" title="Make a marginalised version of subpaving with root node rhs.">CollatorSPnode::marginalise</a>(getSubPaving(),
<a name="l00983"></a>00983   reqDims));
<a name="l00984"></a>00984 }
<a name="l00985"></a>00985 
<a name="l00986"></a>00986 <span class="comment">//find density region with cov coverage</span>
<a name="l00987"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2">00987</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">AdaptiveHistogramCollator::findDensityRegion</a>(<span class="keywordtype">double</span> cov, <span class="keywordtype">double</span> weightPM,
<a name="l00988"></a>00988                             vector&lt;CollatorSPnode*&gt; &amp; covNodes,
<a name="l00989"></a>00989                             <span class="keywordtype">string</span> covFileName)
<a name="l00990"></a>00990 {
<a name="l00991"></a>00991   <span class="keywordflow">try</span> {
<a name="l00992"></a>00992       
<a name="l00993"></a>00993       <span class="keywordflow">if</span> ( (cov - weightPM) &lt;= 0) {
<a name="l00994"></a>00994         cout &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; percent of the mass are already covered by the point masses&quot;</span> &lt;&lt; endl;
<a name="l00995"></a>00995       }
<a name="l00996"></a>00996       <span class="keywordflow">else</span> {
<a name="l00997"></a>00997       
<a name="l00998"></a>00998         <span class="comment">// put the leaves into a vector and sort it, smallest to largest</span>
<a name="l00999"></a>00999         vector&lt;CollatorSPnode*&gt; leaves;
<a name="l01000"></a>01000         getSubPaving()-&gt;getLeaves(leaves);
<a name="l01001"></a>01001         <a class="code" href="classsubpavings_1_1CompHeight.shtml" title="Class comparing on count/volume (ie histogram height) of box of node.">CompHeight</a> compheight;  
<a name="l01002"></a>01002         <span class="comment">//sort according to average height</span>
<a name="l01003"></a>01003         sort(leaves.begin(), leaves.end(), <a class="code" href="namespacesubpavings.shtml#a3580c30693d7d662e28a0fa26f45f837" title="Comparison of CollatorSPnodes using the average of the total of summaries.">nodeCompTotalSummaryAv</a>);
<a name="l01004"></a>01004       
<a name="l01005"></a>01005         <span class="comment">//start iterating from the largest</span>
<a name="l01006"></a>01006         vector&lt;CollatorSPnode*&gt;::reverse_iterator rit = leaves.rbegin();
<a name="l01007"></a>01007         <span class="keywordtype">bool</span> found = FALSE; <span class="comment">//found the boxes that gives cov density region</span>
<a name="l01008"></a>01008         
<a name="l01009"></a>01009         dotprecision totalCov;
<a name="l01010"></a>01010         totalCov = 0.0;
<a name="l01011"></a>01011         
<a name="l01012"></a>01012         <span class="keywordflow">while</span> (!found &amp;&amp; rit &lt; leaves.rend()) {
<a name="l01013"></a>01013           <span class="comment">// double check this:</span>
<a name="l01014"></a>01014           <span class="comment">// height is box counts/box vol</span>
<a name="l01015"></a>01015           <span class="comment">// ie count is unnormalised vol of an individual element of histogram</span>
<a name="l01016"></a>01016           <span class="comment">// box vol * height == box vol * (count / box vol) == count</span>
<a name="l01017"></a>01017         
<a name="l01018"></a>01018           <span class="comment">//accumulate the summary * box vol</span>
<a name="l01019"></a>01019           accumulate(totalCov, (*rit)-&gt;getTotalSummaryAv()*(*rit)-&gt;nodeVolume(), 1); 
<a name="l01020"></a>01020 
<a name="l01021"></a>01021           <span class="comment">//push back the node that fulfill the condition totalCov &lt;= cov </span>
<a name="l01022"></a>01022           <span class="comment">//into the container covNodes</span>
<a name="l01023"></a>01023           <span class="keywordflow">if</span> (totalCov &lt;= (cov - weightPM) ) { 
<a name="l01024"></a>01024             covNodes.push_back((*rit)); 
<a name="l01025"></a>01025           } 
<a name="l01026"></a>01026           
<a name="l01027"></a>01027           <span class="comment">// check that totalCov is at most cov</span>
<a name="l01028"></a>01028           <span class="keywordflow">if</span> (totalCov &gt;= (cov - weightPM) ) { found = TRUE; } <span class="comment">// break out of loop</span>
<a name="l01029"></a>01029           ++rit;        
<a name="l01030"></a>01030         } <span class="comment">// end while </span>
<a name="l01031"></a>01031       
<a name="l01032"></a>01032       <span class="comment">//output covNodes to .txt </span>
<a name="l01033"></a>01033         ofstream os;
<a name="l01034"></a>01034         os.open(covFileName.c_str());   
<a name="l01035"></a>01035         vector&lt;CollatorSPnode*&gt;::iterator vit;
<a name="l01036"></a>01036         <span class="keywordflow">for</span> (vit = covNodes.begin(); vit &lt; covNodes.end(); vit++) {
<a name="l01037"></a>01037           ivector thisBox = (*vit)-&gt;getBox(); <span class="comment">// copy theBox         </span>
<a name="l01038"></a>01038           <span class="keywordtype">double</span> vol = (*vit)-&gt;nodeVolume();
<a name="l01039"></a>01039           <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l01040"></a>01040           os &lt;&lt; (*vit)-&gt;getNodeName();
<a name="l01041"></a>01041           os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l01042"></a>01042           <span class="comment">// followed by the average</span>
<a name="l01043"></a>01043           os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*vit)-&gt;getTotalSummaryAv();
<a name="l01044"></a>01044           <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l01045"></a>01045           <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l01046"></a>01046           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l01047"></a>01047              os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l01048"></a>01048           }
<a name="l01049"></a>01049           os &lt;&lt; endl;
<a name="l01050"></a>01050         }
<a name="l01051"></a>01051         os &lt;&lt; flush;
<a name="l01052"></a>01052         os.close();
<a name="l01053"></a>01053       } 
<a name="l01054"></a>01054     } <span class="comment">// end of try     </span>
<a name="l01055"></a>01055   <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01056"></a>01056     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(
<a name="l01057"></a>01057     <span class="stringliteral">&quot;Error in AdaptiveHistogramCollation::coverage :\n&quot;</span>
<a name="l01058"></a>01058     + <span class="keywordtype">string</span>( e.what() ) );
<a name="l01059"></a>01059   }
<a name="l01060"></a>01060 }
<a name="l01061"></a>01061 
<a name="l01062"></a>01062 <span class="comment">// Get a string of the leaf node levels.</span>
<a name="l01063"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0">01063</a> std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0" title="get leaf levels string">AdaptiveHistogramCollator::getLeafLevelsString</a>()<span class="keyword"> const</span>
<a name="l01064"></a>01064 <span class="keyword"></span>{
<a name="l01065"></a>01065     <span class="keywordtype">string</span> retValue = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01066"></a>01066     <span class="keywordflow">if</span> (NULL != rootCollator)
<a name="l01067"></a>01067         retValue = rootCollator-&gt;getLeafNodeLevelsString();
<a name="l01068"></a>01068 
<a name="l01069"></a>01069     <span class="keywordflow">return</span> retValue;
<a name="l01070"></a>01070 }
<a name="l01071"></a>01071 
<a name="l01072"></a>01072 <span class="comment">// get the sum of the variances over samples contained in a collation</span>
<a name="l01073"></a>01073 <span class="comment">// for a scalar summary of a histogram where the variance of the scalar</span>
<a name="l01074"></a>01074 <span class="comment">// for a histogram sample is the square of the sum of the areas of difference</span>
<a name="l01075"></a>01075 <span class="comment">// between a histogram sample and the average histogram over the samples.</span>
<a name="l01076"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e">01076</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e" title="Get the sum of the variances for an area-related scalar summary.">AdaptiveHistogramCollator::getSumVarianceAreaScalar</a>()<span class="keyword"> const</span>
<a name="l01077"></a>01077 <span class="keyword"></span>{
<a name="l01078"></a>01078     <span class="keywordflow">if</span> (NULL == getSubPaving()) {
<a name="l01079"></a>01079             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances for this: rootCollator is NULL&quot;</span>;
<a name="l01080"></a>01080             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01081"></a>01081     }
<a name="l01082"></a>01082 
<a name="l01083"></a>01083     <span class="comment">//variances only makes sense if all values in the summary are positive</span>
<a name="l01084"></a>01084     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = getSubPaving()-&gt;getSummary();
<a name="l01085"></a>01085     <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
<a name="l01086"></a>01086                                         bind2nd(less&lt;double&gt;(), 0.0));
<a name="l01087"></a>01087     <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l01088"></a>01088             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances: collation contains negatives&quot;</span>;
<a name="l01089"></a>01089             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01090"></a>01090     }
<a name="l01091"></a>01091 
<a name="l01092"></a>01092     real sumVars = 0.0;
<a name="l01093"></a>01093     <span class="comment">// take this collation</span>
<a name="l01094"></a>01094     <span class="keywordflow">try</span> {
<a name="l01095"></a>01095         sumVars = getSubPaving()-&gt;getSumVarsAreaScalar();
<a name="l01096"></a>01096         <span class="comment">//cout &lt;&lt; &quot;sumVars: &quot; &lt;&lt; sumVars &lt;&lt; endl;</span>
<a name="l01097"></a>01097     }
<a name="l01098"></a>01098     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01099"></a>01099         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01100"></a>01100         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.  Orginal error: &quot;</span>
<a name="l01101"></a>01101                                             + oldmsg;
<a name="l01102"></a>01102         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01103"></a>01103     }
<a name="l01104"></a>01104     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01105"></a>01105         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01106"></a>01106         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error summing variances.  Orginal error: &quot;</span>
<a name="l01107"></a>01107                                             + oldmsg;
<a name="l01108"></a>01108         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01109"></a>01109     }
<a name="l01110"></a>01110     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01111"></a>01111         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01112"></a>01112         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException summing variances.  Orginal error: &quot;</span>
<a name="l01113"></a>01113                                             + oldmsg;
<a name="l01114"></a>01114         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01115"></a>01115     }
<a name="l01116"></a>01116     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01117"></a>01117         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01118"></a>01118         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error summing variances.  Orginal error: &quot;</span> + oldmsg;
<a name="l01119"></a>01119         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01120"></a>01120     }
<a name="l01121"></a>01121     <span class="keywordflow">return</span> sumVars;
<a name="l01122"></a>01122 }
<a name="l01123"></a>01123 
<a name="l01124"></a>01124 
<a name="l01125"></a>01125 <span class="comment">// get the sample variance over sample contained in a collation for a scalar</span>
<a name="l01126"></a>01126 <span class="comment">// summary value defined so that the variance of a sample histogram in the</span>
<a name="l01127"></a>01127 <span class="comment">// collation is the sum of the squares of the areas of difference between the</span>
<a name="l01128"></a>01128 <span class="comment">// histogram and the average histogram over the sample</span>
<a name="l01129"></a>01129 <span class="comment">// the sample variance is (sum of the sample variances)/(number samples - 1)</span>
<a name="l01130"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aefbffc32c2919a65a8a8f67b74416766">01130</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aefbffc32c2919a65a8a8f67b74416766" title="Get the sample variance for an area-related scalar summary.">AdaptiveHistogramCollator::getSampleVarianceAreaScalar</a>()<span class="keyword"> const</span>
<a name="l01131"></a>01131 <span class="keyword"></span>{
<a name="l01132"></a>01132     real sumVars = getSumVarianceAreaScalar();
<a name="l01133"></a>01133     <span class="keywordtype">size_t</span> numberColl = getNumberCollated();
<a name="l01134"></a>01134 
<a name="l01135"></a>01135     <span class="keywordflow">if</span> (numberColl &lt; 2) {
<a name="l01136"></a>01136         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot do sample variance for sample size &lt; 2&quot;</span>);
<a name="l01137"></a>01137     }
<a name="l01138"></a>01138 
<a name="l01139"></a>01139     <span class="keywordflow">return</span> sumVars/(1.0*(numberColl - 1));
<a name="l01140"></a>01140 }
<a name="l01141"></a>01141 
<a name="l01142"></a>01142 
<a name="l01143"></a>01143 <span class="comment">// get the sum of the variances over samples contained in a collation</span>
<a name="l01144"></a>01144 <span class="comment">// for a scalar summary of a histogram which is the total heights of all</span>
<a name="l01145"></a>01145 <span class="comment">// the bins in the histogram.</span>
<a name="l01146"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2">01146</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2" title="Get the sum of the variances for scalar summary total height.">AdaptiveHistogramCollator::getSumVarianceTotalHeightScalar</a>()<span class="keyword"></span>
<a name="l01147"></a>01147 <span class="keyword">                                                                        const</span>
<a name="l01148"></a>01148 <span class="keyword"></span>{
<a name="l01149"></a>01149     <span class="keywordflow">if</span> (NULL == getSubPaving()) {
<a name="l01150"></a>01150             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances for this: rootCollator is NULL&quot;</span>;
<a name="l01151"></a>01151             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01152"></a>01152     }
<a name="l01153"></a>01153 
<a name="l01154"></a>01154     <span class="comment">//variances only make sense if all values in the summary are positive</span>
<a name="l01155"></a>01155     <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = getSubPaving()-&gt;getSummary();
<a name="l01156"></a>01156 
<a name="l01157"></a>01157     <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
<a name="l01158"></a>01158                                             bind2nd(less&lt;double&gt;(), 0.0));
<a name="l01159"></a>01159     <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
<a name="l01160"></a>01160             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances: collation contains negatives&quot;</span>;
<a name="l01161"></a>01161             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01162"></a>01162     }
<a name="l01163"></a>01163 
<a name="l01164"></a>01164     real sumVars = 0.0;
<a name="l01165"></a>01165 
<a name="l01166"></a>01166     <span class="comment">// take this collation</span>
<a name="l01167"></a>01167     <span class="keywordflow">try</span> {
<a name="l01168"></a>01168         sumVars = getSubPaving()-&gt;getSumVarsTotalSummarisedValueScalar();
<a name="l01169"></a>01169     }
<a name="l01170"></a>01170     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01171"></a>01171         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01172"></a>01172         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.  Orginal error: &quot;</span>
<a name="l01173"></a>01173                                             + oldmsg;
<a name="l01174"></a>01174         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01175"></a>01175     }
<a name="l01176"></a>01176     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01177"></a>01177         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01178"></a>01178         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error summing variances.  Orginal error: &quot;</span>
<a name="l01179"></a>01179                                             + oldmsg;
<a name="l01180"></a>01180         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01181"></a>01181     }
<a name="l01182"></a>01182     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01183"></a>01183         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01184"></a>01184         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException summing variances.  Orginal error: &quot;</span>
<a name="l01185"></a>01185                                             + oldmsg;
<a name="l01186"></a>01186         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01187"></a>01187     }
<a name="l01188"></a>01188     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01189"></a>01189         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01190"></a>01190         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error summing variances.  Orginal error: &quot;</span> + oldmsg;
<a name="l01191"></a>01191         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01192"></a>01192     }
<a name="l01193"></a>01193 
<a name="l01194"></a>01194     <span class="keywordflow">return</span> sumVars;
<a name="l01195"></a>01195 
<a name="l01196"></a>01196 }
<a name="l01197"></a>01197 
<a name="l01198"></a>01198 <span class="comment">// get the sample variance over sample contained in a collation</span>
<a name="l01199"></a>01199 <span class="comment">// for a scalar summary of a histogram which is the total heights of all</span>
<a name="l01200"></a>01200 <span class="comment">// the bins in the histogram.</span>
<a name="l01201"></a>01201 <span class="comment">// the sample variance is (sum of the sample variances)/(number samples - 1)</span>
<a name="l01202"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0a561a7f838b46985865c6fea1593829">01202</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0a561a7f838b46985865c6fea1593829" title="Get the sample variance for scalar summary total height.">AdaptiveHistogramCollator::getSampleVarianceTotalHeightScalar</a>()<span class="keyword"></span>
<a name="l01203"></a>01203 <span class="keyword">                                                                        const</span>
<a name="l01204"></a>01204 <span class="keyword"></span>{
<a name="l01205"></a>01205     real sumVars = getSumVarianceTotalHeightScalar();
<a name="l01206"></a>01206     <span class="keywordtype">size_t</span> numberColl = getNumberCollated();
<a name="l01207"></a>01207 
<a name="l01208"></a>01208     <span class="keywordflow">if</span> (numberColl &lt; 2) {
<a name="l01209"></a>01209         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot do sample variance for sample size &lt; 2&quot;</span>);
<a name="l01210"></a>01210     }
<a name="l01211"></a>01211 
<a name="l01212"></a>01212     <span class="keywordflow">return</span> sumVars/(1.0*(numberColl - 1));
<a name="l01213"></a>01213 }
<a name="l01214"></a>01214 
<a name="l01215"></a>01215 <span class="comment">// Jenny addition for Gloria&#39;s convergence work</span>
<a name="l01216"></a>01216 <span class="comment">// make a collator that is the differences of each element in a sample to the sample average</span>
<a name="l01217"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">01217</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">AdaptiveHistogramCollator::makeDifferencesToAverage</a>()<span class="keyword"> const</span>
<a name="l01218"></a>01218 <span class="keyword"></span>{
<a name="l01219"></a>01219   <span class="keywordflow">try</span> {
<a name="l01220"></a>01220     <span class="keywordflow">if</span> (NULL == getSubPaving()) {
<a name="l01221"></a>01221         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot make differences to average for this: rootCollator is NULL&quot;</span>;
<a name="l01222"></a>01222         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01223"></a>01223     }
<a name="l01224"></a>01224 
<a name="l01225"></a>01225     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollator;
<a name="l01226"></a>01226     
<a name="l01227"></a>01227         newCollator.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = (getSubPaving())-&gt;makeDifferencesToAveragePaving();
<a name="l01228"></a>01228     
<a name="l01229"></a>01229     <span class="keywordflow">return</span> newCollator;
<a name="l01230"></a>01230 
<a name="l01231"></a>01231     }
<a name="l01232"></a>01232     
<a name="l01233"></a>01233     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01234"></a>01234         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01235"></a>01235         <span class="keywordtype">string</span> msg = string(<span class="stringliteral">&quot;Error in AdaptiveHistogramCollator::getL1DistancesToAverage.&quot;</span>)
<a name="l01236"></a>01236         +  string(<span class="stringliteral">&quot;Orginal error: &quot;</span>) + oldmsg;
<a name="l01237"></a>01237         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01238"></a>01238     }
<a name="l01239"></a>01239 } <span class="comment">//end of function makeDifferencesToAverage()</span>
<a name="l01240"></a>01240 
<a name="l01241"></a>01241 <span class="comment">// Jenny addition for Gloria&#39;s convergence work</span>
<a name="l01242"></a>01242 <span class="comment">// take a container and return the same container, which has been</span>
<a name="l01243"></a>01243 <span class="comment">// cleared (if necessary) and re-filled with </span>
<a name="l01244"></a>01244 <span class="comment">// L1-distances-to-average, one for each histogram in collation</span>
<a name="l01245"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2b77dad7572df40d94ed62868834f3ae">01245</a> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2b77dad7572df40d94ed62868834f3ae">AdaptiveHistogramCollator::getL1DistancesToAverage</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; container)<span class="keyword"> const</span>
<a name="l01246"></a>01246 <span class="keyword"></span>{
<a name="l01247"></a>01247   <span class="keywordflow">try</span> {
<a name="l01248"></a>01248     <span class="keywordflow">if</span> (NULL == getSubPaving()) {
<a name="l01249"></a>01249         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get L1 distances for this: rootCollator is NULL&quot;</span>;
<a name="l01250"></a>01250         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01251"></a>01251     }
<a name="l01252"></a>01252 
<a name="l01253"></a>01253     container = getSubPaving()-&gt;getL1DistancesToAverage(container);
<a name="l01254"></a>01254      
<a name="l01255"></a>01255     <span class="keywordflow">return</span> container;
<a name="l01256"></a>01256 
<a name="l01257"></a>01257     }
<a name="l01258"></a>01258     
<a name="l01259"></a>01259     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01260"></a>01260         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01261"></a>01261         <span class="keywordtype">string</span> msg = string(<span class="stringliteral">&quot;Error in AdaptiveHistogramCollator::getL1DistancesToAverage.&quot;</span>)
<a name="l01262"></a>01262         +  string(<span class="stringliteral">&quot;Orginal error: &quot;</span>) + oldmsg;
<a name="l01263"></a>01263         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01264"></a>01264     }
<a name="l01265"></a>01265 
<a name="l01266"></a>01266 }
<a name="l01267"></a>01267 
<a name="l01268"></a>01268 <span class="comment">//gloria&#39;s addition to add to trunk later</span>
<a name="l01271"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46870c2d282efef091dfb1b3477aba4f">01271</a> <span class="comment"></span>real <a class="code" href="Coverage_8cpp.shtml#aa761d6c65ae1def2134f8829dd6be8fd">AdaptiveHistogramCollator::getUnifIAE</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; myPart, 
<a name="l01272"></a>01272                   vector&lt;int&gt; holesLoc, <span class="keywordtype">double</span> weight)
<a name="l01273"></a>01273 {                                               
<a name="l01274"></a>01274    <span class="comment">// get the true height, f of the corresponding box in myPart</span>
<a name="l01275"></a>01275   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
<a name="l01276"></a>01276   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
<a name="l01277"></a>01277   <span class="comment">//AdaptiveHistogram * adhPtr;</span>
<a name="l01278"></a>01278   <span class="comment">//adhPtr = &amp;myPart;</span>
<a name="l01279"></a>01279   (myPart).getSubPaving()-&gt;getLeaves(trueLeaves);
<a name="l01280"></a>01280 
<a name="l01281"></a>01281   <span class="comment">// setting up containers for the leaves</span>
<a name="l01282"></a>01282   vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l01283"></a>01283   vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
<a name="l01284"></a>01284   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l01285"></a>01285 
<a name="l01286"></a>01286   <span class="keywordtype">double</span> trueF; <span class="comment">//true density</span>
<a name="l01287"></a>01287   ivector temp;
<a name="l01288"></a>01288   
<a name="l01289"></a>01289    dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l01290"></a>01290    dpIAE=0.0;
<a name="l01291"></a>01291 
<a name="l01292"></a>01292   
<a name="l01293"></a>01293   <span class="comment">//go through all the leaves in this</span>
<a name="l01294"></a>01294   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01295"></a>01295     ivector thisBox = (*it)-&gt;getBox();
<a name="l01296"></a>01296     <span class="comment">//cout &lt;&lt; &quot;====checking &quot; &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l01297"></a>01297       
<a name="l01298"></a>01298     <span class="comment">// get the height of this leaf</span>
<a name="l01299"></a>01299     <span class="keywordtype">double</span> fhat = (*it)-&gt;getSummary()[0]; <span class="comment">//hopefully this is a robust way to</span>
<a name="l01300"></a>01300                               <span class="comment">//get the needed value</span>
<a name="l01301"></a>01301     
<a name="l01302"></a>01302     <span class="comment">//cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l01303"></a>01303 
<a name="l01304"></a>01304     <span class="keywordtype">size_t</span> L = 0;
<a name="l01305"></a>01305     <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l01306"></a>01306       <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l01307"></a>01307       ivector trueBox = (*trueIt)-&gt;getBox();
<a name="l01308"></a>01308 
<a name="l01309"></a>01309       <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
<a name="l01310"></a>01310       <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
<a name="l01311"></a>01311       <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF &lt;&lt; &quot;------&quot; &lt;&lt; endl;</span>
<a name="l01312"></a>01312       
<a name="l01313"></a>01313       <span class="comment">// if this is contained in trueBox</span>
<a name="l01314"></a>01314       <span class="keywordflow">if</span> ( (*it)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*it)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l01315"></a>01315         <span class="comment">//use the volume of this</span>
<a name="l01316"></a>01316         real r = ((*it)-&gt;nodeVolume())*(fhat - trueF);
<a name="l01317"></a>01317         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01318"></a>01318         accumulate(dpIAE, abs(r), 1.0);
<a name="l01319"></a>01319         <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
<a name="l01320"></a>01320         <span class="comment">//think about this later</span>
<a name="l01321"></a>01321       } <span class="comment">//end of if this box is in trueBox</span>
<a name="l01322"></a>01322       
<a name="l01323"></a>01323       <span class="comment">// if this contains trueBox</span>
<a name="l01324"></a>01324       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*it)-&gt;getBox()) {
<a name="l01325"></a>01325         <span class="comment">//use the volume of trueBox</span>
<a name="l01326"></a>01326         real r = ((*trueIt)-&gt;nodeVolume())*(fhat - trueF);
<a name="l01327"></a>01327         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01328"></a>01328         accumulate(dpIAE, abs(r), 1.0);
<a name="l01329"></a>01329       } <span class="comment">//end of if trueBox is in this box</span>
<a name="l01330"></a>01330       
<a name="l01331"></a>01331       <span class="comment">// if this is partially contained in trueBox </span>
<a name="l01332"></a>01332       <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
<a name="l01333"></a>01333         <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
<a name="l01334"></a>01334           <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
<a name="l01335"></a>01335           real r = volume*(fhat - trueF);
<a name="l01336"></a>01336           <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l01337"></a>01337           accumulate(dpIAE, abs(r), 1.0);
<a name="l01338"></a>01338         }
<a name="l01339"></a>01339       }
<a name="l01340"></a>01340       L++;
<a name="l01341"></a>01341     } <span class="comment">// end of going through trueBoxes</span>
<a name="l01342"></a>01342   } <span class="comment">// end of going through thisBoxes</span>
<a name="l01343"></a>01343   
<a name="l01344"></a>01344    <span class="comment">//cast dotprecision to real</span>
<a name="l01345"></a>01345    real unifIAE = rnd(dpIAE);
<a name="l01346"></a>01346   <span class="keywordflow">return</span> unifIAE;                             
<a name="l01347"></a>01347 
<a name="l01348"></a>01348 } <span class="comment">//end of function getUnifIAE()</span>
<a name="l01349"></a>01349 
<a name="l01352"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ad9bbae8e4f70d6c40684ab60038807bc">01352</a> real <a class="code" href="Coverage_8cpp.shtml#aa761d6c65ae1def2134f8829dd6be8fd">AdaptiveHistogramCollator::getUnifIAE</a>()
<a name="l01353"></a>01353 {
<a name="l01354"></a>01354   <span class="comment">// setting up containers for the leaves</span>
<a name="l01355"></a>01355   vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l01356"></a>01356   vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
<a name="l01357"></a>01357   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l01358"></a>01358 
<a name="l01359"></a>01359    dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l01360"></a>01360    dpIAE=0.0;
<a name="l01361"></a>01361    <span class="comment">//go through all the leaves in this</span>
<a name="l01362"></a>01362    <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01363"></a>01363       <span class="comment">// get the height of this leaf</span>
<a name="l01364"></a>01364       <span class="comment">// the height is contained in the first position of the summary vector</span>
<a name="l01365"></a>01365       <span class="comment">// so we need to access the vector</span>
<a name="l01366"></a>01366       <span class="keywordtype">double</span> fhat = (*it)-&gt;getSummary()[0]; <span class="comment">//hopefully this is a robust way to</span>
<a name="l01367"></a>01367                               <span class="comment">//get the needed value</span>
<a name="l01368"></a>01368     <span class="comment">// cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l01369"></a>01369 
<a name="l01370"></a>01370     <span class="comment">//now calculate the IAE</span>
<a name="l01371"></a>01371       <span class="keywordflow">if</span> ((1 - fhat) &lt; 0.0){
<a name="l01372"></a>01372       real r = ((*it)-&gt;nodeVolume())*(fhat - 1);
<a name="l01373"></a>01373       <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
<a name="l01374"></a>01374       accumulate(dpIAE, r, 1.0);
<a name="l01375"></a>01375     }
<a name="l01376"></a>01376 
<a name="l01377"></a>01377     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((1 - fhat) &gt; 0.0){
<a name="l01378"></a>01378       real r = ((*it)-&gt;nodeVolume())*(1 - fhat);
<a name="l01379"></a>01379       <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
<a name="l01380"></a>01380       accumulate(dpIAE, r, 1.0);
<a name="l01381"></a>01381     }
<a name="l01382"></a>01382   } <span class="comment">// end of going through all the leaves in this</span>
<a name="l01383"></a>01383 
<a name="l01384"></a>01384    <span class="comment">//cast dotprecision to real</span>
<a name="l01385"></a>01385    real unifIAE = rnd(dpIAE);
<a name="l01386"></a>01386   <span class="keywordflow">return</span> unifIAE;
<a name="l01387"></a>01387 } <span class="comment">//end of function getUnifIAE()</span>
<a name="l01388"></a>01388 
<a name="l01389"></a>01389 <span class="comment">// Get the IAE for a finite gaussian mixture distribution using interval </span>
<a name="l01390"></a>01390 <span class="comment">// techniques.</span>
<a name="l01391"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2173c80c47c7758c67e5f014f92893e3">01391</a> cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2173c80c47c7758c67e5f014f92893e3">AdaptiveHistogramCollator::getFinMixIntervalIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l01392"></a>01392 {
<a name="l01393"></a>01393   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l01394"></a>01394   
<a name="l01395"></a>01395   <span class="comment">// need to iterate through the leaves</span>
<a name="l01396"></a>01396   vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l01397"></a>01397   vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
<a name="l01398"></a>01398   getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l01399"></a>01399   
<a name="l01400"></a>01400   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l01401"></a>01401   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01402"></a>01402     <span class="comment">//cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;</span>
<a name="l01403"></a>01403     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l01404"></a>01404     vector&lt;intervalw&gt; rootVec;
<a name="l01405"></a>01405     
<a name="l01406"></a>01406     <span class="comment">//get the height in this leaf node</span>
<a name="l01407"></a>01407     <span class="keywordtype">double</span> fhat = ((*it)-&gt;getSummary())[0];
<a name="l01408"></a>01408     <span class="comment">//get the box of this leaf node</span>
<a name="l01409"></a>01409     ivector thisBox = (*it)-&gt;getBox();
<a name="l01410"></a>01410     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l01411"></a>01411     
<a name="l01412"></a>01412     <span class="comment">//---------find the root at this domain</span>
<a name="l01413"></a>01413     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l01414"></a>01414     rvector lb = Inf(thisBox);
<a name="l01415"></a>01415     rvector ub = Sup(thisBox);
<a name="l01416"></a>01416     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l01417"></a>01417     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l01418"></a>01418     
<a name="l01419"></a>01419     <span class="comment">// find the root</span>
<a name="l01420"></a>01420     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l01421"></a>01421     <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 
<a name="l01422"></a>01422 
<a name="l01423"></a>01423     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l01424"></a>01424     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l01425"></a>01425     <span class="comment">//this domain</span>
<a name="l01426"></a>01426     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l01427"></a>01427       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l01428"></a>01428       <span class="comment">//get the L1 error</span>
<a name="l01429"></a>01429       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01430"></a>01430       <span class="comment">//add to totalArea</span>
<a name="l01431"></a>01431       totalArea += diffArea;
<a name="l01432"></a>01432     } <span class="comment">//end of rootVec is empty</span>
<a name="l01433"></a>01433 
<a name="l01434"></a>01434     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l01435"></a>01435       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l01436"></a>01436       <span class="comment">// make the elements in vector unique</span>
<a name="l01437"></a>01437       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l01438"></a>01438         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l01439"></a>01439         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l01440"></a>01440         uniqueRootVec.push_back(rootVec[i]);
<a name="l01441"></a>01441         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l01442"></a>01442         <span class="comment">//now check for uniqueness</span>
<a name="l01443"></a>01443         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l01444"></a>01444           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l01445"></a>01445           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l01446"></a>01446           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l01447"></a>01447             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l01448"></a>01448             uniqueRootVec.pop_back(); }
<a name="l01449"></a>01449         }
<a name="l01450"></a>01450       }
<a name="l01451"></a>01451       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l01452"></a>01452 
<a name="l01453"></a>01453       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l01454"></a>01454       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l01455"></a>01455         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l01456"></a>01456         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l01457"></a>01457         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l01458"></a>01458             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l01459"></a>01459           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l01460"></a>01460           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01461"></a>01461           totalArea += diffArea;
<a name="l01462"></a>01462         }
<a name="l01463"></a>01463         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l01464"></a>01464           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l01465"></a>01465           <span class="comment">//get the left sub-interval</span>
<a name="l01466"></a>01466           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l01467"></a>01467           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l01468"></a>01468           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01469"></a>01469           totalArea += diffArea;
<a name="l01470"></a>01470           
<a name="l01471"></a>01471           <span class="comment">//get the right sub-interval</span>
<a name="l01472"></a>01472           <span class="comment">//get the left sub-interval</span>
<a name="l01473"></a>01473           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l01474"></a>01474           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l01475"></a>01475           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01476"></a>01476           totalArea += diffArea;
<a name="l01477"></a>01477         }
<a name="l01478"></a>01478       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l01479"></a>01479 
<a name="l01480"></a>01480         <span class="comment">// if there is more than 1 root</span>
<a name="l01481"></a>01481       <span class="keywordflow">else</span> {
<a name="l01482"></a>01482         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l01483"></a>01483         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l01484"></a>01484           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l01485"></a>01485         <span class="comment">//}</span>
<a name="l01486"></a>01486 
<a name="l01487"></a>01487         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l01488"></a>01488         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l01489"></a>01489         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l01490"></a>01490           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01491"></a>01491           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l01492"></a>01492           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01493"></a>01493           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01494"></a>01494           totalArea += diffArea;
<a name="l01495"></a>01495           
<a name="l01496"></a>01496           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01497"></a>01497           <span class="comment">// get the sub-itnervals</span>
<a name="l01498"></a>01498           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01499"></a>01499           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01500"></a>01500             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l01501"></a>01501             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01502"></a>01502               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01503"></a>01503               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01504"></a>01504               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01505"></a>01505               totalArea += diffArea;
<a name="l01506"></a>01506             }
<a name="l01507"></a>01507             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01508"></a>01508               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01509"></a>01509               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01510"></a>01510               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01511"></a>01511               totalArea += diffArea;
<a name="l01512"></a>01512             }
<a name="l01513"></a>01513           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l01514"></a>01514           
<a name="l01515"></a>01515           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01516"></a>01516           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01517"></a>01517             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01518"></a>01518             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01519"></a>01519             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01520"></a>01520             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01521"></a>01521             totalArea += diffArea;
<a name="l01522"></a>01522           }
<a name="l01523"></a>01523           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01524"></a>01524             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01525"></a>01525             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01526"></a>01526             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01527"></a>01527             totalArea += diffArea;
<a name="l01528"></a>01528           } 
<a name="l01529"></a>01529         } <span class="comment">// end of if first root is the boundary</span>
<a name="l01530"></a>01530         
<a name="l01531"></a>01531         <span class="keywordflow">else</span> {
<a name="l01532"></a>01532           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l01533"></a>01533           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l01534"></a>01534           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l01535"></a>01535           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l01536"></a>01536           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01537"></a>01537           totalArea += diffArea;
<a name="l01538"></a>01538           
<a name="l01539"></a>01539           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l01540"></a>01540           <span class="comment">// get the sub-itnervals</span>
<a name="l01541"></a>01541           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l01542"></a>01542           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l01543"></a>01543             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l01544"></a>01544               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l01545"></a>01545               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l01546"></a>01546               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01547"></a>01547               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01548"></a>01548               totalArea += diffArea;
<a name="l01549"></a>01549             }
<a name="l01550"></a>01550             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l01551"></a>01551               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l01552"></a>01552               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l01553"></a>01553               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l01554"></a>01554               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01555"></a>01555               totalArea += diffArea;
<a name="l01556"></a>01556             }
<a name="l01557"></a>01557           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l01558"></a>01558           
<a name="l01559"></a>01559           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l01560"></a>01560           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l01561"></a>01561             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l01562"></a>01562             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l01563"></a>01563             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01564"></a>01564             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01565"></a>01565           }
<a name="l01566"></a>01566           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l01567"></a>01567             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l01568"></a>01568             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l01569"></a>01569             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l01570"></a>01570             totalArea += diffArea;
<a name="l01571"></a>01571           } 
<a name="l01572"></a>01572         } <span class="comment">// end of first root is not the boundary</span>
<a name="l01573"></a>01573       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l01574"></a>01574     } <span class="comment">// end of rootVec is not empty</span>
<a name="l01575"></a>01575 
<a name="l01576"></a>01576   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l01577"></a>01577   
<a name="l01578"></a>01578   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l01579"></a>01579   <span class="keywordflow">return</span> totalArea;
<a name="l01580"></a>01580 }
<a name="l01581"></a>01581 
<a name="l01582"></a>01582 
<a name="l01583"></a>01583 
<a name="l01584"></a>01584 
<a name="l01585"></a>01585 
<a name="l01586"></a>01586 
<a name="l01587"></a>01587 
<a name="l01588"></a>01588 
<a name="l01589"></a>01589 <span class="comment">// gloria addition </span>
<a name="l01592"></a>01592 <span class="comment"></span><span class="comment">/*cxsc::real AdaptiveHistogramCollator::getMappedIAE(RealMappedSPnode&amp; nodeEst, </span>
<a name="l01593"></a>01593 <span class="comment">                        ivector pavingBox) const</span>
<a name="l01594"></a>01594 <span class="comment">{</span>
<a name="l01595"></a>01595 <span class="comment">  RealMappedSPnode histMap(pavingBox);</span>
<a name="l01596"></a>01596 <span class="comment">  </span>
<a name="l01597"></a>01597 <span class="comment">  // split the root box into the shape of this </span>
<a name="l01598"></a>01598 <span class="comment">  string leafLevelString = getLeafLevelsString();</span>
<a name="l01599"></a>01599 <span class="comment">  int depth = atoi(leafLevelString.c_str());</span>
<a name="l01600"></a>01600 <span class="comment">      if (depth != 0) {</span>
<a name="l01601"></a>01601 <span class="comment">        histMap.splitToShape(leafLevelString); </span>
<a name="l01602"></a>01602 <span class="comment">  }</span>
<a name="l01603"></a>01603 <span class="comment"></span>
<a name="l01604"></a>01604 <span class="comment">  //container to store heights for histNodes </span>
<a name="l01605"></a>01605 <span class="comment">  vector&lt; RangeCollectionClass&lt;real&gt; &gt; heightHist;</span>
<a name="l01606"></a>01606 <span class="comment"></span>
<a name="l01607"></a>01607 <span class="comment">  //get all the nodes in the histogram </span>
<a name="l01608"></a>01608 <span class="comment">  vector&lt;CollatorSPnode*&gt; histNodes;</span>
<a name="l01609"></a>01609 <span class="comment">  vector&lt;CollatorSPnode*&gt;::iterator histNodeIt;</span>
<a name="l01610"></a>01610 <span class="comment">  (*this).getSubPaving()-&gt;getAllNodes(histNodes); </span>
<a name="l01611"></a>01611 <span class="comment"></span>
<a name="l01612"></a>01612 <span class="comment">  vector&lt;double&gt;::iterator vecIt;</span>
<a name="l01613"></a>01613 <span class="comment">  </span>
<a name="l01614"></a>01614 <span class="comment">  //traverse the tree and get the heights </span>
<a name="l01615"></a>01615 <span class="comment">  for (histNodeIt = histNodes.begin(); histNodeIt &lt; histNodes.end(); </span>
<a name="l01616"></a>01616 <span class="comment">      histNodeIt++) {</span>
<a name="l01617"></a>01617 <span class="comment">    //get the height at each node</span>
<a name="l01618"></a>01618 <span class="comment">    RangeCollectionClass&lt;real&gt; height((*histNodeIt)-&gt;getSummary()[0]);</span>
<a name="l01619"></a>01619 <span class="comment">    heightHist.push_back(height);</span>
<a name="l01620"></a>01620 <span class="comment">  }</span>
<a name="l01621"></a>01621 <span class="comment"></span>
<a name="l01622"></a>01622 <span class="comment">  //allocate ranges for histNode</span>
<a name="l01623"></a>01623 <span class="comment">  histMap.allocateRanges(heightHist, 0);</span>
<a name="l01624"></a>01624 <span class="comment"></span>
<a name="l01625"></a>01625 <span class="comment">  return nodeEst.getMappedSPIAE(histMap);</span>
<a name="l01626"></a>01626 <span class="comment">}</span>
<a name="l01627"></a>01627 <span class="comment">*/</span>
<a name="l01628"></a>01628 
<a name="l01629"></a>01629 <span class="comment">//gat41</span>
<a name="l01630"></a>01630 <span class="comment">// get delta for each node(or union of nodes). </span>
<a name="l01631"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234">01631</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234" title="Returns the IAE between an AdaptiveHistogram object and a RealMappedSPnode.">AdaptiveHistogramCollator::getNodesDelta</a>(
<a name="l01632"></a>01632 <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &amp; YatSet, <span class="keywordtype">int</span> thisTheta, <span class="keywordtype">size_t</span> sizeColl)
<a name="l01633"></a>01633 {
<a name="l01634"></a>01634   <span class="comment">// iterator for Yatracos set</span>
<a name="l01635"></a>01635   set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt;::iterator YatSetIt;  
<a name="l01636"></a>01636 
<a name="l01637"></a>01637   <span class="comment">//gloria - think about dotprecision summation</span>
<a name="l01638"></a>01638   
<a name="l01639"></a>01639   <span class="comment">//initialization</span>
<a name="l01640"></a>01640   <span class="keywordtype">double</span> delta = 0;
<a name="l01641"></a>01641   <span class="comment">//dotprecision deltaDP = 0;</span>
<a name="l01642"></a>01642   
<a name="l01643"></a>01643   <span class="comment">//go through each node in this set to get delta</span>
<a name="l01644"></a>01644   <span class="keywordflow">for</span> (YatSetIt = YatSet.begin(); YatSetIt != YatSet.end(); YatSetIt++) {
<a name="l01645"></a>01645     <span class="comment">//cout &lt;&lt; (*YatSetIt)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01646"></a>01646     <span class="comment">//cout &lt;&lt; &quot;union &quot; &lt;&lt; endl;</span>
<a name="l01647"></a>01647     delta += (*YatSetIt)-&gt;getNodeDelta(thisTheta, sizeColl);
<a name="l01648"></a>01648     <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
<a name="l01649"></a>01649    }
<a name="l01650"></a>01650    <span class="comment">//cout &lt;&lt; &quot;end of union&quot; &lt;&lt; endl;</span>
<a name="l01651"></a>01651 
<a name="l01652"></a>01652   <span class="comment">// take the absolute value of the sums</span>
<a name="l01653"></a>01653   <span class="comment">//cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; fabs(delta) &lt;&lt; endl;</span>
<a name="l01654"></a>01654   <span class="keywordflow">return</span> fabs(delta);
<a name="l01655"></a>01655 }
<a name="l01656"></a>01656 
<a name="l01657"></a>01657 <span class="comment">// Get Scheffe set from sub-pavings.</span>
<a name="l01658"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">01658</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">AdaptiveHistogramCollator::getHistScheffeSet</a>(
<a name="l01659"></a>01659     vector &lt; vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec)
<a name="l01660"></a>01660 {
<a name="l01661"></a>01661    <span class="comment">//=============end of setting up containers================================// </span>
<a name="l01662"></a>01662   <span class="keywordtype">int</span> numAdd = getNumberCollated()-1; <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l01663"></a>01663   <span class="comment">//cout &lt;&lt; &quot;getNumberCollated: &quot; &lt;&lt; numAdd &lt;&lt; endl;</span>
<a name="l01664"></a>01664   <span class="keywordtype">size_t</span> theta = numAdd-1; <span class="comment">// the current number of splits</span>
<a name="l01665"></a>01665 
<a name="l01666"></a>01666     <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l01667"></a>01667     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k=0; k &lt; numAdd; k++) {
<a name="l01668"></a>01668     vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; vecScheffeSet;
<a name="l01669"></a>01669       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt; numAdd; j++) {
<a name="l01670"></a>01670       <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k &lt; j) ) {
<a name="l01671"></a>01671         set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; currentScheffeSet;
<a name="l01672"></a>01672         cout &lt;&lt; <span class="stringliteral">&quot;k= &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;theta = &quot;</span> &lt;&lt; j &lt;&lt; endl;
<a name="l01673"></a>01673         getSubPaving()-&gt;getScheffeSet(currentScheffeSet, k, j);
<a name="l01674"></a>01674         <span class="comment">//if (currentScheffeSet.empty()) { cout &lt;&lt; &quot;nothing here&quot; &lt;&lt; endl; }</span>
<a name="l01675"></a>01675         vecScheffeSet.push_back(currentScheffeSet);
<a name="l01676"></a>01676       }
<a name="l01677"></a>01677     }
<a name="l01678"></a>01678     vecScheffeSetVec.push_back(vecScheffeSet);
<a name="l01679"></a>01679   } <span class="comment">// end of pairwise comparisons</span>
<a name="l01680"></a>01680 } <span class="comment">// end of function getHistScheffeSet</span>
<a name="l01681"></a>01681 
<a name="l01682"></a>01682 <span class="comment">// get delta_theta for all theta</span>
<a name="l01683"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">01683</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">AdaptiveHistogramCollator::getHistScheffeWinner</a>(
<a name="l01684"></a>01684     vector&lt; vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; &amp; vecScheffeSetVec, 
<a name="l01685"></a>01685     vector&lt; std::vector&lt;int&gt; &gt; &amp; vecWinnerVec,
<a name="l01686"></a>01686     vector&lt; std::vector&lt;double&gt; &gt; &amp; vecDeltaWinnerVec)
<a name="l01687"></a>01687 { 
<a name="l01688"></a>01688   <span class="keywordtype">size_t</span> sizeColl = getNumberCollated();
<a name="l01689"></a>01689   <span class="comment">// go through each ordered pair to get the winner</span>
<a name="l01690"></a>01690   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecScheffeSetVec.size(); i++) {
<a name="l01691"></a>01691     
<a name="l01692"></a>01692     vector&lt;int&gt; WinnerVec(vecScheffeSetVec[i].size());
<a name="l01693"></a>01693     vector&lt;double&gt; DeltaVec;
<a name="l01694"></a>01694 
<a name="l01695"></a>01695     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; vecScheffeSetVec[i].size(); j++) {
<a name="l01696"></a>01696 
<a name="l01697"></a>01697       <span class="keywordflow">if</span> ( vecScheffeSetVec[i][j].empty() ) {
<a name="l01698"></a>01698         <span class="comment">//size_t cand1 = i;</span>
<a name="l01699"></a>01699         <span class="comment">//size_t cand2 = j+i+1;</span>
<a name="l01700"></a>01700         WinnerVec[j] = (-1);
<a name="l01701"></a>01701         DeltaVec.push_back(-1*(numeric_limits&lt;double&gt;::infinity()));
<a name="l01702"></a>01702         <span class="comment">//cout &lt;&lt; &quot;no scheffe set at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l01703"></a>01703         <span class="comment">//cout &lt;&lt; &quot;========&quot; &lt;&lt; endl;</span>
<a name="l01704"></a>01704       } 
<a name="l01705"></a>01705     
<a name="l01706"></a>01706       <span class="keywordflow">else</span> {
<a name="l01707"></a>01707         <span class="comment">//cout &lt;&lt; &quot;scheffe at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l01708"></a>01708         <span class="keywordtype">size_t</span> cand1 = i;
<a name="l01709"></a>01709         <span class="keywordtype">size_t</span> cand2 = j+i+1;
<a name="l01710"></a>01710         cout &lt;&lt; cand1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; cand2 &lt;&lt; endl;
<a name="l01711"></a>01711 
<a name="l01712"></a>01712         <span class="comment">//cout &lt;&lt; &quot;----------get delta for &quot; &lt;&lt; cand1 &lt;&lt; endl;</span>
<a name="l01713"></a>01713         <span class="keywordtype">double</span> deltaI = getNodesDelta(vecScheffeSetVec[i][j], cand1, sizeColl);
<a name="l01714"></a>01714         <span class="comment">//cout &lt;&lt; &quot;---------get delta for &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
<a name="l01715"></a>01715         <span class="keywordtype">double</span> deltaJ = getNodesDelta(vecScheffeSetVec[i][j], cand2, sizeColl);
<a name="l01716"></a>01716 
<a name="l01717"></a>01717         <span class="comment">// perform competition</span>
<a name="l01718"></a>01718         <span class="keywordflow">if</span> ( deltaI &lt; deltaJ ) {
<a name="l01719"></a>01719           <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
<a name="l01720"></a>01720           cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; cand1 &lt;&lt; endl;
<a name="l01721"></a>01721           <span class="comment">// winner is i</span>
<a name="l01722"></a>01722           WinnerVec[j] = (1);
<a name="l01723"></a>01723           DeltaVec.push_back(deltaI);
<a name="l01724"></a>01724         }
<a name="l01725"></a>01725         <span class="keywordflow">else</span> { <span class="comment">// deltaTheta &gt;= delta </span>
<a name="l01726"></a>01726           <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
<a name="l01727"></a>01727           cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; cand2 &lt;&lt; endl;
<a name="l01728"></a>01728           WinnerVec[j] = (0);
<a name="l01729"></a>01729           DeltaVec.push_back(deltaJ);
<a name="l01730"></a>01730         }  <span class="comment">// end</span>
<a name="l01731"></a>01731       } <span class="comment">// end of set not empty</span>
<a name="l01732"></a>01732     } <span class="comment">// end of going through j</span>
<a name="l01733"></a>01733     vecWinnerVec.push_back(WinnerVec);
<a name="l01734"></a>01734     vecDeltaWinnerVec.push_back(DeltaVec);
<a name="l01735"></a>01735   } <span class="comment">// end of going through vecScheffeSet</span>
<a name="l01736"></a>01736 
<a name="l01737"></a>01737 } <span class="comment">// end of getHistScheffeWinner</span>
<a name="l01738"></a>01738 
<a name="l01739"></a>01739 
<a name="l01740"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">01740</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">AdaptiveHistogramCollator::getHistYatSet</a>(
<a name="l01741"></a>01741     vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &gt; &amp; vecYatSet)
<a name="l01742"></a>01742 {
<a name="l01743"></a>01743    <span class="comment">//=============end of setting up containers================================// </span>
<a name="l01744"></a>01744   <span class="keywordtype">int</span> numAdd = getNumberCollated()-1; <span class="comment">// the number of histograms collated including the 0-th histogram</span>
<a name="l01745"></a>01745   <span class="comment">// but not the last histogram as it is the validatino histogram</span>
<a name="l01746"></a>01746   <span class="comment">//============begin pairwise comparisons===================================//</span>
<a name="l01747"></a>01747   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k= 0; k &lt; numAdd; k++) {
<a name="l01748"></a>01748     <span class="comment">// get A_ij</span>
<a name="l01749"></a>01749       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; numAdd; j++) {
<a name="l01750"></a>01750       <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k&lt;j) ) {
<a name="l01751"></a>01751         set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; RowSet;
<a name="l01752"></a>01752         set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; ColSet;
<a name="l01753"></a>01753         <span class="comment">//cout &lt;&lt; &quot;k= &quot; &lt;&lt; k &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;theta = &quot; &lt;&lt; j &lt;&lt; endl;</span>
<a name="l01754"></a>01754         getSubPaving()-&gt;getYatSet(RowSet, ColSet, k, j);
<a name="l01755"></a>01755         vecYatSet.push_back(RowSet);
<a name="l01756"></a>01756         vecYatSet.push_back(ColSet);
<a name="l01757"></a>01757       }
<a name="l01758"></a>01758     }
<a name="l01759"></a>01759   } <span class="comment">// end of pairwise comparisons</span>
<a name="l01760"></a>01760 } <span class="comment">// end of function getHistScheffeSet</span>
<a name="l01761"></a>01761 
<a name="l01762"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af45e40508aa9d729f5923787c3717a40">01762</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af45e40508aa9d729f5923787c3717a40">AdaptiveHistogramCollator::getMinDistEst</a>(vector&lt;double&gt; &amp; maxDelta,  vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &gt; &amp; vecYatSet)
<a name="l01763"></a>01763 {
<a name="l01764"></a>01764   <span class="comment">//get the yatracos class for ALL the candidates</span>
<a name="l01765"></a>01765   getHistYatSet(vecYatSet); 
<a name="l01766"></a>01766   
<a name="l01767"></a>01767   <span class="comment">//get the maximum delta at each &quot;theta&quot; - here theta refers to the position of the</span>
<a name="l01768"></a>01768   <span class="comment">//candidate in the collator</span>
<a name="l01769"></a>01769   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; getNumberCollated(); i++) {
<a name="l01770"></a>01770     <span class="comment">//get the maximum delta at this candidate</span>
<a name="l01771"></a>01771     <span class="keywordtype">double</span> deltaMax = getNodesMaxDelta(vecYatSet, i);
<a name="l01772"></a>01772     maxDelta.push_back(deltaMax);
<a name="l01773"></a>01773   }
<a name="l01774"></a>01774 }
<a name="l01775"></a>01775 
<a name="l01776"></a>01776 <span class="comment">// get delta for each node(or union of nodes). </span>
<a name="l01777"></a>01777 <span class="comment">//think about dotprecision summation</span>
<a name="l01778"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a9ad5434670b0c8d57c7c3b9a7b9d006e">01778</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a9ad5434670b0c8d57c7c3b9a7b9d006e">AdaptiveHistogramCollator::getNodesMaxDelta</a>(
<a name="l01779"></a>01779       vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>*, less&lt;CollatorSPnode*&gt; &gt; &gt; &amp; vecYatSet, 
<a name="l01780"></a>01780       <span class="keywordtype">int</span> thisTheta)
<a name="l01781"></a>01781 {
<a name="l01782"></a>01782   <span class="comment">// iterators  </span>
<a name="l01783"></a>01783   vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt;::iterator YatSetIt;  
<a name="l01784"></a>01784 
<a name="l01785"></a>01785   <span class="keywordtype">double</span> DeltaMax = 0;
<a name="l01786"></a>01786   <span class="comment">//dotprecision deltaDP = 0;</span>
<a name="l01787"></a>01787   set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; YatSet;
<a name="l01788"></a>01788   
<a name="l01789"></a>01789   <span class="comment">//go through each node in this set to get delta</span>
<a name="l01790"></a>01790   <span class="keywordflow">for</span> (YatSetIt = vecYatSet.begin(); YatSetIt &lt; vecYatSet.end(); YatSetIt++){
<a name="l01791"></a>01791     <span class="keywordtype">double</span> delta = getNodesDelta((*YatSetIt), thisTheta, getNumberCollated());
<a name="l01792"></a>01792     <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
<a name="l01793"></a>01793     delta = fabs(delta);
<a name="l01794"></a>01794     DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
<a name="l01795"></a>01795     <span class="comment">//cout &lt;&lt; &quot;DeltaMax: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
<a name="l01796"></a>01796   }
<a name="l01797"></a>01797 
<a name="l01798"></a>01798   <span class="comment">// take the absolute value of the sums</span>
<a name="l01799"></a>01799   <span class="keywordflow">return</span> fabs(DeltaMax);
<a name="l01800"></a>01800   
<a name="l01801"></a>01801 }
<a name="l01802"></a>01802 
<a name="l01803"></a>01803 
<a name="l01804"></a>01804 <span class="comment">// ---------- end implementation of AdaptiveHistogramCollators -----------</span>
<a name="l01805"></a>01805 
<a name="l01806"></a>01806 <span class="comment">//Output all boxes in AdaptiveHistogramCollator adhc</span>
<a name="l01807"></a><a class="code" href="namespacesubpavings.shtml#a653a8836d9a2c6067d19fe172adda889">01807</a> std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l01808"></a>01808                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>&amp; adhc)
<a name="l01809"></a>01809 {
<a name="l01810"></a>01810     <span class="keywordflow">if</span> (NULL != adhc.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()) {
<a name="l01811"></a>01811         os &lt;&lt; (adhc.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>())-&gt;nodesAllOutput(os, 1) &lt;&lt; std::endl;
<a name="l01812"></a>01812     }
<a name="l01813"></a>01813 
<a name="l01814"></a>01814     <span class="keywordflow">return</span> os;
<a name="l01815"></a>01815 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogramcollator_8cpp.shtml">adaptivehistogramcollator.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:10 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
