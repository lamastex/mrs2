<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOutNormal.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOutNormal_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">HoldOutNormal.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_cdf.h&gt;</code><br/>
</div>
<p><a href="HoldOutNormal_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="HoldOutNormal_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="HoldOutNormal.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HoldOutNormal_8cpp_source.shtml#l00042">42</a> of file <a class="el" href="HoldOutNormal_8cpp_source.shtml">HoldOutNormal.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00341">subpavings::AdaptiveHistogramVCollator::getNumberCollated()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00709">subpavings::AdaptiveHistogramValidation::insertFromRVecForHoldOut()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00345">subpavings::AdaptiveHistogramVCollator::outputToTxtTabs()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">//==============set formatting for input to oss=============================</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);
    <span class="comment">//==========================================================================</span>
    
    <span class="comment">//============set up a random number generator for rvs======================</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    <span class="keywordtype">long</span> s = time (NULL) * getpid();
    gsl_rng_set(r, s);
    <span class="comment">//==========================================================================</span>

    <span class="comment">//===============initializations============================================</span>
    <span class="keywordtype">int</span> d = 1;  <span class="comment">// dimensions</span>
    <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">// total points from random number generator</span>
    <span class="keywordtype">int</span> m = n/3 ; <span class="comment">// number of points to hold out</span>
    
    <span class="comment">//define what distribution is used.</span>
    <span class="keywordtype">int</span> distr = 2; 
    <span class="keywordtype">int</span> mix = 1;
    <span class="comment">//==========================================================================</span>
     
    <span class="comment">// Note to gloria: remember to set this up to generate different finite mixtures</span>
    <span class="comment">// and also able to read into insertRVecForHoldOut</span>
    <span class="comment">//==============generate data=============================================== </span>
    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// container for data</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n; i++) {
        rvector thisrv(d);
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;=d; i++) {
          thisrv[i] = gsl_ran_gaussian(r, 1);
    <span class="comment">//      cout &lt;&lt; thisrv[i] &lt;&lt; endl;</span>
        }
        theData.push_back(thisrv);    <span class="comment">// put into big container</span>
    }
    cout &lt;&lt; <span class="stringliteral">&quot;Sample size = &quot;</span> &lt;&lt; theData.size() &lt;&lt; endl;
   <span class="comment">//===========================================================================</span>

   <span class="comment">//==============start priorityStageSplit=====================================</span>
    <span class="comment">// indicators</span>
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
  
    <span class="comment">//make an Adaptive Histogram object</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist;
  
    <span class="comment">//maximum number of points in each leaf box        </span>
    <span class="keywordtype">int</span> finalK = 1;
    <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(finalK);
    <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
       
    <span class="comment">// now split with priority queue</span>
    <span class="comment">// Stopping Criteria: critCount</span>
    <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
    <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);
    cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Running hold out estimation for a normal distribution...&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Max k is: &quot;</span> &lt;&lt; finalK &lt;&lt; endl; 
    cout &lt;&lt; <span class="stringliteral">&quot;Performing hold-out estimation: &quot;</span> &lt;&lt; endl;
   
    <span class="comment">// Put the data from the container into the histogram  </span>
    <span class="comment">// Note: number of points to be hold out is by brute force at the moment. Consider putting in as argument.</span>
    <span class="keywordtype">int</span> holdOutCount = int(n*1.0/(3*1.0));
    successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    <span class="comment">//successfulInsertion = myHist.insertFromRVecForHoldOut(theData, splitK, NOLOG);</span>
 
    <span class="comment">/*   // optional output for counters in leaf boxes</span>
<span class="comment">        cout &lt;&lt; myHist.getSubPaving() &lt;&lt; endl;</span>
<span class="comment">  SPSVnodePtrs leaves; // set up empty container for leaf node pointers</span>
<span class="comment">  SPSVnodePtrsItr it; // and an iterator over the container</span>
<span class="comment">  myHist.getSubPaving()-&gt;getLeaves(leaves); // fill the container</span>
<span class="comment">  // container is filled by reading leaves off tree from left to right</span>
<span class="comment">  // a container for the counts</span>
<span class="comment">  IntVec counts;  // IntVec is a typedef for vector&lt;int&gt;</span>
<span class="comment">                            // the iterator is typedefed as IntVecItr</span>
<span class="comment">          for(it = leaves.begin(); it &lt; leaves.end(); it++) {</span>
<span class="comment">        // remember that it points to a pointer, so *it is still a ptr</span>
<span class="comment">            // get the counts in all the leaves</span>
<span class="comment">        cout &lt;&lt; &quot;Counter \t VCounter\n&quot; &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t\t&quot; &lt;&lt; (*it)-&gt;getVcounter() &lt;&lt; endl;</span>
<span class="comment">      }</span>
<span class="comment">  */</span>  <span class="comment">// end of optional output</span>
   
   
   <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
       <span class="comment">//create an AdaptiveHistogramCollator object</span>
       <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
    
       <span class="comment">//start the clock</span>
       clock_t start, end;
       start = clock();
       
       <span class="comment">//start the hold out estimation</span>
       <span class="comment">//tolerance for stopping criteria</span>
       <span class="keywordtype">long</span> <span class="keywordtype">double</span> tol = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10.0, -2);
       coll=myHist.priorityStageSplit(nodeCompCount, critCount,                   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0, 0.0, tol, distr, mix);

       <span class="comment">//output time taken</span>
       end = clock();
       <span class="keywordtype">double</span> timing;
       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
 
      <span class="comment">//cout &lt;&lt; coll &lt;&lt; endl;</span>
      <span class="keywordtype">int</span> numberCollated = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();
      cout &lt;&lt; numberCollated &lt;&lt; <span class="stringliteral">&quot; histograms collated.&quot;</span> &lt;&lt; endl;
      
      <span class="comment">//output the collator to a .txt file</span>
      coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;CollatorHistogram.txt&quot;</span>); 
  } <span class="comment">// remember to remove this curly bracket </span>
  <span class="comment">/*  </span>
<span class="comment">   //===========================================================================</span>
<span class="comment">   </span>
<span class="comment">   //===================make regular histograms================================= </span>
<span class="comment">   //get the root box made using the data</span>
<span class="comment">  ivector pavingBox = coll.getRootBox();   </span>
<span class="comment">  cout &lt;&lt; &quot;\n Make regular histogram: &quot; &lt;&lt; endl;</span>
<span class="comment">  RegHist myRegHist;</span>
<span class="comment">  myRegHist = makeRegularHist(theData, pavingBox);</span>
<span class="comment">  </span>
<span class="comment">   //cout &lt;&lt; &quot;get the IAE of the regular histogram: &quot; &lt;&lt; endl;</span>
<span class="comment">  real regHistIAE;</span>
<span class="comment">  regHistIAE = getRegHistFinMixIAE(mix, n, myRegHist.theBoxes, </span>
<span class="comment">                                   myRegHist.heights, myRegHist.binwidth);</span>
<span class="comment">                        </span>
<span class="comment">  //output IAE to .txt file------------------</span>
<span class="comment">  ofstream os;         // ofstream object</span>
<span class="comment">   os &lt;&lt; scientific;  // set formatting for input to oss</span>
<span class="comment">   os.precision(5);</span>
<span class="comment">  </span>
<span class="comment">  string outputFileName;// for output file</span>
<span class="comment">  outputFileName = &quot;IAERegHist.txt&quot;;</span>
<span class="comment">  os.open(outputFileName.c_str());</span>
<span class="comment">  os &lt;&lt; regHistIAE &lt;&lt; endl;</span>
<span class="comment">  os &lt;&lt; flush;</span>
<span class="comment">  os.close();</span>
<span class="comment">  std::cout &lt;&lt; &quot;IAE output to &quot; &lt;&lt; outputFileName &lt;&lt; endl;</span>
<span class="comment">  </span>
<span class="comment">  </span>
<span class="comment">  } // end of successful insertion                      </span>
<span class="comment">    </span>
<span class="comment">  </span>
<span class="comment">  //free the rng</span>
<span class="comment">  gsl_rng_free(r);</span>
<span class="comment">  */</span>
<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOutNormal_8cpp.shtml">HoldOutNormal.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
