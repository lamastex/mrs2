<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSampling.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('IAECalculations_2MappedSPSampling_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">IAECalculations/MappedSPSampling.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="IAECalculations_2MappedSPSampling_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* s</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> * </span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> * </span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="IAECalculations_2FinMixFobj_8hpp.shtml">FinMixFobj.hpp</a>&quot;</span> <span class="comment">//function objects</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj1D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj1D.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj2D.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj10D.hpp</a>&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj100D.hpp</a>&quot;</span>
<a name="l00034"></a>00034 <span class="comment">//#include &quot;GaussianFobj1000D.hpp&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj2D.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj10D.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj100D.hpp</a>&quot;</span>
<a name="l00039"></a>00039 <span class="comment">//#include &quot;RosenFobj1000D.hpp&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="LevyFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">LevyFobj2D.hpp</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span> <span class="comment">// to use gsl_ran_discrete_preproc</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;valarray&gt;</span> 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//draw unif box</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>std;
<a name="l00056"></a>00056 <span class="keyword">using namespace </span>subpavings;
<a name="l00057"></a>00057 
<a name="l00060"></a>00060 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00061"></a>00061 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   <span class="keyword">public</span>:
<a name="l00064"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00064</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00065"></a>00065       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00066"></a>00066     }
<a name="l00067"></a>00067 };
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">//==========Functions=====================================================//</span>
<a name="l00070"></a>00070 <span class="comment">//to output MappedSPnode to .txt file</span>
<a name="l00071"></a><a class="code" href="IAECalculations_2MappedSPSampling_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00071</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073    <span class="comment">// To generate a file output</span>
<a name="l00074"></a>00074    ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00075"></a>00075    <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00076"></a>00076       node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00077"></a>00077       std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
<a name="l00078"></a>00078                &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00079"></a>00079          os.close();
<a name="l00080"></a>00080       }
<a name="l00081"></a>00081    <span class="keywordflow">else</span> {
<a name="l00082"></a>00082       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00083"></a>00083          &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00084"></a>00084    }
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="comment">//function to iterate through the leaves and get weights and boxes</span>
<a name="l00088"></a><a class="code" href="IAECalculations_2MappedSPSampling_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">00088</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;double&gt;&amp; WeightsVector)
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00091"></a>00091      
<a name="l00092"></a>00092      <span class="comment">//get the weights</span>
<a name="l00093"></a>00093      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00094"></a>00094      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00095"></a>00095      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00096"></a>00096   }
<a name="l00097"></a>00097   <span class="comment">//recurse on the children</span>
<a name="l00098"></a>00098   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00099"></a>00099     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector);
<a name="l00100"></a>00100   }
<a name="l00101"></a>00101    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00102"></a>00102     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector);
<a name="l00103"></a>00103    }
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">//function to iterate through the leaves and get heights and boxes</span>
<a name="l00107"></a><a class="code" href="IAECalculations_2MappedSPSampling_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">00107</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;ivector&gt;&amp; BoxVector,
<a name="l00108"></a>00108            vector&lt;real&gt;&amp; HeightsVector)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00111"></a>00111      <span class="comment">//push back this box into the BoxVector</span>
<a name="l00112"></a>00112      BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00113"></a>00113      
<a name="l00114"></a>00114      <span class="comment">//get the heights</span>
<a name="l00115"></a>00115      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00116"></a>00116      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00117"></a>00117      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
<a name="l00118"></a>00118   }
<a name="l00119"></a>00119   <span class="comment">//recurse on the children</span>
<a name="l00120"></a>00120   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00121"></a>00121     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
<a name="l00122"></a>00122   }
<a name="l00123"></a>00123    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00124"></a>00124     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
<a name="l00125"></a>00125    }
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">// normalize the heights</span>
<a name="l00129"></a><a class="code" href="IAECalculations_2MappedSPSampling_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">00129</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, <span class="keywordtype">double</span> totalArea, 
<a name="l00130"></a>00130           vector&lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> &gt;&amp; heightNorm)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
<a name="l00133"></a>00133      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00134"></a>00134      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00135"></a>00135      real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
<a name="l00136"></a>00136      
<a name="l00137"></a>00137      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
<a name="l00138"></a>00138     heightNorm.push_back(height);
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140   <span class="comment">//recurse on the children</span>
<a name="l00141"></a>00141   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00142"></a>00142     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
<a name="l00143"></a>00143   }
<a name="l00144"></a>00144    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00145"></a>00145     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
<a name="l00146"></a>00146    }
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 <span class="comment">//=======================end of functions====================================//</span>
<a name="l00149"></a>00149 
<a name="l00150"></a><a class="code" href="IAECalculations_2MappedSPSampling_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00150</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00153"></a>00153   <span class="keywordflow">if</span> ( argc != 6 ) {
<a name="l00154"></a>00154     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: MappedFunctions n dataSeed dims lb ub&quot;</span> &lt;&lt; endl;
<a name="l00155"></a>00155     exit(0);
<a name="l00156"></a>00156   }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158    <span class="comment">//user inputs</span>
<a name="l00159"></a>00159     <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00160"></a>00160     <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00161"></a>00161     <span class="keywordtype">int</span> dims = atoi(argv[3]); <span class="comment">//which data set </span>
<a name="l00162"></a>00162 
<a name="l00163"></a>00163      <span class="comment">// Make sure tolerance for estimating function is not too small for the dimension </span>
<a name="l00164"></a>00164 <span class="comment">//  real tolFunction = 0.7;</span>
<a name="l00165"></a>00165   real tolFunction = 0.028141;
<a name="l00166"></a>00166 <span class="comment">//  real tolFunction = 0.999999;</span>
<a name="l00167"></a>00167 <span class="comment">//  real tolFunction = 0.0000568; </span>
<a name="l00168"></a>00168   <span class="keywordtype">double</span> lb = atof(argv[4]);
<a name="l00169"></a>00169   <span class="keywordtype">double</span> ub = atof(argv[5]);
<a name="l00170"></a>00170  
<a name="l00171"></a>00171 
<a name="l00172"></a>00172    <span class="comment">//string formatting</span>
<a name="l00173"></a>00173    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00174"></a>00174     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00175"></a>00175     oss.precision(10);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00178"></a>00178 
<a name="l00179"></a>00179    <span class="comment">//=========set up to estimate the function==============================// </span>
<a name="l00180"></a>00180     <span class="comment">//function object</span>
<a name="l00181"></a>00181   <a class="code" href="classGaussianFobj2D.shtml">GaussianFobj2D</a> realF;
<a name="l00182"></a>00182 <span class="comment">//  RosenFobj2D realF;</span>
<a name="l00183"></a>00183 <span class="comment">//  LevyFobj2D realF;</span>
<a name="l00184"></a>00184   <span class="comment">//  GaussianFobj10D realF;</span>
<a name="l00185"></a>00185       
<a name="l00186"></a>00186     <span class="comment">//make a root box</span>
<a name="l00187"></a>00187   cout &lt;&lt; <span class="stringliteral">&quot;make root box: &quot;</span> &lt;&lt; endl;
<a name="l00188"></a>00188    ivector pavingBox(dims);
<a name="l00189"></a>00189    interval pavingInterval(lb,ub);
<a name="l00190"></a>00190    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00191"></a>00191   cout &lt;&lt; <span class="stringliteral">&quot;Root box is &quot;</span> &lt;&lt; pavingBox &lt;&lt; endl;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00194"></a>00194    cout &lt;&lt; <span class="stringliteral">&quot;Estimate function:&quot;</span> &lt;&lt; endl;
<a name="l00195"></a>00195     <span class="comment">// estimate the function</span>
<a name="l00196"></a>00196    <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, tolFunction);
<a name="l00197"></a>00197    nodeEst.<a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(expander);
<a name="l00198"></a>00198    
<a name="l00199"></a>00199     cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; tolFunction &lt;&lt; endl;
<a name="l00200"></a>00200    cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves is: &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; endl;;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202    
<a name="l00203"></a>00203    <span class="comment">//output to .txt   </span>
<a name="l00204"></a>00204    <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunction.txt&quot;</span>;
<a name="l00205"></a>00205    <span class="comment">//output(filename, nodeEst);</span>
<a name="l00206"></a>00206    <span class="keywordtype">string</span> leafLevelEst = <span class="stringliteral">&quot;EstLeafLevel.txt&quot;</span>;
<a name="l00207"></a>00207    oss.open(leafLevelEst.c_str());
<a name="l00208"></a>00208    oss &lt;&lt; nodeEst.getLeafLevelsString() &lt;&lt; endl ;
<a name="l00209"></a>00209    oss &lt;&lt; flush;
<a name="l00210"></a>00210    oss.close();
<a name="l00211"></a>00211   <span class="comment">//=======================================================================//</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213    <span class="comment">//==================Get the weights of the boxes=========================//</span>
<a name="l00214"></a>00214    cout &lt;&lt; <span class="stringliteral">&quot;Getting boxes and weights:&quot;</span> &lt;&lt; endl;
<a name="l00215"></a>00215     vector&lt;ivector&gt; BoxVector;
<a name="l00216"></a>00216    vector&lt;real&gt; HeightsVector;
<a name="l00217"></a>00217    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodePtr;
<a name="l00218"></a>00218    nodePtr = &amp;nodeEst;
<a name="l00219"></a>00219    vector&lt;double&gt;* WeightsVectorPtr;
<a name="l00220"></a>00220    WeightsVectorPtr = <span class="keyword">new</span> vector&lt;double&gt;;
<a name="l00221"></a>00221    
<a name="l00222"></a>00222    <span class="comment">// iterate through the leaf nodes to get boxes and heights and weights</span>
<a name="l00223"></a>00223    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(nodePtr, BoxVector, HeightsVector);
<a name="l00224"></a>00224    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(nodePtr, *WeightsVectorPtr);
<a name="l00225"></a>00225    
<a name="l00226"></a>00226    <span class="comment">//now put elements of WeightsVector into an array of doubles</span>
<a name="l00227"></a>00227    <span class="keywordtype">size_t</span> sizeWeight =(*WeightsVectorPtr).size();
<a name="l00228"></a>00228    <span class="comment">//check that number of boxes &lt; 10^6</span>
<a name="l00229"></a>00229    <span class="keywordflow">if</span> (sizeWeight &gt; <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10,7)) { 
<a name="l00230"></a>00230       cerr &lt;&lt; <span class="stringliteral">&quot;Too many boxes (&quot;</span> &lt;&lt; sizeWeight &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; endl;
<a name="l00231"></a>00231       exit(1);
<a name="l00232"></a>00232    }
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">// normalize using heights</span>
<a name="l00235"></a>00235    <span class="keywordtype">double</span> totalArea = 0;
<a name="l00236"></a>00236    <span class="comment">//normalize the heights so that the function integrates to 1</span>
<a name="l00237"></a>00237    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00238"></a>00238     totalArea += (*WeightsVectorPtr)[i];
<a name="l00239"></a>00239    }
<a name="l00240"></a>00240   cout &lt;&lt; <span class="stringliteral">&quot;Total area: &quot;</span> &lt;&lt; totalArea &lt;&lt; endl; 
<a name="l00241"></a>00241    
<a name="l00242"></a>00242    <span class="comment">// very important - normalize the heights in nodeEst</span>
<a name="l00243"></a>00243    vector&lt; RangeCollectionClass&lt;real&gt; &gt;* heightNorm = <span class="keyword">new</span> vector&lt; RangeCollectionClass&lt;real&gt; &gt;;
<a name="l00244"></a>00244    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(nodePtr, totalArea, *heightNorm);
<a name="l00245"></a>00245    nodeEst.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(*heightNorm, 0);
<a name="l00246"></a>00246    filename = <span class="stringliteral">&quot;EstFunctionAfterNormalized.txt&quot;</span>;
<a name="l00247"></a>00247    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeEst);
<a name="l00248"></a>00248    
<a name="l00249"></a>00249    <span class="comment">//need to check that the weights equal to 1</span>
<a name="l00250"></a>00250    <span class="keywordtype">double</span> densityCheck = 0.0;
<a name="l00251"></a>00251     <span class="comment">//convert vector to array</span>
<a name="l00252"></a>00252    <span class="keywordtype">double</span> WeightsArray[sizeWeight];
<a name="l00253"></a>00253    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00254"></a>00254       WeightsArray[i] = (*WeightsVectorPtr)[i];
<a name="l00255"></a>00255       densityCheck += (*WeightsVectorPtr)[i]/totalArea;
<a name="l00256"></a>00256    }
<a name="l00257"></a>00257    
<a name="l00258"></a>00258   cout &lt;&lt; <span class="stringliteral">&quot;Total area after normalizing: &quot;</span> &lt;&lt; densityCheck &lt;&lt; endl;
<a name="l00259"></a>00259   <span class="comment">/*</span>
<a name="l00260"></a>00260 <span class="comment">  if ( (densityCheck != 1.0) ) {</span>
<a name="l00261"></a>00261 <span class="comment">    cout &lt;&lt; densityCheck &lt;&lt; endl; </span>
<a name="l00262"></a>00262 <span class="comment">    cerr &lt;&lt; &quot;Function does not integrate to 1. Need to normalize.&quot; &lt;&lt; endl; </span>
<a name="l00263"></a>00263 <span class="comment">    exit(0); </span>
<a name="l00264"></a>00264 <span class="comment">  }</span>
<a name="l00265"></a>00265 <span class="comment">  */</span>
<a name="l00266"></a>00266   
<a name="l00267"></a>00267    <span class="comment">//return to the system the memory that was pointed to by WeightsVectorPtr</span>
<a name="l00268"></a>00268    <span class="comment">// and heightNorm</span>
<a name="l00269"></a>00269    <span class="keyword">delete</span> WeightsVectorPtr;
<a name="l00270"></a>00270    <span class="keyword">delete</span> heightNorm;
<a name="l00271"></a>00271    
<a name="l00272"></a>00272     <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
<a name="l00273"></a>00273    <span class="comment">//i.e. the box indices with their weights</span>
<a name="l00274"></a>00274    gsl_ran_discrete_t* gslpdfstruct;
<a name="l00275"></a>00275    gslpdfstruct = gsl_ran_discrete_preproc(sizeWeight, WeightsArray);
<a name="l00276"></a>00276    <span class="comment">//===================end of getting box weights=======================//</span>
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   <span class="comment">//===================generate data===================================</span>
<a name="l00279"></a>00279   <span class="comment">// set up a random number generator to draw from weighted boxes</span>
<a name="l00280"></a>00280   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00281"></a>00281   gsl_rng * r;
<a name="l00282"></a>00282 
<a name="l00283"></a>00283   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00284"></a>00284   gsl_rng_env_setup();
<a name="l00285"></a>00285   T = gsl_rng_default;
<a name="l00286"></a>00286   r = gsl_rng_alloc (T);
<a name="l00287"></a>00287   <span class="comment">// set a seed for the data</span>
<a name="l00288"></a>00288   gsl_rng_set(r, dataSeed);
<a name="l00289"></a>00289 
<a name="l00290"></a>00290   <span class="comment">//now sample n data points from boxes given by the proposed indices</span>
<a name="l00291"></a>00291   cout &lt;&lt; <span class="stringliteral">&quot;Sample data points using weighted boxes:&quot;</span> &lt;&lt; endl;
<a name="l00292"></a>00292   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00293"></a>00293    <span class="comment">// make a simulated data set</span>
<a name="l00294"></a>00294   <span class="comment">// data sampled as weighted-uniform-mixtures</span>
<a name="l00295"></a>00295   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00296"></a>00296     rvector thisrv(dims);
<a name="l00297"></a>00297     <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
<a name="l00298"></a>00298     <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
<a name="l00299"></a>00299     thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r, BoxVector[proposedIndex]);
<a name="l00300"></a>00300     <span class="comment">// put points generated into container</span>
<a name="l00301"></a>00301     theData.push_back(thisrv);
<a name="l00302"></a>00302   }  <span class="comment">// data  should be in theData</span>
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     <span class="comment">/* optional output for data</span>
<a name="l00305"></a>00305 <span class="comment">    string dataFileName = &quot;FinMix&quot;;</span>
<a name="l00306"></a>00306 <span class="comment">    dataFileName += mix.str();</span>
<a name="l00307"></a>00307 <span class="comment">    dataFileName += &quot;Data&quot;; </span>
<a name="l00308"></a>00308 <span class="comment">    dataFileName += simNum.str();</span>
<a name="l00309"></a>00309 <span class="comment">    dataFileName += &quot;.txt&quot;; </span>
<a name="l00310"></a>00310 <span class="comment">    oss.open(dataFileName.c_str());</span>
<a name="l00311"></a>00311 <span class="comment">    RVecData::iterator theDataIt;</span>
<a name="l00312"></a>00312 <span class="comment">    for(theDataIt = theData.begin(); theDataIt &lt; theData.end(); theDataIt++){</span>
<a name="l00313"></a>00313 <span class="comment">      oss &lt;&lt; (*theDataIt) &lt;&lt; endl ;</span>
<a name="l00314"></a>00314 <span class="comment">    }</span>
<a name="l00315"></a>00315 <span class="comment">    oss &lt;&lt; flush;</span>
<a name="l00316"></a>00316 <span class="comment">    oss.close();</span>
<a name="l00317"></a>00317 <span class="comment">    */</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
<a name="l00320"></a>00320   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00321"></a>00321   cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
<a name="l00322"></a>00322   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
<a name="l00323"></a>00323   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
<a name="l00324"></a>00324 
<a name="l00325"></a>00325   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
<a name="l00326"></a>00326   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
<a name="l00329"></a>00329   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
<a name="l00330"></a>00330 
<a name="l00331"></a>00331   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
<a name="l00332"></a>00332   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="keywordtype">bool</span> successfulInsertion5 = <span class="keyword">false</span>;
<a name="l00335"></a>00335   <span class="keywordtype">bool</span> successfulPQSplit5 = <span class="keyword">false</span>;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337   <span class="keywordtype">bool</span> successfulInsertion6 = <span class="keyword">false</span>;
<a name="l00338"></a>00338   <span class="keywordtype">bool</span> successfulPQSplit6 = <span class="keyword">false</span>;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340   <span class="keywordtype">bool</span> successfulInsertion7 = <span class="keyword">false</span>;
<a name="l00341"></a>00341   <span class="keywordtype">bool</span> successfulPQSplit7 = <span class="keyword">false</span>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343   <span class="keywordtype">bool</span> successfulInsertion8 = <span class="keyword">false</span>;
<a name="l00344"></a>00344   <span class="keywordtype">bool</span> successfulPQSplit8 = <span class="keyword">false</span>;
<a name="l00345"></a>00345 
<a name="l00346"></a>00346 
<a name="l00347"></a>00347   <span class="comment">// containers for output needed</span>
<a name="l00348"></a>00348   vector&lt;real&gt; IAEOpt;
<a name="l00349"></a>00349   vector&lt;int&gt; NumLeafNodesOpt;
<a name="l00350"></a>00350   
<a name="l00351"></a>00351   real IAE1=100.0;
<a name="l00352"></a>00352   <span class="keywordtype">int</span> NumLeafNodes1;
<a name="l00353"></a>00353   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
<a name="l00354"></a>00354   vector&lt;double&gt; Times1;
<a name="l00355"></a>00355 
<a name="l00356"></a>00356   real IAE2=100.0;
<a name="l00357"></a>00357   <span class="keywordtype">int</span> NumLeafNodes2;
<a name="l00358"></a>00358   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
<a name="l00359"></a>00359   vector&lt;double&gt; Times2;
<a name="l00360"></a>00360 
<a name="l00361"></a>00361   real IAE3=100.0;
<a name="l00362"></a>00362   <span class="keywordtype">int</span> NumLeafNodes3;
<a name="l00363"></a>00363   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
<a name="l00364"></a>00364    vector&lt;double&gt; Times3;
<a name="l00365"></a>00365    
<a name="l00366"></a>00366   real IAE4=100.0;
<a name="l00367"></a>00367   <span class="keywordtype">int</span> NumLeafNodes4;
<a name="l00368"></a>00368   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
<a name="l00369"></a>00369   vector&lt;double&gt; Times4;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   real IAE5=100.0;
<a name="l00372"></a>00372   <span class="keywordtype">int</span> NumLeafNodes5;
<a name="l00373"></a>00373   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist5;
<a name="l00374"></a>00374   vector&lt;double&gt; Times5;
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   real IAE6=100.0;
<a name="l00377"></a>00377   <span class="keywordtype">int</span> NumLeafNodes6;
<a name="l00378"></a>00378   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist6;
<a name="l00379"></a>00379   vector&lt;double&gt; Times6;
<a name="l00380"></a>00380 
<a name="l00381"></a>00381   real IAE7=100.0;
<a name="l00382"></a>00382   <span class="keywordtype">int</span> NumLeafNodes7;
<a name="l00383"></a>00383   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist7;
<a name="l00384"></a>00384    vector&lt;double&gt; Times7;
<a name="l00385"></a>00385    
<a name="l00386"></a>00386   real IAE8=100.0;
<a name="l00387"></a>00387   <span class="keywordtype">int</span> NumLeafNodes8;
<a name="l00388"></a>00388   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist8;
<a name="l00389"></a>00389   vector&lt;double&gt; Times8;
<a name="l00390"></a>00390 
<a name="l00391"></a>00391   <span class="comment">//do exhaustive PQ for steps of n*0.005</span>
<a name="l00392"></a>00392   <span class="comment">// set up function objects for a priority split</span>
<a name="l00393"></a>00393   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00394"></a>00394   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
<a name="l00395"></a>00395   <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
<a name="l00396"></a>00396   <a class="code" href="classsubpavings_1_1CompMeanMass.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMass</a> compMeanMass;
<a name="l00397"></a>00397   <a class="code" href="classsubpavings_1_1CompCovarMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarMass</a> compCovarMass;
<a name="l00398"></a>00398   <a class="code" href="classsubpavings_1_1CompHellingerDistMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMass</a> compHDMass;
<a name="l00399"></a>00399   <a class="code" href="classsubpavings_1_1CompHellingerDistMassDiam.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMassDiam</a> compHDMassDiam;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
<a name="l00402"></a>00402   
<a name="l00403"></a>00403   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
<a name="l00404"></a>00404   
<a name="l00405"></a>00405     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1(pavingBox); 
<a name="l00406"></a>00406     successfulInsertion1= myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00407"></a>00407     
<a name="l00408"></a>00408     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2(pavingBox); 
<a name="l00409"></a>00409     successfulInsertion2= myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00410"></a>00410     
<a name="l00411"></a>00411     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3(pavingBox); 
<a name="l00412"></a>00412     successfulInsertion3= myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00413"></a>00413     
<a name="l00414"></a>00414     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4(pavingBox); 
<a name="l00415"></a>00415     successfulInsertion4= myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00416"></a>00416     
<a name="l00417"></a>00417     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist5(pavingBox, holdAllStats); 
<a name="l00418"></a>00418     successfulInsertion5= myHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00419"></a>00419     
<a name="l00420"></a>00420     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist6(pavingBox, holdAllStats); 
<a name="l00421"></a>00421     successfulInsertion6= myHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00422"></a>00422     
<a name="l00423"></a>00423     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist7(pavingBox, holdAllStats); 
<a name="l00424"></a>00424     successfulInsertion7= myHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00425"></a>00425     
<a name="l00426"></a>00426     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist8(pavingBox, holdAllStats); 
<a name="l00427"></a>00427     successfulInsertion8= myHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00428"></a>00428 
<a name="l00429"></a>00429     <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
<a name="l00430"></a>00430         &amp;&amp; successfulInsertion4 &amp;&amp; successfulInsertion5 &amp;&amp; 
<a name="l00431"></a>00431         successfulInsertion6 &amp;&amp; successfulInsertion7
<a name="l00432"></a>00432         &amp;&amp; successfulInsertion8) {
<a name="l00433"></a>00433 
<a name="l00434"></a>00434       <span class="keywordtype">int</span> finalK = int(i*0.005*n);
<a name="l00435"></a>00435       cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00436"></a>00436       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00437"></a>00437       <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00438"></a>00438       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00439"></a>00439 
<a name="l00440"></a>00440       <span class="keywordtype">size_t</span> maxLeafNodes = n;
<a name="l00441"></a>00441       <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00442"></a>00442       
<a name="l00443"></a>00443       <span class="comment">// we want to check the timings for this</span>
<a name="l00444"></a>00444       clock_t start, end;
<a name="l00445"></a>00445       <span class="keywordtype">double</span> timing; 
<a name="l00446"></a>00446       
<a name="l00447"></a>00447       <span class="comment">// do the priority split for compCount</span>
<a name="l00448"></a>00448       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00449"></a>00449       successfulPQSplit1 = myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00450"></a>00450            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00451"></a>00451       end = clock();
<a name="l00452"></a>00452       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00453"></a>00453       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00454"></a>00454       Times1.push_back(timing);
<a name="l00455"></a>00455       
<a name="l00456"></a>00456       <span class="comment">// do the priority split for compVol</span>
<a name="l00457"></a>00457       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00458"></a>00458       successfulPQSplit2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compVol,
<a name="l00459"></a>00459            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00460"></a>00460       end = clock();
<a name="l00461"></a>00461       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00462"></a>00462       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00463"></a>00463       Times2.push_back(timing);
<a name="l00464"></a>00464       
<a name="l00465"></a>00465       <span class="comment">// do the priority split for compVol and remove empty boxes</span>
<a name="l00466"></a>00466       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00467"></a>00467       successfulPQSplit3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compVol,
<a name="l00468"></a>00468            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00469"></a>00469       end = clock();
<a name="l00470"></a>00470       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00471"></a>00471       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00472"></a>00472       Times3.push_back(timing);
<a name="l00473"></a>00473       
<a name="l00474"></a>00474       <span class="comment">// do the priority split for compMassVol</span>
<a name="l00475"></a>00475       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00476"></a>00476       successfulPQSplit4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compArea,
<a name="l00477"></a>00477            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00478"></a>00478       end = clock();
<a name="l00479"></a>00479       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00480"></a>00480       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00481"></a>00481       Times4.push_back(timing);
<a name="l00482"></a>00482 
<a name="l00483"></a>00483       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00484"></a>00484       cout &lt;&lt; <span class="stringliteral">&quot;Comparing mean mass remove empty: &quot;</span> &lt;&lt; endl;
<a name="l00485"></a>00485       successfulPQSplit5 = myHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compMeanMass,
<a name="l00486"></a>00486            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00487"></a>00487       end = clock();
<a name="l00488"></a>00488       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00489"></a>00489       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00490"></a>00490       Times5.push_back(timing);
<a name="l00491"></a>00491       
<a name="l00492"></a>00492       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00493"></a>00493       cout &lt;&lt; <span class="stringliteral">&quot;Comparing covar mass remove empty box &quot;</span> &lt;&lt; endl;
<a name="l00494"></a>00494       successfulPQSplit6 = myHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compCovarMass,
<a name="l00495"></a>00495            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00496"></a>00496       end = clock();
<a name="l00497"></a>00497       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00498"></a>00498       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00499"></a>00499       Times6.push_back(timing);
<a name="l00500"></a>00500       
<a name="l00501"></a>00501       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00502"></a>00502       cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass remove empty box&quot;</span> &lt;&lt; endl;
<a name="l00503"></a>00503       successfulPQSplit7 = myHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compHDMass,
<a name="l00504"></a>00504            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00505"></a>00505       end = clock();
<a name="l00506"></a>00506       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00507"></a>00507       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00508"></a>00508       Times7.push_back(timing);
<a name="l00509"></a>00509       
<a name="l00510"></a>00510       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00511"></a>00511       cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass and maxdiam and remove empty box&quot;</span> &lt;&lt; endl;
<a name="l00512"></a>00512       successfulPQSplit8 = myHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compHDMassDiam,
<a name="l00513"></a>00513            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00514"></a>00514       end = clock();
<a name="l00515"></a>00515       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00516"></a>00516       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00517"></a>00517       Times8.push_back(timing);
<a name="l00518"></a>00518 
<a name="l00519"></a>00519       <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
<a name="l00520"></a>00520           &amp;&amp; successfulPQSplit4 &amp;&amp; successfulPQSplit5 &amp;&amp; successfulPQSplit6
<a name="l00521"></a>00521           &amp;&amp; successfulPQSplit7 &amp;&amp; successfulPQSplit8) {
<a name="l00522"></a>00522 
<a name="l00523"></a>00523         <span class="comment">//get the IAE</span>
<a name="l00524"></a>00524         cout &lt;&lt; <span class="stringliteral">&quot;Get IAE: &quot;</span> &lt;&lt; endl;
<a name="l00525"></a>00525         real midIAE1 = myHist1.getMappedFunctionIAE(nodeEst);
<a name="l00526"></a>00526         <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
<a name="l00527"></a>00527           cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
<a name="l00528"></a>00528           IAE1 = midIAE1;
<a name="l00529"></a>00529           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00530"></a>00530           optHist1 = myHist1;
<a name="l00531"></a>00531         }
<a name="l00532"></a>00532 
<a name="l00533"></a>00533         <span class="comment">//get the IAE</span>
<a name="l00534"></a>00534         real midIAE2 =  myHist2.getMappedFunctionIAE(nodeEst);
<a name="l00535"></a>00535         <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
<a name="l00536"></a>00536           cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
<a name="l00537"></a>00537           IAE2 = midIAE2;
<a name="l00538"></a>00538           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00539"></a>00539           optHist2 = myHist2;
<a name="l00540"></a>00540         }
<a name="l00541"></a>00541 
<a name="l00542"></a>00542         real midIAE3 =  myHist3.getMappedFunctionIAE(nodeEst);
<a name="l00543"></a>00543         <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
<a name="l00544"></a>00544           cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
<a name="l00545"></a>00545           IAE3 = midIAE3;
<a name="l00546"></a>00546           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00547"></a>00547           optHist3 = myHist3;
<a name="l00548"></a>00548         }
<a name="l00549"></a>00549 
<a name="l00550"></a>00550         
<a name="l00551"></a>00551         <span class="comment">//get the IAE</span>
<a name="l00552"></a>00552         real midIAE4 =  myHist4.getMappedFunctionIAE(nodeEst);
<a name="l00553"></a>00553         <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
<a name="l00554"></a>00554           cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
<a name="l00555"></a>00555           IAE4 = midIAE4;
<a name="l00556"></a>00556           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00557"></a>00557           optHist4 = myHist4;
<a name="l00558"></a>00558         }
<a name="l00559"></a>00559         
<a name="l00560"></a>00560         real midIAE5 = myHist5.getMappedFunctionIAE(nodeEst);
<a name="l00561"></a>00561         <span class="keywordflow">if</span> ( midIAE5 &lt; IAE5 ) {
<a name="l00562"></a>00562           cout &lt;&lt; midIAE5 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE5 &lt;&lt; endl;
<a name="l00563"></a>00563           IAE5 = midIAE5;
<a name="l00564"></a>00564           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00565"></a>00565           optHist5 = myHist5;
<a name="l00566"></a>00566         }
<a name="l00567"></a>00567 
<a name="l00568"></a>00568         <span class="comment">//get the IAE</span>
<a name="l00569"></a>00569         real midIAE6 =  myHist6.getMappedFunctionIAE(nodeEst);
<a name="l00570"></a>00570         <span class="keywordflow">if</span> ( midIAE6 &lt; IAE6 ) {
<a name="l00571"></a>00571           cout &lt;&lt; midIAE6 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE6 &lt;&lt; endl;
<a name="l00572"></a>00572           IAE6 = midIAE6;
<a name="l00573"></a>00573           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00574"></a>00574           optHist6 = myHist6;
<a name="l00575"></a>00575         }
<a name="l00576"></a>00576 
<a name="l00577"></a>00577         real midIAE7 =  myHist7.getMappedFunctionIAE(nodeEst);
<a name="l00578"></a>00578         <span class="keywordflow">if</span> ( midIAE7 &lt; IAE7 ) {
<a name="l00579"></a>00579           cout &lt;&lt; midIAE7 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE7 &lt;&lt; endl;
<a name="l00580"></a>00580           IAE7 = midIAE7;
<a name="l00581"></a>00581           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00582"></a>00582           optHist7 = myHist7;
<a name="l00583"></a>00583         }
<a name="l00584"></a>00584 
<a name="l00585"></a>00585         
<a name="l00586"></a>00586         <span class="comment">//get the IAE</span>
<a name="l00587"></a>00587         real midIAE8 =  myHist8.getMappedFunctionIAE(nodeEst);
<a name="l00588"></a>00588         <span class="keywordflow">if</span> ( midIAE8 &lt; IAE8 ) {
<a name="l00589"></a>00589           cout &lt;&lt; midIAE8 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE8 &lt;&lt; endl;
<a name="l00590"></a>00590           IAE8 = midIAE8;
<a name="l00591"></a>00591           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00592"></a>00592           optHist8 = myHist8;
<a name="l00593"></a>00593         }
<a name="l00594"></a>00594 
<a name="l00595"></a>00595       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00596"></a>00596     }<span class="comment">// end of if(successfulInsertion)</span>
<a name="l00597"></a>00597   } <span class="comment">// end of iterating through different kn&#39;s</span>
<a name="l00598"></a>00598 
<a name="l00599"></a>00599   <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
<a name="l00600"></a>00600     successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
<a name="l00601"></a>00601     &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4 &amp;&amp;
<a name="l00602"></a>00602     successfulPQSplit5 &amp;&amp; successfulInsertion5 &amp;&amp; successfulPQSplit6 &amp;&amp; 
<a name="l00603"></a>00603     successfulInsertion6 &amp;&amp; successfulPQSplit7 &amp;&amp; successfulInsertion7
<a name="l00604"></a>00604     &amp;&amp; successfulPQSplit8 &amp;&amp; successfulInsertion8) {
<a name="l00605"></a>00605 
<a name="l00606"></a>00606     <span class="comment">// keep the optimal IAEs</span>
<a name="l00607"></a>00607     IAEOpt.push_back(IAE1); 
<a name="l00608"></a>00608     IAEOpt.push_back(IAE2);
<a name="l00609"></a>00609     IAEOpt.push_back(IAE3);
<a name="l00610"></a>00610     IAEOpt.push_back(IAE4);
<a name="l00611"></a>00611     IAEOpt.push_back(IAE5); 
<a name="l00612"></a>00612     IAEOpt.push_back(IAE6);
<a name="l00613"></a>00613     IAEOpt.push_back(IAE7);
<a name="l00614"></a>00614     IAEOpt.push_back(IAE8);
<a name="l00615"></a>00615     
<a name="l00616"></a>00616     <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
<a name="l00617"></a>00617     NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00618"></a>00618     NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00619"></a>00619     NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00620"></a>00620     NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00621"></a>00621     NumLeafNodesOpt.push_back(optHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00622"></a>00622     NumLeafNodesOpt.push_back(optHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00623"></a>00623     NumLeafNodesOpt.push_back(optHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00624"></a>00624     NumLeafNodesOpt.push_back(optHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00625"></a>00625       
<a name="l00626"></a>00626       
<a name="l00627"></a>00627     <span class="comment">// output the optimal histograms</span>
<a name="l00628"></a>00628     std::ostringstream stm;
<a name="l00629"></a>00629     stm &lt;&lt; dataSeed;
<a name="l00630"></a>00630     <span class="comment">// create a name for the file to output</span>
<a name="l00631"></a>00631     <span class="keywordtype">string</span> fileName;
<a name="l00632"></a>00632     fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
<a name="l00633"></a>00633     fileName += stm.str();
<a name="l00634"></a>00634     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00635"></a>00635     optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00636"></a>00636 
<a name="l00637"></a>00637     <span class="comment">// create a name for the file to output</span>
<a name="l00638"></a>00638     fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
<a name="l00639"></a>00639     fileName += stm.str();
<a name="l00640"></a>00640     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00641"></a>00641     optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00642"></a>00642 
<a name="l00643"></a>00643     <span class="comment">// create a name for the file to output</span>
<a name="l00644"></a>00644     fileName = <span class="stringliteral">&quot;HistVolRemoveEmpty&quot;</span>;
<a name="l00645"></a>00645     fileName += stm.str();
<a name="l00646"></a>00646     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00647"></a>00647     optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00648"></a>00648 
<a name="l00649"></a>00649     <span class="comment">// create a name for the file to output</span>
<a name="l00650"></a>00650     fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
<a name="l00651"></a>00651     fileName += stm.str();
<a name="l00652"></a>00652     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00653"></a>00653     optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00654"></a>00654     
<a name="l00655"></a>00655     <span class="comment">// create a name for the file to output</span>
<a name="l00656"></a>00656     fileName = <span class="stringliteral">&quot;HistMeanMass&quot;</span>;
<a name="l00657"></a>00657     fileName += stm.str();
<a name="l00658"></a>00658     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00659"></a>00659     optHist5.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00660"></a>00660 
<a name="l00661"></a>00661     <span class="comment">// create a name for the file to output</span>
<a name="l00662"></a>00662     fileName = <span class="stringliteral">&quot;HistCovarMass&quot;</span>;
<a name="l00663"></a>00663     fileName += stm.str();
<a name="l00664"></a>00664     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00665"></a>00665     optHist6.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00666"></a>00666 
<a name="l00667"></a>00667     <span class="comment">// create a name for the file to output</span>
<a name="l00668"></a>00668     fileName = <span class="stringliteral">&quot;HistHellingerMass&quot;</span>;
<a name="l00669"></a>00669     fileName += stm.str();
<a name="l00670"></a>00670     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00671"></a>00671     optHist7.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00672"></a>00672 
<a name="l00673"></a>00673     <span class="comment">// create a name for the file to output</span>
<a name="l00674"></a>00674     fileName = <span class="stringliteral">&quot;HistHellingerMassDiam&quot;</span>;
<a name="l00675"></a>00675     fileName += stm.str();
<a name="l00676"></a>00676     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00677"></a>00677     optHist8.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00678"></a>00678 
<a name="l00679"></a>00679     
<a name="l00680"></a>00680 
<a name="l00681"></a>00681     <span class="comment">// output IAE, number of leaf nodes, times to file</span>
<a name="l00682"></a>00682     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;MappedFunctionExhaustivePQOutput&quot;</span>;
<a name="l00683"></a>00683     PQFileName += stm.str();
<a name="l00684"></a>00684     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00685"></a>00685     oss.open(PQFileName.c_str());
<a name="l00686"></a>00686     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
<a name="l00687"></a>00687       oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00688"></a>00688       oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
<a name="l00689"></a>00689     }
<a name="l00690"></a>00690     oss &lt;&lt; flush;
<a name="l00691"></a>00691     oss.close();
<a name="l00692"></a>00692     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
<a name="l00693"></a>00693         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00694"></a>00694         
<a name="l00695"></a>00695     PQFileName = <span class="stringliteral">&quot;MappedFunctionExhaustivePQOutputTimes&quot;</span>;
<a name="l00696"></a>00696     PQFileName += stm.str();
<a name="l00697"></a>00697     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00698"></a>00698     oss.open(PQFileName.c_str());
<a name="l00699"></a>00699     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
<a name="l00700"></a>00700       oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00701"></a>00701       oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00702"></a>00702       oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00703"></a>00703       oss &lt;&lt; Times4[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00704"></a>00704       oss &lt;&lt; Times5[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00705"></a>00705       oss &lt;&lt; Times6[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00706"></a>00706       oss &lt;&lt; Times7[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00707"></a>00707       oss &lt;&lt; Times8[i] &lt;&lt; endl;
<a name="l00708"></a>00708     }
<a name="l00709"></a>00709     
<a name="l00710"></a>00710     oss &lt;&lt; flush;
<a name="l00711"></a>00711     oss.close();
<a name="l00712"></a>00712     cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
<a name="l00713"></a>00713         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00714"></a>00714   } <span class="comment">// end of successes</span>
<a name="l00715"></a>00715 
<a name="l00716"></a>00716 <span class="comment">//=================end of exhaustive PQ=================================// </span>
<a name="l00717"></a>00717 
<a name="l00718"></a>00718   <span class="comment">// free the random number generator</span>
<a name="l00719"></a>00719   gsl_rng_free (r);  
<a name="l00720"></a>00720   gsl_ran_discrete_free (gslpdfstruct);
<a name="l00721"></a>00721 
<a name="l00722"></a>00722   <span class="keywordflow">return</span> 0;
<a name="l00723"></a>00723 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="IAECalculations_2MappedSPSampling_8cpp.shtml">MappedSPSampling.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
