<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AirTraffic.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AirTraffic_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AirTraffic.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Arithmetic on trajectory enclosures.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
</div>
<p><a href="AirTraffic_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AirTraffic_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Arithmetic on trajectory enclosures. </p>

<p>Definition in file <a class="el" href="AirTraffic_8cpp_source.shtml">AirTraffic.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="AirTraffic.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AirTraffic_8cpp_source.shtml#l00043">43</a> of file <a class="el" href="AirTraffic_8cpp_source.shtml">AirTraffic.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00466">subpavings::AdaptiveHistogramVCollator::addToCollationWithVal()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00543">subpavings::AdaptiveHistogramValidation::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="adaptivehistogramvalidation_8hpp_source.shtml#l00409">subpavings::AdaptiveHistogramValidation::insertRvectorsFromTxt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00409">subpavings::AdaptiveHistogramVCollator::outputAccumulationToTxtTabs()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l03367">subpavings::AdaptiveHistogramValidation::outputToTxtTabs()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6">subpavings::readRvectorsFromTxt()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//------------------------string formatting------------------------------- </span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    
   <span class="comment">//--------------input parameters----------------------------------------//</span>
   <span class="comment">// names of files</span>
   <span class="keywordtype">string</span> DataFiles = argv[1]; <span class="comment">// this is a row vector of filenames</span>

   <span class="comment">//An approximate volume of the object</span>
   <span class="comment">//For example:</span>
   <span class="comment">//The birds have about a 2 metre wing span and are about 80 cm long. </span>
   <span class="comment">//They fly within about 50 m of the sea surface, and mostly within 2 m of it.</span>
   <span class="comment">//So the volume of the object is 2/1000 * 80/100/1000 = 0.0000016</span>
   <span class="keywordtype">double</span> Vol = atof(argv[2]); 
   <span class="comment">//--------------end of input parameters----------------------------------//</span>
    
   <span class="comment">//-------Setup to read in data files------------------------------------//</span>
   <span class="comment">//create a vector object to store the filenames of simulated data</span>
  vector&lt;string&gt; DataFilesVec;
  <span class="keywordtype">string</span> fileName;
  cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
  ifstream file; <span class="comment">// create file for input</span>
  file.open(DataFiles.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; DataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
    <span class="comment">// else read in the filenames</span>
  <span class="comment">// store the filenames in the vector simDataFilesVec</span>
  <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
    file &gt;&gt; fileName;
    cout &lt;&lt; fileName &lt;&lt; endl; 
    DataFilesVec.push_back(fileName);
  }
  <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
  DataFilesVec.pop_back();

  <span class="comment">//container to keep data to make root box</span>
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
  dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;

  <span class="comment">// put all simulated data into container allData</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\nPut all data in a container to get rootbox: &quot;</span> &lt;&lt; endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; DataFilesVec.size(); i++) {
    cout &lt;&lt; DataFilesVec[i] &lt;&lt; endl;
    <span class="comment">//read into allData</span>
    <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), DataFilesVec[i], 0);
    <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>) {
      cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; DataFilesVec[i] &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
        &lt;&lt; endl;
      exit(1);
    }
  }

  <span class="comment">//Make root box from all the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
  histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
  histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
  ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
  <span class="comment">//find the data dimensions from the first datapoint</span>
  <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
  cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
  
  <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
  <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
  <span class="comment">//-----end of setup to read in data files-------------------------------//</span>

  <span class="comment">//---get minimum volume using the same scale as given position data----------</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> hist(pavingBox);
  cout &lt;&lt; <span class="stringliteral">&quot;getRootBoxVol&quot;</span> &lt;&lt; endl;
  <span class="keywordtype">double</span> rootBoxVol = hist.getSubPaving()-&gt;nodeVolume();
  <span class="keywordtype">double</span> approxDepth = floor(log(rootBoxVol/Vol)/log(2));
  <span class="keywordtype">double</span> approxMinVol = rootBoxVol/<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(2,approxDepth);
  cout &lt;&lt; <span class="stringliteral">&quot;Vol: &quot;</span> &lt;&lt; Vol &lt;&lt; <span class="stringliteral">&quot;\tapproxMinVol: &quot;</span> &lt;&lt; approxMinVol &lt;&lt; endl; 

  <span class="comment">//---set up for constructing histograms--------------------------------</span>
  <span class="comment">//split on k and volume to get tightest possible enclosure</span>
  <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> splitVolCount(approxMinVol);

  <span class="comment">//vectors to store number of nodes for spaxe complexity purposes </span>
  vector&lt;size_t&gt; numNodesAgg;

  <span class="comment">//collator object for adding trajectories</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
   
  <span class="comment">//-------------get individual trajectories and add into collator----------- </span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= DataFilesVec.size(); j++) {
    cout &lt;&lt; <span class="stringliteral">&quot;================&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;======================&quot;</span> &lt;&lt; endl;
    ostringstream stm1;
      stm1 &lt;&lt; j;
    <span class="comment">// tell user which data is being used.</span>
    <span class="keywordtype">string</span> inputFileName = DataFilesVec[j];
    cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
    <span class="comment">// get a count of lines in the txt file</span>
    <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
    <span class="comment">// tell user how many lines there are in the file</span>
    cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
          &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;

    <span class="comment">// create histograms </span>
    clock_t start, end;
    <span class="keywordtype">double</span> timeTaken;
    start=clock();
    cout &lt;&lt; <span class="stringliteral">&quot;Getting enclosure for this trajectory: &quot;</span> &lt;&lt; endl; 
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
    vector&lt;size_t&gt; numNodes;
    successfulInsertion = myHist.insertRvectorsFromTxt(inputFileName, 
                                        numNodes, 
                                       splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
    end=clock();
    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
    <span class="keywordflow">if</span> (successfulInsertion) {
      
      <span class="comment">// /* optional output histogram</span>
      <span class="keywordtype">string</span> histFileName = <span class="stringliteral">&quot;Hist&quot;</span>;
      histFileName += stm1.str();
      histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      myHist.outputToTxtTabs(histFileName);
      <span class="comment">// */</span>

      <span class="comment">//get number of nodes at each split</span>
      vector&lt;size_t&gt;::iterator vecIt;
      <span class="keywordtype">string</span> fileNameCount = <span class="stringliteral">&quot;NumNodes&quot;</span>;
      
      fileNameCount += stm1.str();
      fileNameCount += <span class="stringliteral">&quot;.txt&quot;</span>;
      ofstream os;
      os.open(fileNameCount.c_str());
      <span class="keywordflow">for</span> (vecIt = numNodes.begin(); vecIt &lt; numNodes.end(); vecIt++) {
          os &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
      }
      os &lt;&lt; flush;
      os.close();
      std::cout &lt;&lt; <span class="stringliteral">&quot;Number of nodes at each split output to &quot;</span> &lt;&lt; 
      fileNameCount &lt;&lt; std::endl;

      <span class="keywordtype">size_t</span> aggBox = 0;
      cout &lt;&lt; <span class="stringliteral">&quot;\n==========Adding myHist into collator==========&quot;</span> &lt;&lt; endl;
      coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
      numNodesAgg.push_back(aggBox);
    } <span class="comment">// end of successful insertion</span>
  } <span class="comment">// end of number of flights</span>
    
    
    coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a95cf6201a4b2259eb5138193affc5f6b" title="Output the accumulated data over the collation to a txt file.">outputAccumulationToTxtTabs</a>(<span class="stringliteral">&quot;coll.txt&quot;</span>);
    
    <span class="comment">//output number of nodes for collator</span>
    vector&lt;size_t&gt;::iterator vecIt;
    <span class="keywordtype">string</span> fileNameAgg = <span class="stringliteral">&quot;NumNodesAgg.txt&quot;</span>;
    ofstream os;
    os.open(fileNameAgg.c_str());
    <span class="keywordflow">for</span> (vecIt = numNodesAgg.begin(); vecIt &lt; numNodesAgg.end(); vecIt++) {
      os &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    }
    os &lt;&lt; flush;
    os.close();
    std::cout &lt;&lt; <span class="stringliteral">&quot;Number of nodes at each split output to &quot;</span> &lt;&lt; fileNameAgg &lt;&lt; std::endl;
    
  <span class="keywordflow">return</span> 0;
} <span class="comment">// end of air traffic example program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AirTraffic_8cpp.shtml">AirTraffic.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
