<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FPhyloPOT Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classFPhyloPOT.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-types">Private Types</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">FPhyloPOT Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="FPhyloPOT" --><!-- doxytag: inherits="Fobj" -->
<p>A class to create a function object for trans-dimensional phylogenetic likelihood by post-order traversal.  
 <a href="classFPhyloPOT.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for FPhyloPOT:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFPhyloPOT__inherit__graph.png" border="0" usemap="#FPhyloPOT_inherit__map" alt="Inheritance graph"/></div>
<map name="FPhyloPOT_inherit__map" id="FPhyloPOT_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for FPhyloPOT:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFPhyloPOT__coll__graph.png" border="0" usemap="#FPhyloPOT_coll__map" alt="Collaboration graph"/></div>
<map name="FPhyloPOT_coll__map" id="FPhyloPOT_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classFPhyloPOT-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a4e454a840e146021548eb181cb4a0c46">FPhyloPOT</a> (int ts, interval Domain, bool LogPi, int Prior)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a4e454a840e146021548eb181cb4a0c46"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#afe2d7cca8b4c06e2c3e7c7dcc94e9826">~FPhyloPOT</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#afe2d7cca8b4c06e2c3e7c7dcc94e9826"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909">operator()</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;lb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">interval function object  <a href="#a4d0a6125142aba97d718b11d8b8fc909"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#afdf1491ae76809442d33e224b4607102">operator()</a> (const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;lp) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">real function object  <a href="#afdf1491ae76809442d33e224b4607102"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">HessType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a8a259ba9d2704e586dc2dcea268dc8e8">operator()</a> (const HTvector &amp;x, const int label=0) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">HessType function object.  <a href="#a8a259ba9d2704e586dc2dcea268dc8e8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a580e93411b4a2dd881f4854481a8aeef">LabBoxVolume</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Volume of rooted tree boxes inherited.  <a href="#a580e93411b4a2dd881f4854481a8aeef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#af1164c3a4f529f5b4af38d18c79f7b47">get_interval_calls</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of interval function calls.  <a href="#af1164c3a4f529f5b4af38d18c79f7b47"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a439b0be63da661a8e7c945c986874c8c">get_real_calls</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of real function calls.  <a href="#a439b0be63da661a8e7c945c986874c8c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a13940c79064027cec1a2934afde0dbd7">getNoTrees</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of trees.  <a href="#a13940c79064027cec1a2934afde0dbd7"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-types"></a>
Private Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classFPhyloPOT.shtml#a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2">maxCharInSeqName</a> =  20
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum allowable characters in a sequence name in the sequence file.  <a href="classFPhyloPOT.shtml#a9b09c98520545b9c87c6993bf3c5f274">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95">TwoTaxaTop</a> =  1, 
<a class="el" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f">ThreeTaxaTop</a> =  1, 
<a class="el" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe">FourTaxaTop</a> =  3, 
<a class="el" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768">FiveTaxaTop</a> =  15
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">How many topologies (unrooted) there are for 2, 3, 4, and 5 taxa.  <a href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31">TwoTaxaDim</a> =  2, 
<a class="el" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e">ThreeTaxaDim</a> =  3, 
<a class="el" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60">FourTaxaDim</a> =  5, 
<a class="el" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401">FiveTaxaDim</a> =  7
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">How many dimensions there are for 2, 3, 4 and 5 taxa (unrooted trees).  <a href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a> =  4
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of the character space for this model.  <a href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c">ReadSequence</a> (const string &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Reads sequences from a txt file.  <a href="#a02e78c307455acbbaa53b0482d4a8b0c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216">FindPattern</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds patterns in sequences read in and fills in datamembers in SeqData struct.  <a href="#a7fbfb801cd7d80b8148500c9f0b07216"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78">PrintSequence</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the summmary of results of <a class="el" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c" title="Reads sequences from a txt file.">ReadSequence()</a> and <a class="el" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216" title="Finds patterns in sequences read in and fills in datamembers in SeqData struct.">FindPattern()</a>  <a href="#a7c075a1b4511f691106e7c5c823a5e78"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43">ReadTrees</a> (const string &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes trees from a tree file.  <a href="#a7c1b63e0429cce2c72eaabf284eb5e43"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c">PrintTopologyTrees</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints all the trees to console output.  <a href="#aaa8c6c8230611cf1f7029be0d00e352c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858">destroyRoots</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the trees (dynamic memory), used by destructor.  <a href="#ac126a3c0fbba14c07054ef35c9b6e858"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e">Char2Code</a> (char ch)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert nucleotide characters to integers, for coding.  <a href="#a829e5b3cc0e80764cd3dac23c06cf06e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a0926a4e893aeb2f2bd50b67ad97b7c3c">Code2Char</a> (int c)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert coded nucleotide integers back to characters.  <a href="#a0926a4e893aeb2f2bd50b67ad97b7c3c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5">CheckReadLine</a> (ifstream &amp;ifs, string &amp;line)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A function to check and read a line from a file.  <a href="#a899c716603960c6abf8983f8392ef3d5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178">FileInputError</a> (ifstream &amp;ifs, const string &amp;msg)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A function to deal with an error found in a sequence input file.  <a href="#a95285cf2a875065f9c80190fc5db9178"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c">ReformatSequence</a> (string &amp;line)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Reformats sequences read in to make them easy to analyse for patterns.  <a href="#aa8490107b21f3b7efe2fa3bbfc8c6b1c"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a84a8fb3afb2b975331062752d414723a">tree_space</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The model space or number of taxa.  <a href="#a84a8fb3afb2b975331062752d414723a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73">n_dimensions</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of edges in an unrooted tree.  <a href="#aef4d908d355efec47e284d3845d74b73"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2">topologies</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of unrooted topology trees given the model space.  <a href="#af68e59b4d63e18f0b82864b101fd29d2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6">tree_nodes</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of nodes in an unrooted tree given the number of taxa.  <a href="#ab30590c070d95d5d5d7966cb386db7d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct <a class="el" href="structDATA.shtml">DATA</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff">SeqData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A struct for the sequence data read in.  <a href="#aa80ced607ed41f02bcd56b6f08fbd1ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a7924aedff3cf2bea3ffccb7b9f59f970">PhyloTreePtrs</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde">treeRoots</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A container of pointers to PhyloTrees.  <a href="#a99124f9f8855b0aebcccd20804ef9cde"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070">n_interval_calls</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Track number of interval function calls.  <a href="#a6121e3100ec3c00f522f15e1feae0070"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec">n_real_calls</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Track number of real function calls.  <a href="#a4e705aece25b8ee32d67aa6ab50cd9ec"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A class to create a function object for trans-dimensional phylogenetic likelihood by post-order traversal. </p>
<p>Uses Jukes Cantor model, ie 4 nucleotides.</p>
<p>This class creates a representation of the unrooted tree(s) or topology appropriate for the number of taxa using the class <a class="el" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>.</p>
<p>Note that at present the class is only set up to deal with unrooted trees, ie the number of dimensions (branches) is determined solely by the number of taxa (tree space).</p>
<p>The likelihood as a real or interval or HessType, under a particular topology, is calculated by post-order traversal of the tree for that topology.</p>
<p>Tree structures are read in from a file. Likelihoods are based on DNA sequence data read into the function object constructor. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00102">102</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a9b09c98520545b9c87c6993bf3c5f274"></a><!-- doxytag: member="FPhyloPOT::@4" ref="a9b09c98520545b9c87c6993bf3c5f274" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The maximum allowable characters in a sequence name in the sequence file. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2"></a><!-- doxytag: member="maxCharInSeqName" ref="a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2" args="" -->maxCharInSeqName</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00110">110</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<a class="code" href="classFPhyloPOT.shtml#a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2">maxCharInSeqName</a> = 20};
</pre></div>
</div>
</div>
<a class="anchor" id="a41644607ab4dda406006b7899c60eb24"></a><!-- doxytag: member="FPhyloPOT::@5" ref="a41644607ab4dda406006b7899c60eb24" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>How many topologies (unrooted) there are for 2, 3, 4, and 5 taxa. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95"></a><!-- doxytag: member="TwoTaxaTop" ref="a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95" args="" -->TwoTaxaTop</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f"></a><!-- doxytag: member="ThreeTaxaTop" ref="a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f" args="" -->ThreeTaxaTop</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe"></a><!-- doxytag: member="FourTaxaTop" ref="a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe" args="" -->FourTaxaTop</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768"></a><!-- doxytag: member="FiveTaxaTop" ref="a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768" args="" -->FiveTaxaTop</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00113">113</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95">TwoTaxaTop</a> = 1, <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f">ThreeTaxaTop</a> = 1, <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe">FourTaxaTop</a> = 3, <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768">FiveTaxaTop</a> = 15};
</pre></div>
</div>
</div>
<a class="anchor" id="a83a3e9f1c4025fc20c102ed2b819f9b8"></a><!-- doxytag: member="FPhyloPOT::@6" ref="a83a3e9f1c4025fc20c102ed2b819f9b8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>How many dimensions there are for 2, 3, 4 and 5 taxa (unrooted trees). </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31"></a><!-- doxytag: member="TwoTaxaDim" ref="a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31" args="" -->TwoTaxaDim</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e"></a><!-- doxytag: member="ThreeTaxaDim" ref="a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e" args="" -->ThreeTaxaDim</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60"></a><!-- doxytag: member="FourTaxaDim" ref="a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60" args="" -->FourTaxaDim</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401"></a><!-- doxytag: member="FiveTaxaDim" ref="a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401" args="" -->FiveTaxaDim</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00116">116</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31">TwoTaxaDim</a> = 2, <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e">ThreeTaxaDim</a>= 3, <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60">FourTaxaDim</a> = 5, <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401">FiveTaxaDim</a> = 7};
</pre></div>
</div>
</div>
<a class="anchor" id="af26457fdad1313b54245b464a08d2978"></a><!-- doxytag: member="FPhyloPOT::@7" ref="af26457fdad1313b54245b464a08d2978" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Size of the character space for this model. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea"></a><!-- doxytag: member="CharacterSpace" ref="af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea" args="" -->CharacterSpace</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00119">119</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a> = 4};
</pre></div>
</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a4e454a840e146021548eb181cb4a0c46"></a><!-- doxytag: member="FPhyloPOT::FPhyloPOT" ref="a4e454a840e146021548eb181cb4a0c46" args="(int ts, interval Domain, bool LogPi, int Prior)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classFPhyloPOT.shtml#a4e454a840e146021548eb181cb4a0c46">FPhyloPOT::FPhyloPOT</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interval&#160;</td>
          <td class="paramname"><em>Domain</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>LogPi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Prior</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">30</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00592">FindPattern()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00116">FiveTaxaDim</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00113">FiveTaxaTop</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00116">FourTaxaDim</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00113">FourTaxaTop</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00052">Fobj::LabDomainList</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00135">n_dimensions</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00683">PrintSequence()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00815">PrintTopologyTrees()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00058">Fobj::PriorType</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">ReadSequence()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00190">Fobj::setUsingLogDensity()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00116">ThreeTaxaDim</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00113">ThreeTaxaTop</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00138">topologies</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00141">tree_nodes</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00132">tree_space</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00116">TwoTaxaDim</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00113">TwoTaxaTop</a>.</p>
<div class="fragment"><pre class="fragment">                                                                  :
<a class="code" href="classFPhyloPOT.shtml#a84a8fb3afb2b975331062752d414723a" title="The model space or number of taxa.">tree_space</a>(ts), <a class="code" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070" title="Track number of interval function calls.">n_interval_calls</a> (0), <a class="code" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec" title="Track number of real function calls.">n_real_calls</a>(0)
{
  <span class="comment">// an Fobj function, sets the Fobj member UsingLogDensity</span>
  <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
  <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;<span class="comment">// PriorType is an inherited member from Fobj</span>

  <span class="comment">// file names for the tree and the sequences files</span>
  <span class="keywordtype">string</span> treeFileName;
  <span class="keywordtype">string</span> seqFileName;

  <span class="keywordflow">switch</span> (<a class="code" href="classFPhyloPOT.shtml#a84a8fb3afb2b975331062752d414723a" title="The model space or number of taxa.">tree_space</a>)
  {

    <span class="comment">// use just one treefile with multiple lines, one line for each topology</span>

    <span class="comment">/* need to refer to tree sequence file with full path</span>
<span class="comment">     * from mrs/trunk/examples so that it works with Gopt examples</span>
<span class="comment">     */</span>

    <span class="keywordflow">case</span> 2:         <span class="comment">// 2 taxa tree</span>
                    <span class="comment">// Human-Neandertal data in Sainudiin and York, AMB, 2009</span>
                    <span class="comment">// Illustrates identifibality of the sum of two branches</span>
                    <span class="comment">// Similar to the 2 taxa example in Sainudiin, Ph.D., 2005,</span>
                    <span class="comment">// and that in Sainudiin and Yoshida, 2005</span>
      <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95">TwoTaxaTop</a>;
      <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31">TwoTaxaDim</a>;
      treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree2&quot;</span>;
      seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq2&quot;</span>;
      <span class="keywordflow">break</span>;
      <span class="comment">/*</span>
<span class="comment">      // another GOpt example with minimal sufficient sequence patterns</span>
<span class="comment">      // Human-Neandertal-Chimp Example Sainudiin and York, AMB, 2009</span>
<span class="comment">    case 3:         // 3 taxa tree (This is truly unrooted Tree as </span>
<span class="comment">                    // opposed to the constrained unrooted tree in</span>
<span class="comment">                    // Sainudiin and York, AMB, 2009.)</span>
<span class="comment">      topologies = ThreeTaxaTop;</span>
<span class="comment">      n_dimensions = ThreeTaxaDim;</span>
<span class="comment">      treeFileName = &quot;../../targets/TreesSeqns/testtree3&quot;;</span>
<span class="comment">      seqFileName = &quot;../../targets/TreesSeqns/testseq3&quot;;</span>
<span class="comment">      break;</span>
<span class="comment">      */</span>
    <span class="keywordflow">case</span> 3: <span class="comment">// 3 taxa tree Brown et al, 1982 example</span>
            <span class="comment">// Used in Yang 2000, Sainudiin, Ph.D., 2005, </span>
            <span class="comment">// Sainudiin and Yoshida, 2005,</span>
            <span class="comment">// Sainudiin and York, AMB, 2009</span>
      <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f">ThreeTaxaTop</a>;
      <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e">ThreeTaxaDim</a>;
      treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree3&quot;</span>;
      seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq3Brown&quot;</span>; 
      <span class="keywordflow">break</span>;
      
    <span class="keywordflow">case</span> 4:         <span class="comment">// 4 taxa tree</span>
      <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe">FourTaxaTop</a>;
      <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60">FourTaxaDim</a>;
      treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree4&quot;</span>;
      seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq4&quot;</span>;
      <span class="keywordflow">break</span>;

    <span class="keywordflow">case</span> 5:         <span class="comment">// 5 taxa tree -- way too long in this implementation</span>
      <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768">FiveTaxaTop</a>;
      <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401">FiveTaxaDim</a>;
      treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree5&quot;</span>;
      seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq5&quot;</span>;
      <span class="keywordflow">break</span>;

    <span class="keywordflow">default</span>:

      std::cerr&lt;&lt; <span class="stringliteral">&quot;Does NOT contain 2, 3, 4 or 5 taxa&quot;</span>;
      exit(1);

  }                 <span class="comment">// end switch</span>

  <span class="comment">// for each topology</span>
  <span class="comment">// set up a labelled box of n_dimensions and put into the LabDomainList</span>
  <span class="comment">// LabDomainList is an inherited member from Fobj</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>; j++)
  {

    <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
    ivector domain (1, <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a>);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a>; i++)
    {
      domain[i] = Domain;
    }

    Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = j;
    Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;

    <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back(Ldomain);
  }

  <span class="comment">// number of nodes is number of dimensions + 1;</span>
  <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a> = <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> + 1;

  <span class="comment">//reads in the sequence file and initializes SeqData</span>
  <a class="code" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c" title="Reads sequences from a txt file.">ReadSequence</a>(seqFileName);

  <span class="comment">//finds patterns and initializes them in SeqData.Baseseq</span>
  <a class="code" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216" title="Finds patterns in sequences read in and fills in datamembers in SeqData struct.">FindPattern</a>();

  <a class="code" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78" title="Print the summmary of results of ReadSequence() and FindPattern()">PrintSequence</a>();

  <span class="comment">// read the tree file, which should have one line for each topology</span>
  <span class="comment">// and tries to make a tree from each line</span>
  <span class="comment">// trees made are pushed back into treeRoots</span>
  <a class="code" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43" title="Makes trees from a tree file.">ReadTrees</a>(treeFileName);

  <span class="comment">// print out the trees, one for each topology</span>
  <a class="code" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c" title="Prints all the trees to console output.">PrintTopologyTrees</a>();

}                   <span class="comment">// end constructor</span>
</pre></div>
</div>
</div>
<a class="anchor" id="afe2d7cca8b4c06e2c3e7c7dcc94e9826"></a><!-- doxytag: member="FPhyloPOT::~FPhyloPOT" ref="afe2d7cca8b4c06e2c3e7c7dcc94e9826" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classFPhyloPOT.shtml#afe2d7cca8b4c06e2c3e7c7dcc94e9826">FPhyloPOT::~FPhyloPOT</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00144">144</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00150">destroyRoots()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858" title="Destroys the trees (dynamic memory), used by destructor.">destroyRoots</a>();   <span class="comment">// makes sure the newed tree roots are destroyed</span>

}                   <span class="comment">// end destructor</span>
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a829e5b3cc0e80764cd3dac23c06cf06e"></a><!-- doxytag: member="FPhyloPOT::Char2Code" ref="a829e5b3cc0e80764cd3dac23c06cf06e" args="(char ch)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e">FPhyloPOT::Char2Code</a> </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert nucleotide characters to integers, for coding. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00375">375</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00592">FindPattern()</a>.</p>
<div class="fragment"><pre class="fragment">{
                    <span class="comment">//change to lower case</span>
  <span class="keywordtype">char</span> c = tolower(ch);
  <span class="keywordtype">int</span> retValue = 0;
  <span class="keywordflow">switch</span> (c)
  {
    <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
      retValue = 0;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
      retValue = 1;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>:
      retValue = 2;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> <span class="charliteral">&#39;g&#39;</span>:
      retValue = 3;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      std::cerr&lt;&lt; <span class="stringliteral">&quot;Contains non-nucleotide symbol &quot;</span> &lt;&lt; c &lt;&lt; <span class="stringliteral">&quot;!&quot;</span> &lt;&lt; std::endl;
      exit(1);

  }                 <span class="comment">// end swtich</span>

  <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a899c716603960c6abf8983f8392ef3d5"></a><!-- doxytag: member="FPhyloPOT::CheckReadLine" ref="a899c716603960c6abf8983f8392ef3d5" args="(ifstream &amp;ifs, string &amp;line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5">FPhyloPOT::CheckReadLine</a> </td>
          <td>(</td>
          <td class="paramtype">ifstream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A function to check and read a line from a file. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00429">429</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00441">FileInputError()</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">ReadSequence()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span>(!ifs.fail() &amp;&amp; !ifs.bad())
  {
    getline(ifs, line);
  }
  <span class="keywordflow">else</span>
  {
    <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(ifs, <span class="stringliteral">&quot; Error reading from file &quot;</span>);
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0926a4e893aeb2f2bd50b67ad97b7c3c"></a><!-- doxytag: member="FPhyloPOT::Code2Char" ref="a0926a4e893aeb2f2bd50b67ad97b7c3c" args="(int c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="classFPhyloPOT.shtml#a0926a4e893aeb2f2bd50b67ad97b7c3c">FPhyloPOT::Code2Char</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert coded nucleotide integers back to characters. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00403">403</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">char</span> retValue = <span class="charliteral">&#39;x&#39;</span>;

  <span class="keywordflow">switch</span> (c)
  {
    <span class="keywordflow">case</span> 0:
      retValue = <span class="charliteral">&#39;t&#39;</span>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 1:
      retValue = <span class="charliteral">&#39;c&#39;</span>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 2:
      retValue = <span class="charliteral">&#39;a&#39;</span>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">case</span> 3:
      retValue = <span class="charliteral">&#39;g&#39;</span>;
      <span class="keywordflow">break</span>;
    <span class="keywordflow">default</span>:
      std::cerr&lt;&lt; <span class="stringliteral">&quot;Contains non-nucleotide symbol &quot;</span> &lt;&lt; c &lt;&lt; <span class="stringliteral">&quot;!&quot;</span> &lt;&lt; std::endl;
      exit(1);
  }                 <span class="comment">// end switch</span>

  <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac126a3c0fbba14c07054ef35c9b6e858"></a><!-- doxytag: member="FPhyloPOT::destroyRoots" ref="ac126a3c0fbba14c07054ef35c9b6e858" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858">FPhyloPOT::destroyRoots</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destroys the trees (dynamic memory), used by destructor. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00150">150</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00144">~FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// call DeleteObject to delete all the newed tree roots</span>
  for_each(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.begin(), <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.end(), <a class="code" href="structDeleteObject.shtml" title="A struct to make a templatised function to delete objects pointed to by pointers.">DeleteObject</a>());
  <span class="comment">// and clear the container of pointers as well</span>
  <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.clear();
}
</pre></div>
</div>
</div>
<a class="anchor" id="a95285cf2a875065f9c80190fc5db9178"></a><!-- doxytag: member="FPhyloPOT::FileInputError" ref="a95285cf2a875065f9c80190fc5db9178" args="(ifstream &amp;ifs, const string &amp;msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178">FPhyloPOT::FileInputError</a> </td>
          <td>(</td>
          <td class="paramtype">ifstream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>msg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A function to deal with an error found in a sequence input file. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00441">441</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00429">CheckReadLine()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">ReadSequence()</a>.</p>
<div class="fragment"><pre class="fragment">{
  std::cerr &lt;&lt; msg &lt;&lt; endl;
  ifs.close();
  exit(-1);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7fbfb801cd7d80b8148500c9f0b07216"></a><!-- doxytag: member="FPhyloPOT::FindPattern" ref="a7fbfb801cd7d80b8148500c9f0b07216" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216">FPhyloPOT::FindPattern</a> </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Finds patterns in sequences read in and fills in datamembers in SeqData struct. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00592">592</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00078">DATA::baseSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00080">DATA::BNo_pattern</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00074">DATA::BPatternCounts</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00077">DATA::BPatterns</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00375">Char2Code()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00070">DATA::No_seq</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00068">DATA::rawSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00072">DATA::Seq_length</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">int</span> i, j;

  <span class="comment">// make sure the vectors for sequences anlysis are clear</span>
  (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>).clear();
  <span class="comment">//  this destructs all the component vectors if any</span>
  (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>).clear();

  (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>).clear();

  <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> = 0;

  <span class="comment">// multiple sequence alignment sets</span>
  vector&lt;string&gt; msaSets;

  <span class="comment">// form the msaSets</span>
  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>; i++)
  {
    <span class="comment">// make a string from the ith element of the first sequences&#39;s data</span>
    <span class="keywordtype">string</span> s(1, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>)[0])[i]);
    <span class="keywordflow">for</span> (j = 1; j&lt;<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a>; j++)
    {
      <span class="keywordtype">char</span> add = ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>)[j])[i];
      s+=add;       <span class="comment">// add on the equivalent character from the other sequences</span>
    }
    msaSets.push_back(s);
  }

  <span class="comment">// should now have SeqData.Seq_length strings in msaSets</span>

                    <span class="comment">// sort the msaSets</span>
  sort (msaSets.begin(), msaSets.end());

  vector&lt;string&gt;::iterator sit;

  <span class="keywordtype">int</span> patternsFound = 0;

  sit = msaSets.begin();
  <span class="comment">// vector&lt;int&gt; BPatternCounts;</span>

  <span class="keywordtype">int</span> seqPos = 0;   <span class="comment">// to keep track of where we are in the sequence</span>

  <span class="comment">// while we have not found all the patterns</span>
  <span class="keywordflow">while</span> (seqPos &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>)
  {
    <span class="keywordtype">string</span> found = *sit;

    <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>++;
    (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>).push_back(found);

    <span class="keywordtype">int</span> thisCount = 0;

    <span class="comment">// move to the next non matching set  this works </span>
    <span class="comment">// because msaSets is is sorted</span>
    <span class="keywordflow">while</span> (*sit==found &amp;&amp; (seqPos &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>-1))
    {
      thisCount++;
      seqPos++;
      sit++;
    }

    <span class="comment">// move to the next non matching set  this works </span>
    <span class="comment">//bbecause msaSets is is sorted</span>
    <span class="keywordflow">if</span> (*sit==found &amp;&amp; (seqPos = <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> -1))
    {
      thisCount++;
      seqPos++;
    }

    (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>).push_back(thisCount);
    patternsFound += thisCount;

    string::iterator it;
    vector&lt;int&gt; tempvec;

    <span class="comment">// put the found sequence in coded form into baseSequences</span>
    <span class="keywordflow">for</span> (it = found.begin(); it&lt; found.end(); it++)
    {
      <span class="comment">//char c = *it;</span>
      <span class="comment">//int code = Char2Code(c);</span>
      tempvec.push_back(<a class="code" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e" title="Convert nucleotide characters to integers, for coding.">Char2Code</a>(*it));
    }

    (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>).push_back(tempvec);

  }                 <span class="comment">// return to the top of the loop</span>

  <span class="keywordflow">return</span> (0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="af1164c3a4f529f5b4af38d18c79f7b47"></a><!-- doxytag: member="FPhyloPOT::get_interval_calls" ref="af1164c3a4f529f5b4af38d18c79f7b47" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#af1164c3a4f529f5b4af38d18c79f7b47">FPhyloPOT::get_interval_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of interval function calls. </p>

<p>Implements <a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00230">230</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070" title="Track number of interval function calls.">n_interval_calls</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a439b0be63da661a8e7c945c986874c8c"></a><!-- doxytag: member="FPhyloPOT::get_real_calls" ref="a439b0be63da661a8e7c945c986874c8c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a439b0be63da661a8e7c945c986874c8c">FPhyloPOT::get_real_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of real function calls. </p>

<p>Implements <a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00236">236</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec" title="Track number of real function calls.">n_real_calls</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a13940c79064027cec1a2934afde0dbd7"></a><!-- doxytag: member="FPhyloPOT::getNoTrees" ref="a13940c79064027cec1a2934afde0dbd7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a13940c79064027cec1a2934afde0dbd7">FPhyloPOT::getNoTrees</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of trees. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00242">242</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="GOpt_2PhyloPOT_2PhyloPOT_8cpp_source.shtml#l00062">main()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size());
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a580e93411b4a2dd881f4854481a8aeef"></a><!-- doxytag: member="FPhyloPOT::LabBoxVolume" ref="a580e93411b4a2dd881f4854481a8aeef" args="(const LabBox &amp;LB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual real <a class="el" href="classFPhyloPOT.shtml#a580e93411b4a2dd881f4854481a8aeef">FPhyloPOT::LabBoxVolume</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Volume of rooted tree boxes inherited. </p>

<p>Implements <a class="el" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00224">224</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00251">Fobj::LabBoxVolume()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFPhyloPOT.shtml#a580e93411b4a2dd881f4854481a8aeef" title="Volume of rooted tree boxes inherited.">Fobj::LabBoxVolume</a>(LB);
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a4d0a6125142aba97d718b11d8b8fc909"></a><!-- doxytag: member="FPhyloPOT::operator()" ref="a4d0a6125142aba97d718b11d8b8fc909" args="(const LabBox &amp;lb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">interval FPhyloPOT::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>lb</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>interval function object </p>

<p>Implements <a class="el" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">162</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00078">DATA::baseSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00080">DATA::BNo_pattern</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00074">DATA::BPatternCounts</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00119">CharacterSpace</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">PhyloTree::fillProbIntervalJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l01067">intervalSum()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00077">LabBox::L</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00153">n_interval_calls</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>
<div class="fragment"><pre class="fragment">{
                    <span class="comment">// no patterns or no treeRoots</span>
  <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
  {
    cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
         &lt;&lt; std::endl;
    exit(1);
  }

  ivector x(lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);<span class="comment">// the box we should be dealing with</span>

  <span class="comment">// identify which tree in the topology space from the label of the box</span>
                    <span class="comment">// labels run 0, 1, 2, etc</span>
  <span class="keywordtype">int</span> boxLabel = lb.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
  <span class="keywordflow">if</span>(boxLabel &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Label on point &quot;</span> &lt;&lt; boxLabel &lt;&lt;
      <span class="stringliteral">&quot; greater outside bounds of available trees (&quot;</span>
      &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }
  <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[boxLabel];

                    <span class="comment">// for return value, to accumulate the likelihood we seek</span>
  interval lkl(0.0, 0.0);

  <span class="comment">// for each pattern in the pattern counts</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
  {

                    <span class="comment">// set up a container for nucleotype probabilities</span>
    <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a> iNucProb;
    <span class="comment">// use fillProbIntervalJC69 to fill this in for the pattern_ith member of </span>
    <span class="comment">// the baseSequences so that it will have one member for each character in </span>
    <span class="comment">// the CharacterSpace, each being</span>
    <span class="comment">// the probability of that character at the root node</span>
    iNucProb = 
      thisTree-&gt;<a class="code" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a" title="Return the probability of a given pattern for this tree.">fillProbIntervalJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
                                     iNucProb);

    <span class="comment">// check we have got the right number of probabilities back</span>
    <span class="keywordflow">if</span>(iNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
    {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities &quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;less than character space&quot;</span> &lt;&lt; std::endl;
      exit(1);
    }

    interval prob(0.0, 0.0);
    interval initialvalue(0.0, 0.0);
    <span class="comment">// combine the nucleotide probabilities</span>
    <span class="comment">// sum with the intervalSum function</span>
    prob = std::accumulate(iNucProb.begin(), iNucProb.end(), 
                           initialvalue, <a class="code" href="PhyloTree_8cpp.shtml#a84ced4c363a59a5168225a9396ce2b84" title="operator const LabBox&amp; X Utility function to sum intervals">intervalSum</a>);

    <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
    prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);

    <span class="comment">// add to the likelihood</span>
    lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
  }

  <span class="comment">// increment the number of interval() calls in the function object</span>
  <a class="code" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070" title="Track number of interval function calls.">n_interval_calls</a>++;

  <span class="keywordflow">return</span> lkl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="afdf1491ae76809442d33e224b4607102"></a><!-- doxytag: member="FPhyloPOT::operator()" ref="afdf1491ae76809442d33e224b4607102" args="(const LabPnt &amp;lp) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real FPhyloPOT::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;&#160;</td>
          <td class="paramname"><em>lp</em></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>real function object </p>

<p>Implements <a class="el" href="classFobj.shtml#a7e89aa4918cf8e40683dde607257d1ee">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00233">233</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00078">DATA::baseSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00080">DATA::BNo_pattern</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00074">DATA::BPatternCounts</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00119">CharacterSpace</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">PhyloTree::fillProbRealJC69()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00035">LabPnt::L</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00156">n_real_calls</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l01061">realSum()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>
<div class="fragment"><pre class="fragment">{
                    <span class="comment">// no patterns or no treeRoots</span>
  <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
  {
    cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
         &lt;&lt; std::endl;
    exit(1);
  }

  rvector x(lp.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>);<span class="comment">// the point we should be dealing with</span>

  <span class="comment">// identify which tree in the topology space from the label of the point</span>
                    <span class="comment">// labels run 0, 1, 2, etc</span>
  <span class="keywordtype">int</span> ptLabel = lp.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>;
  <span class="keywordflow">if</span>(ptLabel &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Label on point &quot;</span> &lt;&lt; ptLabel &lt;&lt;
      <span class="stringliteral">&quot; greater outside bounds of available trees (&quot;</span>
      &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }
  <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[ptLabel];

  real lkl(0.0);    <span class="comment">// for return value, to accumulate the likelihood we seek</span>

  <span class="comment">// for each pattern in the pattern counts</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
  {

                    <span class="comment">// set up a container for nucleotype probabilities</span>
    <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a> rNucProb;
    <span class="comment">// use fillProbRealJC69 to fill this in for the pattern_ith member of the </span>
    <span class="comment">// baseSequences so that it will have one member for each character in the </span>
    <span class="comment">// CharacterSpace, each being the probability of that character at the root </span>
    <span class="comment">// node</span>
    rNucProb = 
      thisTree-&gt;<a class="code" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24" title="Return the probability of a given pattern for this tree.">fillProbRealJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
                                 rNucProb);

    <span class="comment">// check we have got the right number of probabilities back</span>
    <span class="keywordflow">if</span>(rNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
    {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities &quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;less than character space&quot;</span> &lt;&lt; std::endl;
      exit(1);
    }

    real prob(0.0);

    <span class="comment">// combine the nucleotide probabilities</span>
                    <span class="comment">// sum with the realSum function</span>
    prob = std::accumulate(rNucProb.begin(), rNucProb.end(), 
                           <span class="keyword">static_cast&lt;</span>real<span class="keyword">&gt;</span>(0.0), <a class="code" href="PhyloTree_8cpp.shtml#ae36eeec3df01dff75dc04065eb5095f4" title="operator const LabPnt&amp; X Utility function to sum reals">realSum</a>);

    <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
    prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);

    <span class="comment">// add to the likelihood</span>
    lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
  }

  <span class="comment">// increment the number of real() calls in the function object</span>
  <a class="code" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec" title="Track number of real function calls.">n_real_calls</a>++;   

  <span class="keywordflow">return</span> lkl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8a259ba9d2704e586dc2dcea268dc8e8"></a><!-- doxytag: member="FPhyloPOT::operator()" ref="a8a259ba9d2704e586dc2dcea268dc8e8" args="(const HTvector &amp;x, const int label=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">HessType FPhyloPOT::operator() </td>
          <td>(</td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>HessType function object. </p>

<p>Reimplemented from <a class="el" href="classFobj.shtml#abe7df6a2da2b1d26915b41128d7693fe">Fobj</a>.</p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00305">305</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00078">DATA::baseSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00080">DATA::BNo_pattern</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00074">DATA::BPatternCounts</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00119">CharacterSpace</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00276">PhyloTree::fillProbHessJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l01073">hessSum()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>
<div class="fragment"><pre class="fragment">{

                    <span class="comment">// no patterns or no treeRoots</span>
  <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
  {
    cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
         &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// check the label is in our label set</span>
  <span class="keywordflow">if</span> (label &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Tree label &quot;</span> &lt;&lt; label
      &lt;&lt; <span class="stringliteral">&quot; does not identify a tree for this function object&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// We do global optimisation for the tree labelled with label</span>
  <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[label];

  <span class="keywordtype">int</span> d = x.Dim();
  HessType lkl(d);
  lkl = 0.0;        <span class="comment">// for return value, to accumulate the likelihood we seek</span>

  <span class="comment">// for each pattern in the pattern counts</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
  {

    <span class="comment">// set up a container for nucleotype probabilities</span>
    <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a> hNucProb;
    <span class="comment">// use fillProbHessJC69 to fill this in for the pattern_ith member of the </span>
    <span class="comment">// baseSequences so that it will have one member for each character in the </span>
    <span class="comment">// CharacterSpace, each being</span>
    <span class="comment">// the probability of that character at the root node</span>
    hNucProb = 
      thisTree-&gt;<a class="code" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183" title="Return the probability of a given pattern for this tree.">fillProbHessJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
                                 hNucProb);

    <span class="comment">// check we have got the right number of probabilities back</span>
    <span class="keywordflow">if</span>(hNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
    {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities less than &quot;</span> 
                &lt;&lt; <span class="stringliteral">&quot;character space&quot;</span> &lt;&lt; std::endl;
      exit(1);
    }

    HessType prob(d);
    prob = 0.0;
    HessType initialvalue(d);
    initialvalue = 0.0;

    <span class="comment">// combine the nucleotide probabilities</span>
                    <span class="comment">// sum with the hessSum function</span>
    prob = std::accumulate(hNucProb.begin(), hNucProb.end(), 
                           initialvalue, <a class="code" href="PhyloTree_8cpp.shtml#a62f64b7d245c1108fa85ec6509952932" title="operator const HTvector&amp; X Utility function to sum HessTypes">hessSum</a>);

    <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
    prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);

    <span class="comment">// add to the likelihood</span>
    lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
  }

  <span class="keywordflow">return</span> lkl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c075a1b4511f691106e7c5c823a5e78"></a><!-- doxytag: member="FPhyloPOT::PrintSequence" ref="a7c075a1b4511f691106e7c5c823a5e78" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78">FPhyloPOT::PrintSequence</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print the summmary of results of <a class="el" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c" title="Reads sequences from a txt file.">ReadSequence()</a> and <a class="el" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216" title="Finds patterns in sequences read in and fills in datamembers in SeqData struct.">FindPattern()</a> </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00683">683</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00078">DATA::baseSequences</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00080">DATA::BNo_pattern</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00074">DATA::BPatternCounts</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00077">DATA::BPatterns</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00070">DATA::No_seq</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{
  vector&lt;int&gt;::iterator it;

  <span class="comment">//printing sequence patterns</span>
  std::cout &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;For the &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &lt;&lt; <span class="stringliteral">&quot; sequences, there are &quot;</span> &lt;&lt;
    <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> &lt;&lt; <span class="stringliteral">&quot; patterns &quot;</span> &lt;&lt; std::endl;

  std::cout &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;The pattern counts are:&quot;</span> &lt;&lt; std::endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
  {
    std::cout &lt;&lt; (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[i] &lt;&lt; std::endl;
  }

  std::cout &lt;&lt; std::endl;
  <span class="comment">//printing the nucleotide code patterns</span>
  std::cout &lt;&lt; <span class="stringliteral">&quot;The patterns in code are:&quot;</span> &lt;&lt; std::endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
  {
    vector&lt;int&gt; tempvec = (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[i];
    <span class="keywordflow">for</span> (it = tempvec.begin(); it &lt; tempvec.end(); it++)
    {
      std::cout &lt;&lt; *it;
    }
    std::cout &lt;&lt; std::endl;
  }

  std::cout &lt;&lt; std::endl;
  <span class="comment">//printing the nucleotide patterns</span>
  std::cout &lt;&lt; <span class="stringliteral">&quot;The patterns in nucleotides are:&quot;</span> &lt;&lt; std::endl;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
  {
    std::cout &lt;&lt; (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>)[i] &lt;&lt; std::endl;
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaa8c6c8230611cf1f7029be0d00e352c"></a><!-- doxytag: member="FPhyloPOT::PrintTopologyTrees" ref="aaa8c6c8230611cf1f7029be0d00e352c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c">FPhyloPOT::PrintTopologyTrees</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Prints all the trees to console output. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00815">815</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00135">n_dimensions</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00141">tree_nodes</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">//describe the generic tree</span>
  std::cout &lt;&lt; endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;The trees will have &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a>
    &lt;&lt; <span class="stringliteral">&quot; nodes and &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> &lt;&lt; <span class="stringliteral">&quot; edges&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;

  <a class="code" href="PhyloTree_8hpp.shtml#a2b4b80181cb6658430fed06941d6d356" title="an iterator over a container of PhyloTrees">PhyloTreePtrsItr</a> it;
  <span class="keywordtype">int</span> i = 0;

  <span class="comment">//for each tree in treeRoots</span>
  <span class="keywordflow">for</span> (it = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.begin(); it &lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.end(); it++)
  {

    std::cout &lt;&lt; <span class="stringliteral">&quot;Tree number &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; is:&quot;</span> &lt;&lt;std::endl;
    (*it)-&gt;PrintTree();
    std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
    i++;
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a02e78c307455acbbaa53b0482d4a8b0c"></a><!-- doxytag: member="FPhyloPOT::ReadSequence" ref="a02e78c307455acbbaa53b0482d4a8b0c" args="(const string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c">FPhyloPOT::ReadSequence</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads sequences from a txt file. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">481</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00429">CheckReadLine()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00441">FileInputError()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00110">maxCharInSeqName</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00070">DATA::No_seq</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00068">DATA::rawSequences</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00450">ReformatSequence()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00072">DATA::Seq_length</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00066">DATA::seqNames</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// reset</span>
  <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> = 0;
  <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> = 0;
  <span class="comment">// make sure the sequence name and sequence containers are empty</span>
  (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>).clear();
  (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>).clear();

                    <span class="comment">// make and open an ifstream object</span>
  ifstream seqFile(s.c_str());

  <span class="keywordtype">int</span> i;            <span class="comment">// for counters</span>

  <span class="keywordtype">string</span> line;      <span class="comment">// for a line read in</span>

  <span class="comment">// read the first line</span>
  <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);

                    <span class="comment">// convert to a stream</span>
  istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line);
  <span class="comment">// the first line which should be the number of sequences </span>
  <span class="comment">// and the sequence length</span>

                    <span class="comment">// extraction operator on a stream</span>
  <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &gt;&gt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>;

  <span class="comment">//  check we read two positive two integers from the first line</span>
  <span class="keywordflow">if</span> ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &lt;= 0) || <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> &lt;= 0)
  {
    <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, <span class="stringliteral">&quot;Check your sequence data file first line&quot;</span>);
  }

  <span class="comment">// for each of the expected number of sequences</span>
  <span class="comment">// if there are more sequences they will not be read</span>
  <span class="comment">// and if there are less the program will give error message and exit</span>
  <span class="comment">// it would be easy to have a more flexible format without having to </span>
  <span class="comment">// pre-specify number of sequences and length</span>
  <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a>; i++)
  {
    <span class="keywordflow">if</span> (!seqFile.eof())
    {
      <span class="comment">//get the next line in the file, which should be a sequence name</span>
      <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);

      <span class="comment">// check line has some characters and less than </span>
      <span class="comment">// maxCharInSeqName characters</span>
      <span class="keywordflow">if</span> (line.empty() || line.size() &gt; <a class="code" href="classFPhyloPOT.shtml#a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2">maxCharInSeqName</a>)
      {
        <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
                       <span class="stringliteral">&quot;Check sequence file: expected a sequence name&quot;</span>);
      }
      <span class="keywordflow">else</span>          <span class="comment">// line is okay</span>
      {
        (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>).push_back(line);
      }
    }
    <span class="keywordflow">else</span>
    {
      <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
      <span class="stringliteral">&quot;Check sequence file: found less than expected number of sequence names&quot;</span>);
    }

    <span class="keywordflow">if</span> (!seqFile.eof())
    {
      <span class="comment">//get the next line in the file, which should be a sequence</span>
      <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);

      <span class="comment">// check line has some characters</span>
      <span class="keywordflow">if</span> (line.empty())
      {
        <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, <span class="stringliteral">&quot;Check sequence file: expected a sequence&quot;</span>);
      }
      <span class="keywordflow">else</span>          <span class="comment">// line is okay</span>
      {

        <span class="comment">//check the line</span>

                    <span class="comment">// reformats the sequence line</span>
        <a class="code" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c" title="Reformats sequences read in to make them easy to analyse for patterns.">ReformatSequence</a>(line);
        <span class="comment">// and put it into the container of sequences</span>

        <span class="keywordflow">if</span>(line.size() == <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>))
        {
          <span class="comment">// copy the string into vector of chars and copy this </span>
          <span class="comment">// into the rawSequences</span>
          vector&lt;char&gt; tempCharVec(line.begin(), line.end());
          (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>).push_back(tempCharVec);
        }

        <span class="keywordflow">else</span>
        {
          <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
                    <span class="stringliteral">&quot;Check sequence file: a sequence is shorter than expected&quot;</span>);
        }
      }
    }
    <span class="keywordflow">else</span>
    {
      <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
           <span class="stringliteral">&quot;Check sequence file: found less than expected number of sequences&quot;</span>);
    }

  }                 <span class="comment">// end of loop reading sequences and sequence names</span>

  seqFile.close();

  <span class="keywordflow">return</span> (0);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a7c1b63e0429cce2c72eaabf284eb5e43"></a><!-- doxytag: member="FPhyloPOT::ReadTrees" ref="a7c1b63e0429cce2c72eaabf284eb5e43" args="(const string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43">FPhyloPOT::ReadTrees</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Makes trees from a tree file. </p>
<p>Reads in lines from the file, tries to construct a tree with each on, puts trees into treeRoots </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the tree file </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>treeRoots should be contain one pointer to a tree for every line in the tree file </dd></dl>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">724</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>References <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00119">CharacterSpace</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00150">destroyRoots()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00181">PhyloTree::getNumberNodes()</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">SeqData</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00066">DATA::seqNames</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00138">topologies</a>, <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00141">tree_nodes</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">treeRoots</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>
<div class="fragment"><pre class="fragment">{
                    <span class="comment">// a container for treeLines read in</span>
  vector&lt;string&gt; treeLines;

  <span class="comment">// we have treefile with multiple lines, one line for each topology</span>
  <span class="comment">// read the file and store each line</span>
                    <span class="comment">// make and open an ifstream object</span>
  ifstream treeFile(s.c_str());

  <span class="comment">// get each line and push back into treeLines container</span>
  <span class="keywordflow">while</span>(treeFile.good())
  {
    <span class="keywordtype">string</span> line;
    getline(treeFile, line);

    <span class="comment">// erase trailing white space</span>
    <span class="keywordtype">string</span> whitespaces (<span class="stringliteral">&quot; \t\f\v\n\r&quot;</span>);
    <span class="keywordtype">size_t</span> found;

    found=line.find_last_not_of(whitespaces);
    <span class="keywordflow">if</span> (found!=string::npos)
    {
                    <span class="comment">// erase everything from found onwards</span>
      line.erase(found+1);
      treeLines.push_back(line);
    }
    <span class="keywordflow">else</span>
    {
      line.clear(); <span class="comment">// str is all whitespace</span>
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Line in treefile is all whitespace&quot;</span> &lt;&lt; std::endl;
    }
  }

  treeFile.close(); <span class="comment">// finished with the treeFile</span>

                    <span class="comment">// count the lines read in</span>
  <span class="keywordtype">size_t</span> countLines = treeLines.size();

  <span class="comment">// checks on the treefile lines read in</span>
  <span class="keywordflow">if</span> (countLines == 0)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in tree file: no trees read in&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
    exit(1);
  }
  <span class="keywordflow">if</span> (countLines!=static_cast&lt;size_t&gt;(<a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in tree file: number of lines for trees is not the &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;expected number of topologies &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> 
              &lt;&lt; std::endl &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// should now have topologies lines read in </span>
  <span class="comment">// (eg topologies = 1 for 3 taxa case, 3 for 4 taxa, etc)</span>

  <span class="comment">// for each line, ie each topology, set up a new tree for this topology</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; static_cast&lt;size_t&gt;(<a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>); i++)
  {

    <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* newtree;

    <span class="keywordflow">try</span>
    {
      <span class="comment">// use PhyloTree constructor with the </span>
      <span class="comment">// line, sequence names, and character space</span>
      newtree = <span class="keyword">new</span> <a class="code" href="classPhyloTree.shtml">PhyloTree</a>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>, treeLines[i], <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>);
    }

    <span class="keywordflow">catch</span> (bad_alloc&amp;)
    {
      std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in ReadTrees&quot;</span> &lt;&lt; std::endl;
    }

    <span class="comment">// we expect to find the tree_nodes number of nodes</span>
    <span class="keywordflow">if</span> (static_cast&lt;int&gt;((newtree-&gt;<a class="code" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7" title="Get the number of nodes in the tree, including the root.">getNumberNodes</a>())) != <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a>)
    {
      <span class="comment">// error in tree file</span>

      <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file, please check the number of nodes&quot;</span>;
      <span class="keyword">delete</span> newtree;
      <a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858" title="Destroys the trees (dynamic memory), used by destructor.">destroyRoots</a>();
      exit(1);
    }

                    <span class="comment">// pushes a copy of the newtree pointer into treeRoots;</span>
    <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.push_back(newtree);
  }
  <span class="comment">// we now have treeRoots full of pointers to PhyloTrees</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa8490107b21f3b7efe2fa3bbfc8c6b1c"></a><!-- doxytag: member="FPhyloPOT::ReformatSequence" ref="aa8490107b21f3b7efe2fa3bbfc8c6b1c" args="(string &amp;line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c">FPhyloPOT::ReformatSequence</a> </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>line</em></td><td>)</td>
          <td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reformats sequences read in to make them easy to analyse for patterns. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00450">450</a> of file <a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">ReadSequence()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="keywordtype">size_t</span> pos;

  <span class="keywordtype">string</span> toErase(<span class="stringliteral">&quot; \r\t\0&quot;</span>);
  <span class="keywordtype">string</span> toReplace(<span class="stringliteral">&quot;u&quot;</span>);

  <span class="comment">// erase unwanted characters</span>
  pos = line.find_first_of(toErase);
  <span class="keywordflow">while</span> (pos!=string::npos)
  {
    line.erase(pos);
    pos = line.find_first_of(toErase, pos);
  }

  <span class="comment">//turn it all to lower case</span>
  std::transform(line.begin(), line.end(), line.begin(), ::tolower);

  <span class="comment">// if a character is &#39;u&#39;, replace by &#39;t&#39;</span>
  pos = line.find_first_of(toReplace);
  <span class="keywordflow">while</span> (pos!= string::npos)
  {
    line.replace(pos, 1, <span class="stringliteral">&quot;t&quot;</span>);
    pos = line.find_first_of(toReplace, pos+1);
  }
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="aef4d908d355efec47e284d3845d74b73"></a><!-- doxytag: member="FPhyloPOT::n_dimensions" ref="aef4d908d355efec47e284d3845d74b73" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73">FPhyloPOT::n_dimensions</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The number of edges in an unrooted tree. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00135">135</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00815">PrintTopologyTrees()</a>.</p>

</div>
</div>
<a class="anchor" id="a6121e3100ec3c00f522f15e1feae0070"></a><!-- doxytag: member="FPhyloPOT::n_interval_calls" ref="a6121e3100ec3c00f522f15e1feae0070" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070">FPhyloPOT::n_interval_calls</a><code> [mutable, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Track number of interval function calls. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00153">153</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="a4e705aece25b8ee32d67aa6ab50cd9ec"></a><!-- doxytag: member="FPhyloPOT::n_real_calls" ref="a4e705aece25b8ee32d67aa6ab50cd9ec" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec">FPhyloPOT::n_real_calls</a><code> [mutable, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Track number of real function calls. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00156">156</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00233">operator()()</a>.</p>

</div>
</div>
<a class="anchor" id="aa80ced607ed41f02bcd56b6f08fbd1ff"></a><!-- doxytag: member="FPhyloPOT::SeqData" ref="aa80ced607ed41f02bcd56b6f08fbd1ff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct <a class="el" href="structDATA.shtml">DATA</a> <a class="el" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff">FPhyloPOT::SeqData</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A struct for the sequence data read in. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00144">144</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00592">FindPattern()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">operator()()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00683">PrintSequence()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00481">ReadSequence()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>.</p>

</div>
</div>
<a class="anchor" id="af68e59b4d63e18f0b82864b101fd29d2"></a><!-- doxytag: member="FPhyloPOT::topologies" ref="af68e59b4d63e18f0b82864b101fd29d2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2">FPhyloPOT::topologies</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The number of unrooted topology trees given the model space. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00138">138</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>.</p>

</div>
</div>
<a class="anchor" id="ab30590c070d95d5d5d7966cb386db7d6"></a><!-- doxytag: member="FPhyloPOT::tree_nodes" ref="ab30590c070d95d5d5d7966cb386db7d6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6">FPhyloPOT::tree_nodes</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The number of nodes in an unrooted tree given the number of taxa. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00141">141</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00815">PrintTopologyTrees()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>.</p>

</div>
</div>
<a class="anchor" id="a84a8fb3afb2b975331062752d414723a"></a><!-- doxytag: member="FPhyloPOT::tree_space" ref="a84a8fb3afb2b975331062752d414723a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFPhyloPOT.shtml#a84a8fb3afb2b975331062752d414723a">FPhyloPOT::tree_space</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The model space or number of taxa. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00132">132</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT()</a>.</p>

</div>
</div>
<a class="anchor" id="a99124f9f8855b0aebcccd20804ef9cde"></a><!-- doxytag: member="FPhyloPOT::treeRoots" ref="a99124f9f8855b0aebcccd20804ef9cde" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a7924aedff3cf2bea3ffccb7b9f59f970">PhyloTreePtrs</a> <a class="el" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde">FPhyloPOT::treeRoots</a><code> [mutable, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A container of pointers to PhyloTrees. </p>

<p>Definition at line <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00147">147</a> of file <a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00150">destroyRoots()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">operator()()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00815">PrintTopologyTrees()</a>, and <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">ReadTrees()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="FPhyloPOT_8hpp_source.shtml">FPhyloPOT.hpp</a></li>
<li><a class="el" href="FPhyloPOT_8cpp_source.shtml">FPhyloPOT.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classFPhyloPOT.shtml">FPhyloPOT</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:25 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
