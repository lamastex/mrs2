<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FiniteMixtureStats.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FiniteMixtureStats_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FiniteMixtureStats.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
</div>
<p><a href="FiniteMixtureStats_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FiniteMixtureStats_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition in file <a class="el" href="FiniteMixtureStats_8cpp_source.shtml">FiniteMixtureStats.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="FiniteMixtureStats.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="FiniteMixtureStats_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="FiniteMixtureStats_8cpp_source.shtml">FiniteMixtureStats.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01386">F()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00223">findComp()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00176">FinMixCDF()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03970">subpavings::AdaptiveHistogram::getFinMixIntervalIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00733">getRegHistFinMixIntervalIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01247">subpavings::AdaptiveHistogram::getRootLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00282">RegHist::heights</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00709">subpavings::AdaptiveHistogramValidation::insertFromRVecForHoldOut()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00272">makeRegularHist()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">subpavings::AdaptiveHistogramValidation::prioritySplitAndEstimate()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01846">subpavings::AdaptiveHistogram::prioritySplitWithTotalVar()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//===========user-defined parameters==============================//</span>
  <span class="keywordflow">if</span> ( argc != 11 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix simNum maxCheck StopVal doEx doTV doMDE doRegHist&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[4]); <span class="comment">//which data set </span>
   <span class="keywordtype">double</span> alpha = 0.95; <span class="comment">//to compute the coverage</span>
   <span class="keywordtype">size_t</span> maxCheck = atoi(argv[5]); <span class="comment">//stopping criteria for MDE</span>
   <span class="keywordtype">int</span> StopVal = atoi(argv[6]); <span class="comment">//stopping criteria for total variation</span>
   <span class="keywordtype">int</span> doEx = atoi(argv[7]);
   <span class="keywordtype">int</span> doTV = atoi(argv[8]);
   <span class="keywordtype">int</span> doMDE = atoi(argv[9]);
   <span class="keywordtype">int</span> doRegHist = atoi(argv[10]);
   
   <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
  <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   std::ostringstream stm;
  stm &lt;&lt; simNum;

  <span class="comment">//==============get distribution parameters==========================//</span>
   <span class="comment">// read input from mix*.txt</span>
   <span class="keywordtype">string</span> mixfileName;
   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stmMix;
  stmMix &lt;&lt; mix;
  mixfileName += stmMix.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;

  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(mixfileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();
  
  <span class="comment">//put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
  <span class="comment">//=========================end of setting up parameter===================//</span>

  <span class="comment">// ========prepare to generate some data for the tests ================//</span>
    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    gsl_rng_set(r, dataSeed);

   <span class="comment">//set up a random number generator for gaussian rvs</span>
     <span class="keyword">const</span> gsl_rng_type * T1;
     gsl_rng * r1;
     gsl_rng_env_setup();
     T1 = gsl_rng_default;
     r1 = gsl_rng_alloc (T1);
     gsl_rng_set(r1, dataSeed);
     
  <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
  <span class="keywordtype">double</span> a=0, b=1;
  vector&lt;double&gt; u;
  <span class="keywordtype">int</span> j;
  <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
      u.push_back(gsl_ran_flat(r, a, b));
  }

  <span class="comment">// number of components</span>
  <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
  cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;

  <span class="comment">// get cumulative sum of the weights</span>
  <span class="keywordtype">double</span> WeightCum[comp];
  <span class="comment">//initialize the array</span>
  WeightCum[0] = Weight[0]; 
  cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
    WeightCum[j] = WeightCum[j-1] + Weight[j];
  }

  <span class="comment">//Create mixture data using component densities that are normal.</span>
  cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
    <span class="comment">//find the number of members generated from each component.</span>
    <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
      <span class="keywordtype">int</span> ind=0;
      cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
      <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
      cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
      <span class="comment">//now generate the data</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
        rvector thisrv(1);
        <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
        thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
        theData.push_back(thisrv);
      }
    }

  ivector pavingBox;
  <span class="keywordtype">double</span> rootBoxVol;
  <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
  <span class="comment">//===============finish generating data============================//</span>


  <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
  <span class="keywordflow">if</span> (doEx == 1) {
  
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
  <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;

  <span class="comment">// containers for output needed</span>
   vector&lt;real&gt; IAE1;
   vector&lt;int&gt; NumLeafNodes1;
   vector&lt;double&gt; TotalVarDist1;
   vector&lt;double&gt; Coverage1;
   vector&lt;double&gt; Times1;
   
    vector&lt;real&gt; IAE2;
   vector&lt;int&gt; NumLeafNodes2;
   vector&lt;double&gt; TotalVarDist2;
   vector&lt;double&gt; Coverage2;
   vector&lt;double&gt; Times2;
   
   vector&lt;real&gt; IAE3;
  vector&lt;int&gt; NumLeafNodes3;
   vector&lt;double&gt; TotalVarDist3;
   vector&lt;double&gt; Coverage3;
   vector&lt;double&gt; Times3;
   
  vector&lt;real&gt; IAE4;
  vector&lt;int&gt; NumLeafNodes4;
   vector&lt;double&gt; TotalVarDist4;
   vector&lt;double&gt; Coverage4;
   vector&lt;double&gt; Times4;

  <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
  <span class="comment">// set up function objects for a priority split</span>
  <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
  <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
  <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
  <a class="code" href="classsubpavings_1_1CompExtArea.shtml" title="Class comparing the &quot;extended&quot;area of a histogram.">CompExtArea</a> compExtArea;
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
  
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1(holdAllStats); 
    successfulInsertion1= myHist1.insertFromRVec(theData);
    rootBoxVol = (myHist1.getSubPaving()-&gt;nodeVolume());
    pavingBox = (myHist1.getSubPaving()-&gt;getBox());
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2(holdAllStats); 
    successfulInsertion2= myHist2.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3(holdAllStats); 
    successfulInsertion3= myHist3.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4(holdAllStats); 
    successfulInsertion4= myHist4.insertFromRVec(theData);
    
    <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
        &amp;&amp; successfulInsertion4) {
      <span class="keywordtype">int</span> finalK = int(i*0.005*n);
      cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

      <span class="keywordtype">size_t</span> maxLeafNodes = n;
      <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
      
      <span class="comment">// we want to check the timings for this</span>
      clock_t start, end;
      <span class="keywordtype">double</span> timing; 
      
      <span class="comment">// do the priority split for compCount</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit1 = myHist1.prioritySplit(compCount,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times1.push_back(timing);
      
      <span class="comment">// do the priority split for compVol</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit2 = myHist2.prioritySplit(compVol,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times2.push_back(timing);
      
      <span class="comment">// do the priority split for compMassVol</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit3 = myHist3.prioritySplit(compArea,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times3.push_back(timing);
      
      <span class="comment">// do the priority split for compMassVol</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit4 = myHist4.prioritySplit(compExtArea,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times3.push_back(timing);

      <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
          &amp;&amp; successfulPQSplit4) {
        
        <span class="comment">//optional - output the histogram</span>
        <span class="comment">// create a name for the file to output</span>
            <span class="keywordtype">string</span> fileName;
            fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
            std::ostringstream stm2;
            stm2 &lt;&lt; finalK;
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            myHist1.outputToTxtTabs(fileName);
            
            <span class="comment">//optional - output the histogram</span>
        <span class="comment">// create a name for the file to output</span>
            fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            myHist2.outputToTxtTabs(fileName);
            
            <span class="comment">//optional - output the histogram</span>
        <span class="comment">// create a name for the file to output</span>
            fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            myHist3.outputToTxtTabs(fileName);
            
            <span class="comment">//optional - output the histogram</span>
        <span class="comment">// create a name for the file to output</span>
            fileName = <span class="stringliteral">&quot;HistExtArea&quot;</span>;
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            myHist4.outputToTxtTabs(fileName);
        <span class="comment">/*</span>
<span class="comment">        SPSnodePtrs leaves;</span>
<span class="comment">        SPSnodePtrsItr leavesIt;</span>
<span class="comment">        (myHist.getSubPaving())-&gt;getLeaves(leaves);</span>
<span class="comment"></span>
<span class="comment">        //get the number of leaves</span>
<span class="comment">        NumLeafNodes.push_back(leaves.size());</span>
<span class="comment">        double FUnif = 1.0/leaves.size()*1.0;</span>
<span class="comment">        //cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>
<span class="comment"></span>
<span class="comment">        //initialize totalvariationdistance</span>
<span class="comment">        double totalVarDist = 0.0;</span>
<span class="comment"></span>
<span class="comment">        //initialize the coverage</span>
<span class="comment">        size_t yesCovOne = 0;</span>
<span class="comment"></span>
<span class="comment">        //iterate through the leaf nodes</span>
<span class="comment">        for (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {</span>
<span class="comment">          double leafVol = (*leavesIt)-&gt;nodeVolume();</span>
<span class="comment">          //get the total variation distance</span>
<span class="comment">          //calculate \mu_n - \mu</span>
<span class="comment">               double fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;</span>
<span class="comment">               //cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<span class="comment">               double diffMu = fabs(fhat*leafVol - FUnif);</span>
<span class="comment">          totalVarDist += diffMu;</span>
<span class="comment">          //out &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<span class="comment">          //totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<span class="comment">          //cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<span class="comment"></span>
<span class="comment">          //get the 95% coverage</span>
<span class="comment">          // c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<span class="comment">          double c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*sqrt(rootBoxVol/leafVol)/2/sqrt(n);</span>
<span class="comment"></span>
<span class="comment">          // get lower and upper bounds</span>
<span class="comment">          double Lb = pow(fmax(sqrt(fhat)-c, 0), 2); // lower bound</span>
<span class="comment">          double Ub = pow(sqrt(fhat) + c, 2); // upper bound</span>
<span class="comment"></span>
<span class="comment">          //get the CDF</span>
<span class="comment">          rvector xuppVec = Sup((*leavesIt)-&gt;getBox());</span>
<span class="comment">          double xupp = _double(xuppVec[1]);</span>
<span class="comment">          rvector xlowVec = Inf((*leavesIt)-&gt;getBox());</span>
<span class="comment">          double xlow = _double(xlowVec[1]);</span>
<span class="comment">          double F=FinMixCDF(xlow, xupp, Weight, Mean, Sigma);</span>
<span class="comment">          </span>
<span class="comment">          // see SAGE worksheet for this</span>
<span class="comment">          if ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}</span>
<span class="comment">        } // end of iterating through the leaves</span>
<span class="comment"></span>
<span class="comment">        //keep the total variation distance</span>
<span class="comment">        //cout &lt;&lt; &quot;final: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<span class="comment">        TotalVarDist.push_back(totalVarDist);</span>
<span class="comment"></span>
<span class="comment">        //keep the coverage</span>
<span class="comment">        //cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<span class="comment">        //    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<span class="comment">        Coverage.push_back(yesCovOne*1.0/(leaves.size()*1.0));</span>
<span class="comment">        */</span>
        
        <span class="comment">//get the IAE</span>
        real midIAE = mid(myHist1.getFinMixIntervalIAE(mixt, Tol, Deg));
        IAE1.push_back(midIAE);
        NumLeafNodes1.push_back(myHist1.getRootLeaves());
        
        <span class="comment">//get the IAE</span>
        midIAE = mid(myHist2.getFinMixIntervalIAE(mixt, Tol, Deg));
        IAE2.push_back(midIAE);
        NumLeafNodes2.push_back(myHist2.getRootLeaves());
        
        <span class="comment">//get the IAE</span>
        midIAE = mid(myHist3.getFinMixIntervalIAE(mixt, Tol, Deg));
        IAE3.push_back(midIAE);
        NumLeafNodes3.push_back(myHist3.getRootLeaves());
        
        <span class="comment">//get the IAE</span>
        midIAE = mid(myHist4.getFinMixIntervalIAE(mixt, Tol, Deg));
        IAE4.push_back(midIAE);
        NumLeafNodes4.push_back(myHist4.getRootLeaves());
        
      } <span class="comment">// end of if(successfulPQSplit)</span>
    }<span class="comment">// end of if(successfulInsertion)</span>
  } <span class="comment">// end of iterating through different kn&#39;s</span>

  <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
      successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
        &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
    <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAE1.size(); i++) {
      oss &lt;&lt; IAE1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodes1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; IAE2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodes2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; IAE3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodes3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; IAE4[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodes4[i] &lt;&lt; endl;
      <span class="comment">//oss &lt;&lt; NumLeafNodes[i] &lt;&lt; &quot;\t&quot;;</span>
      <span class="comment">//oss &lt;&lt; TotalVarDist[i] &lt;&lt; &quot;\t&quot;;</span>
      <span class="comment">//oss &lt;&lt; Coverage[i] &lt;&lt; &quot;\t&quot;;</span>
      <span class="comment">//oss &lt;&lt; Times[i] &lt;&lt; endl;</span>
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  }
} <span class="comment">// end of doEx</span>
<span class="comment">//=================end of exhaustive PQ=================================// </span>

<span class="keywordflow">if</span> (doTV == 1) {
<span class="comment">//===using total variation to determine best histogram and a stopping rule=//</span>
cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
cout &lt;&lt; <span class="stringliteral">&quot;Run PQ with total variation...&quot;</span> &lt;&lt; endl;

<span class="comment">//containers to store needed output</span>
vector&lt;real&gt; IAETotal;
vector&lt;int&gt; CoverageTotal;
vector&lt;int&gt; NumLeafNodesTotal;
vector&lt;double&gt; TotalVarDistTotal;
<span class="keywordtype">double</span> timing; 

<span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;

vector&lt;AdaptiveHistogram&gt; HistAtValley;

<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistTot(holdAllStats); 
successfulInsertion= myHistTot.insertFromRVec(theData);

<span class="keywordflow">if</span> (successfulInsertion) {
  <span class="keywordtype">int</span> finalK = 1;
  cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
  
  <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;

  <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
  <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
  <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

  <span class="comment">// we want to check the timings for this</span>
  clock_t start, end;

  <span class="comment">// do the priority split</span>
  start  = clock(); <span class="comment">// and keep the time</span>
  <span class="keywordtype">bool</span>  successfulPQSplit = myHistTot.prioritySplitWithTotalVar(compCount,
         critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, StopVal, 
         HistAtValley, simNum); <span class="comment">// no logging</span>
  end = clock();
  timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;

  <span class="keywordflow">if</span> (successfulPQSplit) {
    <span class="comment">//iterate through the &quot;best&quot; histograms to get the MIAE</span>
    vector&lt;AdaptiveHistogram&gt;::iterator it;
    <span class="keywordflow">for</span> (it = HistAtValley.begin(); it &lt; HistAtValley.end(); it++) {
      <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
      <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
      ((*it).getSubPaving())-&gt;getLeaves(leaves);
      (*it).outputToTxtTabs(<span class="stringliteral">&quot;HistTotal.txt&quot;</span>);
      <span class="comment">//get the IAE</span>
      real midIAE = mid((*it).getFinMixIntervalIAE(mixt, Tol, Deg));
      IAETotal.push_back(midIAE);

      <span class="comment">//get the number of leaves</span>
      NumLeafNodesTotal.push_back(leaves.size());
      <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
      cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;

      <span class="comment">//initialize the coverage</span>
      <span class="keywordtype">size_t</span> yesCovOne = 0;
      
      <span class="comment">//initialize the total variation distance</span>
      <span class="keywordtype">double</span> totalVarDist = 0.0;

      <span class="comment">//iterate through the leaf nodes</span>
      <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
        <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
        <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
        <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
        <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
        totalVarDist += diffMu;
        <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
        <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
        <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
        
        <span class="comment">//get the 95% coverage</span>
        <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
        <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);

        <span class="comment">// get lower and upper bounds</span>
        <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
        <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>

        <span class="comment">//get the CDF</span>
        rvector xuppVec = Sup((*leavesIt)-&gt;getBox());
        <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
        rvector xlowVec = Inf((*leavesIt)-&gt;getBox());
        <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
        <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
        
        <span class="comment">// see SAGE worksheet for this</span>
        <span class="keywordflow">if</span> ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}
      } <span class="comment">// end of iterating through the leaves</span>

      <span class="comment">//keep the total variation distance</span>
      TotalVarDistTotal.push_back(totalVarDist);

      <span class="comment">//keep the coverage</span>
      <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
      <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
      CoverageTotal.push_back(yesCovOne*1.0/(leaves.size()*1.0));
    } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
  } <span class="comment">// end of successfulPQSplit</span>
} <span class="comment">// end of successfulInsertion</span>

<span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
  <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
  <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixTotalVariationPQOutput&quot;</span>;
  PQFileName += stm.str();
  PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  oss.open(PQFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageTotal.size(); i++) {
    oss &lt;&lt; IAETotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    oss &lt;&lt; NumLeafNodesTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    oss &lt;&lt; TotalVarDistTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    oss &lt;&lt; CoverageTotal[i] &lt;&lt; endl;
  }
  oss &lt;&lt; timing &lt;&lt; endl;
  oss &lt;&lt; flush;
  oss.close();
  cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
      &lt;&lt; PQFileName &lt;&lt; endl;
}
}<span class="comment">// end of do TV</span>
<span class="comment">//=================end of total variation with stopping rule=================================// </span>

<span class="comment">//==================Hold-out MDE===========================================//</span>
<span class="keywordflow">if</span> (doMDE == 1) {
  cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
  <span class="comment">// indicators</span>
   <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
   <span class="keywordtype">double</span> timing = 0;
   
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal(holdAllStats);
  <span class="keywordtype">int</span> holdOutCount = int(n*0.3);
  <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   
  successfulInsertion = myHistVal.insertFromRVecForHoldOut(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
      &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 

  <span class="comment">//containers for output needed</span>
  vector&lt;real&gt; IAEV;
  vector&lt;int&gt; NumLeafNodesV;
  vector&lt;double&gt; TotalVarDistV;
  vector&lt;double&gt; CoverageV;
  vector&lt;AdaptiveHistogramValidation&gt; HistsKept;
  
  <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
    <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
    <span class="keywordtype">int</span> finalK = 1;
    <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);

    <span class="comment">//start the hold out estimation</span>
    <span class="comment">//with stopping criteria</span>
    <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>;
    cout &lt;&lt; <span class="stringliteral">&quot;------Running MDEAll with stopping criteria-----------&quot;</span> &lt;&lt; endl;
    <span class="keywordtype">int</span> method = 2; <span class="comment">// MDE</span>

    <span class="comment">//maximum number of leaf nodes allowed</span>
    <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
    <span class="keywordtype">size_t</span> maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); <span class="comment">// temporarily</span>

    clock_t start, end;
    start = clock();
    successfulPQSplit = myHistVal.prioritySplitAndEstimate(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                           0, 0.0, stopCrit, mixt, method, simNum, 
                           maxLeafNodes, maxCheck, Tol, Deg, HistsKept);
      end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    
    <span class="keywordflow">if</span> (successfulPQSplit) {
      <span class="comment">// get the final histograms</span>
      vector&lt;AdaptiveHistogramValidation&gt;::iterator it;
      <span class="keywordflow">for</span> (it = HistsKept.begin(); it &lt; HistsKept.end(); it++) {
        <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
        <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> leavesIt;
        ((*it).getSubPaving())-&gt;getLeaves(leaves);

        <span class="comment">//get the IAE</span>
        real midIAE = mid((*it).getFinMixIntervalIAE(mixt, Tol, Deg));
        IAEV.push_back(midIAE);

        <span class="comment">//get the number of leaves</span>
        NumLeafNodesV.push_back(leaves.size());
        <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
        cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;

        <span class="comment">//initialize the coverage</span>
        <span class="keywordtype">size_t</span> yesCovOne = 0;
        
        <span class="comment">//initialize the total variation distance</span>
        <span class="keywordtype">double</span> totalVarDist = 0.0;

        <span class="comment">//iterate through the leaf nodes</span>
        <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
          <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
               <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/(n-holdOutCount);
               <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
               <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
          totalVarDist += diffMu;
          <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
          <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
          <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
          
          <span class="comment">//get the 95% coverage</span>
          <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
          <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
          <span class="comment">// get lower and upper bounds</span>
          <span class="keywordtype">double</span> Lb = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
          <span class="keywordtype">double</span> Ub = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
          
          <span class="comment">//get the CDF</span>
          rvector xuppVec = Sup((*leavesIt)-&gt;getBox());
          <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
          rvector xlowVec = Inf((*leavesIt)-&gt;getBox());
          <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
          <span class="keywordtype">double</span> F=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
        
          <span class="comment">// see SAGE worksheet for this</span>
          <span class="keywordflow">if</span> ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}
        } <span class="comment">// end of iterating through the leaves</span>

        <span class="comment">//keep the total variation distance</span>
        TotalVarDistV.push_back(totalVarDist);
        
  

        <span class="comment">//keep the coverage</span>
        <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
        <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
        CoverageV.push_back(yesCovOne*1.0/(leaves.size()*1.0));
      } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
    } <span class="comment">// end of successfulPQSplit</span>
  } <span class="comment">// end of successfulInsertion</span>

  <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
    <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixMDEPQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageV.size(); i++) {
      oss &lt;&lt; IAEV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; TotalVarDistV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; CoverageV[i] &lt;&lt; endl;
    }
    oss &lt;&lt; timing &lt;&lt; endl;
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  }
} <span class="comment">// end of do MDE</span>
<span class="comment">//====================end of MDE===================================//</span>

<span class="comment">//==============Regular histogram==================================//</span>
<span class="keywordflow">if</span> (doRegHist == 1) {
   
   cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
   
   vector&lt;real&gt; regHistIAE;
   vector&lt;int&gt; nBins;
   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
    cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
    <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
    <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, theData, pavingBox, bw);
    nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
    real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(n, myRegHist, mixt, Tol, Deg));
    regHistIAE.push_back(midIAE);
  }

  <span class="comment">//output IAE to .txt file------------------</span>
  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
  outputFileName = <span class="stringliteral">&quot;FinMixIAERegHist&quot;</span>;
  outputFileName += stm.str();
  outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  os.open(outputFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> bw = 0; bw &lt; 3; bw++) {
    os &lt;&lt; regHistIAE[bw] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[bw] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();
  
  std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
} <span class="comment">// end of doRegHist</span>

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);
gsl_rng_free(r1);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FiniteMixtureStats_8cpp.shtml">FiniteMixtureStats.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
