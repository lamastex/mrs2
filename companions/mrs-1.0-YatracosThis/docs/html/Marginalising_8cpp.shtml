<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Marginalising.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Marginalising_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Marginalising.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="Marginalise_2dataprep_8hpp_source.shtml">dataprep.hpp</a>&quot;</code><br/>
</div>
<p><a href="Marginalising_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Marginalising_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="Marginalising.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Marginalising_8cpp_source.shtml#l00017">17</a> of file <a class="el" href="Marginalising_8cpp_source.shtml">Marginalising.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">subpavings::AdaptiveHistogramCollator::makeAverage()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00978">subpavings::AdaptiveHistogramCollator::marginalise()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// ------- prepare to generate some data for the tests -----------</span>

    <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;

    <span class="keywordtype">int</span> i;
    <span class="keyword">const</span> <span class="keywordtype">int</span> n=100;  <span class="comment">// number to generate</span>
    
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>

    gsl_rng_env_setup();

    T = gsl_rng_default;
    r = gsl_rng_alloc (T);

    <span class="comment">// ----------------   example to create and ------------------</span>
    <span class="comment">//---------------- collate multiple histograms -------------------</span>

    <span class="comment">// make a box: the same box will be used by all histograms</span>
    <span class="comment">// so should be big enough for all of them</span>
    <span class="keywordtype">int</span> d = 4; <span class="comment">// dimensions</span>
    ivector pavingBox(d);
    interval pavingInterval(0.0,1.0);
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=1; i &lt;= d; i++) pavingBox[i] = pavingInterval;

    <span class="comment">// make a collation object, empty at present</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;

    <span class="comment">// the number of histograms to generate</span>
    <span class="keywordtype">int</span> numHist = 2;

    <span class="comment">// for loop to generate histograms and add to collation</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=1; j&lt;=numHist; j++) {

        <span class="comment">//get n uniforms</span>
        <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>

        <span class="comment">// make a sample</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {

            rvector thisrv(d);
            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=1; k &lt;= d; k++) {
        thisrv[k] = gsl_rng_uniform(r);
            }
            <span class="comment">// put points generated into container</span>
            theData.push_back(thisrv);

        }  <span class="comment">// data should be in theData</span>


        <span class="comment">// make an Adaptive Histogram object with a specified box.  By default,</span>
        <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
        <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);

        <span class="keywordtype">int</span> k_int = (n/10);

        <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
        <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;

        <span class="comment">// make the function object to get max myK data members in each box</span>
        <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(k_int);

        <span class="comment">// insert data into the histogram, splitting as we go, no logging</span>
        successfulInsertion = myHist.insertFromRVec(theData, splitK, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);

        <span class="comment">// only do more if some data was fed in</span>
        <span class="keywordflow">if</span>(successfulInsertion) {

            <span class="comment">// create a name for the file to output</span>
            <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
            <span class="comment">//convert j to a string</span>
            std::ostringstream stm2;
            stm2 &lt;&lt; j;
            <span class="comment">// add the stringed j to the filename</span>
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>

            <span class="comment">// To realize a file output</span>
            myHist.outputToTxtTabs(fileName);
            cout &lt;&lt; <span class="stringliteral">&quot;Hist&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; output is in &quot;</span> &lt;&lt; fileName&lt;&lt; endl;


            <span class="comment">// add the histogram to the collection</span>
            coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(myHist);

            <span class="comment">// optional- create graph output</span>
            <span class="comment">// myHist.outputGraphDot();</span>
        }

    } <span class="comment">// end of for loop creating histograms</span>

    <span class="comment">// free the random number generator</span>
    gsl_rng_free (r);

    <span class="keywordtype">string</span> collfileName = <span class="stringliteral">&quot;CollatorHistogram.txt&quot;</span>;
    coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(collfileName); <span class="comment">// output the collation to file</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Collator output is in &quot;</span> &lt;&lt; collfileName&lt;&lt; endl;

    <span class="comment">// optional - create graph output - don&#39;t do for lots of leaves!</span>
    <span class="comment">//coll.outputGraphDot();</span>

    <span class="comment">//  marginalise</span>
    <span class="keywordtype">int</span> myints[] = {1,2}; 
    std::vector &lt; int &gt; margDims (myints, myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
  
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
    <span class="keywordflow">if</span> (numHist == 1) {
    cout &lt;&lt; <span class="stringliteral">&quot;Marginalising single histogram&quot;</span> &lt;&lt; endl;
    marginal = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">marginalise</a>(margDims);
  }
  <span class="keywordflow">if</span> (numHist &gt; 1) {
    cout &lt;&lt; <span class="stringliteral">&quot;Marginalising average histogram&quot;</span> &lt;&lt; endl;
    marginal = (coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>()).marginalise(margDims);
  }
    <span class="keywordtype">string</span> margfileName = <span class="stringliteral">&quot;marginal.txt&quot;</span>;     <span class="comment">// provide a filename</span>

    marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margfileName);  <span class="comment">// output the marginal to file</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Marginal output is in &quot;</span> &lt;&lt; margfileName&lt;&lt; endl;

    <span class="comment">// ---- end of example to create and collate multiple histograms -----</span>

    <span class="keywordflow">return</span> 0;

} 
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Marginalising_8cpp.shtml">Marginalising.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
