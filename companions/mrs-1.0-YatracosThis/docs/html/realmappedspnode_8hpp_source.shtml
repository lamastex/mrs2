<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: realmappedspnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('realmappedspnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">realmappedspnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="realmappedspnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2010, 2011, 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">/*!/ \file</span>
<a name="l00022"></a>00022 <span class="comment">\brief RealMappedSPnode declarations.</span>
<a name="l00023"></a>00023 <span class="comment">*/</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __REALMAPPEDSP_HPP__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __REALMAPPEDSP_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>subpavings {
<a name="l00036"></a>00036 
<a name="l00073"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml">00073</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode</a>&lt;cxsc::real&gt; {
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="keyword">public</span>:
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">//typedefs</span>
<a name="l00081"></a>00081     <span class="keyword">typedef</span> std::vector &lt;RealMappedSPnode* &gt;
<a name="l00082"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">00082</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">Ptrs</a>;
<a name="l00083"></a>00083     <span class="keyword">typedef</span> Ptrs::iterator
<a name="l00084"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8414841542df48678ae521df3ae92800">00084</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8414841542df48678ae521df3ae92800">PtrsItr</a>;
<a name="l00085"></a>00085     <span class="keyword">typedef</span> std::vector &lt; const RealMappedSPnode* &gt;
<a name="l00086"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">00086</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">ConstPtrs</a>;
<a name="l00087"></a>00087     <span class="keyword">typedef</span> ConstPtrs::const_iterator
<a name="l00088"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a528463bd540e2e3d4dc907ce78a3b03c">00088</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a528463bd540e2e3d4dc907ce78a3b03c">ConstPtrsItr</a>;
<a name="l00089"></a>00089     <span class="keyword">typedef</span> std::list &lt;RealMappedSPnode* &gt;
<a name="l00090"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a13d2adc6fa08d7b1e70a7956eac1affe">00090</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a13d2adc6fa08d7b1e70a7956eac1affe">ListPtrs</a>;
<a name="l00091"></a>00091     <span class="keyword">typedef</span> ListPtrs::iterator
<a name="l00092"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad10e24d2efdb436ae6f65306c8ff736e">00092</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad10e24d2efdb436ae6f65306c8ff736e">ListPtrsItr</a>;
<a name="l00093"></a>00093     <span class="keyword">typedef</span> std::list &lt; const RealMappedSPnode* &gt;
<a name="l00094"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aba04df267c93463fbb6a90d85e11b627">00094</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aba04df267c93463fbb6a90d85e11b627">ListConstPtrs</a>;
<a name="l00095"></a>00095     <span class="keyword">typedef</span> ListConstPtrs::const_iterator
<a name="l00096"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4e7b7e57068590fc47a5951453754b2">00096</a>       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4e7b7e57068590fc47a5951453754b2">ListConstPtrsItr</a>;
<a name="l00097"></a>00097 
<a name="l00099"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode_1_1Measurer.shtml">00099</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1RealMappedSPnode_1_1Measurer.shtml" title="Inner interface for types measuring nodes.">Measurer</a> {
<a name="l00100"></a>00100       <span class="keyword">public</span>:
<a name="l00101"></a>00101       <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode_1_1Measurer.shtml#a7233468aa8da1f02d206cd27ea276f4b">operator()</a>(
<a name="l00102"></a>00102         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> * <span class="keyword">const</span> rmspn) <span class="keyword">const</span> = 0;
<a name="l00103"></a><a class="code" href="classsubpavings_1_1RealMappedSPnode_1_1Measurer.shtml#a22f1a04344ee9a8031a14d64ce3c0097">00103</a>       <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode_1_1Measurer.shtml#a22f1a04344ee9a8031a14d64ce3c0097">~Measurer</a>(){};
<a name="l00104"></a>00104     };
<a name="l00105"></a>00105     
<a name="l00106"></a>00106     
<a name="l00107"></a>00107     <span class="comment">// ------------------------ public member functions ----------------</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a55594a45ac82b31b5ae7592143079794">~RealMappedSPnode</a>();
<a name="l00110"></a>00110 
<a name="l00112"></a>00112     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>();
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00119"></a>00119     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> ivector&amp; v);
<a name="l00120"></a>00120 
<a name="l00125"></a>00125     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb);
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 
<a name="l00131"></a>00131     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(
<a name="l00132"></a>00132             <span class="keyword">const</span> ivector&amp; v, <span class="keyword">const</span> cxsc::real&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00133"></a>00133 
<a name="l00138"></a>00138     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, 
<a name="l00139"></a>00139                       <span class="keyword">const</span> cxsc::real&amp; <a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a85f4e42ee09fcfa8c47835231ac3c21d" title="A range of type T.">range</a>);
<a name="l00140"></a>00140 
<a name="l00149"></a>00149     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; spn);
<a name="l00150"></a>00150 
<a name="l00160"></a>00160     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn);
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00166"></a>00166     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; other);
<a name="l00167"></a>00167 
<a name="l00171"></a>00171     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a21248dfec3fc7415a604f2f1a5d58ce6" title="No-argument constructor.">RealMappedSPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode&lt;cxsc::real&gt;</a>&amp; other);
<a name="l00172"></a>00172 
<a name="l00176"></a>00176     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8c4a201d04c81a5f21301d6a325e740d" title="Copy assignment operator.">operator=</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> rhs);
<a name="l00177"></a>00177 
<a name="l00181"></a>00181     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8c4a201d04c81a5f21301d6a325e740d" title="Copy assignment operator.">operator=</a>(<a class="code" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode&lt;cxsc::real&gt;</a> rhs);
<a name="l00182"></a>00182 
<a name="l00183"></a>00183     <span class="comment">// parent and child accessors have to hide the base class implementation</span>
<a name="l00184"></a>00184     <span class="comment">// this is not good but otherwise we get the base class return type</span>
<a name="l00185"></a>00185     <span class="comment">// I&#39;ve asked around and I can&#39;t find a way around it ...</span>
<a name="l00186"></a>00186 
<a name="l00190"></a>00190     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a04fef135a04c4d165c08395c531581dd" title="Accessor for the parent of a node.">getParent</a>() <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00196"></a>00196     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>() <span class="keyword">const</span>;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 
<a name="l00202"></a>00202     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>() <span class="keyword">const</span>;
<a name="l00203"></a>00203 
<a name="l00207"></a>00207     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a1ac4214b1e335289374edece1b5d8c43" title="Less-than operator.">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00216"></a>00216     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9409b660d7a7f1f35fc7f2d1904386c2">findContainingNode</a>(
<a name="l00217"></a>00217                 <span class="keyword">const</span> cxsc::rvector&amp; pt,
<a name="l00218"></a>00218                 <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd  = <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>) <span class="keyword">const</span>;
<a name="l00219"></a>00219 
<a name="l00226"></a>00226     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac4cadaec6d96f2a315218dc16a082f8a">hasNegativeRangeInTree</a>() <span class="keyword">const</span>;
<a name="l00227"></a>00227 
<a name="l00234"></a>00234     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a738f4ef504214f9dd3a533f052f6d4cb">hasInfiniteRangeInTree</a>() <span class="keyword">const</span>;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00241"></a>00241     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f" title="Add two sibling child nodes to this provided this is a leaf.">nodeExpand</a>(<span class="keywordtype">int</span> comp);
<a name="l00242"></a>00242 
<a name="l00248"></a>00248     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ad60865bacd8a43978cf2da02419cbf8f" title="Add two sibling child nodes to this provided this is a leaf.">nodeExpand</a>();
<a name="l00249"></a>00249 
<a name="l00257"></a>00257     <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#abae5bea82b46019e23d98756973c6860" title="Get maximum value of the range for any of the leaves of the tree rooted at this.">getMaxRangeForLeavesInTree</a>() <span class="keyword">const</span>;
<a name="l00258"></a>00258     
<a name="l00259"></a>00259         
<a name="l00294"></a>00294     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#acf2399376e990903e5787b0a68eb350c" title="Marginalise this.">marginalise</a>(<span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims);
<a name="l00295"></a>00295     
<a name="l00330"></a>00330     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ab3ac1ccd24132d04f136a0fab3d0b610" title="Make a marginalised version of this.">makeMarginalised</a>(
<a name="l00331"></a>00331               <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims) <span class="keyword">const</span>;
<a name="l00332"></a>00332     
<a name="l00357"></a>00357     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8b02632446a3c28a352f15f511e35caa" title="Normalise this.">normalise</a>();
<a name="l00358"></a>00358     
<a name="l00383"></a>00383     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a66a8b6deef3ba770a80a5b0b0418f5fc" title="Make a normalised version of this.">makeNormalised</a>() <span class="keyword">const</span>;
<a name="l00384"></a>00384         
<a name="l00385"></a>00385     
<a name="l00393"></a>00393     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac674f3231fb03622048986a2a855b224" title="Slice this.">slice</a>(
<a name="l00394"></a>00394       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00395"></a>00395       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts);
<a name="l00396"></a>00396       
<a name="l00406"></a>00406     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2541f9ce5af2fcb753644d1f7e1f9297" title="Make a RealMappedSPnode that is a slice of this.">makeSlice</a>(
<a name="l00407"></a>00407       <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00408"></a>00408       <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts) <span class="keyword">const</span>;
<a name="l00409"></a>00409     
<a name="l00442"></a>00442     cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af243ad67d0ff141d345e800b651a87e1">getL1Distance</a>(
<a name="l00443"></a>00443           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; other) <span class="keyword">const</span>;
<a name="l00444"></a>00444 
<a name="l00475"></a>00475     cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a116f7a6b92d5c442be9d8393b6e0e73f" title="Get a &#39;log likelihood&#39; using positive values from this and counts from spn.">getLogLikelihood</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn) <span class="keyword">const</span>;
<a name="l00476"></a>00476         
<a name="l00490"></a>00490     <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a153b19ceeba356f0ada4e27dfcf6ab37" title="Get the &quot;area&quot; of the range and the box of this.">getRealAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00491"></a>00491     
<a name="l00507"></a>00507     <span class="keyword">virtual</span> cxsc::dotprecision <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a8f083e792f8980eec67298253428c5c9" title="Get the &quot;area&quot; of the range and the box of this as a dotprecision type.">getDotPrecisionAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00508"></a>00508     
<a name="l00509"></a>00509     
<a name="l00527"></a>00527     <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a23ef95e66b4b920f205739d9cf42f96f" title="Get the total &quot;area&quot; for the leaves of this of the real ranges and boxes.">getTotalLeafAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00528"></a>00528     
<a name="l00547"></a>00547     <span class="keyword">virtual</span> cxsc::dotprecision 
<a name="l00548"></a>00548         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f769639fd1e13ea5449bb12dc53c998" title="Get the total &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionLeafAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00549"></a>00549     
<a name="l00567"></a>00567     <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a972c5dbc0bedd9cad3af4f2af43be277" title="Get the total absolute &quot;area&quot; for the leaves of this of the real ranges and boxes.">getTotalAbsLeafAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00568"></a>00568     
<a name="l00588"></a>00588     <span class="keyword">virtual</span> cxsc::dotprecision 
<a name="l00589"></a>00589         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a2901c49d51615810f146a38ccb503fda" title="Get the total absolute &quot;area&quot; of the range and the box of this as a dotprecision type.">getTotalDotPrecisionAbsLeafAreaRangeWithBox</a>() <span class="keyword">const</span>;
<a name="l00590"></a>00590 
<a name="l00619"></a>00619     <span class="keyword">virtual</span> cxsc::real <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a0660b7981cce44ca09c2e0d68a6c1a21" title="Get the total over the leaves of the absolute value of the difference between the leaf &quot;area&quot; for thi...">getTotalAbsDiffLeafAreaRangeWithBox</a>(
<a name="l00620"></a>00620             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rmsp) <span class="keyword">const</span>;
<a name="l00621"></a>00621     
<a name="l00653"></a>00653     <span class="keyword">virtual</span> cxsc::dotprecision 
<a name="l00654"></a>00654         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a74ba255a0781497c5dc76e8458969278" title="Get the total over the leaves of the absolute value of the difference between the leaf &quot;area&quot; for thi...">getTotalDotPrecisionAbsDiffLeafAreaRangeWithBox</a>(
<a name="l00655"></a>00655             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rmsp) <span class="keyword">const</span>;
<a name="l00656"></a>00656 
<a name="l00661"></a>00661     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">Ptrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a866601879aed0044333a5f28a773f677" title="Return a reference to a container of nodes.">getLeaves</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">Ptrs</a>&amp; leaves);
<a name="l00662"></a>00662 
<a name="l00667"></a>00667     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">ConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aea6a4c6aa2fe8eb944000db6790f9d8c" title="Return a reference to a container of const nodes.">getConstLeaves</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">ConstPtrs</a>&amp; leaves) <span class="keyword">const</span>;
<a name="l00668"></a>00668 
<a name="l00675"></a>00675     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">Ptrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a561d20d602eafff9592fdd0ee912ffcc" title="Return a reference to a container of nodes.">getSubLeaves</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a9591975c77c7e7da92bbdcdf62a74d1a">Ptrs</a>&amp; subleaves);
<a name="l00676"></a>00676 
<a name="l00683"></a>00683     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">ConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#ac6e092c4b19b8747f154eefd56d3e864" title="Return a reference to a container of const nodes.">getConstSubLeaves</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">ConstPtrs</a>&amp; subleaves) <span class="keyword">const</span>;
<a name="l00684"></a>00684 
<a name="l00685"></a>00685     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#af2612c2a420a9f91c8bca09f0bb6ab42">swapRMSPSR</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; spn); <span class="comment">//throw()</span>
<a name="l00686"></a>00686 
<a name="l00687"></a>00687   <span class="keyword">private</span>:
<a name="l00688"></a>00688     
<a name="l00691"></a>00691     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a4f2a09e57bff1fd459e8bf631019b07f" title="Non-public version of marginalisation to have only the required dimensions.">_start_marginalise</a>(
<a name="l00692"></a>00692         <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims);
<a name="l00693"></a>00693     
<a name="l00696"></a>00696     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a14871e233412eac80e1b742967d7ab2b" title="Non-public version of marginalisation to take out the unwanted dimensions.">_marginalise</a>(<span class="keyword">const</span> std::vector&lt;int&gt;&amp; outDims);
<a name="l00697"></a>00697     
<a name="l00699"></a>00699     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a185405d2c7b3231a75b33ec249292e2d" title="Non-public version of normalisation.">_normalise</a>();
<a name="l00700"></a>00700     
<a name="l00704"></a>00704     cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a769c7c79a6ce88db0854b2cbffb97747" title="Accumulate L1 distance between leaf descendents of this and leaf descendents of node pointed to by ot...">_getL1distance</a>(
<a name="l00705"></a>00705         cxsc::dotprecision&amp; disL1,
<a name="l00706"></a>00706         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> * <span class="keyword">const</span> other) <span class="keyword">const</span>;
<a name="l00707"></a>00707     
<a name="l00712"></a>00712     cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a3171d7822ccbcb05ed2b997c678b325a" title="Accumulate L1 distance between this and another identical node with value other_v mapped onto it...">nodeL1Distance</a>(
<a name="l00713"></a>00713                 cxsc::dotprecision&amp; disL1,
<a name="l00714"></a>00714                 cxsc::real other_v) <span class="keyword">const</span>;
<a name="l00715"></a>00715     
<a name="l00735"></a>00735     cxsc::dotprecision&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#aa65475d7ae1efb7ba1c7cd5bd0c13c5d" title="Accumulate log likelihood using positive values from this and counts from spn.">_getLogLikelihood</a>(
<a name="l00736"></a>00736                 cxsc::dotprecision&amp; loglik,
<a name="l00737"></a>00737                 <span class="keywordtype">int</span>&amp; isnan, <span class="keywordtype">int</span>&amp; isposinf, <span class="keywordtype">int</span>&amp; isneginf,
<a name="l00738"></a>00738                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span>;
<a name="l00739"></a>00739                             
<a name="l00743"></a>00743     std::ostream&amp; <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5287c7cec21af1c8606d735c0478a6fc" title="A quick one-line summary of a node.">oneLineOutput</a>(std::ostream&amp; os,
<a name="l00744"></a>00744                       <span class="keywordtype">int</span> level = 0) <span class="keyword">const</span>;
<a name="l00745"></a>00745     
<a name="l00746"></a>00746       
<a name="l00747"></a>00747   
<a name="l00748"></a>00748 }; <span class="comment">// end RealMappedSPnode class</span>
<a name="l00749"></a>00749 
<a name="l00750"></a>00750 
<a name="l00751"></a>00751 
<a name="l00752"></a>00752     <span class="comment">// ----------------- non member tools functions ----------------------</span>
<a name="l00753"></a>00753 
<a name="l00757"></a>00757   <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#ab16dccf5fd03eee9a6071072432e38bc" title="Less-than operator using pointers.">nodePtrCompare</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a>* lhs,
<a name="l00758"></a>00758       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a>* rhs);
<a name="l00759"></a>00759 
<a name="l00760"></a>00760 
<a name="l00761"></a>00761 } <span class="comment">// end namespace subpavings</span>
<a name="l00762"></a>00762 
<a name="l00763"></a>00763 <span class="comment">// Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l00764"></a>00764 <span class="keyword">namespace </span>std
<a name="l00765"></a>00765 {
<a name="l00766"></a>00766   <span class="keyword">template</span> &lt;&gt;
<a name="l00767"></a>00767   <span class="keywordtype">void</span> swap(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a> &amp; s1, 
<a name="l00768"></a>00768       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">subpavings::RealMappedSPnode</a> &amp; s2); <span class="comment">// throw ()</span>
<a name="l00769"></a>00769   
<a name="l00770"></a>00770 }
<a name="l00771"></a>00771 
<a name="l00772"></a>00772 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="realmappedspnode_8hpp.shtml">realmappedspnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
