<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: nodecompobjval.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('nodecompobjval_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">nodecompobjval.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="nodecompobjval_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef ___SPSVNODECOMPVAL_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define ___SPSVNODECOMPVAL_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//to use MaxDiam</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>subpavings {
<a name="l00032"></a>00032 
<a name="l00034"></a>00034     <span class="keyword">class </span>SPSVnode;
<a name="l00035"></a>00035     
<a name="l00042"></a><a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml">00042</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a> {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="keyword">public</span>:
<a name="l00045"></a>00045 
<a name="l00047"></a>00047         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml#a0c12ddc23446e5be6bb71d024ec40c62">operator() </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00048"></a>00048                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs) <span class="keyword">const</span> = 0;
<a name="l00049"></a>00049     };
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00058"></a><a class="code" href="classsubpavings_1_1CompCountVal.shtml">00058</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00059"></a>00059     {
<a name="l00060"></a><a class="code" href="classsubpavings_1_1CompCountVal.shtml#ad882397ab84d72fd5ab643ca499bc3b3">00060</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCountVal.shtml#ad882397ab84d72fd5ab643ca499bc3b3">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00061"></a>00061                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00062"></a>00062 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()); }
<a name="l00063"></a>00063     };
<a name="l00064"></a>00064 
<a name="l00067"></a><a class="code" href="classsubpavings_1_1CompVolVal.shtml">00067</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompVolVal.shtml" title="Class comparing on volume of box of node.">CompVolVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00068"></a>00068     {
<a name="l00069"></a><a class="code" href="classsubpavings_1_1CompVolVal.shtml#a89a15be0c94e07d7ba266178f3b6394c">00069</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompVolVal.shtml#a89a15be0c94e07d7ba266178f3b6394c">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00070"></a>00070                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00071"></a>00071 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()); }
<a name="l00072"></a>00072     };
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     
<a name="l00078"></a><a class="code" href="classsubpavings_1_1CompNothingVal.shtml">00078</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompNothingVal.shtml" title="Class comparing nodes to give no change in ordering.">CompNothingVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00079"></a>00079     {
<a name="l00080"></a><a class="code" href="classsubpavings_1_1CompNothingVal.shtml#a33f56801a698b37df771a077fddcced4">00080</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompNothingVal.shtml#a33f56801a698b37df771a077fddcced4">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00081"></a>00081                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00082"></a>00082 <span class="keyword">        </span>{
<a name="l00083"></a>00083             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085     };
<a name="l00086"></a>00086    
<a name="l00089"></a><a class="code" href="classsubpavings_1_1CompHeightVal.shtml">00089</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHeightVal.shtml" title="Class comparing on count/volume (ie histogram height) of box of node.">CompHeightVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00090"></a>00090     {
<a name="l00091"></a><a class="code" href="classsubpavings_1_1CompHeightVal.shtml#a867d36d4805a3bf2aebafbb3d19cedec">00091</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHeightVal.shtml#a867d36d4805a3bf2aebafbb3d19cedec">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00092"></a>00092                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00093"></a>00093 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() 
<a name="l00094"></a>00094           &lt; rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()); }
<a name="l00095"></a>00095     }; 
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   
<a name="l00098"></a>00098     <span class="comment">//gat41</span>
<a name="l00101"></a><a class="code" href="classsubpavings_1_1CompAreaVal.shtml">00101</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompAreaVal.shtml" title="Class comparing the area of a histogram.">CompAreaVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00102"></a>00102     {
<a name="l00103"></a><a class="code" href="classsubpavings_1_1CompAreaVal.shtml#a559579f9dc047c35866d8144b59feed6">00103</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompAreaVal.shtml#a559579f9dc047c35866d8144b59feed6">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00104"></a>00104                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00105"></a>00105 <span class="keyword">      </span>{ 
<a name="l00106"></a>00106         <span class="keywordtype">size_t</span> n = lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00107"></a>00107         
<a name="l00108"></a>00108         cxsc::interval lCount = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00109"></a>00109         cxsc::interval rCount = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0/(n*1.0));
<a name="l00110"></a>00110         
<a name="l00111"></a>00111         cxsc::interval lVol = interval(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00112"></a>00112         cxsc::interval rVol = interval(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00113"></a>00113         
<a name="l00114"></a>00114         cxsc::interval lMassVol = lCount * lVol;
<a name="l00115"></a>00115         cxsc::interval rMassVol = rCount * rVol;
<a name="l00116"></a>00116        
<a name="l00117"></a>00117         cxsc::real lMid = mid(lMassVol);
<a name="l00118"></a>00118         cxsc::real rMid = mid(rMassVol);
<a name="l00119"></a>00119         
<a name="l00120"></a>00120         <span class="keywordflow">return</span> ( (lMid &lt; rMid) );
<a name="l00121"></a>00121     }
<a name="l00122"></a>00122   };
<a name="l00123"></a>00123    
<a name="l00124"></a>00124    <span class="comment">//gat41</span>
<a name="l00128"></a><a class="code" href="classsubpavings_1_1CompMeanVal.shtml">00128</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompMeanVal.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean.">CompMeanVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00129"></a>00129     {
<a name="l00130"></a><a class="code" href="classsubpavings_1_1CompMeanVal.shtml#aab54092fd695d46d9d1eb64af265ba0a">00130</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompMeanVal.shtml#aab54092fd695d46d9d1eb64af265ba0a">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00131"></a>00131                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00132"></a>00132 <span class="keyword">      </span>{ 
<a name="l00133"></a>00133       
<a name="l00134"></a>00134       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()) &lt; 
<a name="l00135"></a>00135             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()) );
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137   }; 
<a name="l00138"></a>00138    
<a name="l00139"></a>00139     <span class="comment">//gat41</span>
<a name="l00143"></a><a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml">00143</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMassVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00144"></a>00144     {
<a name="l00145"></a><a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml#a29140c1748d76b0ec8df744143d85ee7">00145</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompMeanMassVal.shtml#a29140c1748d76b0ec8df744143d85ee7">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00146"></a>00146                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00147"></a>00147 <span class="keyword">      </span>{ 
<a name="l00148"></a>00148 
<a name="l00149"></a>00149       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00150"></a>00150             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00151"></a>00151     }
<a name="l00152"></a>00152   }; 
<a name="l00153"></a>00153    
<a name="l00154"></a>00154         <span class="comment">//gat41</span>
<a name="l00158"></a><a class="code" href="classsubpavings_1_1CompCovarVal.shtml">00158</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCovarVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00159"></a>00159     {
<a name="l00160"></a><a class="code" href="classsubpavings_1_1CompCovarVal.shtml#ac39a514e3d0b032af69ac99fe24f1dfa">00160</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCovarVal.shtml#ac39a514e3d0b032af69ac99fe24f1dfa">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00161"></a>00161                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00162"></a>00162 <span class="keyword">      </span>{ 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()) &lt; 
<a name="l00165"></a>00165             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()) );
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167   }; 
<a name="l00168"></a>00168    
<a name="l00169"></a>00169       <span class="comment">//gat41</span>
<a name="l00173"></a><a class="code" href="classsubpavings_1_1CompCovarMassVal.shtml">00173</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompCovarMassVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarMassVal</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00174"></a>00174     {
<a name="l00175"></a><a class="code" href="classsubpavings_1_1CompCovarMassVal.shtml#a90678bb7b104b92c218a314a824506c1">00175</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompCovarMassVal.shtml#a90678bb7b104b92c218a314a824506c1">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00176"></a>00176                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00177"></a>00177 <span class="keyword">      </span>{ 
<a name="l00178"></a>00178       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00179"></a>00179             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181   }; 
<a name="l00182"></a>00182    
<a name="l00183"></a>00183   <span class="comment">//gat41</span>
<a name="l00187"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DVal.shtml">00187</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1DVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DVal</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00188"></a>00188     {
<a name="l00189"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DVal.shtml#a1524699368b7aa549e599257c4b5b0a6">00189</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1DVal.shtml#a1524699368b7aa549e599257c4b5b0a6">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00190"></a>00190                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00191"></a>00191 <span class="keyword">      </span>{ 
<a name="l00192"></a>00192       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()) &lt; 
<a name="l00193"></a>00193             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()) );
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195   }; 
<a name="l00196"></a>00196    
<a name="l00197"></a>00197    <span class="comment">//gat41</span>
<a name="l00201"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml">00201</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassVal</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00202"></a>00202     {
<a name="l00203"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml#abe827ab561eb3cd9d5e248bcbd84ccba">00203</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassVal.shtml#abe827ab561eb3cd9d5e248bcbd84ccba">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00204"></a>00204                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00205"></a>00205 <span class="keyword">      </span>{ 
<a name="l00206"></a>00206       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00207"></a>00207             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00208"></a>00208     }
<a name="l00209"></a>00209   }; 
<a name="l00210"></a>00210   
<a name="l00211"></a>00211   <span class="comment">//gat41</span>
<a name="l00215"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml">00215</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiamVal</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00216"></a>00216     {
<a name="l00217"></a><a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml#a7247b4ada993f383160cf547644df465">00217</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiamVal.shtml#a7247b4ada993f383160cf547644df465">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00218"></a>00218                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00219"></a>00219 <span class="keyword">      </span>{ 
<a name="l00220"></a>00220       <span class="comment">/*</span>
<a name="l00221"></a>00221 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00222"></a>00222 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00223"></a>00223 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00224"></a>00224 <span class="comment">      */</span>
<a name="l00225"></a>00225        <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l00226"></a>00226           <span class="comment">// find the maximum diameter, put the max dimension into maxdiamcomp</span>
<a name="l00227"></a>00227           <span class="keywordtype">double</span> maxDiamL = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00228"></a>00228           <span class="keywordtype">double</span> maxDiamR = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00229"></a>00229             
<a name="l00230"></a>00230       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamL) &lt; 
<a name="l00231"></a>00231             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamR) );
<a name="l00232"></a>00232     }
<a name="l00233"></a>00233   }; 
<a name="l00234"></a>00234   
<a name="l00235"></a>00235      
<a name="l00236"></a>00236    <span class="comment">//gat41</span>
<a name="l00240"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassVal.shtml">00240</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDistMassVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMassVal</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00241"></a>00241     {
<a name="l00242"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassVal.shtml#a5a4bfd7d512e5333fde6e8edea6bb1da">00242</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDistMassVal.shtml#a5a4bfd7d512e5333fde6e8edea6bb1da">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00243"></a>00243                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00244"></a>00244 <span class="keyword">      </span>{ 
<a name="l00245"></a>00245       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) &lt; 
<a name="l00246"></a>00246             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()) );
<a name="l00247"></a>00247     }
<a name="l00248"></a>00248   }; 
<a name="l00249"></a>00249   
<a name="l00250"></a>00250   <span class="comment">//gat41</span>
<a name="l00254"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiamVal.shtml">00254</a> <span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiamVal.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDistMassDiamVal</a>: <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>
<a name="l00255"></a>00255     {
<a name="l00256"></a><a class="code" href="classsubpavings_1_1CompHellingerDistMassDiamVal.shtml#a8f43d4b0906ee0b20501cfea6cc79724">00256</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CompHellingerDistMassDiamVal.shtml#a8f43d4b0906ee0b20501cfea6cc79724">operator()   </a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00257"></a>00257                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00258"></a>00258 <span class="keyword">      </span>{ 
<a name="l00259"></a>00259       <span class="comment">/*</span>
<a name="l00260"></a>00260 <span class="comment">      std::cout &lt;&lt; lhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; lhs-&gt;getHellingerDist1D()*lhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00261"></a>00261 <span class="comment">      std::cout &lt;&lt; rhs-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; rhs-&gt;getHellingerDist1D()*rhs-&gt;getEmpMass() &lt;&lt; std::endl;</span>
<a name="l00262"></a>00262 <span class="comment">      std::cout &lt;&lt; &quot;=================&quot; &lt;&lt; std::endl;</span>
<a name="l00263"></a>00263 <span class="comment">      */</span>
<a name="l00264"></a>00264        <span class="keywordtype">int</span> maxdiamcomp = 0;  <span class="comment">// to take value calculated from MaxDiam</span>
<a name="l00265"></a>00265           <span class="comment">// find the maximum diameter, put the max dimension into maxdiamcomp</span>
<a name="l00266"></a>00266           <span class="keywordtype">double</span> maxDiamL = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00267"></a>00267           <span class="keywordtype">double</span> maxDiamR = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00268"></a>00268             
<a name="l00269"></a>00269       <span class="keywordflow">return</span> ( (lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*lhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamL) &lt; 
<a name="l00270"></a>00270             (rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>()*rhs-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>()*maxDiamR) );
<a name="l00271"></a>00271     }
<a name="l00272"></a>00272   }; 
<a name="l00273"></a>00273   
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="preprocessor">#endif</span>
<a name="l00278"></a>00278 <span class="preprocessor"></span>
<a name="l00279"></a>00279 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="nodecompobjval_8hpp.shtml">nodecompobjval.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
