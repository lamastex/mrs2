<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: splitdecisionobj.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('splitdecisionobj_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">splitdecisionobj.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="splitdecisionobj_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef ___SPSNODESPLIT_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#define ___SPSNODESPLIT_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>subpavings {
<a name="l00031"></a>00031 
<a name="l00033"></a>00033     <span class="keyword">class </span>SPSnode;
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00040"></a><a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml">00040</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>
<a name="l00041"></a>00041     {
<a name="l00042"></a>00042         <span class="keyword">public</span>:
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml#acaae38df4650168faf869bcfc11b0212">operator()</a>() <span class="keyword">const</span> = 0;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml#acaae38df4650168faf869bcfc11b0212">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn) <span class="keyword">const</span> = 0;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     };
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00062"></a>00062 
<a name="l00075"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml">00075</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>
<a name="l00076"></a>00076     {
<a name="l00077"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml#a533786f57332f2559181036557cce420">00077</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a533786f57332f2559181036557cce420">maxPoints</a>;
<a name="l00078"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml#a98bdd69177334492bf80b2ba32d41123">00078</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a98bdd69177334492bf80b2ba32d41123">minChildPoints</a>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <a class="code" href="classsubpavings_1_1SplitOnK.shtml#aeda48e74521a54b6f83162e3ae6de0e8">SplitOnK</a>(); <span class="comment">// private default constructor</span>
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         <span class="keyword">public</span>:
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml#a1c66caafc36078d8e4049564d75b61de">00084</a>         <a class="code" href="classsubpavings_1_1SplitOnK.shtml#aeda48e74521a54b6f83162e3ae6de0e8">SplitOnK</a>(<span class="keywordtype">size_t</span> k, <span class="keywordtype">size_t</span> minCP = 0) : <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a533786f57332f2559181036557cce420">maxPoints</a>(k),
<a name="l00085"></a>00085                                         <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a98bdd69177334492bf80b2ba32d41123">minChildPoints</a>(minCP)  {};
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <span class="comment">// function used to test if the object provides a real split test</span>
<a name="l00088"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml#a5e716ff213abc4d8864153ab5ec872a5">00088</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a5e716ff213abc4d8864153ab5ec872a5">operator()</a>()<span class="keyword"> const</span>
<a name="l00089"></a>00089 <span class="keyword">        </span>{
<a name="l00090"></a>00090             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00091"></a>00091         }
<a name="l00092"></a>00092 
<a name="l00093"></a><a class="code" href="classsubpavings_1_1SplitOnK.shtml#a9ffd1c8f5536bfbeb9465e317bbf18ad">00093</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a5e716ff213abc4d8864153ab5ec872a5">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)<span class="keyword"> const</span>
<a name="l00094"></a>00094 <span class="keyword">        </span>{
<a name="l00095"></a>00095             <span class="keywordtype">bool</span> retvalue = (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt; <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a533786f57332f2559181036557cce420">maxPoints</a>);
<a name="l00096"></a>00096             <span class="comment">// check whether splitting would give children with enough points</span>
<a name="l00097"></a>00097             <span class="keywordflow">if</span> (retvalue &amp;&amp; (<a class="code" href="classsubpavings_1_1SplitOnK.shtml#a98bdd69177334492bf80b2ba32d41123">minChildPoints</a> &gt; 0)) {
<a name="l00098"></a>00098                 retvalue = (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= <a class="code" href="classsubpavings_1_1SplitOnK.shtml#a98bdd69177334492bf80b2ba32d41123">minChildPoints</a>);
<a name="l00099"></a>00099             }
<a name="l00100"></a>00100             <span class="keywordflow">return</span> retvalue;
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102     };
<a name="l00103"></a>00103 
<a name="l00117"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml">00117</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml" title="Class for splitting based on average volume per point of a node.">SplitOnVolDivK</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>
<a name="l00118"></a>00118     {
<a name="l00119"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#af1cbe104ee3bc6fd3598c511be389d85">00119</a>         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#af1cbe104ee3bc6fd3598c511be389d85">avgVol</a>;
<a name="l00120"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#aa85a2b8c26238dc21866b947f1142d77">00120</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#aa85a2b8c26238dc21866b947f1142d77">minChildPoints</a>;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a705d6f5f7dc1df471bf665d1a53dd90f">SplitOnVolDivK</a>(); <span class="comment">// private default constructor</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <span class="keyword">public</span>:
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#abed4ce733108184705ce47726f635a07">00126</a>         <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a705d6f5f7dc1df471bf665d1a53dd90f">SplitOnVolDivK</a>(<span class="keywordtype">double</span> avg, <span class="keywordtype">size_t</span> minCP = 0) : <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#af1cbe104ee3bc6fd3598c511be389d85">avgVol</a>(avg),
<a name="l00127"></a>00127                                                     <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#aa85a2b8c26238dc21866b947f1142d77">minChildPoints</a>(minCP) {};
<a name="l00128"></a>00128 
<a name="l00129"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a8130f8e0a079a6fe864cf4f4704f85b6">00129</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a8130f8e0a079a6fe864cf4f4704f85b6">operator()</a>()<span class="keyword"> const</span>
<a name="l00130"></a>00130 <span class="keyword">        </span>{
<a name="l00131"></a>00131             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133 
<a name="l00134"></a><a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a63d0800fecf56e5b7cd4a90212766329">00134</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#a8130f8e0a079a6fe864cf4f4704f85b6">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)<span class="keyword"> const</span>
<a name="l00135"></a>00135 <span class="keyword">        </span>{
<a name="l00136"></a>00136             <span class="keywordtype">bool</span> retvalue = ((spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>())/(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()) &gt; <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#af1cbe104ee3bc6fd3598c511be389d85">avgVol</a>);
<a name="l00137"></a>00137             <span class="comment">// check whether splitting would give children with enough points</span>
<a name="l00138"></a>00138             <span class="keywordflow">if</span> (retvalue &amp;&amp; (<a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#aa85a2b8c26238dc21866b947f1142d77">minChildPoints</a> &gt; 0)) {
<a name="l00139"></a>00139                 retvalue = (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= <a class="code" href="classsubpavings_1_1SplitOnVolDivK.shtml#aa85a2b8c26238dc21866b947f1142d77">minChildPoints</a>);
<a name="l00140"></a>00140             }
<a name="l00141"></a>00141             <span class="keywordflow">return</span> retvalue;
<a name="l00142"></a>00142         }
<a name="l00143"></a>00143     };
<a name="l00144"></a>00144 
<a name="l00147"></a><a class="code" href="classsubpavings_1_1SplitNever.shtml">00147</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>
<a name="l00148"></a>00148     {
<a name="l00149"></a>00149         <span class="keyword">public</span>:
<a name="l00150"></a>00150 
<a name="l00151"></a><a class="code" href="classsubpavings_1_1SplitNever.shtml#acd26361e8bd8ae52f628b948278baf7b">00151</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitNever.shtml#acd26361e8bd8ae52f628b948278baf7b">operator()</a>()<span class="keyword"> const</span>
<a name="l00152"></a>00152 <span class="keyword">        </span>{
<a name="l00153"></a>00153             <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">// this is just a dummy split test object</span>
<a name="l00154"></a>00154         }
<a name="l00155"></a>00155 
<a name="l00156"></a><a class="code" href="classsubpavings_1_1SplitNever.shtml#a94f1d852a069a2e029d5dac5e28fa2dd">00156</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitNever.shtml#acd26361e8bd8ae52f628b948278baf7b">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)<span class="keyword"> const</span>
<a name="l00157"></a>00157 <span class="keyword">        </span>{
<a name="l00158"></a>00158             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00159"></a>00159         }
<a name="l00160"></a>00160     };
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00178"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml">00178</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>
<a name="l00179"></a>00179     {
<a name="l00180"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af3766a409d0c882d23965ab7f5868c6c">00180</a>         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af3766a409d0c882d23965ab7f5868c6c">approxMinVol</a>;
<a name="l00181"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af590d181521aea9eacec7465312cb735">00181</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af590d181521aea9eacec7465312cb735">minChildPoints</a>;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#adbdb11710318e74198eb1ad23a63f56f">SplitOnKandVol</a>(); <span class="comment">// private default constructor</span>
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="keyword">public</span>:
<a name="l00186"></a>00186 
<a name="l00187"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#aa54cbe73a244a1c7d73ce9aa975279d0">00187</a>         <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#adbdb11710318e74198eb1ad23a63f56f">SplitOnKandVol</a>(<span class="keywordtype">double</span> aVol, <span class="keywordtype">size_t</span> minCP = 0)
<a name="l00188"></a>00188                      :  <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af3766a409d0c882d23965ab7f5868c6c">approxMinVol</a>(aVol), 
<a name="l00189"></a>00189                    <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af590d181521aea9eacec7465312cb735">minChildPoints</a>(minCP) {};
<a name="l00190"></a>00190 
<a name="l00191"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#a5995683a3db1e801a10e7e0baf011d03">00191</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#a5995683a3db1e801a10e7e0baf011d03">operator()</a>()<span class="keyword"> const</span>
<a name="l00192"></a>00192 <span class="keyword">        </span>{
<a name="l00193"></a>00193             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00194"></a>00194         }
<a name="l00195"></a>00195 
<a name="l00196"></a><a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#afc8d8d30b0c25478ffbce3d2358cfd89">00196</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#a5995683a3db1e801a10e7e0baf011d03">operator()</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn)<span class="keyword"> const</span>
<a name="l00197"></a>00197 <span class="keyword">        </span>{         
<a name="l00198"></a>00198         
<a name="l00199"></a>00199         <span class="comment">//std::cout &lt;&lt; &quot;----calling splitonKandVol----&quot; &lt;&lt; std::endl;</span>
<a name="l00200"></a>00200         <span class="keywordtype">bool</span> retvalue;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202          <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= 1 &amp;&amp; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &gt; <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml#af3766a409d0c882d23965ab7f5868c6c">approxMinVol</a>)
<a name="l00203"></a>00203           {  
<a name="l00204"></a>00204              <span class="comment">//std::cout &lt;&lt; spn-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getBox();</span>
<a name="l00205"></a>00205             <span class="comment">//std::cout &lt;&lt; &quot;spn-&gt;getCounter()==1 &amp;&amp; spn-&gt;nodeVolume() &gt; approxMinVol:&quot; &lt;&lt; std::endl;</span>
<a name="l00206"></a>00206             <span class="comment">//std::cout &lt;&lt; &quot;Counter: &quot; &lt;&lt; spn-&gt;getCounter() </span>
<a name="l00207"></a>00207              <span class="comment">//          &lt;&lt; &quot;\tVolume: &quot; &lt;&lt; spn-&gt;nodeVolume() </span>
<a name="l00208"></a>00208           <span class="comment">//         &lt;&lt; &quot;\tApproxMinVol: &quot; &lt;&lt; approxMinVol &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<a name="l00209"></a>00209              <span class="comment">//split only if the split does not result in a node having </span>
<a name="l00210"></a>00210             <span class="comment">//  vol less than approxMinVol </span>
<a name="l00211"></a>00211             retvalue = <span class="keyword">true</span>;
<a name="l00212"></a>00212           }
<a name="l00213"></a>00213         <span class="keywordflow">else</span> {
<a name="l00214"></a>00214           <span class="comment">//std::cout &lt;&lt; &quot;Do not split &quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; std::endl;</span>
<a name="l00215"></a>00215           <span class="comment">//std::cout &lt;&lt; spn-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getBox();</span>
<a name="l00216"></a>00216           <span class="comment">//std::cout &lt;&lt; &quot;spn-&gt;getCounter()==1 &amp;&amp; spn-&gt;nodeVolume() &gt; approxMinVol:&quot; &lt;&lt; std::endl;</span>
<a name="l00217"></a>00217           <span class="comment">//std::cout &lt;&lt; &quot;Counter: &quot; &lt;&lt; spn-&gt;getCounter() </span>
<a name="l00218"></a>00218           <span class="comment">//      &lt;&lt; &quot;\tVolume: &quot; &lt;&lt; spn-&gt;nodeVolume() </span>
<a name="l00219"></a>00219           <span class="comment">//      &lt;&lt; &quot;\tApproxMinVol: &quot; &lt;&lt; approxMinVol &lt;&lt; std::endl &lt;&lt; std::endl;</span>
<a name="l00220"></a>00220           retvalue = <span class="keyword">false</span>;
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222         <span class="keywordflow">return</span> retvalue;
<a name="l00223"></a>00223         }
<a name="l00224"></a>00224     };
<a name="l00225"></a>00225 
<a name="l00227"></a>00227 }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 <span class="preprocessor">#endif</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>
<a name="l00231"></a>00231 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="splitdecisionobj_8hpp.shtml">splitdecisionobj.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
