<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogramvalidation.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogramvalidation_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogramvalidation.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogramvalidation_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramvalidation_8hpp.shtml" title="AdaptiveHistogramValidation declarations.">adaptivehistogramvalidation.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span> <span class="comment">// to use standard input and output</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>   <span class="comment">// to use the C++ string class</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;set&gt;</span>      <span class="comment">// to use the stl::multiset container</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;list&gt;</span>     <span class="comment">// to use stl:: lists</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;exception&gt;</span> <span class="comment">// use exceptions</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span> <span class="comment">// to use the constant M_PI </span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;math.h&gt;</span> <span class="comment">// math library</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">//to use subpavings</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &quot;<a class="code" href="spalgorithms_8hpp.shtml" title="SPnode (SubPaving) algorithm function declarations.">spalgorithms.hpp</a>&quot;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="comment">// to use stats subpavings</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;<a class="code" href="collatorspvnode_8hpp.shtml">collatorspvnode.hpp</a>&quot;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramvcollator_8hpp.shtml" title="AdaptiveHistogramVCollator declarations.">adaptivehistogramvcollator.hpp</a>&quot;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">// to use mcmc function objects</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="histmcmcobjs_8hpp.shtml" title="Function objects for MCMC with adaptive histograms.">histmcmcobjs.hpp</a>&quot;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">// to use histogram evaluation objects</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &quot;<a class="code" href="histevalobjval_8hpp.shtml">histevalobjval.hpp</a>&quot;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">// to use error functions </span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">// to use 2D integration using taylor methods</span>
<a name="l00067"></a>00067 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>
<a name="l00068"></a>00068 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">// to use assert</span>
<a name="l00071"></a>00071 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">using namespace </span>subpavings;
<a name="l00074"></a>00074 <span class="keyword">using namespace </span>std;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">// a class for comparison between spsvnodes</span>
<a name="l00077"></a>00077 <span class="keyword">class </span><a class="code" href="classMyCompare.shtml">MyCompare</a>
<a name="l00078"></a>00078 {
<a name="l00079"></a><a class="code" href="classMyCompare.shtml#aad6bdf9b44e3fbc16faaf3368b764515">00079</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; <a class="code" href="classMyCompare.shtml#aad6bdf9b44e3fbc16faaf3368b764515">myNC</a>;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <span class="keyword">public</span>:
<a name="l00082"></a><a class="code" href="classMyCompare.shtml#a404a0d135af697d1e77f095a5f178c50">00082</a>     <a class="code" href="classMyCompare.shtml#a404a0d135af697d1e77f095a5f178c50">MyCompare</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; nc) : myNC(nc) {}
<a name="l00083"></a>00083 
<a name="l00084"></a><a class="code" href="classMyCompare.shtml#a9af5853229809316e3499b8be21a607e">00084</a>     <span class="keywordtype">bool</span> operator()   (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00085"></a>00085                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00086"></a>00086 <span class="keyword">    </span>{ <span class="keywordflow">return</span> myNC(lhs, rhs); }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 };
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="comment">//=====implementation of AdaptiveHistogramValidationValidation class ==========</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">// --------------------------- private ---------------------------------------</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="comment">// a constant for padding a box if it is tailor-made for data</span>
<a name="l00095"></a>00095 <span class="keyword">const</span> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea" title="a constant for padding a box if it is tailor-made for data.">AdaptiveHistogramValidation::padding</a> = 0.000005;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">// initialised constructor, initialised with a subpaving pointer</span>
<a name="l00098"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7bebcc83720d315cbbb8c8ab85d7a945">00098</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation::AdaptiveHistogramValidation</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * spn, <span class="keywordtype">bool</span> as)
<a name="l00099"></a>00099         : holdAllStats(as)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101     <span class="keywordflow">if</span> (NULL == spn) {
<a name="l00102"></a>00102         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot use null SPSVnode pointer in constructor&quot;</span>);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = spn;
<a name="l00105"></a>00105     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00106"></a>00106     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 <span class="comment">// complete insertion of data from a vector of data for hold out</span>
<a name="l00115"></a>00115 <span class="comment">// given a container of rvectors of the data  to insert</span>
<a name="l00116"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9">00116</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">AdaptiveHistogramValidation::completeDataInsertionFromVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00117"></a>00117                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00118"></a>00118                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> holdOutCount, 
<a name="l00119"></a>00119                       std::vector&lt;size_t&gt; &amp; numNodes)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00125"></a>00125     <span class="keywordtype">int</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theData.begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theData.begin()) + 1;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="comment">// ensure the paving exists</span>
<a name="l00128"></a>00128     <span class="keywordtype">bool</span> hadToMakePaving = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7b6e78d7a069536dd096e81c6e3d8e1f" title="Checks if we need to make root paving for the histogram object.">haveMadePaving</a>(theData, dataDim);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="comment">// if we did not make the paving we have to check data dimensions</span>
<a name="l00131"></a>00131     <span class="keywordflow">if</span> (!hadToMakePaving) {
<a name="l00132"></a>00132         <span class="keywordflow">if</span>(dataDim != (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a>)) + 1) {
<a name="l00133"></a>00133 
<a name="l00134"></a>00134             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Dimensions of data do not match paving&quot;</span>);
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">// insert the data</span>
<a name="l00139"></a>00139   <span class="comment">//  std::cout &lt;&lt; &quot;calling insertData...&quot; &lt;&lt; endl;</span>
<a name="l00140"></a>00140     <span class="keywordtype">size_t</span> dataCountInserted
<a name="l00141"></a>00141             = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac57fa83d1ec2fc1e9cf1565c9cc07f91" title="Insert training and validation data from a container.">insertDataFromContainer</a>(theData, boolTest, logging, holdOutCount,
<a name="l00142"></a>00142                                   numNodes);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordflow">if</span> (dataCountInserted &gt; 0) {
<a name="l00145"></a>00145         retValue = <span class="keyword">true</span>;
<a name="l00146"></a>00146         <span class="comment">// switch on for more output during histogram creation &quot;</span>
<a name="l00147"></a>00147         <span class="comment">/*</span>
<a name="l00148"></a>00148 <span class="comment">        std::cout &lt;&lt; &quot;End of inserting data: &quot; &lt;&lt; dataCountInserted</span>
<a name="l00149"></a>00149 <span class="comment">            &lt;&lt; &quot; data points inserted to dataCollection &quot;</span>
<a name="l00150"></a>00150 <span class="comment">            &lt;&lt; std:: endl;</span>
<a name="l00151"></a>00151 <span class="comment">        std::cout &lt;&lt; &quot;and associated with the tree if &quot;</span>
<a name="l00152"></a>00152 <span class="comment">            &lt;&lt; &quot;they fit into the root box&quot; &lt;&lt; std::endl;</span>
<a name="l00153"></a>00153 <span class="comment">        std::cout &lt;&lt; &quot;(check console output for possible records &quot;</span>
<a name="l00154"></a>00154 <span class="comment">            &lt;&lt; &quot;of datapoints which did not fit)&quot; &lt;&lt; std::endl;</span>
<a name="l00155"></a>00155 <span class="comment">        */</span>
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="keywordflow">if</span> (dataCountInserted == 0) {
<a name="l00159"></a>00159         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No data inserted&quot;</span>);
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">return</span> retValue;
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 <span class="comment">// check if we need to make a paving for the histogram object</span>
<a name="l00167"></a>00167 <span class="comment">// make it if we need to, matching the dimensions of the data</span>
<a name="l00168"></a>00168 <span class="comment">// as given in function argument</span>
<a name="l00169"></a>00169 <span class="comment">// return true if needed to make the paving</span>
<a name="l00170"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7b6e78d7a069536dd096e81c6e3d8e1f">00170</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7b6e78d7a069536dd096e81c6e3d8e1f" title="Checks if we need to make root paving for the histogram object.">AdaptiveHistogramValidation::haveMadePaving</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00171"></a>00171                                     <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173 
<a name="l00174"></a>00174     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="keywordflow">try</span> {
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         <span class="comment">// check if we need to make the paving on the basis of the data</span>
<a name="l00179"></a>00179         <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>)) {
<a name="l00180"></a>00180 
<a name="l00181"></a>00181             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abaa0f3ffd23bccd07a2c4a4b9a60e579" title="Make a box to contain all the data.">makeBox</a>(theData, dim);
<a name="l00182"></a>00182 
<a name="l00183"></a>00183             <span class="comment">// point rootVpaving to a new SPSVnode with box myBox</span>
<a name="l00184"></a>00184             <span class="comment">// and also pass in the not value of holdAllStats which controls</span>
<a name="l00185"></a>00185             <span class="comment">// whether all available statistics are maintained in the</span>
<a name="l00186"></a>00186             <span class="comment">// rootVpaving (true) or just counts (false)</span>
<a name="l00187"></a>00187             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a>, !<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>);
<a name="l00188"></a>00188             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00189"></a>00189 
<a name="l00190"></a>00190             retValue = <span class="keyword">true</span>;
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192     }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keywordflow">catch</span> (bad_alloc&amp; e)
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196         <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = e.what();
<a name="l00197"></a>00197         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00198"></a>00198         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00199"></a>00199             &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogramValidation::haveMadePaving()&quot;</span>
<a name="l00200"></a>00200             &lt;&lt; std::endl;
<a name="l00201"></a>00201         <span class="keywordflow">throw</span>;
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="keywordflow">return</span> retValue;
<a name="l00205"></a>00205     <span class="comment">// end of making the subpaving if there was not one</span>
<a name="l00206"></a>00206 }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="comment">// make a box to fit all the data</span>
<a name="l00209"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abaa0f3ffd23bccd07a2c4a4b9a60e579">00209</a> ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abaa0f3ffd23bccd07a2c4a4b9a60e579" title="Make a box to contain all the data.">AdaptiveHistogramValidation::makeBox</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim)
<a name="l00210"></a>00210 {
<a name="l00211"></a>00211     <span class="comment">// set up a vector of maxes</span>
<a name="l00212"></a>00212     vector&lt;real&gt; maxs;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214     <span class="comment">// give maxs starting values from the first element in the rvectors</span>
<a name="l00215"></a>00215     rvector first = *theData.begin();
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;=dim; i++) {
<a name="l00218"></a>00218         maxs.push_back(first[i]);
<a name="l00219"></a>00219     }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="comment">// make mins the same as maxes to start with</span>
<a name="l00222"></a>00222     vector&lt;real&gt; mins = maxs;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> cit;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226     <span class="comment">// go over the rest of the container</span>
<a name="l00227"></a>00227     <span class="keywordflow">for</span>(cit = theData.begin()+1; cit &lt; theData.end(); cit++) {
<a name="l00228"></a>00228         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= dim; i++) {
<a name="l00229"></a>00229             real r = (*cit)[i];
<a name="l00230"></a>00230             <span class="comment">// vectors indexed 0 - n-1, rvectors ndexed 1 - n</span>
<a name="l00231"></a>00231             <span class="keywordflow">if</span>(r &lt; mins[i-1]) {
<a name="l00232"></a>00232                 mins[i-1] = r;
<a name="l00233"></a>00233             }
<a name="l00234"></a>00234             <span class="keywordflow">if</span>(r &gt; maxs[i-1]) {
<a name="l00235"></a>00235                 maxs[i-1] = r;
<a name="l00236"></a>00236             }
<a name="l00237"></a>00237         } <span class="comment">// end going through rvector elements</span>
<a name="l00238"></a>00238     } <span class="comment">// end going through rvectors</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240     ivector retVal(dim);    <span class="comment">// set up an ivector to become the return value</span>
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     <span class="comment">// and make each interval the (min, max) of the corresponding elements</span>
<a name="l00243"></a>00243     <span class="comment">// of the rvectors -/+ some padding</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     std::cout &lt;&lt; <span class="stringliteral">&quot;A box is being made for the data.  &quot;</span>
<a name="l00246"></a>00246         &lt;&lt; <span class="stringliteral">&quot;The box is &quot;</span> &lt;&lt; std::endl;  <span class="comment">// standard output message</span>
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="comment">// make intervals and make them elements of the ivector</span>
<a name="l00249"></a>00249     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;=dim; i++) {
<a name="l00250"></a>00250         interval myInterval(mins[i-1]-<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea" title="a constant for padding a box if it is tailor-made for data.">padding</a>, maxs[i-1]+<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0039bec0f033c35a5477375cb54eb8ea" title="a constant for padding a box if it is tailor-made for data.">padding</a>);
<a name="l00251"></a>00251         std::cout &lt;&lt; myInterval &lt;&lt; <span class="stringliteral">&quot;  &quot;</span>;    <span class="comment">// output</span>
<a name="l00252"></a>00252         retVal[i]=myInterval;
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254     std::cout &lt;&lt; std::endl;
<a name="l00255"></a>00255 
<a name="l00256"></a>00256     <span class="keywordflow">return</span> retVal;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="comment">// insert data from a container</span>
<a name="l00261"></a>00261 <span class="comment">// return number of data points inserted into dataCollection</span>
<a name="l00262"></a>00262 <span class="comment">// (and for which insertion into subpaving was attempted)</span>
<a name="l00263"></a>00263 <span class="comment">// used by all the other bulk-insert methods</span>
<a name="l00264"></a>00264 <span class="comment">// creates log file of process if logging is true.</span>
<a name="l00265"></a>00265 <span class="comment">//size_t AdaptiveHistogramValidation::insertDataFromContainer(const RVecData&amp; theData,</span>
<a name="l00266"></a>00266 <span class="comment">//                                    const SplitDecisionObj&amp; boolTest,</span>
<a name="l00267"></a>00267 <span class="comment">//                                   LOGGING_LEVEL logging, size_t holdOutCount)</span>
<a name="l00268"></a>00268 <span class="comment">//temporarily for air traffic trajectory analysis</span>
<a name="l00269"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac57fa83d1ec2fc1e9cf1565c9cc07f91">00269</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac57fa83d1ec2fc1e9cf1565c9cc07f91" title="Insert training and validation data from a container.">AdaptiveHistogramValidation::insertDataFromContainer</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00270"></a>00270                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00271"></a>00271                                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> holdOutCount,
<a name="l00272"></a>00272                         vector&lt;size_t&gt; &amp; numNodes)                        
<a name="l00273"></a>00273 {
<a name="l00274"></a>00274     <span class="keywordtype">size_t</span> counter = 0;    <span class="comment">// to count the input</span>
<a name="l00275"></a>00275     <span class="keywordtype">bool</span> boolVal; <span class="comment">// to  indicate if this data is a training or validation point</span>
<a name="l00276"></a>00276     <span class="comment">// for logging output to keep track of splits if necessary</span>
<a name="l00277"></a>00277     <span class="keywordtype">int</span> i = 0;
<a name="l00278"></a>00278     std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00279"></a>00279     std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00280"></a>00280     <span class="comment">// if we are splitting as we go and logging, set up a log file</span>
<a name="l00281"></a>00281     <span class="keywordflow">if</span> ((logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) &amp;&amp; (boolTest() == <span class="keyword">true</span>)) {
<a name="l00282"></a>00282         baseFileName = <span class="stringliteral">&quot;splitOutput&quot;</span>;
<a name="l00283"></a>00283         s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l00284"></a>00284        <span class="comment">// outputLogStart(s);</span>
<a name="l00285"></a>00285         <span class="comment">// log the current state of the histogram</span>
<a name="l00286"></a>00286       <span class="comment">//  outputLog(s, i);</span>
<a name="l00287"></a>00287         i++;
<a name="l00288"></a>00288     }
<a name="l00289"></a>00289    
<a name="l00290"></a>00290    <span class="comment">//int hist = 0;</span>
<a name="l00291"></a>00291    <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> cit;
<a name="l00292"></a>00292     <span class="comment">// feed the data to myHist</span>
<a name="l00293"></a>00293     <span class="keywordflow">for</span>(cit = theData.begin(); cit &lt; theData.end(); cit++) {
<a name="l00294"></a>00294         <span class="comment">// put it into dataCollection</span>
<a name="l00295"></a>00295         <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> it = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a>.end();
<a name="l00296"></a>00296         it = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a>.insert(it, *cit);
<a name="l00297"></a>00297         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* insertedInto = NULL;
<a name="l00298"></a>00298         <span class="keywordflow">if</span> (counter &lt; holdOutCount) {
<a name="l00299"></a>00299           <span class="comment">// try inserting </span>
<a name="l00300"></a>00300           boolVal = <span class="keyword">true</span>;
<a name="l00301"></a>00301           insertedInto =
<a name="l00302"></a>00302                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(it,<a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, boolTest, boolVal);
<a name="l00303"></a>00303         }
<a name="l00304"></a>00304         <span class="keywordflow">else</span> {
<a name="l00305"></a>00305          boolVal = <span class="keyword">false</span>;
<a name="l00306"></a>00306       <span class="comment">// try inserting</span>
<a name="l00307"></a>00307          insertedInto =
<a name="l00308"></a>00308                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(it,<a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, boolTest, boolVal);
<a name="l00309"></a>00309            numNodes.push_back(<a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>));
<a name="l00310"></a>00310            
<a name="l00311"></a>00311            <span class="comment">/* </span>
<a name="l00312"></a>00312 <span class="comment">           string histFileName;</span>
<a name="l00313"></a>00313 <span class="comment">           std::ostringstream stm1;</span>
<a name="l00314"></a>00314 <span class="comment">           stm1 &lt;&lt; hist;</span>
<a name="l00315"></a>00315 <span class="comment">           histFileName = &quot;Hist&quot;;</span>
<a name="l00316"></a>00316 <span class="comment">           histFileName += stm1.str();</span>
<a name="l00317"></a>00317 <span class="comment">           histFileName += &quot;.txt&quot;;</span>
<a name="l00318"></a>00318 <span class="comment">           cout &lt;&lt; &quot;get histogram:&quot; &lt;&lt; histFileName &lt;&lt; endl;</span>
<a name="l00319"></a>00319 <span class="comment">           outputToTxtTabs(histFileName);     </span>
<a name="l00320"></a>00320 <span class="comment">           hist++;    </span>
<a name="l00321"></a>00321 <span class="comment">           */</span>     
<a name="l00322"></a>00322       }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <span class="comment">//insertOneFind returns either NULL if no insert possible</span>
<a name="l00325"></a>00325         <span class="comment">// or a pointer to the node the data goes to before that node</span>
<a name="l00326"></a>00326         <span class="comment">// is split (it could be split more than once)</span>
<a name="l00327"></a>00327         <span class="keywordflow">if</span> (NULL == insertedInto) { <span class="comment">// failed to insert</span>
<a name="l00328"></a>00328             std::cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert point &quot;</span>
<a name="l00329"></a>00329                 &lt;&lt; *cit &lt;&lt; std::endl;
<a name="l00330"></a>00330             std::cout &lt;&lt; <span class="stringliteral">&quot;Root node of subpaving has box &quot;</span>
<a name="l00331"></a>00331                 &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> &lt;&lt; std::endl;
<a name="l00332"></a>00332         }
<a name="l00333"></a>00333         <span class="comment">// successful insertion, and we are splitting as we go</span>
<a name="l00334"></a>00334         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (boolTest() == <span class="keyword">true</span> &amp;&amp; boolVal == <span class="keyword">false</span> ) {
<a name="l00335"></a>00335             std::string newNames = insertedInto-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00336"></a>00336      
<a name="l00337"></a>00337             <span class="keywordflow">if</span>(newNames.length() &gt; 0) { <span class="comment">// there are new nodes</span>
<a name="l00338"></a>00338                 <span class="comment">//add the new child names if any</span>
<a name="l00339"></a>00339                 <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += newNames;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341                 <span class="keywordflow">if</span> (logging) { <span class="comment">// log the current state of the histogram</span>
<a name="l00342"></a>00342 <span class="comment">//                    outputLog(s, i);</span>
<a name="l00343"></a>00343                     i++;
<a name="l00344"></a>00344                 }        
<a name="l00345"></a>00345            
<a name="l00346"></a>00346             }
<a name="l00347"></a>00347        }
<a name="l00348"></a>00348         counter++;
<a name="l00349"></a>00349     }
<a name="l00350"></a>00350     <span class="keywordflow">if</span> (counter &gt; 0) { <span class="comment">// data inserted</span>
<a name="l00351"></a>00351          <span class="keywordflow">if</span> ((logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) &amp;&amp; (boolTest() == <span class="keyword">true</span>))  {
<a name="l00352"></a>00352             <span class="comment">// add leaf node levels string to log</span>
<a name="l00353"></a>00353             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acba6350d62c4aa8c1d9de5589c039543">getLeafLevelsString</a>());
<a name="l00354"></a>00354         }
<a name="l00355"></a>00355     }
<a name="l00356"></a>00356     <span class="keywordflow">return</span> counter;
<a name="l00357"></a>00357 }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 <span class="comment">// Method to put opening line into a log file</span>
<a name="l00360"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5">00360</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">AdaptiveHistogramValidation::outputLogStart</a>(<span class="keyword">const</span> std::string&amp; s)<span class="keyword"> const</span>
<a name="l00361"></a>00361 <span class="keyword"></span>{
<a name="l00362"></a>00362     <span class="comment">// Make a string with filename and timestamp to start log file</span>
<a name="l00363"></a>00363     time_t rawtime;
<a name="l00364"></a>00364     <span class="keyword">struct </span>tm * timeinfo;
<a name="l00365"></a>00365     time ( &amp;rawtime );
<a name="l00366"></a>00366     timeinfo = localtime ( &amp;rawtime );
<a name="l00367"></a>00367     ofstream os(s.c_str());         <span class="comment">// replace data</span>
<a name="l00368"></a>00368     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00369"></a>00369         os &lt;&lt; <span class="stringliteral">&quot;File &quot;</span> &lt;&lt; s &lt;&lt; <span class="stringliteral">&quot; created &quot;</span> &lt;&lt;  asctime (timeinfo) &lt;&lt; std::endl;
<a name="l00370"></a>00370         os.close();
<a name="l00371"></a>00371     }
<a name="l00372"></a>00372     <span class="keywordflow">else</span> {
<a name="l00373"></a>00373         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00374"></a>00374             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00375"></a>00375     }
<a name="l00376"></a>00376 }
<a name="l00377"></a>00377 
<a name="l00378"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0">00378</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">AdaptiveHistogramValidation::checkNodeCountForSplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn,
<a name="l00379"></a>00379                 <span class="keywordtype">bool</span> volChecking, <span class="keywordtype">double</span> minVol, <span class="keywordtype">size_t</span> minChildPoints)
<a name="l00380"></a>00380 {
<a name="l00381"></a>00381     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00382"></a>00382 
<a name="l00383"></a>00383     <span class="keywordflow">if</span> ((!volChecking || (volChecking &amp;&amp; (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &gt;= minVol)))
<a name="l00384"></a>00384         &amp;&amp; ((minChildPoints == 0)
<a name="l00385"></a>00385             || (minChildPoints &gt; 0
<a name="l00386"></a>00386                 &amp;&amp;
<a name="l00387"></a>00387                 ((spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minChildPoints) &amp;&amp;
<a name="l00388"></a>00388                     ((spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0)
<a name="l00389"></a>00389                     ||
<a name="l00390"></a>00390                     (spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minChildPoints))
<a name="l00391"></a>00391                 ))
<a name="l00392"></a>00392             )
<a name="l00393"></a>00393         ) { retValue = <span class="keyword">true</span>; }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395     <span class="keywordflow">return</span> retValue;
<a name="l00396"></a>00396 }
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 <span class="comment">// ----------- histogram public methods</span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="comment">// default constructor</span>
<a name="l00401"></a>00401 <span class="comment">// holdAllStats defaults to false.</span>
<a name="l00402"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c">00402</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation::AdaptiveHistogramValidation</a>()
<a name="l00403"></a>00403         : holdAllStats(false), creationString(<span class="stringliteral">&quot;&quot;</span>)
<a name="l00404"></a>00404 {
<a name="l00405"></a>00405     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = NULL;
<a name="l00406"></a>00406     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = ivector();    <span class="comment">// ivector with length 1 and undefined elements</span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 
<a name="l00409"></a>00409     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l00410"></a>00410 }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 <span class="comment">// initialised constructor with bool to control whether all stats maintained</span>
<a name="l00413"></a>00413 <span class="comment">// in root paving</span>
<a name="l00414"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a07760421ee7a7bdf1d38cf29a1ebf5c8">00414</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation::AdaptiveHistogramValidation</a>(<span class="keywordtype">bool</span> as)
<a name="l00415"></a>00415         : holdAllStats(as), creationString(<span class="stringliteral">&quot;&quot;</span>)
<a name="l00416"></a>00416 {
<a name="l00417"></a>00417     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = NULL;
<a name="l00418"></a>00418     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = ivector();    <span class="comment">// ivector with length 1 and undefined elements</span>
<a name="l00419"></a>00419 
<a name="l00420"></a>00420 
<a name="l00421"></a>00421     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l00422"></a>00422 }
<a name="l00423"></a>00423 
<a name="l00424"></a>00424 <span class="comment">// initialised constructor, initialised with ivector for box</span>
<a name="l00425"></a>00425 <span class="comment">// and with bool to control whether all stats are maintained in root paving.</span>
<a name="l00426"></a>00426 <span class="comment">// (defaults to false which means that only counts are maintained in rootVpaving)</span>
<a name="l00427"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a3ef9f2889ef3bde29457990c210094e9">00427</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation::AdaptiveHistogramValidation</a>(ivector&amp; v, <span class="keywordtype">bool</span> as)
<a name="l00428"></a>00428         : holdAllStats(as)
<a name="l00429"></a>00429 {
<a name="l00430"></a>00430     <span class="keywordflow">try</span> {
<a name="l00431"></a>00431         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(v, !as);
<a name="l00432"></a>00432         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00433"></a>00433 
<a name="l00434"></a>00434         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = v;
<a name="l00435"></a>00435     }
<a name="l00436"></a>00436     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00437"></a>00437         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00438"></a>00438         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor&quot;</span> &lt;&lt; std::endl;
<a name="l00439"></a>00439         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l00440"></a>00440     }
<a name="l00441"></a>00441     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00442"></a>00442         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00443"></a>00443         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00444"></a>00444                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00445"></a>00445         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor:&quot;</span> + msg);
<a name="l00446"></a>00446     }
<a name="l00447"></a>00447     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00448"></a>00448         <span class="keywordtype">string</span> msg(e.what());
<a name="l00449"></a>00449         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00450"></a>00450                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00451"></a>00451         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor:&quot;</span> + msg);
<a name="l00452"></a>00452     }
<a name="l00453"></a>00453 
<a name="l00454"></a>00454     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l00455"></a>00455 }
<a name="l00456"></a>00456 
<a name="l00457"></a>00457 <span class="comment">// copy constructor</span>
<a name="l00458"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a899983cbb878e24d4e3d7e54601b7dd2">00458</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae0f0cb633c516b90444862c87eef424c" title="Default constructor.">AdaptiveHistogramValidation::AdaptiveHistogramValidation</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; other)
<a name="l00459"></a>00459         : rootBox(other.rootBox), holdAllStats(other.holdAllStats) 
<a name="l00460"></a>00460 {
<a name="l00461"></a>00461     <span class="keywordflow">try</span> {
<a name="l00462"></a>00462        <span class="comment">// cout &lt;&lt; &quot;calling copy constructor&quot; &lt;&lt; endl;</span>
<a name="l00463"></a>00463       <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>));
<a name="l00464"></a>00464         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00465"></a>00465         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00466"></a>00466 
<a name="l00467"></a>00467         <span class="comment">//copy dataCollection from other to this</span>
<a name="l00468"></a>00468         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a> = other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l00469"></a>00469 
<a name="l00470"></a>00470     }
<a name="l00471"></a>00471     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00472"></a>00472         <span class="keywordtype">string</span> msg(ba.what());
<a name="l00473"></a>00473         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l00474"></a>00474                                             &lt;&lt; msg &lt;&lt; std:: endl;
<a name="l00475"></a>00475         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l00476"></a>00476     }
<a name="l00477"></a>00477     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00478"></a>00478         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00479"></a>00479         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00480"></a>00480                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00481"></a>00481         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00484"></a>00484         <span class="keywordtype">string</span> msg(e.what());
<a name="l00485"></a>00485         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00486"></a>00486                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00487"></a>00487         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
<a name="l00488"></a>00488     }
<a name="l00489"></a>00489 }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="comment">//copy assignment operator</span>
<a name="l00493"></a>00493 <span class="comment">//deep copy of the whole histogram</span>
<a name="l00494"></a>00494 <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp;
<a name="l00495"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aba8d900d6f696824de3e6cb5bb99e794">00495</a>             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aba8d900d6f696824de3e6cb5bb99e794" title="Copy assignment operator.">AdaptiveHistogramValidation::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; rhs)
<a name="l00496"></a>00496 {
<a name="l00497"></a>00497     <span class="keywordflow">try</span> {
<a name="l00498"></a>00498         <span class="comment">//cout &lt;&lt; &quot;copy assignment operator&quot; &lt;&lt; endl;</span>
<a name="l00499"></a>00499         <span class="comment">// we have to make sure we delete the current paving</span>
<a name="l00500"></a>00500         <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l00501"></a>00501             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>;
<a name="l00502"></a>00502             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = NULL;
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505         <span class="keywordflow">if</span> (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l00506"></a>00506             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>));
<a name="l00507"></a>00507             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00508"></a>00508             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00509"></a>00509 
<a name="l00510"></a>00510             <span class="comment">//copy dataCollection from other to this</span>
<a name="l00511"></a>00511             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acae18e51a5026807492d2109702c3c93" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l00512"></a>00512             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l00513"></a>00513         }
<a name="l00514"></a>00514         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8a961766f97013134d73f1735f3516c" title="The root box used to form the subpaving tree.">rootBox</a>;
<a name="l00515"></a>00515         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00516"></a>00516     }
<a name="l00517"></a>00517     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00518"></a>00518         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor&quot;</span> &lt;&lt; std::endl;
<a name="l00519"></a>00519         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l00520"></a>00520     }
<a name="l00521"></a>00521     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00522"></a>00522         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00523"></a>00523         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l00524"></a>00524                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00525"></a>00525         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l00526"></a>00526     }
<a name="l00527"></a>00527     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00528"></a>00528         <span class="keywordtype">string</span> msg(e.what());
<a name="l00529"></a>00529         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l00530"></a>00530                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00531"></a>00531         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l00532"></a>00532     }
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="comment">//Destructor</span>
<a name="l00536"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a26664847dd161cb938bddb579946b018">00536</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a26664847dd161cb938bddb579946b018" title="Destructor.">AdaptiveHistogramValidation::~AdaptiveHistogramValidation</a>()
<a name="l00537"></a>00537 {
<a name="l00538"></a>00538     <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>;
<a name="l00539"></a>00539 }
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 
<a name="l00542"></a>00542 <span class="comment">// Return a pointer to the SPSVnode this manages.</span>
<a name="l00543"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59">00543</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">AdaptiveHistogramValidation::getSubPaving</a>()<span class="keyword"> const</span>
<a name="l00544"></a>00544 <span class="keyword"></span>{<span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>;}
<a name="l00545"></a>00545 
<a name="l00546"></a>00546 
<a name="l00547"></a>00547 <span class="comment">// Gets count in the rootVpaving in the root paving.</span>
<a name="l00548"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a23a25c2169c94e019859f8efc2657c1b">00548</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a23a25c2169c94e019859f8efc2657c1b" title="Gets count in the rootpaving in the root paving.">AdaptiveHistogramValidation::getRootVcounter</a>()<span class="keyword"> const</span>
<a name="l00549"></a>00549 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>(); }
<a name="l00550"></a>00550 
<a name="l00551"></a>00551 <span class="comment">// Gets number of leaf nodes in the root paving.</span>
<a name="l00552"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169">00552</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">AdaptiveHistogramValidation::getRootLeaves</a>()<span class="keyword"> const</span>
<a name="l00553"></a>00553 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>); }
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 <span class="comment">// Gets the sum of leaf count over volume in root paving.</span>
<a name="l00556"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a22ac33f1952cfb6b605193cddab42bae">00556</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a22ac33f1952cfb6b605193cddab42bae" title="Gets the sum of leaf count over volume in root paving.">AdaptiveHistogramValidation::getRootSumLeafCountOverVol</a>()<span class="keyword"> const</span>
<a name="l00557"></a>00557 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac741a9772d992ba74911cf692e1ed772" title="Get the sum of the count over volume in the leaf nodes.">getSumLeafCountOverVol</a>(); }
<a name="l00558"></a>00558 
<a name="l00559"></a>00559 <span class="comment">// get the value of the minimum volume for a splittable node.</span>
<a name="l00560"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99">00560</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">AdaptiveHistogramValidation::getMinVol</a>(<span class="keywordtype">double</span> minVolB)<span class="keyword"> const</span>
<a name="l00561"></a>00561 <span class="keyword"></span>{
<a name="l00562"></a>00562     <span class="keywordtype">double</span> retValue = 0.0;
<a name="l00563"></a>00563 
<a name="l00564"></a>00564     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l00565"></a>00565 
<a name="l00566"></a>00566         <span class="keywordtype">size_t</span> counter = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l00567"></a>00567         retValue =  minVolB * log(1.0*counter)*log(1.0*counter)/counter;
<a name="l00568"></a>00568     }
<a name="l00569"></a>00569     <span class="keywordflow">return</span> retValue;
<a name="l00570"></a>00570 }
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="comment">// get the value of holdAllStats field.</span>
<a name="l00573"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abfd3760f709336024357625903d9f2e9">00573</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abfd3760f709336024357625903d9f2e9" title="get the value of holdAllStats field.">AdaptiveHistogramValidation::getHoldAllStats</a>()<span class="keyword"> const</span>
<a name="l00574"></a>00574 <span class="keyword"></span>{
<a name="l00575"></a>00575     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a4de24d08db784df2fdb619ba2c1f62fd" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l00576"></a>00576 }
<a name="l00577"></a>00577 
<a name="l00578"></a>00578 <span class="comment">// Get a string of the leaf node levels.</span>
<a name="l00579"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acba6350d62c4aa8c1d9de5589c039543">00579</a> std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acba6350d62c4aa8c1d9de5589c039543">AdaptiveHistogramValidation::getLeafLevelsString</a>()<span class="keyword"> const</span>
<a name="l00580"></a>00580 <span class="keyword"></span>{
<a name="l00581"></a>00581     <span class="keywordtype">string</span> retValue = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00582"></a>00582     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>)
<a name="l00583"></a>00583         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">getLeafNodeLevelsString</a>();
<a name="l00584"></a>00584 
<a name="l00585"></a>00585     <span class="keywordflow">return</span> retValue;
<a name="l00586"></a>00586 }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588 <span class="comment">// method to insert rvectors from a txt file</span>
<a name="l00589"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad8df8dae6a879dc00975edfe4a0cc3b6">00589</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a1c8f4b1ea86038de1e1d780f227f9b28">AdaptiveHistogramValidation::insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l00590"></a>00590                                 std::vector&lt;size_t&gt; &amp; numNodes,
<a name="l00591"></a>00591                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,                     
<a name="l00592"></a>00592                         <span class="keyword">const</span> std::size_t headerlines,
<a name="l00593"></a>00593                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00594"></a>00594 {
<a name="l00595"></a>00595     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00596"></a>00596 
<a name="l00597"></a>00597     <span class="keywordflow">try</span> {
<a name="l00598"></a>00598         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l00599"></a>00599 
<a name="l00600"></a>00600         <span class="comment">// try to read in the file</span>
<a name="l00601"></a>00601         retValue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(myDataRvectors, s, headerlines);
<a name="l00602"></a>00602 
<a name="l00603"></a>00603         <span class="keywordflow">if</span> (retValue) {
<a name="l00604"></a>00604             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l00605"></a>00605                                                     boolTest, logging, 0,
<a name="l00606"></a>00606                                    numNodes);
<a name="l00607"></a>00607         }
<a name="l00608"></a>00608     }
<a name="l00609"></a>00609     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00610"></a>00610         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00611"></a>00611         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l00612"></a>00612                                             + oldmsg;
<a name="l00613"></a>00613         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00614"></a>00614         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00615"></a>00615     }
<a name="l00616"></a>00616     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00617"></a>00617         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00618"></a>00618         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l00619"></a>00619                                     + oldmsg;
<a name="l00620"></a>00620         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00621"></a>00621         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00622"></a>00622     }
<a name="l00623"></a>00623     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00624"></a>00624         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00625"></a>00625         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00626"></a>00626         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00627"></a>00627         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00628"></a>00628     }
<a name="l00629"></a>00629     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00630"></a>00630         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00631"></a>00631         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00632"></a>00632         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00633"></a>00633         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00634"></a>00634     }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636     <span class="keywordflow">return</span> retValue;
<a name="l00637"></a>00637 }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 <span class="comment">// method to insert all rvectors from an RVecData object</span>
<a name="l00641"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa0d5d92e0474bfc0574340b34268dd39">00641</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa0d5d92e0474bfc0574340b34268dd39">AdaptiveHistogramValidation::insertFromRVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec,
<a name="l00642"></a>00642                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00643"></a>00643                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00644"></a>00644 {
<a name="l00645"></a>00645     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00646"></a>00646 
<a name="l00647"></a>00647     <span class="keywordflow">try</span> {
<a name="l00648"></a>00648 
<a name="l00649"></a>00649         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l00650"></a>00650 
<a name="l00651"></a>00651         <span class="keywordtype">size_t</span> numberFound = 0;
<a name="l00652"></a>00652 
<a name="l00653"></a>00653         <span class="keywordflow">if</span> (rvec.empty()) { <span class="comment">// no data points to get</span>
<a name="l00654"></a>00654             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No data to insert&quot;</span>);
<a name="l00655"></a>00655         }
<a name="l00656"></a>00656 
<a name="l00657"></a>00657         <span class="keywordflow">else</span> { <span class="comment">// there is data to get</span>
<a name="l00658"></a>00658 
<a name="l00659"></a>00659             <span class="comment">// get data from the container and check how many data points found</span>
<a name="l00660"></a>00660             <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#a211cb10f439ff2bdb92ce92906159792" title="Get all rvectors from a container of rvectors.">getRvectorsFromRVec</a>(myDataRvectors, rvec);
<a name="l00661"></a>00661 
<a name="l00662"></a>00662 
<a name="l00663"></a>00663             <span class="keywordflow">if</span> (numberFound &gt; 0) {
<a name="l00664"></a>00664                 <span class="comment">/*</span>
<a name="l00665"></a>00665 <span class="comment">                // confirm the amount of data taken from the container</span>
<a name="l00666"></a>00666 <span class="comment">                std::cout &lt;&lt; &quot;End of taking data from container of rvectors: &quot;</span>
<a name="l00667"></a>00667 <span class="comment">                    &lt;&lt; numberFound &lt;&lt; &quot; data points found&quot; &lt;&lt; std::endl;</span>
<a name="l00668"></a>00668 <span class="comment">                */</span>
<a name="l00669"></a>00669                 <span class="comment">// complete the data insertion</span>
<a name="l00670"></a>00670            vector&lt;size_t&gt; temp;
<a name="l00671"></a>00671                 retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l00672"></a>00672                                                         boolTest, logging, 0,
<a name="l00673"></a>00673                                       temp);
<a name="l00674"></a>00674             }
<a name="l00675"></a>00675         }
<a name="l00676"></a>00676     }
<a name="l00677"></a>00677     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00678"></a>00678          <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00679"></a>00679         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l00680"></a>00680                                             + oldmsg;
<a name="l00681"></a>00681         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00682"></a>00682         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00683"></a>00683     }
<a name="l00684"></a>00684     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00685"></a>00685         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00686"></a>00686         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l00687"></a>00687                                     + oldmsg;
<a name="l00688"></a>00688         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00689"></a>00689         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00692"></a>00692         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00693"></a>00693         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00694"></a>00694         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00695"></a>00695         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00696"></a>00696     }
<a name="l00697"></a>00697     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00698"></a>00698         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00699"></a>00699         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00700"></a>00700         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00701"></a>00701         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704     <span class="keywordflow">return</span> retValue;
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 }
<a name="l00707"></a>00707 
<a name="l00708"></a>00708 <span class="comment">// method to insert rvectors from an RVecData object for hold-out estimation</span>
<a name="l00709"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">00709</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">AdaptiveHistogramValidation::insertFromRVecForHoldOut</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, 
<a name="l00710"></a>00710 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00711"></a>00711 {
<a name="l00712"></a>00712     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00713"></a>00713 
<a name="l00714"></a>00714   <span class="comment">//  bool boolVal=true;</span>
<a name="l00715"></a>00715     
<a name="l00716"></a>00716     <span class="keywordflow">try</span> {
<a name="l00717"></a>00717 
<a name="l00718"></a>00718         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l00719"></a>00719 
<a name="l00720"></a>00720 <span class="comment">//        size_t numberFound = 0;</span>
<a name="l00721"></a>00721 
<a name="l00722"></a>00722         <span class="keywordflow">if</span> (rvec.empty()) { <span class="comment">// no data points to get</span>
<a name="l00723"></a>00723             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No data to insert&quot;</span>);
<a name="l00724"></a>00724         }
<a name="l00725"></a>00725 
<a name="l00726"></a>00726         <span class="keywordflow">else</span> { <span class="comment">// there is data to get</span>
<a name="l00727"></a>00727 
<a name="l00728"></a>00728             <span class="comment">// get data from the container and check how many data points found</span>
<a name="l00729"></a>00729             <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#a211cb10f439ff2bdb92ce92906159792" title="Get all rvectors from a container of rvectors.">getRvectorsFromRVec</a>(myDataRvectors, rvec);
<a name="l00730"></a>00730 
<a name="l00731"></a>00731 
<a name="l00732"></a>00732             <span class="keywordflow">if</span> (numberFound &gt; 0) {
<a name="l00733"></a>00733                 <span class="comment">/*</span>
<a name="l00734"></a>00734 <span class="comment">                // confirm the amount of data taken from the container</span>
<a name="l00735"></a>00735 <span class="comment">                std::cout &lt;&lt; &quot;End of taking data from container of rvectors: &quot;</span>
<a name="l00736"></a>00736 <span class="comment">                    &lt;&lt; numberFound &lt;&lt; &quot; data points found&quot; &lt;&lt; std::endl;</span>
<a name="l00737"></a>00737 <span class="comment">                */</span>
<a name="l00738"></a>00738                 <span class="comment">// complete the data insertion</span>
<a name="l00739"></a>00739 
<a name="l00740"></a>00740                <span class="comment">// cout &lt;&lt; &quot;calling complateDataInsertion...&quot; &lt;&lt; endl;</span>
<a name="l00741"></a>00741           vector&lt;size_t&gt; temp;
<a name="l00742"></a>00742                 retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l00743"></a>00743                                      boolTest, logging, holdOutCount, temp);
<a name="l00744"></a>00744             }
<a name="l00745"></a>00745         }
<a name="l00746"></a>00746     }
<a name="l00747"></a>00747     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00748"></a>00748          <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00749"></a>00749         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l00750"></a>00750                                             + oldmsg;
<a name="l00751"></a>00751         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00752"></a>00752         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00753"></a>00753     }
<a name="l00754"></a>00754     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00755"></a>00755         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00756"></a>00756         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l00757"></a>00757                                     + oldmsg;
<a name="l00758"></a>00758         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00759"></a>00759         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00760"></a>00760     }
<a name="l00761"></a>00761     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00762"></a>00762         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00763"></a>00763         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00764"></a>00764         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00765"></a>00765         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00766"></a>00766     }
<a name="l00767"></a>00767     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00768"></a>00768         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00769"></a>00769         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00770"></a>00770         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00771"></a>00771         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00772"></a>00772     }
<a name="l00773"></a>00773 
<a name="l00774"></a>00774     <span class="keywordflow">return</span> retValue;
<a name="l00775"></a>00775 } <span class="comment">// end of insertRVecForHoldOut </span>
<a name="l00776"></a>00776 
<a name="l00777"></a>00777 <span class="comment">//All RSSample are associated with the root paving for hold out estimation, no splitting. */</span>
<a name="l00778"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ace1a6eca888d6251a7e3db5d1c59bf2b">00778</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ace1a6eca888d6251a7e3db5d1c59bf2b">AdaptiveHistogramValidation::insertFromRSSampleForHoldOut</a>(
<a name="l00779"></a>00779                                  <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keywordtype">int</span> label,  
<a name="l00780"></a>00780                       <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00781"></a>00781                       <span class="keywordtype">int</span> holdOutCount,
<a name="l00782"></a>00782                       <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00783"></a>00783 {
<a name="l00784"></a>00784     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786   <span class="comment">//  bool boolVal=true;</span>
<a name="l00787"></a>00787     
<a name="l00788"></a>00788     <span class="keywordflow">try</span> {
<a name="l00789"></a>00789 
<a name="l00790"></a>00790         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l00791"></a>00791 
<a name="l00792"></a>00792             <span class="comment">// get data from the container and check how many data points found</span>
<a name="l00793"></a>00793             <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#ad435f1951db3078702d178b718018651" title="Get all rvectors from an RSSample object.">getRvectorsFromRSSample</a>(myDataRvectors, rss, label);
<a name="l00794"></a>00794 
<a name="l00795"></a>00795 
<a name="l00796"></a>00796             <span class="keywordflow">if</span> (numberFound &gt; 0) {
<a name="l00797"></a>00797                 <span class="comment">/*</span>
<a name="l00798"></a>00798 <span class="comment">                // confirm the amount of data taken from the container</span>
<a name="l00799"></a>00799 <span class="comment">                std::cout &lt;&lt; &quot;End of taking data from container of rvectors: &quot;</span>
<a name="l00800"></a>00800 <span class="comment">                    &lt;&lt; numberFound &lt;&lt; &quot; data points found&quot; &lt;&lt; std::endl;</span>
<a name="l00801"></a>00801 <span class="comment">                */</span>
<a name="l00802"></a>00802                 <span class="comment">// complete the data insertion</span>
<a name="l00803"></a>00803 
<a name="l00804"></a>00804                <span class="comment">// cout &lt;&lt; &quot;calling complateDataInsertion...&quot; &lt;&lt; endl;</span>
<a name="l00805"></a>00805           vector&lt;size_t&gt; temp;
<a name="l00806"></a>00806                 retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#acf7246052d9032f41a4f237f1b5207d9" title="Complete insertion of training and validation data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l00807"></a>00807                                      boolTest, logging, holdOutCount, temp);
<a name="l00808"></a>00808             }
<a name="l00809"></a>00809       }
<a name="l00810"></a>00810     
<a name="l00811"></a>00811     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00812"></a>00812          <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00813"></a>00813         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l00814"></a>00814                                             + oldmsg;
<a name="l00815"></a>00815         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00816"></a>00816         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00817"></a>00817     }
<a name="l00818"></a>00818     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00819"></a>00819         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00820"></a>00820         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l00821"></a>00821                                     + oldmsg;
<a name="l00822"></a>00822         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00823"></a>00823         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00824"></a>00824     }
<a name="l00825"></a>00825     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00826"></a>00826         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00827"></a>00827         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00828"></a>00828         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00829"></a>00829         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00830"></a>00830     }
<a name="l00831"></a>00831     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00832"></a>00832         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00833"></a>00833         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l00834"></a>00834         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00835"></a>00835         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00836"></a>00836     }
<a name="l00837"></a>00837 
<a name="l00838"></a>00838     <span class="keywordflow">return</span> retValue;
<a name="l00839"></a>00839 } <span class="comment">// end of insertFromRSSampleForHoldOut</span>
<a name="l00840"></a>00840 
<a name="l00841"></a>00841 <span class="comment">// prioritySplitAndEstimate for uniform mixtures</span>
<a name="l00842"></a>00842 <span class="comment">// method for data splitting and hold out estimation</span>
<a name="l00843"></a>00843 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l00844"></a>00844 <span class="comment">// by prioritising which node to split first</span>
<a name="l00845"></a>00845 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l00846"></a>00846 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l00847"></a>00847 <span class="comment">// or until a stopping criteria is fulfilled</span>
<a name="l00848"></a>00848 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l00849"></a>00849 <span class="comment">// makes its own random number generator</span>
<a name="l00850"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a63938649a46bb4a5ed5d432606b02427">00850</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">AdaptiveHistogramValidation::prioritySplitAndEstimate</a>(
<a name="l00851"></a>00851                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, 
<a name="l00852"></a>00852              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l00853"></a>00853              <span class="keywordtype">double</span> minVolB, <span class="keywordtype">bool</span> stopCrit, 
<a name="l00854"></a>00854              <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, vector&lt;int&gt; holesLoc,
<a name="l00855"></a>00855              <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist, 
<a name="l00856"></a>00856              <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00857"></a>00857              <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l00858"></a>00858 {
<a name="l00859"></a>00859     gsl_rng * rgsl = NULL;
<a name="l00860"></a>00860     <span class="keywordtype">bool</span> cancontinue;
<a name="l00861"></a>00861 
<a name="l00862"></a>00862     <span class="keywordflow">try</span> {
<a name="l00863"></a>00863         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00864"></a>00864         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00865"></a>00865         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00866"></a>00866         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00867"></a>00867         gsl_rng_env_setup();
<a name="l00868"></a>00868         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00869"></a>00869         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00870"></a>00870 
<a name="l00871"></a>00871         <span class="comment">// call the function with a random number generator</span>
<a name="l00872"></a>00872         cancontinue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(compTest, he, logging, minChildPoints, 
<a name="l00873"></a>00873                         minVolB, rgsl, stopCrit, myPart, weight, holesLoc,
<a name="l00874"></a>00874                         method, hist,
<a name="l00875"></a>00875                         maxLeafNodes, maxCheck, optHist);
<a name="l00876"></a>00876         gsl_rng_free (rgsl);
<a name="l00877"></a>00877     }
<a name="l00878"></a>00878 
<a name="l00879"></a>00879     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00880"></a>00880         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l00881"></a>00881         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l00882"></a>00882         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l00883"></a>00883                                      + oldmsg;
<a name="l00884"></a>00884         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00885"></a>00885         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00886"></a>00886     }
<a name="l00887"></a>00887     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l00888"></a>00888         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l00889"></a>00889         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l00890"></a>00890         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l00891"></a>00891                                     + oldmsg;
<a name="l00892"></a>00892         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00893"></a>00893         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00894"></a>00894     }
<a name="l00895"></a>00895     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00896"></a>00896         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l00897"></a>00897         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00898"></a>00898         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l00899"></a>00899                                     + oldmsg;
<a name="l00900"></a>00900         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00901"></a>00901         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00902"></a>00902     }
<a name="l00903"></a>00903     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00904"></a>00904         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l00905"></a>00905         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l00906"></a>00906         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l00907"></a>00907         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00908"></a>00908         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l00909"></a>00909     }
<a name="l00910"></a>00910    
<a name="l00911"></a>00911    <span class="keywordflow">return</span> cancontinue;
<a name="l00912"></a>00912 }
<a name="l00913"></a>00913 
<a name="l00914"></a>00914 <span class="comment">// prioritySplitAndEstimate for uniform mixtures</span>
<a name="l00915"></a>00915 <span class="comment">// hold out estimation based on Devroye and Lugosi 2006</span>
<a name="l00916"></a>00916 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l00917"></a>00917 <span class="comment">// by prioritising which node to split first</span>
<a name="l00918"></a>00918 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l00919"></a>00919 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l00920"></a>00920 <span class="comment">// or until a  splitting criteria is satisfied</span>
<a name="l00921"></a>00921 <span class="comment">// outputs to a log file if logging required</span>
<a name="l00922"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae982e9b5ffc50d9893a557a09bfc89af">00922</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">AdaptiveHistogramValidation::prioritySplitAndEstimate</a>(
<a name="l00923"></a>00923                      <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he,  
<a name="l00924"></a>00924                      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l00925"></a>00925               <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, 
<a name="l00926"></a>00926               <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; myPart, <span class="keywordtype">double</span> weight, 
<a name="l00927"></a>00927               vector&lt;int&gt; holesLoc,
<a name="l00928"></a>00928               <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l00929"></a>00929               <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l00930"></a>00930               <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l00931"></a>00931 {
<a name="l00932"></a>00932     <span class="comment">//cout &lt;&lt; &quot;calling prioritySplitAndEstimate:&quot; &lt;&lt; endl;</span>
<a name="l00933"></a>00933    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l00934"></a>00934    <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l00935"></a>00935    
<a name="l00936"></a>00936     <span class="comment">//boolean for validation data</span>
<a name="l00937"></a>00937     <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l00938"></a>00938     
<a name="l00939"></a>00939     <span class="comment">// for stopping criteria</span>
<a name="l00940"></a>00940     <span class="keywordtype">size_t</span> flagStop = 0;
<a name="l00941"></a>00941     <span class="keywordtype">int</span> currentSmallest = 0;
<a name="l00942"></a>00942     
<a name="l00943"></a>00943     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l00944"></a>00944     
<a name="l00945"></a>00945     <span class="comment">//set up collator to keep the histograms as splits happen</span>
<a name="l00946"></a>00946     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l00947"></a>00947     
<a name="l00948"></a>00948    <span class="comment">//=======initializing containers======================================</span>
<a name="l00949"></a>00949   <span class="comment">//set up a list for the Yatracos set </span>
<a name="l00950"></a>00950   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;
<a name="l00951"></a>00951   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (row)</span>
<a name="l00952"></a>00952   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecRowYatSet;
<a name="l00953"></a>00953   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (col)</span>
<a name="l00954"></a>00954   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecColYatSet;    
<a name="l00955"></a>00955   <span class="comment">//set up a vector for maximum Delta_theta vectors</span>
<a name="l00956"></a>00956   vector&lt; vector&lt;double&gt; &gt; vecMaxDeltaVec;
<a name="l00957"></a>00957   <span class="comment">//initializing the vector - to allow the delta vector to be in </span>
<a name="l00958"></a>00958   <span class="comment">// right order  since the first histogram does not have a </span>
<a name="l00959"></a>00959   <span class="comment">// Yatracos set</span>
<a name="l00960"></a>00960   <span class="comment">//the first element in this vector will not be plotted since </span>
<a name="l00961"></a>00961   <span class="comment">// the first histogram is an empty set</span>
<a name="l00962"></a>00962   vector&lt;double&gt; theta0;
<a name="l00963"></a>00963   theta0.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l00964"></a>00964   <span class="comment">//the supremum of an empty set is -Infimum </span>
<a name="l00965"></a>00965   vecMaxDeltaVec.push_back(theta0);
<a name="l00966"></a>00966   <span class="comment">//set up a vector of the corresponding theta with the minimum </span>
<a name="l00967"></a>00967   <span class="comment">// distance estimates</span>
<a name="l00968"></a>00968   vector&lt; vector&lt;int&gt; &gt; vecMinDistTheta;
<a name="l00969"></a>00969   <span class="comment">// set up a vector for the infimum </span>
<a name="l00970"></a>00970   vector&lt;double&gt; vecInfDelta;
<a name="l00971"></a>00971   <span class="comment">// set up a vector for the integrated absolute error for each histogram</span>
<a name="l00972"></a>00972    vector&lt;real&gt; vecIAE; 
<a name="l00973"></a>00973    vector&lt;real&gt; vecIAEFull;
<a name="l00974"></a>00974    real minIAE = 1000.00;
<a name="l00975"></a>00975    
<a name="l00976"></a>00976    vector&lt;real&gt; TrueDelta;
<a name="l00977"></a>00977    TrueDelta.push_back(-1); 
<a name="l00978"></a>00978    
<a name="l00979"></a>00979    real trueDeltaCurrent = 0;
<a name="l00980"></a>00980    
<a name="l00981"></a>00981    <span class="comment">// to keep the histograms</span>
<a name="l00982"></a>00982    vector&lt;AdaptiveHistogramValidation&gt; tempHist;
<a name="l00983"></a>00983    <span class="comment">//==============end of initializing containers=============================//   </span>
<a name="l00984"></a>00984    <span class="comment">// check if the root box is empty</span>
<a name="l00985"></a>00985     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l00986"></a>00986             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l00987"></a>00987     }
<a name="l00988"></a>00988     <span class="keywordflow">try</span> {       
<a name="l00989"></a>00989         <span class="comment">// add the histogram before any split happens into the collator</span>
<a name="l00990"></a>00990         <span class="keywordtype">size_t</span> agg = 0;
<a name="l00991"></a>00991       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l00992"></a>00992       tempHist.push_back(*<span class="keyword">this</span>);
<a name="l00993"></a>00993       <span class="comment">// calculate the IAE </span>
<a name="l00994"></a>00994       real IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 0);
<a name="l00995"></a>00995       <span class="comment">// push back into vecIAE </span>
<a name="l00996"></a>00996       vecIAE.push_back(IAE);
<a name="l00997"></a>00997       minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l00998"></a>00998       
<a name="l00999"></a>00999       <span class="comment">//get the IAE for the full data set</span>
<a name="l01000"></a>01000       real IAEF = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 1);
<a name="l01001"></a>01001       <span class="comment">// push back into vecIAE </span>
<a name="l01002"></a>01002       vecIAEFull.push_back(IAEF);
<a name="l01003"></a>01003 
<a name="l01004"></a>01004     <span class="comment">//============checks  for splittable nodes=============================//</span>
<a name="l01005"></a>01005         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l01006"></a>01006         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l01007"></a>01007         <span class="comment">//logging</span>
<a name="l01008"></a>01008         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01009"></a>01009         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01010"></a>01010         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01011"></a>01011             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l01012"></a>01012             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l01013"></a>01013             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l01014"></a>01014         }
<a name="l01015"></a>01015         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l01016"></a>01016         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l01017"></a>01017             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l01018"></a>01018             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l01019"></a>01019             volChecking = <span class="keyword">true</span>;
<a name="l01020"></a>01020         }
<a name="l01021"></a>01021       <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l01022"></a>01022       multiset&lt;SPSVnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l01023"></a>01023       <span class="keywordtype">int</span> i=0;
<a name="l01024"></a>01024       <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01025"></a>01025              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l01026"></a>01026             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(s);    
<a name="l01027"></a>01027             i++;
<a name="l01028"></a>01028       }
<a name="l01029"></a>01029       <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l01030"></a>01030       <span class="comment">// there are enough points in the whole node</span>
<a name="l01031"></a>01031       <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l01032"></a>01032       <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l01033"></a>01033         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01034"></a>01034             <span class="comment">// check to insert a copy of the rootVpaving pointer into the set</span>
<a name="l01035"></a>01035            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>, volChecking, minVol,
<a name="l01036"></a>01036                 minChildPoints)) {
<a name="l01037"></a>01037                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>);
<a name="l01038"></a>01038             }
<a name="l01039"></a>01039         }
<a name="l01040"></a>01040         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l01041"></a>01041             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01042"></a>01042             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01043"></a>01043             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l01044"></a>01044             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> sit;            
<a name="l01045"></a>01045             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l01046"></a>01046                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l01047"></a>01047                 minChildPoints)) {
<a name="l01048"></a>01048                pq.insert(*sit);
<a name="l01049"></a>01049                 }
<a name="l01050"></a>01050             }
<a name="l01051"></a>01051         }
<a name="l01052"></a>01052         cancontinue = (!pq.empty());
<a name="l01053"></a>01053         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l01054"></a>01054         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l01055"></a>01055             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l01056"></a>01056         }        
<a name="l01057"></a>01057         <span class="comment">//==================end of checks=====================================//</span>
<a name="l01058"></a>01058   
<a name="l01059"></a>01059       <span class="keywordtype">size_t</span> ch = 0;
<a name="l01060"></a>01060       
<a name="l01061"></a>01061         <span class="comment">//=========start priority queue====================================//</span>
<a name="l01062"></a>01062         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l01063"></a>01063         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l01064"></a>01064         <span class="comment">// that they are splittable when we take them out   </span>
<a name="l01065"></a>01065       <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {          
<a name="l01066"></a>01066             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l01067"></a>01067             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* chosenLargest;
<a name="l01068"></a>01068             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l01069"></a>01069             multiset&lt;SPSVnode*, MyCompare&gt;::iterator mit;
<a name="l01070"></a>01070             pair&lt;multiset&lt;SPSVnode*, MyCompare&gt;::iterator,
<a name="l01071"></a>01071                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l01072"></a>01072             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l01073"></a>01073             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l01074"></a>01074 
<a name="l01075"></a>01075             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l01076"></a>01076                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l01077"></a>01077                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l01078"></a>01078                 real sum = 0.0;
<a name="l01079"></a>01079                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l01080"></a>01080                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l01081"></a>01081                     sum += 1.0/(1.0*numberLargest);
<a name="l01082"></a>01082                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l01083"></a>01083                         <span class="keywordflow">break</span>;
<a name="l01084"></a>01084                     }
<a name="l01085"></a>01085                 }
<a name="l01086"></a>01086                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l01087"></a>01087                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l01088"></a>01088             }
<a name="l01089"></a>01089             <span class="keywordflow">else</span> {
<a name="l01090"></a>01090                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l01091"></a>01091                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l01092"></a>01092                 it--;
<a name="l01093"></a>01093                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l01094"></a>01094             }
<a name="l01095"></a>01095             <span class="comment">// split the biggest one and divide up its training and validation </span>
<a name="l01096"></a>01096             <span class="comment">// data</span>
<a name="l01097"></a>01097             
<a name="l01098"></a>01098             cout &lt;&lt; <span class="stringliteral">&quot;--------------Split &quot;</span> &lt;&lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l01099"></a>01099             <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(chosenLargest, boolVal);
<a name="l01100"></a>01100                           
<a name="l01101"></a>01101             <span class="comment">// add the new child names to the creation string</span>
<a name="l01102"></a>01102             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01103"></a>01103 
<a name="l01104"></a>01104             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l01105"></a>01105             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l01106"></a>01106             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l01107"></a>01107                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l01108"></a>01108                 <span class="comment">// one child of the child)</span>
<a name="l01109"></a>01109             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l01110"></a>01110             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l01111"></a>01111                     volChecking, minVol, minChildPoints)) {
<a name="l01112"></a>01112                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l01113"></a>01113                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01114"></a>01114             }
<a name="l01115"></a>01115             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l01116"></a>01116                     volChecking, minVol, minChildPoints)) {
<a name="l01117"></a>01117                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l01118"></a>01118                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01119"></a>01119             }
<a name="l01120"></a>01120             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01121"></a>01121                 <span class="comment">// To add current state of histogram to log file                   </span>
<a name="l01122"></a>01122                 i++;
<a name="l01123"></a>01123             }
<a name="l01124"></a>01124 
<a name="l01125"></a>01125           <span class="comment">//==========get IAE for this histogram======================//</span>
<a name="l01126"></a>01126         <span class="comment">//cout &lt;&lt; &quot;get IAE for histogram &quot; &lt;&lt; coll.getNumberCollated() &lt;&lt; endl;</span>
<a name="l01127"></a>01127         real IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 0);
<a name="l01128"></a>01128         minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l01129"></a>01129         vecIAE.push_back(IAE); 
<a name="l01130"></a>01130         
<a name="l01131"></a>01131         real IAEF =<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 1);
<a name="l01132"></a>01132         vecIAEFull.push_back(IAEF); 
<a name="l01133"></a>01133         
<a name="l01134"></a>01134         
<a name="l01135"></a>01135         <span class="comment">// keep this histogram in a container </span>
<a name="l01136"></a>01136         tempHist.push_back(*<span class="keyword">this</span>);
<a name="l01137"></a>01137         
<a name="l01138"></a>01138         <span class="comment">/*</span>
<a name="l01139"></a>01139 <span class="comment">        string fileName = &quot;QueueHist&quot;;</span>
<a name="l01140"></a>01140 <span class="comment">        ostringstream stm;</span>
<a name="l01141"></a>01141 <span class="comment">        stm &lt;&lt; ch;</span>
<a name="l01142"></a>01142 <span class="comment">        fileName += stm.str();</span>
<a name="l01143"></a>01143 <span class="comment">        fileName += &quot;.txt&quot;;</span>
<a name="l01144"></a>01144 <span class="comment">        outputToTxtTabs(fileName);</span>
<a name="l01145"></a>01145 <span class="comment">        </span>
<a name="l01146"></a>01146 <span class="comment">        ch++;</span>
<a name="l01147"></a>01147 <span class="comment">        */</span>
<a name="l01148"></a>01148         <span class="comment">//cout &lt;&lt; &quot;add into collator&quot; &lt;&lt; endl;</span>
<a name="l01149"></a>01149         <span class="comment">// add current histogram to collation</span>
<a name="l01150"></a>01150         <span class="keywordtype">size_t</span> agg = 0;
<a name="l01151"></a>01151         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l01152"></a>01152           
<a name="l01153"></a>01153         <span class="comment">//cout &lt;&lt; &quot;get the split node&quot; &lt;&lt; endl;</span>
<a name="l01154"></a>01154         <span class="comment">// first we need a pointer to the corresponding CollatorSPVnode </span>
<a name="l01155"></a>01155         <span class="comment">// of the SPSVnode* chosenLargest     </span>
<a name="l01156"></a>01156         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * splitCollNode;
<a name="l01157"></a>01157         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(splitCollNode, chosenLargest);
<a name="l01158"></a>01158         <span class="comment">//cout &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; splitCollNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01159"></a>01159         
<a name="l01160"></a>01160         <span class="comment">//cout &lt;&lt; &quot;get the yat class&quot; &lt;&lt; endl;</span>
<a name="l01161"></a>01161         <span class="comment">// get the Yatracos class for this collation</span>
<a name="l01162"></a>01162         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(splitCollNode, vecRowYatSet,
<a name="l01163"></a>01163                             vecColYatSet, listYatSet);
<a name="l01164"></a>01164 
<a name="l01165"></a>01165         <span class="comment">//cout &lt;&lt; &quot;get delta theta&quot; &lt;&lt; endl;</span>
<a name="l01166"></a>01166         <span class="comment">// get delta_theta for each theta</span>
<a name="l01167"></a>01167         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(listYatSet, vecRowYatSet, vecColYatSet, 
<a name="l01168"></a>01168                         vecMaxDeltaVec);
<a name="l01169"></a>01169 
<a name="l01170"></a>01170         <span class="comment">// get the true delta</span>
<a name="l01171"></a>01171         real trueDelta = 0;
<a name="l01172"></a>01172         vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;   
<a name="l01173"></a>01173         <span class="comment">//cout &lt;&lt; &quot;Current Yatracos set has &quot; &lt;&lt; (*tempList).size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l01174"></a>01174         <span class="keywordflow">for</span> (listIt = (vecRowYatSet).begin(); listIt &lt; vecRowYatSet.end(); listIt++) {
<a name="l01175"></a>01175           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l01176"></a>01176             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(myPart, weight, holesLoc, (*listIt));
<a name="l01177"></a>01177             trueDeltaR = abs(trueDeltaR);
<a name="l01178"></a>01178             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l01179"></a>01179             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01180"></a>01180             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l01181"></a>01181             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01182"></a>01182             trueDeltaCurrent = trueDelta;
<a name="l01183"></a>01183             TrueDelta.push_back(trueDelta);
<a name="l01184"></a>01184           }
<a name="l01185"></a>01185         }
<a name="l01186"></a>01186 
<a name="l01187"></a>01187         <span class="keywordflow">for</span> (listIt = (vecColYatSet).begin(); listIt &lt; vecColYatSet.end(); listIt++) {
<a name="l01188"></a>01188           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l01189"></a>01189             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(myPart, weight, holesLoc, (*listIt));
<a name="l01190"></a>01190             trueDeltaR = abs(trueDeltaR);
<a name="l01191"></a>01191             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l01192"></a>01192             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01193"></a>01193             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l01194"></a>01194             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01195"></a>01195             trueDeltaCurrent = trueDelta;
<a name="l01196"></a>01196             TrueDelta.push_back(trueDelta);
<a name="l01197"></a>01197           }
<a name="l01198"></a>01198         }
<a name="l01199"></a>01199 
<a name="l01200"></a>01200         <span class="keywordflow">if</span> ( vecRowYatSet.empty() &amp;&amp; vecColYatSet.empty() ) { trueDelta = -1; TrueDelta.push_back(trueDelta); } 
<a name="l01201"></a>01201 
<a name="l01202"></a>01202         <span class="comment">//check theorem 10.1</span>
<a name="l01203"></a>01203         <span class="comment">//cout &lt;&lt; &quot;check theorem: &quot; &lt;&lt; endl;</span>
<a name="l01204"></a>01204         <span class="comment">//cout &lt;&lt; IAE &lt;&lt; &quot;\t&quot; &lt;&lt; minIAE &lt;&lt; &quot;\t&quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01205"></a>01205         <span class="comment">//if (trueDelta &gt;= 0) { assert(IAE &lt;= (3*minIAE + 4*trueDelta)); }</span>
<a name="l01206"></a>01206 
<a name="l01207"></a>01207         <span class="comment">//stopping criteria</span>
<a name="l01208"></a>01208         <span class="keywordflow">if</span> (stopCrit == <span class="keyword">true</span>) {
<a name="l01209"></a>01209           <span class="comment">//cout &lt;&lt; &quot;checking stopping criteria: &quot; &lt;&lt; endl;</span>
<a name="l01210"></a>01210           <span class="keywordtype">bool</span> toStop = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(maxCheck, vecMaxDeltaVec);
<a name="l01211"></a>01211           <span class="keywordflow">if</span> (toStop == <span class="keyword">true</span>) {
<a name="l01212"></a>01212             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met.&quot;</span> &lt;&lt; endl;
<a name="l01213"></a>01213             <span class="keywordflow">break</span>;
<a name="l01214"></a>01214           } 
<a name="l01215"></a>01215         }
<a name="l01216"></a>01216 
<a name="l01217"></a>01217         <span class="comment">//==========checks to see if need to split again=========//</span>
<a name="l01218"></a>01218             <span class="comment">//checking if there are any more &#39;largest&#39; nodes in the priority queue</span>
<a name="l01219"></a>01219             bigEnough = (!pq.empty());
<a name="l01220"></a>01220             <span class="keywordflow">if</span> (!bigEnough){    
<a name="l01221"></a>01221           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l01222"></a>01222                     &lt;&lt; std::endl;
<a name="l01223"></a>01223             }
<a name="l01224"></a>01224         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l01225"></a>01225         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l01226"></a>01226         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l01227"></a>01227         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l01228"></a>01228         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l01229"></a>01229           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l01230"></a>01230                           &lt;&lt; std::endl;
<a name="l01231"></a>01231         }
<a name="l01232"></a>01232       } <span class="comment">// end of while loop</span>
<a name="l01233"></a>01233       <span class="comment">//cout &lt;&lt; &quot;===========End of splitting=============&quot; &lt;&lt; endl;</span>
<a name="l01234"></a>01234         
<a name="l01235"></a>01235       <span class="comment">//do the merging here based on vecMinDistTheta</span>
<a name="l01236"></a>01236          
<a name="l01237"></a>01237       <span class="comment">//================Outputs to .txt files=================== </span>
<a name="l01238"></a>01238       ofstream os;         <span class="comment">// ofstream object</span>
<a name="l01239"></a>01239       os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l01240"></a>01240       os.precision(5);
<a name="l01241"></a>01241 
<a name="l01242"></a>01242        <span class="comment">// get the minimum delta to get the MDE histogram</span>
<a name="l01243"></a>01243       vector&lt; vector&lt;double&gt; &gt;::iterator it1; 
<a name="l01244"></a>01244       vector&lt;double&gt;::iterator it2;
<a name="l01245"></a>01245       <span class="keywordtype">int</span> Theta=0;
<a name="l01246"></a>01246       <span class="comment">//cout &lt;&lt; &quot;MaxDelta&quot; &lt;&lt; endl;</span>
<a name="l01247"></a>01247       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> = vecMaxDeltaVec.size(); 
<a name="l01248"></a>01248       <span class="keywordtype">double</span> minDelta = 1000;
<a name="l01249"></a>01249       <span class="keywordtype">int</span> minTheta = 0;
<a name="l01250"></a>01250       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>; i++){
<a name="l01251"></a>01251         <span class="comment">//cout &lt;&lt; &quot;Theta: &quot; &lt;&lt; Theta &lt;&lt; &quot;\t&quot; &lt;&lt; vecMaxDeltaVec[F-1][i] &lt;&lt; endl;</span>
<a name="l01252"></a>01252         <span class="keywordflow">if</span> ( vecMaxDeltaVec[F-1][i] &lt; minDelta ) { 
<a name="l01253"></a>01253           minDelta = vecMaxDeltaVec[F-1][i]; 
<a name="l01254"></a>01254           minTheta = Theta; 
<a name="l01255"></a>01255         } 
<a name="l01256"></a>01256         Theta++;
<a name="l01257"></a>01257       }
<a name="l01258"></a>01258 
<a name="l01259"></a>01259       cout &lt;&lt; <span class="stringliteral">&quot;MDE at &quot;</span> &lt;&lt; minTheta &lt;&lt; <span class="stringliteral">&quot; with IAE &quot;</span> &lt;&lt; vecIAE[minTheta] &lt;&lt; endl; 
<a name="l01260"></a>01260          optHist = tempHist[minTheta];
<a name="l01261"></a>01261 
<a name="l01262"></a>01262       <span class="comment">// output vecDeltaMaxVec into .txt </span>
<a name="l01263"></a>01263       ostringstream stm1, stm2;
<a name="l01264"></a>01264       stm1 &lt;&lt; hist;
<a name="l01265"></a>01265       stm2 &lt;&lt; method;
<a name="l01266"></a>01266       <span class="keywordtype">string</span> fileNameDelta = <span class="stringliteral">&quot;UnifMethod&quot;</span>;
<a name="l01267"></a>01267       fileNameDelta += stm2.str();
<a name="l01268"></a>01268       fileNameDelta += <span class="stringliteral">&quot;DeltaMax&quot;</span>;
<a name="l01269"></a>01269       fileNameDelta += stm1.str();
<a name="l01270"></a>01270       fileNameDelta += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l01271"></a>01271       os.open(fileNameDelta.c_str());
<a name="l01272"></a>01272       <span class="keywordflow">for</span> (it1 = vecMaxDeltaVec.begin(); it1 &lt; vecMaxDeltaVec.end(); it1++){ 
<a name="l01273"></a>01273         <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){
<a name="l01274"></a>01274           os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l01275"></a>01275         }
<a name="l01276"></a>01276         os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l01277"></a>01277       }          
<a name="l01278"></a>01278       os &lt;&lt; flush;
<a name="l01279"></a>01279       os.close();
<a name="l01280"></a>01280       std::cout &lt;&lt; <span class="stringliteral">&quot;DeltaMax for each theta output to &quot;</span> &lt;&lt; fileNameDelta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l01281"></a>01281       <span class="comment">//----------------end of output for vecDeltaMaxVec-------------</span>
<a name="l01282"></a>01282  
<a name="l01283"></a>01283          <span class="comment">//output vecIAE to .txt file</span>
<a name="l01284"></a>01284       <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l01285"></a>01285       outputFileName = <span class="stringliteral">&quot;UnifMethod&quot;</span>;
<a name="l01286"></a>01286       outputFileName += stm2.str();
<a name="l01287"></a>01287       outputFileName += <span class="stringliteral">&quot;IAEandTrueDelta&quot;</span>;
<a name="l01288"></a>01288       outputFileName += stm1.str();
<a name="l01289"></a>01289       outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01290"></a>01290       os.open(outputFileName.c_str());
<a name="l01291"></a>01291       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecIAE.size(); i++){
<a name="l01292"></a>01292         os &lt;&lt; vecIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vecIAEFull[i] &lt;&lt; TrueDelta[i] &lt;&lt; endl;
<a name="l01293"></a>01293       }
<a name="l01294"></a>01294       os &lt;&lt; flush;
<a name="l01295"></a>01295       os.close();
<a name="l01296"></a>01296       std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l01297"></a>01297       <span class="comment">//=================end of output for vecIAE---------------------------      </span>
<a name="l01298"></a>01298    } <span class="comment">// end of try</span>
<a name="l01299"></a>01299     
<a name="l01300"></a>01300     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01301"></a>01301         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01302"></a>01302         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l01303"></a>01303                                     + oldmsg;
<a name="l01304"></a>01304         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01305"></a>01305         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01306"></a>01306     }
<a name="l01307"></a>01307     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01308"></a>01308         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01309"></a>01309         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority stage split.  Orginal error: &quot;</span> + oldmsg;
<a name="l01310"></a>01310         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01311"></a>01311         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01312"></a>01312     }
<a name="l01313"></a>01313     
<a name="l01314"></a>01314    <span class="keywordflow">return</span> (cancontinue);
<a name="l01315"></a>01315 }
<a name="l01316"></a>01316 
<a name="l01317"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8f39563ed08722fbe6be55474681abd5">01317</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l01318"></a>01318                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, 
<a name="l01319"></a>01319              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01320"></a>01320              <span class="keywordtype">double</span> minVolB, <span class="keywordtype">bool</span> stopCrit, 
<a name="l01321"></a>01321              <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist, 
<a name="l01322"></a>01322              <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l01323"></a>01323              <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l01324"></a>01324 {
<a name="l01325"></a>01325     gsl_rng * rgsl = NULL;
<a name="l01326"></a>01326     <span class="keywordtype">bool</span> cancontinue;
<a name="l01327"></a>01327 
<a name="l01328"></a>01328     <span class="keywordflow">try</span> {
<a name="l01329"></a>01329         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l01330"></a>01330         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l01331"></a>01331         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l01332"></a>01332         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l01333"></a>01333         gsl_rng_env_setup();
<a name="l01334"></a>01334         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l01335"></a>01335         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l01336"></a>01336 
<a name="l01337"></a>01337         <span class="comment">// call the function with a random number generator</span>
<a name="l01338"></a>01338         cancontinue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(compTest, he, logging, minChildPoints, 
<a name="l01339"></a>01339                         minVolB, rgsl, stopCrit, mixt, method, hist,
<a name="l01340"></a>01340                         maxLeafNodes, maxCheck, tol, deg, optHist);
<a name="l01341"></a>01341         gsl_rng_free (rgsl);
<a name="l01342"></a>01342     }
<a name="l01343"></a>01343 
<a name="l01344"></a>01344     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01345"></a>01345         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01346"></a>01346         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01347"></a>01347         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l01348"></a>01348                                      + oldmsg;
<a name="l01349"></a>01349         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01350"></a>01350         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01351"></a>01351     }
<a name="l01352"></a>01352     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01353"></a>01353         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01354"></a>01354         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01355"></a>01355         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l01356"></a>01356                                     + oldmsg;
<a name="l01357"></a>01357         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01358"></a>01358         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01359"></a>01359     }
<a name="l01360"></a>01360     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01361"></a>01361         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01362"></a>01362         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01363"></a>01363         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l01364"></a>01364                                     + oldmsg;
<a name="l01365"></a>01365         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01366"></a>01366         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01367"></a>01367     }
<a name="l01368"></a>01368     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01369"></a>01369         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01370"></a>01370         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01371"></a>01371         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l01372"></a>01372         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01373"></a>01373         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01374"></a>01374     }
<a name="l01375"></a>01375    
<a name="l01376"></a>01376    <span class="keywordflow">return</span> cancontinue;
<a name="l01377"></a>01377 }
<a name="l01378"></a>01378 
<a name="l01379"></a>01379 
<a name="l01380"></a>01380 <span class="comment">// hold out estimation based on Devroye and Lugosi 2006</span>
<a name="l01381"></a>01381 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l01382"></a>01382 <span class="comment">// by prioritising which node to split first</span>
<a name="l01383"></a>01383 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l01384"></a>01384 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l01385"></a>01385 <span class="comment">// or until a  splitting criteria is satisfied</span>
<a name="l01386"></a>01386 <span class="comment">// outputs to a log file if logging required</span>
<a name="l01387"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6bd25ba3a874dee64a2fd93984542f39">01387</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l01388"></a>01388                      <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he,  
<a name="l01389"></a>01389                      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01390"></a>01390               <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, 
<a name="l01391"></a>01391               <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l01392"></a>01392               <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l01393"></a>01393               <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l01394"></a>01394 {
<a name="l01395"></a>01395     <span class="comment">//cout &lt;&lt; &quot;calling prioritySplitAndEstimate:&quot; &lt;&lt; endl;</span>
<a name="l01396"></a>01396    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l01397"></a>01397    <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l01398"></a>01398    
<a name="l01399"></a>01399     <span class="comment">//boolean for validation data</span>
<a name="l01400"></a>01400     <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l01401"></a>01401     
<a name="l01402"></a>01402     <span class="comment">// for stopping criteria</span>
<a name="l01403"></a>01403     <span class="keywordtype">size_t</span> flagStop = 0;
<a name="l01404"></a>01404     <span class="keywordtype">int</span> currentSmallest = 0;
<a name="l01405"></a>01405     
<a name="l01406"></a>01406     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01407"></a>01407     
<a name="l01408"></a>01408     <span class="comment">//set up collator to keep the histograms as splits happen</span>
<a name="l01409"></a>01409     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l01410"></a>01410     
<a name="l01411"></a>01411    <span class="comment">//=======initializing containers======================================</span>
<a name="l01412"></a>01412   <span class="comment">//set up a list for the Yatracos set </span>
<a name="l01413"></a>01413   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;
<a name="l01414"></a>01414   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (row)</span>
<a name="l01415"></a>01415   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecRowYatSet;
<a name="l01416"></a>01416   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (col)</span>
<a name="l01417"></a>01417   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecColYatSet;    
<a name="l01418"></a>01418   <span class="comment">//set up a vector for maximum Delta_theta vectors</span>
<a name="l01419"></a>01419   vector&lt; vector&lt;double&gt; &gt; vecMaxDeltaVec;
<a name="l01420"></a>01420   <span class="comment">//initializing the vector - to allow the delta vector to be in </span>
<a name="l01421"></a>01421   <span class="comment">// right order  since the first histogram does not have a </span>
<a name="l01422"></a>01422   <span class="comment">// Yatracos set</span>
<a name="l01423"></a>01423   <span class="comment">//the first element in this vector will not be plotted since </span>
<a name="l01424"></a>01424   <span class="comment">// the first histogram is an empty set</span>
<a name="l01425"></a>01425   vector&lt;double&gt; theta0;
<a name="l01426"></a>01426   theta0.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l01427"></a>01427   <span class="comment">//the supremum of an empty set is -Infimum </span>
<a name="l01428"></a>01428   vecMaxDeltaVec.push_back(theta0);
<a name="l01429"></a>01429   <span class="comment">//set up a vector of the corresponding theta with the minimum </span>
<a name="l01430"></a>01430   <span class="comment">// distance estimates</span>
<a name="l01431"></a>01431   vector&lt; vector&lt;int&gt; &gt; vecMinDistTheta;
<a name="l01432"></a>01432   <span class="comment">// set up a vector for the infimum </span>
<a name="l01433"></a>01433   vector&lt;double&gt; vecInfDelta;
<a name="l01434"></a>01434   <span class="comment">// set up a vector for the integrated absolute error for each histogram</span>
<a name="l01435"></a>01435    vector&lt;real&gt; vecIAE; 
<a name="l01436"></a>01436    vector&lt;real&gt; vecIAEFull;
<a name="l01437"></a>01437    real minIAE = 1000.00;
<a name="l01438"></a>01438    
<a name="l01439"></a>01439    vector&lt;real&gt; TrueDelta;
<a name="l01440"></a>01440    TrueDelta.push_back(-1); 
<a name="l01441"></a>01441 
<a name="l01442"></a>01442   real trueDeltaCurrent = 0;
<a name="l01443"></a>01443   
<a name="l01444"></a>01444    <span class="comment">// to keep the histograms</span>
<a name="l01445"></a>01445    vector&lt;AdaptiveHistogramValidation&gt; tempHist;
<a name="l01446"></a>01446    <span class="comment">//==============end of initializing containers=============================//   </span>
<a name="l01447"></a>01447    <span class="comment">// check if the root box is empty</span>
<a name="l01448"></a>01448     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l01449"></a>01449             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l01450"></a>01450     }
<a name="l01451"></a>01451     <span class="keywordflow">try</span> {       
<a name="l01452"></a>01452         <span class="comment">// add the histogram before any split happens into the collator</span>
<a name="l01453"></a>01453         <span class="keywordtype">size_t</span> agg = 0;
<a name="l01454"></a>01454       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l01455"></a>01455       tempHist.push_back(*<span class="keyword">this</span>);
<a name="l01456"></a>01456       <span class="comment">// calculate the IAE </span>
<a name="l01457"></a>01457       real IAE = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 0));
<a name="l01458"></a>01458       <span class="comment">// push back into vecIAE </span>
<a name="l01459"></a>01459       vecIAE.push_back(IAE);
<a name="l01460"></a>01460       minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l01461"></a>01461       
<a name="l01462"></a>01462       <span class="comment">//get the IAE for the full data set</span>
<a name="l01463"></a>01463       real IAEF = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 1));
<a name="l01464"></a>01464       <span class="comment">// push back into vecIAE </span>
<a name="l01465"></a>01465       vecIAEFull.push_back(IAEF);
<a name="l01466"></a>01466 
<a name="l01467"></a>01467     <span class="comment">//============checks  for splittable nodes=============================//</span>
<a name="l01468"></a>01468         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l01469"></a>01469         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l01470"></a>01470         <span class="comment">//logging</span>
<a name="l01471"></a>01471         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01472"></a>01472         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01473"></a>01473         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01474"></a>01474             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l01475"></a>01475             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l01476"></a>01476             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l01477"></a>01477         }
<a name="l01478"></a>01478         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l01479"></a>01479         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l01480"></a>01480             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l01481"></a>01481             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l01482"></a>01482             volChecking = <span class="keyword">true</span>;
<a name="l01483"></a>01483         }
<a name="l01484"></a>01484       <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l01485"></a>01485       multiset&lt;SPSVnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l01486"></a>01486       <span class="keywordtype">int</span> i=0;
<a name="l01487"></a>01487       <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01488"></a>01488              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l01489"></a>01489             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(s);    
<a name="l01490"></a>01490             i++;
<a name="l01491"></a>01491       }
<a name="l01492"></a>01492       <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l01493"></a>01493       <span class="comment">// there are enough points in the whole node</span>
<a name="l01494"></a>01494       <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l01495"></a>01495       <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l01496"></a>01496         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01497"></a>01497             <span class="comment">// check to insert a copy of the rootVpaving pointer into the set</span>
<a name="l01498"></a>01498            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>, volChecking, minVol,
<a name="l01499"></a>01499                 minChildPoints)) {
<a name="l01500"></a>01500                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>);
<a name="l01501"></a>01501             }
<a name="l01502"></a>01502         }
<a name="l01503"></a>01503         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l01504"></a>01504             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01505"></a>01505             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01506"></a>01506             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l01507"></a>01507             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> sit;            
<a name="l01508"></a>01508             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l01509"></a>01509                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l01510"></a>01510                 minChildPoints)) {
<a name="l01511"></a>01511                pq.insert(*sit);
<a name="l01512"></a>01512                 }
<a name="l01513"></a>01513             }
<a name="l01514"></a>01514         }
<a name="l01515"></a>01515         cancontinue = (!pq.empty());
<a name="l01516"></a>01516         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l01517"></a>01517         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l01518"></a>01518             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l01519"></a>01519         }        
<a name="l01520"></a>01520         <span class="comment">//==================end of checks=====================================//</span>
<a name="l01521"></a>01521   
<a name="l01522"></a>01522         <span class="comment">//=========start priority queue====================================//</span>
<a name="l01523"></a>01523         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l01524"></a>01524         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l01525"></a>01525         <span class="comment">// that they are splittable when we take them out   </span>
<a name="l01526"></a>01526       <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {          
<a name="l01527"></a>01527             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l01528"></a>01528             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* chosenLargest;
<a name="l01529"></a>01529             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l01530"></a>01530             multiset&lt;SPSVnode*, MyCompare&gt;::iterator mit;
<a name="l01531"></a>01531             pair&lt;multiset&lt;SPSVnode*, MyCompare&gt;::iterator,
<a name="l01532"></a>01532                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l01533"></a>01533             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l01534"></a>01534             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l01535"></a>01535 
<a name="l01536"></a>01536             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l01537"></a>01537                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l01538"></a>01538                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l01539"></a>01539                 real sum = 0.0;
<a name="l01540"></a>01540                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l01541"></a>01541                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l01542"></a>01542                     sum += 1.0/(1.0*numberLargest);
<a name="l01543"></a>01543                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l01544"></a>01544                         <span class="keywordflow">break</span>;
<a name="l01545"></a>01545                     }
<a name="l01546"></a>01546                 }
<a name="l01547"></a>01547                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l01548"></a>01548                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l01549"></a>01549             }
<a name="l01550"></a>01550             <span class="keywordflow">else</span> {
<a name="l01551"></a>01551                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l01552"></a>01552                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l01553"></a>01553                 it--;
<a name="l01554"></a>01554                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l01555"></a>01555             }
<a name="l01556"></a>01556             <span class="comment">// split the biggest one and divide up its training and validation </span>
<a name="l01557"></a>01557             <span class="comment">// data</span>
<a name="l01558"></a>01558             <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(chosenLargest, boolVal);
<a name="l01559"></a>01559            
<a name="l01560"></a>01560             cout &lt;&lt; <span class="stringliteral">&quot;---------split &quot;</span> &lt;&lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1 &lt;&lt; endl;
<a name="l01561"></a>01561                            
<a name="l01562"></a>01562             <span class="comment">// add the new child names to the creation string</span>
<a name="l01563"></a>01563             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01564"></a>01564 
<a name="l01565"></a>01565         <span class="comment">// remove empty boxes AND</span>
<a name="l01566"></a>01566         <span class="comment">// but only put the children into the container if they can be</span>
<a name="l01567"></a>01567             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l01568"></a>01568             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l01569"></a>01569                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l01570"></a>01570                 <span class="comment">// one child of the child)</span>
<a name="l01571"></a>01571             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l01572"></a>01572             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l01573"></a>01573             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l01574"></a>01574                     volChecking, minVol, minChildPoints)) ) {
<a name="l01575"></a>01575                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l01576"></a>01576                 <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getLeftChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l01577"></a>01577                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01578"></a>01578             }
<a name="l01579"></a>01579 
<a name="l01580"></a>01580             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l01581"></a>01581             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l01582"></a>01582                     volChecking, minVol, minChildPoints)) ) {
<a name="l01583"></a>01583                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l01584"></a>01584                <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getRightChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l01585"></a>01585                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01586"></a>01586             }
<a name="l01587"></a>01587 
<a name="l01588"></a>01588             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01589"></a>01589                 <span class="comment">// To add current state of histogram to log file                   </span>
<a name="l01590"></a>01590                 i++;
<a name="l01591"></a>01591             }
<a name="l01592"></a>01592 
<a name="l01593"></a>01593           <span class="comment">//==========get IAE for this histogram======================//</span>
<a name="l01594"></a>01594          
<a name="l01595"></a>01595         <span class="comment">//cout &lt;&lt; &quot;get IAE for histogram &quot; &lt;&lt; coll.getNumberCollated() &lt;&lt; endl;</span>
<a name="l01596"></a>01596         real IAE = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 0));
<a name="l01597"></a>01597         minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l01598"></a>01598         vecIAE.push_back(IAE); 
<a name="l01599"></a>01599         
<a name="l01600"></a>01600         real IAEF = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 1));
<a name="l01601"></a>01601         vecIAEFull.push_back(IAEF); 
<a name="l01602"></a>01602 
<a name="l01603"></a>01603         <span class="comment">// keep this histogram in a container </span>
<a name="l01604"></a>01604         tempHist.push_back(*<span class="keyword">this</span>);
<a name="l01605"></a>01605         
<a name="l01606"></a>01606         <span class="comment">//cout &lt;&lt; &quot;add into collator&quot; &lt;&lt; endl;</span>
<a name="l01607"></a>01607         <span class="comment">// add current histogram to collation</span>
<a name="l01608"></a>01608         <span class="keywordtype">size_t</span> agg = 0;
<a name="l01609"></a>01609         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l01610"></a>01610           
<a name="l01611"></a>01611         <span class="comment">//cout &lt;&lt; &quot;get the split node&quot; &lt;&lt; endl;</span>
<a name="l01612"></a>01612         <span class="comment">// first we need a pointer to the corresponding CollatorSPVnode </span>
<a name="l01613"></a>01613         <span class="comment">// of the SPSVnode* chosenLargest     </span>
<a name="l01614"></a>01614         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * splitCollNode;
<a name="l01615"></a>01615         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(splitCollNode, chosenLargest);
<a name="l01616"></a>01616         <span class="comment">//cout &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; splitCollNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01617"></a>01617         
<a name="l01618"></a>01618         <span class="comment">//cout &lt;&lt; &quot;get the yat class&quot; &lt;&lt; endl;</span>
<a name="l01619"></a>01619         <span class="comment">// get the Yatracos class for this collation</span>
<a name="l01620"></a>01620         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(splitCollNode, vecRowYatSet,
<a name="l01621"></a>01621                             vecColYatSet, listYatSet);
<a name="l01622"></a>01622 
<a name="l01623"></a>01623         <span class="comment">//cout &lt;&lt; &quot;get delta theta&quot; &lt;&lt; endl;</span>
<a name="l01624"></a>01624         <span class="comment">// get delta_theta for each theta</span>
<a name="l01625"></a>01625         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(listYatSet, vecRowYatSet, vecColYatSet, 
<a name="l01626"></a>01626                         vecMaxDeltaVec);
<a name="l01627"></a>01627 
<a name="l01628"></a>01628         <span class="comment">// get the true delta</span>
<a name="l01629"></a>01629         real trueDelta = 0.0;
<a name="l01630"></a>01630         vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;   
<a name="l01631"></a>01631         <span class="comment">//cout &lt;&lt; &quot;Current Yatracos set has &quot; &lt;&lt; (*tempList).size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l01632"></a>01632         <span class="keywordflow">for</span> (listIt = (vecRowYatSet).begin(); listIt &lt; vecRowYatSet.end(); listIt++) {
<a name="l01633"></a>01633           <span class="keywordflow">if</span> ( !((*listIt).empty()) ) {
<a name="l01634"></a>01634             interval trueDeltaI = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(mixt, tol, deg, (*listIt));
<a name="l01635"></a>01635             real trueDeltaR = mid(trueDeltaI);
<a name="l01636"></a>01636             trueDeltaR = abs(trueDeltaR);
<a name="l01637"></a>01637             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l01638"></a>01638             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01639"></a>01639             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l01640"></a>01640             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01641"></a>01641             trueDeltaCurrent = trueDelta;
<a name="l01642"></a>01642             TrueDelta.push_back(trueDelta);
<a name="l01643"></a>01643           }
<a name="l01644"></a>01644         }
<a name="l01645"></a>01645         
<a name="l01646"></a>01646         <span class="keywordflow">for</span> (listIt = (vecColYatSet).begin(); listIt &lt; vecColYatSet.end(); listIt++) {
<a name="l01647"></a>01647           <span class="keywordflow">if</span> ( !((*listIt).empty()) ) {
<a name="l01648"></a>01648             interval trueDeltaI = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(mixt, tol, deg, (*listIt));
<a name="l01649"></a>01649             real trueDeltaR = mid(trueDeltaI);
<a name="l01650"></a>01650             trueDeltaR = abs(trueDeltaR);
<a name="l01651"></a>01651             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l01652"></a>01652             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01653"></a>01653             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l01654"></a>01654             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l01655"></a>01655             trueDeltaCurrent = trueDelta;
<a name="l01656"></a>01656             TrueDelta.push_back(trueDelta);
<a name="l01657"></a>01657           }
<a name="l01658"></a>01658         }
<a name="l01659"></a>01659         
<a name="l01660"></a>01660         
<a name="l01661"></a>01661         <span class="keywordflow">if</span> ( vecRowYatSet.empty() &amp;&amp; vecColYatSet.empty() ) 
<a name="l01662"></a>01662         { trueDelta = -1; TrueDelta.push_back(trueDelta); } 
<a name="l01663"></a>01663         
<a name="l01664"></a>01664       <span class="comment">//check theorem 10.1</span>
<a name="l01665"></a>01665       <span class="keywordflow">if</span> ( trueDelta &gt;= 0) {  assert(IAE &lt;= (3*minIAE + 4*trueDelta)); }
<a name="l01666"></a>01666 
<a name="l01667"></a>01667         <span class="comment">//stopping criteria</span>
<a name="l01668"></a>01668         <span class="keywordflow">if</span> (stopCrit == <span class="keyword">true</span>) {
<a name="l01669"></a>01669           <span class="comment">//cout &lt;&lt; &quot;checking stopping criteria: &quot; &lt;&lt; endl;</span>
<a name="l01670"></a>01670           <span class="keywordtype">bool</span> toStop = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(maxCheck, vecMaxDeltaVec);
<a name="l01671"></a>01671           <span class="keywordflow">if</span> (toStop == <span class="keyword">true</span>) {
<a name="l01672"></a>01672             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met.&quot;</span> &lt;&lt; endl;
<a name="l01673"></a>01673             <span class="keywordflow">break</span>;
<a name="l01674"></a>01674           } 
<a name="l01675"></a>01675         }
<a name="l01676"></a>01676 
<a name="l01677"></a>01677         <span class="comment">//==========checks to see if need to split again=========//</span>
<a name="l01678"></a>01678             <span class="comment">//checking if there are any more &#39;largest&#39; nodes in the priority queue</span>
<a name="l01679"></a>01679             bigEnough = (!pq.empty());
<a name="l01680"></a>01680             <span class="keywordflow">if</span> (!bigEnough){    
<a name="l01681"></a>01681           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l01682"></a>01682                     &lt;&lt; std::endl;
<a name="l01683"></a>01683             }
<a name="l01684"></a>01684         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l01685"></a>01685         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l01686"></a>01686         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l01687"></a>01687         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l01688"></a>01688         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l01689"></a>01689           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l01690"></a>01690                           &lt;&lt; std::endl;
<a name="l01691"></a>01691         }
<a name="l01692"></a>01692       } <span class="comment">// end of while loop</span>
<a name="l01693"></a>01693       <span class="comment">//cout &lt;&lt; &quot;===========End of splitting=============&quot; &lt;&lt; endl;</span>
<a name="l01694"></a>01694         
<a name="l01695"></a>01695       <span class="comment">//do the merging here based on vecMinDistTheta</span>
<a name="l01696"></a>01696          
<a name="l01697"></a>01697       <span class="comment">//================Outputs to .txt files=================== </span>
<a name="l01698"></a>01698       ofstream os;         <span class="comment">// ofstream object</span>
<a name="l01699"></a>01699       os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l01700"></a>01700       os.precision(5);
<a name="l01701"></a>01701 
<a name="l01702"></a>01702        <span class="comment">// get the minimum delta to get the MDE histogram</span>
<a name="l01703"></a>01703       vector&lt; vector&lt;double&gt; &gt;::iterator it1; 
<a name="l01704"></a>01704       vector&lt;double&gt;::iterator it2;
<a name="l01705"></a>01705       <span class="keywordtype">int</span> Theta=0;
<a name="l01706"></a>01706       <span class="comment">//cout &lt;&lt; &quot;MaxDelta&quot; &lt;&lt; endl;</span>
<a name="l01707"></a>01707       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> = vecMaxDeltaVec.size(); 
<a name="l01708"></a>01708       <span class="keywordtype">double</span> minDelta = 1000;
<a name="l01709"></a>01709       <span class="keywordtype">int</span> minTheta = 0;
<a name="l01710"></a>01710       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>; i++){
<a name="l01711"></a>01711         <span class="comment">//cout &lt;&lt; &quot;Theta: &quot; &lt;&lt; Theta &lt;&lt; &quot;\t&quot; &lt;&lt; vecMaxDeltaVec[F-1][i] &lt;&lt; endl;</span>
<a name="l01712"></a>01712         <span class="keywordflow">if</span> ( vecMaxDeltaVec[F-1][i] &lt; minDelta ) { 
<a name="l01713"></a>01713           minDelta = vecMaxDeltaVec[F-1][i]; 
<a name="l01714"></a>01714           minTheta = Theta; 
<a name="l01715"></a>01715         } 
<a name="l01716"></a>01716         Theta++;
<a name="l01717"></a>01717       }
<a name="l01718"></a>01718 
<a name="l01719"></a>01719       cout &lt;&lt; <span class="stringliteral">&quot;MDE at &quot;</span> &lt;&lt; minTheta &lt;&lt; <span class="stringliteral">&quot; with IAE &quot;</span> &lt;&lt; vecIAE[minTheta] &lt;&lt; endl; 
<a name="l01720"></a>01720          optHist = tempHist[minTheta];
<a name="l01721"></a>01721 
<a name="l01722"></a>01722       <span class="comment">// output vecDeltaMaxVec into .txt </span>
<a name="l01723"></a>01723       ostringstream stm1, stm2;
<a name="l01724"></a>01724       stm1 &lt;&lt; hist;
<a name="l01725"></a>01725       stm2 &lt;&lt; method;
<a name="l01726"></a>01726       <span class="keywordtype">string</span> fileNameDelta = <span class="stringliteral">&quot;FinMixMethod&quot;</span>;
<a name="l01727"></a>01727       fileNameDelta += stm2.str();
<a name="l01728"></a>01728       fileNameDelta += <span class="stringliteral">&quot;DeltaMax&quot;</span>;
<a name="l01729"></a>01729       fileNameDelta += stm1.str();
<a name="l01730"></a>01730       fileNameDelta += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l01731"></a>01731       os.open(fileNameDelta.c_str());
<a name="l01732"></a>01732       <span class="keywordflow">for</span> (it1 = vecMaxDeltaVec.begin(); it1 &lt; vecMaxDeltaVec.end(); it1++){ 
<a name="l01733"></a>01733         <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){
<a name="l01734"></a>01734           os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l01735"></a>01735         }
<a name="l01736"></a>01736         os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l01737"></a>01737       }          
<a name="l01738"></a>01738       os &lt;&lt; flush;
<a name="l01739"></a>01739       os.close();
<a name="l01740"></a>01740       std::cout &lt;&lt; <span class="stringliteral">&quot;DeltaMax for each theta output to &quot;</span> &lt;&lt; fileNameDelta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l01741"></a>01741       <span class="comment">//----------------end of output for vecDeltaMaxVec-------------</span>
<a name="l01742"></a>01742  
<a name="l01743"></a>01743          <span class="comment">//output vecIAE to .txt file</span>
<a name="l01744"></a>01744       <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l01745"></a>01745       outputFileName = <span class="stringliteral">&quot;FinMixMethod&quot;</span>;
<a name="l01746"></a>01746       outputFileName += stm2.str();
<a name="l01747"></a>01747       outputFileName += <span class="stringliteral">&quot;IAEandTrueDelta&quot;</span>;
<a name="l01748"></a>01748       outputFileName += stm1.str();
<a name="l01749"></a>01749       outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01750"></a>01750       os.open(outputFileName.c_str());
<a name="l01751"></a>01751       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecIAE.size(); i++){
<a name="l01752"></a>01752         os &lt;&lt; vecIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vecIAEFull[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; TrueDelta[i] &lt;&lt; endl;
<a name="l01753"></a>01753       }
<a name="l01754"></a>01754       os &lt;&lt; flush;
<a name="l01755"></a>01755       os.close();
<a name="l01756"></a>01756       std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l01757"></a>01757       <span class="comment">//=================end of output for vecIAE---------------------------      </span>
<a name="l01758"></a>01758    } <span class="comment">// end of try</span>
<a name="l01759"></a>01759     
<a name="l01760"></a>01760     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01761"></a>01761         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01762"></a>01762         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l01763"></a>01763                                     + oldmsg;
<a name="l01764"></a>01764         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01765"></a>01765         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01766"></a>01766     }
<a name="l01767"></a>01767     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01768"></a>01768         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01769"></a>01769         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority stage split.  Orginal error: &quot;</span> + oldmsg;
<a name="l01770"></a>01770         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01771"></a>01771         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01772"></a>01772     }
<a name="l01773"></a>01773     
<a name="l01774"></a>01774    <span class="keywordflow">return</span> (cancontinue);
<a name="l01775"></a>01775 }
<a name="l01776"></a>01776 
<a name="l01777"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae20e1507aad418b0d5aee31882b738ea">01777</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l01778"></a>01778                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, 
<a name="l01779"></a>01779              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01780"></a>01780              <span class="keywordtype">double</span> minVolB, <span class="keywordtype">bool</span> stopCrit, 
<a name="l01781"></a>01781              <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist, 
<a name="l01782"></a>01782              <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l01783"></a>01783              <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l01784"></a>01784 {
<a name="l01785"></a>01785     gsl_rng * rgsl = NULL;
<a name="l01786"></a>01786     <span class="keywordtype">bool</span> cancontinue;
<a name="l01787"></a>01787 
<a name="l01788"></a>01788     <span class="keywordflow">try</span> {
<a name="l01789"></a>01789         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l01790"></a>01790         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l01791"></a>01791         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l01792"></a>01792         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l01793"></a>01793         gsl_rng_env_setup();
<a name="l01794"></a>01794         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l01795"></a>01795         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l01796"></a>01796 
<a name="l01797"></a>01797         <span class="comment">// call the function with a random number generator</span>
<a name="l01798"></a>01798         cancontinue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(compTest, he, logging, minChildPoints, 
<a name="l01799"></a>01799                         minVolB, rgsl, stopCrit, nodeEst, method, hist,
<a name="l01800"></a>01800                         maxLeafNodes, maxCheck, optHist);
<a name="l01801"></a>01801         gsl_rng_free (rgsl);
<a name="l01802"></a>01802     }
<a name="l01803"></a>01803 
<a name="l01804"></a>01804     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01805"></a>01805         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01806"></a>01806         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01807"></a>01807         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l01808"></a>01808                                      + oldmsg;
<a name="l01809"></a>01809         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01810"></a>01810         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01811"></a>01811     }
<a name="l01812"></a>01812     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01813"></a>01813         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01814"></a>01814         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01815"></a>01815         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l01816"></a>01816                                     + oldmsg;
<a name="l01817"></a>01817         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01818"></a>01818         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01819"></a>01819     }
<a name="l01820"></a>01820     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01821"></a>01821         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01822"></a>01822         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01823"></a>01823         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l01824"></a>01824                                     + oldmsg;
<a name="l01825"></a>01825         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01826"></a>01826         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01827"></a>01827     }
<a name="l01828"></a>01828     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01829"></a>01829         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01830"></a>01830         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01831"></a>01831         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l01832"></a>01832         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01833"></a>01833         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01834"></a>01834     }
<a name="l01835"></a>01835    
<a name="l01836"></a>01836    <span class="keywordflow">return</span> cancontinue;
<a name="l01837"></a>01837 }
<a name="l01838"></a>01838 
<a name="l01839"></a>01839 
<a name="l01840"></a>01840 <span class="comment">// hold out estimation based on Devroye and Lugosi 2006</span>
<a name="l01841"></a>01841 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l01842"></a>01842 <span class="comment">// by prioritising which node to split first</span>
<a name="l01843"></a>01843 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l01844"></a>01844 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l01845"></a>01845 <span class="comment">// or until a  splitting criteria is satisfied</span>
<a name="l01846"></a>01846 <span class="comment">// outputs to a log file if logging required</span>
<a name="l01847"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ad3f8cf7cf11ce1214abd2559bea54393">01847</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l01848"></a>01848                      <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he,  
<a name="l01849"></a>01849                      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01850"></a>01850               <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, 
<a name="l01851"></a>01851               <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEst, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l01852"></a>01852               <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l01853"></a>01853               <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l01854"></a>01854 {
<a name="l01855"></a>01855     <span class="comment">//cout &lt;&lt; &quot;calling prioritySplitAndEstimate:&quot; &lt;&lt; endl;</span>
<a name="l01856"></a>01856    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l01857"></a>01857    <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l01858"></a>01858    
<a name="l01859"></a>01859     <span class="comment">//boolean for validation data</span>
<a name="l01860"></a>01860     <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l01861"></a>01861     
<a name="l01862"></a>01862     <span class="comment">// for stopping criteria</span>
<a name="l01863"></a>01863     <span class="keywordtype">size_t</span> flagStop = 0;
<a name="l01864"></a>01864     <span class="keywordtype">int</span> currentSmallest = 0;
<a name="l01865"></a>01865     
<a name="l01866"></a>01866     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01867"></a>01867     
<a name="l01868"></a>01868     <span class="comment">//set up collator to keep the histograms as splits happen</span>
<a name="l01869"></a>01869     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l01870"></a>01870     
<a name="l01871"></a>01871    <span class="comment">//=======initializing containers======================================</span>
<a name="l01872"></a>01872   <span class="comment">//set up a list for the Yatracos set </span>
<a name="l01873"></a>01873   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;
<a name="l01874"></a>01874   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (row)</span>
<a name="l01875"></a>01875   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecRowYatSet;
<a name="l01876"></a>01876   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (col)</span>
<a name="l01877"></a>01877   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecColYatSet;    
<a name="l01878"></a>01878   <span class="comment">//set up a vector for maximum Delta_theta vectors</span>
<a name="l01879"></a>01879   vector&lt; vector&lt;double&gt; &gt; vecMaxDeltaVec;
<a name="l01880"></a>01880   <span class="comment">//initializing the vector - to allow the delta vector to be in </span>
<a name="l01881"></a>01881   <span class="comment">// right order  since the first histogram does not have a </span>
<a name="l01882"></a>01882   <span class="comment">// Yatracos set</span>
<a name="l01883"></a>01883   <span class="comment">//the first element in this vector will not be plotted since </span>
<a name="l01884"></a>01884   <span class="comment">// the first histogram is an empty set</span>
<a name="l01885"></a>01885   vector&lt;double&gt; theta0;
<a name="l01886"></a>01886   theta0.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l01887"></a>01887   <span class="comment">//the supremum of an empty set is -Infimum </span>
<a name="l01888"></a>01888   vecMaxDeltaVec.push_back(theta0);
<a name="l01889"></a>01889   <span class="comment">//set up a vector of the corresponding theta with the minimum </span>
<a name="l01890"></a>01890   <span class="comment">// distance estimates</span>
<a name="l01891"></a>01891   vector&lt; vector&lt;int&gt; &gt; vecMinDistTheta;
<a name="l01892"></a>01892   <span class="comment">// set up a vector for the infimum </span>
<a name="l01893"></a>01893   vector&lt;double&gt; vecInfDelta;
<a name="l01894"></a>01894   <span class="comment">// set up a vector for the integrated absolute error for each histogram</span>
<a name="l01895"></a>01895    vector&lt;real&gt; vecIAE; 
<a name="l01896"></a>01896    vector&lt;real&gt; vecIAEFull;
<a name="l01897"></a>01897    real minIAE = 1000.00;
<a name="l01898"></a>01898    
<a name="l01899"></a>01899    vector&lt;real&gt; TrueDelta;
<a name="l01900"></a>01900    TrueDelta.push_back(-1); 
<a name="l01901"></a>01901 
<a name="l01902"></a>01902   real trueDeltaCurrent = 0;
<a name="l01903"></a>01903   
<a name="l01904"></a>01904    <span class="comment">// to keep the histograms</span>
<a name="l01905"></a>01905    vector&lt;AdaptiveHistogramValidation&gt; tempHist;
<a name="l01906"></a>01906    <span class="comment">//==============end of initializing containers=============================//   </span>
<a name="l01907"></a>01907    <span class="comment">// check if the root box is empty</span>
<a name="l01908"></a>01908     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l01909"></a>01909             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l01910"></a>01910     }
<a name="l01911"></a>01911     <span class="keywordflow">try</span> {       
<a name="l01912"></a>01912         <span class="comment">// add the histogram before any split happens into the collator</span>
<a name="l01913"></a>01913         <span class="keywordtype">size_t</span> agg = 0;
<a name="l01914"></a>01914       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l01915"></a>01915       tempHist.push_back(*<span class="keyword">this</span>);
<a name="l01916"></a>01916       <span class="comment">// calculate the IAE </span>
<a name="l01917"></a>01917       real IAE = 0.0;
<a name="l01918"></a>01918       <span class="comment">//real IAE = getMappedFunctionIAE(nodeEst, 0);</span>
<a name="l01919"></a>01919       <span class="comment">// push back into vecIAE </span>
<a name="l01920"></a>01920       vecIAE.push_back(IAE);
<a name="l01921"></a>01921       minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l01922"></a>01922       
<a name="l01923"></a>01923       <span class="comment">//get the IAE for the full data set</span>
<a name="l01924"></a>01924       <span class="comment">//real IAEF =getMappedFunctionIAE(nodeEst, 0);</span>
<a name="l01925"></a>01925       <span class="comment">// push back into vecIAE </span>
<a name="l01926"></a>01926       real IAEF = 0.0;
<a name="l01927"></a>01927       vecIAEFull.push_back(IAEF);
<a name="l01928"></a>01928 
<a name="l01929"></a>01929     <span class="comment">//============checks  for splittable nodes=============================//</span>
<a name="l01930"></a>01930         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l01931"></a>01931         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l01932"></a>01932         <span class="comment">//logging</span>
<a name="l01933"></a>01933         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01934"></a>01934         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01935"></a>01935         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01936"></a>01936             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l01937"></a>01937             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l01938"></a>01938             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l01939"></a>01939         }
<a name="l01940"></a>01940         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l01941"></a>01941         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l01942"></a>01942             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l01943"></a>01943             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l01944"></a>01944             volChecking = <span class="keyword">true</span>;
<a name="l01945"></a>01945         }
<a name="l01946"></a>01946       <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l01947"></a>01947       multiset&lt;SPSVnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l01948"></a>01948       <span class="keywordtype">int</span> i=0;
<a name="l01949"></a>01949       <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01950"></a>01950              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l01951"></a>01951             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(s);    
<a name="l01952"></a>01952             i++;
<a name="l01953"></a>01953       }
<a name="l01954"></a>01954       <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l01955"></a>01955       <span class="comment">// there are enough points in the whole node</span>
<a name="l01956"></a>01956       <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l01957"></a>01957       <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l01958"></a>01958         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01959"></a>01959             <span class="comment">// check to insert a copy of the rootVpaving pointer into the set</span>
<a name="l01960"></a>01960            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>, volChecking, minVol,
<a name="l01961"></a>01961                 minChildPoints)) {
<a name="l01962"></a>01962                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>);
<a name="l01963"></a>01963             }
<a name="l01964"></a>01964         }
<a name="l01965"></a>01965         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l01966"></a>01966             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l01967"></a>01967             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01968"></a>01968             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l01969"></a>01969             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> sit;            
<a name="l01970"></a>01970             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l01971"></a>01971                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l01972"></a>01972                 minChildPoints)) {
<a name="l01973"></a>01973                pq.insert(*sit);
<a name="l01974"></a>01974                 }
<a name="l01975"></a>01975             }
<a name="l01976"></a>01976         }
<a name="l01977"></a>01977         cancontinue = (!pq.empty());
<a name="l01978"></a>01978         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l01979"></a>01979         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l01980"></a>01980             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l01981"></a>01981         }        
<a name="l01982"></a>01982         <span class="comment">//==================end of checks=====================================//</span>
<a name="l01983"></a>01983   
<a name="l01984"></a>01984         <span class="comment">//=========start priority queue====================================//</span>
<a name="l01985"></a>01985         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l01986"></a>01986         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l01987"></a>01987         <span class="comment">// that they are splittable when we take them out   </span>
<a name="l01988"></a>01988       <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {          
<a name="l01989"></a>01989             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l01990"></a>01990             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* chosenLargest;
<a name="l01991"></a>01991             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l01992"></a>01992             multiset&lt;SPSVnode*, MyCompare&gt;::iterator mit;
<a name="l01993"></a>01993             pair&lt;multiset&lt;SPSVnode*, MyCompare&gt;::iterator,
<a name="l01994"></a>01994                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l01995"></a>01995             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l01996"></a>01996             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l01997"></a>01997 
<a name="l01998"></a>01998             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l01999"></a>01999                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l02000"></a>02000                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l02001"></a>02001                 real sum = 0.0;
<a name="l02002"></a>02002                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l02003"></a>02003                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l02004"></a>02004                     sum += 1.0/(1.0*numberLargest);
<a name="l02005"></a>02005                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l02006"></a>02006                         <span class="keywordflow">break</span>;
<a name="l02007"></a>02007                     }
<a name="l02008"></a>02008                 }
<a name="l02009"></a>02009                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l02010"></a>02010                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l02011"></a>02011             }
<a name="l02012"></a>02012             <span class="keywordflow">else</span> {
<a name="l02013"></a>02013                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l02014"></a>02014                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l02015"></a>02015                 it--;
<a name="l02016"></a>02016                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l02017"></a>02017             }
<a name="l02018"></a>02018             <span class="comment">// split the biggest one and divide up its training and validation </span>
<a name="l02019"></a>02019             <span class="comment">// data</span>
<a name="l02020"></a>02020             <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(chosenLargest, boolVal);
<a name="l02021"></a>02021            
<a name="l02022"></a>02022             cout &lt;&lt; <span class="stringliteral">&quot;---------split &quot;</span> &lt;&lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1 &lt;&lt; endl;
<a name="l02023"></a>02023                            
<a name="l02024"></a>02024             <span class="comment">// add the new child names to the creation string</span>
<a name="l02025"></a>02025             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l02026"></a>02026 
<a name="l02027"></a>02027         <span class="comment">// remove empty boxes AND</span>
<a name="l02028"></a>02028         <span class="comment">// but only put the children into the container if they can be</span>
<a name="l02029"></a>02029             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l02030"></a>02030             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l02031"></a>02031                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l02032"></a>02032                 <span class="comment">// one child of the child)</span>
<a name="l02033"></a>02033             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l02034"></a>02034             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l02035"></a>02035             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l02036"></a>02036                     volChecking, minVol, minChildPoints)) ) {
<a name="l02037"></a>02037                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l02038"></a>02038                 <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getLeftChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l02039"></a>02039                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02040"></a>02040             }
<a name="l02041"></a>02041 
<a name="l02042"></a>02042             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l02043"></a>02043             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l02044"></a>02044                     volChecking, minVol, minChildPoints)) ) {
<a name="l02045"></a>02045                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l02046"></a>02046                <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getRightChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l02047"></a>02047                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02048"></a>02048             }
<a name="l02049"></a>02049 
<a name="l02050"></a>02050             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02051"></a>02051                 <span class="comment">// To add current state of histogram to log file                   </span>
<a name="l02052"></a>02052                 i++;
<a name="l02053"></a>02053             }
<a name="l02054"></a>02054 
<a name="l02055"></a>02055           <span class="comment">//==========get IAE for this histogram======================//</span>
<a name="l02056"></a>02056          
<a name="l02057"></a>02057         <span class="comment">//cout &lt;&lt; &quot;get IAE for histogram: \t&quot;;</span>
<a name="l02058"></a>02058         real IAE = 0.0;
<a name="l02059"></a>02059         <span class="comment">//real IAE = getMappedFunctionIAE(nodeEst, 0);</span>
<a name="l02060"></a>02060         minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l02061"></a>02061         vecIAE.push_back(IAE); 
<a name="l02062"></a>02062         <span class="comment">//cout &lt;&lt; IAE &lt;&lt; endl;</span>
<a name="l02063"></a>02063         
<a name="l02064"></a>02064         real IAEF = 0.0;
<a name="l02065"></a>02065         <span class="comment">//real IAEF = getMappedFunctionIAE(nodeEst, 1);</span>
<a name="l02066"></a>02066         vecIAEFull.push_back(IAEF); 
<a name="l02067"></a>02067 
<a name="l02068"></a>02068         <span class="comment">// keep this histogram in a container </span>
<a name="l02069"></a>02069         tempHist.push_back(*<span class="keyword">this</span>);
<a name="l02070"></a>02070         
<a name="l02071"></a>02071         <span class="comment">//cout &lt;&lt; &quot;add into collator&quot; &lt;&lt; endl;</span>
<a name="l02072"></a>02072         <span class="comment">// add current histogram to collation</span>
<a name="l02073"></a>02073         <span class="keywordtype">size_t</span> agg = 0;
<a name="l02074"></a>02074         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l02075"></a>02075           
<a name="l02076"></a>02076         <span class="comment">//cout &lt;&lt; &quot;get the split node&quot; &lt;&lt; endl;</span>
<a name="l02077"></a>02077         <span class="comment">// first we need a pointer to the corresponding CollatorSPVnode </span>
<a name="l02078"></a>02078         <span class="comment">// of the SPSVnode* chosenLargest     </span>
<a name="l02079"></a>02079         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * splitCollNode;
<a name="l02080"></a>02080         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(splitCollNode, chosenLargest);
<a name="l02081"></a>02081         <span class="comment">//cout &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; splitCollNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l02082"></a>02082         
<a name="l02083"></a>02083         <span class="comment">//cout &lt;&lt; &quot;get the yat class&quot; &lt;&lt; endl;</span>
<a name="l02084"></a>02084         <span class="comment">// get the Yatracos class for this collation</span>
<a name="l02085"></a>02085         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(splitCollNode, vecRowYatSet,
<a name="l02086"></a>02086                             vecColYatSet, listYatSet);
<a name="l02087"></a>02087 
<a name="l02088"></a>02088         <span class="comment">//cout &lt;&lt; &quot;get delta theta&quot; &lt;&lt; endl;</span>
<a name="l02089"></a>02089         <span class="comment">// get delta_theta for each theta</span>
<a name="l02090"></a>02090         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(listYatSet, vecRowYatSet, vecColYatSet, 
<a name="l02091"></a>02091                         vecMaxDeltaVec);
<a name="l02092"></a>02092 
<a name="l02093"></a>02093         <span class="comment">// get the true delta</span>
<a name="l02094"></a>02094         real trueDelta = 0.0;
<a name="l02095"></a>02095         vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;   
<a name="l02096"></a>02096         <span class="comment">//cout &lt;&lt; &quot;Current Yatracos set has &quot; &lt;&lt; (*tempList).size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l02097"></a>02097         <span class="keywordflow">for</span> (listIt = (vecRowYatSet).begin(); listIt &lt; vecRowYatSet.end(); listIt++) {
<a name="l02098"></a>02098           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l02099"></a>02099             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a49d507fa0b75a7ad720204f0f581af6d">getMappedFunctionTrueDelta</a>(nodeEst, *listIt);
<a name="l02100"></a>02100             trueDeltaR = abs(trueDeltaR);
<a name="l02101"></a>02101             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l02102"></a>02102             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02103"></a>02103             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l02104"></a>02104             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02105"></a>02105             trueDeltaCurrent = trueDelta;
<a name="l02106"></a>02106             TrueDelta.push_back(trueDelta);
<a name="l02107"></a>02107           }
<a name="l02108"></a>02108         }
<a name="l02109"></a>02109         <span class="keywordflow">for</span> (listIt = (vecColYatSet).begin(); listIt &lt; vecColYatSet.end(); listIt++) {
<a name="l02110"></a>02110           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l02111"></a>02111             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a49d507fa0b75a7ad720204f0f581af6d">getMappedFunctionTrueDelta</a>(nodeEst, *listIt);
<a name="l02112"></a>02112             trueDeltaR = abs(trueDeltaR);
<a name="l02113"></a>02113             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l02114"></a>02114             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02115"></a>02115             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l02116"></a>02116             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02117"></a>02117             trueDeltaCurrent = trueDelta;
<a name="l02118"></a>02118             TrueDelta.push_back(trueDelta);
<a name="l02119"></a>02119           }
<a name="l02120"></a>02120         }
<a name="l02121"></a>02121 
<a name="l02122"></a>02122         <span class="keywordflow">if</span> ( vecRowYatSet.empty() &amp;&amp; vecColYatSet.empty() ) 
<a name="l02123"></a>02123         { trueDelta = -1; TrueDelta.push_back(trueDelta); } 
<a name="l02124"></a>02124         
<a name="l02125"></a>02125         <span class="comment">//check theorem 10.1</span>
<a name="l02126"></a>02126         <span class="comment">//cout &lt;&lt; &quot;checking theorem 10.1&quot; &lt;&lt; endl;</span>
<a name="l02127"></a>02127         <span class="comment">//cout &lt;&lt; IAE &lt;&lt; &quot;\t&quot; &lt;&lt; minIAE &lt;&lt; &quot;\t&quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02128"></a>02128         <span class="keywordflow">if</span> ( trueDelta &gt;= 0 ) { assert(IAE &lt;= (3*minIAE + 4*trueDelta)); }
<a name="l02129"></a>02129 
<a name="l02130"></a>02130         <span class="comment">//stopping criteria</span>
<a name="l02131"></a>02131         <span class="keywordflow">if</span> (stopCrit == <span class="keyword">true</span>) {
<a name="l02132"></a>02132           <span class="comment">//cout &lt;&lt; &quot;checking stopping criteria: &quot; &lt;&lt; endl;</span>
<a name="l02133"></a>02133           <span class="keywordtype">bool</span> toStop = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(maxCheck, vecMaxDeltaVec);
<a name="l02134"></a>02134           <span class="keywordflow">if</span> (toStop == <span class="keyword">true</span>) {
<a name="l02135"></a>02135             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met.&quot;</span> &lt;&lt; endl;
<a name="l02136"></a>02136             <span class="keywordflow">break</span>;
<a name="l02137"></a>02137           } 
<a name="l02138"></a>02138         }
<a name="l02139"></a>02139 
<a name="l02140"></a>02140         <span class="comment">//==========checks to see if need to split again=========//</span>
<a name="l02141"></a>02141             <span class="comment">//checking if there are any more &#39;largest&#39; nodes in the priority queue</span>
<a name="l02142"></a>02142             bigEnough = (!pq.empty());
<a name="l02143"></a>02143             <span class="keywordflow">if</span> (!bigEnough){    
<a name="l02144"></a>02144           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l02145"></a>02145                     &lt;&lt; std::endl;
<a name="l02146"></a>02146             }
<a name="l02147"></a>02147         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l02148"></a>02148         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l02149"></a>02149         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l02150"></a>02150         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02151"></a>02151         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l02152"></a>02152           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l02153"></a>02153                           &lt;&lt; std::endl;
<a name="l02154"></a>02154         }
<a name="l02155"></a>02155       } <span class="comment">// end of while loop</span>
<a name="l02156"></a>02156       <span class="comment">//cout &lt;&lt; &quot;===========End of splitting=============&quot; &lt;&lt; endl;</span>
<a name="l02157"></a>02157         
<a name="l02158"></a>02158       <span class="comment">//do the merging here based on vecMinDistTheta</span>
<a name="l02159"></a>02159          
<a name="l02160"></a>02160       <span class="comment">//================Outputs to .txt files=================== </span>
<a name="l02161"></a>02161       
<a name="l02162"></a>02162       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;CollFromMDEPQ.txt&quot;</span>);
<a name="l02163"></a>02163       
<a name="l02164"></a>02164       ofstream os;         <span class="comment">// ofstream object</span>
<a name="l02165"></a>02165       os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l02166"></a>02166       os.precision(5);
<a name="l02167"></a>02167 
<a name="l02168"></a>02168        <span class="comment">// get the minimum delta to get the MDE histogram</span>
<a name="l02169"></a>02169       vector&lt; vector&lt;double&gt; &gt;::iterator it1; 
<a name="l02170"></a>02170       vector&lt;double&gt;::iterator it2;
<a name="l02171"></a>02171       <span class="keywordtype">int</span> Theta=0;
<a name="l02172"></a>02172       <span class="comment">//cout &lt;&lt; &quot;MaxDelta&quot; &lt;&lt; endl;</span>
<a name="l02173"></a>02173       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> = vecMaxDeltaVec.size(); 
<a name="l02174"></a>02174       <span class="keywordtype">double</span> minDelta = 1000;
<a name="l02175"></a>02175       <span class="keywordtype">int</span> minTheta = 0;
<a name="l02176"></a>02176       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>; i++){
<a name="l02177"></a>02177         <span class="comment">//cout &lt;&lt; &quot;Theta: &quot; &lt;&lt; Theta &lt;&lt; &quot;\t&quot; &lt;&lt; vecMaxDeltaVec[F-1][i] &lt;&lt; endl;</span>
<a name="l02178"></a>02178         <span class="keywordflow">if</span> ( vecMaxDeltaVec[F-1][i] &lt; minDelta ) { 
<a name="l02179"></a>02179           minDelta = vecMaxDeltaVec[F-1][i]; 
<a name="l02180"></a>02180           minTheta = Theta; 
<a name="l02181"></a>02181         } 
<a name="l02182"></a>02182         Theta++;
<a name="l02183"></a>02183       }
<a name="l02184"></a>02184 
<a name="l02185"></a>02185       cout &lt;&lt; <span class="stringliteral">&quot;MDE at &quot;</span> &lt;&lt; minTheta &lt;&lt; <span class="stringliteral">&quot; with IAE &quot;</span> &lt;&lt; vecIAE[minTheta] &lt;&lt; endl; 
<a name="l02186"></a>02186          optHist = tempHist[minTheta];
<a name="l02187"></a>02187 
<a name="l02188"></a>02188       <span class="comment">// output vecDeltaMaxVec into .txt </span>
<a name="l02189"></a>02189       ostringstream stm1, stm2;
<a name="l02190"></a>02190       stm1 &lt;&lt; hist;
<a name="l02191"></a>02191       stm2 &lt;&lt; method;
<a name="l02192"></a>02192       <span class="keywordtype">string</span> fileNameDelta = <span class="stringliteral">&quot;MappedFunctionMethod&quot;</span>;
<a name="l02193"></a>02193       fileNameDelta += stm2.str();
<a name="l02194"></a>02194       fileNameDelta += <span class="stringliteral">&quot;DeltaMax&quot;</span>;
<a name="l02195"></a>02195       fileNameDelta += stm1.str();
<a name="l02196"></a>02196       fileNameDelta += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l02197"></a>02197       os.open(fileNameDelta.c_str());
<a name="l02198"></a>02198       <span class="keywordflow">for</span> (it1 = vecMaxDeltaVec.begin(); it1 &lt; vecMaxDeltaVec.end(); it1++){ 
<a name="l02199"></a>02199         <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){
<a name="l02200"></a>02200           os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l02201"></a>02201         }
<a name="l02202"></a>02202         os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l02203"></a>02203       }          
<a name="l02204"></a>02204       os &lt;&lt; flush;
<a name="l02205"></a>02205       os.close();
<a name="l02206"></a>02206       std::cout &lt;&lt; <span class="stringliteral">&quot;DeltaMax for each theta output to &quot;</span> &lt;&lt; fileNameDelta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l02207"></a>02207       <span class="comment">//----------------end of output for vecDeltaMaxVec-------------</span>
<a name="l02208"></a>02208  
<a name="l02209"></a>02209          <span class="comment">//output vecIAE to .txt file</span>
<a name="l02210"></a>02210       <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l02211"></a>02211       outputFileName = <span class="stringliteral">&quot;MappedFunctionMethod&quot;</span>;
<a name="l02212"></a>02212       outputFileName += stm2.str();
<a name="l02213"></a>02213       outputFileName += <span class="stringliteral">&quot;IAEandTrueDelta&quot;</span>;
<a name="l02214"></a>02214       outputFileName += stm1.str();
<a name="l02215"></a>02215       outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l02216"></a>02216       os.open(outputFileName.c_str());
<a name="l02217"></a>02217       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecIAE.size(); i++){
<a name="l02218"></a>02218         os &lt;&lt; vecIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vecIAEFull[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; TrueDelta[i] &lt;&lt; endl;
<a name="l02219"></a>02219       }
<a name="l02220"></a>02220       os &lt;&lt; flush;
<a name="l02221"></a>02221       os.close();
<a name="l02222"></a>02222       std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l02223"></a>02223       <span class="comment">//=================end of output for vecIAE---------------------------      </span>
<a name="l02224"></a>02224    } <span class="comment">// end of try</span>
<a name="l02225"></a>02225     
<a name="l02226"></a>02226     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02227"></a>02227         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02228"></a>02228         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l02229"></a>02229                                     + oldmsg;
<a name="l02230"></a>02230         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02231"></a>02231         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02232"></a>02232     }
<a name="l02233"></a>02233     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02234"></a>02234         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02235"></a>02235         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority stage split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02236"></a>02236         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02237"></a>02237         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02238"></a>02238     }
<a name="l02239"></a>02239     
<a name="l02240"></a>02240    <span class="keywordflow">return</span> (cancontinue);
<a name="l02241"></a>02241 }
<a name="l02242"></a>02242 
<a name="l02243"></a>02243 
<a name="l02244"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">02244</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l02245"></a>02245                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, 
<a name="l02246"></a>02246              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l02247"></a>02247              <span class="keywordtype">double</span> minVolB, <span class="keywordtype">bool</span> stopCrit, 
<a name="l02248"></a>02248             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, std::vector&lt;int&gt; holesLoc,
<a name="l02249"></a>02249              <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist, 
<a name="l02250"></a>02250              <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck,
<a name="l02251"></a>02251              <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l02252"></a>02252 {
<a name="l02253"></a>02253     gsl_rng * rgsl = NULL;
<a name="l02254"></a>02254     <span class="keywordtype">bool</span> cancontinue;
<a name="l02255"></a>02255 
<a name="l02256"></a>02256     <span class="keywordflow">try</span> {
<a name="l02257"></a>02257         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l02258"></a>02258         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02259"></a>02259         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02260"></a>02260         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02261"></a>02261         gsl_rng_env_setup();
<a name="l02262"></a>02262         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02263"></a>02263         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02264"></a>02264 
<a name="l02265"></a>02265         <span class="comment">// call the function with a random number generator</span>
<a name="l02266"></a>02266         cancontinue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">prioritySplitAndEstimateWithSwitch</a>(compTest, he, logging, minChildPoints, 
<a name="l02267"></a>02267                         minVolB, rgsl, stopCrit, myPart, weight, holesLoc,
<a name="l02268"></a>02268                         method, hist,
<a name="l02269"></a>02269                         maxLeafNodes, maxCheck, optHist);
<a name="l02270"></a>02270         gsl_rng_free (rgsl);
<a name="l02271"></a>02271     }
<a name="l02272"></a>02272 
<a name="l02273"></a>02273     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02274"></a>02274         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02275"></a>02275         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02276"></a>02276         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l02277"></a>02277                                      + oldmsg;
<a name="l02278"></a>02278         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02279"></a>02279         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02280"></a>02280     }
<a name="l02281"></a>02281     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02282"></a>02282         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02283"></a>02283         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02284"></a>02284         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l02285"></a>02285                                     + oldmsg;
<a name="l02286"></a>02286         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02287"></a>02287         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02288"></a>02288     }
<a name="l02289"></a>02289     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02290"></a>02290         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02291"></a>02291         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02292"></a>02292         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l02293"></a>02293                                     + oldmsg;
<a name="l02294"></a>02294         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02295"></a>02295         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02296"></a>02296     }
<a name="l02297"></a>02297     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02298"></a>02298         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02299"></a>02299         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02300"></a>02300         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02301"></a>02301         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02302"></a>02302         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02303"></a>02303     }
<a name="l02304"></a>02304    
<a name="l02305"></a>02305    <span class="keywordflow">return</span> cancontinue;
<a name="l02306"></a>02306 }
<a name="l02307"></a>02307 
<a name="l02308"></a>02308 
<a name="l02309"></a>02309 <span class="comment">// hold out estimation based on Devroye and Lugosi 2006</span>
<a name="l02310"></a>02310 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02311"></a>02311 <span class="comment">// by prioritising which node to split first</span>
<a name="l02312"></a>02312 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02313"></a>02313 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02314"></a>02314 <span class="comment">// or until a  splitting criteria is satisfied</span>
<a name="l02315"></a>02315 <span class="comment">// outputs to a log file if logging required</span>
<a name="l02316"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae2684877f0996eea6f6593f1be2ab38a">02316</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aabc3d1996ec2e9e1e227f6012c0c8f06">AdaptiveHistogramValidation::prioritySplitAndEstimateWithSwitch</a>(
<a name="l02317"></a>02317                      <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he,  
<a name="l02318"></a>02318                      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l02319"></a>02319               <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, 
<a name="l02320"></a>02320               <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l02321"></a>02321               std::vector&lt;int&gt; holesLoc, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l02322"></a>02322               <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, 
<a name="l02323"></a>02323               <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l02324"></a>02324 {
<a name="l02325"></a>02325     <span class="comment">//cout &lt;&lt; &quot;calling prioritySplitAndEstimate:&quot; &lt;&lt; endl;</span>
<a name="l02326"></a>02326    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02327"></a>02327    <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l02328"></a>02328    
<a name="l02329"></a>02329     <span class="comment">//boolean for validation data</span>
<a name="l02330"></a>02330     <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l02331"></a>02331     
<a name="l02332"></a>02332     <span class="comment">// for stopping criteria</span>
<a name="l02333"></a>02333     <span class="keywordtype">size_t</span> flagStop = 0;
<a name="l02334"></a>02334     <span class="keywordtype">int</span> currentSmallest = 0;
<a name="l02335"></a>02335     
<a name="l02336"></a>02336     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02337"></a>02337     
<a name="l02338"></a>02338     <span class="comment">//set up collator to keep the histograms as splits happen</span>
<a name="l02339"></a>02339     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l02340"></a>02340     
<a name="l02341"></a>02341    <span class="comment">//=======initializing containers======================================</span>
<a name="l02342"></a>02342   <span class="comment">//set up a list for the Yatracos set </span>
<a name="l02343"></a>02343   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;
<a name="l02344"></a>02344   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (row)</span>
<a name="l02345"></a>02345   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecRowYatSet;
<a name="l02346"></a>02346   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (col)</span>
<a name="l02347"></a>02347   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecColYatSet;    
<a name="l02348"></a>02348   <span class="comment">//set up a vector for maximum Delta_theta vectors</span>
<a name="l02349"></a>02349   vector&lt; vector&lt;double&gt; &gt; vecMaxDeltaVec;
<a name="l02350"></a>02350   <span class="comment">//initializing the vector - to allow the delta vector to be in </span>
<a name="l02351"></a>02351   <span class="comment">// right order  since the first histogram does not have a </span>
<a name="l02352"></a>02352   <span class="comment">// Yatracos set</span>
<a name="l02353"></a>02353   <span class="comment">//the first element in this vector will not be plotted since </span>
<a name="l02354"></a>02354   <span class="comment">// the first histogram is an empty set</span>
<a name="l02355"></a>02355   vector&lt;double&gt; theta0;
<a name="l02356"></a>02356   theta0.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l02357"></a>02357   <span class="comment">//the supremum of an empty set is -Infimum </span>
<a name="l02358"></a>02358   vecMaxDeltaVec.push_back(theta0);
<a name="l02359"></a>02359   <span class="comment">//set up a vector of the corresponding theta with the minimum </span>
<a name="l02360"></a>02360   <span class="comment">// distance estimates</span>
<a name="l02361"></a>02361   vector&lt; vector&lt;int&gt; &gt; vecMinDistTheta;
<a name="l02362"></a>02362   <span class="comment">// set up a vector for the infimum </span>
<a name="l02363"></a>02363   vector&lt;double&gt; vecInfDelta;
<a name="l02364"></a>02364   <span class="comment">// set up a vector for the integrated absolute error for each histogram</span>
<a name="l02365"></a>02365    vector&lt;real&gt; vecIAE; 
<a name="l02366"></a>02366    vector&lt;real&gt; vecIAEFull;
<a name="l02367"></a>02367    real minIAE = 1000.00;
<a name="l02368"></a>02368    
<a name="l02369"></a>02369    vector&lt;real&gt; TrueDelta;
<a name="l02370"></a>02370    TrueDelta.push_back(-1); 
<a name="l02371"></a>02371 
<a name="l02372"></a>02372   real trueDeltaCurrent = 0;
<a name="l02373"></a>02373   
<a name="l02374"></a>02374    <span class="comment">// to keep the histograms</span>
<a name="l02375"></a>02375    vector&lt;AdaptiveHistogramValidation&gt; tempHist;
<a name="l02376"></a>02376    <span class="comment">//==============end of initializing containers=============================//   </span>
<a name="l02377"></a>02377    <span class="comment">// check if the root box is empty</span>
<a name="l02378"></a>02378     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l02379"></a>02379             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l02380"></a>02380     }
<a name="l02381"></a>02381     <span class="keywordflow">try</span> {       
<a name="l02382"></a>02382         <span class="comment">// add the histogram before any split happens into the collator</span>
<a name="l02383"></a>02383         <span class="keywordtype">size_t</span> agg = 0;
<a name="l02384"></a>02384       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l02385"></a>02385       tempHist.push_back(*<span class="keyword">this</span>);
<a name="l02386"></a>02386       <span class="comment">// calculate the IAE </span>
<a name="l02387"></a>02387       real IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 0);
<a name="l02388"></a>02388       <span class="comment">// push back into vecIAE </span>
<a name="l02389"></a>02389       vecIAE.push_back(IAE);
<a name="l02390"></a>02390       minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l02391"></a>02391       
<a name="l02392"></a>02392       <span class="comment">//get the IAE for the full data set</span>
<a name="l02393"></a>02393       real IAEF = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 1);
<a name="l02394"></a>02394       <span class="comment">// push back into vecIAE </span>
<a name="l02395"></a>02395       vecIAEFull.push_back(IAEF);
<a name="l02396"></a>02396 
<a name="l02397"></a>02397     <span class="comment">//============checks  for splittable nodes=============================//</span>
<a name="l02398"></a>02398         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l02399"></a>02399         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l02400"></a>02400         <span class="comment">//logging</span>
<a name="l02401"></a>02401         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02402"></a>02402         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02403"></a>02403         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02404"></a>02404             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l02405"></a>02405             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l02406"></a>02406             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l02407"></a>02407         }
<a name="l02408"></a>02408         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l02409"></a>02409         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l02410"></a>02410             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l02411"></a>02411             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l02412"></a>02412             volChecking = <span class="keyword">true</span>;
<a name="l02413"></a>02413         }
<a name="l02414"></a>02414       <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l02415"></a>02415       multiset&lt;SPSVnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l02416"></a>02416       <span class="keywordtype">int</span> i=0;
<a name="l02417"></a>02417       <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02418"></a>02418              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l02419"></a>02419             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(s);    
<a name="l02420"></a>02420             i++;
<a name="l02421"></a>02421       }
<a name="l02422"></a>02422       <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l02423"></a>02423       <span class="comment">// there are enough points in the whole node</span>
<a name="l02424"></a>02424       <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l02425"></a>02425       <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l02426"></a>02426         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02427"></a>02427             <span class="comment">// check to insert a copy of the rootVpaving pointer into the set</span>
<a name="l02428"></a>02428            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>, volChecking, minVol,
<a name="l02429"></a>02429                 minChildPoints)) {
<a name="l02430"></a>02430                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>);
<a name="l02431"></a>02431             }
<a name="l02432"></a>02432         }
<a name="l02433"></a>02433         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l02434"></a>02434             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l02435"></a>02435             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02436"></a>02436             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l02437"></a>02437             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> sit;            
<a name="l02438"></a>02438             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l02439"></a>02439                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l02440"></a>02440                 minChildPoints)) {
<a name="l02441"></a>02441                pq.insert(*sit);
<a name="l02442"></a>02442                 }
<a name="l02443"></a>02443             }
<a name="l02444"></a>02444         }
<a name="l02445"></a>02445         cancontinue = (!pq.empty());
<a name="l02446"></a>02446         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l02447"></a>02447         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02448"></a>02448             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l02449"></a>02449         }        
<a name="l02450"></a>02450         <span class="comment">//==================end of checks=====================================//</span>
<a name="l02451"></a>02451   
<a name="l02452"></a>02452         <span class="comment">//=========start priority queue====================================//</span>
<a name="l02453"></a>02453         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l02454"></a>02454         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l02455"></a>02455         <span class="comment">// that they are splittable when we take them out   </span>
<a name="l02456"></a>02456       <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {          
<a name="l02457"></a>02457             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l02458"></a>02458             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* chosenLargest;
<a name="l02459"></a>02459             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l02460"></a>02460             multiset&lt;SPSVnode*, MyCompare&gt;::iterator mit;
<a name="l02461"></a>02461             pair&lt;multiset&lt;SPSVnode*, MyCompare&gt;::iterator,
<a name="l02462"></a>02462                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l02463"></a>02463             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l02464"></a>02464             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l02465"></a>02465 
<a name="l02466"></a>02466             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l02467"></a>02467                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l02468"></a>02468                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l02469"></a>02469                 real sum = 0.0;
<a name="l02470"></a>02470                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l02471"></a>02471                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l02472"></a>02472                     sum += 1.0/(1.0*numberLargest);
<a name="l02473"></a>02473                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l02474"></a>02474                         <span class="keywordflow">break</span>;
<a name="l02475"></a>02475                     }
<a name="l02476"></a>02476                 }
<a name="l02477"></a>02477                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l02478"></a>02478                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l02479"></a>02479             }
<a name="l02480"></a>02480             <span class="keywordflow">else</span> {
<a name="l02481"></a>02481                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l02482"></a>02482                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l02483"></a>02483                 it--;
<a name="l02484"></a>02484                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l02485"></a>02485             }
<a name="l02486"></a>02486             <span class="comment">// split the biggest one and divide up its training and validation </span>
<a name="l02487"></a>02487             <span class="comment">// data</span>
<a name="l02488"></a>02488             <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(chosenLargest, boolVal);
<a name="l02489"></a>02489            
<a name="l02490"></a>02490             cout &lt;&lt; <span class="stringliteral">&quot;---------split &quot;</span> &lt;&lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1 &lt;&lt; endl;
<a name="l02491"></a>02491                            
<a name="l02492"></a>02492             <span class="comment">// add the new child names to the creation string</span>
<a name="l02493"></a>02493             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l02494"></a>02494 
<a name="l02495"></a>02495         <span class="comment">// remove empty boxes AND</span>
<a name="l02496"></a>02496         <span class="comment">// but only put the children into the container if they can be</span>
<a name="l02497"></a>02497             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l02498"></a>02498             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l02499"></a>02499                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l02500"></a>02500                 <span class="comment">// one child of the child)</span>
<a name="l02501"></a>02501             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l02502"></a>02502             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l02503"></a>02503             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l02504"></a>02504                     volChecking, minVol, minChildPoints)) ) {
<a name="l02505"></a>02505                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l02506"></a>02506                 <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getLeftChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l02507"></a>02507                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02508"></a>02508             }
<a name="l02509"></a>02509 
<a name="l02510"></a>02510             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; 0) 
<a name="l02511"></a>02511             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l02512"></a>02512                     volChecking, minVol, minChildPoints)) ) {
<a name="l02513"></a>02513                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l02514"></a>02514                <span class="comment">//cout &lt;&lt; (chosenLargest-&gt;getRightChild())-&gt;getCounter()  &lt;&lt; endl;</span>
<a name="l02515"></a>02515                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02516"></a>02516             }
<a name="l02517"></a>02517 
<a name="l02518"></a>02518             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02519"></a>02519                 <span class="comment">// To add current state of histogram to log file                   </span>
<a name="l02520"></a>02520                 i++;
<a name="l02521"></a>02521             }
<a name="l02522"></a>02522 
<a name="l02523"></a>02523           <span class="comment">//==========get IAE for this histogram======================//</span>
<a name="l02524"></a>02524          
<a name="l02525"></a>02525         <span class="comment">//cout &lt;&lt; &quot;get IAE for histogram &quot; &lt;&lt; coll.getNumberCollated() &lt;&lt; endl;</span>
<a name="l02526"></a>02526         real IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 0);
<a name="l02527"></a>02527         minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l02528"></a>02528         vecIAE.push_back(IAE); 
<a name="l02529"></a>02529         
<a name="l02530"></a>02530         real IAEF = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">getUnifIAE</a>(myPart, weight, holesLoc, 1);
<a name="l02531"></a>02531         vecIAEFull.push_back(IAEF); 
<a name="l02532"></a>02532 
<a name="l02533"></a>02533         <span class="comment">// keep this histogram in a container </span>
<a name="l02534"></a>02534         tempHist.push_back(*<span class="keyword">this</span>);
<a name="l02535"></a>02535         
<a name="l02536"></a>02536         <span class="comment">//cout &lt;&lt; &quot;add into collator&quot; &lt;&lt; endl;</span>
<a name="l02537"></a>02537         <span class="comment">// add current histogram to collation</span>
<a name="l02538"></a>02538         <span class="keywordtype">size_t</span> agg = 0;
<a name="l02539"></a>02539         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l02540"></a>02540           
<a name="l02541"></a>02541         <span class="comment">//cout &lt;&lt; &quot;get the split node&quot; &lt;&lt; endl;</span>
<a name="l02542"></a>02542         <span class="comment">// first we need a pointer to the corresponding CollatorSPVnode </span>
<a name="l02543"></a>02543         <span class="comment">// of the SPSVnode* chosenLargest     </span>
<a name="l02544"></a>02544         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * splitCollNode;
<a name="l02545"></a>02545         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(splitCollNode, chosenLargest);
<a name="l02546"></a>02546         <span class="comment">//cout &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; splitCollNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l02547"></a>02547         
<a name="l02548"></a>02548         <span class="comment">//cout &lt;&lt; &quot;get the yat class&quot; &lt;&lt; endl;</span>
<a name="l02549"></a>02549         <span class="comment">// get the Yatracos class for this collation</span>
<a name="l02550"></a>02550         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(splitCollNode, vecRowYatSet,
<a name="l02551"></a>02551                             vecColYatSet, listYatSet);
<a name="l02552"></a>02552 
<a name="l02553"></a>02553         <span class="comment">//cout &lt;&lt; &quot;get delta theta&quot; &lt;&lt; endl;</span>
<a name="l02554"></a>02554         <span class="comment">// get delta_theta for each theta</span>
<a name="l02555"></a>02555         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(listYatSet, vecRowYatSet, vecColYatSet, 
<a name="l02556"></a>02556                         vecMaxDeltaVec);
<a name="l02557"></a>02557 
<a name="l02558"></a>02558         <span class="comment">// get the true delta</span>
<a name="l02559"></a>02559         real trueDelta = 0.0;
<a name="l02560"></a>02560         vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;   
<a name="l02561"></a>02561         <span class="comment">//cout &lt;&lt; &quot;Current Yatracos set has &quot; &lt;&lt; (*tempList).size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l02562"></a>02562         <span class="keywordflow">for</span> (listIt = (vecRowYatSet).begin(); listIt &lt; vecRowYatSet.end(); listIt++) {
<a name="l02563"></a>02563           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l02564"></a>02564             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(myPart, weight, holesLoc, (*listIt));
<a name="l02565"></a>02565             trueDeltaR = abs(trueDeltaR);
<a name="l02566"></a>02566             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l02567"></a>02567             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02568"></a>02568             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l02569"></a>02569             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02570"></a>02570             trueDeltaCurrent = trueDelta;
<a name="l02571"></a>02571             TrueDelta.push_back(trueDelta);
<a name="l02572"></a>02572           }
<a name="l02573"></a>02573         }
<a name="l02574"></a>02574 
<a name="l02575"></a>02575         <span class="keywordflow">for</span> (listIt = (vecColYatSet).begin(); listIt &lt; vecColYatSet.end(); listIt++) {
<a name="l02576"></a>02576           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l02577"></a>02577             real trueDeltaR = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(myPart, weight, holesLoc, (*listIt));
<a name="l02578"></a>02578             trueDeltaR = abs(trueDeltaR);
<a name="l02579"></a>02579             trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l02580"></a>02580             <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02581"></a>02581             trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l02582"></a>02582             <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l02583"></a>02583             trueDeltaCurrent = trueDelta;
<a name="l02584"></a>02584             TrueDelta.push_back(trueDelta);
<a name="l02585"></a>02585           }
<a name="l02586"></a>02586         }
<a name="l02587"></a>02587         
<a name="l02588"></a>02588         <span class="keywordflow">if</span> ( vecRowYatSet.empty() &amp;&amp; vecColYatSet.empty() ) 
<a name="l02589"></a>02589         { trueDelta = -1; TrueDelta.push_back(trueDelta); } 
<a name="l02590"></a>02590         
<a name="l02591"></a>02591         <span class="comment">//check theorem 10.1</span>
<a name="l02592"></a>02592         <span class="comment">//if ( trueDelta &gt;= 0 ) { assert(IAE &lt;= (3*minIAE + 4*trueDelta)); }</span>
<a name="l02593"></a>02593 
<a name="l02594"></a>02594         <span class="comment">//stopping criteria</span>
<a name="l02595"></a>02595         <span class="keywordflow">if</span> (stopCrit == <span class="keyword">true</span>) {
<a name="l02596"></a>02596           <span class="comment">//cout &lt;&lt; &quot;checking stopping criteria: &quot; &lt;&lt; endl;</span>
<a name="l02597"></a>02597           <span class="keywordtype">bool</span> toStop = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(maxCheck, vecMaxDeltaVec);
<a name="l02598"></a>02598           <span class="keywordflow">if</span> (toStop == <span class="keyword">true</span>) {
<a name="l02599"></a>02599             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met.&quot;</span> &lt;&lt; endl;
<a name="l02600"></a>02600             <span class="keywordflow">break</span>;
<a name="l02601"></a>02601           } 
<a name="l02602"></a>02602         }
<a name="l02603"></a>02603         
<a name="l02604"></a>02604 
<a name="l02605"></a>02605 
<a name="l02606"></a>02606         <span class="comment">//==========checks to see if need to split again=========//</span>
<a name="l02607"></a>02607             <span class="comment">//checking if there are any more &#39;largest&#39; nodes in the priority queue</span>
<a name="l02608"></a>02608             bigEnough = (!pq.empty());
<a name="l02609"></a>02609             <span class="keywordflow">if</span> (!bigEnough){    
<a name="l02610"></a>02610           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l02611"></a>02611                     &lt;&lt; std::endl;
<a name="l02612"></a>02612             }
<a name="l02613"></a>02613         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l02614"></a>02614         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l02615"></a>02615         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l02616"></a>02616         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02617"></a>02617         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l02618"></a>02618           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l02619"></a>02619                           &lt;&lt; std::endl;
<a name="l02620"></a>02620         }
<a name="l02621"></a>02621       } <span class="comment">// end of while loop</span>
<a name="l02622"></a>02622       <span class="comment">//cout &lt;&lt; &quot;===========End of splitting=============&quot; &lt;&lt; endl;</span>
<a name="l02623"></a>02623         
<a name="l02624"></a>02624       <span class="comment">//do the merging here based on vecMinDistTheta</span>
<a name="l02625"></a>02625          
<a name="l02626"></a>02626       <span class="comment">//================Outputs to .txt files=================== </span>
<a name="l02627"></a>02627       ofstream os;         <span class="comment">// ofstream object</span>
<a name="l02628"></a>02628       os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l02629"></a>02629       os.precision(5);
<a name="l02630"></a>02630 
<a name="l02631"></a>02631        <span class="comment">// get the minimum delta to get the MDE histogram</span>
<a name="l02632"></a>02632       vector&lt; vector&lt;double&gt; &gt;::iterator it1; 
<a name="l02633"></a>02633       vector&lt;double&gt;::iterator it2;
<a name="l02634"></a>02634       <span class="keywordtype">int</span> Theta=0;
<a name="l02635"></a>02635       <span class="comment">//cout &lt;&lt; &quot;MaxDelta&quot; &lt;&lt; endl;</span>
<a name="l02636"></a>02636       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> = vecMaxDeltaVec.size(); 
<a name="l02637"></a>02637       <span class="keywordtype">double</span> minDelta = 1000;
<a name="l02638"></a>02638       <span class="keywordtype">int</span> minTheta = 0;
<a name="l02639"></a>02639       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>; i++){
<a name="l02640"></a>02640         <span class="comment">//cout &lt;&lt; &quot;Theta: &quot; &lt;&lt; Theta &lt;&lt; &quot;\t&quot; &lt;&lt; vecMaxDeltaVec[F-1][i] &lt;&lt; endl;</span>
<a name="l02641"></a>02641         <span class="keywordflow">if</span> ( vecMaxDeltaVec[F-1][i] &lt; minDelta ) { 
<a name="l02642"></a>02642           minDelta = vecMaxDeltaVec[F-1][i]; 
<a name="l02643"></a>02643           minTheta = Theta; 
<a name="l02644"></a>02644         } 
<a name="l02645"></a>02645         Theta++;
<a name="l02646"></a>02646       }
<a name="l02647"></a>02647 
<a name="l02648"></a>02648       cout &lt;&lt; <span class="stringliteral">&quot;MDE at &quot;</span> &lt;&lt; minTheta &lt;&lt; <span class="stringliteral">&quot; with IAE &quot;</span> &lt;&lt; vecIAE[minTheta] &lt;&lt; endl; 
<a name="l02649"></a>02649          optHist = tempHist[minTheta];
<a name="l02650"></a>02650 
<a name="l02651"></a>02651       <span class="comment">// output vecDeltaMaxVec into .txt </span>
<a name="l02652"></a>02652       ostringstream stm1, stm2;
<a name="l02653"></a>02653       stm1 &lt;&lt; hist;
<a name="l02654"></a>02654       stm2 &lt;&lt; method;
<a name="l02655"></a>02655       <span class="keywordtype">string</span> fileNameDelta = <span class="stringliteral">&quot;UnifMethod&quot;</span>;
<a name="l02656"></a>02656       fileNameDelta += stm2.str();
<a name="l02657"></a>02657       fileNameDelta += <span class="stringliteral">&quot;DeltaMax&quot;</span>;
<a name="l02658"></a>02658       fileNameDelta += stm1.str();
<a name="l02659"></a>02659       fileNameDelta += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l02660"></a>02660       os.open(fileNameDelta.c_str());
<a name="l02661"></a>02661       <span class="keywordflow">for</span> (it1 = vecMaxDeltaVec.begin(); it1 &lt; vecMaxDeltaVec.end(); it1++){ 
<a name="l02662"></a>02662         <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){
<a name="l02663"></a>02663           os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l02664"></a>02664         }
<a name="l02665"></a>02665         os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l02666"></a>02666       }          
<a name="l02667"></a>02667       os &lt;&lt; flush;
<a name="l02668"></a>02668       os.close();
<a name="l02669"></a>02669       std::cout &lt;&lt; <span class="stringliteral">&quot;DeltaMax for each theta output to &quot;</span> &lt;&lt; fileNameDelta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l02670"></a>02670       <span class="comment">//----------------end of output for vecDeltaMaxVec-------------</span>
<a name="l02671"></a>02671  
<a name="l02672"></a>02672          <span class="comment">//output vecIAE to .txt file</span>
<a name="l02673"></a>02673       <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l02674"></a>02674       outputFileName = <span class="stringliteral">&quot;UnifMethod&quot;</span>;
<a name="l02675"></a>02675       outputFileName += stm2.str();
<a name="l02676"></a>02676       outputFileName += <span class="stringliteral">&quot;IAEandTrueDelta&quot;</span>;
<a name="l02677"></a>02677       outputFileName += stm1.str();
<a name="l02678"></a>02678       outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l02679"></a>02679       os.open(outputFileName.c_str());
<a name="l02680"></a>02680       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecIAE.size(); i++){
<a name="l02681"></a>02681         os &lt;&lt; vecIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vecIAEFull[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; TrueDelta[i] &lt;&lt; endl;
<a name="l02682"></a>02682       }
<a name="l02683"></a>02683       os &lt;&lt; flush;
<a name="l02684"></a>02684       os.close();
<a name="l02685"></a>02685       std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l02686"></a>02686       <span class="comment">//=================end of output for vecIAE---------------------------      </span>
<a name="l02687"></a>02687    } <span class="comment">// end of try</span>
<a name="l02688"></a>02688     
<a name="l02689"></a>02689     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02690"></a>02690         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02691"></a>02691         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l02692"></a>02692                                     + oldmsg;
<a name="l02693"></a>02693         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02694"></a>02694         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02695"></a>02695     }
<a name="l02696"></a>02696     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02697"></a>02697         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02698"></a>02698         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority stage split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02699"></a>02699         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02700"></a>02700         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02701"></a>02701     }
<a name="l02702"></a>02702     
<a name="l02703"></a>02703    <span class="keywordflow">return</span> (cancontinue);
<a name="l02704"></a>02704 }
<a name="l02705"></a>02705 
<a name="l02706"></a>02706 <span class="comment">// prioritySplitAndEstimate for uniform mixtures</span>
<a name="l02707"></a>02707 <span class="comment">// method for data splitting and hold out estimation</span>
<a name="l02708"></a>02708 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02709"></a>02709 <span class="comment">// by prioritising which node to split first</span>
<a name="l02710"></a>02710 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02711"></a>02711 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02712"></a>02712 <span class="comment">// or until a stopping criteria is fulfilled</span>
<a name="l02713"></a>02713 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l02714"></a>02714 <span class="comment">// makes its own random number generator</span>
<a name="l02715"></a>02715 <span class="comment">/*</span>
<a name="l02716"></a>02716 <span class="comment">bool AdaptiveHistogramValidation::prioritySplitAndEstimate(</span>
<a name="l02717"></a>02717 <span class="comment">                   const NodeCompObjVal&amp; compTest, const HistEvalObjVal&amp; he, </span>
<a name="l02718"></a>02718 <span class="comment">             LOGGING_LEVEL logging, size_t minChildPoints, </span>
<a name="l02719"></a>02719 <span class="comment">             double minVolB, bool stopCrit, </span>
<a name="l02720"></a>02720 <span class="comment">             RealMappedSPnode&amp; nodeEst, int method, size_t hist, </span>
<a name="l02721"></a>02721 <span class="comment">             size_t maxLeafNodes, int maxCheck,</span>
<a name="l02722"></a>02722 <span class="comment">             AdaptiveHistogramValidation&amp; optHist)</span>
<a name="l02723"></a>02723 <span class="comment">{</span>
<a name="l02724"></a>02724 <span class="comment">    gsl_rng * rgsl = NULL;</span>
<a name="l02725"></a>02725 <span class="comment">    bool cancontinue;</span>
<a name="l02726"></a>02726 <span class="comment"></span>
<a name="l02727"></a>02727 <span class="comment">    try {</span>
<a name="l02728"></a>02728 <span class="comment">        // set up a random number generator for uniform rvs</span>
<a name="l02729"></a>02729 <span class="comment">        const gsl_rng_type * tgsl;</span>
<a name="l02730"></a>02730 <span class="comment">        // set the library variables *gsl_rng_default and</span>
<a name="l02731"></a>02731 <span class="comment">        // gsl_rng_default_seed to default environmental vars</span>
<a name="l02732"></a>02732 <span class="comment">        gsl_rng_env_setup();</span>
<a name="l02733"></a>02733 <span class="comment">        tgsl = gsl_rng_default; // make tgsl the default type</span>
<a name="l02734"></a>02734 <span class="comment">        rgsl = gsl_rng_alloc (tgsl); // set up with default seed</span>
<a name="l02735"></a>02735 <span class="comment"></span>
<a name="l02736"></a>02736 <span class="comment">        // call the function with a random number generator</span>
<a name="l02737"></a>02737 <span class="comment">        cancontinue = prioritySplitAndEstimate(compTest, he, logging, minChildPoints, </span>
<a name="l02738"></a>02738 <span class="comment">                        minVolB, rgsl, stopCrit, nodeEst, method, hist,</span>
<a name="l02739"></a>02739 <span class="comment">                        maxLeafNodes, maxCheck, optHist);</span>
<a name="l02740"></a>02740 <span class="comment">        gsl_rng_free (rgsl);</span>
<a name="l02741"></a>02741 <span class="comment">    }</span>
<a name="l02742"></a>02742 <span class="comment"></span>
<a name="l02743"></a>02743 <span class="comment">    catch (bad_alloc&amp; ba) {</span>
<a name="l02744"></a>02744 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l02745"></a>02745 <span class="comment">        string oldmsg(ba.what());</span>
<a name="l02746"></a>02746 <span class="comment">        string msg = &quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l02747"></a>02747 <span class="comment">                                     + oldmsg;</span>
<a name="l02748"></a>02748 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l02749"></a>02749 <span class="comment">        throw HistException(msg);</span>
<a name="l02750"></a>02750 <span class="comment">    }</span>
<a name="l02751"></a>02751 <span class="comment">    catch (HistException&amp; e) {</span>
<a name="l02752"></a>02752 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l02753"></a>02753 <span class="comment">        string oldmsg(e.what());</span>
<a name="l02754"></a>02754 <span class="comment">        string msg = &quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l02755"></a>02755 <span class="comment">                                    + oldmsg;</span>
<a name="l02756"></a>02756 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l02757"></a>02757 <span class="comment">        throw HistException(msg);</span>
<a name="l02758"></a>02758 <span class="comment">    }</span>
<a name="l02759"></a>02759 <span class="comment">    catch (SPnodeException&amp; spe) {</span>
<a name="l02760"></a>02760 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l02761"></a>02761 <span class="comment">        string oldmsg(spe.what());</span>
<a name="l02762"></a>02762 <span class="comment">        string msg = &quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l02763"></a>02763 <span class="comment">                                    + oldmsg;</span>
<a name="l02764"></a>02764 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l02765"></a>02765 <span class="comment">        throw HistException(msg);</span>
<a name="l02766"></a>02766 <span class="comment">    }</span>
<a name="l02767"></a>02767 <span class="comment">    catch (exception&amp; e) {</span>
<a name="l02768"></a>02768 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l02769"></a>02769 <span class="comment">        string oldmsg(e.what());</span>
<a name="l02770"></a>02770 <span class="comment">        string msg = &quot;Error in priority split.  Orginal error: &quot; + oldmsg;</span>
<a name="l02771"></a>02771 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l02772"></a>02772 <span class="comment">        throw HistException(msg);</span>
<a name="l02773"></a>02773 <span class="comment">    }</span>
<a name="l02774"></a>02774 <span class="comment">   </span>
<a name="l02775"></a>02775 <span class="comment">   return cancontinue;</span>
<a name="l02776"></a>02776 <span class="comment">}</span>
<a name="l02777"></a>02777 <span class="comment">*/</span>
<a name="l02778"></a>02778 
<a name="l02779"></a>02779 <span class="comment">// prioritySplitAndEstimate for finite mixtures</span>
<a name="l02780"></a>02780 <span class="comment">// method for data splitting and hold out estimation</span>
<a name="l02781"></a>02781 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02782"></a>02782 <span class="comment">// by prioritising which node to split first</span>
<a name="l02783"></a>02783 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02784"></a>02784 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02785"></a>02785 <span class="comment">// or until a stopping criteria is fulfilled</span>
<a name="l02786"></a>02786 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l02787"></a>02787 <span class="comment">// makes its own random number generator</span>
<a name="l02788"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a46ff8e128b5d734c3839871c465bcf46">02788</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">AdaptiveHistogramValidation::prioritySplitAndEstimate</a>(
<a name="l02789"></a>02789                    <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he, 
<a name="l02790"></a>02790              <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l02791"></a>02791              <span class="keywordtype">double</span> minVolB, <span class="keywordtype">bool</span> stopCrit, 
<a name="l02792"></a>02792              <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist, 
<a name="l02793"></a>02793              <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l02794"></a>02794              <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l02795"></a>02795 {
<a name="l02796"></a>02796     gsl_rng * rgsl = NULL;
<a name="l02797"></a>02797     <span class="keywordtype">bool</span> cancontinue;
<a name="l02798"></a>02798 
<a name="l02799"></a>02799     <span class="keywordflow">try</span> {
<a name="l02800"></a>02800         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l02801"></a>02801         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02802"></a>02802         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02803"></a>02803         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02804"></a>02804         gsl_rng_env_setup();
<a name="l02805"></a>02805         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02806"></a>02806         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02807"></a>02807 
<a name="l02808"></a>02808         <span class="comment">// call the function with a random number generator</span>
<a name="l02809"></a>02809         cancontinue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(compTest, he, logging, minChildPoints, 
<a name="l02810"></a>02810                         minVolB, rgsl, stopCrit, mixt, method, hist,
<a name="l02811"></a>02811                         maxLeafNodes, maxCheck, tol, deg, optHist);
<a name="l02812"></a>02812         gsl_rng_free (rgsl);
<a name="l02813"></a>02813     }
<a name="l02814"></a>02814 
<a name="l02815"></a>02815     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02816"></a>02816         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02817"></a>02817         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02818"></a>02818         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l02819"></a>02819                                      + oldmsg;
<a name="l02820"></a>02820         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02821"></a>02821         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02822"></a>02822     }
<a name="l02823"></a>02823     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02824"></a>02824         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02825"></a>02825         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02826"></a>02826         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l02827"></a>02827                                     + oldmsg;
<a name="l02828"></a>02828         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02829"></a>02829         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02830"></a>02830     }
<a name="l02831"></a>02831     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02832"></a>02832         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02833"></a>02833         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02834"></a>02834         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l02835"></a>02835                                     + oldmsg;
<a name="l02836"></a>02836         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02837"></a>02837         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02838"></a>02838     }
<a name="l02839"></a>02839     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02840"></a>02840         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02841"></a>02841         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02842"></a>02842         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02843"></a>02843         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02844"></a>02844         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02845"></a>02845     }
<a name="l02846"></a>02846    
<a name="l02847"></a>02847    <span class="keywordflow">return</span> cancontinue;
<a name="l02848"></a>02848 }
<a name="l02849"></a>02849 
<a name="l02850"></a>02850 <span class="comment">// prioritySplitAndEstimate for uniform mixtures</span>
<a name="l02851"></a>02851 <span class="comment">// hold out estimation based on Devroye and Lugosi 2006</span>
<a name="l02852"></a>02852 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02853"></a>02853 <span class="comment">// by prioritising which node to split first</span>
<a name="l02854"></a>02854 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02855"></a>02855 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02856"></a>02856 <span class="comment">// or until a  splitting criteria is satisfied</span>
<a name="l02857"></a>02857 <span class="comment">// outputs to a log file if logging required</span>
<a name="l02858"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a990028dc08bc4780df6a04f78b4ec644">02858</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">AdaptiveHistogramValidation::prioritySplitAndEstimate</a>(
<a name="l02859"></a>02859                      <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObjVal.shtml" title="A Virtual class providing a way to compare SPSVnodes.">NodeCompObjVal</a>&amp; compTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObjVal.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObjVal</a>&amp; he,  
<a name="l02860"></a>02860                      <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l02861"></a>02861               <span class="keywordtype">double</span> minVolB, gsl_rng * rgsl, <span class="keywordtype">bool</span> stopCrit, 
<a name="l02862"></a>02862               <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">int</span> method, <span class="keywordtype">size_t</span> hist,
<a name="l02863"></a>02863               <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> maxCheck, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg,
<a name="l02864"></a>02864               <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; optHist)
<a name="l02865"></a>02865 {
<a name="l02866"></a>02866     <span class="comment">//cout &lt;&lt; &quot;calling prioritySplitAndEstimate:&quot; &lt;&lt; endl;</span>
<a name="l02867"></a>02867    <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02868"></a>02868    <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l02869"></a>02869    
<a name="l02870"></a>02870     <span class="comment">//boolean for validation data</span>
<a name="l02871"></a>02871     <span class="keywordtype">bool</span> boolVal = <span class="keyword">true</span>;
<a name="l02872"></a>02872     
<a name="l02873"></a>02873     <span class="comment">// for stopping criteria</span>
<a name="l02874"></a>02874     <span class="keywordtype">size_t</span> flagStop = 0;
<a name="l02875"></a>02875     <span class="keywordtype">int</span> currentSmallest = 0;
<a name="l02876"></a>02876     
<a name="l02877"></a>02877     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02878"></a>02878     
<a name="l02879"></a>02879     <span class="comment">//set up collator to keep the histograms as splits happen</span>
<a name="l02880"></a>02880     <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l02881"></a>02881     
<a name="l02882"></a>02882    <span class="comment">//=======initializing containers======================================</span>
<a name="l02883"></a>02883   <span class="comment">//set up a list for the Yatracos set </span>
<a name="l02884"></a>02884   list&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; listYatSet;
<a name="l02885"></a>02885   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (row)</span>
<a name="l02886"></a>02886   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecRowYatSet;
<a name="l02887"></a>02887   <span class="comment">//set up a vector for sets of pointers to CollatorSPVnode (col)</span>
<a name="l02888"></a>02888   vector&lt; set&lt;CollatorSPVnode*, less&lt;CollatorSPVnode*&gt; &gt; &gt; vecColYatSet;    
<a name="l02889"></a>02889   <span class="comment">//set up a vector for maximum Delta_theta vectors</span>
<a name="l02890"></a>02890   vector&lt; vector&lt;double&gt; &gt; vecMaxDeltaVec;
<a name="l02891"></a>02891   <span class="comment">//initializing the vector - to allow the delta vector to be in </span>
<a name="l02892"></a>02892   <span class="comment">// right order  since the first histogram does not have a </span>
<a name="l02893"></a>02893   <span class="comment">// Yatracos set</span>
<a name="l02894"></a>02894   <span class="comment">//the first element in this vector will not be plotted since </span>
<a name="l02895"></a>02895   <span class="comment">// the first histogram is an empty set</span>
<a name="l02896"></a>02896   vector&lt;double&gt; theta0;
<a name="l02897"></a>02897   theta0.push_back(-1*(numeric_limits&lt;double&gt;::infinity())); 
<a name="l02898"></a>02898   <span class="comment">//the supremum of an empty set is -Infimum </span>
<a name="l02899"></a>02899   vecMaxDeltaVec.push_back(theta0);
<a name="l02900"></a>02900   <span class="comment">//set up a vector of the corresponding theta with the minimum </span>
<a name="l02901"></a>02901   <span class="comment">// distance estimates</span>
<a name="l02902"></a>02902   vector&lt; vector&lt;int&gt; &gt; vecMinDistTheta;
<a name="l02903"></a>02903   <span class="comment">// set up a vector for the infimum </span>
<a name="l02904"></a>02904   vector&lt;double&gt; vecInfDelta;
<a name="l02905"></a>02905   <span class="comment">// set up a vector for the integrated absolute error for each histogram</span>
<a name="l02906"></a>02906    vector&lt;real&gt; vecIAE; 
<a name="l02907"></a>02907    vector&lt;real&gt; vecIAEFull;
<a name="l02908"></a>02908    real minIAE = 1000.00;
<a name="l02909"></a>02909    
<a name="l02910"></a>02910    vector&lt;real&gt; TrueDelta;
<a name="l02911"></a>02911    TrueDelta.push_back(-1); 
<a name="l02912"></a>02912    
<a name="l02913"></a>02913    real trueDeltaCurrent = 0;
<a name="l02914"></a>02914    
<a name="l02915"></a>02915    <span class="comment">// to keep the histograms</span>
<a name="l02916"></a>02916    vector&lt;AdaptiveHistogramValidation&gt; tempHist;
<a name="l02917"></a>02917    <span class="comment">//==============end of initializing containers=============================//   </span>
<a name="l02918"></a>02918    <span class="comment">// check if the root box is empty</span>
<a name="l02919"></a>02919     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l02920"></a>02920             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l02921"></a>02921     }
<a name="l02922"></a>02922     <span class="keywordflow">try</span> {       
<a name="l02923"></a>02923         <span class="comment">// add the histogram before any split happens into the collator</span>
<a name="l02924"></a>02924         <span class="keywordtype">size_t</span> agg = 0;
<a name="l02925"></a>02925       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l02926"></a>02926       tempHist.push_back(*<span class="keyword">this</span>);
<a name="l02927"></a>02927       <span class="comment">// calculate the IAE </span>
<a name="l02928"></a>02928       real IAE = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 0));
<a name="l02929"></a>02929       <span class="comment">// push back into vecIAE </span>
<a name="l02930"></a>02930       vecIAE.push_back(IAE);
<a name="l02931"></a>02931       minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l02932"></a>02932       
<a name="l02933"></a>02933       <span class="comment">//get the IAE for the full data set</span>
<a name="l02934"></a>02934       real IAEF = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 1));
<a name="l02935"></a>02935       <span class="comment">// push back into vecIAE </span>
<a name="l02936"></a>02936       vecIAEFull.push_back(IAEF);
<a name="l02937"></a>02937 
<a name="l02938"></a>02938     <span class="comment">//============checks  for splittable nodes=============================//</span>
<a name="l02939"></a>02939         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l02940"></a>02940         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l02941"></a>02941         <span class="comment">//logging</span>
<a name="l02942"></a>02942         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02943"></a>02943         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02944"></a>02944         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02945"></a>02945             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l02946"></a>02946             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l02947"></a>02947             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l02948"></a>02948         }
<a name="l02949"></a>02949         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l02950"></a>02950         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l02951"></a>02951             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l02952"></a>02952             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a8d94391339b619f6f3aefb89ca761e99" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l02953"></a>02953             volChecking = <span class="keyword">true</span>;
<a name="l02954"></a>02954         }
<a name="l02955"></a>02955       <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l02956"></a>02956       multiset&lt;SPSVnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l02957"></a>02957       <span class="keywordtype">int</span> i=0;
<a name="l02958"></a>02958       <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02959"></a>02959              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l02960"></a>02960             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a34f7487fd92886151634c00e8e75cca5" title="Opening line of a txt log file.">outputLogStart</a>(s);    
<a name="l02961"></a>02961             i++;
<a name="l02962"></a>02962       }
<a name="l02963"></a>02963       <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l02964"></a>02964       <span class="comment">// there are enough points in the whole node</span>
<a name="l02965"></a>02965       <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l02966"></a>02966       <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l02967"></a>02967         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02968"></a>02968             <span class="comment">// check to insert a copy of the rootVpaving pointer into the set</span>
<a name="l02969"></a>02969            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>, volChecking, minVol,
<a name="l02970"></a>02970                 minChildPoints)) {
<a name="l02971"></a>02971                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>);
<a name="l02972"></a>02972             }
<a name="l02973"></a>02973         }
<a name="l02974"></a>02974         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l02975"></a>02975             <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l02976"></a>02976             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02977"></a>02977             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l02978"></a>02978             <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> sit;            
<a name="l02979"></a>02979             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l02980"></a>02980                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l02981"></a>02981                 minChildPoints)) {
<a name="l02982"></a>02982                pq.insert(*sit);
<a name="l02983"></a>02983                 }
<a name="l02984"></a>02984             }
<a name="l02985"></a>02985         }
<a name="l02986"></a>02986         cancontinue = (!pq.empty());
<a name="l02987"></a>02987         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l02988"></a>02988         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02989"></a>02989             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l02990"></a>02990         }        
<a name="l02991"></a>02991         <span class="comment">//==================end of checks=====================================//</span>
<a name="l02992"></a>02992   
<a name="l02993"></a>02993       <span class="keywordtype">size_t</span> ch = 0;
<a name="l02994"></a>02994       
<a name="l02995"></a>02995         <span class="comment">//=========start priority queue====================================//</span>
<a name="l02996"></a>02996         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l02997"></a>02997         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l02998"></a>02998         <span class="comment">// that they are splittable when we take them out   </span>
<a name="l02999"></a>02999       <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {          
<a name="l03000"></a>03000             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l03001"></a>03001             <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* chosenLargest;
<a name="l03002"></a>03002             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l03003"></a>03003             multiset&lt;SPSVnode*, MyCompare&gt;::iterator mit;
<a name="l03004"></a>03004             pair&lt;multiset&lt;SPSVnode*, MyCompare&gt;::iterator,
<a name="l03005"></a>03005                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l03006"></a>03006             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l03007"></a>03007             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l03008"></a>03008 
<a name="l03009"></a>03009             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l03010"></a>03010                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l03011"></a>03011                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l03012"></a>03012                 real sum = 0.0;
<a name="l03013"></a>03013                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l03014"></a>03014                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l03015"></a>03015                     sum += 1.0/(1.0*numberLargest);
<a name="l03016"></a>03016                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l03017"></a>03017                         <span class="keywordflow">break</span>;
<a name="l03018"></a>03018                     }
<a name="l03019"></a>03019                 }
<a name="l03020"></a>03020                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l03021"></a>03021                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l03022"></a>03022             }
<a name="l03023"></a>03023             <span class="keywordflow">else</span> {
<a name="l03024"></a>03024                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l03025"></a>03025                 multiset&lt;SPSVnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l03026"></a>03026                 it--;
<a name="l03027"></a>03027                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l03028"></a>03028             }
<a name="l03029"></a>03029             <span class="comment">// split the biggest one and divide up its training and validation </span>
<a name="l03030"></a>03030             <span class="comment">// data</span>
<a name="l03031"></a>03031             
<a name="l03032"></a>03032             cout &lt;&lt; <span class="stringliteral">&quot;--------------Split &quot;</span> &lt;&lt; coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1 &lt;&lt; endl;
<a name="l03033"></a>03033             <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(chosenLargest, boolVal);
<a name="l03034"></a>03034                           
<a name="l03035"></a>03035             <span class="comment">// add the new child names to the creation string</span>
<a name="l03036"></a>03036             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l03037"></a>03037 
<a name="l03038"></a>03038             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l03039"></a>03039             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l03040"></a>03040             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l03041"></a>03041                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l03042"></a>03042                 <span class="comment">// one child of the child)</span>
<a name="l03043"></a>03043             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l03044"></a>03044             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l03045"></a>03045                     volChecking, minVol, minChildPoints)) {
<a name="l03046"></a>03046                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l03047"></a>03047                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l03048"></a>03048             }
<a name="l03049"></a>03049             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae63a7462ea0b3f0fc11ff45eff208cd0" title="Method to do checking for whether to split a node.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l03050"></a>03050                     volChecking, minVol, minChildPoints)) {
<a name="l03051"></a>03051                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l03052"></a>03052                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l03053"></a>03053             }
<a name="l03054"></a>03054             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l03055"></a>03055                 <span class="comment">// To add current state of histogram to log file                   </span>
<a name="l03056"></a>03056                 i++;
<a name="l03057"></a>03057             }
<a name="l03058"></a>03058 
<a name="l03059"></a>03059           <span class="comment">//==========get IAE for this histogram======================//</span>
<a name="l03060"></a>03060         <span class="comment">//cout &lt;&lt; &quot;get IAE for histogram &quot; &lt;&lt; coll.getNumberCollated() &lt;&lt; endl;</span>
<a name="l03061"></a>03061         real IAE = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 0));
<a name="l03062"></a>03062         minIAE = (IAE &lt; minIAE) ? IAE : minIAE;
<a name="l03063"></a>03063         vecIAE.push_back(IAE); 
<a name="l03064"></a>03064         
<a name="l03065"></a>03065         real IAEF = mid(<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">getFinMixIntervalIAE</a>(mixt, tol, deg, 1));
<a name="l03066"></a>03066         vecIAEFull.push_back(IAEF); 
<a name="l03067"></a>03067         
<a name="l03068"></a>03068         
<a name="l03069"></a>03069         <span class="comment">// keep this histogram in a container </span>
<a name="l03070"></a>03070         tempHist.push_back(*<span class="keyword">this</span>);
<a name="l03071"></a>03071         
<a name="l03072"></a>03072         <span class="comment">/*</span>
<a name="l03073"></a>03073 <span class="comment">        string fileName = &quot;QueueHist&quot;;</span>
<a name="l03074"></a>03074 <span class="comment">        ostringstream stm;</span>
<a name="l03075"></a>03075 <span class="comment">        stm &lt;&lt; ch;</span>
<a name="l03076"></a>03076 <span class="comment">        fileName += stm.str();</span>
<a name="l03077"></a>03077 <span class="comment">        fileName += &quot;.txt&quot;;</span>
<a name="l03078"></a>03078 <span class="comment">        outputToTxtTabs(fileName);</span>
<a name="l03079"></a>03079 <span class="comment">        </span>
<a name="l03080"></a>03080 <span class="comment">        ch++;</span>
<a name="l03081"></a>03081 <span class="comment">        */</span>
<a name="l03082"></a>03082         <span class="comment">//cout &lt;&lt; &quot;add into collator&quot; &lt;&lt; endl;</span>
<a name="l03083"></a>03083         <span class="comment">// add current histogram to collation</span>
<a name="l03084"></a>03084         <span class="keywordtype">size_t</span> agg = 0;
<a name="l03085"></a>03085         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(*<span class="keyword">this</span>, 1, agg);
<a name="l03086"></a>03086           
<a name="l03087"></a>03087         <span class="comment">//cout &lt;&lt; &quot;get the split node&quot; &lt;&lt; endl;</span>
<a name="l03088"></a>03088         <span class="comment">// first we need a pointer to the corresponding CollatorSPVnode </span>
<a name="l03089"></a>03089         <span class="comment">// of the SPSVnode* chosenLargest     </span>
<a name="l03090"></a>03090         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * splitCollNode;
<a name="l03091"></a>03091         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab38cfd38290579694a35950af5c80c36" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtr</a>(splitCollNode, chosenLargest);
<a name="l03092"></a>03092         <span class="comment">//cout &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; splitCollNode-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l03093"></a>03093         
<a name="l03094"></a>03094         <span class="comment">//cout &lt;&lt; &quot;get the yat class&quot; &lt;&lt; endl;</span>
<a name="l03095"></a>03095         <span class="comment">// get the Yatracos class for this collation</span>
<a name="l03096"></a>03096         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad94f1c5c6943e7bb35e74030af5113fd" title="Get the Yatracos set.">getYatracosClassAll</a>(splitCollNode, vecRowYatSet,
<a name="l03097"></a>03097                             vecColYatSet, listYatSet);
<a name="l03098"></a>03098 
<a name="l03099"></a>03099         <span class="comment">//cout &lt;&lt; &quot;get delta theta&quot; &lt;&lt; endl;</span>
<a name="l03100"></a>03100         <span class="comment">// get delta_theta for each theta</span>
<a name="l03101"></a>03101         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a741a4e9b7dac5673c641b3a991b4a419" title="Get the maximum delta values for all thetas for the Yatracos Class.">getYatracosDelta</a>(listYatSet, vecRowYatSet, vecColYatSet, 
<a name="l03102"></a>03102                         vecMaxDeltaVec);
<a name="l03103"></a>03103 
<a name="l03104"></a>03104         <span class="comment">// get the true delta</span>
<a name="l03105"></a>03105         real trueDelta = 0.0;
<a name="l03106"></a>03106         vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator listIt;   
<a name="l03107"></a>03107         <span class="comment">//cout &lt;&lt; &quot;Current Yatracos set has &quot; &lt;&lt; (*tempList).size() &lt;&lt; &quot; nodes.&quot; &lt;&lt; endl;</span>
<a name="l03108"></a>03108         <span class="keywordflow">for</span> (listIt = (vecRowYatSet).begin(); listIt &lt; vecRowYatSet.end(); listIt++) {
<a name="l03109"></a>03109           <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l03110"></a>03110               interval TrueDeltaI = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(mixt, tol, deg, (*listIt));
<a name="l03111"></a>03111               real trueDeltaR = mid(TrueDeltaI);
<a name="l03112"></a>03112               trueDeltaR = abs(trueDeltaR);
<a name="l03113"></a>03113               trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l03114"></a>03114               <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l03115"></a>03115               trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l03116"></a>03116               <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l03117"></a>03117               trueDeltaCurrent = trueDelta;
<a name="l03118"></a>03118               TrueDelta.push_back(trueDelta);
<a name="l03119"></a>03119             }
<a name="l03120"></a>03120           }
<a name="l03121"></a>03121 
<a name="l03122"></a>03122           <span class="keywordflow">for</span> (listIt = (vecColYatSet).begin(); listIt &lt; vecColYatSet.end(); listIt++) {
<a name="l03123"></a>03123             <span class="keywordflow">if</span> ( !(*listIt).empty() ) {
<a name="l03124"></a>03124               interval TrueDeltaI = <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(mixt, tol, deg, (*listIt));
<a name="l03125"></a>03125               real trueDeltaR = mid(TrueDeltaI);
<a name="l03126"></a>03126               trueDeltaR = abs(trueDeltaR);
<a name="l03127"></a>03127               trueDelta = (trueDeltaR &gt; trueDelta) ? trueDeltaR : trueDelta;
<a name="l03128"></a>03128               <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; trueDeltaCurrent &lt;&lt; &quot;\t current: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l03129"></a>03129               trueDelta = (trueDeltaCurrent &gt; trueDelta) ? trueDeltaCurrent : trueDelta;
<a name="l03130"></a>03130               <span class="comment">//cout &lt;&lt; &quot;delta after comparison: &quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l03131"></a>03131               trueDeltaCurrent = trueDelta;
<a name="l03132"></a>03132               TrueDelta.push_back(trueDelta);
<a name="l03133"></a>03133             }
<a name="l03134"></a>03134           }
<a name="l03135"></a>03135 
<a name="l03136"></a>03136         <span class="keywordflow">if</span> ( vecRowYatSet.empty() &amp;&amp; vecColYatSet.empty() ) 
<a name="l03137"></a>03137         { trueDelta = -1; TrueDelta.push_back(trueDelta); } 
<a name="l03138"></a>03138         
<a name="l03139"></a>03139         <span class="comment">//check theorem 10.1</span>
<a name="l03140"></a>03140         <span class="comment">//cout &lt;&lt; &quot;check theorem: &quot; &lt;&lt; endl;</span>
<a name="l03141"></a>03141         <span class="comment">//cout &lt;&lt; IAE &lt;&lt; &quot;\t&quot; &lt;&lt; minIAE &lt;&lt; &quot;\t&quot; &lt;&lt; trueDelta &lt;&lt; endl;</span>
<a name="l03142"></a>03142         <span class="keywordflow">if</span> ( trueDelta &gt;= 0) {  assert(IAE &lt;= (3*minIAE + 4*trueDelta)); }
<a name="l03143"></a>03143 
<a name="l03144"></a>03144         <span class="comment">//stopping criteria</span>
<a name="l03145"></a>03145         <span class="keywordflow">if</span> (stopCrit == <span class="keyword">true</span>) {
<a name="l03146"></a>03146           <span class="comment">//cout &lt;&lt; &quot;checking stopping criteria: &quot; &lt;&lt; endl;</span>
<a name="l03147"></a>03147           <span class="keywordtype">bool</span> toStop = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#adc9f2cb78559081ca925defe641bd583">getMinDelta</a>(maxCheck, vecMaxDeltaVec);
<a name="l03148"></a>03148           <span class="keywordflow">if</span> (toStop == <span class="keyword">true</span>) {
<a name="l03149"></a>03149             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met.&quot;</span> &lt;&lt; endl;
<a name="l03150"></a>03150             <span class="keywordflow">break</span>;
<a name="l03151"></a>03151           } 
<a name="l03152"></a>03152         }
<a name="l03153"></a>03153         <span class="comment">//==========checks to see if need to split again=========//</span>
<a name="l03154"></a>03154             <span class="comment">//checking if there are any more &#39;largest&#39; nodes in the priority queue</span>
<a name="l03155"></a>03155             bigEnough = (!pq.empty());
<a name="l03156"></a>03156             <span class="keywordflow">if</span> (!bigEnough){    
<a name="l03157"></a>03157           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l03158"></a>03158                     &lt;&lt; std::endl;
<a name="l03159"></a>03159             }
<a name="l03160"></a>03160         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l03161"></a>03161         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l03162"></a>03162         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l03163"></a>03163         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#abba9be0456a1228037dd40e7353d2169" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l03164"></a>03164         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l03165"></a>03165           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l03166"></a>03166                           &lt;&lt; std::endl;
<a name="l03167"></a>03167         }
<a name="l03168"></a>03168       } <span class="comment">// end of while loop</span>
<a name="l03169"></a>03169       <span class="comment">//cout &lt;&lt; &quot;===========End of splitting=============&quot; &lt;&lt; endl;</span>
<a name="l03170"></a>03170         
<a name="l03171"></a>03171       <span class="comment">//do the merging here based on vecMinDistTheta</span>
<a name="l03172"></a>03172          
<a name="l03173"></a>03173       <span class="comment">//================Outputs to .txt files=================== </span>
<a name="l03174"></a>03174       ofstream os;         <span class="comment">// ofstream object</span>
<a name="l03175"></a>03175       os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l03176"></a>03176       os.precision(5);
<a name="l03177"></a>03177 
<a name="l03178"></a>03178        <span class="comment">// get the minimum delta to get the MDE histogram</span>
<a name="l03179"></a>03179       vector&lt; vector&lt;double&gt; &gt;::iterator it1; 
<a name="l03180"></a>03180       vector&lt;double&gt;::iterator it2;
<a name="l03181"></a>03181       <span class="keywordtype">int</span> Theta=0;
<a name="l03182"></a>03182       <span class="comment">//cout &lt;&lt; &quot;MaxDelta&quot; &lt;&lt; endl;</span>
<a name="l03183"></a>03183       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> = vecMaxDeltaVec.size(); 
<a name="l03184"></a>03184       <span class="keywordtype">double</span> minDelta = 1000;
<a name="l03185"></a>03185       <span class="keywordtype">int</span> minTheta = 0;
<a name="l03186"></a>03186       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>; i++){
<a name="l03187"></a>03187         <span class="comment">//cout &lt;&lt; &quot;Theta: &quot; &lt;&lt; Theta &lt;&lt; &quot;\t&quot; &lt;&lt; vecMaxDeltaVec[F-1][i] &lt;&lt; endl;</span>
<a name="l03188"></a>03188         <span class="keywordflow">if</span> ( vecMaxDeltaVec[F-1][i] &lt; minDelta ) { 
<a name="l03189"></a>03189           minDelta = vecMaxDeltaVec[F-1][i]; 
<a name="l03190"></a>03190           minTheta = Theta; 
<a name="l03191"></a>03191         } 
<a name="l03192"></a>03192         Theta++;
<a name="l03193"></a>03193       }
<a name="l03194"></a>03194 
<a name="l03195"></a>03195       cout &lt;&lt; <span class="stringliteral">&quot;MDE at &quot;</span> &lt;&lt; minTheta &lt;&lt; <span class="stringliteral">&quot; with IAE &quot;</span> &lt;&lt; vecIAE[minTheta] &lt;&lt; endl; 
<a name="l03196"></a>03196          optHist = tempHist[minTheta];
<a name="l03197"></a>03197 
<a name="l03198"></a>03198       <span class="comment">// output vecDeltaMaxVec into .txt </span>
<a name="l03199"></a>03199       ostringstream stm1, stm2;
<a name="l03200"></a>03200       stm1 &lt;&lt; hist;
<a name="l03201"></a>03201       stm2 &lt;&lt; method;
<a name="l03202"></a>03202       <span class="keywordtype">string</span> fileNameDelta = <span class="stringliteral">&quot;FinMixMethod&quot;</span>;
<a name="l03203"></a>03203       fileNameDelta += stm2.str();
<a name="l03204"></a>03204       fileNameDelta += <span class="stringliteral">&quot;DeltaMax&quot;</span>;
<a name="l03205"></a>03205       fileNameDelta += stm1.str();
<a name="l03206"></a>03206       fileNameDelta += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l03207"></a>03207       os.open(fileNameDelta.c_str());
<a name="l03208"></a>03208       <span class="keywordflow">for</span> (it1 = vecMaxDeltaVec.begin(); it1 &lt; vecMaxDeltaVec.end(); it1++){ 
<a name="l03209"></a>03209         <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){
<a name="l03210"></a>03210           os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l03211"></a>03211         }
<a name="l03212"></a>03212         os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l03213"></a>03213       }          
<a name="l03214"></a>03214       os &lt;&lt; flush;
<a name="l03215"></a>03215       os.close();
<a name="l03216"></a>03216       std::cout &lt;&lt; <span class="stringliteral">&quot;DeltaMax for each theta output to &quot;</span> &lt;&lt; fileNameDelta &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;
<a name="l03217"></a>03217       <span class="comment">//----------------end of output for vecDeltaMaxVec-------------</span>
<a name="l03218"></a>03218  
<a name="l03219"></a>03219          <span class="comment">//output vecIAE to .txt file</span>
<a name="l03220"></a>03220       <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l03221"></a>03221       outputFileName = <span class="stringliteral">&quot;FinMixMethod&quot;</span>;
<a name="l03222"></a>03222       outputFileName += stm2.str();
<a name="l03223"></a>03223       outputFileName += <span class="stringliteral">&quot;IAEandTrueDelta&quot;</span>;
<a name="l03224"></a>03224       outputFileName += stm1.str();
<a name="l03225"></a>03225       outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l03226"></a>03226       os.open(outputFileName.c_str());
<a name="l03227"></a>03227       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecIAE.size(); i++){
<a name="l03228"></a>03228         os &lt;&lt; vecIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vecIAEFull[i] &lt;&lt; TrueDelta[i] &lt;&lt; endl;
<a name="l03229"></a>03229       }
<a name="l03230"></a>03230       os &lt;&lt; flush;
<a name="l03231"></a>03231       os.close();
<a name="l03232"></a>03232       std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l03233"></a>03233       <span class="comment">//=================end of output for vecIAE---------------------------      </span>
<a name="l03234"></a>03234    } <span class="comment">// end of try</span>
<a name="l03235"></a>03235     
<a name="l03236"></a>03236     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l03237"></a>03237         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l03238"></a>03238         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l03239"></a>03239                                     + oldmsg;
<a name="l03240"></a>03240         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03241"></a>03241         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03242"></a>03242     }
<a name="l03243"></a>03243     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03244"></a>03244         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l03245"></a>03245         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority stage split.  Orginal error: &quot;</span> + oldmsg;
<a name="l03246"></a>03246         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03247"></a>03247         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03248"></a>03248     }
<a name="l03249"></a>03249     
<a name="l03250"></a>03250    <span class="keywordflow">return</span> (cancontinue);
<a name="l03251"></a>03251 }
<a name="l03252"></a>03252 
<a name="l03253"></a>03253 <span class="comment">//splits histogram according to string instruction</span>
<a name="l03254"></a>03254 <span class="comment">//returns true if some splitting was achieved</span>
<a name="l03255"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7498bdc1663c857052e5bc147bf086f7">03255</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7498bdc1663c857052e5bc147bf086f7" title="Split a histogram to a specified shape.">AdaptiveHistogramValidation::splitToShape</a>(std::string instruction)
<a name="l03256"></a>03256 {
<a name="l03257"></a>03257     <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l03258"></a>03258 
<a name="l03259"></a>03259     <span class="comment">// checks:  is there a root paving, is the string properly formed?</span>
<a name="l03260"></a>03260     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03261"></a>03261         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for splitToShape&quot;</span>);
<a name="l03262"></a>03262     }
<a name="l03263"></a>03263 
<a name="l03264"></a>03264     <span class="keywordflow">if</span> (instruction.length() == 0) {
<a name="l03265"></a>03265       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No instruction&quot;</span>);
<a name="l03266"></a>03266     }
<a name="l03267"></a>03267 
<a name="l03268"></a>03268     std::string legal(<span class="stringliteral">&quot;, 0123456789&quot;</span>);
<a name="l03269"></a>03269     <span class="keywordflow">if</span> (instruction.find_first_not_of(legal) != std::string::npos) {
<a name="l03270"></a>03270         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Illegal character in instruction&quot;</span>);
<a name="l03271"></a>03271     }
<a name="l03272"></a>03272 
<a name="l03273"></a>03273     <span class="keywordflow">try</span> { <span class="comment">// all seems to be okay, we can start spliting the root paving</span>
<a name="l03274"></a>03274         <span class="comment">// specify what to look for as numbers or decimal point or + or -</span>
<a name="l03275"></a>03275 
<a name="l03276"></a>03276        success = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea" title="Split a root paving to a specified shape.">splitRootToShape</a>(instruction);
<a name="l03277"></a>03277 
<a name="l03278"></a>03278         <span class="keywordflow">if</span> (success) {
<a name="l03279"></a>03279             <span class="comment">// update the creation string</span>
<a name="l03280"></a>03280             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a7d46cc6c04481f9579e9f5238ccea8b2" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>()
<a name="l03281"></a>03281                 + <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l03282"></a>03282         }
<a name="l03283"></a>03283         <span class="keywordflow">else</span> {
<a name="l03284"></a>03284             std::cerr &lt;&lt; std::endl;
<a name="l03285"></a>03285             std::cerr &lt;&lt; <span class="stringliteral">&quot;Your instruction does not describe a proper tree.&quot;</span>;
<a name="l03286"></a>03286             std::cerr &lt;&lt; <span class="stringliteral">&quot;  Please check your instruction and try again.&quot;</span>
<a name="l03287"></a>03287             &lt;&lt; std::endl;
<a name="l03288"></a>03288        }
<a name="l03289"></a>03289     }
<a name="l03290"></a>03290 
<a name="l03291"></a>03291     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l03292"></a>03292         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l03293"></a>03293         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in splitToShape.  Orginal error: &quot;</span>
<a name="l03294"></a>03294                                             + oldmsg;
<a name="l03295"></a>03295         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03296"></a>03296         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03297"></a>03297     }
<a name="l03298"></a>03298     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l03299"></a>03299         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l03300"></a>03300         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in splitToShape.  Orginal error: &quot;</span>
<a name="l03301"></a>03301                                     + oldmsg;
<a name="l03302"></a>03302         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03303"></a>03303         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03304"></a>03304     }
<a name="l03305"></a>03305     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l03306"></a>03306         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l03307"></a>03307         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in splitToShape.  Orginal error: &quot;</span> + oldmsg;
<a name="l03308"></a>03308         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03309"></a>03309         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03310"></a>03310     }
<a name="l03311"></a>03311     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03312"></a>03312         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l03313"></a>03313         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in splitToShape.  Orginal error: &quot;</span> + oldmsg;
<a name="l03314"></a>03314         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03315"></a>03315         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03316"></a>03316     }
<a name="l03317"></a>03317 
<a name="l03318"></a>03318     <span class="keywordflow">return</span> success;
<a name="l03319"></a>03319 }
<a name="l03320"></a>03320 
<a name="l03321"></a>03321 <span class="comment">// returns a vector of leaf levels as ints</span>
<a name="l03322"></a>03322 <span class="comment">// left to right, 0 is root</span>
<a name="l03323"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab9672c3fe9ee4ced96a1ad03ee12c1c9">03323</a> <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab9672c3fe9ee4ced96a1ad03ee12c1c9">AdaptiveHistogramValidation::getLeafLevels</a>()<span class="keyword"> const</span>
<a name="l03324"></a>03324 <span class="keyword"></span>{
<a name="l03325"></a>03325     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> levels; <span class="comment">// empty container</span>
<a name="l03326"></a>03326 
<a name="l03327"></a>03327     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03328"></a>03328         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(0, levels);
<a name="l03329"></a>03329         <span class="comment">//levels has now been filled in</span>
<a name="l03330"></a>03330     }
<a name="l03331"></a>03331     <span class="keywordflow">return</span> levels;
<a name="l03332"></a>03332 }
<a name="l03333"></a>03333 
<a name="l03334"></a>03334 
<a name="l03335"></a>03335 <span class="comment">// returns a vector of leaf counts</span>
<a name="l03336"></a>03336 <span class="comment">// left to right</span>
<a name="l03337"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a234fc6618948f692ea2458cedb4fed8f">03337</a> <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a234fc6618948f692ea2458cedb4fed8f">AdaptiveHistogramValidation::getLeafCounts</a>()<span class="keyword"> const</span>
<a name="l03338"></a>03338 <span class="keyword"></span>{
<a name="l03339"></a>03339     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> counts; <span class="comment">// empty container</span>
<a name="l03340"></a>03340     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03341"></a>03341         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">getLeafNodeCounts</a>(counts);
<a name="l03342"></a>03342         <span class="comment">//levels has now been filled in</span>
<a name="l03343"></a>03343     }
<a name="l03344"></a>03344     <span class="keywordflow">return</span> counts;
<a name="l03345"></a>03345 }
<a name="l03346"></a>03346 
<a name="l03347"></a>03347 
<a name="l03348"></a>03348 <span class="comment">// make a .dot file for the histogram</span>
<a name="l03349"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0286278b4e489ed8809dcb60d136dce7">03349</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a0286278b4e489ed8809dcb60d136dce7" title="Make a .dot graph file from histogram structure.">AdaptiveHistogramValidation::outputGraphDot</a>()<span class="keyword"> const</span>
<a name="l03350"></a>03350 <span class="keyword"></span>{
<a name="l03351"></a>03351     <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l03352"></a>03352 
<a name="l03353"></a>03353     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03354"></a>03354         success = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96" title="Make a .dot graph file from an SPnode tree structure.">outputGraphDot</a>();
<a name="l03355"></a>03355 
<a name="l03356"></a>03356     }
<a name="l03357"></a>03357     <span class="keywordflow">else</span> {
<a name="l03358"></a>03358         std::cerr &lt;&lt; <span class="stringliteral">&quot;Sorry, you can&#39;t make a graph without a root paving&quot;</span>
<a name="l03359"></a>03359                 &lt;&lt; std::endl;
<a name="l03360"></a>03360     }
<a name="l03361"></a>03361     <span class="keywordflow">return</span> success;
<a name="l03362"></a>03362 }
<a name="l03363"></a>03363 
<a name="l03364"></a>03364 
<a name="l03365"></a>03365 <span class="comment">// Method to output the subpaving to a txt file</span>
<a name="l03366"></a>03366 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l03367"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24">03367</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ac7ad1cd4a9403ae91083dc0ef2356a24" title="Output the subpaving managed by this to a txt file.">AdaptiveHistogramValidation::outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l03368"></a>03368                             <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l03369"></a>03369 <span class="keyword"></span>{
<a name="l03370"></a>03370     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03371"></a>03371 
<a name="l03372"></a>03372         <span class="comment">// To generate a file output of the AdaptiveHistogramValidation object</span>
<a name="l03373"></a>03373         ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l03374"></a>03374         <span class="keywordflow">if</span> (os.is_open()) {
<a name="l03375"></a>03375 
<a name="l03376"></a>03376             <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l03377"></a>03377             <span class="keywordflow">if</span> (confirm)
<a name="l03378"></a>03378                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogramValidation &quot;</span>
<a name="l03379"></a>03379                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03380"></a>03380         }
<a name="l03381"></a>03381         <span class="keywordflow">else</span> {
<a name="l03382"></a>03382             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l03383"></a>03383                 &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03384"></a>03384         }
<a name="l03385"></a>03385     }
<a name="l03386"></a>03386 }
<a name="l03387"></a>03387 
<a name="l03388"></a>03388 
<a name="l03389"></a>03389 <span class="comment">// Method to output details and stats on the root paving to a txt file</span>
<a name="l03390"></a>03390 <span class="comment">// Output goes to file named according to arguement s</span>
<a name="l03391"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a78d5c3ad5e31fc438e0c4cac65e73313">03391</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a78d5c3ad5e31fc438e0c4cac65e73313" title="Output details of full sample (from root) to txt tile.">AdaptiveHistogramValidation::outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l03392"></a>03392                                             <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l03393"></a>03393 <span class="keyword"></span>{
<a name="l03394"></a>03394     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>) {
<a name="l03395"></a>03395 
<a name="l03396"></a>03396         <span class="comment">// To generate a file output of root node of the AdaptiveHistogramValidation</span>
<a name="l03397"></a>03397         ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l03398"></a>03398         <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a51715ef7b6e370006e914fee15061cfc" title="Output details of a specific node.">nodePrint</a>(os); <span class="comment">// the output</span>
<a name="l03399"></a>03399         <span class="keywordflow">if</span> (confirm)
<a name="l03400"></a>03400             std::cout &lt;&lt; <span class="stringliteral">&quot;Details of the root paving of the AdaptiveHistogramValidation &quot;</span>
<a name="l03401"></a>03401                 &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03402"></a>03402     }
<a name="l03403"></a>03403 
<a name="l03404"></a>03404 }
<a name="l03405"></a>03405 
<a name="l03408"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae599e0bbb226dc0610c4ec25845533d8">03408</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ae599e0bbb226dc0610c4ec25845533d8">AdaptiveHistogramValidation::getIAE</a>(<span class="keywordtype">int</span> distr)
<a name="l03409"></a>03409 {
<a name="l03410"></a>03410       real IAE = 0;
<a name="l03411"></a>03411     <a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval);
<a name="l03412"></a>03412     <span class="keywordflow">switch</span>(distr)
<a name="l03413"></a>03413     { 
<a name="l03414"></a>03414          
<a name="l03415"></a>03415       <span class="keywordflow">case</span> 1: <span class="comment">//bivariate gaussian mixtures</span>
<a name="l03416"></a>03416          testpnt = <a class="code" href="errorfunc_8cpp.shtml#abd72fe76528917561a4e1a7fdf7890d9" title="IAE for the bivariate gaussian.">BiGOP</a>;
<a name="l03417"></a>03417       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">get2DIAE</a>(testpnt);
<a name="l03418"></a>03418       <span class="keywordflow">break</span>;
<a name="l03419"></a>03419       
<a name="l03420"></a>03420       <span class="keywordflow">case</span> 2: <span class="comment">// Levy 2D</span>
<a name="l03421"></a>03421       testpnt = <a class="code" href="errorfunc_8cpp.shtml#a72f3aaf218533dc785d09b0dffacbad7" title="IAE for the Levy 2D.">LevyOP</a>;
<a name="l03422"></a>03422       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">get2DIAE</a>(testpnt);
<a name="l03423"></a>03423       <span class="keywordflow">break</span>;
<a name="l03424"></a>03424       
<a name="l03425"></a>03425       <span class="keywordflow">case</span> 3: <span class="comment">//Rosenbrock 2D</span>
<a name="l03426"></a>03426       testpnt = <a class="code" href="errorfunc_8cpp.shtml#a77af86554abcee2e013b9d8631ed4c5f" title="IAE for a Rosenbrock 2D.">RosenOP</a>;
<a name="l03427"></a>03427       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">get2DIAE</a>(testpnt);
<a name="l03428"></a>03428       <span class="keywordflow">break</span>;
<a name="l03429"></a>03429     }   
<a name="l03430"></a>03430     <span class="keywordflow">return</span> IAE;
<a name="l03431"></a>03431 }
<a name="l03432"></a>03432 
<a name="l03435"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">03435</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa54b166c50901dc9ec2976bb4a5df916">AdaptiveHistogramValidation::getUnifIAE</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; myPart, <span class="keywordtype">double</span> weight,
<a name="l03436"></a>03436                               vector&lt;int&gt; holesLoc, <span class="keywordtype">bool</span> full)
<a name="l03437"></a>03437 {
<a name="l03438"></a>03438    <span class="comment">// get the true height, f of the corresponding box in myPart</span>
<a name="l03439"></a>03439   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
<a name="l03440"></a>03440   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
<a name="l03441"></a>03441   <span class="comment">//AdaptiveHistogram * adhPtr;</span>
<a name="l03442"></a>03442   <span class="comment">//adhPtr = &amp;myPart;</span>
<a name="l03443"></a>03443   (myPart).<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(trueLeaves);
<a name="l03444"></a>03444 
<a name="l03445"></a>03445   <span class="comment">// setting up containers for the leaves</span>
<a name="l03446"></a>03446   <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l03447"></a>03447   <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it;
<a name="l03448"></a>03448   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l03449"></a>03449 
<a name="l03450"></a>03450   <span class="keywordtype">double</span> trueF; <span class="comment">//true density</span>
<a name="l03451"></a>03451   ivector temp;
<a name="l03452"></a>03452   
<a name="l03453"></a>03453   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l03454"></a>03454   dpIAE=0.0;
<a name="l03455"></a>03455 
<a name="l03456"></a>03456   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l03457"></a>03457   <span class="keywordtype">int</span> allN = n + <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>();
<a name="l03458"></a>03458   <span class="comment">//go through all the leaves in this</span>
<a name="l03459"></a>03459   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03460"></a>03460     ivector thisBox = (*it)-&gt;getBox();
<a name="l03461"></a>03461     <span class="comment">//cout &lt;&lt; &quot;====checking &quot; &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l03462"></a>03462       
<a name="l03463"></a>03463     <span class="comment">// get the height of this leaf</span>
<a name="l03464"></a>03464     <span class="keywordtype">double</span> fhat;
<a name="l03465"></a>03465     <span class="keywordflow">if</span> ( full == 0 ) { 
<a name="l03466"></a>03466       fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l03467"></a>03467       <span class="comment">//cout &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; (*it)-&gt;nodeVolume() &lt;&lt;&quot;\t&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03468"></a>03468     }
<a name="l03469"></a>03469     <span class="keywordflow">else</span> {
<a name="l03470"></a>03470       <span class="keywordtype">size_t</span> totalCount = (*it)-&gt;getCounter() + (*it)-&gt;getVcounter();
<a name="l03471"></a>03471       fhat = totalCount/(*it)-&gt;nodeVolume()/allN;
<a name="l03472"></a>03472     }
<a name="l03473"></a>03473 
<a name="l03474"></a>03474     <span class="comment">//cout &lt;&lt; full &lt;&lt; &quot;\tfhat for box &quot; &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03475"></a>03475 
<a name="l03476"></a>03476     <span class="keywordtype">size_t</span> L = 0;
<a name="l03477"></a>03477     <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l03478"></a>03478       <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l03479"></a>03479       ivector trueBox = (*trueIt)-&gt;getBox();
<a name="l03480"></a>03480 
<a name="l03481"></a>03481       <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
<a name="l03482"></a>03482       <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
<a name="l03483"></a>03483       <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF  &lt;&lt; endl;</span>
<a name="l03484"></a>03484       
<a name="l03485"></a>03485       <span class="comment">// if this is contained in trueBox</span>
<a name="l03486"></a>03486       <span class="keywordflow">if</span> ( (*it)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*it)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l03487"></a>03487         <span class="comment">//use the volume of this</span>
<a name="l03488"></a>03488         real r = ((*it)-&gt;nodeVolume())*(fhat - trueF);
<a name="l03489"></a>03489         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03490"></a>03490         accumulate(dpIAE, abs(r), 1.0);
<a name="l03491"></a>03491         <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
<a name="l03492"></a>03492         <span class="comment">//think about this later</span>
<a name="l03493"></a>03493       } <span class="comment">//end of if this box is in trueBox</span>
<a name="l03494"></a>03494       
<a name="l03495"></a>03495       <span class="comment">// if this contains trueBox</span>
<a name="l03496"></a>03496       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*it)-&gt;getBox()) {
<a name="l03497"></a>03497         <span class="comment">//use the volume of trueBox</span>
<a name="l03498"></a>03498         real r = ((*trueIt)-&gt;nodeVolume())*(fhat - trueF);
<a name="l03499"></a>03499         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03500"></a>03500         accumulate(dpIAE, abs(r), 1.0);
<a name="l03501"></a>03501       } <span class="comment">//end of if trueBox is in this box</span>
<a name="l03502"></a>03502       
<a name="l03503"></a>03503       <span class="comment">// if this is partially contained in trueBox </span>
<a name="l03504"></a>03504       <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
<a name="l03505"></a>03505         <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
<a name="l03506"></a>03506           <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
<a name="l03507"></a>03507           real r = volume*(fhat - trueF);
<a name="l03508"></a>03508           <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03509"></a>03509           accumulate(dpIAE, abs(r), 1.0);
<a name="l03510"></a>03510         }
<a name="l03511"></a>03511       }
<a name="l03512"></a>03512       L++;
<a name="l03513"></a>03513     } <span class="comment">// end of going through trueBoxes</span>
<a name="l03514"></a>03514   } <span class="comment">// end of going through thisBoxes</span>
<a name="l03515"></a>03515   
<a name="l03516"></a>03516    <span class="comment">//cast dotprecision to real</span>
<a name="l03517"></a>03517    real unifIAE = rnd(dpIAE);
<a name="l03518"></a>03518    <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; unifIAE &lt;&lt; endl;</span>
<a name="l03519"></a>03519   <span class="keywordflow">return</span> unifIAE;
<a name="l03520"></a>03520 
<a name="l03521"></a>03521 }
<a name="l03522"></a>03522   
<a name="l03523"></a>03523   
<a name="l03524"></a>03524   
<a name="l03525"></a>03525   
<a name="l03526"></a>03526   
<a name="l03527"></a>03527 
<a name="l03530"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a034c61becd57f5d282435f5881950035">03530</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a034c61becd57f5d282435f5881950035">AdaptiveHistogramValidation::getFinMixIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt)
<a name="l03531"></a>03531 {
<a name="l03532"></a>03532   <span class="comment">//---------fill in containers for names, volumes and heights of leaves</span>
<a name="l03533"></a>03533   <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03534"></a>03534   <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03535"></a>03535   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l03536"></a>03536   <span class="comment">//a container for the counts</span>
<a name="l03537"></a>03537   <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l03538"></a>03538   <span class="comment">//a container for the boxes</span>
<a name="l03539"></a>03539   vector&lt;ivector&gt; boxes; vector&lt;ivector&gt;::iterator itBoxes;
<a name="l03540"></a>03540   <span class="comment">//a container for the volumes</span>
<a name="l03541"></a>03541   vector&lt;double&gt; volumes;
<a name="l03542"></a>03542   <span class="comment">// a container for fhat</span>
<a name="l03543"></a>03543   vector&lt;double&gt; fhat; vector&lt;double&gt;::iterator itFhat;
<a name="l03544"></a>03544   <span class="comment">//number of points</span>
<a name="l03545"></a>03545   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l03546"></a>03546             
<a name="l03547"></a>03547   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03548"></a>03548     <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l03549"></a>03549     <span class="comment">// get the counts in all the leaves</span>
<a name="l03550"></a>03550      counts.push_back((*it)-&gt;getCounter());
<a name="l03551"></a>03551      <span class="comment">// get the boxes from all the leaves</span>
<a name="l03552"></a>03552      boxes.push_back((*it)-&gt;getBox());
<a name="l03553"></a>03553      <span class="comment">// get the volumes of all the leaves</span>
<a name="l03554"></a>03554      volumes.push_back((*it)-&gt;nodeVolume());
<a name="l03555"></a>03555      <span class="comment">// get fhat for all leaves</span>
<a name="l03556"></a>03556      fhat.push_back(((*it)-&gt;getCounter())/((*it)-&gt;nodeVolume())/n);
<a name="l03557"></a>03557   } <span class="comment">// end of iterating through leaves </span>
<a name="l03558"></a>03558   
<a name="l03559"></a>03559   <span class="comment">//----------------get the IAE-----------------------------------------------</span>
<a name="l03560"></a>03560   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l03561"></a>03561   dpIAE = 0.0;
<a name="l03562"></a>03562   <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
<a name="l03563"></a>03563   
<a name="l03564"></a>03564   gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l03565"></a>03565   <span class="keywordtype">double</span> result = 0.0;
<a name="l03566"></a>03566   <span class="keywordtype">double</span> error;
<a name="l03567"></a>03567   gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l03568"></a>03568   
<a name="l03569"></a>03569   F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l03570"></a>03570   F.params =  &amp;mixt;
<a name="l03571"></a>03571   
<a name="l03572"></a>03572   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l03573"></a>03573     mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[j];
<a name="l03574"></a>03574     rvector xuppVec = Sup(boxes[j]);
<a name="l03575"></a>03575     <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l03576"></a>03576     rvector xlowVec = Inf(boxes[j]);
<a name="l03577"></a>03577     <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l03578"></a>03578     gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l03579"></a>03579     accumulate(dpIAE, result, 1.0);
<a name="l03580"></a>03580   }
<a name="l03581"></a>03581   
<a name="l03582"></a>03582 <span class="comment">/*  // Accounting for the boundaries</span>
<a name="l03583"></a>03583 <span class="comment">  rvector xuppVec1 = Sup(boxes[Nbin-1]);</span>
<a name="l03584"></a>03584 <span class="comment">  double xupp1 = _double(xuppVec1[1]);</span>
<a name="l03585"></a>03585 <span class="comment">  rvector xlowVec1 = Inf(boxes[0]);</span>
<a name="l03586"></a>03586 <span class="comment">  double xlow1 = _double(xlowVec1[1]);</span>
<a name="l03587"></a>03587 <span class="comment">  dpIAEBoun = dpFinMixIAEBoun(xlow1, xupp1, Weight, Mean, Sigma);</span>
<a name="l03588"></a>03588 <span class="comment">  dpIAE += dpIAEBoun;</span>
<a name="l03589"></a>03589 <span class="comment">*/</span>  
<a name="l03590"></a>03590   <span class="comment">// cast dot precision to real</span>
<a name="l03591"></a>03591   real FinMixIAE = rnd(dpIAE);
<a name="l03592"></a>03592   
<a name="l03593"></a>03593   <span class="comment">// free the workspace</span>
<a name="l03594"></a>03594   gsl_integration_workspace_free (w);
<a name="l03595"></a>03595   
<a name="l03596"></a>03596   <span class="keywordflow">return</span> FinMixIAE;
<a name="l03597"></a>03597 }
<a name="l03598"></a>03598   
<a name="l03601"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">03601</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#ab032205bb13623930c84ff142f565ac5">AdaptiveHistogramValidation::get2DIAE</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval))
<a name="l03602"></a>03602 {
<a name="l03603"></a>03603   <span class="comment">//number of points</span>
<a name="l03604"></a>03604   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l03605"></a>03605    
<a name="l03606"></a>03606   <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03607"></a>03607   <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03608"></a>03608   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l03609"></a>03609 
<a name="l03610"></a>03610   <span class="comment">// set up for taylor integration</span>
<a name="l03611"></a>03611  <span class="comment">// taylor::dim2taylor (*testpnt)(taylor::dim2taylor_vector, interval);</span>
<a name="l03612"></a>03612   real tol=1e-6;
<a name="l03613"></a>03613   <span class="keywordtype">int</span> o=16;
<a name="l03614"></a>03614  <span class="comment">// testpnt=BiGOP;</span>
<a name="l03615"></a>03615 
<a name="l03616"></a>03616   real result = 0; 
<a name="l03617"></a>03617   <span class="keywordflow">for</span> (it=leaves.begin(); it &lt; leaves.end(); it++)
<a name="l03618"></a>03618   { 
<a name="l03619"></a>03619     <span class="comment">//get fhat  </span>
<a name="l03620"></a>03620      interval fhat = interval(real((*it)-&gt;getCounter()/
<a name="l03621"></a>03621                              (((*it)-&gt;nodeVolume())*1.0*n))); 
<a name="l03622"></a>03622      
<a name="l03623"></a>03623     <span class="comment">//get domain</span>
<a name="l03624"></a>03624     ivector domain = (*it)-&gt;getBox();
<a name="l03625"></a>03625      <span class="comment">// get the integrated absolute error at this box</span>
<a name="l03626"></a>03626     interval resultInt = <a class="code" href="Int_8h.shtml#a0de7ac342c4093f00c8fd6b899e54d87">integrateWithSplitting</a>(testpnt, fhat, domain, o, tol);    
<a name="l03627"></a>03627      <span class="comment">//add the errors    </span>
<a name="l03628"></a>03628      result += Sup(resultInt);
<a name="l03629"></a>03629    }
<a name="l03630"></a>03630   <span class="comment">//accounting for boundaries - will have to think about this later perhaps</span>
<a name="l03631"></a>03631   <span class="comment">//accumulate(dpIAE,gsl_cdf_ugaussian_P(xlow[0]),1.0);</span>
<a name="l03632"></a>03632   <span class="comment">//accumulate(dpIAE,gsl_cdf_ugaussian_Q(xupp[nLeaves-1]),1.0);</span>
<a name="l03633"></a>03633   <span class="keywordflow">return</span> result;  
<a name="l03634"></a>03634 }
<a name="l03635"></a>03635 
<a name="l03636"></a>03636 <span class="comment">// For samples drawn from MappedSPnodes</span>
<a name="l03637"></a>03637 <span class="comment">// method for data splitting and hold out estimation</span>
<a name="l03638"></a>03638 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l03639"></a>03639 <span class="comment">// by prioritising which node to split first</span>
<a name="l03640"></a>03640 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l03641"></a>03641 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l03642"></a>03642 <span class="comment">// or until a stopping criteria is fulfilled</span>
<a name="l03643"></a>03643 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l03644"></a>03644 <span class="comment">// makes its own random number generator</span>
<a name="l03645"></a>03645 <span class="comment">/*</span>
<a name="l03646"></a>03646 <span class="comment">AdaptiveHistogramVCollator AdaptiveHistogramValidation::prioritySplitAndEstimate(</span>
<a name="l03647"></a>03647 <span class="comment">                  const NodeCompObjVal&amp; compTest,</span>
<a name="l03648"></a>03648 <span class="comment">                  const HistEvalObjVal&amp; he, LOGGING_LEVEL logging,</span>
<a name="l03649"></a>03649 <span class="comment">                           size_t minChildPoints, double minVolB, </span>
<a name="l03650"></a>03650 <span class="comment">                  bool stopCrit, int maxCheck, size_t hist,</span>
<a name="l03651"></a>03651 <span class="comment">                  size_t maxLeafNodes, RealMappedSPnode&amp; nodeEst)</span>
<a name="l03652"></a>03652 <span class="comment">{</span>
<a name="l03653"></a>03653 <span class="comment">    gsl_rng * rgsl = NULL;</span>
<a name="l03654"></a>03654 <span class="comment"></span>
<a name="l03655"></a>03655 <span class="comment">    AdaptiveHistogramVCollator coll;</span>
<a name="l03656"></a>03656 <span class="comment"></span>
<a name="l03657"></a>03657 <span class="comment">    try {</span>
<a name="l03658"></a>03658 <span class="comment">        // set up a random number generator for uniform rvs</span>
<a name="l03659"></a>03659 <span class="comment">        const gsl_rng_type * tgsl;</span>
<a name="l03660"></a>03660 <span class="comment">        // set the library variables *gsl_rng_default and</span>
<a name="l03661"></a>03661 <span class="comment">        // gsl_rng_default_seed to default environmental vars</span>
<a name="l03662"></a>03662 <span class="comment">        gsl_rng_env_setup();</span>
<a name="l03663"></a>03663 <span class="comment">        tgsl = gsl_rng_default; // make tgsl the default type</span>
<a name="l03664"></a>03664 <span class="comment">        rgsl = gsl_rng_alloc (tgsl); // set up with default seed</span>
<a name="l03665"></a>03665 <span class="comment"></span>
<a name="l03666"></a>03666 <span class="comment">        // call the function with a random number generator</span>
<a name="l03667"></a>03667 <span class="comment">        coll = prioritySplitAndEstimate(compTest, he, logging, minChildPoints, </span>
<a name="l03668"></a>03668 <span class="comment">                        minVolB, rgsl, stopCrit,maxCheck, hist,</span>
<a name="l03669"></a>03669 <span class="comment">                        maxLeafNodes, nodeEst);</span>
<a name="l03670"></a>03670 <span class="comment">        gsl_rng_free (rgsl);</span>
<a name="l03671"></a>03671 <span class="comment">    }</span>
<a name="l03672"></a>03672 <span class="comment"></span>
<a name="l03673"></a>03673 <span class="comment">    catch (bad_alloc&amp; ba) {</span>
<a name="l03674"></a>03674 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l03675"></a>03675 <span class="comment">        string oldmsg(ba.what());</span>
<a name="l03676"></a>03676 <span class="comment">        string msg = &quot;Error allocating memory in priority stage split.  Orginal error: &quot;</span>
<a name="l03677"></a>03677 <span class="comment">                                     + oldmsg;</span>
<a name="l03678"></a>03678 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l03679"></a>03679 <span class="comment">        throw HistException(msg);</span>
<a name="l03680"></a>03680 <span class="comment">    }</span>
<a name="l03681"></a>03681 <span class="comment">    catch (HistException&amp; e) {</span>
<a name="l03682"></a>03682 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l03683"></a>03683 <span class="comment">        string oldmsg(e.what());</span>
<a name="l03684"></a>03684 <span class="comment">        string msg = &quot;HistException error in priority stage split.  Orginal error: &quot;</span>
<a name="l03685"></a>03685 <span class="comment">                                    + oldmsg;</span>
<a name="l03686"></a>03686 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l03687"></a>03687 <span class="comment">        throw HistException(msg);</span>
<a name="l03688"></a>03688 <span class="comment">    }</span>
<a name="l03689"></a>03689 <span class="comment">    catch (SPnodeException&amp; spe) {</span>
<a name="l03690"></a>03690 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l03691"></a>03691 <span class="comment">        string oldmsg(spe.what());</span>
<a name="l03692"></a>03692 <span class="comment">        string msg = &quot;SPnodeException in priority stage split.  Orginal error: &quot;</span>
<a name="l03693"></a>03693 <span class="comment">                                    + oldmsg;</span>
<a name="l03694"></a>03694 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l03695"></a>03695 <span class="comment">        throw HistException(msg);</span>
<a name="l03696"></a>03696 <span class="comment">    }</span>
<a name="l03697"></a>03697 <span class="comment">    catch (exception&amp; e) {</span>
<a name="l03698"></a>03698 <span class="comment">        if (NULL != rgsl) gsl_rng_free(rgsl); // free the random number generator</span>
<a name="l03699"></a>03699 <span class="comment">        string oldmsg(e.what());</span>
<a name="l03700"></a>03700 <span class="comment">        string msg = &quot;Error in priority split.  Orginal error: &quot; + oldmsg;</span>
<a name="l03701"></a>03701 <span class="comment">        std::cout &lt;&lt; msg &lt;&lt; std::endl;</span>
<a name="l03702"></a>03702 <span class="comment">        throw HistException(msg);</span>
<a name="l03703"></a>03703 <span class="comment">    }</span>
<a name="l03704"></a>03704 <span class="comment">   </span>
<a name="l03705"></a>03705 <span class="comment">   return coll;</span>
<a name="l03706"></a>03706 <span class="comment">}</span>
<a name="l03707"></a>03707 <span class="comment">*/</span>
<a name="l03708"></a>03708 
<a name="l03709"></a>03709 <span class="comment">// Get the IAE for a finite gaussian mixture distribution using interval </span>
<a name="l03710"></a>03710 <span class="comment">// techniques.</span>
<a name="l03711"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">03711</a> cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#aa8b89b93450dea8e464eac31d67c78d1">AdaptiveHistogramValidation::getFinMixIntervalIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg, <span class="keywordtype">bool</span> full)
<a name="l03712"></a>03712 {
<a name="l03713"></a>03713   <span class="comment">//cout &lt;&lt; &quot;get finmix interval IAE&quot; &lt;&lt; endl;</span>
<a name="l03714"></a>03714   
<a name="l03715"></a>03715   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l03716"></a>03716   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l03717"></a>03717   <span class="keywordtype">int</span> <a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a> = n + <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a811e21423987027452237cabf38c008c" title="Pointer to the root node of the subpaving tree.">rootVpaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>();
<a name="l03718"></a>03718   
<a name="l03719"></a>03719   <span class="comment">// need to iterate through the leaves</span>
<a name="l03720"></a>03720   <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03721"></a>03721   <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03722"></a>03722   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l03723"></a>03723   
<a name="l03724"></a>03724   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l03725"></a>03725   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03726"></a>03726     <span class="comment">//cout &lt;&lt; &quot;-----IAE for &quot; &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l03727"></a>03727     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l03728"></a>03728     vector&lt;intervalw&gt; rootVec;
<a name="l03729"></a>03729     
<a name="l03730"></a>03730     <span class="comment">//get the height in this leaf node</span>
<a name="l03731"></a>03731     <span class="keywordtype">double</span> fhat;
<a name="l03732"></a>03732     <span class="keywordflow">if</span> ( full == 0 ) { 
<a name="l03733"></a>03733       fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l03734"></a>03734       <span class="comment">//cout &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; (*it)-&gt;nodeVolume() &lt;&lt;&quot;\t&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03735"></a>03735     }
<a name="l03736"></a>03736     <span class="keywordflow">else</span> {
<a name="l03737"></a>03737       <span class="keywordtype">size_t</span> totalCount = (*it)-&gt;getCounter() + (*it)-&gt;getVcounter();
<a name="l03738"></a>03738       fhat = totalCount/(*it)-&gt;nodeVolume()/<a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a>;
<a name="l03739"></a>03739     }
<a name="l03740"></a>03740 
<a name="l03741"></a>03741     <span class="comment">//get the box of this leaf node</span>
<a name="l03742"></a>03742     ivector thisBox = (*it)-&gt;getBox();
<a name="l03743"></a>03743     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l03744"></a>03744     
<a name="l03745"></a>03745     <span class="comment">//---------find the root at this domain</span>
<a name="l03746"></a>03746     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l03747"></a>03747     rvector lb = Inf(thisBox);
<a name="l03748"></a>03748     rvector ub = Sup(thisBox);
<a name="l03749"></a>03749     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l03750"></a>03750     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l03751"></a>03751     
<a name="l03752"></a>03752     <span class="comment">// find the root</span>
<a name="l03753"></a>03753     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l03754"></a>03754     <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 
<a name="l03755"></a>03755 
<a name="l03756"></a>03756     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l03757"></a>03757     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l03758"></a>03758     <span class="comment">//this domain</span>
<a name="l03759"></a>03759     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l03760"></a>03760       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l03761"></a>03761       <span class="comment">//get the L1 error</span>
<a name="l03762"></a>03762       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03763"></a>03763       <span class="comment">//add to totalArea</span>
<a name="l03764"></a>03764       totalArea += diffArea;
<a name="l03765"></a>03765     } <span class="comment">//end of rootVec is empty</span>
<a name="l03766"></a>03766 
<a name="l03767"></a>03767     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l03768"></a>03768       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l03769"></a>03769       <span class="comment">// make the elements in vector unique</span>
<a name="l03770"></a>03770       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l03771"></a>03771         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l03772"></a>03772         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l03773"></a>03773         uniqueRootVec.push_back(rootVec[i]);
<a name="l03774"></a>03774         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l03775"></a>03775         <span class="comment">//now check for uniqueness</span>
<a name="l03776"></a>03776         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l03777"></a>03777           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l03778"></a>03778           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l03779"></a>03779           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l03780"></a>03780             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l03781"></a>03781             uniqueRootVec.pop_back(); }
<a name="l03782"></a>03782         }
<a name="l03783"></a>03783       }
<a name="l03784"></a>03784       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l03785"></a>03785       
<a name="l03786"></a>03786       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l03787"></a>03787       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l03788"></a>03788         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l03789"></a>03789         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l03790"></a>03790         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l03791"></a>03791             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l03792"></a>03792           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l03793"></a>03793           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03794"></a>03794           totalArea += diffArea;
<a name="l03795"></a>03795         }
<a name="l03796"></a>03796         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l03797"></a>03797           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l03798"></a>03798           <span class="comment">//get the left sub-interval</span>
<a name="l03799"></a>03799           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l03800"></a>03800           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l03801"></a>03801           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03802"></a>03802           totalArea += diffArea;
<a name="l03803"></a>03803           
<a name="l03804"></a>03804           <span class="comment">//get the right sub-interval</span>
<a name="l03805"></a>03805           <span class="comment">//get the left sub-interval</span>
<a name="l03806"></a>03806           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l03807"></a>03807           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l03808"></a>03808           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03809"></a>03809           totalArea += diffArea;
<a name="l03810"></a>03810         }
<a name="l03811"></a>03811       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l03812"></a>03812 
<a name="l03813"></a>03813         <span class="comment">// if there is more than 1 root</span>
<a name="l03814"></a>03814       <span class="keywordflow">else</span> {
<a name="l03815"></a>03815         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l03816"></a>03816         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l03817"></a>03817           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l03818"></a>03818         <span class="comment">//}</span>
<a name="l03819"></a>03819 
<a name="l03820"></a>03820         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l03821"></a>03821         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l03822"></a>03822         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l03823"></a>03823           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l03824"></a>03824           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l03825"></a>03825           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l03826"></a>03826           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03827"></a>03827           totalArea += diffArea;
<a name="l03828"></a>03828           
<a name="l03829"></a>03829           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l03830"></a>03830           <span class="comment">// get the sub-itnervals</span>
<a name="l03831"></a>03831           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l03832"></a>03832           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l03833"></a>03833             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l03834"></a>03834             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l03835"></a>03835               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l03836"></a>03836               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l03837"></a>03837               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03838"></a>03838               totalArea += diffArea;
<a name="l03839"></a>03839             }
<a name="l03840"></a>03840             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l03841"></a>03841               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l03842"></a>03842               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l03843"></a>03843               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03844"></a>03844               totalArea += diffArea;
<a name="l03845"></a>03845             }
<a name="l03846"></a>03846           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l03847"></a>03847           
<a name="l03848"></a>03848           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l03849"></a>03849           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l03850"></a>03850             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l03851"></a>03851             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l03852"></a>03852             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l03853"></a>03853             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03854"></a>03854             totalArea += diffArea;
<a name="l03855"></a>03855           }
<a name="l03856"></a>03856           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l03857"></a>03857             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l03858"></a>03858             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l03859"></a>03859             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03860"></a>03860             totalArea += diffArea;
<a name="l03861"></a>03861           } 
<a name="l03862"></a>03862         } <span class="comment">// end of if first root is the boundary</span>
<a name="l03863"></a>03863         
<a name="l03864"></a>03864         <span class="keywordflow">else</span> {
<a name="l03865"></a>03865           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l03866"></a>03866           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l03867"></a>03867           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l03868"></a>03868           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l03869"></a>03869           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03870"></a>03870           totalArea += diffArea;
<a name="l03871"></a>03871           
<a name="l03872"></a>03872           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l03873"></a>03873           <span class="comment">// get the sub-itnervals</span>
<a name="l03874"></a>03874           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l03875"></a>03875           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l03876"></a>03876             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l03877"></a>03877               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l03878"></a>03878               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l03879"></a>03879               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l03880"></a>03880               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03881"></a>03881               totalArea += diffArea;
<a name="l03882"></a>03882             }
<a name="l03883"></a>03883             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l03884"></a>03884               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l03885"></a>03885               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l03886"></a>03886               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l03887"></a>03887               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03888"></a>03888               totalArea += diffArea;
<a name="l03889"></a>03889             }
<a name="l03890"></a>03890           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l03891"></a>03891           
<a name="l03892"></a>03892           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l03893"></a>03893           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l03894"></a>03894             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l03895"></a>03895             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l03896"></a>03896             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l03897"></a>03897             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03898"></a>03898           }
<a name="l03899"></a>03899           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l03900"></a>03900             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l03901"></a>03901             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l03902"></a>03902             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l03903"></a>03903             totalArea += diffArea;
<a name="l03904"></a>03904           } 
<a name="l03905"></a>03905         } <span class="comment">// end of first root is not the boundary</span>
<a name="l03906"></a>03906       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l03907"></a>03907     } <span class="comment">// end of rootVec is not empty</span>
<a name="l03908"></a>03908   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l03909"></a>03909   
<a name="l03910"></a>03910   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l03911"></a>03911   <span class="keywordflow">return</span> totalArea;
<a name="l03912"></a>03912 }
<a name="l03913"></a>03913 
<a name="l03914"></a>03914 <span class="comment">/*</span>
<a name="l03915"></a>03915 <span class="comment">// get the IAE for mapped functions</span>
<a name="l03916"></a>03916 <span class="comment">real AdaptiveHistogramValidation::getMappedFunctionIAE(RealMappedSPnode&amp; nodeEst, bool full)</span>
<a name="l03917"></a>03917 <span class="comment">{</span>
<a name="l03918"></a>03918 <span class="comment">  ivector thisBox = getSubPaving()-&gt;getBox();</span>
<a name="l03919"></a>03919 <span class="comment">  RealMappedSPnode histMap(thisBox);</span>
<a name="l03920"></a>03920 <span class="comment">  int n = rootVpaving-&gt;getCounter();</span>
<a name="l03921"></a>03921 <span class="comment">  int allN = n + rootVpaving-&gt;getVcounter();</span>
<a name="l03922"></a>03922 <span class="comment">  </span>
<a name="l03923"></a>03923 <span class="comment">  // split the root box into the shape of myHist</span>
<a name="l03924"></a>03924 <span class="comment">  string leafLevelString = getLeafLevelsString();</span>
<a name="l03925"></a>03925 <span class="comment">  int depth = atoi(leafLevelString.c_str());</span>
<a name="l03926"></a>03926 <span class="comment">  if (depth != 0) {</span>
<a name="l03927"></a>03927 <span class="comment">    histMap.splitToShape(leafLevelString); </span>
<a name="l03928"></a>03928 <span class="comment">  }</span>
<a name="l03929"></a>03929 <span class="comment"></span>
<a name="l03930"></a>03930 <span class="comment">  //container to store heights for histNodes </span>
<a name="l03931"></a>03931 <span class="comment">  vector&lt; RangeCollectionClass&lt;real&gt; &gt; heightHist;</span>
<a name="l03932"></a>03932 <span class="comment">  //get all the nodes in the histogram </span>
<a name="l03933"></a>03933 <span class="comment">  SPSVnodePtrs histNodes;</span>
<a name="l03934"></a>03934 <span class="comment">  SPSVnodePtrsItr histNodeIt;</span>
<a name="l03935"></a>03935 <span class="comment">  getSubPaving()-&gt;getAllNodes(histNodes); </span>
<a name="l03936"></a>03936 <span class="comment"></span>
<a name="l03937"></a>03937 <span class="comment">  //traverse the tree and get the heights </span>
<a name="l03938"></a>03938 <span class="comment">  //cout &lt;&lt; &quot;get the height at each node&quot; &lt;&lt; endl;</span>
<a name="l03939"></a>03939 <span class="comment">  for (histNodeIt = histNodes.begin(); histNodeIt &lt; histNodes.end(); </span>
<a name="l03940"></a>03940 <span class="comment">      histNodeIt++) {</span>
<a name="l03941"></a>03941 <span class="comment">        </span>
<a name="l03942"></a>03942 <span class="comment">    //get the height in this leaf node</span>
<a name="l03943"></a>03943 <span class="comment">    real fhat;</span>
<a name="l03944"></a>03944 <span class="comment">    if ( full == 0 ) { </span>
<a name="l03945"></a>03945 <span class="comment">      fhat = (*histNodeIt)-&gt;getCounter()/((*histNodeIt)-&gt;nodeVolume()*n);</span>
<a name="l03946"></a>03946 <span class="comment">      //cout &lt;&lt; (*histNodeIt)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; ((*histNodeIt)-&gt;nodeVolume())&lt;&lt; &quot;\t&quot; &lt;&lt; n &lt;&lt; endl;</span>
<a name="l03947"></a>03947 <span class="comment">    }</span>
<a name="l03948"></a>03948 <span class="comment">    else {</span>
<a name="l03949"></a>03949 <span class="comment">      size_t totalCount = (*histNodeIt)-&gt;getCounter() + (*histNodeIt)-&gt;getVcounter();</span>
<a name="l03950"></a>03950 <span class="comment">      fhat = totalCount/((*histNodeIt)-&gt;nodeVolume()*allN);</span>
<a name="l03951"></a>03951 <span class="comment">      //cout &lt;&lt; totalCount &lt;&lt; &quot;\t&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03952"></a>03952 <span class="comment">    }</span>
<a name="l03953"></a>03953 <span class="comment">    </span>
<a name="l03954"></a>03954 <span class="comment">    //cout &lt;&lt; (*histNodeIt)-&gt;getNodeName() &lt;&lt; &quot;\tfhat: &quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03955"></a>03955 <span class="comment">    </span>
<a name="l03956"></a>03956 <span class="comment">    //get the height at each node</span>
<a name="l03957"></a>03957 <span class="comment">    RangeCollectionClass&lt;real&gt; height(fhat);</span>
<a name="l03958"></a>03958 <span class="comment">    heightHist.push_back(height);</span>
<a name="l03959"></a>03959 <span class="comment">  } // end of traversing all nodes in histogram</span>
<a name="l03960"></a>03960 <span class="comment">  </span>
<a name="l03961"></a>03961 <span class="comment">  //allocate ranges for histNode</span>
<a name="l03962"></a>03962 <span class="comment">  histMap.allocateRanges(heightHist, 0);</span>
<a name="l03963"></a>03963 <span class="comment">  return nodeEst.getMappedSPIAE(histMap);</span>
<a name="l03964"></a>03964 <span class="comment">}</span>
<a name="l03965"></a>03965 <span class="comment">*/</span>
<a name="l03966"></a>03966 
<a name="l03967"></a>03967 
<a name="l03968"></a>03968 <span class="comment">// ----------------------------- non member functions</span>
<a name="l03969"></a>03969 <span class="comment">//Output all boxes in AdaptiveHistogramValidation adh</span>
<a name="l03970"></a><a class="code" href="adaptivehistogramvalidation_8hpp.shtml#a98003f456bdd16c0db0f055e76ad48ee">03970</a> std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>&amp; adh)
<a name="l03971"></a>03971 {
<a name="l03972"></a>03972     os &lt;&lt; (adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6449b127c16423141cbed8f193cfcf59" title="Return a pointer to the SPSVnode this manages.">getSubPaving</a>())-&gt;nodesAllOutput(os, 1) &lt;&lt; std::endl;
<a name="l03973"></a>03973 
<a name="l03974"></a>03974     <span class="keywordflow">return</span> os;
<a name="l03975"></a>03975 }
<a name="l03976"></a>03976 
<a name="l03977"></a>03977 <span class="comment">// check whether we can stop splitting using some stopping criteria</span>
<a name="l03978"></a><a class="code" href="adaptivehistogramvalidation_8hpp.shtml#a93dfc6a08f529c2082c7ffcf6a5225c8">03978</a> <span class="keywordtype">size_t</span> <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a5028384ac48cd67696b157d497c422fe">checkNumValley</a>(vector&lt;double&gt; vecMaxDelta, vector&lt;int&gt;&amp; valleyHistPos, 
<a name="l03979"></a>03979               <span class="keywordtype">bool</span>&amp; plateau, <span class="keywordtype">int</span>&amp; smallestDeltaInd)
<a name="l03980"></a>03980 {
<a name="l03981"></a>03981   <span class="keywordtype">size_t</span> flagValley = 0;
<a name="l03982"></a>03982   <span class="keywordtype">size_t</span> flagSame = 0;
<a name="l03983"></a>03983   <span class="keywordtype">size_t</span> flagSameLarger = 0;
<a name="l03984"></a>03984   <span class="keywordtype">int</span> Prev = 1;
<a name="l03985"></a>03985   <span class="keywordtype">double</span> currentSmallest = vecMaxDelta[0];
<a name="l03986"></a>03986   
<a name="l03987"></a>03987   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; (vecMaxDelta.size()); i++) {
<a name="l03988"></a>03988     <span class="comment">//cout &lt;&lt; &quot;====current: &quot; &lt;&lt; vecMaxDelta[i] &lt;&lt; &quot;\t previous: &quot; &lt;&lt; vecMaxDelta[i-1] &lt;&lt; &quot;=====&quot; &lt;&lt; endl;</span>
<a name="l03989"></a>03989     <span class="comment">//cout &lt;&lt; &quot;Prev before checks: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l03990"></a>03990     <span class="keywordtype">double</span> stopCritCurrent = vecMaxDelta[i];
<a name="l03991"></a>03991     <span class="keywordtype">double</span> stopCritPrevious = vecMaxDelta[i-1];
<a name="l03992"></a>03992   
<a name="l03993"></a>03993     <span class="comment">// check if it is a local minimum</span>
<a name="l03994"></a>03994     <span class="keywordflow">if</span> ( ((stopCritCurrent &gt; stopCritPrevious) &amp;&amp; (Prev == 1)) ) { <span class="comment">//|| ((flagSame &gt;= 20) &amp;&amp; (Prev == 1)) ) {</span>
<a name="l03995"></a>03995       <span class="comment">//cout &lt;&lt; &quot;larger: &quot; &lt;&lt; (stopCritCurrent &gt; stopCritPrevious) &lt;&lt; &quot;\t Prev: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l03996"></a>03996       
<a name="l03997"></a>03997       <span class="keywordflow">if</span> ( stopCritPrevious &lt;= currentSmallest) {
<a name="l03998"></a>03998         currentSmallest = stopCritPrevious;
<a name="l03999"></a>03999         <span class="comment">//valleyHistPos.pop_back(); //only keep the smallest delta</span>
<a name="l04000"></a>04000         valleyHistPos.push_back(i-1);
<a name="l04001"></a>04001         smallestDeltaInd = i-1;
<a name="l04002"></a>04002         Prev = 0;
<a name="l04003"></a>04003         flagSame = 0;
<a name="l04004"></a>04004         flagValley++;
<a name="l04005"></a>04005         <span class="comment">//cout &lt;&lt; &quot;!!! Local minima previously at split !!! &quot; &lt;&lt; i-1 &lt;&lt; endl;</span>
<a name="l04006"></a>04006       }
<a name="l04007"></a>04007     }
<a name="l04008"></a>04008     <span class="comment">// check if stopCrit is decreasing</span>
<a name="l04009"></a>04009     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stopCritCurrent &lt; stopCritPrevious) {
<a name="l04010"></a>04010       flagSameLarger = 0;
<a name="l04011"></a>04011       <span class="comment">//cout &lt;&lt; &quot;current &lt; previous &quot; &lt;&lt; endl;</span>
<a name="l04012"></a>04012       Prev = 1;
<a name="l04013"></a>04013     }
<a name="l04014"></a>04014     <span class="comment">// if stopCritCurrent = stopCritPrevious</span>
<a name="l04015"></a>04015     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( (stopCritCurrent == stopCritPrevious) &amp;&amp; (Prev == 1) ) {
<a name="l04016"></a>04016       flagSame++;
<a name="l04017"></a>04017       <span class="comment">//cout &lt;&lt; &quot;same smaller: &quot; &lt;&lt; flagSame &lt;&lt; endl;</span>
<a name="l04018"></a>04018     }
<a name="l04019"></a>04019     <span class="comment">//  increasing</span>
<a name="l04020"></a>04020     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( (stopCritCurrent == stopCritPrevious) &amp;&amp; (Prev == 0) ) {
<a name="l04021"></a>04021       flagSameLarger++;
<a name="l04022"></a>04022       <span class="comment">//cout &lt;&lt; &quot;same larger: &quot; &lt;&lt; flagSameLarger &lt;&lt; endl;</span>
<a name="l04023"></a>04023     }
<a name="l04024"></a>04024     <span class="comment">//cout &lt;&lt; &quot;Prev after checks: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l04025"></a>04025     
<a name="l04026"></a>04026     <span class="keywordflow">if</span> (flagSameLarger &gt;= 20) { 
<a name="l04027"></a>04027       plateau = 0;
<a name="l04028"></a>04028       <span class="comment">//cout &lt;&lt; &quot;Perhaps have arrived at a plateau.&quot; &lt;&lt; endl; </span>
<a name="l04029"></a>04029     }
<a name="l04030"></a>04030   }
<a name="l04031"></a>04031   
<a name="l04032"></a>04032   <span class="comment">//cout &lt;&lt; &quot;There are &quot; &lt;&lt; flagValley &lt;&lt; &quot; valleys.&quot; &lt;&lt; endl;</span>
<a name="l04033"></a>04033   <span class="keywordflow">return</span> flagValley;
<a name="l04034"></a>04034 }
<a name="l04035"></a>04035 
<a name="l04036"></a><a class="code" href="adaptivehistogramvalidation_8cpp.shtml#accbf75aa99bc63d1c10e85e3f3f24f3c">04036</a> <span class="keywordtype">void</span> <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#accbf75aa99bc63d1c10e85e3f3f24f3c">getCurrentYatClass</a>(vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; vecRowYatSet,
<a name="l04037"></a>04037 vector&lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; vecColYatSet, 
<a name="l04038"></a>04038 list &lt; <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt; &gt;&amp; listYatSet)
<a name="l04039"></a>04039 {
<a name="l04040"></a>04040   vector&lt; set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt; &gt;::iterator vecIt;
<a name="l04041"></a>04041   
<a name="l04042"></a>04042   <span class="comment">//insert vecRowYatSet and vecColYatSet into listYatSet</span>
<a name="l04043"></a>04043   
<a name="l04044"></a>04044   <span class="keywordflow">if</span> (!vecRowYatSet.empty()) {
<a name="l04045"></a>04045     <span class="keywordflow">for</span> (vecIt =  vecRowYatSet.begin(); vecIt &lt; vecRowYatSet.end(); vecIt++){
<a name="l04046"></a>04046         listYatSet.push_back(*vecIt);
<a name="l04047"></a>04047     }
<a name="l04048"></a>04048   }
<a name="l04049"></a>04049   
<a name="l04050"></a>04050   <span class="keywordflow">if</span> (!vecColYatSet.empty()) {
<a name="l04051"></a>04051     <span class="keywordflow">for</span> (vecIt =  vecColYatSet.begin(); vecIt &lt; vecColYatSet.end(); vecIt++){
<a name="l04052"></a>04052       listYatSet.push_back(*vecIt);
<a name="l04053"></a>04053     }
<a name="l04054"></a>04054   } 
<a name="l04055"></a>04055   
<a name="l04056"></a>04056   <span class="keywordflow">if</span> (!listYatSet.empty()) {
<a name="l04057"></a>04057     <span class="comment">//sort and get unique</span>
<a name="l04058"></a>04058     listYatSet.sort();
<a name="l04059"></a>04059     listYatSet.unique();
<a name="l04060"></a>04060   }
<a name="l04061"></a>04061 }
<a name="l04062"></a>04062 
<a name="l04063"></a>04063 <span class="comment">// Get the true delta for a finite gaussian mixture distribution using interval </span>
<a name="l04064"></a>04064 <span class="comment">// techniques.</span>
<a name="l04065"></a><a class="code" href="adaptivehistogramvalidation_8hpp.shtml#a34c69f3d97096d5aaf88958a1449963b">04065</a> cxsc::interval <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a34c69f3d97096d5aaf88958a1449963b">getFinMixIntervalTrueDelta</a>(
<a name="l04066"></a>04066     <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg, 
<a name="l04067"></a>04067     std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet)
<a name="l04068"></a>04068 {
<a name="l04069"></a>04069   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l04070"></a>04070   interval muValids(0.0);
<a name="l04071"></a>04071 
<a name="l04072"></a>04072   <span class="comment">// need to iterate through the nodes</span>
<a name="l04073"></a>04073   set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt;::iterator it;
<a name="l04074"></a>04074 
<a name="l04075"></a>04075   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l04076"></a>04076   <span class="keywordflow">for</span>(it = YatSet.begin(); it != YatSet.end(); it++) {
<a name="l04077"></a>04077     <span class="comment">//cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;</span>
<a name="l04078"></a>04078     <span class="comment">//cout &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l04079"></a>04079     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l04080"></a>04080     vector&lt;intervalw&gt; rootVec;
<a name="l04081"></a>04081 
<a name="l04082"></a>04082     <span class="comment">//get the box of this leaf node</span>
<a name="l04083"></a>04083     ivector thisBox = (*it)-&gt;getBox();
<a name="l04084"></a>04084     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l04085"></a>04085     
<a name="l04086"></a>04086     <span class="comment">//---------find the root at this domain</span>
<a name="l04087"></a>04087     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l04088"></a>04088     rvector lb = Inf(thisBox);
<a name="l04089"></a>04089     rvector ub = Sup(thisBox);
<a name="l04090"></a>04090     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l04091"></a>04091     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l04092"></a>04092     
<a name="l04093"></a>04093     <span class="comment">// find the root</span>
<a name="l04094"></a>04094     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04095"></a>04095     <span class="keywordtype">double</span> fhat = 0;
<a name="l04096"></a>04096     <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 
<a name="l04097"></a>04097 
<a name="l04098"></a>04098     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l04099"></a>04099     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l04100"></a>04100     <span class="comment">//this domain</span>
<a name="l04101"></a>04101     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l04102"></a>04102       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04103"></a>04103       <span class="comment">//get the L1 error</span>
<a name="l04104"></a>04104       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04105"></a>04105       <span class="comment">//add to totalArea</span>
<a name="l04106"></a>04106       totalArea += diffArea;
<a name="l04107"></a>04107     } <span class="comment">//end of rootVec is empty</span>
<a name="l04108"></a>04108 
<a name="l04109"></a>04109     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l04110"></a>04110       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l04111"></a>04111       <span class="comment">// make the elements in vector unique</span>
<a name="l04112"></a>04112       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l04113"></a>04113         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l04114"></a>04114         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l04115"></a>04115         uniqueRootVec.push_back(rootVec[i]);
<a name="l04116"></a>04116         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l04117"></a>04117         <span class="comment">//now check for uniqueness</span>
<a name="l04118"></a>04118         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l04119"></a>04119           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l04120"></a>04120           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l04121"></a>04121           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l04122"></a>04122             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l04123"></a>04123             uniqueRootVec.pop_back(); }
<a name="l04124"></a>04124         }
<a name="l04125"></a>04125       }
<a name="l04126"></a>04126       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l04127"></a>04127       
<a name="l04128"></a>04128       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l04129"></a>04129       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l04130"></a>04130         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l04131"></a>04131         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l04132"></a>04132         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l04133"></a>04133             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l04134"></a>04134           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l04135"></a>04135           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04136"></a>04136           totalArea += diffArea;
<a name="l04137"></a>04137         }
<a name="l04138"></a>04138         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l04139"></a>04139           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l04140"></a>04140           <span class="comment">//get the left sub-interval</span>
<a name="l04141"></a>04141           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l04142"></a>04142           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l04143"></a>04143           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04144"></a>04144           totalArea += diffArea;
<a name="l04145"></a>04145           
<a name="l04146"></a>04146           <span class="comment">//get the right sub-interval</span>
<a name="l04147"></a>04147           <span class="comment">//get the left sub-interval</span>
<a name="l04148"></a>04148           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l04149"></a>04149           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l04150"></a>04150           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04151"></a>04151           totalArea += diffArea;
<a name="l04152"></a>04152         }
<a name="l04153"></a>04153       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l04154"></a>04154 
<a name="l04155"></a>04155         <span class="comment">// if there is more than 1 root</span>
<a name="l04156"></a>04156       <span class="keywordflow">else</span> {
<a name="l04157"></a>04157         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l04158"></a>04158         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l04159"></a>04159           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l04160"></a>04160         <span class="comment">//}</span>
<a name="l04161"></a>04161 
<a name="l04162"></a>04162         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l04163"></a>04163         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l04164"></a>04164         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l04165"></a>04165           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04166"></a>04166           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l04167"></a>04167           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04168"></a>04168           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04169"></a>04169           totalArea += diffArea;
<a name="l04170"></a>04170           
<a name="l04171"></a>04171           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04172"></a>04172           <span class="comment">// get the sub-itnervals</span>
<a name="l04173"></a>04173           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04174"></a>04174           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04175"></a>04175             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l04176"></a>04176             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04177"></a>04177               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04178"></a>04178               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04179"></a>04179               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04180"></a>04180               totalArea += diffArea;
<a name="l04181"></a>04181             }
<a name="l04182"></a>04182             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04183"></a>04183               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04184"></a>04184               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04185"></a>04185               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04186"></a>04186               totalArea += diffArea;
<a name="l04187"></a>04187             }
<a name="l04188"></a>04188           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l04189"></a>04189           
<a name="l04190"></a>04190           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04191"></a>04191           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04192"></a>04192             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04193"></a>04193             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04194"></a>04194             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04195"></a>04195             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04196"></a>04196             totalArea += diffArea;
<a name="l04197"></a>04197           }
<a name="l04198"></a>04198           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04199"></a>04199             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04200"></a>04200             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04201"></a>04201             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04202"></a>04202             totalArea += diffArea;
<a name="l04203"></a>04203           } 
<a name="l04204"></a>04204         } <span class="comment">// end of if first root is the boundary</span>
<a name="l04205"></a>04205         
<a name="l04206"></a>04206         <span class="keywordflow">else</span> {
<a name="l04207"></a>04207           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l04208"></a>04208           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l04209"></a>04209           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l04210"></a>04210           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04211"></a>04211           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04212"></a>04212           totalArea += diffArea;
<a name="l04213"></a>04213           
<a name="l04214"></a>04214           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04215"></a>04215           <span class="comment">// get the sub-itnervals</span>
<a name="l04216"></a>04216           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04217"></a>04217           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04218"></a>04218             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04219"></a>04219               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l04220"></a>04220               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04221"></a>04221               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04222"></a>04222               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04223"></a>04223               totalArea += diffArea;
<a name="l04224"></a>04224             }
<a name="l04225"></a>04225             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04226"></a>04226               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l04227"></a>04227               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04228"></a>04228               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04229"></a>04229               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04230"></a>04230               totalArea += diffArea;
<a name="l04231"></a>04231             }
<a name="l04232"></a>04232           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l04233"></a>04233           
<a name="l04234"></a>04234           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04235"></a>04235           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04236"></a>04236             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04237"></a>04237             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04238"></a>04238             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04239"></a>04239             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04240"></a>04240           }
<a name="l04241"></a>04241           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04242"></a>04242             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04243"></a>04243             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04244"></a>04244             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04245"></a>04245             totalArea += diffArea;
<a name="l04246"></a>04246           } 
<a name="l04247"></a>04247         } <span class="comment">// end of first root is not the boundary</span>
<a name="l04248"></a>04248       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l04249"></a>04249     } <span class="comment">// end of rootVec is not empty</span>
<a name="l04250"></a>04250     
<a name="l04251"></a>04251     <span class="comment">// get the empirical measure of the validation data at this node</span>
<a name="l04252"></a>04252     interval muValid((*it)-&gt;getVemp(), (*it)-&gt;getVemp());
<a name="l04253"></a>04253     muValids = muValids + muValid;
<a name="l04254"></a>04254   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l04255"></a>04255 
<a name="l04256"></a>04256   <span class="comment">// get the difference</span>
<a name="l04257"></a>04257   interval trueDelta = totalArea - muValids;
<a name="l04258"></a>04258   
<a name="l04259"></a>04259   <span class="keywordflow">return</span> trueDelta;
<a name="l04260"></a>04260 }
<a name="l04261"></a>04261 
<a name="l04262"></a>04262 
<a name="l04263"></a>04263 <span class="comment">// Get the true delta for a uniform mixture distribution </span>
<a name="l04264"></a><a class="code" href="adaptivehistogramvalidation_8hpp.shtml#a9a9e088604995104a0313e525d4771e7">04264</a> cxsc::real <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a9a9e088604995104a0313e525d4771e7">getUnifTrueDelta</a>(
<a name="l04265"></a>04265     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; myPart, <span class="keywordtype">double</span> weight, vector&lt;int&gt; holesLoc, 
<a name="l04266"></a>04266     std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet)
<a name="l04267"></a>04267 {
<a name="l04268"></a>04268   
<a name="l04269"></a>04269   <span class="comment">//cout &lt;&lt; &quot;Calling dunction: &quot; &lt;&lt; endl;</span>
<a name="l04270"></a>04270   real totalArea = 0; <span class="comment">//initialize</span>
<a name="l04271"></a>04271   real muValids = 0;
<a name="l04272"></a>04272 
<a name="l04273"></a>04273   <span class="comment">// get the true height, f of the corresponding box in myPart</span>
<a name="l04274"></a>04274   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
<a name="l04275"></a>04275   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
<a name="l04276"></a>04276   (myPart).getSubPaving()-&gt;getLeaves(trueLeaves);
<a name="l04277"></a>04277   <span class="keywordtype">double</span> trueF; <span class="comment">//true density</span>
<a name="l04278"></a>04278   ivector temp;
<a name="l04279"></a>04279 
<a name="l04280"></a>04280   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l04281"></a>04281   dpIAE=0.0;
<a name="l04282"></a>04282   
<a name="l04283"></a>04283   <span class="comment">// need to iterate through the nodes</span>
<a name="l04284"></a>04284   set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt;::iterator it;
<a name="l04285"></a>04285 
<a name="l04286"></a>04286   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l04287"></a>04287   <span class="keywordflow">for</span>(it = YatSet.begin(); it != YatSet.end(); it++) {
<a name="l04288"></a>04288     ivector thisBox = (*it)-&gt;getBox();
<a name="l04289"></a>04289     <span class="comment">//cout  &lt;&lt; &quot;=====checking &quot; &lt;&lt; thisBox &lt;&lt; &quot;======&quot; &lt;&lt; endl;</span>
<a name="l04290"></a>04290     <span class="keywordtype">size_t</span> L = 0;
<a name="l04291"></a>04291     <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l04292"></a>04292       <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l04293"></a>04293       ivector trueBox = (*trueIt)-&gt;getBox();
<a name="l04294"></a>04294 
<a name="l04295"></a>04295       <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
<a name="l04296"></a>04296       <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
<a name="l04297"></a>04297       <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF &lt;&lt; endl;</span>
<a name="l04298"></a>04298       
<a name="l04299"></a>04299       <span class="comment">// if this is contained in trueBox</span>
<a name="l04300"></a>04300       <span class="keywordflow">if</span> ( (*it)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*it)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l04301"></a>04301         <span class="comment">//use the volume of this</span>
<a name="l04302"></a>04302         real r = ((*it)-&gt;nodeVolume())*(trueF);
<a name="l04303"></a>04303         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l04304"></a>04304         accumulate(dpIAE, abs(r), 1.0);
<a name="l04305"></a>04305         <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
<a name="l04306"></a>04306         <span class="comment">//think about this later</span>
<a name="l04307"></a>04307       } <span class="comment">//end of if this box is in trueBox</span>
<a name="l04308"></a>04308       
<a name="l04309"></a>04309       <span class="comment">// if this contains trueBox</span>
<a name="l04310"></a>04310       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*it)-&gt;getBox()) {
<a name="l04311"></a>04311         <span class="comment">//use the volume of trueBox</span>
<a name="l04312"></a>04312         real r = ((*trueIt)-&gt;nodeVolume())*(trueF);
<a name="l04313"></a>04313         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l04314"></a>04314         accumulate(dpIAE, abs(r), 1.0);
<a name="l04315"></a>04315       } <span class="comment">//end of if trueBox is in this box</span>
<a name="l04316"></a>04316       
<a name="l04317"></a>04317       <span class="comment">// if this is partially contained in trueBox </span>
<a name="l04318"></a>04318       <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
<a name="l04319"></a>04319         <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
<a name="l04320"></a>04320           <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
<a name="l04321"></a>04321           real r = volume*(trueF);
<a name="l04322"></a>04322           <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l04323"></a>04323           accumulate(dpIAE, abs(r), 1.0);
<a name="l04324"></a>04324         }
<a name="l04325"></a>04325       }
<a name="l04326"></a>04326       L++;
<a name="l04327"></a>04327     } <span class="comment">// end of going through trueBoxes</span>
<a name="l04328"></a>04328 
<a name="l04329"></a>04329     <span class="comment">// get the empirical measure of the validation data at this node</span>
<a name="l04330"></a>04330     real muValid = (*it)-&gt;getVemp();
<a name="l04331"></a>04331     muValids = muValids + muValid;
<a name="l04332"></a>04332     <span class="comment">//cout &lt;&lt; &quot;Area \t Emp Mass&quot; &lt;&lt; endl;</span>
<a name="l04333"></a>04333     <span class="comment">//cout &lt;&lt; rnd(dpIAE) &lt;&lt; &quot;\t&quot; &lt;&lt; muValids &lt;&lt; endl;</span>
<a name="l04334"></a>04334   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l04335"></a>04335 
<a name="l04336"></a>04336   <span class="comment">// get the difference</span>
<a name="l04337"></a>04337   totalArea = rnd(dpIAE);
<a name="l04338"></a>04338   real trueDelta = (totalArea - muValids);
<a name="l04339"></a>04339   
<a name="l04340"></a>04340   <span class="keywordflow">return</span> trueDelta;
<a name="l04341"></a>04341 }
<a name="l04342"></a>04342 
<a name="l04343"></a>04343 <span class="comment">// get the IAE for mapped functions</span>
<a name="l04344"></a><a class="code" href="adaptivehistogramvalidation_8hpp.shtml#a918a753fde4f86110c4fd1f958ae29b1">04344</a> real <a class="code" href="adaptivehistogramvalidation_8cpp.shtml#a49d507fa0b75a7ad720204f0f581af6d">getMappedFunctionTrueDelta</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; nodeEstHist,
<a name="l04345"></a>04345           std::set&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less &lt; CollatorSPVnode* &gt; &gt;&amp; YatSet)
<a name="l04346"></a>04346 {
<a name="l04347"></a>04347   <span class="comment">//cout &lt;&lt; &quot;-------function called---------&quot; &lt;&lt; endl;</span>
<a name="l04348"></a>04348   
<a name="l04349"></a>04349   <span class="comment">//iterator for YatSet</span>
<a name="l04350"></a>04350   std::set&lt;CollatorSPVnode*, less &lt; CollatorSPVnode* &gt; &gt;::iterator histNodeIt;
<a name="l04351"></a>04351 
<a name="l04352"></a>04352   <span class="comment">//traverse the tree and get the heights </span>
<a name="l04353"></a>04353   real trueArea = 0.0;
<a name="l04354"></a>04354   real muValid = 0.0;
<a name="l04355"></a>04355 
<a name="l04356"></a>04356   <span class="keywordflow">for</span> (histNodeIt = YatSet.begin(); histNodeIt != YatSet.end(); 
<a name="l04357"></a>04357       histNodeIt++) {
<a name="l04358"></a>04358     
<a name="l04359"></a>04359     real thisArea = 0.0;
<a name="l04360"></a>04360     
<a name="l04361"></a>04361     <span class="comment">//cout &lt;&lt; (*histNodeIt)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l04362"></a>04362     ivector thisBox = (*histNodeIt)-&gt;getBox();
<a name="l04363"></a>04363 
<a name="l04364"></a>04364     <span class="comment">// need to get the area of the nodes of nodeEst in thisBox</span>
<a name="l04365"></a>04365     <span class="comment">//thisArea = nodeEstHist.getArea(thisArea, thisBox);</span>
<a name="l04366"></a>04366 
<a name="l04367"></a>04367     <span class="comment">//cout &lt;&lt; thisArea &lt;&lt; &quot;\t&quot; &lt;&lt; (*histNodeIt)-&gt;getVemp() &lt;&lt; endl;</span>
<a name="l04368"></a>04368      
<a name="l04369"></a>04369     trueArea += thisArea;
<a name="l04370"></a>04370     muValid += (*histNodeIt)-&gt;getVemp();
<a name="l04371"></a>04371 
<a name="l04372"></a>04372   } <span class="comment">// end of traversing iterating through YatSet</span>
<a name="l04373"></a>04373 
<a name="l04374"></a>04374   <span class="comment">//cout &lt;&lt; &quot;Final: &quot; &lt;&lt; endl;</span>
<a name="l04375"></a>04375   <span class="comment">//cout &lt;&lt; trueArea &lt;&lt; &quot;\t&quot; &lt;&lt; muValid &lt;&lt; endl;</span>
<a name="l04376"></a>04376   
<a name="l04377"></a>04377   real trueDelta = trueArea - muValid;
<a name="l04378"></a>04378   <span class="keywordflow">return</span> abs(trueDelta);
<a name="l04379"></a>04379 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogramvalidation_8cpp.shtml">adaptivehistogramvalidation.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:10 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
