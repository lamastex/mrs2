<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spsnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spsnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spsnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spsnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file:     spsnode.cpp</span>
<a name="l00023"></a>00023 <span class="comment">\brief SPSnode (StatsSubPaving) definitions</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// to use std input/output</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use exceptions</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// include fstream so as to be able to output a file</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// format manipulation on streams</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;iomanip&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">// to use spsnode splitting classes</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="splitdecisionobj_8hpp.shtml" title="classes for determining whether to split an SPSnode.">splitdecisionobj.hpp</a>&quot;</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// to get determinant and inverse of a matrix</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &quot;gsl/gsl_linalg.h&quot;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">// to access gsl_matrix elements</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;gsl/gsl_matrix.h&quot;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="comment">// to perform vector-matrix operations</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;gsl/gsl_blas.h&quot;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="preprocessor">#include &quot;assert.h&quot;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="comment">//src_trunk_0701</span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &quot;<a class="code" href="subpaving__exception_8hpp.shtml" title="SubpavingException declarations.">subpaving_exception.hpp</a>&quot;</span>
<a name="l00065"></a>00065 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="keyword">using namespace </span>subpavings;
<a name="l00068"></a>00068 <span class="keyword">using namespace </span>std;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070     <span class="comment">// ---------------------- private member functions -------------------</span>
<a name="l00071"></a>00071 
<a name="l00072"></a>00072     <span class="comment">// recalculate the counter and accumulated sum</span>
<a name="l00073"></a>00073     <span class="comment">// and accumulated sumproducts</span>
<a name="l00074"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a8011280b8a3a0729c581a00f3bb031ff">00074</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8011280b8a3a0729c581a00f3bb031ff" title="Recalculate summary statistics associated with node.">SPSnode::recalculateStats</a>(rvector&amp; newdata)<span class="keyword"> const</span>
<a name="l00075"></a>00075 <span class="keyword">    </span>{
<a name="l00076"></a>00076         
<a name="l00077"></a>00077         counter++;  <span class="comment">// update the counter</span>
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keywordflow">if</span> (!countsOnly) {
<a name="l00080"></a>00080 
<a name="l00081"></a>00081             recalculateSums(newdata); <span class="comment">// update the sums</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083             recalculateSumProducts(newdata); <span class="comment">// update the sumproducts</span>
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="comment">// recalculate the accumulated sum</span>
<a name="l00089"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa70c978a273b7266c75e7d617ae4d100">00089</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa70c978a273b7266c75e7d617ae4d100" title="Recalculate summary statistics associated with node.">SPSnode::recalculateSums</a>(rvector&amp; newdata)<span class="keyword"> const</span>
<a name="l00090"></a>00090 <span class="keyword">    </span>{
<a name="l00091"></a>00091         <span class="keywordflow">if</span> (dpSums.empty()) {   <span class="comment">//nothing in the sums yet</span>
<a name="l00092"></a>00092             <span class="comment">// reserve space in dpSums for all elements of the mean</span>
<a name="l00093"></a>00093             dpSums.reserve(dimension);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095             <span class="comment">// for each dimnsn of data, initialise element</span>
<a name="l00096"></a>00096             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; dimension; i++) {
<a name="l00097"></a>00097                 dotprecision dp;
<a name="l00098"></a>00098                 dp = 0.0;
<a name="l00099"></a>00099                 dpSums.push_back(dp);
<a name="l00100"></a>00100             }
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="comment">// make a dot precision variable out of the ith element</span>
<a name="l00104"></a>00104         <span class="comment">// of the rvector of new data and store in dpSums</span>
<a name="l00105"></a>00105         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i&lt; dimension + 1; i++) {
<a name="l00106"></a>00106             <span class="comment">// rvectors indexed 1 to n, vectors indexed 0 to n-1</span>
<a name="l00107"></a>00107             accumulate(dpSums[i-1], newdata[i], 1.0);
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109 
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// recalculate the accumulated sumproducts</span>
<a name="l00113"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ab49e57afe0939b41930e0cbb22c9ba8a">00113</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab49e57afe0939b41930e0cbb22c9ba8a" title="Recalculate summary statistics associated with node.">SPSnode::recalculateSumProducts</a>(rvector&amp; newdata)<span class="keyword"> const</span>
<a name="l00114"></a>00114 <span class="keyword">    </span>{
<a name="l00115"></a>00115         <span class="comment">/* the sumproducts can be thought of as an nxn matrix,</span>
<a name="l00116"></a>00116 <span class="comment">        which is implemented here as a nxn element vector of</span>
<a name="l00117"></a>00117 <span class="comment">        dotprecision variables, using row-major order.</span>
<a name="l00118"></a>00118 <span class="comment">        Ie the m-th element (m = 0, . . . nxn-1) is in row floor(m/n)</span>
<a name="l00119"></a>00119 <span class="comment">        and column m-rowxn in the matrix configuration.</span>
<a name="l00120"></a>00120 <span class="comment">        Or, the sumproduct of elements i and j in an rvector,</span>
<a name="l00121"></a>00121 <span class="comment">        i,j = 0,...,n-1, is element m=(ixn+j) of the sumproducts</span>
<a name="l00122"></a>00122 <span class="comment">        vector. */</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <span class="keywordflow">if</span> (dpSumProducts.empty()) {    <span class="comment">//nothing there yet</span>
<a name="l00125"></a>00125             <span class="comment">// reserve space for all elements</span>
<a name="l00126"></a>00126             dpSums.reserve(dimension*dimension);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128             <span class="comment">// for each dimnsn^2 of data, initialise element</span>
<a name="l00129"></a>00129             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; (dimension*dimension); i++) {
<a name="l00130"></a>00130                 dotprecision dp;
<a name="l00131"></a>00131                 dp = 0.0;
<a name="l00132"></a>00132                 dpSumProducts.push_back(dp);
<a name="l00133"></a>00133             }
<a name="l00134"></a>00134         }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="comment">// make a dot precision variable out of the ith element</span>
<a name="l00137"></a>00137         <span class="comment">// and jth element of the of the rvector of new data and</span>
<a name="l00138"></a>00138         <span class="comment">// store in dpSumProducts.</span>
<a name="l00139"></a>00139         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; dimension + 1; i++) {
<a name="l00140"></a>00140             <span class="comment">// only need to do columns 1 to i because of symmetry</span>
<a name="l00141"></a>00141             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j&lt; i + 1; j++) {
<a name="l00142"></a>00142 
<a name="l00143"></a>00143                 <span class="keywordtype">size_t</span> index = (i-1)*dimension + (j-1);
<a name="l00144"></a>00144                 <span class="comment">// rvectors indexed 1 to n</span>
<a name="l00145"></a>00145                 accumulate(dpSumProducts[index],
<a name="l00146"></a>00146                         newdata[i], newdata[j]);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148                 <span class="comment">//if not on the diagonal of the matrix,</span>
<a name="l00149"></a>00149                 <span class="comment">// we can also fill in the symmetric element</span>
<a name="l00150"></a>00150                 <span class="keywordflow">if</span> (i!=j) {
<a name="l00151"></a>00151                     <span class="keywordtype">size_t</span> sym_index = (j-1)*dimension
<a name="l00152"></a>00152                         + (i-1);
<a name="l00153"></a>00153                     dpSumProducts[sym_index] =
<a name="l00154"></a>00154                         dpSumProducts[index];
<a name="l00155"></a>00155                 } <span class="comment">// end if</span>
<a name="l00156"></a>00156             }<span class="comment">// end j-loop</span>
<a name="l00157"></a>00157         }<span class="comment">// end i-loop</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         <span class="comment">// sumproducts has been updated for new datapoint</span>
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="comment">// Only expand the node - no reallocation of data</span>
<a name="l00168"></a>00168     <span class="comment">// add two sibling nodes to this provided that this is a leaf</span>
<a name="l00169"></a>00169     <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00170"></a>00170     <span class="comment">// these functions split box in half normal to dimension set by comp</span>
<a name="l00171"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ac549870ef3b7994d9e87b952a012a7e9">00171</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac549870ef3b7994d9e87b952a012a7e9" title="Expand the node with no reallocation of data.">SPSnode::nodeExpansionOnly</a>(<span class="keywordtype">int</span> comp)
<a name="l00172"></a>00172     {
<a name="l00173"></a>00173         <span class="keywordflow">try</span>
<a name="l00174"></a>00174         {
<a name="l00175"></a>00175             <span class="comment">// only do something if this SPSnode is a leaf</span>
<a name="l00176"></a>00176             <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>()) {
<a name="l00177"></a>00177                 <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00178"></a>00178                 ivector lC, rC;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180                 <span class="comment">// Call Lower() and Upper() to put the split</span>
<a name="l00181"></a>00181                 <span class="comment">// boxes into lC and rC respectively</span>
<a name="l00182"></a>00182                 <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(getBox(), lC, comp);
<a name="l00183"></a>00183                 <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(getBox(), rC, comp);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185                 <span class="comment">// when making new children, use constructor</span>
<a name="l00186"></a>00186                 <span class="comment">// that will give space indication (for data)</span>
<a name="l00187"></a>00187                 <span class="comment">// of the size of this node&#39;s dataItrs</span>
<a name="l00188"></a>00188                 <span class="keywordtype">size_t</span> space = dataItrs.size();
<a name="l00189"></a>00189 
<a name="l00190"></a>00190                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(lC,
<a name="l00191"></a>00191                                         space, countsOnly, label));
<a name="l00192"></a>00192 
<a name="l00193"></a>00193                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(rC,
<a name="l00194"></a>00194                                         space, countsOnly, label));
<a name="l00195"></a>00195 
<a name="l00196"></a>00196                 <span class="comment">//name the new children</span>
<a name="l00197"></a>00197                 getLeftChild()-&gt;setNodeName(nodeName + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00198"></a>00198                 getRightChild()-&gt;setNodeName(nodeName + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200                 <span class="comment">// store the split dimension in this</span>
<a name="l00201"></a>00201                 splitDim = comp;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203                 <span class="comment">// store the split value in this</span>
<a name="l00204"></a>00204                 <span class="comment">// the split value is the infinum of interval</span>
<a name="l00205"></a>00205                 <span class="comment">// of right child box for dimension split on</span>
<a name="l00206"></a>00206                 splitValue = _double(Inf(
<a name="l00207"></a>00207                     ((getRightChild())-&gt;getBox())[comp]));
<a name="l00208"></a>00208             }
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00212"></a>00212         {
<a name="l00213"></a>00213             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00214"></a>00214                 &lt;&lt; <span class="stringliteral">&quot;SPSnode::nodeExpansionOnly()&quot;</span> &lt;&lt; std::endl;
<a name="l00215"></a>00215             <span class="keywordflow">throw</span>;
<a name="l00216"></a>00216         }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="comment">// split data between two new children</span>
<a name="l00222"></a>00222     <span class="comment">// using an SplitDecisionObj to see if the children should be further split</span>
<a name="l00223"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#adf3d76ca267b87c46d1fcb1ca3cecd84">00223</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf3d76ca267b87c46d1fcb1ca3cecd84" title="Send the data associated with this down to children.">SPSnode::splitData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest)
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225 
<a name="l00226"></a>00226         <span class="comment">// check that both children exist</span>
<a name="l00227"></a>00227         <span class="keywordflow">if</span> (!hasLCwithBox() || !hasRCwithBox()) {
<a name="l00228"></a>00228             <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot split data when there are not two &quot;</span>;
<a name="l00229"></a>00229             msg += <span class="stringliteral">&quot; children&quot;</span>;
<a name="l00230"></a>00230             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(msg);
<a name="l00231"></a>00231         }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr; <span class="comment">// iterator</span>
<a name="l00234"></a>00234 
<a name="l00235"></a>00235         <span class="comment">//divvie the data up amongst the children</span>
<a name="l00236"></a>00236         <span class="keywordflow">for</span> (dataItr = dataItrs.begin();
<a name="l00237"></a>00237             dataItr!= dataItrs.end(); dataItr++) {
<a name="l00238"></a>00238             <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr = *dataItr;
<a name="l00239"></a>00239 
<a name="l00240"></a>00240             <span class="comment">//calls insertOneFind on the children of this node</span>
<a name="l00241"></a>00241             <span class="comment">// so stats are not recalculated for this node itself</span>
<a name="l00242"></a>00242             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* reinsertedInto = NULL;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244             <span class="keywordflow">if</span>(rightChild!=NULL &amp;&amp; !rightChild-&gt;isEmpty()) {
<a name="l00245"></a>00245 
<a name="l00246"></a>00246                 reinsertedInto =
<a name="l00247"></a>00247                     (getRightChild())-&gt;insertOneFind(
<a name="l00248"></a>00248                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>, boolTest);
<a name="l00249"></a>00249             }
<a name="l00250"></a>00250 
<a name="l00251"></a>00251             <span class="comment">// only try the left if it&#39;s not on the right</span>
<a name="l00252"></a>00252             <span class="keywordflow">if</span>(reinsertedInto==NULL &amp;&amp; leftChild!=NULL
<a name="l00253"></a>00253             &amp;&amp; !leftChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l00254"></a>00254 
<a name="l00255"></a>00255                 reinsertedInto =
<a name="l00256"></a>00256                     (getLeftChild())-&gt;insertOneFind(
<a name="l00257"></a>00257                     newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>, boolTest);
<a name="l00258"></a>00258             }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262         clearData();         <span class="comment">//clear the data in this node</span>
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266     <span class="comment">// Print the data in a node if any</span>
<a name="l00267"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a799dd8e194518c3dd525ecba26072585">00267</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a799dd8e194518c3dd525ecba26072585" title="Print the data in a specified format.">SPSnode::nodeDataPrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00268"></a>00268 <span class="keyword">    </span>{
<a name="l00269"></a>00269         <span class="keywordflow">if</span> (!dataItrs.empty()) {
<a name="l00270"></a>00270 
<a name="l00271"></a>00271             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l00272"></a>00272 
<a name="l00273"></a>00273             os &lt;&lt; <span class="stringliteral">&quot;Data is&quot;</span> &lt;&lt; std::endl;
<a name="l00274"></a>00274             <span class="keywordflow">for</span> (dataItr = dataItrs.begin();
<a name="l00275"></a>00275                 dataItr!= dataItrs.end(); dataItr++) {
<a name="l00276"></a>00276 
<a name="l00277"></a>00277                 <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dataItr;
<a name="l00278"></a>00278                 rvector theData = *bigIt;
<a name="l00279"></a>00279 
<a name="l00280"></a>00280                 <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; dimension + 1; i++) {
<a name="l00281"></a>00281                     os &lt;&lt; label; <span class="comment">// print the label</span>
<a name="l00282"></a>00282                     os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; theData[i]; <span class="comment">// print data</span>
<a name="l00283"></a>00283                 }   <span class="comment">// end loop through data elements</span>
<a name="l00284"></a>00284 
<a name="l00285"></a>00285                 os &lt;&lt; std::endl;
<a name="l00286"></a>00286 
<a name="l00287"></a>00287             } <span class="comment">// end loop through data container</span>
<a name="l00288"></a>00288         } <span class="comment">// end if counter &gt; 0</span>
<a name="l00289"></a>00289         <span class="comment">// if no data, ie counter = 0, then just return os unaltered</span>
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         <span class="keywordflow">return</span> os;
<a name="l00292"></a>00292     }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="comment">// Print the mean of the data in a node</span>
<a name="l00295"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a5f5cc02f707a2b98f7a93543c71298b2">00295</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a5f5cc02f707a2b98f7a93543c71298b2" title="Print the mean in a specified format.">SPSnode::nodeMeanPrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00296"></a>00296 <span class="keyword">    </span>{
<a name="l00297"></a>00297 
<a name="l00298"></a>00298         <span class="keywordflow">if</span> ((counter &gt; 0) &amp;&amp; !countsOnly) {
<a name="l00299"></a>00299 
<a name="l00300"></a>00300             os &lt;&lt; <span class="stringliteral">&quot;Mean is &quot;</span>;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302             <span class="comment">// loop through the elements in the dpSums vector</span>
<a name="l00303"></a>00303             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; dimension; i++) {
<a name="l00304"></a>00304                 <span class="comment">// default cxsc rounding of dotprecision</span>
<a name="l00305"></a>00305                 <span class="comment">// to rnd_next</span>
<a name="l00306"></a>00306                 os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (rnd(dpSums[i])/(1.0*counter));
<a name="l00307"></a>00307 
<a name="l00308"></a>00308             }<span class="comment">// end loop through the elements in dpSums</span>
<a name="l00309"></a>00309 
<a name="l00310"></a>00310             os &lt;&lt; std::endl;
<a name="l00311"></a>00311 
<a name="l00312"></a>00312         } <span class="comment">// end if</span>
<a name="l00313"></a>00313         <span class="comment">// if no data, ie counter = 0, or if we are only keeping counts</span>
<a name="l00314"></a>00314         <span class="comment">// then just return os unaltered</span>
<a name="l00315"></a>00315 
<a name="l00316"></a>00316         <span class="keywordflow">return</span> os;
<a name="l00317"></a>00317 
<a name="l00318"></a>00318     }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     <span class="comment">// Print the variance covariance matrix of the data in a node</span>
<a name="l00321"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a03042a5084349960b1fd35396dc509a5">00321</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a03042a5084349960b1fd35396dc509a5" title="Print the variance-covariance in a specified format.">SPSnode::nodeVarCovarPrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00322"></a>00322 <span class="keyword">    </span>{
<a name="l00323"></a>00323         <span class="keywordflow">if</span> ((counter &gt; 0) &amp;&amp; !countsOnly) {
<a name="l00324"></a>00324 
<a name="l00325"></a>00325             <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> varCovar;
<a name="l00326"></a>00326             varCovar = getVarCovar(varCovar);
<a name="l00327"></a>00327 
<a name="l00328"></a>00328             <span class="comment">/* element k in the vector representing the</span>
<a name="l00329"></a>00329 <span class="comment">            variance-covariance matrix corresponds to</span>
<a name="l00330"></a>00330 <span class="comment">            row k/n, (row 0 to n-1) and column k-row*n (col 0 to n-1)</span>
<a name="l00331"></a>00331 <span class="comment">            in a matrix view variance-covariance */</span>
<a name="l00332"></a>00332 
<a name="l00333"></a>00333             os &lt;&lt; <span class="stringliteral">&quot;Variance Covariance is &quot;</span> &lt;&lt; std::endl;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335             <span class="comment">// loop through the elements and print as matrix</span>
<a name="l00336"></a>00336             <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dimension; i++) {
<a name="l00337"></a>00337                 <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; dimension; j++) {
<a name="l00338"></a>00338                     os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; varCovar[(i*dimension)+j];
<a name="l00339"></a>00339                 }
<a name="l00340"></a>00340                 os &lt;&lt; std::endl;
<a name="l00341"></a>00341             }
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343         <span class="keywordflow">return</span> os;
<a name="l00344"></a>00344 
<a name="l00345"></a>00345     }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00348"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a3cc0c8bb64c854ef16ba03891f5945d6">00348</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3cc0c8bb64c854ef16ba03891f5945d6" title="Output for a node in a binary tree, tab-delimited.">SPSnode::leafOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00349"></a>00349 <span class="keyword">    </span>{
<a name="l00350"></a>00350         <span class="keywordtype">int</span> prec = 5; <span class="comment">// precision for output</span>
<a name="l00351"></a>00351 
<a name="l00352"></a>00352         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00353"></a>00353 
<a name="l00354"></a>00354             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356             <span class="comment">// output the node name, nodeVolume, counter</span>
<a name="l00357"></a>00357             os &lt;&lt; nodeName;
<a name="l00358"></a>00358             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nodeVolume();
<a name="l00359"></a>00359             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00360"></a>00360             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00361"></a>00361             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00362"></a>00362 
<a name="l00363"></a>00363             streamsize oldPrec = os.precision();
<a name="l00364"></a>00364             os &lt;&lt; setprecision(prec);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00367"></a>00367 
<a name="l00368"></a>00368                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00369"></a>00369                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00370"></a>00370             }
<a name="l00371"></a>00371             os &lt;&lt; setprecision(oldPrec);
<a name="l00372"></a>00372 
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374     }
<a name="l00375"></a>00375 
<a name="l00376"></a>00376     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00377"></a>00377     <span class="comment">// including EMP contributions and changes if split</span>
<a name="l00378"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ac273545c33e3abb0114811e7a1b06f98">00378</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac273545c33e3abb0114811e7a1b06f98" title="Output for a node in a binary tree, tab-delimited.">SPSnode::leafOutputTabsWithEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00379"></a>00379                             std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00380"></a>00380 <span class="keyword">    </span>{
<a name="l00381"></a>00381         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00382"></a>00382 
<a name="l00383"></a>00383             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00384"></a>00384 
<a name="l00385"></a>00385             <span class="comment">// output the name, (not label), nodeVolume, counter</span>
<a name="l00386"></a>00386             os &lt;&lt; nodeName;
<a name="l00387"></a>00387             <span class="comment">//os &lt;&lt; label;</span>
<a name="l00388"></a>00388             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nodeVolume();
<a name="l00389"></a>00389             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00390"></a>00390             <span class="comment">// EMP contributions and changes if split</span>
<a name="l00391"></a>00391             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; getEMPContributionCOPERR(bigN);
<a name="l00392"></a>00392             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; rnd(getSplitChangeEMPCOPERR(bigN));
<a name="l00393"></a>00393             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; getEMPContributionAIC(bigN);
<a name="l00394"></a>00394             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; rnd(getSplitChangeEMPAIC());
<a name="l00395"></a>00395 
<a name="l00396"></a>00396             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00397"></a>00397             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00398"></a>00398             streamsize oldPrec = os.precision();
<a name="l00399"></a>00399             os &lt;&lt; setprecision(prec);
<a name="l00400"></a>00400 
<a name="l00401"></a>00401             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00402"></a>00402 
<a name="l00403"></a>00403                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00404"></a>00404                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00405"></a>00405             }
<a name="l00406"></a>00406             os &lt;&lt; setprecision(oldPrec);
<a name="l00407"></a>00407 
<a name="l00408"></a>00408         }
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00412"></a>00412     <span class="comment">// includes the height = n/(N*vol) where n is count in this leaf node,</span>
<a name="l00413"></a>00413     <span class="comment">// N is count over whole histogram, vol is volume of this leaf node</span>
<a name="l00414"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aaf9ac8d98bda6e99c74b946d85c6bc61">00414</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#aaf9ac8d98bda6e99c74b946d85c6bc61" title="Output for a node in a binary tree, tab-delimited.">SPSnode::leafOutputTabsWithHistHeight</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00415"></a>00415                             std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00416"></a>00416 <span class="keyword">    </span>{
<a name="l00417"></a>00417         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00418"></a>00418 
<a name="l00419"></a>00419             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00420"></a>00420             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00421"></a>00421 
<a name="l00422"></a>00422             <span class="comment">// output the node name, nodeVolume, counter, counter/(bigN * vol)</span>
<a name="l00423"></a>00423             os &lt;&lt; nodeName;
<a name="l00424"></a>00424             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00425"></a>00425             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00426"></a>00426             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter/(vol * bigN);
<a name="l00427"></a>00427             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00428"></a>00428             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00429"></a>00429             streamsize oldPrec = os.precision();
<a name="l00430"></a>00430             os &lt;&lt; setprecision(prec);
<a name="l00431"></a>00431 
<a name="l00432"></a>00432             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00433"></a>00433 
<a name="l00434"></a>00434                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00435"></a>00435                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00436"></a>00436             }
<a name="l00437"></a>00437             os &lt;&lt; setprecision(oldPrec);
<a name="l00438"></a>00438 
<a name="l00439"></a>00439         }
<a name="l00440"></a>00440     }
<a name="l00441"></a>00441 
<a name="l00442"></a>00442     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00443"></a>00443     <span class="comment">// including EMP contributions and changes if split</span>
<a name="l00444"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ad64bd4af47589b21d9c8dde5135c3d0a">00444</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad64bd4af47589b21d9c8dde5135c3d0a" title="Output for a node in a binary tree, tab-delimited.">SPSnode::leafOutputTabsWithHistHeightAndEMPs</a>(
<a name="l00445"></a>00445                                     <span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN, std::ostream &amp;os,
<a name="l00446"></a>00446                                     <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l00447"></a>00447 <span class="keyword">    </span>{
<a name="l00448"></a>00448         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00449"></a>00449 
<a name="l00450"></a>00450             ivector thisBox = *theBox; <span class="comment">// copy of theBox</span>
<a name="l00451"></a>00451             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00452"></a>00452 
<a name="l00453"></a>00453             <span class="comment">// output the node name, nodeVolume, counter, counter/(n * vol)</span>
<a name="l00454"></a>00454             os &lt;&lt; nodeName;
<a name="l00455"></a>00455             <span class="comment">//os &lt;&lt; label;</span>
<a name="l00456"></a>00456             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nodeVolume();
<a name="l00457"></a>00457             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter;
<a name="l00458"></a>00458             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; counter/(vol * bigN);
<a name="l00459"></a>00459             <span class="comment">// EMP contributions and changes if split</span>
<a name="l00460"></a>00460             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; getEMPContributionCOPERR(bigN);
<a name="l00461"></a>00461             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; rnd(getSplitChangeEMPCOPERR(bigN));
<a name="l00462"></a>00462             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; getEMPContributionAIC(bigN);
<a name="l00463"></a>00463             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; rnd(getSplitChangeEMPAIC());
<a name="l00464"></a>00464 
<a name="l00465"></a>00465             <span class="comment">// followed by the intervals of box using Inf and Sup</span>
<a name="l00466"></a>00466             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00467"></a>00467             streamsize oldPrec = os.precision();
<a name="l00468"></a>00468             os &lt;&lt; setprecision(prec);
<a name="l00469"></a>00469 
<a name="l00470"></a>00470             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00471"></a>00471 
<a name="l00472"></a>00472                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00473"></a>00473                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00474"></a>00474             }
<a name="l00475"></a>00475             os &lt;&lt; setprecision(oldPrec);
<a name="l00476"></a>00476 
<a name="l00477"></a>00477         }
<a name="l00478"></a>00478     }
<a name="l00479"></a>00479 
<a name="l00480"></a>00480 
<a name="l00481"></a>00481     <span class="comment">// gather up all the data in children of a node</span>
<a name="l00482"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959">00482</a>     <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">SPSnode::gatherData</a>(<a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; container, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * spn)
<a name="l00483"></a>00483     {
<a name="l00484"></a>00484         <span class="keywordflow">if</span> (!spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00485"></a>00485             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00486"></a>00486                 container =
<a name="l00487"></a>00487                     gatherData(container,
<a name="l00488"></a>00488                             spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l00489"></a>00489             }
<a name="l00490"></a>00490             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00491"></a>00491                 container =
<a name="l00492"></a>00492                     gatherData(container,
<a name="l00493"></a>00493                             spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00494"></a>00494             }
<a name="l00495"></a>00495         }
<a name="l00496"></a>00496         <span class="keywordflow">else</span> { <span class="comment">// is a leaf</span>
<a name="l00497"></a>00497             <span class="comment">// copy data from spn&#39;s dataItrs into temp container</span>
<a name="l00498"></a>00498             container.insert(container.end(),
<a name="l00499"></a>00499                             (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).begin(),
<a name="l00500"></a>00500                             (spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).end());
<a name="l00501"></a>00501         }
<a name="l00502"></a>00502 
<a name="l00503"></a>00503         <span class="keywordflow">return</span> container;
<a name="l00504"></a>00504     }
<a name="l00505"></a>00505 
<a name="l00506"></a>00506     <span class="comment">// set split dimension and split value in parent when children grafted on</span>
<a name="l00507"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a785e03fc466a6a1ea851f08338f8103d">00507</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a785e03fc466a6a1ea851f08338f8103d" title="Set the splitDimension and SplitValue when children grafted.">SPSnode::setSplits</a>()
<a name="l00508"></a>00508     {
<a name="l00509"></a>00509         <span class="comment">// set the split dimension and split value for this box</span>
<a name="l00510"></a>00510         <span class="comment">// based on the children which have been added</span>
<a name="l00511"></a>00511         ivector childBox;
<a name="l00512"></a>00512         <span class="keywordtype">bool</span> alreadyDone = <span class="keyword">false</span>;
<a name="l00513"></a>00513 
<a name="l00514"></a>00514         <span class="keywordflow">if</span> (hasRCwithBox()) {
<a name="l00515"></a>00515             childBox = getRightChild()-&gt;getBox();
<a name="l00516"></a>00516         }
<a name="l00517"></a>00517         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hasLCwithBox()) {
<a name="l00518"></a>00518             childBox = getLeftChild()-&gt;getBox();
<a name="l00519"></a>00519         }
<a name="l00520"></a>00520         <span class="keywordtype">int</span> pLb = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theBox); <span class="comment">// parent box lower bound</span>
<a name="l00521"></a>00521         <span class="keywordtype">int</span> dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theBox) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theBox) + 1;
<a name="l00522"></a>00522         <span class="keywordtype">int</span> cLb = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(childBox); <span class="comment">// child box lower bound (should be = pLb)</span>
<a name="l00523"></a>00523 
<a name="l00524"></a>00524         <span class="keywordflow">if</span> ( splitDim != -1 &amp;&amp;
<a name="l00525"></a>00525             (splitValue == Inf(childBox[splitDim - pLb + cLb])
<a name="l00526"></a>00526             || splitValue == Sup(childBox[splitDim - pLb + cLb])))
<a name="l00527"></a>00527                 alreadyDone = <span class="keyword">true</span>;
<a name="l00528"></a>00528 
<a name="l00529"></a>00529         <span class="keywordflow">if</span> (!alreadyDone) {
<a name="l00530"></a>00530             <span class="keywordtype">int</span> d = 1;
<a name="l00531"></a>00531             splitDim = -1;
<a name="l00532"></a>00532             <span class="keywordflow">while</span> ((d &lt;= dim) &amp;&amp; (splitDim == -1)) {
<a name="l00533"></a>00533                 <span class="keywordflow">if</span> (diam(childBox[d + cLb - 1]) &lt; diam((*theBox)[d])) {
<a name="l00534"></a>00534                     splitDim = d + pLb - 1; <span class="comment">// the split dimension</span>
<a name="l00535"></a>00535                 }
<a name="l00536"></a>00536                 d++;
<a name="l00537"></a>00537             }
<a name="l00538"></a>00538             <span class="comment">// split value is bottom of right child box on dth dim</span>
<a name="l00539"></a>00539             <span class="keywordflow">if</span> (hasRCwithBox()) {
<a name="l00540"></a>00540                 splitValue = Inf(childBox[splitDim - pLb + cLb]);
<a name="l00541"></a>00541             }
<a name="l00542"></a>00542             <span class="comment">// else split value is top of left child box on dth dim</span>
<a name="l00543"></a>00543             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hasLCwithBox()) {
<a name="l00544"></a>00544                 splitValue = Sup(childBox[splitDim - pLb + cLb]);
<a name="l00545"></a>00545             }
<a name="l00546"></a>00546         }
<a name="l00547"></a>00547     }
<a name="l00548"></a>00548 
<a name="l00549"></a>00549 
<a name="l00550"></a>00550     <span class="comment">// add two non-minimal pavings in a union operation,</span>
<a name="l00551"></a>00551     <span class="comment">// return a pointer to a new non-minimal paving</span>
<a name="l00552"></a>00552     <span class="comment">// but with no data attached to it - up to the manager to add data</span>
<a name="l00553"></a>00553     <span class="comment">// label will be 0</span>
<a name="l00554"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a6c28eccf9962c4b9010f2f04b0231d30">00554</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6c28eccf9962c4b9010f2f04b0231d30">SPSnode:: unionNoData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00555"></a>00555                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)
<a name="l00556"></a>00556     {
<a name="l00557"></a>00557         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newNode = NULL;
<a name="l00558"></a>00558 
<a name="l00559"></a>00559         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;  <span class="comment">// indicator for done adding</span>
<a name="l00560"></a>00560 
<a name="l00561"></a>00561         <span class="keywordflow">try</span> {
<a name="l00562"></a>00562 
<a name="l00563"></a>00563             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// we will return NULL</span>
<a name="l00564"></a>00564 
<a name="l00565"></a>00565             <span class="comment">// if the lhs is null or has no box, return a tree or node based on rhs</span>
<a name="l00566"></a>00566             <span class="keywordflow">if</span> (!done &amp;&amp; (lhs==NULL || ((lhs != NULL) &amp;&amp; (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())))) {
<a name="l00567"></a>00567 
<a name="l00568"></a>00568                 newNode = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">SPSnode::strippedConstructor</a>(rhs);
<a name="l00569"></a>00569                 done = <span class="keyword">true</span>;
<a name="l00570"></a>00570             }
<a name="l00571"></a>00571 
<a name="l00572"></a>00572             <span class="comment">// if the rhs is null or has no box, return a tree or node based on lhs</span>
<a name="l00573"></a>00573             <span class="keywordflow">if</span> (!done &amp;&amp; (rhs==NULL || ((rhs != NULL) &amp;&amp; (rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())))) {
<a name="l00574"></a>00574 
<a name="l00575"></a>00575                 newNode = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">SPSnode::strippedConstructor</a>(lhs);
<a name="l00576"></a>00576                 done = <span class="keyword">true</span>;
<a name="l00577"></a>00577             }
<a name="l00578"></a>00578 
<a name="l00579"></a>00579             <span class="comment">// by now, if we are not done, both pavings are not null and both have boxes</span>
<a name="l00580"></a>00580             <span class="comment">// we assume that the boxes are the same</span>
<a name="l00581"></a>00581 
<a name="l00582"></a>00582             <span class="comment">// we have to check who has children</span>
<a name="l00583"></a>00583 
<a name="l00584"></a>00584             <span class="comment">// if both are leaves we can just return a node based on say lhs</span>
<a name="l00585"></a>00585              <span class="comment">// if only rhs is leaf, lhs is not a leaf, return a node based on lhs</span>
<a name="l00586"></a>00586             <span class="keywordflow">if</span> (!done &amp;&amp; rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00587"></a>00587                 newNode = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">SPSnode::strippedConstructor</a>(lhs);
<a name="l00588"></a>00588                 done = <span class="keyword">true</span>;
<a name="l00589"></a>00589             }
<a name="l00590"></a>00590 
<a name="l00591"></a>00591             <span class="comment">// if only lhs is leaf, rhs is not a leaf, return a node based on rhs</span>
<a name="l00592"></a>00592             <span class="keywordflow">if</span> (!done &amp;&amp; lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00593"></a>00593                 newNode = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">SPSnode::strippedConstructor</a>(rhs);
<a name="l00594"></a>00594                 done = <span class="keyword">true</span>;
<a name="l00595"></a>00595             }
<a name="l00596"></a>00596 
<a name="l00597"></a>00597             <span class="comment">// if neither are leaves</span>
<a name="l00598"></a>00598             <span class="keywordflow">if</span> (!done &amp;&amp; !lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; !rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00599"></a>00599                 <span class="comment">// make a node based on one of them, and add on the results of</span>
<a name="l00600"></a>00600                 <span class="comment">// recursing on the children</span>
<a name="l00601"></a>00601                 ivector* newPermBox = <span class="keyword">new</span> ivector(lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00602"></a>00602                 newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*newPermBox);
<a name="l00603"></a>00603                 newNode-&gt;nodeAdoptRight(unionNoData(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l00604"></a>00604                                                             rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()));
<a name="l00605"></a>00605                 newNode-&gt;nodeAdoptLeft(unionNoData(lhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l00606"></a>00606                                                             rhs-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()));
<a name="l00607"></a>00607             }
<a name="l00608"></a>00608         }
<a name="l00609"></a>00609         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00610"></a>00610             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00611"></a>00611             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00612"></a>00612             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00613"></a>00613             <span class="keywordflow">throw</span>;
<a name="l00614"></a>00614         }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616         <span class="keywordflow">return</span> newNode;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618     }
<a name="l00619"></a>00619     
<a name="l00620"></a>00620     <span class="comment">//src_trunk_0701</span>
<a name="l00621"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e">00621</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e" title="Internal method to reshape this to a union.">SPSnode::_reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other)
<a name="l00622"></a>00622 {
<a name="l00623"></a>00623   <a class="code" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17" title="Reshape the tree rooted at this so that it has the shape that is the non-minimal union of the tree or...">SPnode::_reshapeToUnion</a>(other);
<a name="l00624"></a>00624 }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626 <span class="comment">/* reshape this tree to have union of this shape and shape of other</span>
<a name="l00627"></a>00627 <span class="comment"> no checks on boxes since this should be redundant if used by unionNoData...</span>
<a name="l00628"></a>00628 <span class="comment">*/</span>
<a name="l00629"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#acae5407bbd325c9c4852c5a77304cee9">00629</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e" title="Internal method to reshape this to a union.">SPSnode::_reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other,
<a name="l00630"></a>00630               <span class="keywordtype">size_t</span> minChildPoints,
<a name="l00631"></a>00631               <span class="keyword">const</span> std::string&amp; errorFilename)
<a name="l00632"></a>00632 {
<a name="l00633"></a>00633   <span class="comment">// indictator for being able to do union exactly</span>
<a name="l00634"></a>00634   <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;
<a name="l00635"></a>00635   
<a name="l00636"></a>00636   <span class="keywordflow">if</span> ( other != NULL &amp;&amp; !(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) {
<a name="l00637"></a>00637 
<a name="l00638"></a>00638     <span class="comment">// this is not a leaf, other is a leaf</span>
<a name="l00639"></a>00639     <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00640"></a>00640 
<a name="l00641"></a>00641       <span class="comment">// no need to do anything</span>
<a name="l00642"></a>00642     }
<a name="l00643"></a>00643 
<a name="l00644"></a>00644     <span class="comment">// this is a leaf, other is not a leaf</span>
<a name="l00645"></a>00645     <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; !other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00646"></a>00646 
<a name="l00647"></a>00647       <span class="comment">//we need to expand this</span>
<a name="l00648"></a>00648       <span class="keywordflow">if</span> (isSplittableNode(minChildPoints)) nodeExpand();
<a name="l00649"></a>00649       <span class="keywordflow">else</span> {
<a name="l00650"></a>00650         success = <span class="keyword">false</span>;
<a name="l00651"></a>00651         <span class="comment">// log file</span>
<a name="l00652"></a>00652         std::string line = <span class="stringliteral">&quot;Could not split &quot;</span> + getNodeName() 
<a name="l00653"></a>00653          + <span class="stringliteral">&quot; because of minChildPoints&quot;</span>;
<a name="l00654"></a>00654         
<a name="l00655"></a>00655         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(errorFilename, line); 
<a name="l00656"></a>00656         
<a name="l00657"></a>00657       }
<a name="l00658"></a>00658       
<a name="l00659"></a>00659     }
<a name="l00660"></a>00660 
<a name="l00661"></a>00661     <span class="comment">// now recurse on the children if both have children</span>
<a name="l00662"></a>00662     <span class="comment">// note - it won&#39;t go here is !success because still isLeaf()</span>
<a name="l00663"></a>00663     <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>() &amp;&amp; !other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00664"></a>00664       success = getLeftChild()-&gt;_reshapeToUnion(
<a name="l00665"></a>00665           other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(), minChildPoints, errorFilename);
<a name="l00666"></a>00666       success = getRightChild()-&gt;_reshapeToUnion(
<a name="l00667"></a>00667           other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(), minChildPoints, errorFilename)
<a name="l00668"></a>00668           &amp;&amp; success;
<a name="l00669"></a>00669     }
<a name="l00670"></a>00670     
<a name="l00671"></a>00671     <span class="keywordflow">return</span> success;
<a name="l00672"></a>00672   }
<a name="l00673"></a>00673 }
<a name="l00674"></a>00674 <span class="comment">//src_trunk_0701</span>
<a name="l00675"></a>00675 
<a name="l00676"></a>00676     <span class="comment">// ------------------------ public member functions -----------------</span>
<a name="l00677"></a>00677 
<a name="l00678"></a>00678     <span class="comment">// Default constructor</span>
<a name="l00679"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5">00679</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>() :  counter(0), splitDim(-1), splitValue(0.0),
<a name="l00680"></a>00680                                 countsOnly(true)
<a name="l00681"></a>00681     {
<a name="l00682"></a>00682         <span class="keywordflow">try</span> {
<a name="l00683"></a>00683             <span class="comment">//invokes the base class default constructor</span>
<a name="l00684"></a>00684             <span class="comment">// then does additional data members</span>
<a name="l00685"></a>00685 
<a name="l00686"></a>00686             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00687"></a>00687             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00688"></a>00688 
<a name="l00689"></a>00689             <span class="comment">// reserve space</span>
<a name="l00690"></a>00690             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">defaultMaxPts</a>);
<a name="l00691"></a>00691             <span class="comment">// not sure whether to do this or not - leave for the moment</span>
<a name="l00692"></a>00692             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00693"></a>00693         }
<a name="l00694"></a>00694         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00695"></a>00695             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00696"></a>00696             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00697"></a>00697             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00698"></a>00698             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00699"></a>00699             <span class="keywordflow">throw</span>;
<a name="l00700"></a>00700         }
<a name="l00701"></a>00701 
<a name="l00702"></a>00702     }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00705"></a>00705     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00706"></a>00706     <span class="comment">// countsOnly will default to false</span>
<a name="l00707"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a51f7f0ed3dd43f8851556ea4a3cb4209">00707</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab),
<a name="l00708"></a>00708         counter(0), splitDim(-1), splitValue(0.0), countsOnly(true)
<a name="l00709"></a>00709     {
<a name="l00710"></a>00710         <span class="keywordflow">try</span> {
<a name="l00711"></a>00711             <span class="comment">//invokes the base class constructor with ivector &amp; label</span>
<a name="l00712"></a>00712             <span class="comment">// and then initialises additional data members</span>
<a name="l00713"></a>00713 
<a name="l00714"></a>00714             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00715"></a>00715             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00716"></a>00716 
<a name="l00717"></a>00717             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">defaultMaxPts</a>);
<a name="l00718"></a>00718             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00719"></a>00719             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00720"></a>00720         }
<a name="l00721"></a>00721         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00722"></a>00722             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00723"></a>00723             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00724"></a>00724             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00725"></a>00725             <span class="keywordflow">throw</span>;
<a name="l00726"></a>00726         }
<a name="l00727"></a>00727     }
<a name="l00728"></a>00728 
<a name="l00729"></a>00729     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00730"></a>00730     <span class="comment">// and value for countsOnly</span>
<a name="l00731"></a>00731     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00732"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#abcddd86c703c7263435686a5f7ad42f5">00732</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(ivector&amp; v, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab),
<a name="l00733"></a>00733         counter(0), splitDim(-1), splitValue(0.0), countsOnly(cntOnly)
<a name="l00734"></a>00734     {
<a name="l00735"></a>00735         <span class="keywordflow">try</span> {
<a name="l00736"></a>00736             <span class="comment">//invokes the base class constructor with ivector &amp; label</span>
<a name="l00737"></a>00737             <span class="comment">// and then initialises additional data members</span>
<a name="l00738"></a>00738 
<a name="l00739"></a>00739             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00740"></a>00740             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00741"></a>00741 
<a name="l00742"></a>00742             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">defaultMaxPts</a>);
<a name="l00743"></a>00743             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00744"></a>00744             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00745"></a>00745         }
<a name="l00746"></a>00746         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00747"></a>00747             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00748"></a>00748             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00749"></a>00749             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00750"></a>00750             <span class="keywordflow">throw</span>;
<a name="l00751"></a>00751         }
<a name="l00752"></a>00752     }
<a name="l00753"></a>00753 
<a name="l00754"></a>00754     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00755"></a>00755     <span class="comment">// and max for spaceIndication</span>
<a name="l00756"></a>00756     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00757"></a>00757     <span class="comment">// countsOnly defaults to false</span>
<a name="l00758"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8f8a441fe2406ef50dc3d1fb06cb5b9">00758</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">int</span> lab) :
<a name="l00759"></a>00759         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab),
<a name="l00760"></a>00760         spaceIndication(max), counter(0), splitDim(-1), splitValue(0.0),
<a name="l00761"></a>00761         countsOnly(true)
<a name="l00762"></a>00762     {
<a name="l00763"></a>00763         <span class="keywordflow">try</span> {
<a name="l00764"></a>00764             <span class="comment">//invokes the base class constructor with ivector argument</span>
<a name="l00765"></a>00765             <span class="comment">// and then initialises additional data members</span>
<a name="l00766"></a>00766 
<a name="l00767"></a>00767             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00768"></a>00768             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00769"></a>00769 
<a name="l00770"></a>00770             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00771"></a>00771             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>+1);
<a name="l00772"></a>00772         }
<a name="l00773"></a>00773         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00774"></a>00774             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00775"></a>00775             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00776"></a>00776             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00777"></a>00777             <span class="keywordflow">throw</span>;
<a name="l00778"></a>00778         }
<a name="l00779"></a>00779     }
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 
<a name="l00782"></a>00782     <span class="comment">// initialised constructor, initialised with one ivector for the box</span>
<a name="l00783"></a>00783     <span class="comment">// and max for spaceIndication and value for countsOnly</span>
<a name="l00784"></a>00784     <span class="comment">// and optionally with lab for label, defaults to 0 (see declaration)</span>
<a name="l00785"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a775af2d808a8a9a59f29e6c25b6f0e4f">00785</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab) :
<a name="l00786"></a>00786         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab),
<a name="l00787"></a>00787         spaceIndication(max), counter(0), splitDim(-1), splitValue(0.0),
<a name="l00788"></a>00788         countsOnly(cntOnly)
<a name="l00789"></a>00789     {
<a name="l00790"></a>00790         <span class="keywordflow">try</span> {
<a name="l00791"></a>00791             <span class="comment">//cout &lt;&lt; &quot;node constructor&quot; &lt;&lt; &quot;\t&quot; &lt;&lt; cntOnly &lt;&lt; endl;</span>
<a name="l00792"></a>00792             <span class="comment">//invokes the base class constructor with ivector argument</span>
<a name="l00793"></a>00793             <span class="comment">// and then initialises additional data members</span>
<a name="l00794"></a>00794 
<a name="l00795"></a>00795             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00796"></a>00796             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00797"></a>00797 
<a name="l00798"></a>00798             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00799"></a>00799             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>+1);
<a name="l00800"></a>00800         }
<a name="l00801"></a>00801         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00802"></a>00802             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00803"></a>00803             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00804"></a>00804             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00805"></a>00805             <span class="keywordflow">throw</span>;
<a name="l00806"></a>00806         }
<a name="l00807"></a>00807     }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809     <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00810"></a>00810     <span class="comment">// and a max for spaceIndication</span>
<a name="l00811"></a>00811     <span class="comment">// and optionally with cntOnly for countsOnly, defaults to false</span>
<a name="l00812"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a86d9a45e0f5a59b94d556279dafd92f9">00812</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(lb),
<a name="l00813"></a>00813         spaceIndication(max), counter(0), splitDim(-1), splitValue(0.0),
<a name="l00814"></a>00814         countsOnly(cntOnly)
<a name="l00815"></a>00815     {
<a name="l00816"></a>00816         <span class="keywordflow">try</span> {
<a name="l00817"></a>00817 
<a name="l00818"></a>00818             <span class="comment">//invokes the base class constructor with LabBox argument</span>
<a name="l00819"></a>00819             <span class="comment">//and then initialises additional data members</span>
<a name="l00820"></a>00820 
<a name="l00821"></a>00821             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00822"></a>00822             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00823"></a>00823 
<a name="l00824"></a>00824             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00825"></a>00825             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>+1);
<a name="l00826"></a>00826         }
<a name="l00827"></a>00827         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00828"></a>00828             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00829"></a>00829             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00830"></a>00830             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00831"></a>00831             <span class="keywordflow">throw</span>;
<a name="l00832"></a>00832         }
<a name="l00833"></a>00833     }
<a name="l00834"></a>00834 
<a name="l00835"></a>00835     <span class="comment">// initialised constructor, initialised with a LabBox (labeled box)</span>
<a name="l00836"></a>00836     <span class="comment">// and optionally with cntOnly for countsOnly, defaults to false</span>
<a name="l00837"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af4aa97973f8fac14503ec22574675a99">00837</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">bool</span> cntOnly) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(lb), counter(0),
<a name="l00838"></a>00838         splitDim(-1), splitValue(0.0), countsOnly(cntOnly)
<a name="l00839"></a>00839     {
<a name="l00840"></a>00840         <span class="keywordflow">try</span> {
<a name="l00841"></a>00841             <span class="comment">//invokes the base class constructor with LabBox argument</span>
<a name="l00842"></a>00842             <span class="comment">// and then initialises additional data members</span>
<a name="l00843"></a>00843 
<a name="l00844"></a>00844             <span class="comment">//dpSums, a vector of dotprecision terms, is not initialised</span>
<a name="l00845"></a>00845             <span class="comment">//dpSumProducts, similarly not initialised</span>
<a name="l00846"></a>00846 
<a name="l00847"></a>00847             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a208ab19f2444e75f9602f8fd136fc03da54168a18fc82748182314929de5e3367">defaultMaxPts</a>);
<a name="l00848"></a>00848             <span class="comment">//reserve space - not sure if important - leave for moment</span>
<a name="l00849"></a>00849             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l00850"></a>00850         }
<a name="l00851"></a>00851         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00852"></a>00852             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00853"></a>00853             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00854"></a>00854             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00855"></a>00855             <span class="keywordflow">throw</span>;
<a name="l00856"></a>00856         }
<a name="l00857"></a>00857     }
<a name="l00858"></a>00858 
<a name="l00859"></a>00859     <span class="comment">//Copy constructor</span>
<a name="l00860"></a>00860     <span class="comment">// copies from given node downwards</span>
<a name="l00861"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a56a33f7824a42568a7c9535e2ed10c88">00861</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode::SPSnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; other) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(*(other.theBox),
<a name="l00862"></a>00862         other.label), spaceIndication(other.spaceIndication),
<a name="l00863"></a>00863         counter(other.counter), dpSums(other.dpSums),
<a name="l00864"></a>00864             dpSumProducts(other.dpSumProducts), splitDim(other.splitDim),
<a name="l00865"></a>00865         splitValue(other.splitValue), countsOnly(other.countsOnly)
<a name="l00866"></a>00866     {
<a name="l00867"></a>00867         <span class="keywordflow">try</span> {
<a name="l00868"></a>00868             <span class="comment">//reserve space</span>
<a name="l00869"></a>00869             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve((other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).size());
<a name="l00870"></a>00870             <span class="comment">//copy dataItrs from other to this</span>
<a name="l00871"></a>00871             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a> = other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>;
<a name="l00872"></a>00872             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00873"></a>00873 
<a name="l00874"></a>00874             <span class="comment">//recursion on the children</span>
<a name="l00875"></a>00875             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00876"></a>00876                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(*(other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00877"></a>00877             }
<a name="l00878"></a>00878             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00879"></a>00879 
<a name="l00880"></a>00880             <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00881"></a>00881                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(*(other.<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00882"></a>00882             }
<a name="l00883"></a>00883             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00884"></a>00884         }
<a name="l00885"></a>00885         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00886"></a>00886             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00887"></a>00887             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00888"></a>00888             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00889"></a>00889             <span class="keywordflow">throw</span>;
<a name="l00890"></a>00890         }
<a name="l00891"></a>00891     }
<a name="l00892"></a>00892 
<a name="l00893"></a>00893     <span class="comment">//copy assignment operator</span>
<a name="l00894"></a>00894     <span class="comment">//copies from this node downwards</span>
<a name="l00895"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a65971d98a726cba6cf111882f984de06">00895</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a65971d98a726cba6cf111882f984de06" title="Copy assignment operator.">SPSnode::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; rhs)
<a name="l00896"></a>00896     {
<a name="l00897"></a>00897         <span class="keywordflow">try</span> {
<a name="l00898"></a>00898 
<a name="l00899"></a>00899             <span class="comment">// delete the current children (deletes their children as well)</span>
<a name="l00900"></a>00900             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) {
<a name="l00901"></a>00901                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l00902"></a>00902                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00903"></a>00903             }
<a name="l00904"></a>00904 
<a name="l00905"></a>00905             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) {
<a name="l00906"></a>00906                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00907"></a>00907                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00908"></a>00908             }
<a name="l00909"></a>00909             <span class="comment">// and delete the current box</span>
<a name="l00910"></a>00910             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00911"></a>00911                 <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00912"></a>00912                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = NULL;
<a name="l00913"></a>00913             }
<a name="l00914"></a>00914 
<a name="l00915"></a>00915             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>=NULL;
<a name="l00916"></a>00916 
<a name="l00917"></a>00917             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00918"></a>00918             <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00919"></a>00919             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00920"></a>00920             <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00921"></a>00921 
<a name="l00922"></a>00922             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>;
<a name="l00923"></a>00923 
<a name="l00924"></a>00924             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l00925"></a>00925             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>;
<a name="l00926"></a>00926             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>;
<a name="l00927"></a>00927             <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00928"></a>00928             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00929"></a>00929             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>;
<a name="l00930"></a>00930 
<a name="l00931"></a>00931             <span class="comment">//reserve space</span>
<a name="l00932"></a>00932             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve((rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>).size());
<a name="l00933"></a>00933             <span class="comment">//copy dataItrs from other to this</span>
<a name="l00934"></a>00934             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a> = rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>;
<a name="l00935"></a>00935 
<a name="l00936"></a>00936             <span class="comment">//recursion on the children</span>
<a name="l00937"></a>00937             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00938"></a>00938                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00939"></a>00939             }
<a name="l00940"></a>00940             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00941"></a>00941 
<a name="l00942"></a>00942             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00943"></a>00943                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00944"></a>00944             }
<a name="l00945"></a>00945             <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00946"></a>00946         }
<a name="l00947"></a>00947         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00948"></a>00948             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00949"></a>00949             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00950"></a>00950             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00951"></a>00951             <span class="keywordflow">throw</span>;
<a name="l00952"></a>00952         }
<a name="l00953"></a>00953 
<a name="l00954"></a>00954         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00955"></a>00955     }
<a name="l00956"></a>00956 
<a name="l00957"></a>00957 
<a name="l00958"></a>00958     <span class="comment">// A stripping &#39;constructor&#39;</span>
<a name="l00959"></a>00959     <span class="comment">// copies from given node downwards but with no data</span>
<a name="l00960"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">00960</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">SPSnode::strippedConstructor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> other)
<a name="l00961"></a>00961     {
<a name="l00962"></a>00962         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newNode = NULL;
<a name="l00963"></a>00963         <span class="keywordflow">try</span> {
<a name="l00964"></a>00964             <span class="keywordflow">if</span> (other != NULL) {
<a name="l00965"></a>00965                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>())
<a name="l00966"></a>00966                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>;
<a name="l00967"></a>00967                 <span class="keywordflow">else</span> {
<a name="l00968"></a>00968                     ivector* newBox = <span class="keyword">new</span> ivector(other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00969"></a>00969                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae8fb89ca868b4ec2b47d0273cd32f5f5" title="Default constructor.">SPSnode</a>(*newBox);
<a name="l00970"></a>00970                     newNode-&gt;splitDim = other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>;
<a name="l00971"></a>00971                     newNode-&gt;splitValue = other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>;
<a name="l00972"></a>00972                 }
<a name="l00973"></a>00973 
<a name="l00974"></a>00974                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00975"></a>00975                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = 0;
<a name="l00976"></a>00976                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> = <span class="keyword">true</span>;
<a name="l00977"></a>00977 
<a name="l00978"></a>00978                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL)
<a name="l00979"></a>00979                     newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">strippedConstructor</a>(other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()));
<a name="l00980"></a>00980                 <span class="keywordflow">if</span> (other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>() != NULL)
<a name="l00981"></a>00981                     newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#ac6259d2964d38acbb759c9f212853ef7">strippedConstructor</a>(other-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()));
<a name="l00982"></a>00982             }
<a name="l00983"></a>00983         }
<a name="l00984"></a>00984         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00985"></a>00985             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00986"></a>00986             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00987"></a>00987             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00988"></a>00988             <span class="keywordflow">throw</span>;
<a name="l00989"></a>00989         }
<a name="l00990"></a>00990 
<a name="l00991"></a>00991         <span class="keywordflow">return</span> newNode;
<a name="l00992"></a>00992     }
<a name="l00993"></a>00993 
<a name="l00994"></a>00994 
<a name="l00995"></a>00995 
<a name="l00996"></a>00996     <span class="comment">// Accessor for the counter.</span>
<a name="l00997"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3">00997</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">SPSnode::getCounter</a>()<span class="keyword"> const</span>
<a name="l00998"></a>00998 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>; }
<a name="l00999"></a>00999 
<a name="l01000"></a>01000     <span class="comment">// Accessor for the split dimension.</span>
<a name="l01001"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac">01001</a>     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac" title="Accessor for the split dimension.">SPSnode::getSplitDim</a>()<span class="keyword"> const</span>
<a name="l01002"></a>01002 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>; }
<a name="l01003"></a>01003 
<a name="l01004"></a>01004     <span class="comment">// Accessor for the split value.</span>
<a name="l01005"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420">01005</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420" title="Accessor for the split value.">SPSnode::getSplitValue</a>()<span class="keyword"> const</span>
<a name="l01006"></a>01006 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>; }
<a name="l01007"></a>01007 
<a name="l01008"></a>01008     <span class="comment">// Accessor for the countsOnly value.</span>
<a name="l01009"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a4285801767cd577432a0b13cdbdaba43">01009</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4285801767cd577432a0b13cdbdaba43" title="Accessor for the countsOnly value.">SPSnode::getCountsOnly</a>()<span class="keyword"> const</span>
<a name="l01010"></a>01010 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>; }
<a name="l01011"></a>01011 
<a name="l01012"></a>01012     <span class="comment">// Accessor for the node&#39;s data collection.</span>
<a name="l01013"></a>01013     <span class="comment">// Returns a copy of the node&#39;s collection of iterators to the big data set.</span>
<a name="l01014"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a">01014</a>     <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a" title="Accessor for the node&#39;s data collection.">SPSnode::getData</a>()<span class="keyword"> const</span>
<a name="l01015"></a>01015 <span class="keyword">    </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>; }
<a name="l01016"></a>01016 
<a name="l01017"></a>01017     <span class="comment">// Clears the node&#39;s data collection.</span>
<a name="l01018"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa4b207c66d28113dc641d7cddf691547">01018</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa4b207c66d28113dc641d7cddf691547" title="Clears the node&#39;s data collection.">SPSnode::clearData</a>()<span class="keyword"> const</span>
<a name="l01019"></a>01019 <span class="keyword">    </span>{ <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear(); }
<a name="l01020"></a>01020 
<a name="l01021"></a>01021     <span class="comment">// Clears the node&#39;s data collection and counters</span>
<a name="l01022"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a69cbe84e4c59cd1369d3900d3ff05a01">01022</a>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a69cbe84e4c59cd1369d3900d3ff05a01" title="Clears the node&#39;s data collection and counter.">SPSnode::makeEmptyNode</a>()
<a name="l01023"></a>01023    { <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear();
<a name="l01024"></a>01024      <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> = 0;
<a name="l01025"></a>01025    }
<a name="l01026"></a>01026    
<a name="l01027"></a>01027     <span class="comment">// Accessor for the parent of a node</span>
<a name="l01028"></a>01028     <span class="comment">// Returns a copy of the pointer to parent node.</span>
<a name="l01029"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4">01029</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">SPSnode::getParent</a>()<span class="keyword"> const</span>
<a name="l01030"></a>01030 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l01031"></a>01031 
<a name="l01032"></a>01032     <span class="comment">// Accessor for the left child.</span>
<a name="l01033"></a>01033     <span class="comment">// Returns a copy of the pointer to leftChild node cast to this node type</span>
<a name="l01034"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc">01034</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">SPSnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l01035"></a>01035 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l01036"></a>01036 
<a name="l01037"></a>01037     <span class="comment">// Accessor for the right child</span>
<a name="l01038"></a>01038     <span class="comment">//Returns a copy of the pointer to rightChild node cast to this node type</span>
<a name="l01039"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7">01039</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">SPSnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l01040"></a>01040 <span class="keyword">    </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l01041"></a>01041     
<a name="l01042"></a>01042     <span class="comment">//--src_trunk_0701</span>
<a name="l01043"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678">01043</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">SPSnode::checkTreeStateLegal</a>()<span class="keyword"> const </span>
<a name="l01044"></a>01044 <span class="keyword"></span>{
<a name="l01045"></a>01045   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">SPnode::checkTreeStateLegal</a>();
<a name="l01046"></a>01046 }
<a name="l01047"></a>01047 
<a name="l01048"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a48e85710afe1e6b7f4d63afa891d4e38">01048</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">SPSnode::checkTreeStateLegal</a>(<span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01049"></a>01049                 <span class="keywordtype">double</span> minVol)<span class="keyword"> const</span>
<a name="l01050"></a>01050 <span class="keyword"></span>{
<a name="l01051"></a>01051   <span class="comment">// check current state is legal by looking at everything not a leaf</span>
<a name="l01052"></a>01052   <span class="keywordtype">bool</span> legal = <span class="keyword">true</span>;
<a name="l01053"></a>01053   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l01054"></a>01054     legal = <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>(minChildPoints, minVol);
<a name="l01055"></a>01055     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() ) {
<a name="l01056"></a>01056         legal = 
<a name="l01057"></a>01057           <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(minChildPoints,
<a name="l01058"></a>01058                             minVol);
<a name="l01059"></a>01059     }
<a name="l01060"></a>01060     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() ) {
<a name="l01061"></a>01061         legal = 
<a name="l01062"></a>01062           <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(minChildPoints,
<a name="l01063"></a>01063                             minVol);
<a name="l01064"></a>01064     }
<a name="l01065"></a>01065   }
<a name="l01066"></a>01066   
<a name="l01067"></a>01067   <span class="keywordflow">return</span> legal;
<a name="l01068"></a>01068 }
<a name="l01069"></a>01069 
<a name="l01070"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ae6a71f8266d023f98489dafcc56d3819">01070</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">SPSnode::checkTreeStateLegal</a>(<span class="keywordtype">size_t</span> minChildPoints)
<a name="l01071"></a>01071 {
<a name="l01072"></a>01072   <span class="comment">// check current state is legal by looking at everything not a leaf</span>
<a name="l01073"></a>01073   <span class="keywordtype">bool</span> legal = <span class="keyword">true</span>;
<a name="l01074"></a>01074   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() ) {
<a name="l01075"></a>01075     legal = <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>(minChildPoints);
<a name="l01076"></a>01076     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() ) {
<a name="l01077"></a>01077         legal = 
<a name="l01078"></a>01078           <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(minChildPoints);
<a name="l01079"></a>01079     }
<a name="l01080"></a>01080     <span class="keywordflow">if</span> (legal &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() ) {
<a name="l01081"></a>01081         legal = 
<a name="l01082"></a>01082           <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf5893a0c2bcfe03caf2865203e6678" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>(minChildPoints);
<a name="l01083"></a>01083     }
<a name="l01084"></a>01084   }
<a name="l01085"></a>01085   
<a name="l01086"></a>01086   <span class="keywordflow">return</span> legal;
<a name="l01087"></a>01087 }
<a name="l01088"></a>01088 <span class="comment">//--src_trunk_0701</span>
<a name="l01089"></a>01089     
<a name="l01090"></a>01090     
<a name="l01091"></a>01091     
<a name="l01092"></a>01092     <span class="comment">//src_trunk_0701</span>
<a name="l01093"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">01093</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">SPSnode::isSplittableNode</a>()<span class="keyword"> const</span>
<a name="l01094"></a>01094 <span class="keyword"></span>{
<a name="l01095"></a>01095   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">SPnode::isSplittableNode</a>();
<a name="l01096"></a>01096 } 
<a name="l01097"></a>01097 
<a name="l01098"></a>01098 
<a name="l01099"></a>01099 <span class="comment">//src_trunk_0701</span>
<a name="l01100"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af8f9559a17318b187769c20e85316135">01100</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">SPSnode::isSplittableNode</a>(<span class="keywordtype">size_t</span> minChildPoints, 
<a name="l01101"></a>01101                 <span class="keywordtype">double</span> minVol)<span class="keyword"> const </span>
<a name="l01102"></a>01102 <span class="keyword"></span>{
<a name="l01103"></a>01103     
<a name="l01104"></a>01104   <span class="keywordtype">bool</span> retValue = (<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &gt;= minVol);
<a name="l01105"></a>01105 <span class="comment">//  cout &lt;&lt; nodeVolume() &lt;&lt; &quot;\t&quot; &lt;&lt; minVol &lt;&lt; endl;</span>
<a name="l01106"></a>01106   
<a name="l01107"></a>01107   <span class="comment">//cout &lt;&lt; nodeVolume() &lt;&lt; &quot;\t&quot; &lt;&lt; minVol &lt;&lt; endl;</span>
<a name="l01108"></a>01108   
<a name="l01109"></a>01109   <span class="keywordflow">if</span> (retValue) {
<a name="l01110"></a>01110     retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>(minChildPoints);
<a name="l01111"></a>01111   }
<a name="l01112"></a>01112   <span class="keywordflow">else</span> {
<a name="l01113"></a>01113 <span class="preprocessor">    #ifdef DEBUG_CHECK_NODE_COUNT</span>
<a name="l01114"></a>01114 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;isSplittableNode: node failed vol test&quot;</span> &lt;&lt; endl;
<a name="l01115"></a>01115 <span class="preprocessor">    #endif</span>
<a name="l01116"></a>01116 <span class="preprocessor"></span>  }
<a name="l01117"></a>01117   <span class="keywordflow">return</span> retValue;
<a name="l01118"></a>01118 }
<a name="l01119"></a>01119 
<a name="l01120"></a>01120 
<a name="l01121"></a>01121 <span class="comment">//src_trunk_0701</span>
<a name="l01122"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#acba45b1fe208f6218a87400eb454b28d">01122</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">SPSnode::isSplittableNode</a>(<span class="keywordtype">size_t</span> minChildPoints)<span class="keyword"> const</span>
<a name="l01123"></a>01123 <span class="keyword"></span>{
<a name="l01124"></a>01124     <span class="keywordtype">bool</span> retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#afcaf3b298a975017982e88a068bab8af">isSplittableNode</a>();  <span class="comment">//basic check</span>
<a name="l01125"></a>01125   <span class="keywordflow">if</span> (!retValue) {
<a name="l01126"></a>01126 <span class="preprocessor">    #ifdef DEBUG_CHECK_NODE_COUNT</span>
<a name="l01127"></a>01127 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;isSplittableNode: node failed basic is splittable test&quot;</span> &lt;&lt; endl;
<a name="l01128"></a>01128 <span class="preprocessor">    #endif</span>
<a name="l01129"></a>01129 <span class="preprocessor"></span><span class="preprocessor">    #ifdef DEBUG_MCMC_SPLIT_FAIL</span>
<a name="l01130"></a>01130 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;Failed isSplittableNode: I am &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> &lt;&lt; endl;
<a name="l01131"></a>01131       {
<a name="l01132"></a>01132         ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01133"></a>01133         interval maxD = box[<a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(box)];
<a name="l01134"></a>01134   
<a name="l01135"></a>01135         cout &lt;&lt; cxsc::SaveOpt;
<a name="l01136"></a>01136         cout &lt;&lt; Scientific &lt;&lt; SetPrecision(35,30);
<a name="l01137"></a>01137         cout &lt;&lt; <span class="stringliteral">&quot;interval to be split is &quot;</span> &lt;&lt; maxD &lt;&lt; endl;
<a name="l01138"></a>01138         cout &lt;&lt; cxsc::RestoreOpt;
<a name="l01139"></a>01139       }
<a name="l01140"></a>01140 <span class="preprocessor">    #endif</span>
<a name="l01141"></a>01141 <span class="preprocessor"></span>  }
<a name="l01142"></a>01142 <span class="preprocessor">  #ifdef DEBUG_CHECK_NODE_COUNT</span>
<a name="l01143"></a>01143 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;isSplittableNode minChildPoints = &quot;</span> &lt;&lt; minChildPoints &lt;&lt; endl;
<a name="l01144"></a>01144 <span class="preprocessor">  #endif</span>
<a name="l01145"></a>01145 <span class="preprocessor"></span>  <span class="keywordflow">if</span> (retValue &amp;&amp; minChildPoints &gt; 0) {
<a name="l01146"></a>01146     retValue = <span class="keyword">false</span>; <span class="comment">// need to retest</span>
<a name="l01147"></a>01147   
<a name="l01148"></a>01148     <span class="keywordtype">size_t</span>  minChildCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3df75e24c4a3a468b63f79667645c1dc">getMinChildCountIfSplitNEW</a>();
<a name="l01149"></a>01149     
<a name="l01150"></a>01150         
<a name="l01151"></a>01151     <span class="keywordflow">if</span> ( (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &gt;= minChildPoints) &amp;&amp;
<a name="l01152"></a>01152       ((minChildCount == 0) || (minChildCount &gt;= minChildPoints)) ) {
<a name="l01153"></a>01153         retValue = <span class="keyword">true</span>;
<a name="l01154"></a>01154       }
<a name="l01155"></a>01155 <span class="preprocessor">    #ifdef DEBUG_CHECK_NODE_COUNT</span>
<a name="l01156"></a>01156 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;isSplittableNode minChildCount = &quot;</span> &lt;&lt; minChildCount &lt;&lt; endl;
<a name="l01157"></a>01157       cout &lt;&lt; <span class="stringliteral">&quot;(minChildCount &gt;= minChildPoints) = &quot;</span> &lt;&lt; (minChildCount &gt;= minChildPoints) &lt;&lt; endl;
<a name="l01158"></a>01158   
<a name="l01159"></a>01159       cout &lt;&lt; <span class="stringliteral">&quot;isSplittable = &quot;</span> &lt;&lt; retValue &lt;&lt; endl;
<a name="l01160"></a>01160 <span class="preprocessor">    #endif</span>
<a name="l01161"></a>01161 <span class="preprocessor"></span>  }
<a name="l01162"></a>01162     <span class="keywordflow">return</span> retValue;
<a name="l01163"></a>01163 }
<a name="l01164"></a>01164     
<a name="l01165"></a>01165     
<a name="l01166"></a>01166 
<a name="l01167"></a>01167   <span class="comment">// get the number of datapoints currently associated with this which would</span>
<a name="l01168"></a>01168 <span class="comment">// be associated with the new left child if this node were to split</span>
<a name="l01169"></a>01169 <span class="comment">// remember that the left child&#39;s box is open at the split</span>
<a name="l01170"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b">01170</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">SPSnode::getLeftCountIfSplit</a>()<span class="keyword"> const</span>
<a name="l01171"></a>01171 <span class="keyword"></span>{
<a name="l01172"></a>01172   
<a name="l01173"></a>01173   <span class="comment">// first find what the dimension for the split would be </span>
<a name="l01174"></a>01174   <span class="comment">// if the split were made</span>
<a name="l01175"></a>01175   <span class="comment">// right hand child&#39;s box would be if that child</span>
<a name="l01176"></a>01176   <span class="comment">// were to be created</span>
<a name="l01177"></a>01177   cxsc::ivector box = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01178"></a>01178   
<a name="l01179"></a>01179   <span class="keywordtype">int</span> split = <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(box);
<a name="l01180"></a>01180   
<a name="l01181"></a>01181   cxsc::real midSplit = cxsc::mid(box[split]);
<a name="l01182"></a>01182 
<a name="l01183"></a>01183   <span class="comment">// left child would have everything up to but not including</span>
<a name="l01184"></a>01184   <span class="comment">// midSplit, on the split dimension</span>
<a name="l01185"></a>01185   <span class="keywordtype">size_t</span> leftCount = 0;
<a name="l01186"></a>01186   <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l01187"></a>01187 
<a name="l01188"></a>01188   <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.begin(); it &lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.end(); it++) {
<a name="l01189"></a>01189     <span class="comment">// DataItrs is a container of iterators to a BigDataCollection</span>
<a name="l01190"></a>01190     <span class="comment">// increment rightCount if the point is in rC</span>
<a name="l01191"></a>01191     <span class="keywordflow">if</span>(  (**it)[split] &lt; midSplit ) leftCount++;
<a name="l01192"></a>01192   }
<a name="l01193"></a>01193 
<a name="l01194"></a>01194   <span class="keywordflow">return</span> leftCount;
<a name="l01195"></a>01195 }
<a name="l01196"></a>01196 
<a name="l01197"></a>01197   <span class="comment">// Smallest number of points in either child if this was split.</span>
<a name="l01198"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08">01198</a>   <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">SPSnode::getMinChildCountIfSplit</a>()<span class="keyword"> const</span>
<a name="l01199"></a>01199 <span class="keyword">  </span>{
<a name="l01200"></a>01200     <span class="keywordflow">try</span> {
<a name="l01201"></a>01201       <span class="keywordtype">size_t</span> min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>();
<a name="l01202"></a>01202       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min) &lt; min) min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min;
<a name="l01203"></a>01203       <span class="keywordflow">return</span> min;
<a name="l01204"></a>01204     }
<a name="l01205"></a>01205     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01206"></a>01206       <span class="keywordtype">string</span> msg = string(e.what());
<a name="l01207"></a>01207       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in getMinChildCountIfSplit:\n&quot;</span> + msg);
<a name="l01208"></a>01208     }
<a name="l01209"></a>01209   }
<a name="l01210"></a>01210 
<a name="l01211"></a>01211 <span class="comment">// Smallest number of points in either child if this was split.</span>
<a name="l01212"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a3df75e24c4a3a468b63f79667645c1dc">01212</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3df75e24c4a3a468b63f79667645c1dc">SPSnode::getMinChildCountIfSplitNEW</a>()<span class="keyword"> const</span>
<a name="l01213"></a>01213 <span class="keyword"></span>{
<a name="l01214"></a>01214   <span class="keywordtype">size_t</span> min = 0;
<a name="l01215"></a>01215   
<a name="l01216"></a>01216   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01217"></a>01217     min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>();
<a name="l01218"></a>01218   }
<a name="l01219"></a>01219   <span class="keywordflow">else</span> {
<a name="l01220"></a>01220     min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01221"></a>01221   }
<a name="l01222"></a>01222   
<a name="l01223"></a>01223   <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min) &lt; min) min = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - min;
<a name="l01224"></a>01224   
<a name="l01225"></a>01225   <span class="keywordflow">return</span> min;
<a name="l01226"></a>01226   
<a name="l01227"></a>01227 }
<a name="l01228"></a>01228 
<a name="l01229"></a>01229 
<a name="l01230"></a>01230   <span class="comment">// get the number of datapoints currently associated with this which would</span>
<a name="l01231"></a>01231   <span class="comment">// be associated with the left and right children of a new right child</span>
<a name="l01232"></a>01232   <span class="comment">// if this node were split</span>
<a name="l01233"></a>01233   <span class="comment">// will return a container of the number of points the children</span>
<a name="l01234"></a>01234   <span class="comment">// of each child of target might have, in order</span>
<a name="l01235"></a>01235   <span class="comment">// [0] = left child&#39;s left child count, [1] = left child&#39;s rght child count,</span>
<a name="l01236"></a>01236   <span class="comment">// [2] = rght child&#39;s left child count, [3] = rght child&#39;s rght child count,</span>
<a name="l01237"></a>01237   <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#acbe47754c218f0c895a900330491cbb3" title="return a container of counts for prospective grandchildren.">SPSnode::getChildrensLeftAndRightCountsIfSplit</a>
<a name="l01238"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#acbe47754c218f0c895a900330491cbb3">01238</a>             (<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; grandchildCounts) <span class="keyword">const</span>
<a name="l01239"></a>01239   {
<a name="l01240"></a>01240     <span class="keywordflow">try</span> {
<a name="l01241"></a>01241 
<a name="l01242"></a>01242       <span class="comment">// first find what the children&#39;s boxes would be would be</span>
<a name="l01243"></a>01243       <span class="keywordtype">int</span> splitMe; <span class="comment">// variable to hold first longest dimension</span>
<a name="l01244"></a>01244       ivector box = getBox();
<a name="l01245"></a>01245       <span class="keywordtype">double</span> temp1 = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(box, splitMe);
<a name="l01246"></a>01246 
<a name="l01247"></a>01247       <span class="comment">// ivectors to be new boxes for new children</span>
<a name="l01248"></a>01248       ivector rCBox;
<a name="l01249"></a>01249       ivector lCBox;
<a name="l01250"></a>01250       
<a name="l01251"></a>01251       <span class="comment">// Call Upper() to get what would be the right hand child box</span>
<a name="l01252"></a>01252       <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(box, rCBox, splitMe);
<a name="l01253"></a>01253       <span class="comment">// Call Lower() to get what would be the left hand child box</span>
<a name="l01254"></a>01254       <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(box, lCBox, splitMe);
<a name="l01255"></a>01255       
<a name="l01256"></a>01256       <span class="comment">// mid point of my box on first longest dimension</span>
<a name="l01257"></a>01257       cxsc::real midSplit = cxsc::mid(box[splitMe]);
<a name="l01258"></a>01258 
<a name="l01259"></a>01259       <span class="comment">// and if those children were split</span>
<a name="l01260"></a>01260       <span class="comment">// left Child </span>
<a name="l01261"></a>01261       <span class="keywordtype">int</span> splitChildren = <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(lCBox);
<a name="l01262"></a>01262       
<a name="l01263"></a>01263       cxsc::real midSplitLC = cxsc::mid(lCBox[splitChildren]);
<a name="l01264"></a>01264       
<a name="l01265"></a>01265       <span class="comment">// right child </span>
<a name="l01266"></a>01266       <span class="comment">// will split on the same dimension as LC</span>
<a name="l01267"></a>01267       
<a name="l01268"></a>01268       cxsc::real midSplitRC = cxsc::mid(rCBox[splitChildren]);
<a name="l01269"></a>01269       
<a name="l01270"></a>01270       <span class="comment">// now find how many of this node&#39;s data points would go right</span>
<a name="l01271"></a>01271       <span class="comment">// and left children of left and right children</span>
<a name="l01272"></a>01272       <span class="keywordtype">size_t</span> rightRightCount = 0;
<a name="l01273"></a>01273       <span class="keywordtype">size_t</span> rightLeftCount = 0;
<a name="l01274"></a>01274       <span class="keywordtype">size_t</span> leftRightCount = 0;
<a name="l01275"></a>01275       <span class="keywordtype">size_t</span> leftLeftCount = 0;
<a name="l01276"></a>01276       <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l01277"></a>01277 
<a name="l01278"></a>01278       <span class="keywordflow">for</span> (it = dataItrs.begin(); it &lt; dataItrs.end(); it++) {
<a name="l01279"></a>01279         <span class="comment">// DataItrs is a container of iterators to a BigDataCollection</span>
<a name="l01280"></a>01280         rvector p = **it;
<a name="l01281"></a>01281         <span class="comment">// increment left child?</span>
<a name="l01282"></a>01282         <span class="keywordflow">if</span> ( p[splitMe] &lt; midSplit ) {
<a name="l01283"></a>01283           <span class="keywordflow">if</span> ( p[splitChildren] &lt; midSplitLC ) leftLeftCount++;
<a name="l01284"></a>01284           <span class="keywordflow">else</span> rightLeftCount++;
<a name="l01285"></a>01285         }
<a name="l01286"></a>01286         <span class="keywordflow">else</span> { <span class="comment">// on right of me</span>
<a name="l01287"></a>01287           <span class="keywordflow">if</span> ( p[splitChildren] &lt; midSplitRC) leftRightCount++;
<a name="l01288"></a>01288           <span class="keywordflow">else</span> rightRightCount++;
<a name="l01289"></a>01289         }
<a name="l01290"></a>01290       }
<a name="l01291"></a>01291 
<a name="l01292"></a>01292       grandchildCounts.push_back(leftLeftCount);
<a name="l01293"></a>01293       grandchildCounts.push_back(rightLeftCount);
<a name="l01294"></a>01294       grandchildCounts.push_back(leftRightCount);
<a name="l01295"></a>01295       grandchildCounts.push_back(rightRightCount);
<a name="l01296"></a>01296 
<a name="l01297"></a>01297 
<a name="l01298"></a>01298       <span class="keywordflow">return</span> grandchildCounts;
<a name="l01299"></a>01299     }
<a name="l01300"></a>01300     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01301"></a>01301       <span class="keywordtype">string</span> msg = string(e.what());
<a name="l01302"></a>01302       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in getChildrensLeftAndRightCountsIfSplit:\n&quot;</span> + msg);
<a name="l01303"></a>01303     }
<a name="l01304"></a>01304   }
<a name="l01305"></a>01305 
<a name="l01306"></a>01306 
<a name="l01307"></a>01307     <span class="comment">// fills in container of leaf counts, left to right</span>
<a name="l01308"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">01308</a>     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">SPSnode::getLeafNodeCounts</a>(<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; counts)<span class="keyword"> const</span>
<a name="l01309"></a>01309 <span class="keyword">    </span>{
<a name="l01310"></a>01310 
<a name="l01311"></a>01311         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01312"></a>01312             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">getLeafNodeCounts</a>(counts);
<a name="l01313"></a>01313         }
<a name="l01314"></a>01314         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01315"></a>01315             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">getLeafNodeCounts</a>(counts);
<a name="l01316"></a>01316         }
<a name="l01317"></a>01317         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()==NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()==NULL) {
<a name="l01318"></a>01318 
<a name="l01319"></a>01319             counts.push_back(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>);
<a name="l01320"></a>01320         }
<a name="l01321"></a>01321         <span class="keywordflow">return</span> counts;
<a name="l01322"></a>01322     }
<a name="l01323"></a>01323 
<a name="l01324"></a>01324 
<a name="l01325"></a>01325     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l01326"></a>01326     <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l01327"></a>01327     <span class="comment">// left to right order</span>
<a name="l01328"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954">01328</a>     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">SPSnode::getLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; leaves)<span class="keyword"> const</span>
<a name="l01329"></a>01329 <span class="keyword">    </span>{
<a name="l01330"></a>01330         <span class="comment">//if children, recurse on the children</span>
<a name="l01331"></a>01331         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01332"></a>01332             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01333"></a>01333         }
<a name="l01334"></a>01334 
<a name="l01335"></a>01335         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01336"></a>01336             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01337"></a>01337         }
<a name="l01338"></a>01338 
<a name="l01339"></a>01339         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l01340"></a>01340             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01341"></a>01341             leaves.push_back(const_cast&lt;SPSnode*&gt;(<span class="keyword">this</span>));
<a name="l01342"></a>01342         }
<a name="l01343"></a>01343         <span class="keywordflow">return</span> leaves;
<a name="l01344"></a>01344     }
<a name="l01345"></a>01345 
<a name="l01346"></a>01346     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l01347"></a>01347     <span class="comment">// contents being all the nodes in left to right order</span>
<a name="l01348"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a8683fb9b17016cbe615408b51e791b9c">01348</a>     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8683fb9b17016cbe615408b51e791b9c" title="Return a reference to all nodes.">SPSnode::getAllNodes</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; allNodes)<span class="keyword"> const</span>
<a name="l01349"></a>01349 <span class="keyword">    </span>{
<a name="l01350"></a>01350         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { <span class="comment">// this is not empty</span>
<a name="l01351"></a>01351       <span class="comment">//if (!hasLCwithBox() &amp;&amp; !hasRCwithBox()) { // this is a leaf</span>
<a name="l01352"></a>01352             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l01353"></a>01353         <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l01354"></a>01354             allNodes.push_back(const_cast&lt;SPSnode*&gt;(<span class="keyword">this</span>));
<a name="l01355"></a>01355         }
<a name="l01356"></a>01356       
<a name="l01357"></a>01357       <span class="comment">//if children, recurse on the children</span>
<a name="l01358"></a>01358         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01359"></a>01359             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a8683fb9b17016cbe615408b51e791b9c" title="Return a reference to all nodes.">getAllNodes</a>(allNodes);
<a name="l01360"></a>01360         }
<a name="l01361"></a>01361 
<a name="l01362"></a>01362         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01363"></a>01363             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a8683fb9b17016cbe615408b51e791b9c" title="Return a reference to all nodes.">getAllNodes</a>(allNodes);
<a name="l01364"></a>01364         }       
<a name="l01365"></a>01365         <span class="keywordflow">return</span> allNodes;
<a name="l01366"></a>01366    }
<a name="l01367"></a>01367 
<a name="l01368"></a>01368     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l01369"></a>01369     <span class="comment">// contents being the sub-leaf children of the given node</span>
<a name="l01370"></a>01370     <span class="comment">// sub-leaf nodes are the parents of leaf nodes and only have leaf nodes</span>
<a name="l01371"></a>01371     <span class="comment">// as children</span>
<a name="l01372"></a>01372     <span class="comment">// left to right order</span>
<a name="l01373"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70">01373</a>     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">SPSnode::getSubLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a>&amp; subleaves)<span class="keyword"> const</span>
<a name="l01374"></a>01374 <span class="keyword">    </span>{
<a name="l01375"></a>01375         <span class="comment">//if children, recurse on the children</span>
<a name="l01376"></a>01376         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l01377"></a>01377             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l01378"></a>01378         }
<a name="l01379"></a>01379 
<a name="l01380"></a>01380         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l01381"></a>01381             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l01382"></a>01382         }
<a name="l01383"></a>01383 
<a name="l01384"></a>01384         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) { <span class="comment">// this is a subleaf</span>
<a name="l01385"></a>01385             <span class="comment">// arrgh horrible - cast away const if this node is a subleaf</span>
<a name="l01386"></a>01386             subleaves.push_back(const_cast&lt;SPSnode*&gt;(<span class="keyword">this</span>));
<a name="l01387"></a>01387         }
<a name="l01388"></a>01388         <span class="keywordflow">return</span> subleaves;
<a name="l01389"></a>01389     }
<a name="l01390"></a>01390 
<a name="l01391"></a>01391 
<a name="l01392"></a>01392 
<a name="l01393"></a>01393     <span class="comment">//Returns the sum of the count over volume in the leaf nodes</span>
<a name="l01394"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#adf589d16a3e20b4285f428c8dc42d75d">01394</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf589d16a3e20b4285f428c8dc42d75d" title="Get the sum of the count over volume in the leaf nodes.">SPSnode::getSumLeafCountOverVol</a>()<span class="keyword"> const</span>
<a name="l01395"></a>01395 <span class="keyword">    </span>{
<a name="l01396"></a>01396         dotprecision sum(0.0);
<a name="l01397"></a>01397 
<a name="l01398"></a>01398         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01399"></a>01399             accumulate(sum, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, (1.0/<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l01400"></a>01400         }
<a name="l01401"></a>01401 
<a name="l01402"></a>01402         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01403"></a>01403 
<a name="l01404"></a>01404             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l01405"></a>01405             <span class="comment">// fill the container with the leaf children</span>
<a name="l01406"></a>01406             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01407"></a>01407 
<a name="l01408"></a>01408             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l01409"></a>01409 
<a name="l01410"></a>01410             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01411"></a>01411                 accumulate(sum, 1.0*((*it)-&gt;getCounter()),
<a name="l01412"></a>01412                             (1.0/(*it)-&gt;nodeVolume()));
<a name="l01413"></a>01413             }
<a name="l01414"></a>01414         }
<a name="l01415"></a>01415         <span class="keywordflow">return</span> rnd(sum);
<a name="l01416"></a>01416     }
<a name="l01417"></a>01417 
<a name="l01418"></a>01418 
<a name="l01419"></a>01419 
<a name="l01420"></a>01420 
<a name="l01421"></a>01421     <span class="comment">//Returns the count in the smallest (by count) leaf node.</span>
<a name="l01422"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a75d9675312fb76aaf98bbeb084f9d6">01422</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a75d9675312fb76aaf98bbeb084f9d6" title="Get the count of the leaf with the smallest count.">SPSnode::getSmallestLeafCount</a>()<span class="keyword"> const</span>
<a name="l01423"></a>01423 <span class="keyword">    </span>{
<a name="l01424"></a>01424         <span class="keywordtype">size_t</span> smallestCount = 0;
<a name="l01425"></a>01425 
<a name="l01426"></a>01426         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01427"></a>01427             smallestCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01428"></a>01428         }
<a name="l01429"></a>01429 
<a name="l01430"></a>01430         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01431"></a>01431             <span class="comment">// set up a container for the leaf children</span>
<a name="l01432"></a>01432             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l01433"></a>01433             <span class="comment">// fill the container with the leaf children</span>
<a name="l01434"></a>01434             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01435"></a>01435 
<a name="l01436"></a>01436             <span class="comment">// find the smallest child by count</span>
<a name="l01437"></a>01437             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l01438"></a>01438             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* smallest = *(leaves.begin());
<a name="l01439"></a>01439 
<a name="l01440"></a>01440             smallestCount = smallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01441"></a>01441 
<a name="l01442"></a>01442             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01443"></a>01443                 <span class="keywordflow">if</span> ((*it)-&gt;counter &lt; smallestCount) {
<a name="l01444"></a>01444 
<a name="l01445"></a>01445                     smallestCount = (*it)-&gt;counter;
<a name="l01446"></a>01446                 }
<a name="l01447"></a>01447             }
<a name="l01448"></a>01448         } <span class="comment">// end else not a leaf</span>
<a name="l01449"></a>01449 
<a name="l01450"></a>01450         <span class="keywordflow">return</span> smallestCount;
<a name="l01451"></a>01451     }
<a name="l01452"></a>01452 
<a name="l01453"></a>01453     <span class="comment">// Returns the count in the largest (by count) leaf node.</span>
<a name="l01454"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ae094573d2988d458e00a549039a6ad56">01454</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae094573d2988d458e00a549039a6ad56" title="Get the count in the leaf with the smallest count.">SPSnode::getLargestLeafCount</a>()<span class="keyword"> const</span>
<a name="l01455"></a>01455 <span class="keyword">    </span>{
<a name="l01456"></a>01456         <span class="keywordtype">size_t</span> largestCount = 0;
<a name="l01457"></a>01457 
<a name="l01458"></a>01458         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l01459"></a>01459             largestCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01460"></a>01460         }
<a name="l01461"></a>01461 
<a name="l01462"></a>01462         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l01463"></a>01463 
<a name="l01464"></a>01464             <span class="comment">// set up a container for the leaf children</span>
<a name="l01465"></a>01465             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l01466"></a>01466             <span class="comment">// fill the container with the leaf children</span>
<a name="l01467"></a>01467             <span class="comment">// could be just this if no children</span>
<a name="l01468"></a>01468             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l01469"></a>01469 
<a name="l01470"></a>01470             <span class="comment">// find the largest child by volume</span>
<a name="l01471"></a>01471             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l01472"></a>01472             largestCount = (*(leaves.begin()))-&gt;counter;
<a name="l01473"></a>01473 
<a name="l01474"></a>01474             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l01475"></a>01475                 <span class="keywordflow">if</span> ((*it)-&gt;counter &gt; largestCount) {
<a name="l01476"></a>01476                     largestCount = (*it)-&gt;counter;
<a name="l01477"></a>01477                 }
<a name="l01478"></a>01478             }
<a name="l01479"></a>01479         } <span class="comment">// end else not a leaf</span>
<a name="l01480"></a>01480 
<a name="l01481"></a>01481         <span class="keywordflow">return</span> largestCount;
<a name="l01482"></a>01482     }
<a name="l01483"></a>01483 
<a name="l01484"></a>01484     <span class="comment">// get the count in the ultimate root node ancestor of this node</span>
<a name="l01485"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2">01485</a>     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">SPSnode::getRootCounter</a>()<span class="keyword"> const</span>
<a name="l01486"></a>01486 <span class="keyword">    </span>{
<a name="l01487"></a>01487         <span class="keywordtype">size_t</span> retValue = 0;
<a name="l01488"></a>01488         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) { <span class="comment">// this is root</span>
<a name="l01489"></a>01489             retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01490"></a>01490         }
<a name="l01491"></a>01491         <span class="keywordflow">else</span> {
<a name="l01492"></a>01492             <span class="comment">// recurse upwards</span>
<a name="l01493"></a>01493             retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01494"></a>01494         }
<a name="l01495"></a>01495         <span class="keywordflow">return</span> retValue;
<a name="l01496"></a>01496     }
<a name="l01497"></a>01497 
<a name="l01498"></a>01498     <span class="comment">// Get the mean of the data covered by the box of a node</span>
<a name="l01499"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6">01499</a>     rvector <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">SPSnode::getMean</a>()<span class="keyword"> const</span>
<a name="l01500"></a>01500 <span class="keyword">    </span>{
<a name="l01501"></a>01501        <span class="comment">// cout &lt;&lt; &quot;Get Mean for &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01502"></a>01502     <span class="comment">//  cout &lt;&lt; getCountsOnly() &lt;&lt; &quot;\t&quot; &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01503"></a>01503       
<a name="l01504"></a>01504         <span class="comment">// set up an rvector retMean of the correct dimensions</span>
<a name="l01505"></a>01505         rvector retMean(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01506"></a>01506         <span class="comment">// loop through the elements in the dpSums vector</span>
<a name="l01507"></a>01507         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01508"></a>01508 
<a name="l01509"></a>01509             <span class="comment">// if no data elements each element or if only counts are held,</span>
<a name="l01510"></a>01510             <span class="comment">// that element of the mean is 0.0</span>
<a name="l01511"></a>01511             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> || (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> == 0)) {
<a name="l01512"></a>01512                 <span class="comment">// cxsc::rvector is indexed 1 to n</span>
<a name="l01513"></a>01513                 retMean[i+1] = 0.0;
<a name="l01514"></a>01514             }
<a name="l01515"></a>01515             <span class="comment">// if data elements, find the element-by-element mean</span>
<a name="l01516"></a>01516             <span class="keywordflow">else</span> {
<a name="l01517"></a>01517                 <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01518"></a>01518                 retMean[i+1] = rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[i])/(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>);
<a name="l01519"></a>01519             }
<a name="l01520"></a>01520         }<span class="comment">// end loop through the elements in dpSums</span>
<a name="l01521"></a>01521 
<a name="l01522"></a>01522         <span class="keywordflow">return</span> retMean;
<a name="l01523"></a>01523 
<a name="l01524"></a>01524     }
<a name="l01525"></a>01525 
<a name="l01526"></a>01526   <span class="comment">//gat41</span>
<a name="l01527"></a>01527   <span class="comment">// Get the uniform mean of the box of a node.</span>
<a name="l01528"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1">01528</a>   rvector <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">SPSnode::getUniformMean</a>()<span class="keyword"> const</span>
<a name="l01529"></a>01529 <span class="keyword">  </span>{
<a name="l01530"></a>01530     rvector unifMean(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01531"></a>01531     
<a name="l01532"></a>01532     <span class="comment">// loop through the coordinates of this box to get the midpoint at each</span>
<a name="l01533"></a>01533     <span class="comment">// coordinate</span>
<a name="l01534"></a>01534     ivector thisBox = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01535"></a>01535     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01536"></a>01536       unifMean[i] = mid(thisBox[i]);
<a name="l01537"></a>01537     }
<a name="l01538"></a>01538     <span class="keywordflow">return</span> unifMean;
<a name="l01539"></a>01539   }
<a name="l01540"></a>01540 
<a name="l01541"></a>01541   <span class="comment">//gat41</span>
<a name="l01542"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850">01542</a>   real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa3a4a9df979f04453e82d76866b52850" title="Get the Chebyshev distance for the mean.">SPSnode::getChebDistMean</a>()<span class="keyword"> const</span>
<a name="l01543"></a>01543 <span class="keyword">  </span>{
<a name="l01544"></a>01544     rvector Mean = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">getMean</a>();
<a name="l01545"></a>01545     rvector MeanUnif = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01546"></a>01546     real ChebDist = 0;
<a name="l01547"></a>01547     <span class="comment">//loop through the means and get the Chebyshev distances</span>
<a name="l01548"></a>01548     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01549"></a>01549         real temp = abs(Mean[i] - MeanUnif[i]);
<a name="l01550"></a>01550         <span class="comment">//std::cout &lt;&lt; temp &lt;&lt; &quot;\t&quot; &lt;&lt; ChebDist &lt;&lt; std::endl;</span>
<a name="l01551"></a>01551         ChebDist  = ( temp &gt; ChebDist) ? temp : ChebDist;
<a name="l01552"></a>01552       }
<a name="l01553"></a>01553       
<a name="l01554"></a>01554       <span class="comment">//cout &lt;&lt; &quot;getChebDist: &quot; &lt;&lt; endl;</span>
<a name="l01555"></a>01555       <span class="comment">//std::cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; getMean() &lt;&lt; &quot;\t&quot; &lt;&lt; getUniformMean() &lt;&lt; std::endl;</span>
<a name="l01556"></a>01556     <span class="keywordflow">return</span> ChebDist;
<a name="l01557"></a>01557   }
<a name="l01558"></a>01558   
<a name="l01559"></a>01559   
<a name="l01560"></a>01560   <span class="comment">//gat41</span>
<a name="l01561"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8">01561</a>   real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7713822499beb30a3d30f43b79c608b8" title="Get the Chebyshev distance for the var-covar.">SPSnode::getChebDistCovar</a>()<span class="keyword"> const</span>
<a name="l01562"></a>01562 <span class="keyword">  </span>{
<a name="l01563"></a>01563     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>();
<a name="l01564"></a>01564     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>();
<a name="l01565"></a>01565 
<a name="l01566"></a>01566     real ChebDist = 0;
<a name="l01567"></a>01567     <span class="comment">//loop through the real vector and get the Chebyshev distances</span>
<a name="l01568"></a>01568     
<a name="l01569"></a>01569     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01570"></a>01570         real temp = abs(Covar[i] - unifCovar[i]);
<a name="l01571"></a>01571         <span class="comment">//std::cout &lt;&lt; temp &lt;&lt; &quot;\t&quot; &lt;&lt; ChebDist &lt;&lt; std::endl;</span>
<a name="l01572"></a>01572         ChebDist  = ( temp &gt; ChebDist) ? temp : ChebDist;
<a name="l01573"></a>01573       }
<a name="l01574"></a>01574       
<a name="l01575"></a>01575       <span class="comment">//cout &lt;&lt; &quot;getChebDist: &quot; &lt;&lt; endl;</span>
<a name="l01576"></a>01576     <span class="keywordflow">return</span> ChebDist;
<a name="l01577"></a>01577   }
<a name="l01578"></a>01578   
<a name="l01579"></a>01579   <span class="comment">//gat41</span>
<a name="l01580"></a>01580   <span class="comment">// Get the empirical mass.</span>
<a name="l01581"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98">01581</a>   <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a31ee93bb53be29fd0e50ff7fcd189c98" title="get the empirical mass of the node">SPSnode::getEmpMass</a>()<span class="keyword"> const</span>
<a name="l01582"></a>01582 <span class="keyword">  </span>{
<a name="l01583"></a>01583     <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01584"></a>01584     <span class="keywordtype">double</span> empMass = (<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()*1.0)/(1.0*n);
<a name="l01585"></a>01585     <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; &quot;\t&quot; &lt;&lt; empMass &lt;&lt; endl;</span>
<a name="l01586"></a>01586     <span class="keywordflow">return</span> empMass;
<a name="l01587"></a>01587   }
<a name="l01588"></a>01588   
<a name="l01589"></a>01589    <span class="comment">//gat41</span>
<a name="l01590"></a>01590    <span class="comment">// Get the Battharchya distance.</span>
<a name="l01591"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5">01591</a>    real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa0ea6455e40f7f2bdb1e972ab080f5a5" title="Get the Bhattarchaya coefficient.">SPSnode::getHellingerDist</a>()<span class="keyword"> const</span>
<a name="l01592"></a>01592 <span class="keyword">   </span>{
<a name="l01593"></a>01593     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>(); <span class="comment">//get the covariance matrix/</span>
<a name="l01594"></a>01594     real HD = 0.0; <span class="comment">//initialize hellinger distance to 0.</span>
<a name="l01595"></a>01595 
<a name="l01596"></a>01596     <span class="comment">// if there are no points, cov should be undefined. But since we want to push</span>
<a name="l01597"></a>01597     <span class="comment">// this node to the bottom of the queue, hence let HD = 0.</span>
<a name="l01598"></a>01598     <span class="comment">// if there is one point, the variance is 0. At the moment, we do not </span>
<a name="l01599"></a>01599     <span class="comment">// want to split boxes with only one point and so also let HD = 0.</span>
<a name="l01600"></a>01600     <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 0 || <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 1 ) { <span class="keywordflow">return</span> HD = 0.0; } 
<a name="l01601"></a>01601 
<a name="l01602"></a>01602     <span class="keywordflow">else</span> {
<a name="l01603"></a>01603   <span class="comment">//    cout &lt;&lt; &quot;===========================&quot; &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01604"></a>01604       <span class="comment">//get the differences of the mean vectors</span>
<a name="l01605"></a>01605       rvector diffMean = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">getMean</a>() - <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01606"></a>01606       <span class="comment">//cout &lt;&lt; &quot;mean differences: &quot; &lt;&lt; diffMean &lt;&lt; endl;</span>
<a name="l01607"></a>01607 
<a name="l01608"></a>01608       <span class="comment">//make a gsl matrix for the mean difference</span>
<a name="l01609"></a>01609       gsl_matrix * diffMeanMat = gsl_matrix_alloc(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>, 1);
<a name="l01610"></a>01610       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01611"></a>01611         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 1; j++) {
<a name="l01612"></a>01612           gsl_matrix_set (diffMeanMat, i, j, _double(diffMean[i+1]));
<a name="l01613"></a>01613         }
<a name="l01614"></a>01614       }
<a name="l01615"></a>01615 
<a name="l01616"></a>01616       <span class="comment">// get the variances</span>
<a name="l01617"></a>01617       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>();
<a name="l01618"></a>01618 
<a name="l01619"></a>01619       <span class="comment">// initialize matrix objects</span>
<a name="l01620"></a>01620       gsl_matrix * CovarMat = gsl_matrix_alloc(dimension, dimension);
<a name="l01621"></a>01621       gsl_matrix * CovarMatMult = gsl_matrix_alloc(dimension, dimension);
<a name="l01622"></a>01622       gsl_matrix * UnifCovarMat = gsl_matrix_alloc(dimension, dimension);
<a name="l01623"></a>01623       gsl_matrix * PMat = gsl_matrix_alloc(dimension, dimension); <span class="comment">//make this same as</span>
<a name="l01624"></a>01624                                               <span class="comment">//CovarMat first</span>
<a name="l01625"></a>01625       <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l01626"></a>01626     
<a name="l01627"></a>01627       <span class="comment">// problem with stably inverting the covariance matrix - if determinant is wrong, will get -DB</span>
<a name="l01628"></a>01628       <span class="comment">// fill up the matrics for the var-covar</span>
<a name="l01629"></a>01629       <span class="keywordtype">int</span> k = 0; <span class="comment">//counter for RealVec</span>
<a name="l01630"></a>01630       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01631"></a>01631         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01632"></a>01632 
<a name="l01633"></a>01633           <span class="keywordflow">if</span> ( i == j ) {
<a name="l01634"></a>01634             gsl_matrix_set(CovarMat, i, j, _double(Covar[k]) + 0.00000001); <span class="comment">//cast to double</span>
<a name="l01635"></a>01635             gsl_matrix_set(CovarMatMult, i, j, 100*(_double(Covar[k]))+0.00000001);
<a name="l01636"></a>01636           }
<a name="l01637"></a>01637           <span class="keywordflow">else</span> {
<a name="l01638"></a>01638             gsl_matrix_set(CovarMat, i, j, _double(Covar[k])); <span class="comment">//cast to double</span>
<a name="l01639"></a>01639             gsl_matrix_set(CovarMatMult, i, j, 100*(_double(Covar[k])));
<a name="l01640"></a>01640           }
<a name="l01641"></a>01641           
<a name="l01642"></a>01642           gsl_matrix_set(PMat, i, j, _double(Covar[k])); <span class="comment">//cast to double</span>
<a name="l01643"></a>01643           gsl_matrix_set(UnifCovarMat, i, j, _double(unifCovar[k])); <span class="comment">//cast to double</span>
<a name="l01644"></a>01644           k++;
<a name="l01645"></a>01645         }
<a name="l01646"></a>01646       }
<a name="l01647"></a>01647 
<a name="l01648"></a>01648       <span class="comment">// if variance is -ve, atomic data points? treat as only one point (not</span>
<a name="l01649"></a>01649       <span class="comment">// a very good assumption at the moment) and let HD = 0. </span>
<a name="l01650"></a>01650       <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01651"></a>01651         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01652"></a>01652           <span class="keywordflow">if</span> ( (i == j) &amp;&amp; (gsl_matrix_get(CovarMat, i, j) &lt; 0) ) {
<a name="l01653"></a>01653             cerr &lt;&lt; <span class="stringliteral">&quot;Negative variance!&quot;</span> &lt;&lt; endl;
<a name="l01654"></a>01654             cout.precision(20);
<a name="l01655"></a>01655             cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt;&lt; endl;
<a name="l01656"></a>01656             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l01657"></a>01657             cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; endl;
<a name="l01658"></a>01658             cout.precision(20);
<a name="l01659"></a>01659             cout &lt;&lt; <span class="stringliteral">&quot;Data is&quot;</span> &lt;&lt; std::endl;
<a name="l01660"></a>01660             <span class="keywordflow">for</span> (dataItr = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.begin();
<a name="l01661"></a>01661               dataItr!= <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.end(); dataItr++) {
<a name="l01662"></a>01662               <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dataItr;
<a name="l01663"></a>01663               rvector theData = *bigIt;
<a name="l01664"></a>01664               cout &lt;&lt; theData &lt;&lt; endl; 
<a name="l01665"></a>01665             } <span class="comment">// end loop through data container</span>
<a name="l01666"></a>01666         
<a name="l01667"></a>01667             <span class="comment">//cerr &lt;&lt; &quot;Variance cannot be negative.&quot; &lt;&lt; endl; </span>
<a name="l01668"></a>01668             <span class="comment">//exit(1); </span>
<a name="l01669"></a>01669             
<a name="l01670"></a>01670             
<a name="l01671"></a>01671             <span class="comment">//gsl_matrix_free(CovarMat);</span>
<a name="l01672"></a>01672             <span class="comment">//gsl_matrix_free(UnifCovarMat);</span>
<a name="l01673"></a>01673             <span class="comment">//gsl_matrix_free(PMat);</span>
<a name="l01674"></a>01674             <span class="keywordflow">return</span> HD = 0.0;
<a name="l01675"></a>01675              
<a name="l01676"></a>01676           }
<a name="l01677"></a>01677         }
<a name="l01678"></a>01678       }
<a name="l01679"></a>01679   
<a name="l01680"></a>01680       <span class="comment">//else {</span>
<a name="l01681"></a>01681         <span class="comment">/*cout &lt;&lt; &quot;CovarMat: &quot; &lt;&lt; endl;</span>
<a name="l01682"></a>01682 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01683"></a>01683 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01684"></a>01684 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01685"></a>01685 <span class="comment">          }</span>
<a name="l01686"></a>01686 <span class="comment">        }</span>
<a name="l01687"></a>01687 <span class="comment">        cout &lt;&lt; &quot;CovarMatMult: &quot; &lt;&lt; endl;</span>
<a name="l01688"></a>01688 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01689"></a>01689 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01690"></a>01690 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMatMult, i, j) &lt;&lt; endl; </span>
<a name="l01691"></a>01691 <span class="comment">          }</span>
<a name="l01692"></a>01692 <span class="comment">        }</span>
<a name="l01693"></a>01693 <span class="comment">        cout &lt;&lt; &quot;UnifCovarMat: &quot; &lt;&lt; endl;</span>
<a name="l01694"></a>01694 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01695"></a>01695 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01696"></a>01696 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(UnifCovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01697"></a>01697 <span class="comment">          }</span>
<a name="l01698"></a>01698 <span class="comment">        }   </span>
<a name="l01699"></a>01699 <span class="comment">          */</span>
<a name="l01700"></a>01700         <span class="comment">//add the two matrices</span>
<a name="l01701"></a>01701         gsl_matrix_add(PMat, UnifCovarMat);
<a name="l01702"></a>01702         gsl_matrix_scale(PMat, 0.5);
<a name="l01703"></a>01703         
<a name="l01704"></a>01704         gsl_matrix * PMatForInv = gsl_matrix_alloc(dimension, dimension);
<a name="l01705"></a>01705         PMatForInv = PMat; 
<a name="l01706"></a>01706         <span class="comment">/*cout &lt;&lt; &quot;PMat: &quot; &lt;&lt; endl;</span>
<a name="l01707"></a>01707 <span class="comment">        for (int i = 0; i &lt; dimension; i++) {</span>
<a name="l01708"></a>01708 <span class="comment">          for (int j=0; j &lt; dimension; j++) {</span>
<a name="l01709"></a>01709 <span class="comment">            cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(PMat, i, j) &lt;&lt; endl; </span>
<a name="l01710"></a>01710 <span class="comment">          }</span>
<a name="l01711"></a>01711 <span class="comment">        }*/</span>
<a name="l01712"></a>01712 
<a name="l01713"></a>01713         <span class="comment">// get the determinants of CovarMat, UnifCovarMat, PMat</span>
<a name="l01714"></a>01714         <span class="keywordtype">int</span> s;
<a name="l01715"></a>01715         gsl_permutation * p = gsl_permutation_alloc(dimension);
<a name="l01716"></a>01716         gsl_linalg_LU_decomp(CovarMatMult, p, &amp;s);
<a name="l01717"></a>01717         <span class="comment">//cout &lt;&lt; &quot;CovarMat LU decomp: &quot; &lt;&lt; endl;</span>
<a name="l01718"></a>01718         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01719"></a>01719           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01720"></a>01720             <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(CovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01721"></a>01721           }
<a name="l01722"></a>01722         }
<a name="l01723"></a>01723         <span class="keywordtype">double</span> detCovarMat = gsl_linalg_LU_det(CovarMatMult, s)/(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(100,dimension));
<a name="l01724"></a>01724         <span class="comment">//cout &lt;&lt; &quot;det covar mat: &quot; &lt;&lt; detCovarMat &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l01725"></a>01725         gsl_permutation_free(p);
<a name="l01726"></a>01726         <span class="comment">// it is possible to get negative determinants, and negative DB, temporarily sweeping this under the rug </span>
<a name="l01727"></a>01727         <span class="keywordflow">if</span> (detCovarMat &lt; 0) { cout &lt;&lt; <span class="stringliteral">&quot;Negative determinant.&quot;</span> &lt;&lt; endl; exit(1); }<span class="comment">//return HD = 0.0; }</span>
<a name="l01728"></a>01728         <span class="keywordflow">else</span> {
<a name="l01729"></a>01729           
<a name="l01730"></a>01730           <span class="keywordtype">int</span> s1;
<a name="l01731"></a>01731           gsl_permutation * p1 = gsl_permutation_alloc(dimension);
<a name="l01732"></a>01732           gsl_linalg_LU_decomp(UnifCovarMat, p1, &amp;s1);
<a name="l01733"></a>01733           <span class="comment">//cout &lt;&lt; &quot;UnifCovarMat decomp: &quot; &lt;&lt; endl;</span>
<a name="l01734"></a>01734           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01735"></a>01735             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01736"></a>01736               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(UnifCovarMat, i, j) &lt;&lt; endl; </span>
<a name="l01737"></a>01737             }
<a name="l01738"></a>01738           }
<a name="l01739"></a>01739           <span class="keywordtype">double</span> detUnifCovarMat = gsl_linalg_LU_det(UnifCovarMat, s1);
<a name="l01740"></a>01740           <span class="comment">//cout &lt;&lt; &quot;det unif covar mat: &quot; &lt;&lt; detUnifCovarMat &lt;&lt; endl;</span>
<a name="l01741"></a>01741           gsl_permutation_free(p1);
<a name="l01742"></a>01742 
<a name="l01743"></a>01743           <span class="keywordtype">int</span> s2;
<a name="l01744"></a>01744           gsl_permutation * p2 = gsl_permutation_alloc(dimension);
<a name="l01745"></a>01745           gsl_linalg_LU_decomp(PMat, p2, &amp;s2);
<a name="l01746"></a>01746           <span class="keywordtype">double</span> detPMat = gsl_linalg_LU_det(PMat, s2);
<a name="l01747"></a>01747           <span class="comment">//cout &lt;&lt; &quot;det p mat: &quot; &lt;&lt; detPMat &lt;&lt; endl;</span>
<a name="l01748"></a>01748   
<a name="l01749"></a>01749           <span class="comment">//now get the inverse of P</span>
<a name="l01750"></a>01750           gsl_matrix * Pinverse = gsl_matrix_alloc(dimension, dimension); 
<a name="l01751"></a>01751           gsl_linalg_LU_invert(PMat, p2, Pinverse);
<a name="l01752"></a>01752           gsl_permutation_free(p2);
<a name="l01753"></a>01753           <span class="comment">//cout &lt;&lt; &quot;p inverse &quot; &lt;&lt; endl;</span>
<a name="l01754"></a>01754           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01755"></a>01755             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01756"></a>01756               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; &quot;\t&quot; &lt;&lt; gsl_matrix_get(Pinverse, i, j) &lt;&lt; endl; </span>
<a name="l01757"></a>01757             }
<a name="l01758"></a>01758           }
<a name="l01759"></a>01759       
<a name="l01760"></a>01760           <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l01761"></a>01761           <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l01762"></a>01762           gsl_matrix * diffMeanMatTranspose = gsl_matrix_alloc(1, dimension);
<a name="l01763"></a>01763           gsl_matrix_transpose_memcpy(diffMeanMatTranspose, diffMeanMat);
<a name="l01764"></a>01764         
<a name="l01765"></a>01765           <span class="comment">// now convert all to rmatrix for easier computations</span>
<a name="l01766"></a>01766           rmatrix diffMeanR(0, dimension-1, 0, 0);
<a name="l01767"></a>01767           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01768"></a>01768             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; 1; j++) {
<a name="l01769"></a>01769               diffMeanR[i][j] = gsl_matrix_get(diffMeanMat, i, j); 
<a name="l01770"></a>01770             }
<a name="l01771"></a>01771           }
<a name="l01772"></a>01772         
<a name="l01773"></a>01773           rmatrix diffMeanTransR(0, 0, 0, dimension-1);
<a name="l01774"></a>01774           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) {
<a name="l01775"></a>01775             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01776"></a>01776               diffMeanTransR[i][j] = gsl_matrix_get(diffMeanMatTranspose, i, j); 
<a name="l01777"></a>01777             }
<a name="l01778"></a>01778           }
<a name="l01779"></a>01779         
<a name="l01780"></a>01780           rmatrix PinvR(0, dimension-1, 0, dimension-1);
<a name="l01781"></a>01781           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01782"></a>01782             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; j++) {
<a name="l01783"></a>01783               PinvR[i][j] = gsl_matrix_get(Pinverse, i, j); 
<a name="l01784"></a>01784             }
<a name="l01785"></a>01785           }
<a name="l01786"></a>01786         
<a name="l01787"></a>01787           <span class="comment">//free the gsl_matrices</span>
<a name="l01788"></a>01788           gsl_matrix_free(CovarMat);
<a name="l01789"></a>01789           gsl_matrix_free(UnifCovarMat);
<a name="l01790"></a>01790           gsl_matrix_free(PMat);
<a name="l01791"></a>01791         
<a name="l01792"></a>01792           <span class="comment">//cout &lt;&lt; diffMeanR &lt;&lt; endl;</span>
<a name="l01793"></a>01793           <span class="comment">//cout &lt;&lt; diffMeanTransR &lt;&lt; endl;</span>
<a name="l01794"></a>01794           <span class="comment">//cout &lt;&lt; PinvR &lt;&lt; endl;</span>
<a name="l01795"></a>01795         
<a name="l01796"></a>01796           <span class="comment">//now get the Bhattacharya coefficient</span>
<a name="l01797"></a>01797           <span class="comment">//DB = 1.0/8.0 * diffMeanMat1 * invP * diffMeanMat2 + 0.5*log(detP/sqrt{detP1}{detP2});</span>
<a name="l01798"></a>01798           <span class="comment">//cout &lt;&lt; (diffMeanTransR*PinvR)*diffMeanR &lt;&lt; endl;</span>
<a name="l01799"></a>01799           rmatrix MatOp = (diffMeanTransR*PinvR)*diffMeanR;
<a name="l01800"></a>01800           <span class="comment">//cout &lt;&lt; MatOp &lt;&lt; &quot;\t&quot; &lt;&lt; MatOp[0][0] &lt;&lt; endl;</span>
<a name="l01801"></a>01801           assert(MatOp &gt;= 0);
<a name="l01802"></a>01802           real DB = 1.0/8.0 * MatOp[0][0] + 0.5*log(detPMat/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(detCovarMat*detUnifCovarMat));
<a name="l01803"></a>01803           <span class="comment">//cout &lt;&lt; &quot;DB: &quot; &lt;&lt; DB &lt;&lt; endl;</span>
<a name="l01804"></a>01804           <span class="keywordflow">if</span> (DB &lt; 0) { <span class="keywordflow">return</span> HD = 0.0; }
<a name="l01805"></a>01805           <span class="keywordflow">else</span> {
<a name="l01806"></a>01806             real BC = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-DB);
<a name="l01807"></a>01807             assert(BC &gt;= 0);
<a name="l01808"></a>01808           <span class="comment">//cout &lt;&lt; &quot;BC: &quot; &lt;&lt; BC &lt;&lt; endl;</span>
<a name="l01809"></a>01809             real HD = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1-BC);
<a name="l01810"></a>01810           <span class="comment">//cout &lt;&lt; &quot;HD: &quot; &lt;&lt; HD &lt;&lt; endl;</span>
<a name="l01811"></a>01811             assert(HD &gt;=0);
<a name="l01812"></a>01812             <span class="keywordflow">return</span> HD;
<a name="l01813"></a>01813           }
<a name="l01814"></a>01814         } <span class="comment">// end of determinant is not zero</span>
<a name="l01815"></a>01815       }
<a name="l01816"></a>01816   }   
<a name="l01817"></a>01817 
<a name="l01818"></a>01818   <span class="comment">//gat41</span>
<a name="l01819"></a>01819    <span class="comment">// Get the Hellingr distance for 1D data.</span>
<a name="l01820"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">01820</a>    real <a class="code" href="classsubpavings_1_1SPSnode.shtml#afe386393d18f1e251972e959e79c3847">SPSnode::getHellingerDist1D</a>()<span class="keyword"> const</span>
<a name="l01821"></a>01821 <span class="keyword">   </span>{
<a name="l01822"></a>01822     real HD = 0.0; 
<a name="l01823"></a>01823     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> Covar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>();
<a name="l01824"></a>01824 
<a name="l01825"></a>01825     <span class="comment">// if the variance is negative - need to investiage this more</span>
<a name="l01826"></a>01826     
<a name="l01827"></a>01827     <span class="keywordflow">if</span> (Covar[0] &lt; 0) {
<a name="l01828"></a>01828       cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt;&lt; endl;
<a name="l01829"></a>01829       cout &lt;&lt; Covar[0] &lt;&lt; endl;
<a name="l01830"></a>01830       <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l01831"></a>01831       cout &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; endl;
<a name="l01832"></a>01832       cout.precision(20);
<a name="l01833"></a>01833       cout &lt;&lt; <span class="stringliteral">&quot;Data is&quot;</span> &lt;&lt; std::endl;
<a name="l01834"></a>01834           <span class="keywordflow">for</span> (dataItr = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.begin();
<a name="l01835"></a>01835                 dataItr!= <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.end(); dataItr++) {
<a name="l01836"></a>01836 
<a name="l01837"></a>01837                 <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dataItr;
<a name="l01838"></a>01838                 rvector theData = *bigIt;
<a name="l01839"></a>01839 
<a name="l01840"></a>01840                 cout &lt;&lt; theData &lt;&lt; endl; 
<a name="l01841"></a>01841       } <span class="comment">// end loop through data container</span>
<a name="l01842"></a>01842       
<a name="l01843"></a>01843       cerr &lt;&lt; <span class="stringliteral">&quot;Variance cannot be negative.&quot;</span> &lt;&lt; endl; 
<a name="l01844"></a>01844     <span class="comment">//  exit(1);</span>
<a name="l01845"></a>01845       <span class="keywordflow">return</span> HD = 0.0; 
<a name="l01846"></a>01846     }
<a name="l01847"></a>01847 
<a name="l01848"></a>01848     <span class="comment">// can continue if variance is not negative</span>
<a name="l01849"></a>01849 
<a name="l01850"></a>01850       <span class="comment">// if there are no points, should be undefined. But since we want to push</span>
<a name="l01851"></a>01851       <span class="comment">// this node to the bottom of the queue, hence let HD = 0.</span>
<a name="l01852"></a>01852       <span class="comment">// if there is one point, the variance is 0. At the moment, we do not </span>
<a name="l01853"></a>01853       <span class="comment">//want to split boxes with only one point and so also let HD = 0.</span>
<a name="l01854"></a>01854       <span class="comment">// if variance is -ve, atomic data points? treat as only one point (not</span>
<a name="l01855"></a>01855       <span class="comment">// a very good assumption at the moment) and let HD = 0. </span>
<a name="l01856"></a>01856       <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() == 0  || Covar[0] &lt;= 0 ) { <span class="keywordflow">return</span> HD = 0.0; } 
<a name="l01857"></a>01857       <span class="comment">/*else if ( Covar[0] == 0 ) { </span>
<a name="l01858"></a>01858 <span class="comment">        cout &lt;&lt; getCounter() &lt;&lt; endl;</span>
<a name="l01859"></a>01859 <span class="comment">        cout &lt;&lt; getEmpMass() &lt;&lt; endl;</span>
<a name="l01860"></a>01860 <span class="comment">        cout &lt;&lt; nodeVolume() &lt;&lt; endl;</span>
<a name="l01861"></a>01861 <span class="comment">        cout &lt;&lt; getMean() &lt;&lt; endl;</span>
<a name="l01862"></a>01862 <span class="comment">        //cerr &lt;&lt; &quot;no variance. check!&quot; &lt;&lt; endl;</span>
<a name="l01863"></a>01863 <span class="comment">        //exit(1);</span>
<a name="l01864"></a>01864 <span class="comment">      }*/</span>
<a name="l01865"></a>01865 
<a name="l01866"></a>01866       <span class="keywordflow">else</span> {
<a name="l01867"></a>01867         <span class="comment">//get the differences of the mean vectors</span>
<a name="l01868"></a>01868         rvector diffMean = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">getMean</a>() - <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4369d3887385551e053d3873b600f8a1" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>();
<a name="l01869"></a>01869         <span class="comment">//cout &lt;&lt; &quot;mean differences: &quot; &lt;&lt; diffMean[1] &lt;&lt; endl;</span>
<a name="l01870"></a>01870         
<a name="l01871"></a>01871         <span class="comment">// get the variances</span>
<a name="l01872"></a>01872         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> unifCovar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>();
<a name="l01873"></a>01873         <span class="comment">//cout &lt;&lt; &quot;Covar: &quot; &lt;&lt; Covar[0] &lt;&lt;  endl;</span>
<a name="l01874"></a>01874         <span class="comment">//cout &lt;&lt; &quot;unifCovar: &quot; &lt;&lt; unifCovar[0] &lt;&lt; endl;</span>
<a name="l01875"></a>01875         <span class="comment">//if all the elements for CovarMat are all zero, we do not have any points in </span>
<a name="l01876"></a>01876         <span class="comment">//this leaf node - so return hellinger distance as 0</span>
<a name="l01877"></a>01877   
<a name="l01878"></a>01878         <span class="comment">// use the sqrt of the squared hellinger distance for two normal distributions</span>
<a name="l01879"></a>01879         <span class="comment">// 1 - sqrt(2*sigma1*sigma2/(sigma1^2 + sigma2^2))*exp(-0.25*(mu1-mu2)^2/(sigma1^2+sigma2^2))</span>
<a name="l01880"></a>01880         <span class="comment">//cout &lt;&lt; diffMean &lt;&lt; &quot;\t&quot;;</span>
<a name="l01881"></a>01881         interval covarI = interval(Covar[0]);
<a name="l01882"></a>01882         interval unifCovarI = interval(unifCovar[0]);
<a name="l01883"></a>01883         interval sumVar = covarI + unifCovarI;
<a name="l01884"></a>01884         <span class="comment">//cout &lt;&lt; sumVar &lt;&lt; &quot;\t&quot;;</span>
<a name="l01885"></a>01885         interval insqrt = 2*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(covarI)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(unifCovarI)/sumVar;
<a name="l01886"></a>01886         <span class="comment">//cout &lt;&lt; insqrt &lt;&lt; &quot;\t&quot;;</span>
<a name="l01887"></a>01887         interval H2 = interval(1,1) - <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(insqrt) *<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>((-0.25*diffMean[1]*diffMean[1])/sumVar);
<a name="l01888"></a>01888         <span class="comment">//cout &lt;&lt; &quot;H2: &quot; &lt;&lt; H2 &lt;&lt; endl;</span>
<a name="l01889"></a>01889         HD = mid(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(H2));
<a name="l01890"></a>01890         <span class="comment">//cout &lt;&lt; HD &lt;&lt; endl;</span>
<a name="l01891"></a>01891         <span class="keywordflow">if</span> ( HD &gt; 1 || HD &lt; 0) { 
<a name="l01892"></a>01892           cerr &lt;&lt; <span class="stringliteral">&quot;HD should be between 0 and 1.&quot;</span> &lt;&lt; endl;
<a name="l01893"></a>01893           exit(0);
<a name="l01894"></a>01894         }
<a name="l01895"></a>01895         <span class="keywordflow">return</span> HD;
<a name="l01896"></a>01896       }
<a name="l01897"></a>01897 
<a name="l01898"></a>01898   }
<a name="l01899"></a>01899 
<a name="l01900"></a>01900    
<a name="l01901"></a>01901     <span class="comment">// Get the variance-covariance vector of the data covered</span>
<a name="l01902"></a>01902     <span class="comment">// by the box of a node</span>
<a name="l01903"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a1bc0843e834ae4d09db3bc148b64761b">01903</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">SPSnode::getVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar)<span class="keyword"> const</span>
<a name="l01904"></a>01904 <span class="keyword">    </span>{
<a name="l01905"></a>01905         varCovar.clear();
<a name="l01906"></a>01906         varCovar.reserve(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01907"></a>01907 
<a name="l01908"></a>01908         <span class="comment">// loop through the elements in the dpSumProducts vector</span>
<a name="l01909"></a>01909         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; dimension*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; k++) {
<a name="l01910"></a>01910 
<a name="l01911"></a>01911             <span class="comment">// counts only held or if 0 or 1 data points</span>
<a name="l01912"></a>01912             <span class="comment">// each element of the var-covar is 0.0</span>
<a name="l01913"></a>01913             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a> || (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &lt;= 1)) {
<a name="l01914"></a>01914                 varCovar.push_back(0.0);
<a name="l01915"></a>01915             }
<a name="l01916"></a>01916             <span class="comment">// if &gt;1 data points find element-by-element var-covar</span>
<a name="l01917"></a>01917 
<a name="l01918"></a>01918             <span class="comment">/*the var-covar is the sample var-covar</span>
<a name="l01919"></a>01919 <span class="comment">            which is</span>
<a name="l01920"></a>01920 <span class="comment">            [sumproduct(i,j)-sum(i)sum(j)/counter]/(counter-1)</span>
<a name="l01921"></a>01921 <span class="comment"></span>
<a name="l01922"></a>01922 <span class="comment">            element k in the vector of dotprecison sumproducts</span>
<a name="l01923"></a>01923 <span class="comment">            corresponds to row k/n, (row 0 to n-1)</span>
<a name="l01924"></a>01924 <span class="comment">            and column k-row*n (col 0 to n-1)</span>
<a name="l01925"></a>01925 <span class="comment">            in a matrix view of the sumproducts */</span>
<a name="l01926"></a>01926 
<a name="l01927"></a>01927             <span class="keywordflow">else</span> {
<a name="l01928"></a>01928                 <span class="keywordtype">size_t</span> i = k/<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; <span class="comment">// row  (int/int = int)</span>
<a name="l01929"></a>01929                 <span class="keywordtype">size_t</span> j = k - i*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; <span class="comment">// column</span>
<a name="l01930"></a>01930 
<a name="l01931"></a>01931                 <span class="comment">// make another dotprecision variable</span>
<a name="l01932"></a>01932                 dotprecision temp1 = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>[k];
<a name="l01933"></a>01933 
<a name="l01934"></a>01934                 dotprecision temp2(0.0);
<a name="l01935"></a>01935                 <span class="comment">// sum(i) x sum(j)</span>
<a name="l01936"></a>01936                 <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01937"></a>01937                 accumulate(temp2,  rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[i]),
<a name="l01938"></a>01938                         rnd(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>[j]));
<a name="l01939"></a>01939 
<a name="l01940"></a>01940                 real div = -1.0/<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>;
<a name="l01941"></a>01941 
<a name="l01942"></a>01942                 <span class="comment">// sumproduct(i,j) - sum(i)(sum(j)/counter</span>
<a name="l01943"></a>01943                 <span class="comment">// default cxsc rounding</span>
<a name="l01944"></a>01944                 accumulate(temp1, rnd(temp2), div);
<a name="l01945"></a>01945                 <span class="comment">// calculate the variance covariance element</span>
<a name="l01946"></a>01946                 varCovar.push_back(rnd(temp1)/(1.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>-1)));
<a name="l01947"></a>01947             }
<a name="l01948"></a>01948         }<span class="comment">// end loop through the elements in dpSumProducts</span>
<a name="l01949"></a>01949 
<a name="l01950"></a>01950         <span class="keywordflow">return</span> varCovar;
<a name="l01951"></a>01951     }
<a name="l01952"></a>01952   
<a name="l01953"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">01953</a>       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">SPSnode::getVarCovar</a>()<span class="keyword"> const</span>
<a name="l01954"></a>01954 <span class="keyword">    </span>{
<a name="l01955"></a>01955         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retVarCovar;
<a name="l01956"></a>01956         retVarCovar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>(retVarCovar);
<a name="l01957"></a>01957         <span class="keywordflow">return</span> retVarCovar;
<a name="l01958"></a>01958     }
<a name="l01959"></a>01959 
<a name="l01960"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">01960</a>   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">SPSnode::getUniformVarCovar</a>()<span class="keyword"> const</span>
<a name="l01961"></a>01961 <span class="keyword">    </span>{
<a name="l01962"></a>01962         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> retVarCovar;
<a name="l01963"></a>01963         retVarCovar = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">getUniformVarCovar</a>(retVarCovar);
<a name="l01964"></a>01964         <span class="keywordflow">return</span> retVarCovar;
<a name="l01965"></a>01965     }
<a name="l01966"></a>01966     
<a name="l01967"></a>01967    <span class="comment">// Get the uniform variance-covar./R F iance vector of the data covered</span>
<a name="l01968"></a>01968     <span class="comment">// by the box of a node</span>
<a name="l01969"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a8ca1683e838159d5a33048344bec9b49">01969</a>     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a83c7f66b07ab9afd1934b080fd4af8c4">SPSnode::getUniformVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; unifVarCovar)<span class="keyword"> const</span>
<a name="l01970"></a>01970 <span class="keyword">    </span>{
<a name="l01971"></a>01971       unifVarCovar.reserve(<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>);
<a name="l01972"></a>01972       ivector thisBox = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01973"></a>01973       
<a name="l01974"></a>01974       <span class="comment">// fill in the matrix where the diag are (1/12)*(b-a)^2 and off-diag </span>
<a name="l01975"></a>01975       <span class="comment">// are 0.</span>
<a name="l01976"></a>01976       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dimension*<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01977"></a>01977           unifVarCovar.push_back(0.0); <span class="comment">//first fill up the container with 0</span>
<a name="l01978"></a>01978       }
<a name="l01979"></a>01979       <span class="comment">// then fill up the diags</span>
<a name="l01980"></a>01980       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>; i++) {
<a name="l01981"></a>01981         <span class="keywordtype">int</span> pos = i*dimension + i;
<a name="l01982"></a>01982         unifVarCovar[pos] = 1.0/12.0 * (Sup(thisBox[i+1]) - Inf(thisBox[i+1])) 
<a name="l01983"></a>01983                       * (Sup(thisBox[i+1]) - Inf(thisBox[i+1]));
<a name="l01984"></a>01984       }
<a name="l01985"></a>01985       
<a name="l01986"></a>01986       <span class="comment">//for (size_t i = 0; i &lt; dimension*dimension; i++) {cout &lt;&lt; unifVarCovar[i] &lt;&lt; endl;}</span>
<a name="l01987"></a>01987 
<a name="l01988"></a>01988         <span class="keywordflow">return</span> unifVarCovar;
<a name="l01989"></a>01989     }
<a name="l01990"></a>01990 
<a name="l01991"></a>01991 
<a name="l01992"></a>01992     
<a name="l01993"></a>01993 
<a name="l01994"></a>01994     <span class="comment">// Print the details of a of a specific node in a subpaving</span>
<a name="l01995"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aba02715cb75f803df7c3ffd1eaf027e8">01995</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#aba02715cb75f803df7c3ffd1eaf027e8" title="Output details of a specific node.">SPSnode::nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l01996"></a>01996 <span class="keyword">    </span>{
<a name="l01997"></a>01997         <span class="comment">// output for box in form:</span>
<a name="l01998"></a>01998         <span class="comment">// box, volume, counter, mean, variance covariance, and data</span>
<a name="l01999"></a>01999 
<a name="l02000"></a>02000         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l02001"></a>02001 
<a name="l02002"></a>02002             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l02003"></a>02003 
<a name="l02004"></a>02004             os &lt;&lt; <span class="stringliteral">&quot;Box is :&quot;</span>;
<a name="l02005"></a>02005 
<a name="l02006"></a>02006             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l02007"></a>02007                 <span class="comment">// c-xsc default output for intervals</span>
<a name="l02008"></a>02008                 os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; thisBox[i];
<a name="l02009"></a>02009             }
<a name="l02010"></a>02010 
<a name="l02011"></a>02011             os &lt;&lt; std::endl;
<a name="l02012"></a>02012             os &lt;&lt; <span class="stringliteral">&quot;Box volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt;&lt; std::endl;
<a name="l02013"></a>02013             os &lt;&lt; <span class="stringliteral">&quot;Counter = &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &lt;&lt; std::endl;
<a name="l02014"></a>02014 
<a name="l02015"></a>02015             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a5f5cc02f707a2b98f7a93543c71298b2" title="Print the mean in a specified format.">nodeMeanPrint</a>(os);
<a name="l02016"></a>02016             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a03042a5084349960b1fd35396dc509a5" title="Print the variance-covariance in a specified format.">nodeVarCovarPrint</a>(os);
<a name="l02017"></a>02017             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a799dd8e194518c3dd525ecba26072585" title="Print the data in a specified format.">nodeDataPrint</a>(os);
<a name="l02018"></a>02018 
<a name="l02019"></a>02019 
<a name="l02020"></a>02020             os &lt;&lt; std::endl;
<a name="l02021"></a>02021         }
<a name="l02022"></a>02022         <span class="keywordflow">return</span> os;
<a name="l02023"></a>02023 
<a name="l02024"></a>02024     }
<a name="l02025"></a>02025 
<a name="l02026"></a>02026 
<a name="l02027"></a>02027     <span class="comment">// Get this node&#39;s contribution to loglikelihood</span>
<a name="l02028"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5">02028</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">SPSnode::getLogLik</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02029"></a>02029 <span class="keyword">    </span>{
<a name="l02030"></a>02030         <span class="comment">// contribution to loglikelihood is counter*log(counter/(n * vol))</span>
<a name="l02031"></a>02031 
<a name="l02032"></a>02032         dotprecision contribution(0.0);
<a name="l02033"></a>02033         <span class="keywordflow">if</span> ((n &gt; 0) &amp;&amp; (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &gt; 0)) {
<a name="l02034"></a>02034 
<a name="l02035"></a>02035             accumulate(contribution, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>));
<a name="l02036"></a>02036             accumulate(contribution, -1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(1.0*n));
<a name="l02037"></a>02037             accumulate(contribution, -1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02038"></a>02038         }
<a name="l02039"></a>02039         <span class="comment">// default cxsc rounding to nearest</span>
<a name="l02040"></a>02040         <span class="keywordflow">return</span> rnd(contribution);
<a name="l02041"></a>02041     }
<a name="l02042"></a>02042 
<a name="l02043"></a>02043     <span class="comment">// Get change in scaled contribution to log likelihood split</span>
<a name="l02044"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433">02044</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433" title="Get change in log likelihood on split of this node.">SPSnode::getSplitChangeLogLik</a>()<span class="keyword"> const</span>
<a name="l02045"></a>02045 <span class="keyword">    </span>{
<a name="l02046"></a>02046         
<a name="l02047"></a>02047        <span class="comment">// cout &lt;&lt; &quot;caling get split change llk&quot; &lt;&lt; endl;</span>
<a name="l02048"></a>02048         
<a name="l02049"></a>02049         dotprecision change;
<a name="l02050"></a>02050         change = 0.0;
<a name="l02051"></a>02051 
<a name="l02052"></a>02052         <span class="comment">// if counter is 0 there can be no change on splitting</span>
<a name="l02053"></a>02053         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &gt; 0) {
<a name="l02054"></a>02054 
<a name="l02055"></a>02055             <span class="comment">// first find what the left hand child&#39;s counter would be if</span>
<a name="l02056"></a>02056             <span class="comment">// that child were to be created</span>
<a name="l02057"></a>02057             <span class="keywordtype">size_t</span> leftCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>();
<a name="l02058"></a>02058             <span class="comment">// current number of data points associated to node is counter</span>
<a name="l02059"></a>02059             <span class="keywordtype">size_t</span> rightCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>-leftCount;
<a name="l02060"></a>02060     
<a name="l02061"></a>02061             <span class="comment">// current node volume from nodeVolume; each child will have half</span>
<a name="l02062"></a>02062             <span class="comment">// change is</span>
<a name="l02063"></a>02063             <span class="comment">//      (lc_count*ln(lc_count) + rc_count*ln(rc_count) +</span>
<a name="l02064"></a>02064             <span class="comment">//          count*ln(2)) - (count*ln(count)</span>
<a name="l02065"></a>02065             <span class="comment">// if we split and lc_count, rc_count were the new counts in</span>
<a name="l02066"></a>02066             <span class="comment">// left and right children respectively</span>
<a name="l02067"></a>02067             <span class="comment">// note that the terms involving the total count in the histogram</span>
<a name="l02068"></a>02068             <span class="comment">// and the volume of this node cancel so this change</span>
<a name="l02069"></a>02069             <span class="comment">// is effectively scaled and does not need to use n</span>
<a name="l02070"></a>02070 
<a name="l02071"></a>02071             dotprecision currentEMP(0.0);
<a name="l02072"></a>02072             dotprecision childEMP(0.0);
<a name="l02073"></a>02073 
<a name="l02074"></a>02074             <span class="keywordflow">if</span> (leftCount &gt; 0) accumulate(childEMP, 1.0*leftCount,
<a name="l02075"></a>02075                              log(1.0*leftCount));
<a name="l02076"></a>02076 
<a name="l02077"></a>02077             <span class="keywordflow">if</span> (rightCount &gt; 0) accumulate(childEMP, 1.0*rightCount,
<a name="l02078"></a>02078                              log(1.0*rightCount));
<a name="l02079"></a>02079 
<a name="l02080"></a>02080             accumulate(childEMP, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(2.0));
<a name="l02081"></a>02081 
<a name="l02082"></a>02082             accumulate(currentEMP, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>));
<a name="l02083"></a>02083 
<a name="l02084"></a>02084             change = childEMP - currentEMP;
<a name="l02085"></a>02085         }
<a name="l02086"></a>02086         <span class="keywordflow">return</span> change;
<a name="l02087"></a>02087     }
<a name="l02088"></a>02088 
<a name="l02089"></a>02089     <span class="comment">// Get change in contribution to log likelihood on merge of leaf children</span>
<a name="l02090"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef">02090</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef" title="Get change in log likelihood on merge of this&#39; leaf chidren.">SPSnode::getMergeChangeLogLik</a>()<span class="keyword"> const</span>
<a name="l02091"></a>02091 <span class="keyword">    </span>{
<a name="l02092"></a>02092         dotprecision change;
<a name="l02093"></a>02093         change = 0.0;
<a name="l02094"></a>02094 
<a name="l02095"></a>02095         <span class="comment">// if counter is 0 there can be no change on merging</span>
<a name="l02096"></a>02096         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &gt; 0) {
<a name="l02097"></a>02097 
<a name="l02098"></a>02098             <span class="comment">// first find what the left hand child&#39;s counter is</span>
<a name="l02099"></a>02099             <span class="keywordtype">size_t</span> leftCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02100"></a>02100 
<a name="l02101"></a>02101             <span class="comment">// and right child</span>
<a name="l02102"></a>02102             <span class="keywordtype">size_t</span> rightCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02103"></a>02103 
<a name="l02104"></a>02104             <span class="comment">// change is (count*ln(count)</span>
<a name="l02105"></a>02105             <span class="comment">//      - (lc_count*ln(lc_count) + rc_count*ln(rc_count) +</span>
<a name="l02106"></a>02106             <span class="comment">//          count*ln(2))</span>
<a name="l02107"></a>02107             <span class="comment">// note that the terms involving the total count in the histogram</span>
<a name="l02108"></a>02108             <span class="comment">// and the volume of this node cancel so this change</span>
<a name="l02109"></a>02109             <span class="comment">// is effectively scaled and does not need to use n</span>
<a name="l02110"></a>02110 
<a name="l02111"></a>02111             dotprecision currentEMP(0.0);
<a name="l02112"></a>02112             dotprecision childEMP(0.0);
<a name="l02113"></a>02113             <span class="keywordflow">if</span> (leftCount &gt; 0) accumulate(childEMP, 1.0*leftCount,
<a name="l02114"></a>02114                              log(1.0*leftCount));
<a name="l02115"></a>02115 
<a name="l02116"></a>02116             <span class="keywordflow">if</span> (rightCount &gt; 0) accumulate(childEMP, 1.0*rightCount,
<a name="l02117"></a>02117                              log(1.0*rightCount));
<a name="l02118"></a>02118 
<a name="l02119"></a>02119             accumulate(childEMP, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(2.0));
<a name="l02120"></a>02120 
<a name="l02121"></a>02121             accumulate(currentEMP, 1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, log(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>));
<a name="l02122"></a>02122 
<a name="l02123"></a>02123             change = currentEMP - childEMP;
<a name="l02124"></a>02124         }
<a name="l02125"></a>02125 
<a name="l02126"></a>02126         <span class="keywordflow">return</span> change;
<a name="l02127"></a>02127     }
<a name="l02128"></a>02128 
<a name="l02129"></a>02129 
<a name="l02130"></a>02130 
<a name="l02131"></a>02131     <span class="comment">// Returns the best (smallest positive or most negative) change in EMP</span>
<a name="l02132"></a>02132     <span class="comment">// from splitting any leaf node under COPERR</span>
<a name="l02133"></a>02133     <span class="comment">// n is total points, used for scaling</span>
<a name="l02134"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4">02134</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3b5e815e94d8a276d7b13c0dc25a8dc4" title="Get best change in EMP under COPERR from splitting any leaf.">SPSnode::getBestSplitChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02135"></a>02135 <span class="keyword">    </span>{
<a name="l02136"></a>02136         dotprecision bestEMPChange;
<a name="l02137"></a>02137         bestEMPChange = 0.0;
<a name="l02138"></a>02138 
<a name="l02139"></a>02139         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l02140"></a>02140             bestEMPChange = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">getSplitChangeEMPCOPERR</a>(n);
<a name="l02141"></a>02141         }
<a name="l02142"></a>02142 
<a name="l02143"></a>02143         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l02144"></a>02144             <span class="comment">// set up a container for the leaf children</span>
<a name="l02145"></a>02145             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l02146"></a>02146             <span class="comment">// fill the container with the leaf children</span>
<a name="l02147"></a>02147             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02148"></a>02148 
<a name="l02149"></a>02149             <span class="comment">// find the best child for splitting</span>
<a name="l02150"></a>02150             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l02151"></a>02151             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* best = *(leaves.begin());
<a name="l02152"></a>02152 
<a name="l02153"></a>02153             bestEMPChange = best-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">getSplitChangeEMPCOPERR</a>(n);
<a name="l02154"></a>02154 
<a name="l02155"></a>02155             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l02156"></a>02156                 <span class="keywordflow">if</span> ((*it)-&gt;getSplitChangeEMPCOPERR(n) &lt; bestEMPChange) {
<a name="l02157"></a>02157 
<a name="l02158"></a>02158                     bestEMPChange = (*it)-&gt;getSplitChangeEMPCOPERR(n);
<a name="l02159"></a>02159                 }
<a name="l02160"></a>02160             }
<a name="l02161"></a>02161         } <span class="comment">// end else not a leaf</span>
<a name="l02162"></a>02162 
<a name="l02163"></a>02163         <span class="keywordflow">return</span> bestEMPChange;
<a name="l02164"></a>02164     }
<a name="l02165"></a>02165 
<a name="l02166"></a>02166     <span class="comment">// Returns the best (smallest positive or most negative) change in EMP</span>
<a name="l02167"></a>02167     <span class="comment">// from splitting any leaf node under AIC</span>
<a name="l02168"></a>02168     <span class="comment">// term involving n cancels out of change</span>
<a name="l02169"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a53b9e7117d36f7730d458f26d74e0d28">02169</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a53b9e7117d36f7730d458f26d74e0d28" title="Get best change in EMP under AIC from splitting any leaf.">SPSnode::getBestSplitChangeEMPAIC</a>()<span class="keyword"> const</span>
<a name="l02170"></a>02170 <span class="keyword">    </span>{
<a name="l02171"></a>02171         dotprecision bestEMPChange;
<a name="l02172"></a>02172         bestEMPChange = 0.0;
<a name="l02173"></a>02173 
<a name="l02174"></a>02174         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {  <span class="comment">// this is a leaf</span>
<a name="l02175"></a>02175             bestEMPChange = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">getSplitChangeEMPAIC</a>();
<a name="l02176"></a>02176         }
<a name="l02177"></a>02177 
<a name="l02178"></a>02178         <span class="keywordflow">else</span> { <span class="comment">// this is not a leaf</span>
<a name="l02179"></a>02179             <span class="comment">// set up a container for the leaf children</span>
<a name="l02180"></a>02180             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l02181"></a>02181             <span class="comment">// fill the container with the leaf children</span>
<a name="l02182"></a>02182             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02183"></a>02183 
<a name="l02184"></a>02184             <span class="comment">// find the best child for splitting</span>
<a name="l02185"></a>02185             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l02186"></a>02186             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* best = *(leaves.begin());
<a name="l02187"></a>02187 
<a name="l02188"></a>02188             bestEMPChange = best-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">getSplitChangeEMPAIC</a>();
<a name="l02189"></a>02189 
<a name="l02190"></a>02190             <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l02191"></a>02191                 <span class="keywordflow">if</span> ((*it)-&gt;getSplitChangeEMPAIC() &lt; bestEMPChange) {
<a name="l02192"></a>02192 
<a name="l02193"></a>02193                     bestEMPChange = (*it)-&gt;getSplitChangeEMPAIC();
<a name="l02194"></a>02194                 }
<a name="l02195"></a>02195             }
<a name="l02196"></a>02196         } <span class="comment">// end else not a leaf</span>
<a name="l02197"></a>02197 
<a name="l02198"></a>02198         <span class="keywordflow">return</span> bestEMPChange;
<a name="l02199"></a>02199     }
<a name="l02200"></a>02200 
<a name="l02201"></a>02201 <span class="comment">// Returns the best (smallest positive or most negative) change in EMP</span>
<a name="l02202"></a>02202     <span class="comment">// from merging any subleaf node under COPERR</span>
<a name="l02203"></a>02203     <span class="comment">// n is total points, used for scaling</span>
<a name="l02204"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf8fbd3c03d1edeedbd5a793c9b822d">02204</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a7cf8fbd3c03d1edeedbd5a793c9b822d" title="Get best change in EMP under COPERR from merging any subleaf.">SPSnode::getBestMergeChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02205"></a>02205 <span class="keyword">    </span>{
<a name="l02206"></a>02206         dotprecision bestEMPChange;
<a name="l02207"></a>02207         bestEMPChange = 0.0;
<a name="l02208"></a>02208 
<a name="l02209"></a>02209         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) {  <span class="comment">// this is a subleaf</span>
<a name="l02210"></a>02210             bestEMPChange = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(n);
<a name="l02211"></a>02211         }
<a name="l02212"></a>02212 
<a name="l02213"></a>02213         <span class="keywordflow">else</span> { <span class="comment">// this is not a subleaf</span>
<a name="l02214"></a>02214             <span class="comment">// set up a container for the subleaf children</span>
<a name="l02215"></a>02215             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> subleaves;
<a name="l02216"></a>02216             <span class="comment">// fill the container with the leaf children</span>
<a name="l02217"></a>02217             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l02218"></a>02218 
<a name="l02219"></a>02219             <span class="comment">// find the best child for splitting</span>
<a name="l02220"></a>02220             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l02221"></a>02221             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* best = *(subleaves.begin());
<a name="l02222"></a>02222 
<a name="l02223"></a>02223             bestEMPChange = best-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(n);
<a name="l02224"></a>02224 
<a name="l02225"></a>02225             <span class="keywordflow">for</span>(it = subleaves.begin(); it &lt; subleaves.end(); it++) {
<a name="l02226"></a>02226                 <span class="keywordflow">if</span> ((*it)-&gt;getMergeChangeEMPCOPERR(n) &lt; bestEMPChange) {
<a name="l02227"></a>02227 
<a name="l02228"></a>02228                     bestEMPChange = (*it)-&gt;getMergeChangeEMPCOPERR(n);
<a name="l02229"></a>02229                 }
<a name="l02230"></a>02230             }
<a name="l02231"></a>02231         } <span class="comment">// end else not a subleaf</span>
<a name="l02232"></a>02232 
<a name="l02233"></a>02233         <span class="keywordflow">return</span> bestEMPChange;
<a name="l02234"></a>02234     }
<a name="l02235"></a>02235 
<a name="l02236"></a>02236     <span class="comment">// Returns the best (smallest positive or most negative) change in EMP</span>
<a name="l02237"></a>02237     <span class="comment">// from merging any subleaf node under AIC</span>
<a name="l02238"></a>02238     <span class="comment">// term involving n cancels out of change</span>
<a name="l02239"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a0e8b9126a14255276600bf5293d33e24">02239</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a0e8b9126a14255276600bf5293d33e24" title="Get best change in EMP under AIC from merging any subleaf.">SPSnode::getBestMergeChangeEMPAIC</a>()<span class="keyword"> const</span>
<a name="l02240"></a>02240 <span class="keyword">    </span>{
<a name="l02241"></a>02241         dotprecision bestEMPChange;
<a name="l02242"></a>02242         bestEMPChange = 0.0;
<a name="l02243"></a>02243 
<a name="l02244"></a>02244         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>()) {  <span class="comment">// this is a subleaf</span>
<a name="l02245"></a>02245             bestEMPChange = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>();
<a name="l02246"></a>02246         }
<a name="l02247"></a>02247 
<a name="l02248"></a>02248         <span class="keywordflow">else</span> { <span class="comment">// this is not a sub leaf</span>
<a name="l02249"></a>02249             <span class="comment">// set up a container for the subleaf children</span>
<a name="l02250"></a>02250             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> subleaves;
<a name="l02251"></a>02251             <span class="comment">// fill the container with the leaf children</span>
<a name="l02252"></a>02252             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l02253"></a>02253 
<a name="l02254"></a>02254             <span class="comment">// find the best child for splitting</span>
<a name="l02255"></a>02255             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l02256"></a>02256             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* best = *(subleaves.begin());
<a name="l02257"></a>02257 
<a name="l02258"></a>02258             bestEMPChange = best-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>();
<a name="l02259"></a>02259 
<a name="l02260"></a>02260             <span class="keywordflow">for</span>(it = subleaves.begin(); it &lt; subleaves.end(); it++) {
<a name="l02261"></a>02261                 <span class="keywordflow">if</span> ((*it)-&gt;getMergeChangeEMPAIC() &lt; bestEMPChange) {
<a name="l02262"></a>02262 
<a name="l02263"></a>02263                     bestEMPChange = (*it)-&gt;getMergeChangeEMPAIC();
<a name="l02264"></a>02264                 }
<a name="l02265"></a>02265             }
<a name="l02266"></a>02266         } <span class="comment">// end else not a subleaf</span>
<a name="l02267"></a>02267 
<a name="l02268"></a>02268         <span class="keywordflow">return</span> bestEMPChange;
<a name="l02269"></a>02269     }
<a name="l02270"></a>02270 
<a name="l02271"></a>02271     <span class="comment">// Get this node&#39;s scaled contribution to sum term</span>
<a name="l02272"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a483f3b91707cda0deaee7a05d0523f3b">02272</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#a483f3b91707cda0deaee7a05d0523f3b" title="Get this node&#39;s scaled contribution to EMP under COPERR.">SPSnode::getEMPContributionCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02273"></a>02273 <span class="keyword">    </span>{
<a name="l02274"></a>02274         <span class="comment">// current number of data points associated to node is counter</span>
<a name="l02275"></a>02275         <span class="comment">// current node volume from nodeVolume, and each child will have half</span>
<a name="l02276"></a>02276 
<a name="l02277"></a>02277         dotprecision contribution(0.0);
<a name="l02278"></a>02278         <span class="keywordflow">if</span> ((n &gt; 0) &amp;&amp; (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> &gt; 0)) {
<a name="l02279"></a>02279             accumulate(contribution, -(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(1.0*n),
<a name="l02280"></a>02280                     (1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02281"></a>02281         }
<a name="l02282"></a>02282 
<a name="l02283"></a>02283         <span class="comment">// contribution is -counter^2/(n^2 * vol)</span>
<a name="l02284"></a>02284         <span class="comment">// default cxsc rounding to nearest</span>
<a name="l02285"></a>02285 
<a name="l02286"></a>02286         <span class="comment">//return contribution;</span>
<a name="l02287"></a>02287         <span class="keywordflow">return</span> rnd(contribution);
<a name="l02288"></a>02288     }
<a name="l02289"></a>02289 
<a name="l02290"></a>02290     <span class="comment">// Get this node&#39;s scaled contribution to EMP under AIC.</span>
<a name="l02291"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#aa939623d58172bc7f24ddf5dd249b5c2">02291</a>     real <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa939623d58172bc7f24ddf5dd249b5c2" title="Get this node&#39;s scaled contribution to EMP under AIC.">SPSnode::getEMPContributionAIC</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02292"></a>02292 <span class="keyword">    </span>{
<a name="l02293"></a>02293         <span class="keywordflow">return</span> -<a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">getLogLik</a>(n);
<a name="l02294"></a>02294     }
<a name="l02295"></a>02295 
<a name="l02296"></a>02296     <span class="comment">// Get change in scaled contribution to EMP under COPERR on split</span>
<a name="l02297"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c">02297</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a33925f531930c000200f452209b0128c" title="Get scaled change in sum term in EMP under COPERR on split.">SPSnode::getSplitChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02298"></a>02298 <span class="keyword">    </span>{
<a name="l02299"></a>02299         <span class="comment">// first find what the left hand child&#39;s counter would be if that child</span>
<a name="l02300"></a>02300         <span class="comment">// were to be created</span>
<a name="l02301"></a>02301         <span class="keywordtype">size_t</span> leftCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad077233e00a7093d66e35cca6fc6db6b" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>();
<a name="l02302"></a>02302 
<a name="l02303"></a>02303         <span class="comment">// current number of data points associated to node is counter</span>
<a name="l02304"></a>02304         <span class="comment">// current node volume from nodeVolume, and each child will have half</span>
<a name="l02305"></a>02305 
<a name="l02306"></a>02306         <span class="comment">// change is 1/(n^2 * vol) x (counter^2 - 2(lc_count^2 + rc_count^2))</span>
<a name="l02307"></a>02307         <span class="comment">// if we split and lc_count, rc_count were the new counts in</span>
<a name="l02308"></a>02308         <span class="comment">// left and right children respectively</span>
<a name="l02309"></a>02309         <span class="comment">// Change is scaled by n, total points in histogram</span>
<a name="l02310"></a>02310         dotprecision change;
<a name="l02311"></a>02311         change = 0.0;
<a name="l02312"></a>02312         <span class="keywordflow">if</span> (n &gt; 0) {
<a name="l02313"></a>02313             accumulate(change, (1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()),
<a name="l02314"></a>02314                                 (1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(1.0*n));
<a name="l02315"></a>02315             accumulate(change, (1.0*leftCount)/(1.0*n),
<a name="l02316"></a>02316                                 -(2.0*leftCount)/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02317"></a>02317             accumulate(change, (1.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - leftCount))/(1.0*n),
<a name="l02318"></a>02318                                 -(2.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - leftCount))/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02319"></a>02319         }
<a name="l02320"></a>02320         <span class="keywordflow">return</span> change;
<a name="l02321"></a>02321     }
<a name="l02322"></a>02322 
<a name="l02323"></a>02323     <span class="comment">// Get change in sum term in EMP under AIC on split.</span>
<a name="l02324"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408">02324</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#af75b1acec69e86469838524097fab408" title="Get change in sum term in EMP under AIC on split.">SPSnode::getSplitChangeEMPAIC</a>()<span class="keyword"> const</span>
<a name="l02325"></a>02325 <span class="keyword">    </span>{
<a name="l02326"></a>02326         <span class="keywordflow">return</span> -<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433" title="Get change in log likelihood on split of this node.">getSplitChangeLogLik</a>();
<a name="l02327"></a>02327 
<a name="l02328"></a>02328     }
<a name="l02329"></a>02329 
<a name="l02330"></a>02330     <span class="comment">// Get change in scaled contribution to EMP under COPERR on merge</span>
<a name="l02331"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585">02331</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">SPSnode::getMergeChangeEMPCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02332"></a>02332 <span class="keyword">    </span>{
<a name="l02333"></a>02333         <span class="comment">// first find what the left hand child&#39;s counter is</span>
<a name="l02334"></a>02334         <span class="keywordtype">size_t</span> leftCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02335"></a>02335 
<a name="l02336"></a>02336         <span class="comment">// and right child</span>
<a name="l02337"></a>02337         <span class="keywordtype">size_t</span> rightCount = <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02338"></a>02338 
<a name="l02339"></a>02339         <span class="comment">// current number of data points associated to node is counter</span>
<a name="l02340"></a>02340         <span class="comment">// current node volume from nodeVolume, and each child will have half</span>
<a name="l02341"></a>02341 
<a name="l02342"></a>02342         <span class="comment">// change is 1/(n^2 * vol) x (2(lc_count^2 + rc_count^2) - counter^2)</span>
<a name="l02343"></a>02343         <span class="comment">// Change is scaled by n, total points in histogram</span>
<a name="l02344"></a>02344         dotprecision change;
<a name="l02345"></a>02345         change = 0.0;
<a name="l02346"></a>02346         <span class="keywordflow">if</span> (n &gt; 0) {
<a name="l02347"></a>02347             accumulate(change, (1.0*leftCount)/(1.0*n),
<a name="l02348"></a>02348                                 (2.0*leftCount)/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02349"></a>02349             accumulate(change, (1.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - leftCount))/(1.0*n),
<a name="l02350"></a>02350                                 (2.0*(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a> - leftCount))/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l02351"></a>02351             accumulate(change, -(1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(n*<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()),
<a name="l02352"></a>02352                                     (1.0*<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>)/(1.0*n));
<a name="l02353"></a>02353         }
<a name="l02354"></a>02354         <span class="keywordflow">return</span> change;
<a name="l02355"></a>02355     }
<a name="l02356"></a>02356 
<a name="l02357"></a>02357 
<a name="l02358"></a>02358 
<a name="l02359"></a>02359     <span class="comment">// Get change in sum term in EMP under AIC on merge.</span>
<a name="l02360"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19">02360</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">SPSnode::getMergeChangeEMPAIC</a>()<span class="keyword"> const</span>
<a name="l02361"></a>02361 <span class="keyword">    </span>{
<a name="l02362"></a>02362         <span class="keywordflow">return</span> -<a class="code" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef" title="Get change in log likelihood on merge of this&#39; leaf chidren.">getMergeChangeLogLik</a>();
<a name="l02363"></a>02363     }
<a name="l02364"></a>02364 
<a name="l02365"></a>02365   <span class="comment">//src_trunk_0701</span>
<a name="l02366"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2">02366</a>   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">SPSnode::reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other)
<a name="l02367"></a>02367 {
<a name="l02368"></a>02368   <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">SPnode::reshapeToUnion</a>(other);
<a name="l02369"></a>02369   
<a name="l02370"></a>02370 }
<a name="l02371"></a>02371 
<a name="l02372"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#afe32d323547d5169b03ed9058922ac9d">02372</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">SPSnode::reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other,
<a name="l02373"></a>02373             <span class="keywordtype">size_t</span> minChildPoints)
<a name="l02374"></a>02374 {
<a name="l02375"></a>02375   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() || other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l02376"></a>02376     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a>(
<a name="l02377"></a>02377     <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;, size_t)&quot;</span>);
<a name="l02378"></a>02378   }
<a name="l02379"></a>02379   <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() )  {
<a name="l02380"></a>02380     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a>(
<a name="l02381"></a>02381     <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;, size_t)&quot;</span>);
<a name="l02382"></a>02382   }
<a name="l02383"></a>02383   <span class="keywordflow">if</span> ( !other.<a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>() )
<a name="l02384"></a>02384     <span class="keywordflow">throw</span> runtime_error(
<a name="l02385"></a>02385     <span class="stringliteral">&quot;SPnode::reshapeToUnion(const SPnode&amp;, size_t) : other has illegal tree state&quot;</span>);
<a name="l02386"></a>02386   
<a name="l02387"></a>02387   std::string baseErrorFilename(<span class="stringliteral">&quot;ReshapeErrors&quot;</span>);
<a name="l02388"></a>02388   std::string errorFilename = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseErrorFilename);
<a name="l02389"></a>02389   
<a name="l02390"></a>02390   <span class="keywordtype">bool</span> success = this-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#add75213a0cf94b42aa82aca57b02da3e" title="Internal method to reshape this to a union.">_reshapeToUnion</a>(
<a name="l02391"></a>02391           &amp;other, minChildPoints, errorFilename);
<a name="l02392"></a>02392   
<a name="l02393"></a>02393   <span class="comment">// if we returned success there should be no file with that name</span>
<a name="l02394"></a>02394   <span class="keywordflow">if</span>(!success) {
<a name="l02395"></a>02395     std::cerr &lt;&lt; <span class="stringliteral">&quot;\nCould not exactly reshape this to the union:&quot;</span>
<a name="l02396"></a>02396       &lt;&lt; <span class="stringliteral">&quot; check &quot;</span> &lt;&lt; errorFilename &lt;&lt; <span class="stringliteral">&quot; for errors\n&quot;</span> &lt;&lt; endl;
<a name="l02397"></a>02397   }
<a name="l02398"></a>02398   
<a name="l02399"></a>02399 }
<a name="l02400"></a>02400 <span class="comment">//--src_trunk_0701</span>
<a name="l02401"></a>02401 
<a name="l02402"></a>02402     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l02403"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1">02403</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">SPSnode::leavesOutputTabs</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l02404"></a>02404 <span class="keyword">    </span>{
<a name="l02405"></a>02405         <span class="comment">// uses  member function leafOutputTabs to generate node output</span>
<a name="l02406"></a>02406         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02407"></a>02407             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a3cc0c8bb64c854ef16ba03891f5945d6" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l02408"></a>02408             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02409"></a>02409 
<a name="l02410"></a>02410         }
<a name="l02411"></a>02411 
<a name="l02412"></a>02412         <span class="comment">//recurse on the children</span>
<a name="l02413"></a>02413         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02414"></a>02414             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l02415"></a>02415         }
<a name="l02416"></a>02416 
<a name="l02417"></a>02417         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02418"></a>02418             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l02419"></a>02419         }
<a name="l02420"></a>02420 
<a name="l02421"></a>02421     }
<a name="l02422"></a>02422 
<a name="l02423"></a>02423     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l02424"></a>02424     <span class="comment">// including unscaled EMP contributions and changes if split</span>
<a name="l02425"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb">02425</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">SPSnode::leavesOutputTabsWithEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l02426"></a>02426                             std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l02427"></a>02427 <span class="keyword">    </span>{
<a name="l02428"></a>02428         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) { <span class="comment">// root</span>
<a name="l02429"></a>02429             std::string headers = <span class="stringliteral">&quot;node \t vol \t count \t EMP COPERR &quot;</span>;
<a name="l02430"></a>02430             headers += <span class="stringliteral">&quot;\t &amp;change \t EMP AIC \t &amp;change \t dimensions \n&quot;</span>;
<a name="l02431"></a>02431             os &lt;&lt; headers;
<a name="l02432"></a>02432         }
<a name="l02433"></a>02433 
<a name="l02434"></a>02434         <span class="comment">// uses  member function leafOutputTabsWithEMPs to generate node output</span>
<a name="l02435"></a>02435         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02436"></a>02436             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac273545c33e3abb0114811e7a1b06f98" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithEMPs</a>(bigN, os, prec);
<a name="l02437"></a>02437             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02438"></a>02438 
<a name="l02439"></a>02439         }
<a name="l02440"></a>02440 
<a name="l02441"></a>02441         <span class="comment">//recurse on the children</span>
<a name="l02442"></a>02442         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02443"></a>02443             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithEMPs</a>(bigN, os, prec);
<a name="l02444"></a>02444         }
<a name="l02445"></a>02445 
<a name="l02446"></a>02446         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02447"></a>02447             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithEMPs</a>(bigN, os, prec);
<a name="l02448"></a>02448         }
<a name="l02449"></a>02449 
<a name="l02450"></a>02450     }
<a name="l02451"></a>02451 
<a name="l02452"></a>02452 
<a name="l02453"></a>02453     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l02454"></a>02454     <span class="comment">//including output for the height of histogram bins for a</span>
<a name="l02455"></a>02455     <span class="comment">// normalised histogram based on this tree with this as root</span>
<a name="l02456"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904">02456</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">SPSnode::leavesOutputTabsWithHistHeight</a>(
<a name="l02457"></a>02457                         std::ostream &amp;os, <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l02458"></a>02458 <span class="keyword">    </span>{
<a name="l02459"></a>02459         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, os, prec);
<a name="l02460"></a>02460         <span class="keywordflow">return</span> (os);
<a name="l02461"></a>02461     }
<a name="l02462"></a>02462 
<a name="l02463"></a>02463     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l02464"></a>02464     <span class="comment">//including output for the height of histogram bins for a</span>
<a name="l02465"></a>02465     <span class="comment">// normalised histogram based on tree with total number of data points bigN.</span>
<a name="l02466"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a7f8027e04d883efdf7b627208775b989">02466</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">SPSnode::leavesOutputTabsWithHistHeight</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l02467"></a>02467                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l02468"></a>02468 <span class="keyword">    </span>{
<a name="l02469"></a>02469         <span class="comment">// uses  member function leafOutputTabs to generate node output</span>
<a name="l02470"></a>02470         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02471"></a>02471             <a class="code" href="classsubpavings_1_1SPSnode.shtml#aaf9ac8d98bda6e99c74b946d85c6bc61" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l02472"></a>02472             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02473"></a>02473 
<a name="l02474"></a>02474         }
<a name="l02475"></a>02475 
<a name="l02476"></a>02476         <span class="comment">//recurse on the children</span>
<a name="l02477"></a>02477         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02478"></a>02478             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l02479"></a>02479         }
<a name="l02480"></a>02480 
<a name="l02481"></a>02481         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02482"></a>02482             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a11c1e7c0e652b891c08dfefebd285904" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(bigN, os, prec);
<a name="l02483"></a>02483         }
<a name="l02484"></a>02484     }
<a name="l02485"></a>02485 
<a name="l02486"></a>02486     <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l02487"></a>02487     <span class="comment">// including unscaled EMP contributions and changes if split</span>
<a name="l02488"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a">02488</a>     std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a" title="Output for for all leaves of a binary tree.">SPSnode::leavesOutputTabsWithHistHeightAndEMPs</a>(
<a name="l02489"></a>02489                     <span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN, std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec)<span class="keyword"> const</span>
<a name="l02490"></a>02490 <span class="keyword">    </span>{
<a name="l02491"></a>02491         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) { <span class="comment">// root</span>
<a name="l02492"></a>02492             std::string headers = <span class="stringliteral">&quot;node \t vol \t count \t height &quot;</span>;
<a name="l02493"></a>02493             headers += <span class="stringliteral">&quot;\t EMP COPERR \t &amp;change \t EMP AIC \t &amp;change &quot;</span>;
<a name="l02494"></a>02494             headers += <span class="stringliteral">&quot;\t dimensions \n&quot;</span>;
<a name="l02495"></a>02495             os &lt;&lt; headers;
<a name="l02496"></a>02496         }
<a name="l02497"></a>02497 
<a name="l02498"></a>02498         <span class="comment">// uses  member function leafOutputTabsWithEMPs to generate node output</span>
<a name="l02499"></a>02499         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02500"></a>02500             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad64bd4af47589b21d9c8dde5135c3d0a" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeightAndEMPs</a>(bigN, os, prec);
<a name="l02501"></a>02501             <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l02502"></a>02502 
<a name="l02503"></a>02503         }
<a name="l02504"></a>02504 
<a name="l02505"></a>02505         <span class="comment">//recurse on the children</span>
<a name="l02506"></a>02506         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02507"></a>02507             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeightAndEMPs</a>(bigN,
<a name="l02508"></a>02508                                                                     os, prec);
<a name="l02509"></a>02509         }
<a name="l02510"></a>02510 
<a name="l02511"></a>02511         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02512"></a>02512             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a24b8bd122c6509dd0bdb1d11b52edb7a" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeightAndEMPs</a>(bigN,
<a name="l02513"></a>02513                                                                     os, prec);
<a name="l02514"></a>02514         }
<a name="l02515"></a>02515 
<a name="l02516"></a>02516     }
<a name="l02517"></a>02517 
<a name="l02518"></a>02518     <span class="comment">// Get the scaled EMP sum term under COPERR for the tree rooted at this</span>
<a name="l02519"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278">02519</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278" title="Get scaled EMP sum under COPERR for tree rooted at this.">SPSnode::getEMPSumCOPERR</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02520"></a>02520 <span class="keyword">    </span>{
<a name="l02521"></a>02521         dotprecision retValue;
<a name="l02522"></a>02522         retValue = 0.0;
<a name="l02523"></a>02523 
<a name="l02524"></a>02524         <span class="comment">// uses  member function getEMPContributionCOPERR for leaf value</span>
<a name="l02525"></a>02525         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02526"></a>02526             retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a483f3b91707cda0deaee7a05d0523f3b" title="Get this node&#39;s scaled contribution to EMP under COPERR.">getEMPContributionCOPERR</a>(n);
<a name="l02527"></a>02527         }
<a name="l02528"></a>02528 
<a name="l02529"></a>02529         <span class="comment">//recurse on the children</span>
<a name="l02530"></a>02530         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02531"></a>02531             retValue = retValue + <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278" title="Get scaled EMP sum under COPERR for tree rooted at this.">getEMPSumCOPERR</a>(n);
<a name="l02532"></a>02532         }
<a name="l02533"></a>02533 
<a name="l02534"></a>02534         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02535"></a>02535             retValue = retValue + <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278" title="Get scaled EMP sum under COPERR for tree rooted at this.">getEMPSumCOPERR</a>(n);
<a name="l02536"></a>02536         }
<a name="l02537"></a>02537 
<a name="l02538"></a>02538         <span class="keywordflow">return</span> retValue;
<a name="l02539"></a>02539 
<a name="l02540"></a>02540     }
<a name="l02541"></a>02541 
<a name="l02542"></a>02542     <span class="comment">// Get the unscaled EMP sum term under AIC for the tree rooted at this</span>
<a name="l02543"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15">02543</a>     dotprecision <a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15" title="Get the unscaled EMP sum under AIC for tree rooted at this.">SPSnode::getEMPSumAIC</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> n)<span class="keyword"> const</span>
<a name="l02544"></a>02544 <span class="keyword">    </span>{
<a name="l02545"></a>02545         dotprecision retValue;
<a name="l02546"></a>02546         retValue = 0.0;
<a name="l02547"></a>02547 
<a name="l02548"></a>02548         <span class="comment">// uses  member function getEMPContributionAIC for leaf result</span>
<a name="l02549"></a>02549         <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l02550"></a>02550             retValue = <a class="code" href="classsubpavings_1_1SPSnode.shtml#aa939623d58172bc7f24ddf5dd249b5c2" title="Get this node&#39;s scaled contribution to EMP under AIC.">getEMPContributionAIC</a>(n);
<a name="l02551"></a>02551         }
<a name="l02552"></a>02552 
<a name="l02553"></a>02553         <span class="comment">//recurse on the children</span>
<a name="l02554"></a>02554         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l02555"></a>02555             retValue+=<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15" title="Get the unscaled EMP sum under AIC for tree rooted at this.">getEMPSumAIC</a>(n);
<a name="l02556"></a>02556         }
<a name="l02557"></a>02557 
<a name="l02558"></a>02558         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l02559"></a>02559             retValue+=<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15" title="Get the unscaled EMP sum under AIC for tree rooted at this.">getEMPSumAIC</a>(n);
<a name="l02560"></a>02560         }
<a name="l02561"></a>02561         <span class="keywordflow">return</span> retValue;
<a name="l02562"></a>02562     }
<a name="l02563"></a>02563 
<a name="l02564"></a>02564 
<a name="l02565"></a>02565     <span class="comment">// Check if a node contains a datapoint</span>
<a name="l02566"></a>02566   <span class="comment">// it is assumed that the node will have a box</span>
<a name="l02567"></a>02567   <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l02568"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22">02568</a>   <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">SPSnode::nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l02569"></a>02569               <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd)<span class="keyword"> const</span>
<a name="l02570"></a>02570 <span class="keyword">  </span>{
<a name="l02571"></a>02571     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l02572"></a>02572     
<a name="l02573"></a>02573     <span class="comment">// only check for total containment if this is a parent node</span>
<a name="l02574"></a>02574     <span class="comment">// or to be treated as such</span>
<a name="l02575"></a>02575     <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> == NULL) || (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>)) {
<a name="l02576"></a>02576     
<a name="l02577"></a>02577       <span class="comment">// cast p to an ivector</span>
<a name="l02578"></a>02578       ivector pvec = _ivector(p);
<a name="l02579"></a>02579     
<a name="l02580"></a>02580       <span class="comment">//find if p is in the box</span>
<a name="l02581"></a>02581       <span class="keywordflow">if</span> (pvec &lt;= <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l02582"></a>02582         retValue = <span class="keyword">true</span>;
<a name="l02583"></a>02583       }
<a name="l02584"></a>02584     }
<a name="l02585"></a>02585     <span class="comment">// if not to be treated as a whole box, we assume it was in the parent</span>
<a name="l02586"></a>02586     <span class="comment">// and only check ourselves with respect to the split dimension</span>
<a name="l02587"></a>02587     <span class="comment">// and if this is a right child it can be anywhere </span>
<a name="l02588"></a>02588     <span class="comment">// but  this is a left child,</span>
<a name="l02589"></a>02589     <span class="comment">// we need to check the split</span>
<a name="l02590"></a>02590     <span class="comment">// find what dimension the parent was split on and what</span>
<a name="l02591"></a>02591     <span class="comment">// the split value was</span>
<a name="l02592"></a>02592     <span class="comment">// pvector must be strictly less than parentSplitValue</span>
<a name="l02593"></a>02593     <span class="comment">// on the split dimension</span>
<a name="l02594"></a>02594     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a> != NULL) { <span class="comment">// truly not a parent node</span>
<a name="l02595"></a>02595     
<a name="l02596"></a>02596       <span class="keywordtype">int</span> parentSplitDim = (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#afe262ee997e6ac57a15193a7d585f0ac" title="Accessor for the split dimension.">getSplitDim</a>();
<a name="l02597"></a>02597       real parentSplitValue = (<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeaa3e348d84106def631d3cd742a1420" title="Accessor for the split value.">getSplitValue</a>();
<a name="l02598"></a>02598       
<a name="l02599"></a>02599       <span class="keywordtype">bool</span> strictlyLeft = (p[parentSplitDim] &lt; parentSplitValue);
<a name="l02600"></a>02600 
<a name="l02601"></a>02601       <span class="keywordflow">if</span> (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>) { 
<a name="l02602"></a>02602         retValue = strictlyLeft;
<a name="l02603"></a>02603         }
<a name="l02604"></a>02604       <span class="keywordflow">if</span> (childInd == <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>) { 
<a name="l02605"></a>02605         retValue = !strictlyLeft; 
<a name="l02606"></a>02606       }
<a name="l02607"></a>02607     }
<a name="l02608"></a>02608     
<a name="l02609"></a>02609     <span class="keywordflow">return</span> retValue;
<a name="l02610"></a>02610   }
<a name="l02611"></a>02611 
<a name="l02612"></a>02612    <span class="comment">// Get the number of counts in any given box</span>
<a name="l02613"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988">02613</a>   <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988" title="Get the number of points in any box.">SPSnode::spsContains</a>(ivector &amp; z, <span class="keywordtype">int</span> countBox, <span class="keywordtype">int</span> countInBox)<span class="keyword"> const</span>
<a name="l02614"></a>02614 <span class="keyword">   </span>{
<a name="l02615"></a>02615       <span class="comment">// Query box is z and box to be compared is theBox accessed by getBox()</span>
<a name="l02616"></a>02616       <span class="comment">// z is assumed not to be empty</span>
<a name="l02617"></a>02617       <span class="comment">// nb Intersection() gives error if unequal index sets passed</span>
<a name="l02618"></a>02618          
<a name="l02619"></a>02619       <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>; <span class="comment">// for the return value</span>
<a name="l02620"></a>02620         
<a name="l02621"></a>02621       <span class="comment">// case of no intersection, i.e. the intersection of theBox and z is</span>
<a name="l02622"></a>02622       <span class="comment">// empty </span>
<a name="l02623"></a>02623         ivector r; <span class="comment">// temporary ivector</span>
<a name="l02624"></a>02624          <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(r, z, <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())==0){
<a name="l02625"></a>02625             retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02626"></a>02626             <span class="keywordflow">return</span> countBox; 
<a name="l02627"></a>02627          }        
<a name="l02628"></a>02628   
<a name="l02629"></a>02629          <span class="comment">// case of isEmpty() being true</span>
<a name="l02630"></a>02630          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()){
<a name="l02631"></a>02631          <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>; <span class="comment">// for the return value</span>
<a name="l02632"></a>02632          }
<a name="l02633"></a>02633  
<a name="l02634"></a>02634          <span class="comment">// case of a non-empty leaf</span>
<a name="l02635"></a>02635          <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {           
<a name="l02636"></a>02636             ivector r; <span class="comment">// temporary, to be passed to Intersection                 </span>
<a name="l02637"></a>02637             <span class="keywordflow">if</span> (z&lt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l02638"></a>02638             <span class="comment">// z is contained inside theBox but borders are not included</span>
<a name="l02639"></a>02639              
<a name="l02640"></a>02640                <span class="comment">// make z a SPSnode</span>
<a name="l02641"></a>02641                <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> queryNode(z, 1);
<a name="l02642"></a>02642   
<a name="l02643"></a>02643                <span class="comment">// access data in theBox</span>
<a name="l02644"></a>02644                <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> boxData = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a" title="Accessor for the node&#39;s data collection.">getData</a>();
<a name="l02645"></a>02645                <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> boxDataItr;
<a name="l02646"></a>02646                  
<a name="l02647"></a>02647                <span class="comment">// check if queryNode contains data from theBox</span>
<a name="l02648"></a>02648                <span class="keywordflow">for</span>(boxDataItr = boxData.begin(); boxDataItr != boxData.end(); boxDataItr++){
<a name="l02649"></a>02649                   <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *boxDataItr; 
<a name="l02650"></a>02650                   rvector theData = *bigIt;  <span class="comment">// convert NodeData to rvector</span>
<a name="l02651"></a>02651                     
<a name="l02652"></a>02652                   <span class="comment">// if nodeContains is true, increment countInBox</span>
<a name="l02653"></a>02653                   <span class="keywordflow">if</span>(queryNode.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(theData, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>)){
<a name="l02654"></a>02654                      countInBox += 1;
<a name="l02655"></a>02655                   }
<a name="l02656"></a>02656                }                             
<a name="l02657"></a>02657                  
<a name="l02658"></a>02658                 <span class="comment">// final count;</span>
<a name="l02659"></a>02659                 countBox = countInBox;
<a name="l02660"></a>02660                 retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>;
<a name="l02661"></a>02661             } 
<a name="l02662"></a>02662           
<a name="l02663"></a>02663             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (z==<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) {
<a name="l02664"></a>02664             <span class="comment">// z fully covers theBox, including the borders</span>
<a name="l02665"></a>02665                countBox += <a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l02666"></a>02666                retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">BI_TRUE</a>;
<a name="l02667"></a>02667             }
<a name="l02668"></a>02668        
<a name="l02669"></a>02669             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(r, z, <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l02670"></a>02670             <span class="comment">// result is indeterminate if there is an intersection but z is not             </span>
<a name="l02671"></a>02671         <span class="comment">// wholly in theBox&quot;</span>
<a name="l02672"></a>02672                 
<a name="l02673"></a>02673                <span class="keywordflow">if</span> (Inf(r) == Sup(r)){
<a name="l02674"></a>02674                   retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l02675"></a>02675                }
<a name="l02676"></a>02676  
<a name="l02677"></a>02677                <span class="keywordflow">else</span>{
<a name="l02678"></a>02678             <span class="comment">// make z a SPSnode</span>
<a name="l02679"></a>02679             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> queryNode(z, 1);
<a name="l02680"></a>02680   
<a name="l02681"></a>02681             <span class="comment">// access data in theBox</span>
<a name="l02682"></a>02682             <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> boxData = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8906934b09d85e67c49d38548e0cd38a" title="Accessor for the node&#39;s data collection.">getData</a>();
<a name="l02683"></a>02683             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> boxDataItr;
<a name="l02684"></a>02684                  
<a name="l02685"></a>02685             <span class="comment">// check if queryNode contains data from theBox</span>
<a name="l02686"></a>02686             <span class="keywordflow">for</span>(boxDataItr = boxData.begin(); boxDataItr != boxData.end(); boxDataItr++){
<a name="l02687"></a>02687               <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *boxDataItr; 
<a name="l02688"></a>02688               rvector theData = *bigIt;  <span class="comment">// convert NodeData to rvector</span>
<a name="l02689"></a>02689                      
<a name="l02690"></a>02690               <span class="comment">// if nodeContains is true, increment countInBox</span>
<a name="l02691"></a>02691               <span class="keywordflow">if</span>(queryNode.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(theData, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>)){
<a name="l02692"></a>02692                 countInBox += 1;
<a name="l02693"></a>02693               }
<a name="l02694"></a>02694             }                             
<a name="l02695"></a>02695                 
<a name="l02696"></a>02696             <span class="comment">// final count;</span>
<a name="l02697"></a>02697             countBox += countInBox;
<a name="l02698"></a>02698             retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l02699"></a>02699                }
<a name="l02700"></a>02700             }
<a name="l02701"></a>02701  
<a name="l02702"></a>02702             <span class="keywordflow">else</span> {
<a name="l02703"></a>02703           <span class="comment">// Case that there is no intersection</span>
<a name="l02704"></a>02704           retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02705"></a>02705             }
<a name="l02706"></a>02706             
<a name="l02707"></a>02707            <span class="keywordflow">return</span> countBox;
<a name="l02708"></a>02708          } <span class="comment">// end (!isEmpty() &amp;&amp; isLeaf())</span>
<a name="l02709"></a>02709           
<a name="l02710"></a>02710          <span class="comment">//case of an non-empty non-leaf</span>
<a name="l02711"></a>02711          <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02712"></a>02712             ivector Lz, Rz; <span class="comment">// ivectors passed to Intersection()</span>
<a name="l02713"></a>02713             <span class="comment">// will contain intersection after Intersection() call</span>
<a name="l02714"></a>02714  
<a name="l02715"></a>02715             <span class="comment">// to hold results of tests on left and right children</span>
<a name="l02716"></a>02716             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Ltest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02717"></a>02717             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> Rtest = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02718"></a>02718  
<a name="l02719"></a>02719             <span class="comment">// indicators for tested left and right sides</span>
<a name="l02720"></a>02720             <span class="keywordtype">bool</span> LtestSuccess = <span class="keyword">false</span>;
<a name="l02721"></a>02721             <span class="keywordtype">bool</span> RtestSuccess = <span class="keyword">false</span>;
<a name="l02722"></a>02722 
<a name="l02723"></a>02723  <span class="comment">//        cout &lt;&lt; &quot;    // Find if there is a leftChild with a box&quot; &lt;&lt; endl;</span>
<a name="l02724"></a>02724            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp;
<a name="l02725"></a>02725                <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Lz, z, <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l02726"></a>02726                <span class="comment">// Lz contains intersctn of z &amp; leftChild box</span>
<a name="l02727"></a>02727                <span class="comment">// test Lz and left child node</span>
<a name="l02728"></a>02728                <span class="comment">//Ltest = </span>
<a name="l02729"></a>02729                countBox =  (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988" title="Get the number of points in any box.">spsContains</a>(Lz, countBox, countInBox));
<a name="l02730"></a>02730                LtestSuccess = <span class="keyword">true</span>;
<a name="l02731"></a>02731             }
<a name="l02732"></a>02732                   
<a name="l02733"></a>02733    <span class="comment">//    cout &lt;&lt; &quot;   // Find if there is a rightChild with a box&quot; &lt;&lt; endl;</span>
<a name="l02734"></a>02734            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp;
<a name="l02735"></a>02735                <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Rz, z, <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l02736"></a>02736                <span class="comment">// Rz contains intersctn of z &amp; rightChild box </span>
<a name="l02737"></a>02737                <span class="comment">// test Rz and right child node</span>
<a name="l02738"></a>02738                <span class="comment">//Rtest = </span>
<a name="l02739"></a>02739                countBox =  <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1ac36ca4768f69aab39ae45aaace5988" title="Get the number of points in any box.">spsContains</a>(Rz, countBox, countInBox);
<a name="l02740"></a>02740                RtestSuccess = <span class="keyword">true</span>;
<a name="l02741"></a>02741             }
<a name="l02742"></a>02742         
<a name="l02743"></a>02743  <span class="comment">//          cout &lt;&lt; &quot;  // if both children tested &quot; &lt;&lt; endl;</span>
<a name="l02744"></a>02744            <span class="keywordflow">if</span> (LtestSuccess &amp;&amp; RtestSuccess) {
<a name="l02745"></a>02745                <span class="comment">//return value is the result of both tests</span>
<a name="l02746"></a>02746                <span class="comment">// if the same or BI_INDET if diff</span>
<a name="l02747"></a>02747                Ltest==Rtest ?
<a name="l02748"></a>02748                retValue = Ltest : retValue=<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l02749"></a>02749             }
<a name="l02750"></a>02750           
<a name="l02751"></a>02751  <span class="comment">//           cout &lt;&lt; &quot; // if has two children but neither was tested&quot; &lt;&lt; endl;</span>
<a name="l02752"></a>02752             <span class="comment">// ie neither Intersection() returned true</span>
<a name="l02753"></a>02753             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l02754"></a>02754                &amp;&amp; !LtestSuccess &amp;&amp; !RtestSuccess) {
<a name="l02755"></a>02755                retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02756"></a>02756                <span class="comment">// note that the AIA book has BI_TRUE here</span>
<a name="l02757"></a>02757                <span class="comment">// but this can&#39;t be correct</span>
<a name="l02758"></a>02758             }
<a name="l02759"></a>02759   
<a name="l02760"></a>02760    <span class="comment">//       cout &lt;&lt; &quot;  // if has two children but only right was tested&quot; &lt;&lt; endl;</span>
<a name="l02761"></a>02761              <span class="comment">// ie left Intersection() returned false</span>
<a name="l02762"></a>02762              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l02763"></a>02763                 &amp;&amp; !LtestSuccess &amp;&amp; RtestSuccess) {
<a name="l02764"></a>02764                 retValue = Rtest;
<a name="l02765"></a>02765                 <span class="comment">// return value result of test of right side</span>
<a name="l02766"></a>02766              }
<a name="l02767"></a>02767             
<a name="l02768"></a>02768      <span class="comment">//   cout &lt;&lt; &quot;    // if has two children but only left was tested&quot; &lt;&lt; endl;</span>
<a name="l02769"></a>02769              <span class="comment">// ie right Intersection() returned false</span>
<a name="l02770"></a>02770              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l02771"></a>02771                  &amp;&amp; LtestSuccess &amp;&amp; !RtestSuccess) {
<a name="l02772"></a>02772                  retValue = Ltest;
<a name="l02773"></a>02773                  <span class="comment">// return value result of test of left side</span>
<a name="l02774"></a>02774              }
<a name="l02775"></a>02775            
<a name="l02776"></a>02776  <span class="comment">//    cout &lt;&lt; &quot;   // if has right child only and that child was tested&quot; &lt;&lt; endl;</span>
<a name="l02777"></a>02777              <span class="comment">// ie Intersection() returned true</span>
<a name="l02778"></a>02778              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()
<a name="l02779"></a>02779                  &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; RtestSuccess) {
<a name="l02780"></a>02780                  <span class="comment">// if all of z contained in right child&#39;s box</span>
<a name="l02781"></a>02781                  <span class="keywordflow">if</span> (Rz==z) {
<a name="l02782"></a>02782                      retValue = Rtest;
<a name="l02783"></a>02783                  }
<a name="l02784"></a>02784                  <span class="comment">// return false if Rtest false, else INDET</span>
<a name="l02785"></a>02785                  <span class="keywordflow">else</span> {
<a name="l02786"></a>02786                        Rtest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> ? retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>
<a name="l02787"></a>02787                        : retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l02788"></a>02788                  }
<a name="l02789"></a>02789             }
<a name="l02790"></a>02790             
<a name="l02791"></a>02791  <span class="comment">//    cout &lt;&lt; &quot;  // if has right child only and that child not tested&quot; &lt;&lt; endl;</span>
<a name="l02792"></a>02792              <span class="comment">// ie Intersection() returned false</span>
<a name="l02793"></a>02793              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()
<a name="l02794"></a>02794                  &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !RtestSuccess) {
<a name="l02795"></a>02795                  retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02796"></a>02796              }
<a name="l02797"></a>02797              
<a name="l02798"></a>02798  <span class="comment">//    cout &lt;&lt; &quot;   // if has left child only and that child was tested&quot; &lt;&lt; endl;</span>
<a name="l02799"></a>02799              <span class="comment">// ie Intersection() returned true</span>
<a name="l02800"></a>02800              <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l02801"></a>02801                  &amp;&amp; LtestSuccess) {
<a name="l02802"></a>02802                  <span class="comment">// if whole of z contained in left child&#39;s box</span>
<a name="l02803"></a>02803                  <span class="keywordflow">if</span> (Lz==z) {
<a name="l02804"></a>02804                      retValue = Ltest;
<a name="l02805"></a>02805                  }
<a name="l02806"></a>02806                  <span class="comment">// return false if Ltest false, otherwise INDET</span>
<a name="l02807"></a>02807                  <span class="keywordflow">else</span> {
<a name="l02808"></a>02808                        Ltest==<a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> ?
<a name="l02809"></a>02809                        retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a> :
<a name="l02810"></a>02810                        retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">BI_INDET</a>;
<a name="l02811"></a>02811                   }
<a name="l02812"></a>02812              }
<a name="l02813"></a>02813            
<a name="l02814"></a>02814  <span class="comment">//   cout &lt;&lt; &quot;   // if has left child only &amp; that child was not tested&quot; &lt;&lt; endl;</span>
<a name="l02815"></a>02815              <span class="comment">// ie Intersection() returned false</span>
<a name="l02816"></a>02816              <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()
<a name="l02817"></a>02817                  &amp;&amp; !LtestSuccess) {
<a name="l02818"></a>02818                  retValue = <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">BI_FALSE</a>;
<a name="l02819"></a>02819              }
<a name="l02820"></a>02820  
<a name="l02821"></a>02821            <span class="comment">//  case no children covered by isLeaf() block above</span>
<a name="l02822"></a>02822          } <span class="comment">// end of (!isEmpty() &amp;&amp; !isLeaf())</span>
<a name="l02823"></a>02823  
<a name="l02824"></a>02824      <span class="keywordflow">return</span> countBox;
<a name="l02825"></a>02825        
<a name="l02826"></a>02826    } <span class="comment">// end of spsContains for ivector</span>
<a name="l02827"></a>02827 
<a name="l02828"></a>02828 
<a name="l02829"></a>02829     <span class="comment">// Expand and split data</span>
<a name="l02830"></a>02830     <span class="comment">// should be called on a node with no associated data</span>
<a name="l02831"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#adf0575b58b84a0910a8d5b67b6ec0f48">02831</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">SPSnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l02832"></a>02832     {
<a name="l02833"></a>02833         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac549870ef3b7994d9e87b952a012a7e9" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(comp);    <span class="comment">// expand the node</span>
<a name="l02834"></a>02834         <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;              <span class="comment">// dummy split decision maker</span>
<a name="l02835"></a>02835         <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf3d76ca267b87c46d1fcb1ca3cecd84" title="Send the data associated with this down to children.">splitData</a>(sn);            <span class="comment">// split the data with no further splitting</span>
<a name="l02836"></a>02836 
<a name="l02837"></a>02837 
<a name="l02838"></a>02838     }
<a name="l02839"></a>02839 
<a name="l02840"></a>02840     <span class="comment">// Expand and split the data with further splitting</span>
<a name="l02841"></a>02841     <span class="comment">// should be called on a node with no associated data</span>
<a name="l02842"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a0728b0ec4deee17f6a729a97c8b5a560">02842</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">SPSnode::nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> comp)
<a name="l02843"></a>02843     {
<a name="l02844"></a>02844         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac549870ef3b7994d9e87b952a012a7e9" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(comp);    <span class="comment">// expand the node</span>
<a name="l02845"></a>02845         <span class="comment">// split the data, allowing for further splitting</span>
<a name="l02846"></a>02846 
<a name="l02847"></a>02847         <a class="code" href="classsubpavings_1_1SPSnode.shtml#adf3d76ca267b87c46d1fcb1ca3cecd84" title="Send the data associated with this down to children.">splitData</a>(boolTest);
<a name="l02848"></a>02848     }
<a name="l02849"></a>02849 
<a name="l02850"></a>02850 
<a name="l02851"></a>02851     <span class="comment">// Expand and split</span>
<a name="l02852"></a>02852     <span class="comment">// finds its own comp argument</span>
<a name="l02853"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc">02853</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">SPSnode::nodeExpand</a>()
<a name="l02854"></a>02854     {
<a name="l02855"></a>02855         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l02856"></a>02856         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l02857"></a>02857         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l02858"></a>02858 
<a name="l02859"></a>02859     }
<a name="l02860"></a>02860 
<a name="l02861"></a>02861     <span class="comment">// Expand and split with further splitting</span>
<a name="l02862"></a>02862     <span class="comment">// finds its own comp argument</span>
<a name="l02863"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a19a54cd8f89112dbed3f43c2f405921f">02863</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">SPSnode::nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest)
<a name="l02864"></a>02864     {
<a name="l02865"></a>02865         <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l02866"></a>02866         <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l02867"></a>02867         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(boolTest, maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l02868"></a>02868     }
<a name="l02869"></a>02869 
<a name="l02870"></a>02870     <span class="comment">// reabsorb both the children of this node</span>
<a name="l02871"></a>02871     <span class="comment">// the stats in this node will be correct so all we have to do is to</span>
<a name="l02872"></a>02872     <span class="comment">// associate the child data with this and delete the children</span>
<a name="l02873"></a>02873     <span class="comment">// This would work even if children are not leaves since gatherData()</span>
<a name="l02874"></a>02874     <span class="comment">// gets data from descendents of the node it operates on</span>
<a name="l02875"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2">02875</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">SPSnode::nodeReabsorbChildren</a>()
<a name="l02876"></a>02876     {
<a name="l02877"></a>02877         <span class="comment">// first recursively deal with the children of the children</span>
<a name="l02878"></a>02878         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l02879"></a>02879             <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l02880"></a>02880         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l02881"></a>02881             <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l02882"></a>02882 
<a name="l02883"></a>02883         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l02884"></a>02884             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>, <a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02885"></a>02885             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l02886"></a>02886             <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l02887"></a>02887         }
<a name="l02888"></a>02888 
<a name="l02889"></a>02889         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l02890"></a>02890             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>, <a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02891"></a>02891             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l02892"></a>02892             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l02893"></a>02893         }
<a name="l02894"></a>02894 
<a name="l02895"></a>02895         <span class="comment">// reset splitDim and splitValue to their defaults</span>
<a name="l02896"></a>02896         <a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a> = -1;
<a name="l02897"></a>02897         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a> = 0.0;
<a name="l02898"></a>02898 
<a name="l02899"></a>02899         <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l02900"></a>02900         <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l02901"></a>02901     }
<a name="l02902"></a>02902 
<a name="l02903"></a>02903     <span class="comment">// computes a minimal subpaving from two sibling subpavings</span>
<a name="l02904"></a>02904     <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l02905"></a>02905     <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l02906"></a>02906     <span class="comment">// and move the the data from the children up to the new leaf</span>
<a name="l02907"></a>02907     <span class="comment">// warning: nodeReunite would not normally be used with SPSnodes</span>
<a name="l02908"></a>02908     <span class="comment">// but is in the base class and is reimplmented to try do it</span>
<a name="l02909"></a>02909     <span class="comment">// appropriately for this derived class should it be needed.</span>
<a name="l02910"></a>02910     <span class="comment">// This function is untested.</span>
<a name="l02911"></a>02911 
<a name="l02912"></a>02912     <span class="comment">/* Raaz&#39;s comment:</span>
<a name="l02913"></a>02913 <span class="comment">    Perhaps we should do what the base class does with the additional twist</span>
<a name="l02914"></a>02914 <span class="comment">    of passing the new information, if any, from the leaves to the parent:</span>
<a name="l02915"></a>02915 <span class="comment">    The counts and sample mean won&#39;t change but the other node features</span>
<a name="l02916"></a>02916 <span class="comment">    may change.  In particular, if we further derive SPSnode for</span>
<a name="l02917"></a>02917 <span class="comment">    functional plug-in estimation, with interval range enclosures of box</span>
<a name="l02918"></a>02918 <span class="comment">    range enclosures for some given target functional (some function</span>
<a name="l02919"></a>02919 <span class="comment">    from root box to R^m), then we want to propagate the hull of the</span>
<a name="l02920"></a>02920 <span class="comment">    intersection of the children to the parent with the an operation</span>
<a name="l02921"></a>02921 <span class="comment">    similar to the base class version that combines two leaf siblings</span>
<a name="l02922"></a>02922 <span class="comment">    into this, otherwise grafts them onto this while still propogating</span>
<a name="l02923"></a>02923 <span class="comment">    any information to the parent. */</span>
<a name="l02924"></a>02924 
<a name="l02925"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a61c584952df4fa77109cb4bb9b46f657">02925</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a61c584952df4fa77109cb4bb9b46f657" title="Try to reunite nodes to form one leaf.">SPSnode::nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *rChild)
<a name="l02926"></a>02926         <span class="comment">// lChild and rChild are the two subpavings to be reunited</span>
<a name="l02927"></a>02927     {
<a name="l02928"></a>02928         <span class="comment">// redo the box, move the data up,</span>
<a name="l02929"></a>02929 
<a name="l02930"></a>02930         <span class="comment">// *this is the node which will become the parent</span>
<a name="l02931"></a>02931 
<a name="l02932"></a>02932         <span class="comment">// check that the labels match and exit if not</span>
<a name="l02933"></a>02933         <span class="keywordflow">if</span> ((lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> ) || (rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> != <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>)) {
<a name="l02934"></a>02934             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Labels do not match&quot;</span>);
<a name="l02935"></a>02935         }
<a name="l02936"></a>02936 
<a name="l02937"></a>02937         <span class="comment">// if both subpavings are leaves and hull of boxes is x,</span>
<a name="l02938"></a>02938         <span class="comment">// discard them: *this is a leaf</span>
<a name="l02939"></a>02939         <span class="keywordflow">if</span> (lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02940"></a>02940             <span class="keywordflow">if</span> (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> !=
<a name="l02941"></a>02941                 (*(lChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>) | *(rChild-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>))) {
<a name="l02942"></a>02942                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes to be reunited do not fit&quot;</span>);
<a name="l02943"></a>02943             }
<a name="l02944"></a>02944 
<a name="l02945"></a>02945             <span class="comment">// we have to collect all the data from the children,</span>
<a name="l02946"></a>02946             <span class="comment">// and fire it into this to make sure that the</span>
<a name="l02947"></a>02947             <span class="comment">// stats for this (this node) are correct</span>
<a name="l02948"></a>02948             <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l02949"></a>02949             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(tempContainer, lChild);
<a name="l02950"></a>02950             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(tempContainer, rChild);
<a name="l02951"></a>02951 
<a name="l02952"></a>02952             <span class="comment">// reserve capacity in this</span>
<a name="l02953"></a>02953             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l02954"></a>02954 
<a name="l02955"></a>02955             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l02956"></a>02956 
<a name="l02957"></a>02957             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* insertedInto = NULL;
<a name="l02958"></a>02958 
<a name="l02959"></a>02959             <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l02960"></a>02960                 it &lt; tempContainer.end(); it++) {
<a name="l02961"></a>02961                 <span class="comment">// insert with no splitting</span>
<a name="l02962"></a>02962                 <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l02963"></a>02963                 insertedInto = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn);
<a name="l02964"></a>02964                 <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l02965"></a>02965                     std::cerr &lt;&lt; <span class="stringliteral">&quot;Check &quot;</span>
<a name="l02966"></a>02966                         &lt;&lt; <span class="stringliteral">&quot;SPSnode::nodeReunite: &quot;</span>
<a name="l02967"></a>02967                         &lt;&lt; <span class="stringliteral">&quot; data &quot;</span> &lt;&lt; **it
<a name="l02968"></a>02968                         &lt;&lt; <span class="stringliteral">&quot; from nodes to be adopted &quot;</span>
<a name="l02969"></a>02969                         &lt;&lt; <span class="stringliteral">&quot;rejected by new parent&quot;</span>
<a name="l02970"></a>02970                         &lt;&lt; std::endl;
<a name="l02971"></a>02971                 }
<a name="l02972"></a>02972             }
<a name="l02973"></a>02973 
<a name="l02974"></a>02974             <span class="comment">// the stats for this should now be right</span>
<a name="l02975"></a>02975             <span class="comment">// and this will be a leaf so the data</span>
<a name="l02976"></a>02976             <span class="comment">// should stay associated with it</span>
<a name="l02977"></a>02977 
<a name="l02978"></a>02978             <span class="comment">//discard the two subpavings given</span>
<a name="l02979"></a>02979             <span class="keyword">delete</span> lChild;
<a name="l02980"></a>02980             <span class="keyword">delete</span> rChild;
<a name="l02981"></a>02981 
<a name="l02982"></a>02982         }
<a name="l02983"></a>02983 
<a name="l02984"></a>02984         <span class="keywordflow">else</span> {  <span class="comment">// at least one of the children is not a leaf</span>
<a name="l02985"></a>02985             <span class="comment">// this has to adopt them rather than reuniting them</span>
<a name="l02986"></a>02986             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4049a0078541b24d5451957f6f7dcd68" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(rChild);
<a name="l02987"></a>02987             <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae1d11e62b133e13be6c14f7ff759f152" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(lChild);
<a name="l02988"></a>02988             <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>(); <span class="comment">// recursively rename child branches</span>
<a name="l02989"></a>02989         }
<a name="l02990"></a>02990     }
<a name="l02991"></a>02991 
<a name="l02992"></a>02992 
<a name="l02993"></a>02993 
<a name="l02994"></a>02994     <span class="comment">// graft lChild onto this node</span>
<a name="l02995"></a>02995     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l02996"></a>02996     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l02997"></a>02997     <span class="comment">// used when building a statistical subpaving upwards</span>
<a name="l02998"></a>02998     <span class="comment">// All stats are assumed to be recalculated (sums and sumproduct as well</span>
<a name="l02999"></a>02999     <span class="comment">// as counts)</span>
<a name="l03000"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#ae1d11e62b133e13be6c14f7ff759f152">03000</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae1d11e62b133e13be6c14f7ff759f152" title="Builds a higher level of a tree from existing nodes.">SPSnode::nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *lChild)
<a name="l03001"></a>03001     {
<a name="l03002"></a>03002         <span class="comment">// *this is the node which will become the parent</span>
<a name="l03003"></a>03003 
<a name="l03004"></a>03004         <span class="comment">// we have to collect all the data from the child,</span>
<a name="l03005"></a>03005         <span class="comment">// and fire it into this to make sure that the stats</span>
<a name="l03006"></a>03006         <span class="comment">// for this (this node) are correct</span>
<a name="l03007"></a>03007 
<a name="l03008"></a>03008         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l03009"></a>03009         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(tempContainer, lChild);
<a name="l03010"></a>03010 
<a name="l03011"></a>03011         <span class="comment">// reserve capacity in this</span>
<a name="l03012"></a>03012         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l03013"></a>03013 
<a name="l03014"></a>03014         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l03015"></a>03015 
<a name="l03016"></a>03016         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* insertedInto = NULL;
<a name="l03017"></a>03017 
<a name="l03018"></a>03018         <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l03019"></a>03019             it &lt; tempContainer.end(); it++) {
<a name="l03020"></a>03020 
<a name="l03021"></a>03021             <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy split decision maker</span>
<a name="l03022"></a>03022             insertedInto = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn);
<a name="l03023"></a>03023             <span class="comment">// insert with no splitting</span>
<a name="l03024"></a>03024             <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l03025"></a>03025                 std::cerr &lt;&lt; <span class="stringliteral">&quot;Check SPSnode::nodeAdoptLeft: &quot;</span>
<a name="l03026"></a>03026                     &lt;&lt; <span class="stringliteral">&quot;data &quot;</span> &lt;&lt; **it &lt;&lt; <span class="stringliteral">&quot; from node &quot;</span>
<a name="l03027"></a>03027                     &lt;&lt; <span class="stringliteral">&quot;to be adopted rejected by new &quot;</span>
<a name="l03028"></a>03028                     &lt;&lt; <span class="stringliteral">&quot;parent&quot;</span> &lt;&lt; std::endl;
<a name="l03029"></a>03029             }
<a name="l03030"></a>03030         }
<a name="l03031"></a>03031 
<a name="l03032"></a>03032         <span class="comment">// the stats for this should now be right</span>
<a name="l03033"></a>03033         <span class="comment">// but the data is associated with its descendent nodes</span>
<a name="l03034"></a>03034         <span class="comment">// so we need to clear the actual data</span>
<a name="l03035"></a>03035         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear();
<a name="l03036"></a>03036 
<a name="l03037"></a>03037         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l03038"></a>03038         <span class="comment">// nodeAddLeft() checks labels, hull size , present children</span>
<a name="l03039"></a>03039         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(lChild);
<a name="l03040"></a>03040         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a785e03fc466a6a1ea851f08338f8103d" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>(); <span class="comment">// set the split dimension and split value</span>
<a name="l03041"></a>03041 
<a name="l03042"></a>03042     }
<a name="l03043"></a>03043 
<a name="l03044"></a>03044     <span class="comment">// graft rChild onto this node</span>
<a name="l03045"></a>03045     <span class="comment">// rChild could be a leaf or a non-leaf</span>
<a name="l03046"></a>03046     <span class="comment">// takes care of the data associated with lChild/its descendents</span>
<a name="l03047"></a>03047     <span class="comment">// used when building a statistical subpaving upwards</span>
<a name="l03048"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a4049a0078541b24d5451957f6f7dcd68">03048</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a4049a0078541b24d5451957f6f7dcd68" title="Builds a higher level of a tree from existing nodes.">SPSnode::nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> *rChild)
<a name="l03049"></a>03049     {
<a name="l03050"></a>03050         <span class="comment">//* this is the node which will become the parent</span>
<a name="l03051"></a>03051 
<a name="l03052"></a>03052         <span class="comment">// we have to collect all the data from the child,</span>
<a name="l03053"></a>03053         <span class="comment">// and fire it into this to make sure that the stats</span>
<a name="l03054"></a>03054         <span class="comment">// for this (this node) are correct</span>
<a name="l03055"></a>03055         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> tempContainer;
<a name="l03056"></a>03056         <a class="code" href="classsubpavings_1_1SPSnode.shtml#ac16a08aea6f8316526c46382e3252959" title="Return a reference to the node data.">gatherData</a>(tempContainer, rChild);
<a name="l03057"></a>03057 
<a name="l03058"></a>03058         <span class="comment">// reserve capacity in this</span>
<a name="l03059"></a>03059         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.reserve(tempContainer.size());
<a name="l03060"></a>03060 
<a name="l03061"></a>03061         <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> it;
<a name="l03062"></a>03062 
<a name="l03063"></a>03063         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* insertedInto = NULL;
<a name="l03064"></a>03064 
<a name="l03065"></a>03065         <span class="keywordflow">for</span> (it = tempContainer.begin();
<a name="l03066"></a>03066             it &lt; tempContainer.end(); it++) {
<a name="l03067"></a>03067 
<a name="l03068"></a>03068             <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy split decision maker</span>
<a name="l03069"></a>03069             insertedInto = <a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(*it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, sn);
<a name="l03070"></a>03070             <span class="comment">// insert with no splitting</span>
<a name="l03071"></a>03071             <span class="keywordflow">if</span> (insertedInto == NULL) {
<a name="l03072"></a>03072                 std::cerr &lt;&lt; <span class="stringliteral">&quot;Check SPSnode::nodeAdoptRight: &quot;</span>
<a name="l03073"></a>03073                     &lt;&lt; <span class="stringliteral">&quot;data &quot;</span> &lt;&lt; **it &lt;&lt; <span class="stringliteral">&quot; from node to &quot;</span>
<a name="l03074"></a>03074                     &lt;&lt; <span class="stringliteral">&quot;be adopted rejected by new parent&quot;</span>
<a name="l03075"></a>03075                     &lt;&lt; std::endl;
<a name="l03076"></a>03076             }
<a name="l03077"></a>03077         }
<a name="l03078"></a>03078 
<a name="l03079"></a>03079         <span class="comment">// the stats for this should now be right</span>
<a name="l03080"></a>03080         <span class="comment">// but the data is associated with its descendent nodes</span>
<a name="l03081"></a>03081         <span class="comment">// so we need to clear the actual data</span>
<a name="l03082"></a>03082         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.clear();
<a name="l03083"></a>03083 
<a name="l03084"></a>03084         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l03085"></a>03085         <span class="comment">// nodeAddRight() checks labels, hull size, present children</span>
<a name="l03086"></a>03086         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(rChild);
<a name="l03087"></a>03087         <a class="code" href="classsubpavings_1_1SPSnode.shtml#a785e03fc466a6a1ea851f08338f8103d" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>(); <span class="comment">// set the split dimension and split value</span>
<a name="l03088"></a>03088     }
<a name="l03089"></a>03089 
<a name="l03090"></a>03090 
<a name="l03091"></a>03091     <span class="comment">// Inserts data into this node</span>
<a name="l03092"></a>03092     <span class="comment">// we are actually inserting an iterator to the data</span>
<a name="l03093"></a>03093     <span class="comment">// childInd is an indicator for which child is being checked</span>
<a name="l03094"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18">03094</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">SPSnode::insertOneFind</a>(<a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr,
<a name="l03095"></a>03095                                     <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd,
<a name="l03096"></a>03096                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest)
<a name="l03097"></a>03097     {
<a name="l03098"></a>03098         rvector newData = *newItr;
<a name="l03099"></a>03099 
<a name="l03100"></a>03100         <span class="comment">// start at the top</span>
<a name="l03101"></a>03101 
<a name="l03102"></a>03102         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* retObj = NULL;
<a name="l03103"></a>03103 
<a name="l03104"></a>03104         <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(newData, childInd)) {
<a name="l03105"></a>03105 
<a name="l03106"></a>03106             <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8011280b8a3a0729c581a00f3bb031ff" title="Recalculate summary statistics associated with node.">recalculateStats</a>(newData);
<a name="l03107"></a>03107 
<a name="l03108"></a>03108             <span class="keywordtype">bool</span> wasLeaf = (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>());
<a name="l03109"></a>03109 
<a name="l03110"></a>03110             <span class="comment">// if it is a leaf, add the data and return this object</span>
<a name="l03111"></a>03111             <span class="keywordflow">if</span>(wasLeaf) {
<a name="l03112"></a>03112 
<a name="l03113"></a>03113                 <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>.push_back(newItr);
<a name="l03114"></a>03114 
<a name="l03115"></a>03115                 <span class="comment">// give this node as return value</span>
<a name="l03116"></a>03116                 retObj = <span class="keyword">this</span>;
<a name="l03117"></a>03117 
<a name="l03118"></a>03118                 <span class="comment">// split if we need to</span>
<a name="l03119"></a>03119                 <span class="keywordflow">if</span> (boolTest(<span class="keyword">this</span>)) {
<a name="l03120"></a>03120                     <span class="comment">// expand and split data to children</span>
<a name="l03121"></a>03121 
<a name="l03122"></a>03122                     <a class="code" href="classsubpavings_1_1SPSnode.shtml#ae432186483a5ec950dab0eb00b08a9bc" title="Expand a leaf node.">nodeExpand</a>(boolTest);
<a name="l03123"></a>03123 
<a name="l03124"></a>03124                 } <span class="comment">// end if we need to split</span>
<a name="l03125"></a>03125 
<a name="l03126"></a>03126             } <span class="comment">// end of isLeaf</span>
<a name="l03127"></a>03127 
<a name="l03128"></a>03128             <span class="comment">// if not a leaf before we had split, and contains data</span>
<a name="l03129"></a>03129             <span class="comment">// recurse on the children if any</span>
<a name="l03130"></a>03130             <span class="keywordflow">if</span> (!wasLeaf) {
<a name="l03131"></a>03131 
<a name="l03132"></a>03132                 <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>!=NULL &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()){
<a name="l03133"></a>03133 
<a name="l03134"></a>03134                     retObj =
<a name="l03135"></a>03135                     (<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(
<a name="l03136"></a>03136                         newItr, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">ON_RIGHT</a>, boolTest);
<a name="l03137"></a>03137                 }
<a name="l03138"></a>03138                 <span class="comment">// only try left if we did not find on the right</span>
<a name="l03139"></a>03139                 <span class="keywordflow">if</span>(retObj == NULL &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>!=NULL &amp;&amp;
<a name="l03140"></a>03140                                     !<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) {
<a name="l03141"></a>03141 
<a name="l03142"></a>03142                     retObj =
<a name="l03143"></a>03143                     (<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(newItr,
<a name="l03144"></a>03144                     <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">ON_LEFT</a>, boolTest);
<a name="l03145"></a>03145                 }
<a name="l03146"></a>03146             }
<a name="l03147"></a>03147 
<a name="l03148"></a>03148         } <span class="comment">// end if node contains</span>
<a name="l03149"></a>03149 
<a name="l03150"></a>03150         <span class="comment">// will return null if does not contain the data</span>
<a name="l03151"></a>03151 
<a name="l03152"></a>03152         <span class="keywordflow">return</span> retObj;
<a name="l03153"></a>03153     }
<a name="l03154"></a>03154 
<a name="l03155"></a>03155 
<a name="l03156"></a>03156     <span class="comment">// add two non-minimal pavings in a union operation,</span>
<a name="l03157"></a>03157     <span class="comment">// return a pointer to a new non-minimal paving</span>
<a name="l03158"></a>03158     <span class="comment">// but with no data attached to it - up to the manager to add data</span>
<a name="l03159"></a>03159     <span class="comment">// label will be 0</span>
<a name="l03160"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a2dfb3087cff36fdf558bf75d5ee039c9">03160</a>     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2dfb3087cff36fdf558bf75d5ee039c9">SPSnode:: unionTreeStructure</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l03161"></a>03161                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)
<a name="l03162"></a>03162     {
<a name="l03163"></a>03163         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newNode = NULL;
<a name="l03164"></a>03164 
<a name="l03165"></a>03165         <span class="keywordflow">if</span> ((lhs != NULL) &amp;&amp; (rhs != NULL) &amp;&amp; (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l03166"></a>03166         {
<a name="l03167"></a>03167             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Union unequal subpavings&quot;</span>);
<a name="l03168"></a>03168         }
<a name="l03169"></a>03169         <span class="keywordflow">else</span> {
<a name="l03170"></a>03170             <span class="keywordflow">try</span> {
<a name="l03171"></a>03171 
<a name="l03172"></a>03172                 newNode = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a6c28eccf9962c4b9010f2f04b0231d30">unionNoData</a>(lhs, rhs);
<a name="l03173"></a>03173                 newNode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l03174"></a>03174             }
<a name="l03175"></a>03175             <span class="keywordflow">catch</span> (bad_alloc&amp; a) {
<a name="l03176"></a>03176                 cerr &lt;&lt; a.what() &lt;&lt; endl;
<a name="l03177"></a>03177                 cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l03178"></a>03178                 <span class="keywordflow">throw</span>;
<a name="l03179"></a>03179             }
<a name="l03180"></a>03180             <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
<a name="l03181"></a>03181                 <span class="keywordtype">string</span> msg(e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l03182"></a>03182                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Error in union: original error &quot;</span> + msg);
<a name="l03183"></a>03183             }
<a name="l03184"></a>03184         }
<a name="l03185"></a>03185 
<a name="l03186"></a>03186         <span class="keywordflow">return</span> newNode;
<a name="l03187"></a>03187 
<a name="l03188"></a>03188     }
<a name="l03189"></a>03189     
<a name="l03190"></a>03190     <span class="comment">//src_trunk_0701</span>
<a name="l03191"></a><a class="code" href="classsubpavings_1_1SPSnode.shtml#a8ce80cd650645f34e79fbc1d4beb2326">03191</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml#a8ce80cd650645f34e79fbc1d4beb2326" title="Swap this and another node. Swaps all the data members of this with the other node.">SPSnode::swapSPS</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>&amp; spn) <span class="comment">//throw() // don&#39;t hide base class version</span>
<a name="l03192"></a>03192   { 
<a name="l03193"></a>03193     <span class="comment">/* theBox, parent, leftChild,</span>
<a name="l03194"></a>03194 <span class="comment">    rightChild and nodeName are inherited from base class */</span>
<a name="l03195"></a>03195     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">SPnode::swap</a>(spn); <span class="comment">// use the base version</span>
<a name="l03196"></a>03196     
<a name="l03197"></a>03197     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a4d836fd2b3cd074343475de6f9511c95" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>);
<a name="l03198"></a>03198     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a890b23bcab9091b420d88b99d16badc5" title="A counter for how many data points are covered by theBox.">counter</a>);
<a name="l03199"></a>03199     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1e5698e870376a507cd4a09bddc01643" title="A container representing the sum of the data points covered by theBox.">dpSums</a>);
<a name="l03200"></a>03200     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7ff8f1c83a231af97c32808e0851dc78" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpSumProducts</a>);
<a name="l03201"></a>03201     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2d45b1e3b34a39d128143a0829f051f8" title="A container for the association of data with a node.">dataItrs</a>);
<a name="l03202"></a>03202     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#afbda0af3b68cf12874faa64aa8a9b154" title="Dimension the node&#39;s box has been split along.">splitDim</a>);
<a name="l03203"></a>03203     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a60ef987525bfd22dd0a5adadc141f0b6" title="The value, on split dimension, where node&#39;s box was split.">splitValue</a>);
<a name="l03204"></a>03204     <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">std::swap</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>, spn.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a99af67614faaf93216ec0991e96ddb02" title="Determines the amount of statistical summary data in node.">countsOnly</a>);
<a name="l03205"></a>03205     
<a name="l03206"></a>03206   }
<a name="l03207"></a>03207 
<a name="l03208"></a>03208 <span class="comment">//src_trunk_0701</span>
<a name="l03209"></a>03209 <span class="comment">// Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l03210"></a>03210 <span class="keyword">template</span> &lt;&gt;
<a name="l03211"></a>03211 <span class="keywordtype">void</span> std::swap(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">subpavings::SPSnode</a> &amp; s1, 
<a name="l03212"></a>03212       <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">subpavings::SPSnode</a> &amp; s2) <span class="comment">// throw ()</span>
<a name="l03213"></a>03213 {
<a name="l03214"></a>03214   s1.<a class="code" href="classsubpavings_1_1SPSnode.shtml#a8ce80cd650645f34e79fbc1d4beb2326" title="Swap this and another node. Swaps all the data members of this with the other node.">swapSPS</a>(s2);
<a name="l03215"></a>03215 }
<a name="l03216"></a>03216 
<a name="l03217"></a>03217 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spsnode_8cpp.shtml">spsnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
