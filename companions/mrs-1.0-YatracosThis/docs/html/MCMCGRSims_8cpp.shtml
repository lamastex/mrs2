<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MCMCGRSims.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRSims_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MCMCGRSims.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin convergence diagnostics - with automatic start to sampling once burnin has happened, using an initial hurdle of the leaves diagnostic.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &quot;<a class="el" href="auto__tools_8hpp_source.shtml">auto_tools.hpp</a>&quot;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
</div>
<p><a href="MCMCGRSims_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSims_8cpp.shtml#a993cc54e976049730d2d7e277344f6ae">MYDEBUG_OUTPUT</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSims_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSims_8cpp.shtml#afc7ebaf7e6015cf2b35785092acef5bd">doMCMCGRAuto</a> (size_t n, int d, int mix, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol_leaves, cxsc::real tol_L1, int rhatFlagCounterThreshold, int startWithFullChecks=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MCMCGRSims_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin convergence diagnostics - with automatic start to sampling once burnin has happened, using an initial hurdle of the leaves diagnostic. </p>
<p>Jenny's version </p>

<p>Definition in file <a class="el" href="MCMCGRSims_8cpp_source.shtml">MCMCGRSims.cpp</a>.</p>
</div><hr/><h2>Define Documentation</h2>
<a class="anchor" id="a38cc676e6c9f06e021b17e537b7bba1d"></a><!-- doxytag: member="MCMCGRSims.cpp::MYDEBUG" ref="a38cc676e6c9f06e021b17e537b7bba1d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRSims_8cpp_source.shtml#l00050">50</a> of file <a class="el" href="MCMCGRSims_8cpp_source.shtml">MCMCGRSims.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a993cc54e976049730d2d7e277344f6ae"></a><!-- doxytag: member="MCMCGRSims.cpp::MYDEBUG_OUTPUT" ref="a993cc54e976049730d2d7e277344f6ae" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define <a class="el" href="MCMCGRSimsDbl_8cpp.shtml#a993cc54e976049730d2d7e277344f6ae">MYDEBUG_OUTPUT</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRSims_8cpp_source.shtml#l00048">48</a> of file <a class="el" href="MCMCGRSims_8cpp_source.shtml">MCMCGRSims.cpp</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="afc7ebaf7e6015cf2b35785092acef5bd"></a><!-- doxytag: member="MCMCGRSims.cpp::doMCMCGRAuto" ref="afc7ebaf7e6015cf2b35785092acef5bd" args="(size_t n, int d, int mix, int maxLoops, int samplesNeeded, int thinout, cxsc::real tol_leaves, cxsc::real tol_L1, int rhatFlagCounterThreshold, int startWithFullChecks=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#aea9f4a954dda6cf104fccfbb15d2f704">doMCMCGRAuto</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>mix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxLoops</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>samplesNeeded</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thinout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>tol_leaves</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>tol_L1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rhatFlagCounterThreshold</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>startWithFullChecks</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="MCMCGRSims.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MCMCGRSims_8cpp_source.shtml#l00073">73</a> of file <a class="el" href="MCMCGRSims_8cpp_source.shtml">MCMCGRSims.cpp</a>.</p>

<p>References <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531">subpavings::outputFileStart()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//========user-defined parameters====================//</span>
  <span class="comment">/*</span>
<span class="comment">  size_t n=atoi(argv[1]);  // number of datapoints to generate for each histogram</span>
<span class="comment">  int d = atoi(argv[2]); // dimensions</span>
<span class="comment">  int mix = atoi(argv[3]); //mix</span>
<span class="comment">  </span>
<span class="comment">  int maxloops = atoi(argv[4]); // maximum changes of state from initial state to try</span>
<span class="comment">  int samplesNeeded = atoi(argv[5]); // how many samples do we want (ie once chains have burned in)</span>
<span class="comment">  int thinout = atoi(argv[6]); // sample every thinout state, ie thinout-1 states between samples</span>
<span class="comment">  */</span>
  <span class="comment">/* note that all chains will be sampled in parallel, once burnin has happened,</span>
<span class="comment">   * eg if we want 100 samples and have 4 chains and thinout 5, then we will sample</span>
<span class="comment">   * the last state from each chain as soon as convergence has been achieved </span>
<span class="comment">   * (and thus get 4 samples), and then wait 5-1 = 4 states, and on the 5th, again </span>
<span class="comment">   * sample from all 4 chains (assuming that convergence is still okay), etc etc</span>
<span class="comment">   * so it will take 1 + (100-4)/4*5 = 1 + 25*5 = 1 + 120 = 121 states from burnin inclusive</span>
<span class="comment">   * of the burnin state itself to get the full sample */</span>
  
  <span class="comment">/*</span>
<span class="comment">  double tol_L1 = atof(argv[7]); //tolerance for automated burn in criteria</span>
<span class="comment">  */</span>
  
  <span class="keywordtype">size_t</span> n=100;  <span class="comment">// number of datapoints to generate for each histogram</span>
  <span class="comment">/* Logging level is set to TXT at the moment */</span>
  
  <span class="keywordtype">int</span> d = 2; <span class="comment">// dimensions</span>
  <span class="keywordtype">int</span> mix = 1; <span class="comment">//mix</span>
  
  <span class="keywordtype">int</span> maxLoops = 5000; <span class="comment">// maximum changes of state from initial state to try</span>
  <span class="keywordtype">int</span> samplesNeeded = 10; <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
  <span class="keywordtype">int</span> thinout = 5; <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
  
  cxsc::real tol_leaves(0.1); <span class="comment">//tolerance for automated burn in criteria for leaves</span>
  cxsc::real tol_L1(0.1); <span class="comment">//tolerance for automated burn in criteria for L1</span>

  <span class="keywordtype">int</span> rhatFlagCounterThreshold = 2;   <span class="comment">/* how many of the scalar values must have</span>
<span class="comment">                      * diagnostic within limits for sampling to start?</span>
<span class="comment">                      * usually this would probably be the number</span>
<span class="comment">                      * of scalar values being used? */</span>
  <span class="keywordtype">int</span> startWithFullChecks = 0; <span class="comment">/* indicator for whether we bypass the first hurdle</span>
<span class="comment">                (the leaves convergence) and go straight to monitoring for </span>
<span class="comment">                actual burnin*/</span>
  
  <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
  <span class="keywordflow">if</span> (thinout &lt; 1 ) {
    <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
  }
  
  <span class="keywordflow">try</span> {
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(n, d,  mix, 
        maxLoops, samplesNeeded, thinout, tol_leaves, tol_L1,
        rhatFlagCounterThreshold, startWithFullChecks);

    std::string samplesCollAverageFilename = <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
    <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
  
    avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
    
    <span class="keywordflow">return</span> 0;
  }
  <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
    cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
      &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
  }
    
  
}   
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRSims_8cpp.shtml">MCMCGRSims.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:22 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
