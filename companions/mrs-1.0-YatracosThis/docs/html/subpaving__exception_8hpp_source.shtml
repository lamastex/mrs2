<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: subpaving_exception.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('subpaving__exception_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">subpaving_exception.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="subpaving__exception_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2011 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __SUBPAVING_EXCEPTION_HPP__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __SUBPAVING_EXCEPTION_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;stdexcept&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>     
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>subpavings {
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00037"></a><a class="code" href="classsubpavings_1_1IO__Error.shtml">00037</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1IO__Error.shtml">IO_Error</a> : <span class="keyword">public</span> std::runtime_error
<a name="l00038"></a>00038   {
<a name="l00039"></a>00039      
<a name="l00040"></a>00040      <span class="keyword">public</span>:
<a name="l00041"></a>00041      <a class="code" href="classsubpavings_1_1IO__Error.shtml#a5235a4435e56d59ea8cfd39baaaf817f">IO_Error</a>(std::string ss);
<a name="l00042"></a>00042      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1IO__Error.shtml#a3ccb27166917cce4193a23a9f06659d6">~IO_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00043"></a>00043      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1IO__Error.shtml#a1848498830bdc61ae199927ff944ad63">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00044"></a>00044      
<a name="l00045"></a>00045   };
<a name="l00046"></a>00046   
<a name="l00050"></a><a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">00050</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00051"></a>00051   {
<a name="l00052"></a>00052      
<a name="l00053"></a>00053      <span class="keyword">public</span>:
<a name="l00054"></a>00054      <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml#ab2b36850bcad56817956c2d875741ac2">NullSubpavingPointer_Error</a>(std::string ss);
<a name="l00055"></a>00055      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml#a377ebbaec256da0087c36251a373f51c">~NullSubpavingPointer_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00056"></a>00056      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml#a835601a3476619553d97e3d9e1acfdd3">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00057"></a>00057      
<a name="l00058"></a>00058   };
<a name="l00059"></a>00059   
<a name="l00063"></a><a class="code" href="classsubpavings_1_1NoBox__Error.shtml">00063</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00064"></a>00064   {
<a name="l00065"></a>00065      
<a name="l00066"></a>00066      <span class="keyword">public</span>:
<a name="l00067"></a>00067      <a class="code" href="classsubpavings_1_1NoBox__Error.shtml#adf521a98f150062f8ebc21b9601affa2">NoBox_Error</a>(std::string ss);
<a name="l00068"></a>00068      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1NoBox__Error.shtml#af0ad737bacfc1a73ff01817e824284ee">~NoBox_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00069"></a>00069      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1NoBox__Error.shtml#a5dbe27e6e89d7665df1b6dcd814805a0">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00070"></a>00070      
<a name="l00071"></a>00071   };
<a name="l00072"></a>00072   
<a name="l00081"></a><a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml">00081</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml">MalconstructedBox_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00082"></a>00082   {
<a name="l00083"></a>00083      
<a name="l00084"></a>00084      <span class="keyword">public</span>:
<a name="l00085"></a>00085      <a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml#ac5a7d2f4e8053bcda5a12655dd8b4f23">MalconstructedBox_Error</a>(std::string ss);
<a name="l00086"></a>00086      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml#aeb53ed1fb7167531e2c69d6b01fd786a">~MalconstructedBox_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00087"></a>00087      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1MalconstructedBox__Error.shtml#a5860a67a6c495dbd1435d4c8c4415f19">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00088"></a>00088      
<a name="l00089"></a>00089   };
<a name="l00090"></a>00090   
<a name="l00095"></a><a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">00095</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00096"></a>00096   {
<a name="l00097"></a>00097      
<a name="l00098"></a>00098      <span class="keyword">public</span>:
<a name="l00099"></a>00099      <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml#a9eba63beb13e2cf8e0d1cfa611f4bf97">IncompatibleDimensions_Error</a>(std::string ss);
<a name="l00100"></a>00100      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml#a0d37b44a8cdcff89706998e310a46f08">~IncompatibleDimensions_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00101"></a>00101      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml#ab6f29f87f7ed89b14af0168dfaaf8851">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00102"></a>00102      
<a name="l00103"></a>00103   };
<a name="l00104"></a>00104   
<a name="l00109"></a><a class="code" href="classsubpavings_1_1IncompatibleLabel__Error.shtml">00109</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1IncompatibleLabel__Error.shtml">IncompatibleLabel_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00110"></a>00110   {
<a name="l00111"></a>00111      
<a name="l00112"></a>00112      <span class="keyword">public</span>:
<a name="l00113"></a>00113      <a class="code" href="classsubpavings_1_1IncompatibleLabel__Error.shtml#adc9b30f1ad2daeb4bbceb18bf6a3ae28">IncompatibleLabel_Error</a>(std::string ss);
<a name="l00114"></a>00114      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1IncompatibleLabel__Error.shtml#a7ce84dc3e8429986e5b717ca824543bb">~IncompatibleLabel_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00115"></a>00115      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1IncompatibleLabel__Error.shtml#a853912ee4bbff34e653343bf18c89679">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00116"></a>00116      
<a name="l00117"></a>00117   };
<a name="l00118"></a>00118   
<a name="l00119"></a>00119   
<a name="l00123"></a><a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">00123</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml">NonRootNode_Error</a> : <span class="keyword">public</span> std::logic_error
<a name="l00124"></a>00124   {
<a name="l00125"></a>00125      
<a name="l00126"></a>00126      <span class="keyword">public</span>:
<a name="l00127"></a>00127      <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml#a73cc2a8f3c2d9f20f4d4e825f968bb55">NonRootNode_Error</a>(std::string ss);
<a name="l00128"></a>00128      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml#a2564fa38ce1aeea46f5754903b3fcbbf">~NonRootNode_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00129"></a>00129      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1NonRootNode__Error.shtml#a76db530935dc8cb8cf4e06e2c858bf68">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00130"></a>00130      
<a name="l00131"></a>00131   };
<a name="l00132"></a>00132 
<a name="l00137"></a><a class="code" href="classsubpavings_1_1UnfulfillableRequest__Error.shtml">00137</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1UnfulfillableRequest__Error.shtml">UnfulfillableRequest_Error</a> : <span class="keyword">public</span> std::runtime_error
<a name="l00138"></a>00138   {
<a name="l00139"></a>00139      
<a name="l00140"></a>00140      <span class="keyword">public</span>:
<a name="l00141"></a>00141      <a class="code" href="classsubpavings_1_1UnfulfillableRequest__Error.shtml#a0fcbdae92e71b37ed6deee662530cf03">UnfulfillableRequest_Error</a>(std::string ss);
<a name="l00142"></a>00142      <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1UnfulfillableRequest__Error.shtml#a4fc892e33b3bd7ba588699eae05b2456">~UnfulfillableRequest_Error</a>() <span class="keywordflow">throw</span>();
<a name="l00143"></a>00143      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1UnfulfillableRequest__Error.shtml#af4aa30be9e58e15be1605162f595cb95">what</a>() <span class="keyword">const</span> <span class="keywordflow">throw</span>();
<a name="l00144"></a>00144      
<a name="l00145"></a>00145   };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 } <span class="comment">// end namespace subpavings</span>
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="preprocessor">#endif</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span>
<a name="l00152"></a>00152 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="subpaving__exception_8hpp.shtml">subpaving_exception.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
