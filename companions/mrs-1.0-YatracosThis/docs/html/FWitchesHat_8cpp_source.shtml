<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FWitchesHat.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FWitchesHat_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FWitchesHat.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FWitchesHat_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="comment">// example function object class to use with MRSampler class</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">using namespace </span>std;
<a name="l00037"></a>00037 <span class="keyword">using namespace </span>cxsc;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="FWitchesHat_8hpp.shtml">FWitchesHat.hpp</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">// for now domain size is [-DOMAINLIMIT, DOMAINLIMIT]^d</span>
<a name="l00044"></a>00044 <span class="comment">// implementation of FWitchesHat class</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">// constructor for &quot;witches hat&quot;: mixture of uniform and conical peak</span>
<a name="l00047"></a>00047 <span class="comment">// if LogPi is true, the log of this will be returned</span>
<a name="l00048"></a><a class="code" href="classFWitchesHat.shtml#aab1cf526334362a4902d3a724190f038">00048</a> <a class="code" href="classFWitchesHat.shtml#aab1cf526334362a4902d3a724190f038">FWitchesHat::FWitchesHat</a> (<span class="keywordtype">int</span> n_dimensions, real PMean, real PRadius, 
<a name="l00049"></a>00049                           real PWeight, real UWeight, real <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>, 
<a name="l00050"></a>00050                           <span class="keywordtype">bool</span> LogPi, <span class="keywordtype">int</span> Prior)
<a name="l00051"></a>00051 :
<a name="l00052"></a>00052 PeakMean (PMean), 
<a name="l00053"></a>00053 PeakRadius (PRadius), 
<a name="l00054"></a>00054 PeakWeight (PWeight),
<a name="l00055"></a>00055 UniformWeight (UWeight)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057   <span class="comment">//  witches hat peak is at (PeakMean, PeakMean, ... , PeakMean)</span>
<a name="l00058"></a>00058   <a class="code" href="classFWitchesHat.shtml#ae9af30cb2fef292d9eafe3ca42ce4b60">n_interval_calls</a> = 0;
<a name="l00059"></a>00059   <a class="code" href="classFWitchesHat.shtml#ab91e3167c8275b9cec6aa913d55a2ea4">n_real_calls</a> = 0;
<a name="l00060"></a>00060   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00061"></a>00061   <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[0]=0.0; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[1]=1.0; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[2]=0.95493; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[3]=0.95493; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[4]=1.01321; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[5]=1.13986;
<a name="l00062"></a>00062   <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[6]=1.35456; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[7]=1.69321; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[8]=2.21745; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[9]=3.03167; <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[10]=4.31345;
<a name="l00063"></a>00063   <span class="comment">//{0.0,1.0,0.95493,0.95493,1.01321,1.13986,1.35456,</span>
<a name="l00064"></a>00064   <span class="comment">//1.69321,2.21745,3.03167,4.31345};</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   ivector domain (1, n_dimensions);
<a name="l00067"></a>00067   <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
<a name="l00068"></a>00068   <a class="code" href="classFWitchesHat.shtml#a54f305164476a0d3f746be9bf6c48bb9">DomainVolume</a> = 1.0;
<a name="l00069"></a>00069   <a class="code" href="classFWitchesHat.shtml#aadb3c71d235e5857a08fccb5b6a1ffef">Rtod</a> = <a class="code" href="classFWitchesHat.shtml#a94abd4eea4b5e4623446a2688bd8c849">PeakRadius</a>;
<a name="l00070"></a>00070   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;
<a name="l00071"></a>00071   <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>!=0)
<a name="l00072"></a>00072   {
<a name="l00073"></a>00073     cerr &lt;&lt; <span class="stringliteral">&quot;Only uniform prior defined here... Reset to Uniform Prior\n&quot;</span>;
<a name="l00074"></a>00074     <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a>=0;
<a name="l00075"></a>00075   }
<a name="l00076"></a>00076   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n_dimensions; i++)
<a name="l00077"></a>00077   {
<a name="l00078"></a>00078     domain[i] = interval (-DomainLimit, DomainLimit);
<a name="l00079"></a>00079     <a class="code" href="classFWitchesHat.shtml#a54f305164476a0d3f746be9bf6c48bb9">DomainVolume</a> *= 2.0 * <a class="code" href="LevyFobj2D_8cpp.shtml#ae28a2599911ae746bc33211d3ea52aaf">DomainLimit</a>;
<a name="l00080"></a>00080     <a class="code" href="classFWitchesHat.shtml#aadb3c71d235e5857a08fccb5b6a1ffef">Rtod</a> *= <a class="code" href="classFWitchesHat.shtml#a94abd4eea4b5e4623446a2688bd8c849">PeakRadius</a>;
<a name="l00081"></a>00081   }
<a name="l00082"></a>00082   Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00083"></a>00083   Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = 0;
<a name="l00084"></a>00084   <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back (Ldomain);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">// vector&lt;LabBox&gt; FWitchesHat::get_domain(){ return LabDomainList; }</span>
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 interval
<a name="l00091"></a><a class="code" href="classFWitchesHat.shtml#a11734772d7dea57df5ff72ebbfd3e272">00091</a> <a class="code" href="classFWitchesHat.shtml#a11734772d7dea57df5ff72ebbfd3e272" title="a pure virtual function for interval image of boxes under Fobj">FWitchesHat::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp; X)<span class="keyword"></span>
<a name="l00092"></a>00092 <span class="keyword">const</span>
<a name="l00093"></a>00093 <span class="keyword"></span>{
<a name="l00094"></a>00094   <a class="code" href="classFWitchesHat.shtml#ae9af30cb2fef292d9eafe3ca42ce4b60">n_interval_calls</a>++;
<a name="l00095"></a>00095   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
<a name="l00096"></a>00096   <span class="keywordtype">int</span> ndim = 1 + z - a;
<a name="l00097"></a>00097   <span class="keywordflow">if</span> (ndim &gt; 10)
<a name="l00098"></a>00098   {
<a name="l00099"></a>00099     cout &lt;&lt; <span class="stringliteral">&quot;&gt; 10 dimensions. exiting. &quot;</span> &lt;&lt; endl;
<a name="l00100"></a>00100     exit (EXIT_FAILURE);
<a name="l00101"></a>00101   }
<a name="l00102"></a>00102   <span class="comment">//   real DomainVolume = (2.0*DOMAINLIMIT);</span>
<a name="l00103"></a>00103   interval r = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[a] - <a class="code" href="classFWitchesHat.shtml#aad2c11957a2edf796a2728f2b0bf838e">PeakMean</a>);
<a name="l00104"></a>00104   <span class="keywordflow">for</span> (i = a + 1; i &lt;= z; i++)
<a name="l00105"></a>00105   {
<a name="l00106"></a>00106     r += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i] - <a class="code" href="classFWitchesHat.shtml#aad2c11957a2edf796a2728f2b0bf838e">PeakMean</a>);
<a name="l00107"></a>00107     <span class="comment">//  DomainVolume *= (2.0*DOMAINLIMIT);</span>
<a name="l00108"></a>00108   }
<a name="l00109"></a>00109   r = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (r);
<a name="l00110"></a>00110   interval result = <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[ndim] * (<a class="code" href="classFWitchesHat.shtml#a94abd4eea4b5e4623446a2688bd8c849">PeakRadius</a> - r) / <a class="code" href="classFWitchesHat.shtml#aadb3c71d235e5857a08fccb5b6a1ffef">Rtod</a>;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   <span class="keywordflow">if</span> (Sup (result) &lt; 0.0)
<a name="l00113"></a>00113     Sup (result) = 0.0;
<a name="l00114"></a>00114   <span class="keywordflow">if</span> (Inf (result) &lt; 0.0)
<a name="l00115"></a>00115     Inf (result) = 0.0;
<a name="l00116"></a>00116                     <span class="comment">// mixture of uniform and wh peak</span>
<a name="l00117"></a>00117   result = <a class="code" href="classFWitchesHat.shtml#adb3a9d40df656e50327d3c40c505fdb6">UniformWeight</a> / <a class="code" href="classFWitchesHat.shtml#a54f305164476a0d3f746be9bf6c48bb9">DomainVolume</a> + <a class="code" href="classFWitchesHat.shtml#a6bc557f3f9e39384c3273551d599120c">PeakWeight</a> * result;
<a name="l00118"></a>00118   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 real
<a name="l00122"></a><a class="code" href="classFWitchesHat.shtml#a027d78c3e9e90da19370cb50d8b43b46">00122</a> <a class="code" href="classFWitchesHat.shtml#a11734772d7dea57df5ff72ebbfd3e272" title="a pure virtual function for interval image of boxes under Fobj">FWitchesHat::operator () </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp; X)<span class="keyword"></span>
<a name="l00123"></a>00123 <span class="keyword">const</span>
<a name="l00124"></a>00124 <span class="keyword"></span>{
<a name="l00125"></a>00125   <a class="code" href="classFWitchesHat.shtml#ab91e3167c8275b9cec6aa913d55a2ea4">n_real_calls</a>++;
<a name="l00126"></a>00126   <span class="keywordtype">int</span> i, a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>);
<a name="l00127"></a>00127   <span class="keywordtype">int</span> ndim = 1 + z - a;
<a name="l00128"></a>00128   <span class="keywordflow">if</span> (ndim &gt; 10)
<a name="l00129"></a>00129   {
<a name="l00130"></a>00130     cout &lt;&lt; <span class="stringliteral">&quot;&gt; 10 dimensions. exiting. &quot;</span> &lt;&lt; endl;
<a name="l00131"></a>00131     exit (EXIT_FAILURE);
<a name="l00132"></a>00132   }
<a name="l00133"></a>00133   <span class="comment">//  real DomainVolume = (2.0*DOMAINLIMIT);</span>
<a name="l00134"></a>00134   real r = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[a] - <a class="code" href="classFWitchesHat.shtml#aad2c11957a2edf796a2728f2b0bf838e">PeakMean</a>);
<a name="l00135"></a>00135   <span class="keywordflow">for</span> (i = a + 1; i &lt;= z; i++)
<a name="l00136"></a>00136   {
<a name="l00137"></a>00137     r += <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (X.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i] - <a class="code" href="classFWitchesHat.shtml#aad2c11957a2edf796a2728f2b0bf838e">PeakMean</a>);
<a name="l00138"></a>00138     <span class="comment">//  DomainVolume *= (2.0*DOMAINLIMIT);</span>
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140   r = <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (r);
<a name="l00141"></a>00141   real result = <a class="code" href="classFWitchesHat.shtml#a08793da5b6fee108f85a70f9eaf67e65">h</a>[ndim] * (<a class="code" href="classFWitchesHat.shtml#a94abd4eea4b5e4623446a2688bd8c849">PeakRadius</a> - r) / <a class="code" href="classFWitchesHat.shtml#aadb3c71d235e5857a08fccb5b6a1ffef">Rtod</a>;
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="keywordflow">if</span> (result &lt; 0.0)
<a name="l00144"></a>00144     result = 0.0;
<a name="l00145"></a>00145   <span class="comment">// if(result &gt; 0.0) </span>
<a name="l00146"></a>00146   <span class="comment">//   cout &lt;&lt; &quot;Pnt: &quot; &lt;&lt; X.Pnt &lt;&lt; &quot;  r: &quot;  &lt;&lt; r &lt;&lt; &quot;  peakhgt: &quot; &lt;&lt; result </span>
<a name="l00147"></a>00147   <span class="comment">//        &lt;&lt; &quot;  Rtod: &quot; &lt;&lt; Rtod &lt;&lt; endl;</span>
<a name="l00148"></a>00148   
<a name="l00149"></a>00149   <span class="comment">// mixture of uniform and wh peak</span>
<a name="l00150"></a>00150   result = <a class="code" href="classFWitchesHat.shtml#adb3a9d40df656e50327d3c40c505fdb6">UniformWeight</a> / <a class="code" href="classFWitchesHat.shtml#a54f305164476a0d3f746be9bf6c48bb9">DomainVolume</a> + <a class="code" href="classFWitchesHat.shtml#a6bc557f3f9e39384c3273551d599120c">PeakWeight</a> * result;
<a name="l00151"></a>00151   <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>) ? <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a> (result) : result;
<a name="l00152"></a>00152 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FWitchesHat_8cpp.shtml">FWitchesHat.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
