<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: collatorspvnode.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('collatorspvnode_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">collatorspvnode.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="collatorspvnode_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009, 2010, 2011 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009, 2010, 2011 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">/*!/ \file:     CollatorSPVnode.cpp</span>
<a name="l00024"></a>00024 <span class="comment">\brief CollatorSPVnode definitions</span>
<a name="l00025"></a>00025 <span class="comment">*/</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="collatorspvnode_8hpp.shtml">collatorspvnode.hpp</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// to use std input/output</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">// to use exceptions</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// to use vectors</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">//to use algorithms</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="spsvnode_8hpp.shtml">spsvnode.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="keyword">using namespace </span>std;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">namespace </span>subpavings {
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="comment">//============================private member functions===================//</span>
<a name="l00053"></a>00053     <span class="comment">// private initialised constructor, initialised with a pointer to an SPSnode</span>
<a name="l00054"></a>00054     <span class="comment">// and a normalising constant, eg sum of counts in each node for a histogram</span>
<a name="l00055"></a>00055     <span class="comment">// the summary becomes count /(normalising constant * vol) for the SPSnode</span>
<a name="l00056"></a>00056    <span class="comment">// Vemp becomes count/total number of validation data points</span>
<a name="l00057"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a9f0d632933ae94b99777c01fa8d1677e">00057</a>     CollatorSPVnode::CollatorSPVnode(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn, 
<a name="l00058"></a>00058                                    <span class="keywordtype">size_t</span> bigN, <span class="keywordtype">size_t</span> bigM, <span class="keywordtype">int</span> whatSum)
<a name="l00059"></a>00059     {
<a name="l00060"></a>00060         <span class="keywordflow">try</span> {
<a name="l00061"></a>00061          <span class="comment">//cout &lt;&lt; &quot;private initialised constructor with validation summ&quot; &lt;&lt; endl;</span>
<a name="l00062"></a>00062             theBox = <span class="keyword">new</span> ivector(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00063"></a>00063             dimension = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>();
<a name="l00064"></a>00064             label = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l00065"></a>00065             nodeName = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00066"></a>00066        <span class="comment">//     cout &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068             <span class="keywordflow">if</span> (whatSum==1){
<a name="l00069"></a>00069             <span class="comment">// add the summary to the vector summary</span>
<a name="l00070"></a>00070         <span class="comment">// cout &lt;&lt; &quot;counter from private constructor: &quot; &lt;&lt; (spn-&gt;getCounter()) &lt;&lt; &quot;\t&quot;;</span>
<a name="l00071"></a>00071         <span class="comment">// cout &lt;&lt; &quot;bigN: &quot;&lt;&lt; bigN &lt;&lt; &quot;\t&quot;;</span>
<a name="l00072"></a>00072         <span class="comment">// cout &lt;&lt; &quot;spn-&gt;nodeVolume(): &quot; &lt;&lt; spn-&gt;nodeVolume() &lt;&lt; endl;</span>
<a name="l00073"></a>00073         <span class="comment">// cout &lt;&lt; &quot;height &quot; &lt;&lt; spn-&gt;getCounter()/(1.0*bigN*spn-&gt;nodeVolume()) &lt;&lt; endl;</span>
<a name="l00074"></a>00074            summary.push_back(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/(1.0*bigN*spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));
<a name="l00075"></a>00075             <span class="comment">// for validation data, add the summary to the vector summary</span>
<a name="l00076"></a>00076         <span class="comment">// cout &lt;&lt; &quot;Vemp from private constructor: &quot; &lt;&lt; </span>
<a name="l00077"></a>00077           <span class="comment">//         (spn-&gt;getVcounter())/(1.0 * bigM)&lt;&lt; endl;</span>
<a name="l00078"></a>00078         Vemp = ((spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>())/(1.0 * bigM));        
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081         
<a name="l00082"></a>00082         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (whatSum==2) {
<a name="l00083"></a>00083           summary.push_back(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00084"></a>00084           Vemp = 0;
<a name="l00085"></a>00085         }        
<a name="l00086"></a>00086 
<a name="l00087"></a>00087             <span class="comment">//recursion on the children</span>
<a name="l00088"></a>00088             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00089"></a>00089                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a9f0d632933ae94b99777c01fa8d1677e">CollatorSPVnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(), bigN, 
<a name="l00090"></a>00090                             bigM, whatSum));
<a name="l00091"></a>00091             }
<a name="l00092"></a>00092             <span class="keywordflow">else</span> leftChild=NULL;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00095"></a>00095                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(), bigN, 
<a name="l00096"></a>00096                              bigM, whatSum));
<a name="l00097"></a>00097             }
<a name="l00098"></a>00098             <span class="keywordflow">else</span> rightChild=NULL;
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00101"></a>00101             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00102"></a>00102             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00103"></a>00103             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00104"></a>00104             <span class="keywordflow">throw</span>;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106      }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="comment">// Print the average of the summary of a single leaf node, using tab delimiters</span>
<a name="l00109"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aac50041302262e7503e68cbd9103aa0b">00109</a>     std::ostream&amp; CollatorSPVnode::leafAverageOutputTabs(
<a name="l00110"></a>00110                                         std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00111"></a>00111 <span class="keyword">    </span>{
<a name="l00112"></a>00112         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00113"></a>00113 
<a name="l00114"></a>00114             ivector thisBox = *theBox; <span class="comment">// copy theBox</span>
<a name="l00115"></a>00115 
<a name="l00116"></a>00116             <span class="keywordtype">double</span> summ = 0;
<a name="l00117"></a>00117             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00118"></a>00118             <span class="comment">// should change this to use for_each</span>
<a name="l00119"></a>00119             <span class="keywordflow">for</span> (it = summary.begin(); it&lt; summary.end(); it++) {
<a name="l00120"></a>00120                 summ+=(*it);
<a name="l00121"></a>00121             }
<a name="l00122"></a>00122             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00123"></a>00123             <span class="keywordtype">double</span> av =  summ/(1.0*summary.size());
<a name="l00124"></a>00124 
<a name="l00125"></a>00125             <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00126"></a>00126             os &lt;&lt; nodeName;
<a name="l00127"></a>00127             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00128"></a>00128         
<a name="l00129"></a>00129         <span class="comment">// followed by the empirical measure</span>
<a name="l00130"></a>00130         os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; getVemp();
<a name="l00131"></a>00131             
<a name="l00132"></a>00132         <span class="comment">// followed by the average</span>
<a name="l00133"></a>00133             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; av;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00136"></a>00136             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00137"></a>00137             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00138"></a>00138 
<a name="l00139"></a>00139                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00140"></a>00140                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00141"></a>00141             }
<a name="l00142"></a>00142         }
<a name="l00143"></a>00143     }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00146"></a>00146     <span class="comment">// the sum of the summary is printed out</span>
<a name="l00147"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a158da654dc12bf34a61950df57d2d742">00147</a>     std::ostream&amp; CollatorSPVnode::leafAccumulationOutputTabs(
<a name="l00148"></a>00148                     std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00149"></a>00149 <span class="keyword">    </span>{
<a name="l00150"></a>00150         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00151"></a>00151 
<a name="l00152"></a>00152             ivector thisBox = *theBox; <span class="comment">// copy theBox</span>
<a name="l00153"></a>00153 
<a name="l00154"></a>00154             <span class="keywordtype">double</span> summ = 0;
<a name="l00155"></a>00155             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00156"></a>00156             <span class="comment">// should change this to use for_each</span>
<a name="l00157"></a>00157             <span class="keywordflow">for</span> (it = summary.begin(); it&lt; summary.end(); it++) {
<a name="l00158"></a>00158                 summ+=(*it);
<a name="l00159"></a>00159             }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161             <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00162"></a>00162             os &lt;&lt; nodeName;
<a name="l00163"></a>00163             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00164"></a>00164             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00165"></a>00165         <span class="comment">// followed by the empirical measure</span>
<a name="l00166"></a>00166       <span class="comment">//  os &lt;&lt; &quot;\t&quot; &lt;&lt; getVemp();</span>
<a name="l00167"></a>00167             <span class="comment">// followed by the sum of the summary</span>
<a name="l00168"></a>00168             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nodeAccumulation();
<a name="l00169"></a>00169 
<a name="l00170"></a>00170             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00171"></a>00171             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00172"></a>00172             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00173"></a>00173 
<a name="l00174"></a>00174                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00175"></a>00175                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00176"></a>00176             }
<a name="l00177"></a>00177         }
<a name="l00178"></a>00178     }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180  <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00181"></a>00181     <span class="comment">// the sum of the summary is printed out</span>
<a name="l00182"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a20f7af5ed80d8860009cfd39f1dafc03">00182</a>     std::ostream&amp; CollatorSPVnode::leafDifferenceOutputTabs(
<a name="l00183"></a>00183                     std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00184"></a>00184 <span class="keyword">    </span>{
<a name="l00185"></a>00185         <span class="keywordflow">if</span>(theBox != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00186"></a>00186 
<a name="l00187"></a>00187             ivector thisBox = *theBox; <span class="comment">// copy theBox</span>
<a name="l00188"></a>00188 
<a name="l00189"></a>00189             <span class="keywordtype">double</span> diff = summary[1] + summary[2];
<a name="l00190"></a>00190            
<a name="l00191"></a>00191          <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00192"></a>00192             os &lt;&lt; nodeName;
<a name="l00193"></a>00193             <span class="keywordtype">double</span> vol = nodeVolume();
<a name="l00194"></a>00194             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00195"></a>00195         <span class="comment">// followed by the empirical measure</span>
<a name="l00196"></a>00196       <span class="comment">//  os &lt;&lt; &quot;\t&quot; &lt;&lt; getVemp();</span>
<a name="l00197"></a>00197             <span class="comment">// followed by the sum of the summary</span>
<a name="l00198"></a>00198             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; diff;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200             <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00201"></a>00201             <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00202"></a>00202             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00203"></a>00203 
<a name="l00204"></a>00204                 os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00205"></a>00205                     &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00206"></a>00206             }
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208     }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     <span class="comment">// find the accumulated summary for a node</span>
<a name="l00212"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a5fb3b27a05bb36fc409ed1ffe17cab9f">00212</a>     <span class="keywordtype">double</span> CollatorSPVnode::nodeAccumulation()<span class="keyword"> const</span>
<a name="l00213"></a>00213 <span class="keyword">    </span>{
<a name="l00214"></a>00214             <span class="keywordtype">double</span> summ = 0;
<a name="l00215"></a>00215             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00216"></a>00216             <span class="comment">// should change this to use for_each</span>
<a name="l00217"></a>00217             <span class="keywordflow">for</span> (it = summary.begin(); it&lt; summary.end(); it++) {
<a name="l00218"></a>00218                 summ+=(*it);
<a name="l00219"></a>00219             }
<a name="l00220"></a>00220             <span class="keywordflow">return</span> summ;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     <span class="comment">// find the difference in summary for a node</span>
<a name="l00224"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8493e447407309758e72abcd2a6faf6a">00224</a>     <span class="keywordtype">double</span> CollatorSPVnode::nodeDifference()<span class="keyword"> const</span>
<a name="l00225"></a>00225 <span class="keyword">    </span>{
<a name="l00226"></a>00226             <span class="keywordtype">double</span> diff = summary[1] + summary[2]; 
<a name="l00227"></a>00227             <span class="keywordflow">return</span> diff;
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230   
<a name="l00231"></a>00231     <span class="comment">// find the absolute accumulated summary for a node</span>
<a name="l00232"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#acf8c07b59699383cc9983aefb8c8945d">00232</a>     <span class="keywordtype">double</span> CollatorSPVnode::nodeAbsAccumulation()<span class="keyword"> const</span>
<a name="l00233"></a>00233 <span class="keyword">    </span>{
<a name="l00234"></a>00234             <span class="keywordtype">double</span> absSumm = 0;
<a name="l00235"></a>00235             <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00236"></a>00236             <span class="comment">// should change this to use for_each</span>
<a name="l00237"></a>00237             <span class="comment">// add together the absolute values of each summary</span>
<a name="l00238"></a>00238             <span class="keywordflow">for</span> (it = summary.begin(); it&lt; summary.end(); it++) {
<a name="l00239"></a>00239                 *it &lt; 0.0 ? absSumm-=(*it) : absSumm+=(*it);
<a name="l00240"></a>00240             }
<a name="l00241"></a>00241             <span class="keywordflow">return</span> absSumm;
<a name="l00242"></a>00242     }
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="comment">// find the accumulated summary multiplied by volume for a node</span>
<a name="l00245"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c350ae6fe0fc1719ec294f5828c64a6">00245</a>     <span class="keywordtype">double</span> CollatorSPVnode::nodeAccumulationMultVol()<span class="keyword"> const</span>
<a name="l00246"></a>00246 <span class="keyword">    </span>{
<a name="l00247"></a>00247             <span class="keywordflow">return</span> (nodeAccumulation() * nodeVolume());
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="comment">// find the absolute accumulated summary multiplied by volume for a node</span>
<a name="l00251"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac89894e566fc5b4f86b2b9d749db10a1">00251</a>     <span class="keywordtype">double</span> CollatorSPVnode::nodeAbsAccumulationMultVol()<span class="keyword"> const</span>
<a name="l00252"></a>00252 <span class="keyword">    </span>{
<a name="l00253"></a>00253             <span class="keywordflow">return</span> (nodeAbsAccumulation() * nodeVolume());
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256     <span class="comment">// ------------------------ public member functions ----------------</span>
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">//default constructor,</span>
<a name="l00259"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c">00259</a>      CollatorSPVnode::CollatorSPVnode() {}
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     <span class="comment">// initialised constructor, initialised with a pointer to an SPSnode</span>
<a name="l00262"></a>00262     <span class="comment">// the summary becomes the k/(N*vol) for the SPSnode</span>
<a name="l00263"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a238d7e9e52b2014b97d10903f54df691">00263</a>     CollatorSPVnode::CollatorSPVnode(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">int</span> whatSum)
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265         <span class="keywordflow">try</span> {
<a name="l00266"></a>00266          <span class="comment">//   cout &lt;&lt; &quot;default constructor for validation data&quot; &lt;&lt; endl;</span>
<a name="l00267"></a>00267             theBox = <span class="keyword">new</span> ivector(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00268"></a>00268             dimension = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>();
<a name="l00269"></a>00269             label = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l00270"></a>00270             nodeName = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00271"></a>00271             <span class="keywordtype">size_t</span> rootCounter = spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l00272"></a>00272         <span class="keywordtype">size_t</span> rootVCounter = spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1" title="The count in the node&#39;s ultimate ancestor root.">getRootVcounter</a>(); <span class="comment">//get the total number</span>
<a name="l00273"></a>00273                                                       <span class="comment">// of validation data</span>
<a name="l00274"></a>00274         
<a name="l00275"></a>00275         <span class="keywordflow">if</span> (whatSum==1) {
<a name="l00276"></a>00276           <span class="comment">// get the empirical measure of the validation data in this node </span>
<a name="l00277"></a>00277           Vemp = (spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>()/(1.0*rootVCounter)); 
<a name="l00278"></a>00278           <span class="comment">// add the normalised count/volume to the vector summary          </span>
<a name="l00279"></a>00279           summary.push_back(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>()/
<a name="l00280"></a>00280                                 (1.0*rootCounter * spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>()));       
<a name="l00281"></a>00281         }
<a name="l00282"></a>00282         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (whatSum==2) {
<a name="l00283"></a>00283           summary.push_back(spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00284"></a>00284           Vemp = 0;
<a name="l00285"></a>00285         }
<a name="l00286"></a>00286         
<a name="l00287"></a>00287             <span class="comment">//recursion on the children using constructor which normalises </span>
<a name="l00288"></a>00288         <span class="comment">// counts</span>
<a name="l00289"></a>00289             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00290"></a>00290                 nodeAddLeft(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l00291"></a>00291                                                rootCounter, rootVCounter, 
<a name="l00292"></a>00292                                                whatSum));
<a name="l00293"></a>00293             }
<a name="l00294"></a>00294             <span class="keywordflow">else</span> leftChild=NULL;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296             <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00297"></a>00297                 nodeAddRight(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l00298"></a>00298                                                 rootCounter, rootVCounter,
<a name="l00299"></a>00299                                                 whatSum));
<a name="l00300"></a>00300             }
<a name="l00301"></a>00301             <span class="keywordflow">else</span> rightChild=NULL;
<a name="l00302"></a>00302         }
<a name="l00303"></a>00303         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00304"></a>00304             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00305"></a>00305             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00306"></a>00306             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00307"></a>00307             <span class="keywordflow">throw</span>;
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309 
<a name="l00310"></a>00310     }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312      <span class="comment">// initialised constructor</span>
<a name="l00313"></a>00313      <span class="comment">// initialised with a box, a label, and a vector summary</span>
<a name="l00314"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afefc26f6a3e9ba25ccf69d47dbdf99d7">00314</a>      CollatorSPVnode::CollatorSPVnode(ivector&amp; v, <span class="keywordtype">int</span> lab, <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> summ, 
<a name="l00315"></a>00315                           <span class="keywordtype">double</span> Vempp) : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(v, lab)
<a name="l00316"></a>00316      {
<a name="l00317"></a>00317          <span class="keywordflow">try</span> {
<a name="l00318"></a>00318            <span class="comment">//   cout &lt;&lt; &quot;initialized constructor with box, label, summary, vsumm&quot; &lt;&lt; endl;</span>
<a name="l00319"></a>00319              <span class="comment">// copy the vector summary</span>
<a name="l00320"></a>00320              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a> = summ;
<a name="l00321"></a>00321          <span class="comment">// copy the empirical measure</span>
<a name="l00322"></a>00322              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = Vempp;
<a name="l00323"></a>00323          }
<a name="l00324"></a>00324          <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00325"></a>00325              std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00326"></a>00326              <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00327"></a>00327              std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00328"></a>00328              <span class="keywordflow">throw</span>;
<a name="l00329"></a>00329          }
<a name="l00330"></a>00330      }
<a name="l00331"></a>00331     
<a name="l00332"></a>00332      <span class="comment">//Copy constructor for hold out estimation</span>
<a name="l00333"></a>00333      <span class="comment">// copies from given node downwards</span>
<a name="l00334"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaf38d226e1bacab0a109a3525f73cc0">00334</a>      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode::CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; other)
<a name="l00335"></a>00335          : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(*(other.theBox), other.label)
<a name="l00336"></a>00336      {
<a name="l00337"></a>00337         <span class="keywordflow">try</span> {
<a name="l00338"></a>00338              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a> = other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00339"></a>00339              <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00340"></a>00340              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l00341"></a>00341  
<a name="l00342"></a>00342             <span class="comment">//recursion on the children</span>
<a name="l00343"></a>00343              <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00344"></a>00344                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00345"></a>00345                      *(other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00346"></a>00346            }
<a name="l00347"></a>00347              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00348"></a>00348 
<a name="l00349"></a>00349            <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00350"></a>00350                  <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00351"></a>00351                      *(other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00352"></a>00352             }
<a name="l00353"></a>00353              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00354"></a>00354          }
<a name="l00355"></a>00355          <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00356"></a>00356              std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00357"></a>00357              <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00358"></a>00358              std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00359"></a>00359              <span class="keywordflow">throw</span>;
<a name="l00360"></a>00360         }
<a name="l00361"></a>00361  
<a name="l00362"></a>00362      }
<a name="l00363"></a>00363     
<a name="l00364"></a>00364      <span class="comment">//Copy constructor for subtracted nodes</span>
<a name="l00365"></a>00365      <span class="comment">// copies from given node downwards</span>
<a name="l00366"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab7123fe7fb187c082d968a8d3be9944d">00366</a>      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode::CollatorSPVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; other, <span class="keywordtype">int</span> toSubtract)
<a name="l00367"></a>00367          : <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(*(other.theBox), other.label)
<a name="l00368"></a>00368      {
<a name="l00369"></a>00369         <span class="keywordflow">try</span> {
<a name="l00370"></a>00370          
<a name="l00371"></a>00371          <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.push_back(other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a5fb3b27a05bb36fc409ed1ffe17cab9f">nodeAccumulation</a>()); 
<a name="l00372"></a>00372          <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00373"></a>00373          <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l00374"></a>00374  
<a name="l00375"></a>00375             <span class="comment">//recursion on the children</span>
<a name="l00376"></a>00376              <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00377"></a>00377                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00378"></a>00378                      *(other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()), toSubtract));
<a name="l00379"></a>00379            }
<a name="l00380"></a>00380              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00381"></a>00381 
<a name="l00382"></a>00382            <span class="keywordflow">if</span> (other.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00383"></a>00383                  <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00384"></a>00384                      *(other.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()), toSubtract));
<a name="l00385"></a>00385             }
<a name="l00386"></a>00386              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00387"></a>00387          }
<a name="l00388"></a>00388          <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00389"></a>00389              std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00390"></a>00390              <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00391"></a>00391              std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00392"></a>00392              <span class="keywordflow">throw</span>;
<a name="l00393"></a>00393         }
<a name="l00394"></a>00394  
<a name="l00395"></a>00395      }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397      <span class="comment">//Copy assignment operator</span>
<a name="l00398"></a>00398      <span class="comment">// copies from given node downwards</span>
<a name="l00399"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a36bedf0d99a2a3e1a0188c24b68c2e18">00399</a>      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a36bedf0d99a2a3e1a0188c24b68c2e18" title="Copy assignment operator.">CollatorSPVnode::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; rhs)
<a name="l00400"></a>00400      {
<a name="l00401"></a>00401          <span class="keywordflow">try</span> {
<a name="l00402"></a>00402  
<a name="l00403"></a>00403             <span class="comment">// delete the current children (deletes their children as well)</span>
<a name="l00404"></a>00404              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> != NULL) {
<a name="l00405"></a>00405                  <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>();
<a name="l00406"></a>00406                  <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00407"></a>00407              }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> != NULL) {
<a name="l00410"></a>00410                  <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>();
<a name="l00411"></a>00411                  <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00412"></a>00412              }
<a name="l00413"></a>00413             <span class="comment">// and delete the current box</span>
<a name="l00414"></a>00414              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) {
<a name="l00415"></a>00415                <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00416"></a>00416                  <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = NULL;
<a name="l00417"></a>00417             }
<a name="l00418"></a>00418 
<a name="l00419"></a>00419             <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>=NULL;
<a name="l00420"></a>00420  
<a name="l00421"></a>00421             <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>=<span class="keyword">new</span> ivector(*rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>);
<a name="l00422"></a>00422              <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00423"></a>00423              <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00424"></a>00424              <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> = rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00425"></a>00425  
<a name="l00426"></a>00426              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a> = rhs.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00427"></a>00427  
<a name="l00428"></a>00428              <span class="comment">//recursion on the children</span>
<a name="l00429"></a>00429              <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l00430"></a>00430                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00431"></a>00431                      *(rhs.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l00432"></a>00432              }
<a name="l00433"></a>00433              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l00434"></a>00434  
<a name="l00435"></a>00435             <span class="keywordflow">if</span> (rhs.<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l00436"></a>00436                  <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(
<a name="l00437"></a>00437                      *(rhs.<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l00438"></a>00438              }
<a name="l00439"></a>00439              <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l00440"></a>00440          }
<a name="l00441"></a>00441          <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00442"></a>00442             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00443"></a>00443              <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00444"></a>00444              std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00445"></a>00445             <span class="keywordflow">throw</span>;
<a name="l00446"></a>00446          }
<a name="l00447"></a>00447  
<a name="l00448"></a>00448          <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00449"></a>00449 
<a name="l00450"></a>00450      }
<a name="l00451"></a>00451 
<a name="l00452"></a>00452      <span class="comment">// make a CollatorSPVnode which represents an average of the summary</span>
<a name="l00453"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0d2a5d445ac27dd3bf81a6f55c4087f">00453</a>      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0d2a5d445ac27dd3bf81a6f55c4087f">CollatorSPVnode::makeAverageCollation</a>()<span class="keyword"> const</span>
<a name="l00454"></a>00454 <span class="keyword">     </span>{
<a name="l00455"></a>00455          <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* newnode = NULL;
<a name="l00456"></a>00456 
<a name="l00457"></a>00457          <span class="keywordflow">try</span> {
<a name="l00458"></a>00458              <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> newsumm;
<a name="l00459"></a>00459              <span class="keywordtype">double</span> summ = 0;
<a name="l00460"></a>00460              <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00461"></a>00461             <span class="comment">// should change this to use for_each</span>
<a name="l00462"></a>00462              <span class="keywordflow">for</span> (it = (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.begin()); it &lt; (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.end()); it++) {
<a name="l00463"></a>00463                  summ+=(*it);
<a name="l00464"></a>00464              }
<a name="l00465"></a>00465              newsumm.push_back(
<a name="l00466"></a>00466                  summ/(1.0*(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>).size()));
<a name="l00467"></a>00467 
<a name="l00468"></a>00468              ivector v = <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00469"></a>00469  
<a name="l00470"></a>00470              <span class="comment">// make the new node</span>
<a name="l00471"></a>00471              newnode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(v, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, newsumm, <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">getVemp</a>());
<a name="l00472"></a>00472              newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>); <span class="comment">// set name to this node name</span>
<a name="l00473"></a>00473  
<a name="l00474"></a>00474              <span class="comment">//recursion on the children</span>
<a name="l00475"></a>00475              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00476"></a>00476                  newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0d2a5d445ac27dd3bf81a6f55c4087f">makeAverageCollation</a>());
<a name="l00477"></a>00477             }
<a name="l00478"></a>00478  
<a name="l00479"></a>00479              <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00480"></a>00480                  newnode-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0d2a5d445ac27dd3bf81a6f55c4087f">makeAverageCollation</a>());
<a name="l00481"></a>00481              }
<a name="l00482"></a>00482         }
<a name="l00483"></a>00483  
<a name="l00484"></a>00484          <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l00485"></a>00485              std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory&quot;</span> &lt;&lt; endl;
<a name="l00486"></a>00486              <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l00487"></a>00487             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00488"></a>00488              <span class="keywordflow">throw</span>;
<a name="l00489"></a>00489          }
<a name="l00490"></a>00490  
<a name="l00491"></a>00491        <span class="keywordflow">return</span> newnode;
<a name="l00492"></a>00492 
<a name="l00493"></a>00493     }
<a name="l00494"></a>00494 
<a name="l00495"></a>00495  
<a name="l00496"></a>00496     <span class="comment">// Accessor for the parent of a node.</span>
<a name="l00497"></a>00497     <span class="comment">//Returns a copy of the pointer to parent node.</span>
<a name="l00498"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a635b2b0884e6d8fc328e058bd3fadbcc">00498</a>      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a635b2b0884e6d8fc328e058bd3fadbcc" title="Accessor for the parent of a node.">CollatorSPVnode::getParent</a>()<span class="keyword"> const</span>
<a name="l00499"></a>00499 <span class="keyword">     </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>; }
<a name="l00500"></a>00500  
<a name="l00501"></a>00501      <span class="comment">// Accessor for the left child of a node.</span>
<a name="l00502"></a>00502      <span class="comment">// Returns a copy of the pointer to leftChild node, cast to this type</span>
<a name="l00503"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce">00503</a>     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">CollatorSPVnode::getLeftChild</a>()<span class="keyword"> const</span>
<a name="l00504"></a>00504 <span class="keyword">     </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>; }
<a name="l00505"></a>00505  
<a name="l00506"></a>00506      <span class="comment">// Accessor for the right child of a node.</span>
<a name="l00507"></a>00507      <span class="comment">// Returns a copy of the pointer to rightChild node, cast this type</span>
<a name="l00508"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b">00508</a>     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">CollatorSPVnode::getRightChild</a>()<span class="keyword"> const</span>
<a name="l00509"></a>00509 <span class="keyword">     </span>{ <span class="keywordflow">return</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*) <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>; }
<a name="l00510"></a>00510  
<a name="l00511"></a>00511      <span class="comment">// Accessor for the summary.</span>
<a name="l00512"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad7fa37be86eb1d964b384a090dc3552f">00512</a>      <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad7fa37be86eb1d964b384a090dc3552f" title="Accessor for the summary.">CollatorSPVnode::getSummary</a>()<span class="keyword"> const</span>
<a name="l00513"></a>00513 <span class="keyword">     </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>; }
<a name="l00514"></a>00514  
<a name="l00515"></a>00515      <span class="comment">// Accessor for the validation summary.</span>
<a name="l00516"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e">00516</a>      <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">CollatorSPVnode::getVemp</a>()<span class="keyword"> const</span>
<a name="l00517"></a>00517 <span class="keyword">     </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>; }
<a name="l00518"></a>00518      
<a name="l00519"></a>00519      <span class="comment">// Get number of subpavings summarised.</span>
<a name="l00520"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a72f2564ee548571ef026a8548ca0b0ba">00520</a>      <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a72f2564ee548571ef026a8548ca0b0ba" title="Get number of subpavings summarised.">CollatorSPVnode::getNumberSummarised</a>()<span class="keyword"> const</span>
<a name="l00521"></a>00521 <span class="keyword">     </span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.size(); }
<a name="l00522"></a>00522 
<a name="l00523"></a>00523      <span class="comment">// find the sum over leaf nodes of the absolute accumulated summary           </span>
<a name="l00524"></a>00524     <span class="comment">// multiplied by volume for each leaf node</span>
<a name="l00525"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae996eeb1103aa689f6f64d3db742ce2f">00525</a>      <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae996eeb1103aa689f6f64d3db742ce2f" title="sum over leaf nodes of absolute accumulated summary x volume.">CollatorSPVnode::leavesAbsAccumulationMultVol</a>()<span class="keyword"> const</span>
<a name="l00526"></a>00526 <span class="keyword">     </span>{
<a name="l00527"></a>00527          <span class="keywordtype">double</span> retValue = 0;
<a name="l00528"></a>00528  
<a name="l00529"></a>00529          <span class="comment">// uses  member function leafSummaryMultVolOutputTabs for node output</span>
<a name="l00530"></a>00530          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00531"></a>00531              retValue = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac89894e566fc5b4f86b2b9d749db10a1">nodeAbsAccumulationMultVol</a>();
<a name="l00532"></a>00532          }
<a name="l00533"></a>00533          <span class="comment">//recurse on the children</span>
<a name="l00534"></a>00534          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00535"></a>00535              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae996eeb1103aa689f6f64d3db742ce2f" title="sum over leaf nodes of absolute accumulated summary x volume.">leavesAbsAccumulationMultVol</a>();
<a name="l00536"></a>00536          }
<a name="l00537"></a>00537  
<a name="l00538"></a>00538          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00539"></a>00539              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae996eeb1103aa689f6f64d3db742ce2f" title="sum over leaf nodes of absolute accumulated summary x volume.">leavesAbsAccumulationMultVol</a>();
<a name="l00540"></a>00540          }
<a name="l00541"></a>00541  
<a name="l00542"></a>00542          <span class="keywordflow">return</span> retValue;
<a name="l00543"></a>00543      }
<a name="l00544"></a>00544  
<a name="l00545"></a>00545      <span class="comment">// Print the details of a single leaf node, using tab delimiters</span>
<a name="l00546"></a>00546      <span class="comment">// the summary is printed out remultiplied by the node volume</span>
<a name="l00547"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19">00547</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">CollatorSPVnode::leafOutputTabs</a>(
<a name="l00548"></a>00548                      std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00549"></a>00549 <span class="keyword">     </span>{
<a name="l00550"></a>00550  
<a name="l00551"></a>00551          <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00552"></a>00552  
<a name="l00553"></a>00553              ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00554"></a>00554  
<a name="l00555"></a>00555              <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00556"></a>00556              os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00557"></a>00557              <span class="keywordtype">double</span> vol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00558"></a>00558              os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00559"></a>00559          <span class="comment">// followed by the empirical measure</span>
<a name="l00560"></a>00560          os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">getVemp</a>();
<a name="l00561"></a>00561              <span class="comment">// followed by the summary</span>
<a name="l00562"></a>00562              <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00563"></a>00563              <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.begin(); it&lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.end(); it++) {
<a name="l00564"></a>00564                  os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*it);
<a name="l00565"></a>00565              }
<a name="l00566"></a>00566              <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00567"></a>00567              <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00568"></a>00568              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00569"></a>00569  
<a name="l00570"></a>00570                  os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00571"></a>00571                      &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00572"></a>00572              }
<a name="l00573"></a>00573  
<a name="l00574"></a>00574          }
<a name="l00575"></a>00575  
<a name="l00576"></a>00576      }
<a name="l00577"></a>00577     
<a name="l00578"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a994d9779baf89f37351656d4d615d340">00578</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">CollatorSPVnode::leafOutputTabs</a>(
<a name="l00579"></a>00579                      std::ostream &amp;os, <span class="keywordtype">int</span> whichColl)<span class="keyword"> const</span>
<a name="l00580"></a>00580 <span class="keyword">     </span>{
<a name="l00581"></a>00581  
<a name="l00582"></a>00582          <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00583"></a>00583  
<a name="l00584"></a>00584              ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00585"></a>00585  
<a name="l00586"></a>00586              <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l00587"></a>00587              os &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00588"></a>00588              <span class="keywordtype">double</span> vol = <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l00589"></a>00589              os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l00590"></a>00590          <span class="comment">// followed by the empirical measure</span>
<a name="l00591"></a>00591         <span class="comment">// os &lt;&lt; &quot;\t&quot; &lt;&lt; getVemp();</span>
<a name="l00592"></a>00592              <span class="comment">// followed by the summary</span>
<a name="l00593"></a>00593              os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[whichColl];
<a name="l00594"></a>00594              
<a name="l00595"></a>00595              <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l00596"></a>00596              <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l00597"></a>00597              <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00598"></a>00598  
<a name="l00599"></a>00599                  os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i])
<a name="l00600"></a>00600                      &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l00601"></a>00601              }
<a name="l00602"></a>00602  
<a name="l00603"></a>00603          }
<a name="l00604"></a>00604  
<a name="l00605"></a>00605      }
<a name="l00606"></a>00606     
<a name="l00607"></a>00607  
<a name="l00608"></a>00608      <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00609"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4">00609</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">CollatorSPVnode::leavesOutputTabs</a>(
<a name="l00610"></a>00610                              std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00611"></a>00611 <span class="keyword">     </span>{
<a name="l00612"></a>00612          <span class="comment">// uses  member function leafSummaryMultVolOutputTabs for node output</span>
<a name="l00613"></a>00613          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00614"></a>00614      <span class="comment">//    if (!(isEmpty())) { // this is a non-empty leaf</span>
<a name="l00615"></a>00615      <span class="comment">//        cout &lt;&lt; *theBox &lt;&lt; endl; </span>
<a name="l00616"></a>00616              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os);
<a name="l00617"></a>00617              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00618"></a>00618  
<a name="l00619"></a>00619          }
<a name="l00620"></a>00620  
<a name="l00621"></a>00621              <span class="comment">//recurse on the children</span>
<a name="l00622"></a>00622          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00623"></a>00623              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00624"></a>00624          }
<a name="l00625"></a>00625  
<a name="l00626"></a>00626          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00627"></a>00627              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00628"></a>00628          }
<a name="l00629"></a>00629  
<a name="l00630"></a>00630      }
<a name="l00631"></a>00631   
<a name="l00632"></a>00632           <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00633"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af432d9c3c95ad16f40274a0ab35948b8">00633</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">CollatorSPVnode::leavesOutputTabs</a>(
<a name="l00634"></a>00634                              std::ostream &amp;os, <span class="keywordtype">int</span> whichColl)<span class="keyword"> const</span>
<a name="l00635"></a>00635 <span class="keyword">     </span>{
<a name="l00636"></a>00636          <span class="comment">// uses  member function leafSummaryMultVolOutputTabs for node output</span>
<a name="l00637"></a>00637          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00638"></a>00638      <span class="comment">//    if (!(isEmpty())) { // this is a non-empty leaf</span>
<a name="l00639"></a>00639      <span class="comment">//        cout &lt;&lt; *theBox &lt;&lt; endl; </span>
<a name="l00640"></a>00640              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a60e3798526abbe3db915b8a9a9d0aa19" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(os, whichColl);
<a name="l00641"></a>00641              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00642"></a>00642  
<a name="l00643"></a>00643          }
<a name="l00644"></a>00644  
<a name="l00645"></a>00645              <span class="comment">//recurse on the children</span>
<a name="l00646"></a>00646          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00647"></a>00647              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00648"></a>00648          }
<a name="l00649"></a>00649  
<a name="l00650"></a>00650          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00651"></a>00651              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a214a7d5e78c28dbad8da0753eebe31f4" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
<a name="l00652"></a>00652          }
<a name="l00653"></a>00653  
<a name="l00654"></a>00654      }
<a name="l00655"></a>00655   
<a name="l00656"></a>00656   
<a name="l00657"></a>00657      <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00658"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad2fe162c253c15b43027ccd44ce9136b">00658</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad2fe162c253c15b43027ccd44ce9136b" title="Output for for all leaves of a binary tree.">CollatorSPVnode::leavesAverageOutputTabs</a>(
<a name="l00659"></a>00659                              std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00660"></a>00660 <span class="keyword">     </span>{
<a name="l00661"></a>00661          <span class="comment">// uses  member function leafAverageOutputTabs for node output</span>
<a name="l00662"></a>00662          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00663"></a>00663              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aac50041302262e7503e68cbd9103aa0b" title="Output for a node in a binary tree, tab-delimited.">leafAverageOutputTabs</a>(os);
<a name="l00664"></a>00664              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00665"></a>00665  
<a name="l00666"></a>00666          }
<a name="l00667"></a>00667  
<a name="l00668"></a>00668              <span class="comment">//recurse on the children</span>
<a name="l00669"></a>00669          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00670"></a>00670              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad2fe162c253c15b43027ccd44ce9136b" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(os);
<a name="l00671"></a>00671          }
<a name="l00672"></a>00672  
<a name="l00673"></a>00673          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00674"></a>00674              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad2fe162c253c15b43027ccd44ce9136b" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(os);
<a name="l00675"></a>00675          }
<a name="l00676"></a>00676  
<a name="l00677"></a>00677      }
<a name="l00678"></a>00678  
<a name="l00679"></a>00679  
<a name="l00680"></a>00680      <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00681"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a74c11c958cf56fbfff724d464c02f03a">00681</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a74c11c958cf56fbfff724d464c02f03a" title="Output for for all leaves of a binary tree.">CollatorSPVnode::leavesAccumulationOutputTabs</a>(
<a name="l00682"></a>00682                              std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00683"></a>00683 <span class="keyword">     </span>{
<a name="l00684"></a>00684          <span class="comment">// uses  member function leafAccumulationOutputTabs for nodes</span>
<a name="l00685"></a>00685          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00686"></a>00686              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a158da654dc12bf34a61950df57d2d742" title="Output for a node in a binary tree, tab-delimited.">leafAccumulationOutputTabs</a>(os);
<a name="l00687"></a>00687              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00688"></a>00688  
<a name="l00689"></a>00689          }
<a name="l00690"></a>00690  
<a name="l00691"></a>00691              <span class="comment">//recurse on the children</span>
<a name="l00692"></a>00692          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00693"></a>00693              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a74c11c958cf56fbfff724d464c02f03a" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(os);
<a name="l00694"></a>00694          }
<a name="l00695"></a>00695  
<a name="l00696"></a>00696          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00697"></a>00697              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a74c11c958cf56fbfff724d464c02f03a" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(os);
<a name="l00698"></a>00698          }
<a name="l00699"></a>00699  
<a name="l00700"></a>00700      }
<a name="l00701"></a>00701     
<a name="l00702"></a>00702      <span class="comment">//Output for all the  leaf boxes in this, using tab delimiters</span>
<a name="l00703"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a63529191a0b2eb1bc253c5c717fc2965">00703</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a63529191a0b2eb1bc253c5c717fc2965">CollatorSPVnode::leavesDifferenceOutputTabs</a>(
<a name="l00704"></a>00704                              std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00705"></a>00705 <span class="keyword">     </span>{
<a name="l00706"></a>00706          <span class="comment">// uses  member function leafAccumulationOutputTabs for nodes</span>
<a name="l00707"></a>00707          <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00708"></a>00708              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a20f7af5ed80d8860009cfd39f1dafc03">leafDifferenceOutputTabs</a>(os);
<a name="l00709"></a>00709              <span class="keywordflow">return</span> (os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l00710"></a>00710  
<a name="l00711"></a>00711          }
<a name="l00712"></a>00712  
<a name="l00713"></a>00713              <span class="comment">//recurse on the children</span>
<a name="l00714"></a>00714          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l00715"></a>00715              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a63529191a0b2eb1bc253c5c717fc2965">leavesDifferenceOutputTabs</a>(os);
<a name="l00716"></a>00716          }
<a name="l00717"></a>00717  
<a name="l00718"></a>00718          <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l00719"></a>00719              <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a63529191a0b2eb1bc253c5c717fc2965">leavesDifferenceOutputTabs</a>(os);
<a name="l00720"></a>00720          }
<a name="l00721"></a>00721  
<a name="l00722"></a>00722      }
<a name="l00723"></a>00723     
<a name="l00724"></a>00724  
<a name="l00725"></a>00725      <span class="comment">// Print the details of a of a specific node in a subpaving</span>
<a name="l00726"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a782737eae50163bbae2dc9c4b5e23aec">00726</a>      std::ostream&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a782737eae50163bbae2dc9c4b5e23aec" title="Output the details of a specific node.">CollatorSPVnode::nodePrint</a>(std::ostream &amp;os)<span class="keyword"> const</span>
<a name="l00727"></a>00727 <span class="keyword">     </span>{
<a name="l00728"></a>00728          <span class="comment">// output for box in form:</span>
<a name="l00729"></a>00729          <span class="comment">// box, volume, summary data</span>
<a name="l00730"></a>00730  
<a name="l00731"></a>00731          <span class="keywordflow">if</span>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) { <span class="comment">// do nothing if there is no box</span>
<a name="l00732"></a>00732  
<a name="l00733"></a>00733             ivector thisBox = *<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>; <span class="comment">// copy theBox</span>
<a name="l00734"></a>00734  
<a name="l00735"></a>00735             <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dataItr;
<a name="l00736"></a>00736  
<a name="l00737"></a>00737             os &lt;&lt; <span class="stringliteral">&quot;Box is :&quot;</span>;
<a name="l00738"></a>00738             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l00739"></a>00739                  <span class="comment">// c-xsc default output for intervals</span>
<a name="l00740"></a>00740                  os &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; thisBox[i];   
<a name="l00741"></a>00741         }
<a name="l00742"></a>00742  
<a name="l00743"></a>00743         os &lt;&lt; std::endl;
<a name="l00744"></a>00744         os &lt;&lt; <span class="stringliteral">&quot;Box volume is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &lt;&lt; std::endl;
<a name="l00745"></a>00745         os &lt;&lt; <span class="stringliteral">&quot;Empirical measure is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">getVemp</a>() &lt;&lt; std::endl;
<a name="l00746"></a>00746         os &lt;&lt; <span class="stringliteral">&quot;Summary data: &quot;</span> ;
<a name="l00747"></a>00747  
<a name="l00748"></a>00748         <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it;
<a name="l00749"></a>00749         <span class="keywordflow">for</span> (it = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.begin(); it&lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.end(); it++) {
<a name="l00750"></a>00750           os &lt;&lt; *it &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;
<a name="l00751"></a>00751         }
<a name="l00752"></a>00752              os &lt;&lt; std::endl;
<a name="l00753"></a>00753       }
<a name="l00754"></a>00754             
<a name="l00755"></a>00755       <span class="keywordflow">return</span> os;
<a name="l00756"></a>00756       }
<a name="l00757"></a>00757  
<a name="l00758"></a>00758      <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00759"></a>00759      <span class="comment">// comp argument is passed to Upper() and Lower()</span>
<a name="l00760"></a>00760      <span class="comment">// split the box in half normal to dimension set by comp</span>
<a name="l00761"></a>00761      <span class="comment">// also bring down Vemp</span>
<a name="l00762"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae6555e847a720e43c07ad0c56788f9b6">00762</a>      <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">CollatorSPVnode::nodeExpand</a>(<span class="keywordtype">int</span> comp)
<a name="l00763"></a>00763      {
<a name="l00764"></a>00764          <span class="keywordflow">try</span>
<a name="l00765"></a>00765          {
<a name="l00766"></a>00766              <span class="comment">// only do something if this CollatorSPVnode is a leaf</span>
<a name="l00767"></a>00767         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00768"></a>00768                  <span class="comment">// ivectors to become boxes for new children</span>
<a name="l00769"></a>00769                  ivector lC, rC;
<a name="l00770"></a>00770                  <span class="comment">// Call Lower() and Upper() to put split boxes</span>
<a name="l00771"></a>00771                  <span class="comment">// into lC and rC respectively</span>
<a name="l00772"></a>00772                  <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), lC, comp);
<a name="l00773"></a>00773                  <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), rC, comp);
<a name="l00774"></a>00774  
<a name="l00775"></a>00775                  <span class="comment">// make and add the new children</span>
<a name="l00776"></a>00776                  <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(lC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>, <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>));
<a name="l00777"></a>00777                  <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(rC, <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>, <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>, <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>));
<a name="l00778"></a>00778  
<a name="l00779"></a>00779                  <span class="comment">//name the new children</span>
<a name="l00780"></a>00780                  <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;L&quot;</span>);
<a name="l00781"></a>00781                  <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a> + <span class="stringliteral">&quot;R&quot;</span>);
<a name="l00782"></a>00782 
<a name="l00783"></a>00783                 <span class="comment">// new children have summary from this</span>
<a name="l00784"></a>00784         }
<a name="l00785"></a>00785       }
<a name="l00786"></a>00786 
<a name="l00787"></a>00787     <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00788"></a>00788     {
<a name="l00789"></a>00789          std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00790"></a>00790             &lt;&lt; <span class="stringliteral">&quot;CollatorSPVnode::nodeExpand()&quot;</span>
<a name="l00791"></a>00791             &lt;&lt; std::endl;
<a name="l00792"></a>00792          <span class="keywordflow">throw</span>;
<a name="l00793"></a>00793     }
<a name="l00794"></a>00794   }
<a name="l00795"></a>00795 
<a name="l00796"></a>00796   <span class="comment">// add two sibling nodes to this provided this is a leaf</span>
<a name="l00797"></a>00797   <span class="comment">// finds its own comp argument then calls nodeExpand(int comp)</span>
<a name="l00798"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5">00798</a>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">CollatorSPVnode::nodeExpand</a>()
<a name="l00799"></a>00799    {
<a name="l00800"></a>00800       <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// variable to hold first longest dimension</span>
<a name="l00801"></a>00801     <span class="keywordtype">double</span> temp = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">::MaxDiam</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00802"></a>00802       <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">nodeExpand</a>(maxdiamcomp); <span class="comment">// complete nodeExpand</span>
<a name="l00803"></a>00803  
<a name="l00804"></a>00804    }
<a name="l00805"></a>00805  
<a name="l00806"></a>00806      <span class="comment">// computes a minimal subpaving from two sibling subpavings</span>
<a name="l00807"></a>00807      <span class="comment">// a subpaving is minimal if it has no sibling leaves</span>
<a name="l00808"></a>00808      <span class="comment">// a minimal subpaving is created by discarding sibling leaves</span>
<a name="l00809"></a>00809      <span class="comment">// and create summary data for new parent from children</span>
<a name="l00810"></a>00810      <span class="comment">// warning: nodeReunite would not normally be used with</span>
<a name="l00811"></a>00811      <span class="comment">// CollatorSPVnodes but is in the base class and is</span>
<a name="l00812"></a>00812      <span class="comment">// reimplemented to try do it appropriately for this</span>
<a name="l00813"></a>00813      <span class="comment">// derived class should it be needed.</span>
<a name="l00814"></a>00814      <span class="comment">// This function is untested.</span>
<a name="l00815"></a>00815      <span class="comment">//void CollatorSPVnode::nodeReunite(CollatorSPVnode *lChild,</span>
<a name="l00816"></a>00816      <span class="comment">//                               CollatorSPVnode *rChild)</span>
<a name="l00817"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#abef4fa1adf9483d78e21350712864fd2">00817</a>       <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#abef4fa1adf9483d78e21350712864fd2" title="Try to reunite nodes to form one leaf.">CollatorSPVnode::nodesReunite</a>()
<a name="l00818"></a>00818     <span class="comment">// lChild and rChild are the two subpavings to be reunited</span>
<a name="l00819"></a>00819     {
<a name="l00820"></a>00820       <span class="comment">//  cout &lt;&lt; &quot;calling nodesReunite&quot; &lt;&lt; endl;</span>
<a name="l00821"></a>00821      
<a name="l00822"></a>00822      <span class="comment">/*</span>
<a name="l00823"></a>00823 <span class="comment">      // *this is the node which will become the parent</span>
<a name="l00824"></a>00824 <span class="comment">        </span>
<a name="l00825"></a>00825 <span class="comment">      // check that the labels match and exit if not</span>
<a name="l00826"></a>00826 <span class="comment">        if ((lChild-&gt;label != label ) || (rChild-&gt;label != label)) {</span>
<a name="l00827"></a>00827 <span class="comment">            throw SPnodeException(&quot;Labels do not match&quot;);</span>
<a name="l00828"></a>00828 <span class="comment">        }</span>
<a name="l00829"></a>00829 <span class="comment">      </span>
<a name="l00830"></a>00830 <span class="comment">        // if both subpavings are leaves and hull of boxes is x</span>
<a name="l00831"></a>00831 <span class="comment">        // discard them: *this is a leaf</span>
<a name="l00832"></a>00832 <span class="comment">        if (lChild-&gt;isLeaf() &amp;&amp; rChild-&gt;isLeaf()) {</span>
<a name="l00833"></a>00833 <span class="comment">        cout &lt;&lt; &quot;both are leaves&quot; &lt;&lt; endl;</span>
<a name="l00834"></a>00834 <span class="comment">         if (*theBox != (*(lChild-&gt;theBox) |</span>
<a name="l00835"></a>00835 <span class="comment">                            *(rChild-&gt;theBox))) {</span>
<a name="l00836"></a>00836 <span class="comment">                throw SPnodeException(&quot;Boxes cannot be combined&quot;);</span>
<a name="l00837"></a>00837 <span class="comment"></span>
<a name="l00838"></a>00838 <span class="comment">            }               </span>
<a name="l00839"></a>00839 <span class="comment">        // how many elements in the left child&#39;s summary</span>
<a name="l00840"></a>00840 <span class="comment">            size_t n = (lChild-&gt;summary).size();</span>
<a name="l00841"></a>00841 <span class="comment">            // elements in summary for each child should be same</span>
<a name="l00842"></a>00842 <span class="comment">            if ((rChild-&gt;summary).size() != n) {</span>
<a name="l00843"></a>00843 <span class="comment">                throw SPnodeException(&quot;Summaries cannot be combined&quot;);</span>
<a name="l00844"></a>00844 <span class="comment"></span>
<a name="l00845"></a>00845 <span class="comment">            }</span>
<a name="l00846"></a>00846 <span class="comment">            // put into this summary the average of summary of children</span>
<a name="l00847"></a>00847 <span class="comment">            size_t i = 0;</span>
<a name="l00848"></a>00848 <span class="comment">        for (i=0; i &lt; n; i++) {</span>
<a name="l00849"></a>00849 <span class="comment">           //to take note</span>
<a name="l00850"></a>00850 <span class="comment">                summary.push_back(((lChild-&gt;summary)[i]</span>
<a name="l00851"></a>00851 <span class="comment">                                +(rChild-&gt;summary)[i])/2.0);</span>
<a name="l00852"></a>00852 <span class="comment">            }   </span>
<a name="l00853"></a>00853 <span class="comment">            //discard the two subpavings given</span>
<a name="l00854"></a>00854 <span class="comment">        delete lChild;</span>
<a name="l00855"></a>00855 <span class="comment">            delete rChild;</span>
<a name="l00856"></a>00856 <span class="comment">        }</span>
<a name="l00857"></a>00857 <span class="comment"></span>
<a name="l00858"></a>00858 <span class="comment">        else {  // at least one child is not a leaf</span>
<a name="l00859"></a>00859 <span class="comment">            // this has to adopt them rather than reuniting them</span>
<a name="l00860"></a>00860 <span class="comment">        cout &lt;&lt; &quot;at least one child is not a leaf&quot; &lt;&lt; endl;</span>
<a name="l00861"></a>00861 <span class="comment">            nodeAdoptLeft(lChild);</span>
<a name="l00862"></a>00862 <span class="comment">            nodeAdoptRight(rChild);</span>
<a name="l00863"></a>00863 <span class="comment">            recursiveRename();</span>
<a name="l00864"></a>00864 <span class="comment">        }</span>
<a name="l00865"></a>00865 <span class="comment">      */</span>
<a name="l00866"></a>00866       
<a name="l00867"></a>00867       <span class="comment">//only propagate if nodeAccumulation for both left and right child are</span>
<a name="l00868"></a>00868       <span class="comment">// the same</span>
<a name="l00869"></a>00869       
<a name="l00870"></a>00870      <span class="comment">// cout &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l00871"></a>00871   
<a name="l00872"></a>00872       <span class="comment">// first recursively deal with the children of the children           </span>
<a name="l00873"></a>00873        <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>())
<a name="l00874"></a>00874             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#abef4fa1adf9483d78e21350712864fd2" title="Try to reunite nodes to form one leaf.">nodesReunite</a>();
<a name="l00875"></a>00875         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>())
<a name="l00876"></a>00876             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#abef4fa1adf9483d78e21350712864fd2" title="Try to reunite nodes to form one leaf.">nodesReunite</a>();
<a name="l00877"></a>00877 
<a name="l00878"></a>00878       <span class="comment">// now deal with this</span>
<a name="l00879"></a>00879       <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00880"></a>00880             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l00881"></a>00881           <span class="comment">//cout &lt;&lt; &quot;both are leaves&quot; &lt;&lt; endl;</span>
<a name="l00882"></a>00882           <span class="comment">//cout &lt;&lt; getLeftChild()-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; getRightChild()-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l00883"></a>00883         <span class="comment">//  cout &lt;&lt; getLeftChild()-&gt;nodeAccumulation() &lt;&lt; &quot;\t&quot; &lt;&lt; getRightChild()-&gt;nodeAccumulation() &lt;&lt; endl;</span>
<a name="l00884"></a>00884           
<a name="l00885"></a>00885           <span class="keywordflow">if</span> ( ((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a5fb3b27a05bb36fc409ed1ffe17cab9f">nodeAccumulation</a>())==0) &amp;&amp; 
<a name="l00886"></a>00886               ((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a5fb3b27a05bb36fc409ed1ffe17cab9f">nodeAccumulation</a>())==0) ) {
<a name="l00887"></a>00887         <span class="comment">//    cout &lt;&lt; &quot;----reunite to get &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l00888"></a>00888             
<a name="l00889"></a>00889             <span class="keywordtype">size_t</span> i = 0;
<a name="l00890"></a>00890             <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.size();
<a name="l00891"></a>00891             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00892"></a>00892               <span class="comment">//to take note</span>
<a name="l00893"></a>00893               <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[i]=(((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l00894"></a>00894                         +(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]));
<a name="l00895"></a>00895             <span class="comment">//  cout &lt;&lt; &quot;reunited summary: &quot; &lt;&lt; ((getLeftChild()-&gt;summary)[i]</span>
<a name="l00896"></a>00896             <span class="comment">//            +(getRightChild()-&gt;summary)[i]) &lt;&lt; endl;</span>
<a name="l00897"></a>00897             }   
<a name="l00898"></a>00898             <span class="comment">//discard the two children</span>
<a name="l00899"></a>00899             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l00900"></a>00900             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l00901"></a>00901             <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a> = NULL;
<a name="l00902"></a>00902             <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a> = NULL;
<a name="l00903"></a>00903           } 
<a name="l00904"></a>00904         } 
<a name="l00905"></a>00905       }
<a name="l00906"></a>00906    } <span class="comment">// end of function</span>
<a name="l00907"></a>00907    
<a name="l00908"></a>00908  <span class="comment">// return a reference to a container of CollatorSPVnodes</span>
<a name="l00909"></a>00909     <span class="comment">// contents being the leaves descended from this, or this if this is a leaf</span>
<a name="l00910"></a>00910     <span class="comment">// left to right order</span>
<a name="l00911"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aab5d343b96bf5be2ef7ebfaa4ead0319">00911</a>     std::vector&lt;CollatorSPVnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aab5d343b96bf5be2ef7ebfaa4ead0319">CollatorSPVnode::getLeaves</a>(std::vector&lt;CollatorSPVnode*&gt;&amp; leaves)<span class="keyword"> const</span>
<a name="l00912"></a>00912 <span class="keyword">    </span>{
<a name="l00913"></a>00913         <span class="comment">//if children, recurse on the children</span>
<a name="l00914"></a>00914         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00915"></a>00915             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aab5d343b96bf5be2ef7ebfaa4ead0319">getLeaves</a>(leaves);
<a name="l00916"></a>00916         }
<a name="l00917"></a>00917 
<a name="l00918"></a>00918         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00919"></a>00919             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aab5d343b96bf5be2ef7ebfaa4ead0319">getLeaves</a>(leaves);
<a name="l00920"></a>00920         }
<a name="l00921"></a>00921 
<a name="l00922"></a>00922         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() &amp;&amp; !<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) { <span class="comment">// this is a leaf</span>
<a name="l00923"></a>00923             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l00924"></a>00924             leaves.push_back(const_cast&lt;CollatorSPVnode*&gt;(<span class="keyword">this</span>));
<a name="l00925"></a>00925         }
<a name="l00926"></a>00926         <span class="keywordflow">return</span> leaves;
<a name="l00927"></a>00927     }
<a name="l00928"></a>00928     
<a name="l00929"></a>00929    
<a name="l00930"></a>00930     <span class="comment">// return a reference to a container of SPSnodes</span>
<a name="l00931"></a>00931     <span class="comment">// contents being all the nodes in left to right order</span>
<a name="l00932"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a49322e88d40a59c02bb6c3eb5841584a">00932</a>     std::vector&lt;CollatorSPVnode*&gt;&amp; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a49322e88d40a59c02bb6c3eb5841584a">CollatorSPVnode::getAllNodes</a>(std::vector&lt;CollatorSPVnode*&gt;&amp; allNodes)<span class="keyword"> const</span>
<a name="l00933"></a>00933 <span class="keyword">    </span>{
<a name="l00934"></a>00934         <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) { <span class="comment">// this is not empty</span>
<a name="l00935"></a>00935       <span class="comment">//if (!hasLCwithBox() &amp;&amp; !hasRCwithBox()) { // this is a leaf</span>
<a name="l00936"></a>00936             <span class="comment">// arrgh horrible - cast away const if this node is a leaf</span>
<a name="l00937"></a>00937         <span class="comment">//cout &lt;&lt; nodeName &lt;&lt; endl;</span>
<a name="l00938"></a>00938             allNodes.push_back(const_cast&lt;CollatorSPVnode*&gt;(<span class="keyword">this</span>));
<a name="l00939"></a>00939         }
<a name="l00940"></a>00940       
<a name="l00941"></a>00941       <span class="comment">//if children, recurse on the children</span>
<a name="l00942"></a>00942         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00943"></a>00943             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a49322e88d40a59c02bb6c3eb5841584a">getAllNodes</a>(allNodes);
<a name="l00944"></a>00944         }
<a name="l00945"></a>00945 
<a name="l00946"></a>00946         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00947"></a>00947             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a49322e88d40a59c02bb6c3eb5841584a">getAllNodes</a>(allNodes);
<a name="l00948"></a>00948         }       
<a name="l00949"></a>00949         <span class="keywordflow">return</span> allNodes;
<a name="l00950"></a>00950    }
<a name="l00951"></a>00951    
<a name="l00952"></a>00952    
<a name="l00953"></a>00953 
<a name="l00954"></a>00954     <span class="comment">// graft lChild onto this node</span>
<a name="l00955"></a>00955     <span class="comment">// lChild could be a leaf or a non-leaf</span>
<a name="l00956"></a>00956     <span class="comment">// takes care of the summary associated with lChild/its descendents</span>
<a name="l00957"></a>00957     <span class="comment">// used when we are building a collator statistical subpaving upwards</span>
<a name="l00958"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a7a6318a53eb8efeecc8ea81244c98859">00958</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a7a6318a53eb8efeecc8ea81244c98859" title="Builds a higher level of a tree from existing nodes. This adopts a left child rather than attempting ...">CollatorSPVnode::nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> *lChild)
<a name="l00959"></a>00959     {
<a name="l00960"></a>00960         <span class="comment">// *this is the node which will become the parent</span>
<a name="l00961"></a>00961 
<a name="l00962"></a>00962         <span class="keywordtype">size_t</span> i = 0;
<a name="l00963"></a>00963 
<a name="l00964"></a>00964         <span class="keywordtype">size_t</span> n = (lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>).size();
<a name="l00965"></a>00965 
<a name="l00966"></a>00966         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.empty()) { <span class="comment">// no summary in this box already</span>
<a name="l00967"></a>00967             <span class="comment">// put into this summary the summary of the new child</span>
<a name="l00968"></a>00968             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00969"></a>00969                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.push_back((lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]);
<a name="l00970"></a>00970             }
<a name="l00971"></a>00971         }
<a name="l00972"></a>00972         <span class="keywordflow">else</span> { <span class="comment">// has summary already</span>
<a name="l00973"></a>00973 
<a name="l00974"></a>00974             <span class="comment">// we have to make summary for this match</span>
<a name="l00975"></a>00975             <span class="comment">// that of the children</span>
<a name="l00976"></a>00976             <span class="comment">// number of elements in this summary should = child</span>
<a name="l00977"></a>00977             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.size() != n) {
<a name="l00978"></a>00978                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Summaries do not match&quot;</span>);;
<a name="l00979"></a>00979             }
<a name="l00980"></a>00980 
<a name="l00981"></a>00981             <span class="comment">// store current summary temporarily</span>
<a name="l00982"></a>00982             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp_summary = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l00983"></a>00983 
<a name="l00984"></a>00984             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.clear();
<a name="l00985"></a>00985 
<a name="l00986"></a>00986             <span class="comment">// put into this summary the average of</span>
<a name="l00987"></a>00987             <span class="comment">// the summary of the new child and the old summary</span>
<a name="l00988"></a>00988             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l00989"></a>00989                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.push_back(((lChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l00990"></a>00990                                 + temp_summary[i])/2.0);
<a name="l00991"></a>00991             }
<a name="l00992"></a>00992         }
<a name="l00993"></a>00993 
<a name="l00994"></a>00994         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l00995"></a>00995         <span class="comment">// nodeAddLeft() checks labels, hull size, present children</span>
<a name="l00996"></a>00996         <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(lChild);
<a name="l00997"></a>00997     }
<a name="l00998"></a>00998 
<a name="l00999"></a>00999     <span class="comment">// graft rChild onto this node</span>
<a name="l01000"></a>01000     <span class="comment">// rChild could be a leaf or a non-leaf</span>
<a name="l01001"></a>01001     <span class="comment">// takes care of the data associated with rChild/its descendents</span>
<a name="l01002"></a>01002     <span class="comment">// used when we are building a collator statistical subpaving upwards</span>
<a name="l01003"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a47cfd580379397fa0f713de7306a65c3">01003</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a47cfd580379397fa0f713de7306a65c3" title="Builds a higher level of a tree from existing nodes.">CollatorSPVnode::nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> *rChild)
<a name="l01004"></a>01004     {
<a name="l01005"></a>01005         <span class="comment">// *this is the node which will become the parent</span>
<a name="l01006"></a>01006         <span class="keywordtype">size_t</span> i = 0;
<a name="l01007"></a>01007 
<a name="l01008"></a>01008         <span class="keywordtype">size_t</span> n = (rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>).size();
<a name="l01009"></a>01009 
<a name="l01010"></a>01010         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.empty()) { <span class="comment">// no summary in this box already</span>
<a name="l01011"></a>01011             <span class="comment">// put into this summary the summary of the new child</span>
<a name="l01012"></a>01012             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l01013"></a>01013                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.push_back((rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]);
<a name="l01014"></a>01014             }
<a name="l01015"></a>01015         }
<a name="l01016"></a>01016         <span class="keywordflow">else</span> { <span class="comment">// has summary already</span>
<a name="l01017"></a>01017 
<a name="l01018"></a>01018             <span class="comment">// we have to make summary for this match</span>
<a name="l01019"></a>01019             <span class="comment">// that of the children</span>
<a name="l01020"></a>01020             <span class="comment">// number of elements in this summary should = child</span>
<a name="l01021"></a>01021             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.size() != n) {
<a name="l01022"></a>01022                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Summaries do not match&quot;</span>);
<a name="l01023"></a>01023             }
<a name="l01024"></a>01024             <span class="comment">// store current summary temporarily</span>
<a name="l01025"></a>01025             <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp_summary = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;
<a name="l01026"></a>01026 
<a name="l01027"></a>01027             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.clear();
<a name="l01028"></a>01028 
<a name="l01029"></a>01029             <span class="comment">// put into this summary the average of the summary</span>
<a name="l01030"></a>01030             <span class="comment">// of the new child and the old summary</span>
<a name="l01031"></a>01031             <span class="keywordflow">for</span> (i=0; i &lt; n; i++) {
<a name="l01032"></a>01032                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.push_back(((rChild-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>)[i]
<a name="l01033"></a>01033                                 + temp_summary[i])/2.0);
<a name="l01034"></a>01034             }
<a name="l01035"></a>01035         }
<a name="l01036"></a>01036 
<a name="l01037"></a>01037         <span class="comment">// point parent and child pointers in the right directions</span>
<a name="l01038"></a>01038         <span class="comment">// nodeAddRight() checks labels, hull size, present children</span>
<a name="l01039"></a>01039         <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(rChild);
<a name="l01040"></a>01040     }
<a name="l01041"></a>01041                      
<a name="l01042"></a>01042     <span class="comment">// incorporate a subpaving to this summmary,</span>
<a name="l01043"></a>01043     <span class="comment">// adjusts this summary for the contents of the subpaving added</span>
<a name="l01044"></a>01044     <span class="comment">// have not specifed const data for the CollatorSPVnode pointer,</span>
<a name="l01045"></a>01045     <span class="comment">// because if we do that we can&#39;t expand it</span>
<a name="l01046"></a>01046     <span class="comment">// but note that the CollatorSPVnode passed in CAN BE ALTERED</span>
<a name="l01047"></a>01047     <span class="comment">// this is for ALL nodes, i.e. including internal nodes</span>
<a name="l01048"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a">01048</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">CollatorSPVnode::addPavingWithVal</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> spn)
<a name="l01049"></a>01049     {
<a name="l01050"></a>01050        
<a name="l01051"></a>01051         <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01052"></a>01052         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;  <span class="comment">// indicator for done adding</span>
<a name="l01053"></a>01053 
<a name="l01054"></a>01054         <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> summaryIt;
<a name="l01055"></a>01055 
<a name="l01056"></a>01056         <span class="keywordflow">try</span> {
<a name="l01057"></a>01057 
<a name="l01058"></a>01058             <span class="keywordflow">if</span> (spn == NULL) {
<a name="l01059"></a>01059                 done = <span class="keyword">true</span>;
<a name="l01060"></a>01060 
<a name="l01061"></a>01061             }
<a name="l01062"></a>01062 
<a name="l01063"></a>01063             <span class="comment">// if the boxes are not the same we can&#39;t do anything</span>
<a name="l01064"></a>01064             <span class="keywordflow">if</span> (!done &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != NULL) &amp;&amp; (*<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> != spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01065"></a>01065                 <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l01066"></a>01066             }
<a name="l01067"></a>01067 
<a name="l01068"></a>01068             <span class="comment">// if this has no box yet it has not incorporated anything</span>
<a name="l01069"></a>01069             <span class="comment">// and so we just use spn to construct this</span>
<a name="l01070"></a>01070             <span class="keywordflow">if</span> (!done &amp;&amp; (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> == NULL)) {
<a name="l01071"></a>01071                 <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01072"></a>01072                 ivector v = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01073"></a>01073                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> = <span class="keyword">new</span> ivector(v);
<a name="l01074"></a>01074                 <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a> = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(v) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(v) + 1;
<a name="l01075"></a>01075                 <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a> = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>();
<a name="l01076"></a>01076                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a> = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>;               
<a name="l01077"></a>01077                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l01078"></a>01078                 <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01079"></a>01079                                 
<a name="l01080"></a>01080                 <span class="comment">//recursion on the children</span>
<a name="l01081"></a>01081                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>) {
<a name="l01082"></a>01082                     <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>())));
<a name="l01083"></a>01083                 }
<a name="l01084"></a>01084                 <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>=NULL;
<a name="l01085"></a>01085 
<a name="l01086"></a>01086                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>) {
<a name="l01087"></a>01087                     <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>())));
<a name="l01088"></a>01088                  }
<a name="l01089"></a>01089                 <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>=NULL;
<a name="l01090"></a>01090 
<a name="l01091"></a>01091                 done = <span class="keyword">true</span>;
<a name="l01092"></a>01092                 retValue = <span class="keyword">true</span>;
<a name="l01093"></a>01093             } <span class="comment">// end if theBox==NULL</span>
<a name="l01094"></a>01094             
<a name="l01095"></a>01095             <span class="comment">// do the rest only if done is not true</span>
<a name="l01096"></a>01096 
<a name="l01097"></a>01097             <span class="comment">// if this is a leaf and the paving to be added is a leaf we don&#39;t</span>
<a name="l01098"></a>01098             <span class="comment">// this just sucks in the counter from spn</span>
<a name="l01099"></a>01099             <span class="keywordflow">if</span> (!done &amp;&amp; !done &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() &amp;&amp; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l01100"></a>01100            <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01101"></a>01101                 <span class="comment">//cout &lt;&lt; &quot;both are leaves&quot; &lt;&lt; endl;</span>
<a name="l01102"></a>01102                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad7fa37be86eb1d964b384a090dc3552f" title="Accessor for the summary.">getSummary</a>();
<a name="l01103"></a>01103                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.insert(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.end(), temp.begin(),temp.end());
<a name="l01104"></a>01104                 
<a name="l01105"></a>01105                 <span class="comment">//danger!</span>
<a name="l01106"></a>01106                 <span class="comment">// if this is split and became a leaf because of addition into </span>
<a name="l01107"></a>01107                 <span class="comment">// collator, then we need to use spn&#39;s Vemp</span>
<a name="l01108"></a>01108                 <span class="comment">// assuming that spn&#39;s Vemp is smaller than Vemp</span>
<a name="l01109"></a>01109           <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> &gt; (spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>) ) {
<a name="l01110"></a>01110             <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01111"></a>01111             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l01112"></a>01112             <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01113"></a>01113           }
<a name="l01114"></a>01114                <span class="comment">// if spn became a leaf because of addition, then we need to use </span>
<a name="l01115"></a>01115                <span class="comment">// Vemp of this</span>
<a name="l01116"></a>01116                <span class="comment">// if Vemp = spn-&gt;Vemp, doesn&#39;t matter which Vemp is used</span>
<a name="l01117"></a>01117                <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> &lt;= (spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>) ) {
<a name="l01118"></a>01118             <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01119"></a>01119             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;
<a name="l01120"></a>01120             <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01121"></a>01121           }
<a name="l01122"></a>01122                
<a name="l01123"></a>01123                 done = <span class="keyword">true</span>;
<a name="l01124"></a>01124                 retValue = <span class="keyword">true</span>;
<a name="l01125"></a>01125             }
<a name="l01126"></a>01126 
<a name="l01127"></a>01127             <span class="comment">// else not done and not both leaves,</span>
<a name="l01128"></a>01128             <span class="comment">// if this is not a leaf or the paving to be added</span>
<a name="l01129"></a>01129             <span class="comment">// is not a leaf, we may need to split</span>
<a name="l01130"></a>01130             <span class="comment">// and we will need to recurse further</span>
<a name="l01131"></a>01131             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!done &amp;&amp; (!<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() || !(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()))) {
<a name="l01132"></a>01132                 <span class="comment">// if this is leaf and spn not we need to split this</span>
<a name="l01133"></a>01133                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// so spn can&#39;t be a leaf</span>
<a name="l01134"></a>01134                      <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01135"></a>01135                      <span class="comment">//cout &lt;&lt; &quot;this is a leaf &quot; &lt;&lt; endl;</span>
<a name="l01136"></a>01136                      <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a43e370d7120f8cc8c1cde489f61e7fc5" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">nodeExpand</a>();
<a name="l01137"></a>01137                      <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01138"></a>01138               <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;    
<a name="l01139"></a>01139               <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;  </span>
<a name="l01140"></a>01140                 }
<a name="l01141"></a>01141 
<a name="l01142"></a>01142                 <span class="comment">// if spn is leaf and this is not we need to split spn</span>
<a name="l01143"></a>01143                 <span class="comment">// THIS WILL CHANGE the CollatorSPVnode pointed to by spn</span>
<a name="l01144"></a>01144 
<a name="l01145"></a>01145                 <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// so this can&#39;t be a leaf</span>
<a name="l01146"></a>01146               <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01147"></a>01147                      <span class="comment">//cout &lt;&lt; &quot;spn is a leaf &quot; &lt;&lt; endl;</span>
<a name="l01148"></a>01148               
<a name="l01149"></a>01149               spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae6555e847a720e43c07ad0c56788f9b6" title="Expand leaf node to make two more leaves as children and copy summary and Vemp down to the children...">nodeExpand</a>();
<a name="l01150"></a>01150                      <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;</span>
<a name="l01151"></a>01151               <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a> = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a31cd9926485cf1190effb77a9ce8dac4" title="Empirical measure for the validation data from the collated subpavings.">Vemp</a>;    
<a name="l01152"></a>01152               <span class="comment">//cout &lt;&lt; Vemp &lt;&lt; endl;   </span>
<a name="l01153"></a>01153                 }
<a name="l01154"></a>01154 
<a name="l01155"></a>01155                 <span class="comment">// put in the data</span>
<a name="l01156"></a>01156                 <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> temp = spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad7fa37be86eb1d964b384a090dc3552f" title="Accessor for the summary.">getSummary</a>();
<a name="l01157"></a>01157                 <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.insert(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.end(), temp.begin(),temp.end());
<a name="l01158"></a>01158                 done = <span class="keyword">true</span>;
<a name="l01159"></a>01159                                
<a name="l01160"></a>01160                 <span class="comment">// if they are were neither leaves originally</span>
<a name="l01161"></a>01161                 <span class="comment">// we go straight on to recursing with the children</span>
<a name="l01162"></a>01162                 <span class="comment">// otherwise expansions above are followed by recursion</span>
<a name="l01163"></a>01163 
<a name="l01164"></a>01164                 <span class="comment">// recurse with children</span>
<a name="l01165"></a>01165                 <span class="comment">//cout &lt;&lt; &quot;recursing with children&quot; &lt;&lt; endl;</span>
<a name="l01166"></a>01166                 retValue=<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l01167"></a>01167                 retValue=<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(spn-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l01168"></a>01168             } <span class="comment">// end of dealing with case where at least one is not a leaf</span>
<a name="l01169"></a>01169         }
<a name="l01170"></a>01170         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01171"></a>01171             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPaving&quot;</span> &lt;&lt; endl;
<a name="l01172"></a>01172             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01173"></a>01173             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01174"></a>01174             <span class="keywordflow">throw</span>;
<a name="l01175"></a>01175         }
<a name="l01176"></a>01176         <span class="keywordflow">return</span> retValue;
<a name="l01177"></a>01177     }
<a name="l01178"></a>01178     
<a name="l01179"></a>01179    
<a name="l01180"></a>01180    <span class="comment">//adding CollatorSPVnodes</span>
<a name="l01181"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af92d7a31e4c7f97661d3e812948a8aee">01181</a>    <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af92d7a31e4c7f97661d3e812948a8aee" title="Add two collator subpavings together.">CollatorSPVnode::addPavings</a>(
<a name="l01182"></a>01182                               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> lhs,
<a name="l01183"></a>01183                               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> rhs)
<a name="l01184"></a>01184     {
<a name="l01185"></a>01185         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* newCollator = NULL;
<a name="l01186"></a>01186         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* temp = NULL;
<a name="l01187"></a>01187         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l01188"></a>01188         <span class="keywordflow">try</span> {
<a name="l01189"></a>01189             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// return null</span>
<a name="l01190"></a>01190 
<a name="l01191"></a>01191             <span class="comment">// if exactly one is null we can return a copy of the non-null one</span>
<a name="l01192"></a>01192             <span class="keywordflow">if</span> (!done &amp;&amp; lhs == NULL &amp;&amp; rhs != NULL) {
<a name="l01193"></a>01193                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*rhs);
<a name="l01194"></a>01194                 done = <span class="keyword">true</span>;
<a name="l01195"></a>01195             }
<a name="l01196"></a>01196             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs == NULL) {
<a name="l01197"></a>01197                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*lhs);
<a name="l01198"></a>01198                 done = <span class="keyword">true</span>;
<a name="l01199"></a>01199             }
<a name="l01200"></a>01200             <span class="comment">// both not null</span>
<a name="l01201"></a>01201             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs != NULL) {
<a name="l01202"></a>01202                 <span class="keywordflow">if</span> ((lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != NULL) &amp;&amp;
<a name="l01203"></a>01203                                 (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01204"></a>01204                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l01205"></a>01205                 }
<a name="l01206"></a>01206                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*lhs);
<a name="l01207"></a>01207                 temp = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*rhs);
<a name="l01208"></a>01208                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(temp);
<a name="l01209"></a>01209                 <span class="keyword">delete</span> temp;
<a name="l01210"></a>01210                 temp = NULL;
<a name="l01211"></a>01211             }
<a name="l01212"></a>01212         }
<a name="l01213"></a>01213         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01214"></a>01214             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01215"></a>01215                 <span class="keyword">delete</span> newCollator;
<a name="l01216"></a>01216                 newCollator = NULL;
<a name="l01217"></a>01217             }
<a name="l01218"></a>01218             <span class="keywordflow">if</span> (temp != NULL) {
<a name="l01219"></a>01219                 <span class="keyword">delete</span> temp;
<a name="l01220"></a>01220                 temp = NULL;
<a name="l01221"></a>01221             }
<a name="l01222"></a>01222             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPavings&quot;</span> &lt;&lt; endl;
<a name="l01223"></a>01223             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01224"></a>01224             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01225"></a>01225             <span class="keywordflow">throw</span>;
<a name="l01226"></a>01226         }
<a name="l01227"></a>01227         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01228"></a>01228             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01229"></a>01229                 <span class="keyword">delete</span> newCollator;
<a name="l01230"></a>01230                 newCollator = NULL;
<a name="l01231"></a>01231             }
<a name="l01232"></a>01232             <span class="keywordflow">if</span> (temp != NULL) {
<a name="l01233"></a>01233                 <span class="keyword">delete</span> temp;
<a name="l01234"></a>01234                 temp = NULL;
<a name="l01235"></a>01235             }
<a name="l01236"></a>01236             <span class="keywordflow">throw</span>;
<a name="l01237"></a>01237         }
<a name="l01238"></a>01238 
<a name="l01239"></a>01239         <span class="keywordflow">return</span> newCollator;
<a name="l01240"></a>01240     }
<a name="l01241"></a>01241 
<a name="l01242"></a>01242     <span class="comment">// subtract pavings</span>
<a name="l01243"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab662ab5025178c145b83b386ef475415">01243</a>     <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab662ab5025178c145b83b386ef475415" title="Subtract one collator subpavings from another together.">CollatorSPVnode::subtractPavings</a>(
<a name="l01244"></a>01244                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> lhs,
<a name="l01245"></a>01245                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> rhs, <span class="keywordtype">double</span> c)
<a name="l01246"></a>01246     {
<a name="l01247"></a>01247         cout &lt;&lt; <span class="stringliteral">&quot;subtract pavings called&quot;</span> &lt;&lt; endl;
<a name="l01248"></a>01248         <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* newCollator = NULL;
<a name="l01249"></a>01249 
<a name="l01250"></a>01250         <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l01251"></a>01251 
<a name="l01252"></a>01252         <span class="keywordflow">try</span> {
<a name="l01253"></a>01253 
<a name="l01254"></a>01254             <span class="keywordflow">if</span> (lhs == NULL &amp;&amp; rhs == NULL) done = <span class="keyword">true</span>; <span class="comment">// return null</span>
<a name="l01255"></a>01255 
<a name="l01256"></a>01256             <span class="keywordflow">if</span> (!done &amp;&amp; lhs == NULL &amp;&amp; rhs != NULL) {
<a name="l01257"></a>01257 
<a name="l01258"></a>01258                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*rhs);
<a name="l01259"></a>01259                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01260"></a>01260 
<a name="l01261"></a>01261                 done = <span class="keyword">true</span>;
<a name="l01262"></a>01262 
<a name="l01263"></a>01263             }
<a name="l01264"></a>01264             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs == NULL) {
<a name="l01265"></a>01265 
<a name="l01266"></a>01266                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*lhs);
<a name="l01267"></a>01267                 done = <span class="keyword">true</span>;
<a name="l01268"></a>01268             }
<a name="l01269"></a>01269             <span class="comment">// both not null</span>
<a name="l01270"></a>01270             <span class="keywordflow">if</span> (!done &amp;&amp; lhs != NULL &amp;&amp; rhs != NULL) {
<a name="l01271"></a>01271 
<a name="l01272"></a>01272                 <span class="keywordflow">if</span> ((lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != NULL) &amp;&amp;
<a name="l01273"></a>01273                                 (lhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() != rhs-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>())) {
<a name="l01274"></a>01274                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>(<span class="stringliteral">&quot;Boxes do not match&quot;</span>);
<a name="l01275"></a>01275                 }
<a name="l01276"></a>01276 
<a name="l01277"></a>01277                 newCollator = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a>(*lhs);
<a name="l01278"></a>01278                 newCollator-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a2976605178012f7d9b23bca1d7f9beb4" title="Incorporate negation of a Collator subpaving to this summmary.">addNegatedPaving</a>(rhs, c);  <span class="comment">// uses a temp copy of rhs</span>
<a name="l01279"></a>01279             }
<a name="l01280"></a>01280         }
<a name="l01281"></a>01281         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01282"></a>01282             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01283"></a>01283                 <span class="keyword">delete</span> newCollator;
<a name="l01284"></a>01284                 newCollator = NULL;
<a name="l01285"></a>01285             }
<a name="l01286"></a>01286             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addPavings&quot;</span> &lt;&lt; endl;
<a name="l01287"></a>01287             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01288"></a>01288             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01289"></a>01289             <span class="keywordflow">throw</span>;
<a name="l01290"></a>01290         }
<a name="l01291"></a>01291         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01292"></a>01292             <span class="keywordflow">if</span> (newCollator != NULL) {
<a name="l01293"></a>01293                 <span class="keyword">delete</span> newCollator;
<a name="l01294"></a>01294                 newCollator = NULL;
<a name="l01295"></a>01295             }
<a name="l01296"></a>01296             <span class="keywordflow">throw</span>;
<a name="l01297"></a>01297         }
<a name="l01298"></a>01298 
<a name="l01299"></a>01299         <span class="keywordflow">return</span> newCollator;
<a name="l01300"></a>01300     }
<a name="l01301"></a>01301 
<a name="l01302"></a>01302     <span class="comment">// negates the summary for every node in tree rooted at this</span>
<a name="l01303"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61">01303</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">CollatorSPVnode::nodeNegate</a>(<span class="keywordtype">double</span> c) 
<a name="l01304"></a>01304    {
<a name="l01305"></a>01305       <span class="comment">// transform(summary.begin(), summary.end(), summary.begin(),</span>
<a name="l01306"></a>01306       <span class="comment">//                                negate&lt;double&gt;());</span>
<a name="l01307"></a>01307       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>.size(); i++) {  
<a name="l01308"></a>01308       <span class="keywordtype">double</span> temp = c * <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[i];
<a name="l01309"></a>01309       <span class="keywordflow">if</span> ( temp == -0) { temp = 0; }
<a name="l01310"></a>01310       summary[i] = temp;        
<a name="l01311"></a>01311     }
<a name="l01312"></a>01312 
<a name="l01313"></a>01313         <span class="comment">// recurse on children</span>
<a name="l01314"></a>01314         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01315"></a>01315         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01316"></a>01316     }
<a name="l01317"></a>01317     
<a name="l01318"></a>01318      <span class="comment">// incorporate the negative of a subpaving to this summmary,</span>
<a name="l01319"></a>01319     <span class="comment">// adjusts this summary for the contents of the subpaving added</span>
<a name="l01320"></a>01320     <span class="comment">// have not specifed const data for the CollatorSPnode pointer,</span>
<a name="l01321"></a>01321     <span class="comment">// because if we do that we can&#39;t expand it</span>
<a name="l01322"></a>01322     <span class="comment">// but note that the CollatorSPnode passed in CAN BE ALTERED</span>
<a name="l01323"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a2976605178012f7d9b23bca1d7f9beb4">01323</a>     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a2976605178012f7d9b23bca1d7f9beb4" title="Incorporate negation of a Collator subpaving to this summmary.">CollatorSPVnode::addNegatedPaving</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">double</span> c)
<a name="l01324"></a>01324     {
<a name="l01325"></a>01325         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* temp = NULL;
<a name="l01326"></a>01326 
<a name="l01327"></a>01327         <span class="keywordflow">try</span> {
<a name="l01328"></a>01328             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>* temp = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#afc907faf6fc53e9fdea4c6895e14a42c" title="default constructor.">CollatorSPVnode</a> (*spn);
<a name="l01329"></a>01329 
<a name="l01330"></a>01330             <span class="comment">// negate the node passed in</span>
<a name="l01331"></a>01331             temp-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a0c7ea11fa66829ec974813779c052c61" title="Negates the summary for every node in tree rooted at this.">nodeNegate</a>(c);
<a name="l01332"></a>01332 
<a name="l01333"></a>01333             <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#af01fff5efb1889862b36606bed10746a" title="Add paving with Vemp to collation.">addPavingWithVal</a>(temp);
<a name="l01334"></a>01334 
<a name="l01335"></a>01335             <span class="keyword">delete</span> temp;
<a name="l01336"></a>01336         }
<a name="l01337"></a>01337         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01338"></a>01338             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addNegatedPaving&quot;</span> &lt;&lt; endl;
<a name="l01339"></a>01339             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01340"></a>01340             std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01341"></a>01341             <span class="keywordflow">throw</span>;
<a name="l01342"></a>01342         }
<a name="l01343"></a>01343     }
<a name="l01344"></a>01344 
<a name="l01345"></a>01345     <span class="comment">// Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split </span>
<a name="l01346"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae3670805f36e313e7e541d57552d6b34">01346</a>     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae3670805f36e313e7e541d57552d6b34" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">CollatorSPVnode::getSplitNodePtrCSPV</a>(<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a> * &amp;splitCollNode, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> spn)
<a name="l01347"></a>01347     {
<a name="l01348"></a>01348   <span class="comment">//  cout &lt;&lt; &quot;getSplitNodePtrCSPV for: &quot; &lt;&lt;spn-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l01349"></a>01349     <span class="keywordtype">bool</span> retvalue=<span class="keyword">false</span>;
<a name="l01350"></a>01350     <span class="keywordtype">bool</span> done=<span class="keyword">false</span>;
<a name="l01351"></a>01351     <span class="comment">//cout &lt;&lt; &quot;done on top: &quot; &lt;&lt; done &lt;&lt; endl;</span>
<a name="l01352"></a>01352         
<a name="l01353"></a>01353     <span class="keywordflow">try</span> {
<a name="l01354"></a>01354       
<a name="l01355"></a>01355            <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a> == NULL) { done = <span class="keyword">true</span>;
<a name="l01356"></a>01356            retvalue = <span class="keyword">true</span>; } <span class="comment">// if there is no memory allocated to this pointer</span>
<a name="l01357"></a>01357           
<a name="l01358"></a>01358            <span class="keywordflow">else</span> {
<a name="l01359"></a>01359     <span class="comment">//         cout &lt;&lt; &quot;now looking at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01360"></a>01360         <span class="comment">//    cout &lt;&lt; &quot;done: &quot; &lt;&lt; done &lt;&lt; endl;     </span>
<a name="l01361"></a>01361           <span class="comment">//get the pointer to the CollatorSPVnode that was split</span>
<a name="l01362"></a>01362           <span class="keywordflow">if</span> ( !done &amp;&amp; spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() == <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() ){ 
<a name="l01363"></a>01363       <span class="comment">//      cout &lt;&lt; &quot;splitCollNode: &quot; &lt;&lt; spn-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; spn-&gt;getJustSplit() &lt;&lt; endl;</span>
<a name="l01364"></a>01364             splitCollNode = (&amp;(*this));
<a name="l01365"></a>01365             done = <span class="keyword">true</span>; 
<a name="l01366"></a>01366             retvalue = <span class="keyword">true</span>;
<a name="l01367"></a>01367           }
<a name="l01368"></a>01368              
<a name="l01369"></a>01369           <span class="comment">// if not done, recurse with children</span>
<a name="l01370"></a>01370           <span class="keywordflow">if</span> ( done == <span class="keyword">false</span> ) { 
<a name="l01371"></a>01371         <span class="comment">//    cout &lt;&lt; &quot;recursing with children&quot; &lt;&lt; endl;  </span>
<a name="l01372"></a>01372           <span class="comment">//  cout &lt;&lt; &quot;still not done &quot; &lt;&lt; !done &lt;&lt; endl;</span>
<a name="l01373"></a>01373             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>() != NULL&amp;&amp; retvalue == <span class="keyword">false</span>) {
<a name="l01374"></a>01374             retvalue = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae3670805f36e313e7e541d57552d6b34" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtrCSPV</a>(splitCollNode,                                 spn);
<a name="l01375"></a>01375           <span class="comment">//  cout &lt;&lt; &quot;retvalue for left: &quot; &lt;&lt; retvalue &lt;&lt; &quot;done: &quot; &lt;&lt; done &lt;&lt; endl;</span>
<a name="l01376"></a>01376             }
<a name="l01377"></a>01377             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>() != NULL &amp;&amp; retvalue == <span class="keyword">false</span>) {
<a name="l01378"></a>01378             retvalue = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ae3670805f36e313e7e541d57552d6b34" title="Get a CollatorSPVnode pointer to the corresponding SPSVnode that was split.">getSplitNodePtrCSPV</a>(splitCollNode,                              spn);
<a name="l01379"></a>01379             <span class="comment">//cout &lt;&lt; &quot;retvalue for right: &quot; &lt;&lt; retvalue &lt;&lt; &quot;done: &quot; &lt;&lt; done &lt;&lt; endl;</span>
<a name="l01380"></a>01380             } 
<a name="l01381"></a>01381           }
<a name="l01382"></a>01382         }
<a name="l01383"></a>01383       }
<a name="l01384"></a>01384         <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01385"></a>01385             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in getSplitNodePtrCSPV&quot;</span> &lt;&lt; endl;
<a name="l01386"></a>01386             <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = ba.what();
<a name="l01387"></a>01387             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01388"></a>01388             <span class="keywordflow">throw</span>;
<a name="l01389"></a>01389         }
<a name="l01390"></a>01390         
<a name="l01391"></a>01391         <span class="keywordflow">return</span> retvalue;
<a name="l01392"></a>01392     }
<a name="l01393"></a>01393 
<a name="l01394"></a>01394 
<a name="l01395"></a>01395     <span class="comment">// Find the nodes that fulfill the Scheffe condition for rows against </span>
<a name="l01396"></a>01396   <span class="comment">// columns in the Yatracos growing matrix. True if condition is fulfilled.</span>
<a name="l01397"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb">01397</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">CollatorSPVnode::getScheffeNode</a>(<span class="keywordtype">int</span> theta1, <span class="keywordtype">int</span> theta2)
<a name="l01398"></a>01398    { 
<a name="l01399"></a>01399      <span class="comment">//cout.precision(20);</span>
<a name="l01400"></a>01400      <span class="comment">//cout &lt;&lt; &quot;Checking for Scheffe set at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01401"></a>01401      <span class="comment">//cout &lt;&lt; &quot;Theta1: &quot; &lt;&lt; theta1 &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;Theta2: &quot; &lt;&lt; theta2 &lt;&lt; endl;     </span>
<a name="l01402"></a>01402      <span class="comment">//cout &lt;&lt; summary[theta1] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[theta2] &lt;&lt; endl;</span>
<a name="l01403"></a>01403      
<a name="l01404"></a>01404     <span class="comment">//check that this is an ordered pair theta1 &lt; theta2</span>
<a name="l01405"></a>01405     <span class="keywordflow">if</span> (theta1 &lt; theta2) {
<a name="l01406"></a>01406       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[theta1] &gt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[theta2])) {
<a name="l01407"></a>01407           <span class="comment">//cout &lt;&lt; getNodeName() &lt;&lt; &quot; is an element of the Scheffe set.****&quot; &lt;&lt; endl;</span>
<a name="l01408"></a>01408           <span class="keywordflow">return</span> <span class="keyword">true</span>;          
<a name="l01409"></a>01409       } 
<a name="l01410"></a>01410       <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01411"></a>01411     }
<a name="l01412"></a>01412     <span class="keywordflow">else</span> {
<a name="l01413"></a>01413       cerr &lt;&lt; <span class="stringliteral">&quot;theta1 must be less than theta2.&quot;</span> &lt;&lt; endl;
<a name="l01414"></a>01414       exit(0);
<a name="l01415"></a>01415     }
<a name="l01416"></a>01416    }    
<a name="l01417"></a>01417 
<a name="l01418"></a>01418    <span class="comment">// Find the nodes that fulfill the Scheffe condition for rows against </span>
<a name="l01419"></a>01419   <span class="comment">// columns in the Yatracos growing matrix. True if condition is fulfilled.</span>
<a name="l01420"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c">01420</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">CollatorSPVnode::nodeCheckRowSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k)
<a name="l01421"></a>01421    { 
<a name="l01422"></a>01422      <span class="comment">//out &lt;&lt; &quot;checking for Yat at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;</span>
<a name="l01423"></a>01423      <span class="comment">//cout &lt;&lt; &quot;theta: &quot; &lt;&lt; theta &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;k: &quot; &lt;&lt; k &lt;&lt; endl;     </span>
<a name="l01424"></a>01424      <span class="comment">//cout &lt;&lt; summary[theta] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[k] &lt;&lt; endl;</span>
<a name="l01425"></a>01425       
<a name="l01426"></a>01426       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[theta] &gt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[k])) {
<a name="l01427"></a>01427     <span class="comment">//cout &lt;&lt; &quot;height at &quot; &lt;&lt; theta &lt;&lt; &quot; larger than height at &quot; &lt;&lt; k &lt;&lt; endl;</span>
<a name="l01428"></a>01428             <span class="keywordflow">return</span> <span class="keyword">true</span>;          
<a name="l01429"></a>01429       } <span class="comment">// end of filling up rows</span>
<a name="l01430"></a>01430       <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01431"></a>01431    }   
<a name="l01432"></a>01432     
<a name="l01433"></a>01433    <span class="comment">// Find the nodes that fulfill the Scheffe condition for columns against </span>
<a name="l01434"></a>01434   <span class="comment">// rows in the Yatracos growing matrix. True if condition is fulfilled</span>
<a name="l01435"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60">01435</a>    <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">CollatorSPVnode::nodeCheckColSummary</a>(<span class="keywordtype">int</span> theta, <span class="keywordtype">int</span> k)
<a name="l01436"></a>01436    { 
<a name="l01437"></a>01437      <span class="comment">//cout &lt;&lt; &quot;checking for Yat at node: &quot; &lt;&lt; getNodeName() &lt;&lt; endl;     </span>
<a name="l01438"></a>01438       <span class="comment">//cout &lt;&lt; &quot;theta: &quot; &lt;&lt; theta &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;k: &quot; &lt;&lt; k &lt;&lt; endl;</span>
<a name="l01439"></a>01439       <span class="comment">//cout &lt;&lt; summary[theta] &lt;&lt; &quot;\t&quot; &lt;&lt; summary[k] &lt;&lt; endl;</span>
<a name="l01440"></a>01440       <span class="keywordflow">if</span> ((<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[k] &gt; <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[theta])) {
<a name="l01441"></a>01441     <span class="comment">//cout &lt;&lt; &quot;height at &quot; &lt;&lt; k &lt;&lt; &quot; larger than height at &quot; &lt;&lt; theta &lt;&lt; endl;</span>
<a name="l01442"></a>01442          <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l01443"></a>01443       }   
<a name="l01444"></a>01444     <span class="keywordflow">else</span> { <span class="keywordflow">return</span> <span class="keyword">false</span>; }    
<a name="l01445"></a>01445   }
<a name="l01446"></a>01446      
<a name="l01447"></a>01447    <span class="comment">// get delta for a specific theta</span>
<a name="l01448"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a1ebdb63b747d9c7a477b6ad86d58b714">01448</a>    <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a1ebdb63b747d9c7a477b6ad86d58b714" title="Get the delta value for a specific theta.">CollatorSPVnode::getNodeDelta</a>(<span class="keywordtype">int</span> thisTheta)
<a name="l01449"></a>01449    { 
<a name="l01450"></a>01450      <span class="comment">//cout &lt;&lt; &quot;get delta for &quot; &lt;&lt; nodeName &lt;&lt; &quot; at theta = &quot; &lt;&lt; thisTheta &lt;&lt; endl;</span>
<a name="l01451"></a>01451      <span class="comment">// get empirical measure of the training data</span>
<a name="l01452"></a>01452      <span class="keywordtype">double</span> muTrain = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad85d48d6c14888cc7d375f74b63c2f92" title="A container of summary values from the collated subpavings.">summary</a>[thisTheta] * <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>();
<a name="l01453"></a>01453      <span class="comment">//cout &lt;&lt; &quot;summary: &quot; &lt;&lt; summary[thisTheta] &lt;&lt; &quot;\t muTrain: &quot; &lt;&lt; muTrain &lt;&lt; endl;</span>
<a name="l01454"></a>01454       
<a name="l01455"></a>01455      <span class="comment">// get empirical measure of the validation data      </span>
<a name="l01456"></a>01456      <span class="comment">//cout &lt;&lt; &quot;muValid: &quot; &lt;&lt; getVemp() &lt;&lt; endl;</span>
<a name="l01457"></a>01457 
<a name="l01458"></a>01458      <span class="keywordtype">double</span> delta= muTrain - <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ac3cc6fb2f09dc7d6d99b52631fc4f60e" title="Accessor for the validation summary.">getVemp</a>();
<a name="l01459"></a>01459     <span class="comment">//cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; delta &lt;&lt; endl; </span>
<a name="l01460"></a>01460 
<a name="l01461"></a>01461      <span class="keywordflow">return</span> delta; 
<a name="l01462"></a>01462 
<a name="l01463"></a>01463    } <span class="comment">// end of function getNodeDelta</span>
<a name="l01464"></a>01464 
<a name="l01465"></a>01465 <span class="comment">//get the Yatracos set for a particular pair.</span>
<a name="l01466"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0bdf61f72d586c8944c076e310b3240">01466</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0bdf61f72d586c8944c076e310b3240" title="Get the Yatracos set for a particular pair.">CollatorSPVnode::getYatSet</a>(
<a name="l01467"></a>01467       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSetRow, 
<a name="l01468"></a>01468       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &amp; YatSetCol, 
<a name="l01469"></a>01469       <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2)
<a name="l01470"></a>01470 {
<a name="l01471"></a>01471   <span class="comment">//cout &lt;&lt; &quot;iterating through the leaves in candidate histograms&quot; &lt;&lt; endl;</span>
<a name="l01472"></a>01472   <span class="comment">//iterate through the leaves in both candidate histograms to get the </span>
<a name="l01473"></a>01473   <span class="comment">//Yatracos set</span>
<a name="l01474"></a>01474    <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01475"></a>01475       <span class="keywordtype">bool</span> rowInd = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a199762d07823cde9934100fb6d11228c" title="Find the node that fulfills the Yatracos condition by comparing the rows of the growing Yatracos matr...">nodeCheckRowSummary</a>(cand1, cand2);
<a name="l01476"></a>01476       <span class="comment">// insert the node YatSet if return true</span>
<a name="l01477"></a>01477     <span class="keywordflow">if</span> (rowInd) { 
<a name="l01478"></a>01478       <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; getNodeName() &lt;&lt; &quot; into YatSetRow&quot; &lt;&lt; endl; </span>
<a name="l01479"></a>01479       YatSetRow.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01480"></a>01480     }
<a name="l01481"></a>01481     <span class="keywordflow">else</span> {
<a name="l01482"></a>01482       <span class="keywordtype">bool</span> colInd = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a61360380c921f78c1ac9689ffe004c60" title="Find the node that fulfills the Yatracos condition by comparing the columns of the growing Yatracos m...">nodeCheckColSummary</a>(cand1, cand2);
<a name="l01483"></a>01483       <span class="keywordflow">if</span> (colInd) { 
<a name="l01484"></a>01484         <span class="comment">//cout &lt;&lt; &quot;inserting &quot; &lt;&lt; getNodeName() &lt;&lt; &quot; into YatSetCol&quot; &lt;&lt; endl; </span>
<a name="l01485"></a>01485         YatSetCol.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01486"></a>01486       }
<a name="l01487"></a>01487     }
<a name="l01488"></a>01488   }
<a name="l01489"></a>01489   <span class="comment">//recurse on the children</span>
<a name="l01490"></a>01490   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01491"></a>01491       <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0bdf61f72d586c8944c076e310b3240" title="Get the Yatracos set for a particular pair.">getYatSet</a>(YatSetRow, YatSetCol, cand1, cand2);
<a name="l01492"></a>01492   }
<a name="l01493"></a>01493   <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01494"></a>01494       <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ad0bdf61f72d586c8944c076e310b3240" title="Get the Yatracos set for a particular pair.">getYatSet</a>(YatSetRow, YatSetCol, cand1, cand2);
<a name="l01495"></a>01495   }
<a name="l01496"></a>01496   
<a name="l01497"></a>01497 } <span class="comment">// end of getYatset</span>
<a name="l01498"></a>01498 
<a name="l01499"></a>01499 <span class="comment">//get the Scheffe set for a particular pair.  </span>
<a name="l01500"></a><a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8d430b2bdfb2d8032e5d7f9e9bddb53d">01500</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8d430b2bdfb2d8032e5d7f9e9bddb53d" title="Get the Scheffe set for a particular pair.">CollatorSPVnode::getScheffeSet</a>(
<a name="l01501"></a>01501       <span class="keyword">set</span>&lt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>*, less&lt;CollatorSPVnode*&gt; &gt; &amp; ScheffeSet, 
<a name="l01502"></a>01502       <span class="keywordtype">size_t</span> cand1, <span class="keywordtype">size_t</span> cand2)
<a name="l01503"></a>01503 {
<a name="l01504"></a>01504   <span class="comment">//iterate through the leaves in both candidate histograms to get the </span>
<a name="l01505"></a>01505   <span class="comment">//Yatracos set</span>
<a name="l01506"></a>01506    <span class="keywordflow">if</span> (!(<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l01507"></a>01507       <span class="keywordtype">bool</span> ind = <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#ab134b9b98ed7b15b1cabb9eca1ced1eb" title="Find the node that fulfills the Scheffe set, f_theta1 &gt; f_theta2 for candidates f_theta1 and f_theta2...">getScheffeNode</a>(cand1, cand2);
<a name="l01508"></a>01508         <span class="comment">// insert the node YatSet if return true</span>
<a name="l01509"></a>01509     <span class="keywordflow">if</span> (ind) { 
<a name="l01510"></a>01510       ScheffeSet.insert(&amp;(*<span class="keyword">this</span>));
<a name="l01511"></a>01511     }
<a name="l01512"></a>01512   }
<a name="l01513"></a>01513     
<a name="l01514"></a>01514    <span class="comment">//recurse on the children</span>
<a name="l01515"></a>01515    <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()!=NULL) {
<a name="l01516"></a>01516          <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aeaea28b3b2d7ca59a28cd3fbb3438cce" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8d430b2bdfb2d8032e5d7f9e9bddb53d" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(ScheffeSet, cand1, cand2);
<a name="l01517"></a>01517    }
<a name="l01518"></a>01518    <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()!=NULL) {
<a name="l01519"></a>01519          <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#aaaa6264c4020a5e0ccfdedb19228fa2b" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml#a8d430b2bdfb2d8032e5d7f9e9bddb53d" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(ScheffeSet, cand1, cand2);
<a name="l01520"></a>01520    }
<a name="l01521"></a>01521 }
<a name="l01522"></a>01522 
<a name="l01523"></a>01523    <span class="comment">// ----------------- non member tools functions ----------------------</span>
<a name="l01524"></a>01524 
<a name="l01525"></a>01525     <span class="comment">//Output all boxes in collator</span>
<a name="l01526"></a><a class="code" href="namespacesubpavings.shtml#a6cbced3edaaea51ec4f60020f4b68410">01526</a>     std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l01527"></a>01527                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1CollatorSPVnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPVnode</a>&amp; spn)
<a name="l01528"></a>01528     {
<a name="l01529"></a>01529         os &lt;&lt; spn.<a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(os, 1) &lt;&lt; std::endl;
<a name="l01530"></a>01530         <span class="keywordflow">return</span> os;
<a name="l01531"></a>01531     }
<a name="l01532"></a>01532  
<a name="l01533"></a>01533     <span class="comment">// function for transform algorithm</span>
<a name="l01534"></a><a class="code" href="namespacesubpavings.shtml#a97b57336ffc5ebac59abfb36dbd5405b">01534</a>     <span class="keywordtype">double</span> <a class="code" href="namespacesubpavings.shtml#a97b57336ffc5ebac59abfb36dbd5405b" title="Negate a double.">opNegate</a>(<span class="keywordtype">double</span> d)
<a name="l01535"></a>01535     {
<a name="l01536"></a>01536         <span class="keywordflow">return</span> -d;
<a name="l01537"></a>01537     }
<a name="l01538"></a>01538 
<a name="l01539"></a>01539 } <span class="comment">// end namespace subpavings</span>
<a name="l01540"></a>01540 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="collatorspvnode_8cpp.shtml">collatorspvnode.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
