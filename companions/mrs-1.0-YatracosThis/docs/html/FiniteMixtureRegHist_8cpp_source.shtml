<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FiniteMixtureRegHist.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FiniteMixtureRegHist_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FiniteMixtureRegHist.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FiniteMixtureRegHist_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment"> * your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> * </span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// include header files</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>std;
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>cxsc;
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="FiniteMixtureRegHist_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00041</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00044"></a>00044   <span class="keywordflow">if</span> ( argc != 5 ) {
<a name="l00045"></a>00045     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix nBins&quot;</span> &lt;&lt; endl;
<a name="l00046"></a>00046     exit(0);
<a name="l00047"></a>00047   }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00050"></a>00050    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00051"></a>00051    <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
<a name="l00052"></a>00052    <span class="keywordtype">int</span> nBins = atoi(argv[4]); <span class="comment">//number of bins in the regular histogram</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054    
<a name="l00055"></a>00055    <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l00056"></a>00056   cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
<a name="l00057"></a>00057   <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l00058"></a>00058   
<a name="l00059"></a>00059    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00060"></a>00060    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00061"></a>00061    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00062"></a>00062    oss.precision(5);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="comment">//==============get distribution parameters==========================//</span>
<a name="l00065"></a>00065    <span class="comment">// read input from mix*.txt</span>
<a name="l00066"></a>00066    <span class="keywordtype">string</span> mixfileName;
<a name="l00067"></a>00067    mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00068"></a>00068   std::ostringstream stmMix;
<a name="l00069"></a>00069   stmMix &lt;&lt; mix;
<a name="l00070"></a>00070   mixfileName += stmMix.str();
<a name="l00071"></a>00071   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   ifstream infile(mixfileName.c_str());
<a name="l00074"></a>00074   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00075"></a>00075   <span class="keywordtype">double</span> W, M, V;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00078"></a>00078   vector&lt;double&gt; Weight;
<a name="l00079"></a>00079   vector&lt;double&gt; Mean;
<a name="l00080"></a>00080   vector&lt;double&gt; Sigma;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00083"></a>00083   ifstream file; <span class="comment">// create file for input</span>
<a name="l00084"></a>00084   file.open(mixfileName.c_str());
<a name="l00085"></a>00085   <span class="comment">// check if this file exists or not</span>
<a name="l00086"></a>00086   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00087"></a>00087     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00088"></a>00088          &lt;&lt; endl;
<a name="l00089"></a>00089     exit(1);
<a name="l00090"></a>00090   }
<a name="l00091"></a>00091   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00092"></a>00092     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00093"></a>00093     W=Weight1/Weight2;
<a name="l00094"></a>00094     Weight.push_back(W);
<a name="l00095"></a>00095     M=Mean1/Mean2;
<a name="l00096"></a>00096     Mean.push_back(M);
<a name="l00097"></a>00097     V=Var1/Var2;
<a name="l00098"></a>00098     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   Weight.pop_back();
<a name="l00101"></a>00101   Mean.pop_back();
<a name="l00102"></a>00102   Sigma.pop_back();
<a name="l00103"></a>00103   
<a name="l00104"></a>00104   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00105"></a>00105   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00106"></a>00106   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00107"></a>00107   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="comment">// ========prepare to generate some data for the tests ================//</span>
<a name="l00110"></a>00110     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00111"></a>00111     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00112"></a>00112     gsl_rng * r;
<a name="l00113"></a>00113     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00114"></a>00114     gsl_rng_env_setup();
<a name="l00115"></a>00115     T = gsl_rng_default;
<a name="l00116"></a>00116     r = gsl_rng_alloc (T);
<a name="l00117"></a>00117     gsl_rng_set(r, dataSeed);
<a name="l00118"></a>00118 
<a name="l00119"></a>00119    <span class="comment">//set up a random number generator for gaussian rvs</span>
<a name="l00120"></a>00120      <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00121"></a>00121      gsl_rng * r1;
<a name="l00122"></a>00122      gsl_rng_env_setup();
<a name="l00123"></a>00123      T1 = gsl_rng_default;
<a name="l00124"></a>00124      r1 = gsl_rng_alloc (T1);
<a name="l00125"></a>00125      gsl_rng_set(r1, dataSeed);
<a name="l00126"></a>00126      
<a name="l00127"></a>00127   <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
<a name="l00128"></a>00128   <span class="keywordtype">double</span> a=0, b=1;
<a name="l00129"></a>00129   vector&lt;double&gt; u;
<a name="l00130"></a>00130   <span class="keywordtype">int</span> j;
<a name="l00131"></a>00131   <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00132"></a>00132       u.push_back(gsl_ran_flat(r, a, b));
<a name="l00133"></a>00133   }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135   <span class="comment">// number of components</span>
<a name="l00136"></a>00136   <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00137"></a>00137   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="comment">// get cumulative sum of the weights</span>
<a name="l00140"></a>00140   <span class="keywordtype">double</span> WeightCum[comp];
<a name="l00141"></a>00141   <span class="comment">//initialize the array</span>
<a name="l00142"></a>00142   WeightCum[0] = Weight[0]; 
<a name="l00143"></a>00143   cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
<a name="l00144"></a>00144    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
<a name="l00145"></a>00145     WeightCum[j] = WeightCum[j-1] + Weight[j];
<a name="l00146"></a>00146   }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   <span class="comment">//Create mixture data using component densities that are normal.</span>
<a name="l00149"></a>00149   cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
<a name="l00150"></a>00150   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
<a name="l00151"></a>00151   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00152"></a>00152   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00153"></a>00153     <span class="comment">//find the number of members generated from each component.</span>
<a name="l00154"></a>00154     <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
<a name="l00155"></a>00155       <span class="keywordtype">int</span> ind=0;
<a name="l00156"></a>00156       cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
<a name="l00157"></a>00157       <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
<a name="l00158"></a>00158       cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
<a name="l00159"></a>00159       <span class="comment">//now generate the data</span>
<a name="l00160"></a>00160       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
<a name="l00161"></a>00161         rvector thisrv(1);
<a name="l00162"></a>00162         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
<a name="l00163"></a>00163         thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
<a name="l00164"></a>00164         theData.push_back(thisrv);
<a name="l00165"></a>00165       }
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="comment">//===============finish generating data============================//</span>
<a name="l00169"></a>00169 
<a name="l00170"></a>00170   <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00171"></a>00171   cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
<a name="l00172"></a>00172   <span class="comment">//sort the data first</span>
<a name="l00173"></a>00173   <span class="comment">// put the data into a list to sort the data</span>
<a name="l00174"></a>00174   <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
<a name="l00175"></a>00175   list&lt;rvector&gt; rvecList;
<a name="l00176"></a>00176   list&lt;rvector&gt;::iterator rvecListIt;
<a name="l00177"></a>00177   <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
<a name="l00178"></a>00178     rvector thisrv(1);
<a name="l00179"></a>00179     thisrv = *rvecIt;
<a name="l00180"></a>00180     rvecList.push_back(thisrv);
<a name="l00181"></a>00181   }
<a name="l00182"></a>00182   rvecList.sort(); <span class="comment">//sort the data</span>
<a name="l00183"></a>00183   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
<a name="l00184"></a>00184   <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
<a name="l00185"></a>00185   { 
<a name="l00186"></a>00186     rvector thisrv(1);
<a name="l00187"></a>00187     thisrv = *rvecListIt;
<a name="l00188"></a>00188     sortedData.push_back(thisrv);
<a name="l00189"></a>00189   }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="comment">//get the root box</span>
<a name="l00192"></a>00192   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist;
<a name="l00193"></a>00193   myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00194"></a>00194   ivector pavingBox = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
<a name="l00195"></a>00195   <span class="keywordtype">double</span> rootBoxVol = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <span class="comment">//make the regular histogram</span>
<a name="l00198"></a>00198   <span class="keywordtype">double</span> bw = rootBoxVol/(nBins*1.0);
<a name="l00199"></a>00199   cout &lt;&lt; <span class="stringliteral">&quot;Making a regular histogram with &quot;</span> &lt;&lt; nBins &lt;&lt; <span class="stringliteral">&quot; bins.&quot;</span> &lt;&lt; endl;
<a name="l00200"></a>00200   <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00201"></a>00201   <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   <span class="comment">//output histogram data to .txt file</span>
<a name="l00204"></a>00204   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00205"></a>00205   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00206"></a>00206   os.precision(5);
<a name="l00207"></a>00207 
<a name="l00208"></a>00208   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00209"></a>00209   outputFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00210"></a>00210   ostringstream stm;
<a name="l00211"></a>00211   stm &lt;&lt; mix;
<a name="l00212"></a>00212   outputFileName += stm.str();
<a name="l00213"></a>00213   outputFileName += <span class="stringliteral">&quot;RegHistOpt.txt&quot;</span>;
<a name="l00214"></a>00214   os.open(outputFileName.c_str());
<a name="l00215"></a>00215   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
<a name="l00216"></a>00216     os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
<a name="l00217"></a>00217   }
<a name="l00218"></a>00218   os &lt;&lt; flush;
<a name="l00219"></a>00219   os.close();
<a name="l00220"></a>00220   
<a name="l00221"></a>00221   std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   <span class="comment">// now make the regular histograms with the standarad bandwidths</span>
<a name="l00224"></a>00224   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00225"></a>00225     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00226"></a>00226     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00227"></a>00227     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00228"></a>00228     
<a name="l00229"></a>00229     outputFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00230"></a>00230     outputFileName += stm.str();
<a name="l00231"></a>00231     outputFileName += <span class="stringliteral">&quot;RegHistBW&quot;</span>;
<a name="l00232"></a>00232     ostringstream stm1;
<a name="l00233"></a>00233     stm1 &lt;&lt; bw;
<a name="l00234"></a>00234     outputFileName += stm1.str();
<a name="l00235"></a>00235     outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00236"></a>00236     os.open(outputFileName.c_str());
<a name="l00237"></a>00237     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
<a name="l00238"></a>00238       os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
<a name="l00239"></a>00239     }
<a name="l00240"></a>00240     os &lt;&lt; flush;
<a name="l00241"></a>00241     os.close();
<a name="l00242"></a>00242     std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00243"></a>00243     
<a name="l00244"></a>00244   }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 <span class="comment">// free the random number generator</span>
<a name="l00247"></a>00247 gsl_rng_free(r);
<a name="l00248"></a>00248 gsl_rng_free(r1);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="keywordflow">return</span> 0;
<a name="l00251"></a>00251 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FiniteMixtureRegHist_8cpp.shtml">FiniteMixtureRegHist.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
