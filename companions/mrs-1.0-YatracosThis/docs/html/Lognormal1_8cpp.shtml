<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Lognormal1.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Lognormal1_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Lognormal1.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="Lognormal1_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="Lognormal1_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="Lognormal1.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="Lognormal1_8cpp_source.shtml#l00038">38</a> of file <a class="el" href="Lognormal1_8cpp_source.shtml">Lognormal1.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogram_8cpp_source.shtml#l04402">subpavings::AdaptiveHistogram::getLognormalIntervalIAE()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01101">getRegHistLognormalIntervalIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01247">subpavings::AdaptiveHistogram::getRootLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00282">RegHist::heights</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00272">makeRegularHist()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01366">outputRegHistToTxt()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, and <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01913">subpavings::AdaptiveHistogram::prioritySplitWithSwitches()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
  <span class="keywordflow">if</span> ( argc != 4 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: Lognormal n dataSeed simNum&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[3]); <span class="comment">//which data set </span>
   <span class="keywordtype">int</span> d = 1;
  
   <span class="keywordtype">double</span> Tol = 1e-3; <span class="comment">// tolerance for root finding and integration routines</span>
  <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   std::ostringstream stm;
  stm &lt;&lt; simNum;
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);


  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
       rvector thisrv(1);
       thisrv[1] = gsl_ran_lognormal(r, 0, 1);
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
   }  <span class="comment">// data  should be in theData</span>
   

  <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
  <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;

  <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;

  <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;

  <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;

  <span class="comment">// containers for output needed</span>
  vector&lt;real&gt; IAEOpt;
  vector&lt;int&gt; NumLeafNodesOpt;
  
  real IAE1=100.0;
  <span class="keywordtype">int</span> NumLeafNodes1;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
  vector&lt;double&gt; Times1;

  real IAE2=100.0;
  <span class="keywordtype">int</span> NumLeafNodes2;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
  vector&lt;double&gt; Times2;

  real IAE3=100.0;
  <span class="keywordtype">int</span> NumLeafNodes3;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
   vector&lt;double&gt; Times3;
   
  real IAE4=100.0;
  <span class="keywordtype">int</span> NumLeafNodes4;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
  vector&lt;double&gt; Times4;

  <span class="comment">//do exhaustive PQ for steps of n*0.005</span>
  <span class="comment">// set up function objects for a priority split</span>
  <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
  <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
  <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;

  <span class="keywordtype">double</span> rootBoxVol = 0.0;
  ivector pavingBox;
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
  
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1; 
    successfulInsertion1= myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
    rootBoxVol = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
    pavingBox = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2; 
    successfulInsertion2= myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3; 
    successfulInsertion3= myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4; 
    successfulInsertion4= myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);

    <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
        &amp;&amp; successfulInsertion4) {

      <span class="keywordtype">int</span> finalK = int(i*0.005*n);
      cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

      <span class="keywordtype">size_t</span> maxLeafNodes = n;
      <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
      
      <span class="comment">// we want to check the timings for this</span>
      clock_t start, end;
      <span class="keywordtype">double</span> timing; 
      
      <span class="comment">// do the priority split for compCount</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit1 = myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times1.push_back(timing);
      
      <span class="comment">// do the priority split for compVol</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compVol,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times2.push_back(timing);
      
      <span class="comment">// do the priority split for compVol and remove empty boxes</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compVol,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times3.push_back(timing);
      
      <span class="comment">// do the priority split for compMassVol</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compArea,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times4.push_back(timing);

      <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
          &amp;&amp; successfulPQSplit4) {

        <span class="comment">//get the IAE</span>
        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE1: &quot;</span> &lt;&lt; endl;
        real midIAE1 = mid(myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
          cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
          IAE1 = midIAE1;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist1 = myHist1;
        }

        <span class="comment">//get the IAE</span>
        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE2: &quot;</span> &lt;&lt; endl;
        real midIAE2 = mid(myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
          cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
          IAE2 = midIAE2;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist2 = myHist2;
        }

        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE3: &quot;</span> &lt;&lt; endl;
        real midIAE3 = mid(myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
          cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
          IAE3 = midIAE3;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist3 = myHist3;
        }

        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE4: &quot;</span> &lt;&lt; endl;
        <span class="comment">//get the IAE</span>
        real midIAE4 = mid(myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">getLognormalIntervalIAE</a>(Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
          cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
          IAE4 = midIAE4;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist4 = myHist4;
        }
      } <span class="comment">// end of if(successfulPQSplit)</span>
    }<span class="comment">// end of if(successfulInsertion)</span>
  } <span class="comment">// end of iterating through different kn&#39;s</span>

  <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
    successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
    &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {

    <span class="comment">// keep the optimal IAEs</span>
    IAEOpt.push_back(IAE1); 
    IAEOpt.push_back(IAE2);
    IAEOpt.push_back(IAE3);
    IAEOpt.push_back(IAE4);
    
    <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
    NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
      
    <span class="comment">// output the optimal histograms</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="comment">// create a name for the file to output</span>
    <span class="keywordtype">string</span> fileName;
    fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistVolRemoveEmpty&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// output IAE, number of leaf nodes, times to file</span>
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;LognormalExhaustivePQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
      oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
        
    PQFileName = <span class="stringliteral">&quot;LognormalExhaustivePQOutputTimes&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
      oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times4[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  } <span class="comment">// end of successes</span>

<span class="comment">//=================end of exhaustive PQ=================================// </span>

<span class="comment">//==============Regular histogram==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
  <span class="comment">//sort the data first</span>
  <span class="comment">// put the data into a list to sort the data</span>
  <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
  list&lt;rvector&gt; rvecList;
  list&lt;rvector&gt;::iterator rvecListIt;
  <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
    rvector thisrv(1);
    thisrv = *rvecIt;
    rvecList.push_back(thisrv);
  }
  rvecList.sort(); <span class="comment">//sort the data</span>
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
  <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
  { 
    rvector thisrv(1);
    thisrv = *rvecListIt;
    sortedData.push_back(thisrv);
  }
  
  <span class="comment">//mae regular histograms with the 3 rules</span>
  cout &lt;&lt; <span class="stringliteral">&quot;=====Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
  vector&lt;real&gt; regHistIAE;
  vector&lt;int&gt; nBins;


  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
    cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
    <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
    cout &lt;&lt; <span class="stringliteral">&quot;Make regular hist:&quot;</span> &lt;&lt; endl;
    clock_t start, end;
    start = clock();
    <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
    end = clock();
    <span class="keywordtype">double</span> timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;

    nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
    cout &lt;&lt; <span class="stringliteral">&quot;get IAE&quot;</span> &lt;&lt; endl;
    start = clock();
    real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#ac2e78d0ba1f818d2e1a81b95544972d8">getRegHistLognormalIntervalIAE</a>(n, myRegHist, Tol, Deg));
    regHistIAE.push_back(midIAE);
    end = clock();
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    
    <span class="comment">// output the histogram</span>
    <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegBW&quot;</span>;
    ostringstream stm2;
    stm2 &lt;&lt; bw;
    fileName += stm2.str();
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(myRegHist, fileName);
  }

  <span class="comment">//make regular histograms with manual bandwidth</span>
  cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms with manual bandwidths==&quot;</span> &lt;&lt; endl;
   
  real regHistIAEM = 100;
  <a class="code" href="structRegHist.shtml">RegHist</a> regHistOpt;
   
   <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;
  <span class="comment">//maxLeafNodes = 500;</span>
  
  <span class="keywordtype">size_t</span> flagCheck = 0;
  
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= maxLeafNodes; i++) {
    <span class="keywordtype">double</span> bw = rootBoxVol/(i*1.0);
    cout &lt;&lt; <span class="stringliteral">&quot;Nbins: &quot;</span> &lt;&lt; i &lt;&lt; endl;
    <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;    
    <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
    cout &lt;&lt; <span class="stringliteral">&quot;get iae&quot;</span> &lt;&lt; endl;
    real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#ac2e78d0ba1f818d2e1a81b95544972d8">getRegHistLognormalIntervalIAE</a>(n, myRegHist, Tol, Deg));
    
    <span class="comment">// get the minimum IAE</span>
    <span class="keywordflow">if</span> ( midIAE &lt; regHistIAEM ) {
      cout &lt;&lt; midIAE &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; regHistIAEM &lt;&lt; endl;
      regHistIAEM = midIAE;
      regHistOpt = myRegHist;
    flagCheck = 0;
    }
    <span class="keywordflow">else</span> { 
      flagCheck++; 
      <span class="keywordflow">if</span> ( flagCheck &gt;= 50) { <span class="keywordflow">break</span>; }
    }
  }

  <span class="comment">// get the final IAE</span>
  nBins.push_back(regHistOpt.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
  regHistIAE.push_back(regHistIAEM);

  <span class="comment">// output the histogram to .txt</span>
  <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegOpt&quot;</span>;
  fileName += stm.str();
  fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
  <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(regHistOpt, fileName);


  <span class="comment">// output the IAEs</span>
  <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
  outputFileName = <span class="stringliteral">&quot;LognormalIAERegHist&quot;</span>;
  outputFileName += stm.str();
  outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  oss.open(outputFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; 4; i++) {
    oss &lt;&lt; regHistIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[i] &lt;&lt; endl;
  }
  oss &lt;&lt; flush;
  oss.close();  
  std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;


<span class="comment">// free the random number generator</span>
gsl_rng_free(r);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Lognormal1_8cpp.shtml">Lognormal1.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
