<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: ExSine.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ExSine_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">ExSine.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ExSine_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;<a class="code" href="ExampleFobjSine_8hpp.shtml">ExampleFobjSine.hpp</a>&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;<a class="code" href="ExampleFobjSineSum_8hpp.shtml">ExampleFobjSineSum.hpp</a>&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="ExampleFobjSinePI_8hpp.shtml">ExampleFobjSinePI.hpp</a>&quot;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="keyword">using namespace </span>std;
<a name="l00021"></a>00021 <span class="keyword">using namespace </span>subpavings;
<a name="l00022"></a>00022 
<a name="l00023"></a><a class="code" href="ExSine_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00023</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00024"></a>00024 {
<a name="l00025"></a>00025         <span class="comment">// To generate a file output</span>
<a name="l00026"></a>00026         ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00027"></a>00027         <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00028"></a>00028 
<a name="l00029"></a>00029             node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00030"></a>00030             std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the example&quot;</span>
<a name="l00031"></a>00031                     &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00032"></a>00032             os.close();
<a name="l00033"></a>00033         }
<a name="l00034"></a>00034         <span class="keywordflow">else</span> {
<a name="l00035"></a>00035             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00036"></a>00036                 &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00037"></a>00037         }
<a name="l00038"></a>00038 }
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="ExSine_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00040</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     real tolerance = 0.05;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="keywordtype">string</span> filenameRoot = <span class="stringliteral">&quot;ExSine&quot;</span>;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     cout &lt;&lt; <span class="stringliteral">&quot;\nExSine\n&quot;</span> &lt;&lt; endl;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keywordtype">int</span> dims = 1;
<a name="l00050"></a>00050     ivector pavingBox(dims);
<a name="l00051"></a>00051     interval pavingInterval(-2,2);
<a name="l00052"></a>00052     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <span class="keywordtype">int</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 1;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRootSquare;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keywordflow">for</span> (f = 1; f &lt; 6; f+=2) {
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRoot(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063         <a class="code" href="classExampleMappedFobjSine.shtml">ExampleMappedFobjSine</a> realF(2*f);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, tolerance);
<a name="l00066"></a>00066 
<a name="l00067"></a>00067         nodeRoot.<a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(expander);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069         std::ostringstream stm;
<a name="l00070"></a>00070         stm &lt;&lt; filenameRoot &lt;&lt; <span class="stringliteral">&quot;_f&quot;</span> &lt;&lt; f &lt;&lt; <span class="stringliteral">&quot;_pt_&quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_double(tolerance)*100) &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00071"></a>00071         <span class="keywordtype">string</span> filename = stm.str();
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRoot);
<a name="l00074"></a>00074 
<a name="l00075"></a>00075         real mult(4.0/(f*<a class="code" href="FShiryaev1D_8hpp.shtml#a598a3330b3c21701223ee0ca14316eca">PI</a>));
<a name="l00076"></a>00076 
<a name="l00077"></a>00077         nodeRoot *= mult;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         nodeRootSquare += nodeRoot;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         stm.str(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00082"></a>00082         stm &lt;&lt; filenameRoot &lt;&lt; <span class="stringliteral">&quot;_f&quot;</span> &lt;&lt; f &lt;&lt; <span class="stringliteral">&quot;_square_pt_&quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_double(tolerance)*100) &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00083"></a>00083         filename = stm.str();
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRootSquare);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="keywordflow">for</span> (f=f; f &lt; 20; f+=2) {
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRoot(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         <a class="code" href="classExampleMappedFobjSine.shtml">ExampleMappedFobjSine</a> realF(2*f);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, tolerance);
<a name="l00097"></a>00097 
<a name="l00098"></a>00098         nodeRoot.<a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(expander);
<a name="l00099"></a>00099 
<a name="l00100"></a>00100         real mult(4.0/(f*<a class="code" href="FShiryaev1D_8hpp.shtml#a598a3330b3c21701223ee0ca14316eca">PI</a>));
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         nodeRoot *= mult;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         nodeRootSquare += nodeRoot;
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107     f-=2;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     std::ostringstream stm;
<a name="l00110"></a>00110     stm &lt;&lt; filenameRoot &lt;&lt; <span class="stringliteral">&quot;_f&quot;</span> &lt;&lt; f &lt;&lt; <span class="stringliteral">&quot;_square_pt_&quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_double(tolerance)*100) &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00111"></a>00111     <span class="keywordtype">string</span> filename = stm.str();
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRootSquare);
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="comment">// do the mapped subpaving for the whole function</span>
<a name="l00116"></a>00116     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRootOverall(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <a class="code" href="classExampleMappedFobjSineSum.shtml">ExampleMappedFobjSineSum</a> realFOverall(f);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realFOverall, tolerance);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     nodeRootOverall.<a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(expander);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     stm.str(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00125"></a>00125     stm &lt;&lt; filenameRoot &lt;&lt; <span class="stringliteral">&quot;_f&quot;</span> &lt;&lt; f &lt;&lt; <span class="stringliteral">&quot;_overall_pt_&quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_double(tolerance)*100) &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00126"></a>00126     filename = stm.str();
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRootOverall);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="comment">// calculate the absolute difference of nodeRootSquare and nodeRootOverall</span>
<a name="l00131"></a>00131     real diff = nodeRootSquare.absDiff(nodeRootOverall);
<a name="l00132"></a>00132     std::cout &lt;&lt; <span class="stringliteral">&quot;Absolute difference is &quot;</span> &lt;&lt; diff &lt;&lt; std::endl;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="comment">// look at the difference between nodeRootSquare and nodeRootOverall</span>
<a name="l00135"></a>00135     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeRootOverallDifference = nodeRootSquare - nodeRootOverall;
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     stm.str(<span class="stringliteral">&quot;&quot;</span>);
<a name="l00138"></a>00138     stm &lt;&lt; filenameRoot &lt;&lt; <span class="stringliteral">&quot;_f&quot;</span> &lt;&lt; f &lt;&lt; <span class="stringliteral">&quot;_difference_pt_&quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(_double(tolerance)*100) &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00139"></a>00139     filename = stm.str();
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeRootOverallDifference);
<a name="l00142"></a>00142 
<a name="l00143"></a>00143     <span class="keywordflow">return</span> 0;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ExSine_8cpp.shtml">ExSine.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
