<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOutFinMix.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOutFinMix_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">HoldOutFinMix.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="HoldOutFinMix_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// to use std::vector</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="comment">// to use iterators</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00030"></a>00030 <span class="comment">// to use valarray</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include&lt;map&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;boost/math/distributions/normal.hpp&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">using namespace </span>cxsc;
<a name="l00049"></a>00049 <span class="keyword">using namespace </span>std;
<a name="l00050"></a>00050 <span class="keyword">using</span> boost::math::normal;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// structure for the mixture model</span>
<a name="l00053"></a>00053 <span class="keyword">struct </span><a class="code" href="structFinMix.shtml">FinMix</a> {
<a name="l00054"></a>00054   vector&lt;double&gt; W;
<a name="l00055"></a>00055   vector&lt;double&gt; M;
<a name="l00056"></a>00056   vector&lt;double&gt; S;
<a name="l00057"></a>00057   <span class="keywordtype">double</span> fhat;
<a name="l00058"></a>00058 };
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">//function declaration</span>
<a name="l00063"></a>00063 <span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00066"></a>00066 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00067"></a>00067 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00068"></a>00068 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00069"></a>00069 
<a name="l00072"></a>00072 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span>, <span class="keywordtype">void</span>*);
<a name="l00073"></a>00073 <span class="keyword">inline</span> dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00074"></a>00074 <span class="keyword">inline</span> dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, vector&lt;double&gt;, vector&lt;double&gt;, vector&lt;double&gt;);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">//-----------------------start of main programme--------------------------------</span>
<a name="l00077"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00077</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv) {
<a name="l00078"></a>00078 
<a name="l00079"></a>00079  <span class="comment">//--------------------generate data---------------------------------------------</span>
<a name="l00080"></a>00080   <span class="comment">//-----read in parameters of the mixture to use</span>
<a name="l00081"></a>00081   <span class="comment">//user-input Kn and which dataset to use</span>
<a name="l00082"></a>00082   <span class="keywordtype">int</span> mix = atoi(argv[1]);
<a name="l00083"></a>00083   <span class="keywordtype">int</span> D=atoi(argv[2]);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085   <span class="comment">// Read mixture file</span>
<a name="l00086"></a>00086   <span class="keywordtype">string</span> mixfileName;
<a name="l00087"></a>00087   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00088"></a>00088   std::ostringstream stm1;
<a name="l00089"></a>00089   stm1 &lt;&lt; mix;
<a name="l00090"></a>00090   mixfileName += stm1.str();
<a name="l00091"></a>00091   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00092"></a>00092   ifstream infile(mixfileName.c_str());
<a name="l00093"></a>00093   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00094"></a>00094   <span class="keywordtype">double</span> W, M, V;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <span class="comment">//create vectors for Weight, Mean, Sigma</span>
<a name="l00097"></a>00097   vector&lt;double&gt; Weight;
<a name="l00098"></a>00098   vector&lt;double&gt; Mean;
<a name="l00099"></a>00099   vector&lt;double&gt; Sigma;
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   <span class="comment">//read file</span>
<a name="l00102"></a>00102   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00103"></a>00103     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00104"></a>00104     W=Weight1/Weight2;
<a name="l00105"></a>00105     Weight.push_back(W);
<a name="l00106"></a>00106     M=Mean1/Mean2;
<a name="l00107"></a>00107     Mean.push_back(M);
<a name="l00108"></a>00108     V=Var1/Var2;
<a name="l00109"></a>00109     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00110"></a>00110   }
<a name="l00111"></a>00111   Weight.pop_back();
<a name="l00112"></a>00112   Mean.pop_back();
<a name="l00113"></a>00113   Sigma.pop_back();
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">//get number of components in mixture</span>
<a name="l00116"></a>00116   <span class="keywordtype">int</span> Ncomp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00117"></a>00117   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Ncomp &lt;&lt; <span class="stringliteral">&quot; components in mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">// put the parameters as data members of the structure</span>
<a name="l00120"></a>00120   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00121"></a>00121   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123   <span class="comment">//----------------get data from FinMixGen------------------------------------</span>
<a name="l00124"></a>00124   <span class="comment">//create a name for the file of random variates.</span>
<a name="l00125"></a>00125   <span class="keywordtype">string</span> samplesfileName;
<a name="l00126"></a>00126   samplesfileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
<a name="l00127"></a>00127   std::ostringstream stm2;
<a name="l00128"></a>00128   stm2 &lt;&lt; D;
<a name="l00129"></a>00129   samplesfileName += stm1.str();
<a name="l00130"></a>00130   samplesfileName += stm2.str();
<a name="l00131"></a>00131   samplesfileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00132"></a>00132   cout &lt;&lt; <span class="stringliteral">&quot;Reading data from file &quot;</span> &lt;&lt; samplesfileName  &lt;&lt; endl;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134    <span class="comment">//a container for the data</span>
<a name="l00135"></a>00135    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;
<a name="l00136"></a>00136     <span class="comment">// we can read rvectors as strings in c-xsc format and then convert to rvectors with c-xsc::&gt;&gt;</span>
<a name="l00137"></a>00137     <span class="comment">//set up the file and read input line by line</span>
<a name="l00138"></a>00138     <span class="comment">// we need to convert the string argument to a c-string for ifstream</span>
<a name="l00139"></a>00139         ifstream samplesfileName(s.c_str());
<a name="l00140"></a>00140         <span class="keywordtype">int</span> dim = 0; <span class="comment">// dimensions, to be assessed from the file</span>
<a name="l00141"></a>00141         <span class="keywordtype">int</span> howMany = 0; <span class="comment">// how many datapoints, to be read from file</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143         <span class="keywordtype">string</span> line;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <span class="keywordflow">if</span> (dataFile.is_open())
<a name="l00146"></a>00146         {
<a name="l00147"></a>00147             getline (dataFile,line); <span class="comment">// get the first line from the file</span>
<a name="l00148"></a>00148 
<a name="l00149"></a>00149             <span class="keywordflow">if</span>(line.empty()) { <span class="comment">// if no characters extracted</span>
<a name="l00150"></a>00150                 std::cout
<a name="l00151"></a>00151                     &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
<a name="l00152"></a>00152                     &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt: &quot;</span>
<a name="l00153"></a>00153                     &lt;&lt; <span class="stringliteral">&quot;nothing in input file&quot;</span> &lt;&lt; std::endl;
<a name="l00154"></a>00154                 dataFile.close();
<a name="l00155"></a>00155                 cancontinue = <span class="keyword">false</span>;
<a name="l00156"></a>00156             }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158         }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160         <span class="keywordflow">else</span> { <span class="comment">// dataFile not open</span>
<a name="l00161"></a>00161             std::cout &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
<a name="l00162"></a>00162                 &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt.&quot;</span>
<a name="l00163"></a>00163                 &lt;&lt; <span class="stringliteral">&quot;Unable to open file&quot;</span> &lt;&lt; std::endl;
<a name="l00164"></a>00164             cancontinue = <span class="keyword">false</span>;
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         <span class="keywordflow">if</span> (cancontinue) {
<a name="l00168"></a>00168 
<a name="l00169"></a>00169             <span class="comment">//  find the number of blocks of numbers with decimal points</span>
<a name="l00170"></a>00170             <span class="comment">// countNumbers will return 0 if the line contains illegal</span>
<a name="l00171"></a>00171             <span class="comment">// characters or any number is missing its decimal point</span>
<a name="l00172"></a>00172 
<a name="l00173"></a>00173             dim = <a class="code" href="namespacesubpavings.shtml#a4160d2d9f357dddf86d43f70c9bb8063" title="Find the number of &#39;blocks&#39; of numbers in a properly formatted string of numbers.">countNumbers</a>(line);
<a name="l00174"></a>00174             <span class="keywordflow">while</span> (dim == 0 &amp;&amp; dataFile.good()) { <span class="comment">// problem try next line</span>
<a name="l00175"></a>00175                 getline(dataFile, line);
<a name="l00176"></a>00176                 dim = <a class="code" href="namespacesubpavings.shtml#a4160d2d9f357dddf86d43f70c9bb8063" title="Find the number of &#39;blocks&#39; of numbers in a properly formatted string of numbers.">countNumbers</a>(line);
<a name="l00177"></a>00177             }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179             <span class="keywordflow">if</span> (dim == 0) {     <span class="comment">// failed to find a valid line</span>
<a name="l00180"></a>00180                 std::cout &lt;&lt; <span class="stringliteral">&quot;Error in &quot;</span>
<a name="l00181"></a>00181                     &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::readRvectorsFromTxt: &quot;</span>
<a name="l00182"></a>00182                     &lt;&lt; <span class="stringliteral">&quot;all lines of input file contain illegal &quot;</span>
<a name="l00183"></a>00183                     &lt;&lt; <span class="stringliteral">&quot;formatting&quot;</span> &lt;&lt; std::endl;
<a name="l00184"></a>00184                 dataFile.close();
<a name="l00185"></a>00185                 cancontinue = <span class="keyword">false</span>;
<a name="l00186"></a>00186             }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188             <span class="comment">// dim now becomes the number of dimensions we expect</span>
<a name="l00189"></a>00189         }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="comment">// if there is already data, check dimensions match</span>
<a name="l00192"></a>00192         <span class="keywordflow">if</span> (cancontinue &amp;&amp; !theData.empty()) {
<a name="l00193"></a>00193 
<a name="l00194"></a>00194             <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00195"></a>00195             <span class="keywordtype">int</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theData.begin()) -
<a name="l00196"></a>00196                 <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theData.begin()) + 1;
<a name="l00197"></a>00197             <span class="keywordflow">if</span> (dim != dataDim) {
<a name="l00198"></a>00198                 std::cout
<a name="l00199"></a>00199                     &lt;&lt; <span class="stringliteral">&quot;Existing data different &quot;</span>
<a name="l00200"></a>00200                     &lt;&lt; <span class="stringliteral">&quot;dimension to data to be read in &quot;</span>
<a name="l00201"></a>00201                     &lt;&lt; <span class="stringliteral">&quot;- aborting read&quot;</span>
<a name="l00202"></a>00202                     &lt;&lt; std::endl;
<a name="l00203"></a>00203                 dataFile.close();
<a name="l00204"></a>00204                 cancontinue = <span class="keyword">false</span>;
<a name="l00205"></a>00205             }
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="keywordflow">if</span> (cancontinue) {
<a name="l00209"></a>00209 
<a name="l00210"></a>00210             dataFile.clear(); <span class="comment">// reset the flags on the file</span>
<a name="l00211"></a>00211             dataFile.seekg(0, ios::beg); <span class="comment">// and put file pointer to start</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213             rvector r(dim);
<a name="l00214"></a>00214 
<a name="l00215"></a>00215             <span class="comment">// count the lines in the file</span>
<a name="l00216"></a>00216             <span class="keywordflow">while</span> (dataFile.good() )
<a name="l00217"></a>00217             {
<a name="l00218"></a>00218                 getline (dataFile,line);
<a name="l00219"></a>00219                 howMany++;  <span class="comment">// count number of lines in the file</span>
<a name="l00220"></a>00220             }
<a name="l00221"></a>00221 
<a name="l00222"></a>00222             theData.reserve(howMany);
<a name="l00223"></a>00223 
<a name="l00224"></a>00224             dataFile.clear(); <span class="comment">// reset the flags on the file</span>
<a name="l00225"></a>00225             dataFile.seekg(0, ios::beg); <span class="comment">// and put file pointer to start</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227             <span class="keywordtype">int</span> countIn = 0;
<a name="l00228"></a>00228             <span class="keywordtype">int</span> countLines = 0;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230             <span class="keywordflow">while</span> (dataFile.good() )
<a name="l00231"></a>00231             {
<a name="l00232"></a>00232                 <span class="comment">// get from the file line by line</span>
<a name="l00233"></a>00233                 getline (dataFile, line);
<a name="l00234"></a>00234                 countLines++;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00237"></a>00237                 <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#af62c725dd362922c15d45983e2d8f6cf" title="A quick check on a data string: expecting only numbers white space or decimal points.">checkString</a>(line, dim)) { <span class="comment">// quick validity check</span>
<a name="l00238"></a>00238 
<a name="l00239"></a>00239                     <span class="comment">// could replace all this by checking if sin is true (good)</span>
<a name="l00240"></a>00240                     <span class="comment">// since it will not be if failed to convert input to r</span>
<a name="l00241"></a>00241                     <span class="comment">// but should check this before implementing</span>
<a name="l00242"></a>00242 
<a name="l00243"></a>00243                     <span class="comment">// convert to an istream type</span>
<a name="l00244"></a>00244                     istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line);
<a name="l00245"></a>00245                     <span class="comment">// c-xsc can convert this to an rvector</span>
<a name="l00246"></a>00246                     sin &gt;&gt; r;
<a name="l00247"></a>00247                     <span class="comment">// put r into the container</span>
<a name="l00248"></a>00248                     theData.push_back(r);
<a name="l00249"></a>00249                     countIn++;
<a name="l00250"></a>00250                 }
<a name="l00251"></a>00251                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (line != <span class="stringliteral">&quot;&quot;</span>) {  <span class="comment">// invalid line, spit out</span>
<a name="l00252"></a>00252                     std::cout &lt;&lt; <span class="stringliteral">&quot;Error in data input file, &quot;</span>
<a name="l00253"></a>00253                         &lt;&lt; <span class="stringliteral">&quot;ignored line &quot;</span> &lt;&lt; countLines
<a name="l00254"></a>00254                         &lt;&lt; <span class="stringliteral">&quot;.  Data ignored is:  &quot;</span>
<a name="l00255"></a>00255                         &lt;&lt; line &lt;&lt; std::endl;
<a name="l00256"></a>00256                     <span class="comment">// better make this output to an input error</span>
<a name="l00257"></a>00257                     <span class="comment">//log txt file?</span>
<a name="l00258"></a>00258                 }
<a name="l00259"></a>00259             }
<a name="l00260"></a>00260             dataFile.close();
<a name="l00261"></a>00261 
<a name="l00262"></a>00262             <span class="comment">// confirm the amount of data read in</span>
<a name="l00263"></a>00263             std::cout &lt;&lt; <span class="stringliteral">&quot;End of reading data input file: &quot;</span>
<a name="l00264"></a>00264                 &lt;&lt; countIn &lt;&lt; <span class="stringliteral">&quot; valid data points read in&quot;</span>
<a name="l00265"></a>00265                 &lt;&lt; std::endl;
<a name="l00266"></a>00266 
<a name="l00267"></a>00267             <span class="keywordflow">if</span> (countIn &gt; 0) retValue = <span class="keyword">true</span>; <span class="comment">// some data successfully read in</span>
<a name="l00268"></a>00268         }
<a name="l00269"></a>00269    
<a name="l00270"></a>00270    
<a name="l00271"></a>00271    
<a name="l00272"></a>00272    
<a name="l00273"></a>00273    
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276    <span class="comment">//--------------start priorityStageSplit-----------------------------------</span>
<a name="l00277"></a>00277     <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00278"></a>00278     ivector pavingBox(1);
<a name="l00279"></a>00279     interval dim(-10,10);
<a name="l00280"></a>00280     pavingBox[1] = dim;
<a name="l00281"></a>00281     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00282"></a>00282   
<a name="l00283"></a>00283     <span class="comment">//maximum number of points in each leaf box        </span>
<a name="l00284"></a>00284     <span class="keywordtype">int</span> finalK = 2;
<a name="l00285"></a>00285     <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(finalK);
<a name="l00286"></a>00286     <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l00287"></a>00287        
<a name="l00288"></a>00288    <span class="comment">// now split with priority queue</span>
<a name="l00289"></a>00289    <span class="comment">// Stopping Criteria: critCount</span>
<a name="l00290"></a>00290     <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
<a name="l00291"></a>00291     <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00292"></a>00292     cout &lt;&lt; <span class="stringliteral">&quot;Max k is &quot;</span> &lt;&lt; finalK &lt;&lt; endl; 
<a name="l00293"></a>00293     cout &lt;&lt; <span class="stringliteral">&quot;Performing hold-out estimation: &quot;</span> &lt;&lt; endl;
<a name="l00294"></a>00294    
<a name="l00295"></a>00295    <span class="comment">// put the data from the container into the histogram</span>
<a name="l00296"></a>00296     cout &lt;&lt; <span class="stringliteral">&quot;Put data into the histogram&quot;</span> &lt;&lt; endl;
<a name="l00297"></a>00297    
<a name="l00298"></a>00298    <span class="comment">// indicators</span>
<a name="l00299"></a>00299     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00300"></a>00300     <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00301"></a>00301   
<a name="l00302"></a>00302    <span class="comment">//number of points to be hold out is by brute force at the moment. Consider putting in as argument.</span>
<a name="l00303"></a>00303     successfulInsertion = myHist.insertFromRVecForHoldOut(theData, sn, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00304"></a>00304     <span class="comment">//successfulInsertion = myHist.insertFromRVecForHoldOut(theData, splitK, NOLOG);</span>
<a name="l00305"></a>00305  
<a name="l00306"></a>00306   <span class="comment">// optional output for number of leaves</span>
<a name="l00307"></a>00307     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00308"></a>00308   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00309"></a>00309   myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l00310"></a>00310   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00311"></a>00311   <span class="comment">// a container for the counts</span>
<a name="l00312"></a>00312   <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l00313"></a>00313                             <span class="comment">// the iterator is typedefed as IntVecItr</span>
<a name="l00314"></a>00314           <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00315"></a>00315         <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00316"></a>00316             <span class="comment">// get the counts in all the leaves</span>
<a name="l00317"></a>00317         cout &lt;&lt; <span class="stringliteral">&quot;Counter \t VCounter\n&quot;</span> &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; (*it)-&gt;getVcounter() &lt;&lt; endl;
<a name="l00318"></a>00318       }
<a name="l00319"></a>00319    <span class="comment">// end of optional output</span>
<a name="l00320"></a>00320    
<a name="l00321"></a>00321    <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
<a name="l00322"></a>00322        <span class="comment">//create an AdaptiveHistogramCollator object</span>
<a name="l00323"></a>00323        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l00324"></a>00324     
<a name="l00325"></a>00325        <span class="comment">//start the clock</span>
<a name="l00326"></a>00326        clock_t start, end;
<a name="l00327"></a>00327        start = clock();
<a name="l00328"></a>00328        
<a name="l00329"></a>00329        <span class="comment">//start the hold out estimation</span>
<a name="l00330"></a>00330        coll=myHist.priorityStageSplit(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0, 0.0);
<a name="l00331"></a>00331 
<a name="l00332"></a>00332        <span class="comment">//output time taken</span>
<a name="l00333"></a>00333        end = clock();
<a name="l00334"></a>00334        <span class="keywordtype">double</span> timing;
<a name="l00335"></a>00335        timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00336"></a>00336        cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00337"></a>00337  
<a name="l00338"></a>00338       <span class="comment">//cout &lt;&lt; coll &lt;&lt; endl;</span>
<a name="l00339"></a>00339       <span class="keywordtype">int</span> numberCollated = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();
<a name="l00340"></a>00340       cout &lt;&lt; numberCollated &lt;&lt; <span class="stringliteral">&quot; histograms collated.&quot;</span> &lt;&lt; endl;
<a name="l00341"></a>00341       <span class="comment">//output the collator to a .txt file</span>
<a name="l00342"></a>00342       <span class="comment">//coll.outputToTxtTabs(&quot;TestHold.txt&quot;); </span>
<a name="l00343"></a>00343     } <span class="comment">// end of successful insertion</span>
<a name="l00344"></a>00344    
<a name="l00345"></a>00345    
<a name="l00346"></a>00346   
<a name="l00347"></a>00347         <span class="comment">//-----get IAE of this histogram</span>
<a name="l00348"></a>00348         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00349"></a>00349         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l00350"></a>00350         myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l00351"></a>00351         <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00352"></a>00352 
<a name="l00353"></a>00353         <span class="comment">// a container for the counts</span>
<a name="l00354"></a>00354         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l00355"></a>00355                             <span class="comment">// the iterator is typedefed as IntVecItr</span>
<a name="l00356"></a>00356         <span class="comment">// a container for the boxes</span>
<a name="l00357"></a>00357         vector&lt;ivector&gt; boxes;
<a name="l00358"></a>00358         vector&lt;ivector&gt;::iterator itBoxes;
<a name="l00359"></a>00359         <span class="comment">// a container for the volumes</span>
<a name="l00360"></a>00360         vector&lt;double&gt; volumes;
<a name="l00361"></a>00361        <span class="comment">// a valarray container for the node levels, sized to fit</span>
<a name="l00362"></a>00362         valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()));
<a name="l00363"></a>00363        <span class="comment">// a container for fhat</span>
<a name="l00364"></a>00364        vector&lt;double&gt; fhat;
<a name="l00365"></a>00365        vector&lt;double&gt;::iterator itFhat;
<a name="l00366"></a>00366        <span class="comment">// a container for Fstar</span>
<a name="l00367"></a>00367        vector&lt;double&gt; Fstar;
<a name="l00368"></a>00368 
<a name="l00369"></a>00369        <span class="keywordtype">double</span> diffMu = 0;
<a name="l00370"></a>00370 
<a name="l00371"></a>00371        <span class="keywordtype">int</span> v=0;
<a name="l00372"></a>00372        <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l00373"></a>00373   <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l00374"></a>00374   <span class="comment">// get the counts in all the leaves</span>
<a name="l00375"></a>00375   counts.push_back((*it)-&gt;getCounter());
<a name="l00376"></a>00376   <span class="comment">// get the boxes from all the leaves</span>
<a name="l00377"></a>00377   boxes.push_back((*it)-&gt;getBox());
<a name="l00378"></a>00378   <span class="comment">// get the volumes of all the leaves</span>
<a name="l00379"></a>00379   volumes.push_back((*it)-&gt;nodeVolume());
<a name="l00380"></a>00380   <span class="comment">// get the levels of the leaves</span>
<a name="l00381"></a>00381   levels[v] = (*it)-&gt;getNodeDepth();
<a name="l00382"></a>00382   <span class="comment">// get fhat for all leaves</span>
<a name="l00383"></a>00383   fhat.push_back(((*it)-&gt;getCounter())/((*it)-&gt;nodeVolume())/n);
<a name="l00384"></a>00384                 v++;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386         rvector xuppVec = Sup((*it)-&gt;getBox());
<a name="l00387"></a>00387         <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00388"></a>00388         rvector xlowVec = Inf((*it)-&gt;getBox());
<a name="l00389"></a>00389         <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00390"></a>00390         <span class="keywordtype">double</span> CDF=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
<a name="l00391"></a>00391         Fstar.push_back(CDF);
<a name="l00392"></a>00392         } <span class="comment">// end of looping through leaves</span>
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 <span class="comment">//get IAE</span>
<a name="l00395"></a>00395 dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00396"></a>00396 dpIAE = 0.0;
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
<a name="l00399"></a>00399 cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; Nbin &lt;&lt; <span class="stringliteral">&quot; leaves in histogram &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l00400"></a>00400 
<a name="l00401"></a>00401 gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l00402"></a>00402 <span class="keywordtype">double</span> result = 0.0;
<a name="l00403"></a>00403 <span class="keywordtype">double</span> error;
<a name="l00404"></a>00404 gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l00405"></a>00405 F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00406"></a>00406 F.params =  &amp;mixt;
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; k++){
<a name="l00409"></a>00409 <span class="comment">//  cout &lt;&lt; &quot;calculating error for bin &quot; &lt;&lt; j+1 &lt;&lt; endl;</span>
<a name="l00410"></a>00410   mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[k];
<a name="l00411"></a>00411   rvector xuppVec = Sup(boxes[k]);
<a name="l00412"></a>00412   <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00413"></a>00413   rvector xlowVec = Inf(boxes[k]);
<a name="l00414"></a>00414   <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00415"></a>00415   gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l00416"></a>00416   accumulate(dpIAE, result, 1.0);
<a name="l00417"></a>00417 }
<a name="l00418"></a>00418 <span class="comment">// Accounting for the boundaries</span>
<a name="l00419"></a>00419   cout &lt;&lt; <span class="stringliteral">&quot;Calculating IAE of the boundaries&quot;</span> &lt;&lt; endl;
<a name="l00420"></a>00420 
<a name="l00421"></a>00421   rvector xuppVec1 = Sup(boxes[Nbin-1]);
<a name="l00422"></a>00422   <span class="keywordtype">double</span> xupp1 = _double(xuppVec1[1]);
<a name="l00423"></a>00423   rvector xlowVec1 = Inf(boxes[0]);
<a name="l00424"></a>00424   <span class="keywordtype">double</span> xlow1 = _double(xlowVec1[1]);
<a name="l00425"></a>00425   dpIAEBoun = <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(xlow1, xupp1, Weight, Mean, Sigma);
<a name="l00426"></a>00426   dpIAE += <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00427"></a>00427   cout&lt;&lt;dpIAE&lt;&lt;endl;
<a name="l00428"></a>00428 
<a name="l00429"></a>00429   gsl_integration_workspace_free (w);
<a name="l00430"></a>00430   <span class="comment">// store IAE in vector</span>
<a name="l00431"></a>00431   dpIAEVec.push_back(dpIAE);
<a name="l00432"></a>00432  
<a name="l00433"></a>00433 
<a name="l00434"></a>00434    } <span class="comment">// end of successfulPQsplit</span>
<a name="l00435"></a>00435 } <span class="comment">// end of collating all histograms using </span>
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   cout &lt;&lt; <span class="stringliteral">&quot;Number of histograms collated: &quot;</span> &lt;&lt; collMin.getNumberCollated()  &lt;&lt; endl;
<a name="l00438"></a>00438  <span class="comment">// output collator files</span>
<a name="l00439"></a>00439  <span class="comment">// string collfileName = &quot;CollatorHistogram.txt&quot;;</span>
<a name="l00440"></a>00440  <span class="comment">// collMin.outputToTxtTabs(collfileName); // output the collation to file</span>
<a name="l00441"></a>00441 
<a name="l00442"></a>00442  <span class="comment">// output accumulation file</span>
<a name="l00443"></a>00443  <span class="keywordtype">string</span> accumFileName;
<a name="l00444"></a>00444  accumFileName = <span class="stringliteral">&quot;AccumFinMix.txt&quot;</span>;
<a name="l00445"></a>00445  collMin.outputAccumulationToTxtTabs(accumFileName);
<a name="l00446"></a>00446 
<a name="l00447"></a>00447  <span class="comment">//---- Average the histograms</span>
<a name="l00448"></a>00448  <span class="keywordtype">string</span> avgfileName = <span class="stringliteral">&quot;AverageFinMix.txt&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l00449"></a>00449  collMin.outputAverageToTxtTabs(avgfileName);  <span class="comment">// output the average to file</span>
<a name="l00450"></a>00450 
<a name="l00451"></a>00451  cout &lt;&lt; <span class="stringliteral">&quot;\n Averaging the histograms&quot;</span> &lt;&lt; endl;
<a name="l00452"></a>00452  clock_t start, end;
<a name="l00453"></a>00453  start = clock();
<a name="l00454"></a>00454  coll.makeAverage();
<a name="l00455"></a>00455  end = clock();
<a name="l00456"></a>00456  <span class="keywordtype">double</span> timing;
<a name="l00457"></a>00457  timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00458"></a>00458  cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00459"></a>00459  timeVec.push_back(timing);
<a name="l00460"></a>00460 
<a name="l00461"></a>00461  <span class="comment">//----get IAE of averaged histogram</span>
<a name="l00462"></a>00462 ifstream infile1(accumFileName.c_str());
<a name="l00463"></a>00463 <span class="keywordtype">string</span> chAv; <span class="keywordtype">double</span> volAv; <span class="keywordtype">double</span> countsAv; <span class="keywordtype">double</span> xlowAv; <span class="keywordtype">double</span> xuppAv;
<a name="l00464"></a>00464 
<a name="l00465"></a>00465 
<a name="l00466"></a>00466 <span class="comment">//create vectors for vol, count, xlow, xupp.</span>
<a name="l00467"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">00467</a> vector&lt;double&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>;
<a name="l00468"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">00468</a> vector&lt;double&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>; <span class="comment">//this is actually the accumulated height</span>
<a name="l00469"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">00469</a> vector&lt;double&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>;
<a name="l00470"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">00470</a> vector&lt;double&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>;
<a name="l00471"></a>00471 
<a name="l00472"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a30a5b87d0ad92ec2ac4720f718cfbe4c">00472</a> <span class="keywordflow">while</span> ( !infile1.eof() )
<a name="l00473"></a>00473 {
<a name="l00474"></a>00474 infile1 &gt;&gt; chAv&gt;&gt; volAv&gt;&gt; countsAv&gt;&gt;xlowAv&gt;&gt;xuppAv;
<a name="l00475"></a>00475 <a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>.push_back(volAv);
<a name="l00476"></a>00476 <a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>.push_back(countsAv);
<a name="l00477"></a>00477 <a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>.push_back(xlowAv);
<a name="l00478"></a>00478 <a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>.push_back(xuppAv);
<a name="l00479"></a>00479 }
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 <a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>.pop_back();
<a name="l00482"></a>00482 <a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>.pop_back();
<a name="l00483"></a>00483 <a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>.pop_back();
<a name="l00484"></a>00484 <a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>.pop_back();
<a name="l00485"></a>00485 
<a name="l00486"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">00486</a> vector&lt;ivector&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>;
<a name="l00487"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">00487</a> vector&lt;double&gt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>;
<a name="l00488"></a>00488 
<a name="l00489"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a0519e162e1c41359fb8bd66c112e41fb">00489</a> <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c = 0; c &lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>.size(); c++){
<a name="l00490"></a>00490         <span class="comment">// makes boxes into ivector</span>
<a name="l00491"></a>00491         ivector box(1);
<a name="l00492"></a>00492         box[1] = interval(<a class="code" href="HoldOutFinMix_8cpp.shtml#a3bc52ae65a3e8c94d6e239f5a95072e6">xlowA</a>[c], <a class="code" href="HoldOutFinMix_8cpp.shtml#a2d959f69287f44c479f94f36fcee9b77">xuppA</a>[c]);
<a name="l00493"></a>00493         <a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>.push_back(box);
<a name="l00494"></a>00494         <span class="comment">// get fhat of each box</span>
<a name="l00495"></a>00495         <a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>.push_back(<a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>[c]/collMin.getNumberCollated());
<a name="l00496"></a>00496 }
<a name="l00497"></a>00497 
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 <span class="comment">//----Integrated Absolute Error (IAE)-----</span>
<a name="l00500"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">00500</a> dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00501"></a>00501 <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a> = 0.0;
<a name="l00502"></a>00502 
<a name="l00503"></a><a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">00503</a> <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=<a class="code" href="HoldOutFinMix_8cpp.shtml#ad0ed2e852ce391062394d3fb37d83fca">countsA</a>.size();
<a name="l00504"></a>00504 cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a> &lt;&lt; <span class="stringliteral">&quot; leaves in averaged histogram &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l00505"></a>00505 
<a name="l00506"></a>00506 gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l00507"></a>00507 <span class="keywordtype">double</span> result = 0.0;
<a name="l00508"></a>00508 <span class="keywordtype">double</span> error;
<a name="l00509"></a>00509 gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l00510"></a>00510 <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00511"></a>00511 <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>.params =  &amp;mixt;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k=0; k&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; k++){
<a name="l00514"></a>00514 <span class="comment">//  cout &lt;&lt; &quot;calculating error for bin &quot; &lt;&lt; j+1 &lt;&lt; endl;</span>
<a name="l00515"></a>00515   mixt.fhat = <a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>[k];
<a name="l00516"></a>00516   rvector xuppVec = Sup(<a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>[k]);
<a name="l00517"></a>00517   <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00518"></a>00518   rvector xlowVec = Inf(<a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>[k]);
<a name="l00519"></a>00519   <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00520"></a>00520   gsl_integration_qags(&amp;<a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l00521"></a>00521   accumulate(<a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, result, 1.0);
<a name="l00522"></a>00522 }
<a name="l00523"></a>00523 <span class="comment">// Accounting for the boundaries</span>
<a name="l00524"></a>00524   cout &lt;&lt; <span class="stringliteral">&quot;Calculating IAE of the boundaries&quot;</span> &lt;&lt; endl;
<a name="l00525"></a>00525 
<a name="l00526"></a>00526   rvector xuppVec1 = Sup(<a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>[<a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>-1]);
<a name="l00527"></a>00527   <span class="keywordtype">double</span> xupp1 = _double(xuppVec1[1]);
<a name="l00528"></a>00528   rvector xlowVec1 = Inf(<a class="code" href="HoldOutFinMix_8cpp.shtml#a85377091af4aac9cac693472564eca90">boxesA</a>[0]);
<a name="l00529"></a>00529   <span class="keywordtype">double</span> xlow1 = _double(xlowVec1[1]);
<a name="l00530"></a>00530   <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a> = <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(xlow1, xupp1, Weight, Mean, Sigma);
<a name="l00531"></a>00531   <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a> += <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l00532"></a>00532   cout&lt;&lt;<a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>&lt;&lt;endl;
<a name="l00533"></a>00533 
<a name="l00534"></a>00534   gsl_integration_workspace_free (w);
<a name="l00535"></a>00535   <span class="comment">// store IAE in vector</span>
<a name="l00536"></a>00536   dpIAEVec.push_back(<a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>);
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 <span class="comment">// output IAE&#39;s to file</span>
<a name="l00541"></a>00541 <span class="keywordtype">string</span> outputIAEFileName = <span class="stringliteral">&quot;FinMixIAEHist.txt&quot;</span>;
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 oss.open(outputIAEFileName.c_str());
<a name="l00544"></a>00544 <span class="keywordflow">for</span> (dpIAEVecIt = dpIAEVec.begin(); dpIAEVecIt &lt; dpIAEVec.end(); dpIAEVecIt++){
<a name="l00545"></a>00545 oss &lt;&lt; (*dpIAEVecIt) &lt;&lt; endl;
<a name="l00546"></a>00546 }
<a name="l00547"></a>00547 oss &lt;&lt; flush;
<a name="l00548"></a>00548 oss.close();
<a name="l00549"></a>00549 cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputIAEFileName &lt;&lt; endl;
<a name="l00550"></a>00550 
<a name="l00551"></a>00551 <span class="comment">//------------confidence set for averaged histogram------------</span>
<a name="l00552"></a>00552 cout &lt;&lt; <span class="stringliteral">&quot;Getting confidence set and output to txt file. Remember to paste&quot;</span> &lt;&lt; endl;
<a name="l00553"></a>00553 <span class="keywordtype">double</span> alpha = 0.05;
<a name="l00554"></a>00554 vector&lt;double&gt; lowerBounds;
<a name="l00555"></a>00555 vector&lt;double&gt; upperBounds;
<a name="l00556"></a>00556 vector&lt;double&gt;::iterator boundIt;
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>.size(); i++){
<a name="l00559"></a>00559   <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*<a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>[i])*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(1/<a class="code" href="HoldOutFinMix_8cpp.shtml#a94dc863b1a67c64d7a11fc8fc482d676">volA</a>[i])/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00560"></a>00560 <span class="comment">//  cout &lt;&lt; volA[i] &lt;&lt; endl;</span>
<a name="l00561"></a>00561   <span class="comment">// lower bound</span>
<a name="l00562"></a>00562   <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>[i])-c, 0), 2);
<a name="l00563"></a>00563   lowerBounds.push_back(Lb);
<a name="l00564"></a>00564   <span class="comment">// upper bound</span>
<a name="l00565"></a>00565   <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(<a class="code" href="HoldOutFinMix_8cpp.shtml#a55dbd38124b429effc8498fd72e75ac9">fhatA</a>[i]) + c, 2);
<a name="l00566"></a>00566    upperBounds.push_back(Ub);
<a name="l00567"></a>00567 <span class="comment">//  cout &lt;&lt; &quot;[&quot; &lt;&lt; Lb &lt;&lt; &quot;\t&quot; &lt;&lt; fhatA[i] &lt;&lt; &quot;\t&quot; &lt;&lt; Ub &lt;&lt; &quot;]&quot; &lt;&lt; endl;</span>
<a name="l00568"></a>00568 }
<a name="l00569"></a>00569 
<a name="l00570"></a>00570 <span class="keywordtype">string</span> BoundFileName;
<a name="l00571"></a>00571 BoundFileName = <span class="stringliteral">&quot;FinMixAvgLowerBound.txt&quot;</span>;
<a name="l00572"></a>00572 oss.open(BoundFileName.c_str());
<a name="l00573"></a>00573 <span class="keywordflow">for</span> (boundIt = lowerBounds.begin(); boundIt &lt; lowerBounds.end(); boundIt++){
<a name="l00574"></a>00574 oss &lt;&lt; *boundIt &lt;&lt; endl;
<a name="l00575"></a>00575 }
<a name="l00576"></a>00576 oss &lt;&lt; flush;
<a name="l00577"></a>00577 oss.close();
<a name="l00578"></a>00578 
<a name="l00579"></a>00579 
<a name="l00580"></a>00580 BoundFileName = <span class="stringliteral">&quot;FinMixAvgUpperBound.txt&quot;</span>;
<a name="l00581"></a>00581 oss.open(BoundFileName.c_str());
<a name="l00582"></a>00582 <span class="keywordflow">for</span> (boundIt = upperBounds.begin(); boundIt &lt; upperBounds.end(); boundIt++){
<a name="l00583"></a>00583 oss &lt;&lt; *boundIt &lt;&lt; endl;
<a name="l00584"></a>00584 }
<a name="l00585"></a>00585 oss &lt;&lt; flush;
<a name="l00586"></a>00586 oss.close();
<a name="l00587"></a>00587 
<a name="l00588"></a>00588 <span class="keywordflow">return</span> 0;
<a name="l00589"></a>00589 } <span class="comment">// end of cross validation FinMix program</span>
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 <span class="comment">//--- Function: Get PDF of x.</span>
<a name="l00593"></a>00593 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span> x, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00594"></a>00594 {
<a name="l00595"></a>00595 <span class="keywordtype">int</span> Ncomp = W.size();
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 <span class="keywordtype">double</span> PDF = 0;
<a name="l00599"></a>00599 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
<a name="l00600"></a>00600 {
<a name="l00601"></a>00601 <span class="comment">//transfer to standard normal</span>
<a name="l00602"></a>00602 <span class="keywordtype">double</span>  z =  (x-M[c])/S[c];
<a name="l00603"></a>00603 <span class="keywordtype">double</span> term = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((z-M[c])/S[c], 2);
<a name="l00604"></a>00604 PDF += W[c]*<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*term)/S[c]/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(2*M_PI);
<a name="l00605"></a>00605 }  
<a name="l00606"></a>00606 <span class="keywordflow">return</span> PDF;
<a name="l00607"></a>00607 }
<a name="l00608"></a>00608 
<a name="l00609"></a>00609 <span class="comment">//---Function: get absolute error |fhat - f(x)| at x.</span>
<a name="l00610"></a>00610 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00611"></a>00611 {
<a name="l00612"></a>00612 <a class="code" href="structFinMix.shtml">FinMix</a> mixt = *(<a class="code" href="structFinMix.shtml">FinMix</a> *) params;
<a name="l00613"></a>00613 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a> = fabs(mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> - <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(x, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>));
<a name="l00614"></a>00614 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l00615"></a>00615 }
<a name="l00616"></a>00616 
<a name="l00617"></a>00617 <span class="comment">//---Function: Get CDF, i.e. P(X &lt;= x).</span>
<a name="l00618"></a>00618 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00619"></a>00619 {
<a name="l00620"></a>00620 <span class="keywordtype">double</span> Ncomp = W.size();
<a name="l00621"></a>00621 <span class="keywordtype">double</span> CDF = 0;
<a name="l00622"></a>00622 <span class="keywordflow">for</span> (<span class="keywordtype">int</span> c=0; c &lt; Ncomp; c++)
<a name="l00623"></a>00623 {
<a name="l00624"></a>00624 normal component(M[c], S[c]);
<a name="l00625"></a>00625 CDF += W[c]*(cdf(component, x2) - cdf(component, x1));
<a name="l00626"></a>00626 <span class="comment">//cout &lt;&lt; &quot;CDF is: &quot; &lt;&lt; CDF &lt;&lt; endl;</span>
<a name="l00627"></a>00627 }
<a name="l00628"></a>00628 <span class="keywordflow">return</span> CDF;
<a name="l00629"></a>00629 }
<a name="l00630"></a>00630 
<a name="l00631"></a>00631 <span class="comment">//---Function: integrate exp(-(x/sigma))</span>
<a name="l00632"></a>00632 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00633"></a>00633 {
<a name="l00634"></a>00634 <span class="keywordtype">double</span> sigma = *(<span class="keywordtype">double</span> *) params;
<a name="l00635"></a>00635 <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a> =<a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-(x/sigma));
<a name="l00636"></a>00636 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#ab92e3b135b92374b9442d24e210139ad">FinMixInt1</a>;
<a name="l00637"></a>00637 }
<a name="l00638"></a>00638 
<a name="l00639"></a>00639 <span class="comment">//---Function: integrate exp(-0.5*((x-mu1)/sigma1 + (x-mu2)/sigma2))</span>
<a name="l00640"></a>00640 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span> * params)
<a name="l00641"></a>00641 {
<a name="l00642"></a>00642 vector&lt;double&gt; MS = *(vector&lt;double&gt; *) params;
<a name="l00643"></a>00643 <span class="keywordtype">double</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a> = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-0.5*((x-MS[0])/MS[1] + (x-MS[2])/MS[3]));
<a name="l00644"></a>00644 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#afb047f418e144a9bc7d15f6bb2515e34">FinMixInt2</a>; 
<a name="l00645"></a>00645 }
<a name="l00646"></a>00646 
<a name="l00647"></a>00647 <span class="comment">//---Function: calculate IAE at this bin.</span>
<a name="l00648"></a>00648 <span class="keyword">inline</span> dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> fhat, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00649"></a>00649 {
<a name="l00650"></a>00650 dotprecision <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
<a name="l00651"></a>00651 dpFinMixIAE = 0.0;
<a name="l00652"></a>00652 <span class="keywordtype">double</span> result = 0.0;
<a name="l00653"></a>00653 
<a name="l00654"></a>00654 <span class="comment">//accumulate(dpFinMixIAE, result, 1.0);</span>
<a name="l00655"></a>00655 
<a name="l00656"></a>00656 
<a name="l00657"></a>00657 <span class="keywordflow">return</span> <a class="code" href="CoverageNormal_8cpp.shtml#a416f731e5ce582c3e5c503b5c2aae7b3">dpFinMixIAE</a>;
<a name="l00658"></a>00658 }
<a name="l00659"></a>00659             
<a name="l00660"></a>00660 <span class="comment">//---Function to calculate IAE at boundaries.</span>
<a name="l00661"></a>00661 <span class="keyword">inline</span> dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, vector&lt;double&gt; W, vector&lt;double&gt; M, vector&lt;double&gt; S)
<a name="l00662"></a>00662 {
<a name="l00663"></a>00663 dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00664"></a>00664 dpFinMixIAEBoun = 0.0;
<a name="l00665"></a>00665 <span class="keywordtype">double</span> Ncomp = W.size();
<a name="l00666"></a>00666 <span class="keywordtype">double</span> cdfLeft = 0.0;
<a name="l00667"></a>00667 <span class="keywordtype">double</span> cdfRight = 0.0;
<a name="l00668"></a>00668 <span class="keywordtype">int</span> c;
<a name="l00669"></a>00669 
<a name="l00670"></a>00670 <span class="keywordflow">for</span> (c=0; c &lt; Ncomp; c++)
<a name="l00671"></a>00671 {
<a name="l00672"></a>00672 normal component(M[c], S[c]);
<a name="l00673"></a>00673 cdfLeft += W[c]*(cdf(component, x1));
<a name="l00674"></a>00674 cdfRight += 1-W[c]*(cdf(component, x2));
<a name="l00675"></a>00675 }
<a name="l00676"></a>00676 
<a name="l00677"></a>00677 accumulate(dpFinMixIAEBoun, cdfLeft, 1.0);
<a name="l00678"></a>00678 accumulate(dpFinMixIAEBoun, cdfRight, 1.0);
<a name="l00679"></a>00679 
<a name="l00680"></a>00680 <span class="keywordflow">return</span> <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>;
<a name="l00681"></a>00681 }
<a name="l00682"></a>00682 
<a name="l00683"></a>00683 
<a name="l00684"></a>00684 
<a name="l00685"></a>00685 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOutFinMix_8cpp.shtml">HoldOutFinMix.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
