<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: InsideBoxOri.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('InsideBoxOri_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">InsideBoxOri.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
</div>
<p><a href="InsideBoxOri_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml">LexicoSorting&lt; T &gt;</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="InsideBoxOri_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="InsideBoxOri.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="InsideBoxOri_8cpp_source.shtml#l00057">57</a> of file <a class="el" href="InsideBoxOri_8cpp_source.shtml">InsideBoxOri.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03502">subpavings::AdaptiveHistogram::getLeafLevels()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01376">subpavings::AdaptiveHistogram::getLeafLevelsString()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="spnode_8cpp_source.shtml#l02236">subpavings::spLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>, and <a class="el" href="spsnode_8cpp_source.shtml#l02613">subpavings::SPSnode::spsContains()</a>.</p>
<div class="fragment"><pre class="fragment">{

<span class="comment">// box to use    </span>

<span class="comment">// ------- prepare to generate some data for the tests -----------</span>

    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    <span class="keywordtype">long</span> s = time (NULL) * getpid();
    gsl_rng_set(r, s);


    <span class="keywordtype">string</span> fileName; <span class="comment">// create a name for the file to use</span>

    <span class="comment">// ----------------   example to create multiple histograms -------------------</span>
   
    <span class="keywordtype">int</span>  numHist = 1; <span class="comment">// the number of histograms to make</span>
    <span class="keywordtype">int</span> minLeaves = 1; <span class="comment">// for number of leaves pq splitting stopping criteria</span>
    <span class="keywordtype">int</span> MINLeaves = 1; <span class="comment">// for number of leaves pq splitting stopping criteria</span>

    <span class="comment">// a map for counting visits to states of Histograms encoded</span>
    <span class="comment">// as OrderedLeafDepths</span>
    <span class="keyword">typedef</span> map&lt;vector&lt;int&gt;,int,<a class="code" href="classLexicoSorting.shtml">LexicoSorting&lt;vector&lt;int&gt;</a> &gt; &gt; <a class="code" href="multitreemanager_8cpp.shtml#a3ea630ec466288ccd6a700e1693615a7">OrdLeafDepthsMap</a>;
    vector&lt; OrdLeafDepthsMap &gt; AnOrdLfDpMapVec(MINLeaves-minLeaves+1);
    <span class="comment">//OrdLeafDepthsMap AnOrdLfDpMap;</span>
    OrdLeafDepthsMap::iterator OrdLeafDepthsMap_Iter;
    std::pair&lt;OrdLeafDepthsMap::iterator, bool&gt; OrdLeafDepthsMap_bool;

    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQMerge = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> Mixture_bool = <span class="keyword">false</span>;<span class="comment">//using mixture or not</span>
    <span class="comment">//----data generating partition----------------------------------------</span>
        <span class="keywordtype">int</span> d = 1; <span class="comment">// dimension of the uniform hypercube to sample data from</span>
        ivector pavingBox(d);

        <span class="comment">// domain is a hypercube</span>
        interval pavingInterval(0,1);
        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) pavingBox[i] = pavingInterval;

        <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
        <span class="comment">// a container for the boxes</span>
        vector&lt;ivector&gt; Pboxes;
        <span class="keywordtype">size_t</span> PartSize;
<span class="keywordflow">if</span> (Mixture_bool) {
        <span class="comment">//not working bool successfulInstruction = myPart.splitToShape(&quot;0&quot;);// uniform</span>
        <span class="comment">//bool successfulInstruction = myPart.splitToShape(&quot;1,1&quot;);// uniform mixture</span>
        <span class="keywordtype">bool</span> successfulInstruction = myPart.splitToShape(<span class="stringliteral">&quot;2,2,1&quot;</span>);<span class="comment">// uniform mixture</span>
        <span class="comment">//bool successfulInstruction = myPart.splitToShape(&quot;3,3, 2, 1&quot;);</span>
        cout &lt;&lt; <span class="stringliteral">&quot;result is &quot;</span> &lt;&lt; successfulInstruction &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Level string for new partition is &quot;</span>
             &lt;&lt; myPart.getLeafLevelsString() &lt;&lt; endl;
        <span class="comment">// we can keep splitting if the state is reachable</span>
        <span class="comment">/*</span>
<span class="comment">        if (successfulInstruction) {</span>
<span class="comment">          successfulInstruction = myPart.splitToShape(&quot;3, 4,4, 2,2, 3,3&quot;);</span>
<span class="comment">          cout &lt;&lt; &quot;result is &quot; &lt;&lt; successfulInstruction &lt;&lt; endl;</span>
<span class="comment">          cout &lt;&lt; &quot;Level string for new partition is &quot;</span>
<span class="comment">               &lt;&lt; myPart.getLeafLevelsString() &lt;&lt; endl;</span>
<span class="comment">        // We could also have put the data from the container into</span>
<span class="comment">        // the histogram with the splitToShape partition, no splitting here</span>
<span class="comment">        // successfulInsertion = myPart.insertFromRVec(theData);</span>
<span class="comment">        }</span>
<span class="comment">        */</span>
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
        myPart.getSubPaving()-&gt;getLeaves(Pleaves); <span class="comment">// fill the container</span>
        <span class="comment">// container is filled by reading leaves off tree from left to right</span>
        <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
            <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
            <span class="comment">//get the counts in all the Pleaves</span>
            <span class="comment">//get the boxes from all the Pleaves</span>
            Pboxes.push_back((*it)-&gt;getBox());
        }
        PartSize = Pboxes.size();
    <span class="comment">//----end of data generating partition----------------------------------------</span>
}
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt;= numHist; j++)
    { <span class="comment">// loop to make histograms</span>

        <span class="comment">//cout &lt;&lt; &quot;Doing hist number &quot; &lt;&lt; j &lt;&lt; endl;</span>
        <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
        <span class="comment">// make a simulated data set allData to sample from</span>
        <span class="keywordtype">int</span> n = 10; <span class="comment">// total points from random number generator</span>
        <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
            rvector thisrv(d);
            <span class="keywordflow">if</span>(Mixture_bool) {
              <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
              <span class="comment">//cout &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
              thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);
            }
            <span class="keywordflow">else</span> {
              <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
                  thisrv[i]  = gsl_rng_uniform(r);
              }
            }

            <span class="comment">// put points generated into container</span>
            <span class="comment">//cout &lt;&lt; thisrv;</span>
            theData.push_back(thisrv);
        }  <span class="comment">// data  should be in theData</span>

        <span class="comment">// make an Adaptive Histogram object with a specified box</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);

        <span class="comment">// put the data from the container into the histogram, no splitting here</span>
        successfulInsertion = myHist.insertFromRVec(theData);

        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> L=minLeaves; L&lt;=MINLeaves; L++)
        {

          <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(5);
          <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
          <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(L);
          <span class="keywordflow">if</span> (successfulInsertion) {
              <span class="comment">// now split with priority queue</span>
              <span class="comment">// split node wth most pointsin first (compCount)</span>
              <span class="comment">// until leaves &gt;= minLeaves (critLeaves_GTE)</span>
              <span class="comment">// no minPoints or minVolB limitations on splittable nodes</span>
              successfulPQSplit = myHist.prioritySplit(nodeCompCount,
                                critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r); <span class="comment">// no logs</span>
          }

          <span class="keywordflow">if</span> (successfulPQSplit) {
            <span class="comment">//</span>
            <span class="comment">// optional - if you want to get a txt output of each histogram</span>
            <span class="comment">// create a name for the file to output</span>
             fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
            <span class="comment">//convert j to a string</span>
             std::ostringstream stm2;
             stm2 &lt;&lt; j;
            <span class="comment">// add the stringed j to the filename</span>
             fileName += stm2.str();
             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            <span class="comment">// To realize a file output</span>
             myHist.outputToTxtTabs(fileName);
            <span class="comment">//myHist.outputToTxtTabsWithEMPs(fileName);</span>

            <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
            <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
            myHist.getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
            <span class="comment">// container is filled by reading leaves off tree from left to right</span>

            <span class="comment">// a container for the counts</span>
            <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
                            <span class="comment">// the iterator is typedefed as IntVecItr</span>
            <span class="comment">// a container for the boxes</span>
            vector&lt;ivector&gt; boxes;
            <span class="comment">// a container for the volumes</span>
            vector&lt;double&gt; volumes;
            <span class="comment">// a valarray container for the node levels, sized to fit</span>
            valarray&lt;int&gt; levels(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(myHist.getSubPaving()));

            <span class="keywordtype">int</span> v=0;
            <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<span class="comment">//                // remember that it points to a pointer, so *it is still a ptr</span>
              <span class="comment">//     cout &lt;&lt; &quot;Leaf: &quot; &lt;&lt; *it &lt;&lt; endl;</span>
<span class="comment">//                //get the counts in all the leaves</span>
                counts.push_back((*it)-&gt;getCounter());


<span class="comment">//                //get the boxes from all the leaves</span>
                boxes.push_back((*it)-&gt;getBox());
                
              cout &lt;&lt; <span class="stringliteral">&quot;=============&quot;</span> &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;
                ivector queryBox(d);
                queryBox[1] = interval(0.1,0.24);
            <span class="comment">//    (*it)-&gt;spsContains(queryBox);</span>
            <span class="comment">// cout &lt;&lt; &quot;---------------&quot; &lt;&lt; endl; </span>

<span class="comment">//                //get the volumes of all the leaves</span>
<span class="comment">//                volumes.push_back((*it)-&gt;nodeVolume());</span>
<span class="comment">//                //get the levels of the leaves</span>
<span class="comment">//                levels[v] = (*it)-&gt;getNodeDepth();</span>
<span class="comment">//                v++;</span>
            }

ivector query(d);
query[1]=interval(0.1, 0.6);
cout &lt;&lt; <span class="stringliteral">&quot;spsContains&quot;</span> &lt;&lt; endl;
cout &lt;&lt; <span class="stringliteral">&quot;Total count inside query box: &quot;</span> &lt;&lt; myHist.getSubPaving()-&gt;spsContains(query) &lt;&lt; endl;



            <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> altLevels = myHist.getLeafLevels();
<span class="comment">//</span>
          <span class="comment">//  copy (altLevels.begin(), altLevels.end(),</span>
            <span class="comment">//        ostream_iterator&lt;int&gt;(cout, &quot;\t&quot;));</span>
           <span class="comment">// cout &lt;&lt; &#39;\n&#39;;</span>
           <span class="comment">// copy (counts.begin(), counts.end(), ostream_iterator&lt;int&gt;(cout, &quot;\t&quot;));</span>
           <span class="comment">// cout &lt;&lt; &quot;\n&quot;;</span>

            OrdLeafDepthsMap_bool = AnOrdLfDpMapVec[L-minLeaves].insert(make_pair(altLevels,1));
            <span class="keywordflow">if</span>(!(OrdLeafDepthsMap_bool.second)) {
                (OrdLeafDepthsMap_bool.first)-&gt;second +=1;
            }
            <span class="comment">//  This is where you&#39;d have to use/manipulate/store/whatever</span>
            <span class="comment">//    the stuff you have from the containers for each hist</span>
            <span class="comment">//</span>


          }<span class="comment">//end of PQSplit</span>
        }<span class="comment">//end of leaf level pecific splitting loop</span>
    } <span class="comment">// end of loop for histograms</span>
    <span class="comment">// free the random number generator</span>
    gsl_rng_free (r);


    cout &lt;&lt; <span class="stringliteral">&quot;empirical histogram frequencies\n&quot;</span>;
    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> L=minLeaves; L&lt;=MINLeaves; L++)
    {
      cout &lt;&lt; <span class="stringliteral">&quot;L : &quot;</span> &lt;&lt; <span class="charliteral">&#39;\t&#39;</span> &lt;&lt; L &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
      <span class="keywordflow">for</span>(OrdLeafDepthsMap_Iter=AnOrdLfDpMapVec[L-minLeaves].begin();
          OrdLeafDepthsMap_Iter != AnOrdLfDpMapVec[L-minLeaves].end();
          ++OrdLeafDepthsMap_Iter){
              <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> altLevels = OrdLeafDepthsMap_Iter-&gt;first;
              cout &lt;&lt; OrdLeafDepthsMap_Iter-&gt;second &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; <span class="charliteral">&#39;\t&#39;</span>;
              copy (altLevels.begin(), altLevels.end(),
                     ostream_iterator&lt;int&gt;(cout, <span class="stringliteral">&quot;;&quot;</span>));
              cout &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
      }
    }
    <span class="comment">//  All the histograms done, you&#39;ve somehow stored some summary from each,</span>
    <span class="comment">//  you can now do something with the summary</span>


    <span class="keywordflow">return</span> 0;

} <span class="comment">// end of histrogram report test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="InsideBoxOri_8cpp.shtml">InsideBoxOri.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
