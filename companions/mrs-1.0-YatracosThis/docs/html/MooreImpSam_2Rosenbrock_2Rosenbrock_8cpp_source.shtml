<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Rosenbrock.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MooreImpSam_2Rosenbrock_2Rosenbrock_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MooreImpSam/Rosenbrock/Rosenbrock.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MooreImpSam_2Rosenbrock_2Rosenbrock_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> * </span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>   <span class="comment">// Include interval arithmetic package</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>    <span class="comment">// Include interval standard functions</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>    <span class="comment">// Include real standard functions</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;intvector.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;rvector.hpp&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;imatrix.hpp&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include&lt;algorithm&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include&lt;numeric&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;ctype.h&gt;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>std;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>cxsc;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &quot;<a class="code" href="FRosenbrock_8hpp.shtml" title="Declarations for example function class FRosenbrock (Rosenbrock function).">FRosenbrock.hpp</a>&quot;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keywordtype">int</span>
<a name="l00063"></a><a class="code" href="MooreImpSam_2Rosenbrock_2Rosenbrock_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00063</a> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00064"></a>00064 {
<a name="l00065"></a>00065   ios::sync_with_stdio ();  <span class="comment">// call this function so iostream works with stdio</span>
<a name="l00066"></a>00066   cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>
<a name="l00067"></a>00067   
<a name="l00068"></a>00068   <span class="comment">// set default values</span>
<a name="l00069"></a>00069   <span class="keywordtype">int</span> n_dimensions = 2; 
<a name="l00070"></a>00070   <span class="keywordtype">int</span> n_boxes = 100;
<a name="l00071"></a>00071   <span class="keywordtype">int</span> n_samples = 50;
<a name="l00072"></a>00072   <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
<a name="l00073"></a>00073   <span class="keywordtype">unsigned</span> theSeed = 0;
<a name="l00074"></a>00074   <span class="keywordtype">unsigned</span> theMethod = 0;
<a name="l00075"></a>00075   <span class="keywordtype">bool</span> UseResidualSampling = <span class="keyword">false</span>;
<a name="l00076"></a>00076   <span class="keywordtype">long</span> Nrep = 1;
<a name="l00077"></a>00077   
<a name="l00078"></a>00078   <span class="keywordflow">if</span> (argc &gt;= 2)
<a name="l00079"></a>00079   {
<a name="l00080"></a>00080     sscanf (argv[1], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_dimensions);
<a name="l00081"></a>00081     <span class="keywordflow">if</span> (argc &gt;= 3)
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083       sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
<a name="l00084"></a>00084       
<a name="l00085"></a>00085       <span class="keywordflow">if</span> (argc &gt;= 4)
<a name="l00086"></a>00086         sscanf (argv[3], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);
<a name="l00087"></a>00087       <span class="keywordflow">if</span> (argc &gt;= 5) 
<a name="l00088"></a>00088         sscanf (argv[4], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theSeed);
<a name="l00089"></a>00089       <span class="keywordflow">if</span> (argc &gt;= 6)
<a name="l00090"></a>00090         sscanf (argv[5], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theMethod);    <span class="comment">//0 = IMPSAM-PseudoRnd, 1 = IMPSAM-QuasiRnd</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092       <span class="keywordflow">if</span> (argc &gt;= 7)
<a name="l00093"></a>00093         cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt; &lt;method(IS-pseudo/IS-quasi::0/1)&gt;; &quot;</span>
<a name="l00094"></a>00094              &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096     
<a name="l00097"></a>00097     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt; &lt;method(IS-pseudo/IS-quasi::0/1)&gt;; &quot;</span>
<a name="l00098"></a>00098               &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;    
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   
<a name="l00101"></a>00101   cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes 
<a name="l00102"></a>00102        &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed  
<a name="l00103"></a>00103        &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00104"></a>00104   cout &lt;&lt; <span class="stringliteral">&quot;theMethod: &quot;</span> &lt;&lt; theMethod &lt;&lt; endl;
<a name="l00105"></a>00105   cout &lt;&lt; <span class="stringliteral">&quot;UseResidualSampling: &quot;</span> &lt;&lt; UseResidualSampling &lt;&lt; endl;
<a name="l00106"></a>00106   
<a name="l00107"></a>00107   <span class="keywordtype">bool</span> REJSAM = <span class="keyword">false</span>;
<a name="l00108"></a>00108   <span class="keywordtype">bool</span> IMPSAM = <span class="keyword">true</span>;
<a name="l00109"></a>00109   <span class="keywordtype">bool</span> PSEUDO = <span class="keyword">true</span>;   <span class="comment">//when false we use Quasi-random streams</span>
<a name="l00110"></a>00110   
<a name="l00111"></a>00111   <span class="keywordflow">if</span> (theMethod == 0)
<a name="l00112"></a>00112   {
<a name="l00113"></a>00113     REJSAM = <span class="keyword">false</span>;
<a name="l00114"></a>00114     IMPSAM = <span class="keyword">true</span>;
<a name="l00115"></a>00115     PSEUDO = <span class="keyword">true</span>;
<a name="l00116"></a>00116   }
<a name="l00117"></a>00117   <span class="keywordflow">if</span> (theMethod == 1)
<a name="l00118"></a>00118   {
<a name="l00119"></a>00119     REJSAM = <span class="keyword">false</span>;
<a name="l00120"></a>00120     IMPSAM = <span class="keyword">true</span>;
<a name="l00121"></a>00121     PSEUDO = <span class="keyword">false</span>;
<a name="l00122"></a>00122   }
<a name="l00123"></a>00123   
<a name="l00124"></a>00124   <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00125"></a>00125   real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00126"></a>00126   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00127"></a>00127   real RosenDomainLimit = 10.0;
<a name="l00128"></a>00128     
<a name="l00129"></a>00129   <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00130"></a>00130   <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
<a name="l00131"></a>00131   
<a name="l00132"></a>00132   <span class="comment">// make the function object</span>
<a name="l00133"></a>00133   <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> (n_dimensions, 
<a name="l00134"></a>00134                       Tinverse, Height, RosenDomainLimit, UseLogPi);
<a name="l00135"></a>00135   
<a name="l00136"></a>00136   clock_t T1 = clock (), T2, T3;
<a name="l00137"></a>00137   <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
<a name="l00138"></a>00138   <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (f, n_boxes, Alb, theSeed, (use_f_scale == 1));
<a name="l00139"></a>00139   T2 = clock ();
<a name="l00140"></a>00140   <span class="keywordtype">double</span> Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;
<a name="l00141"></a>00141   
<a name="l00142"></a>00142   vector&lt;double&gt; results(Nrep);
<a name="l00143"></a>00143   vector&lt;double&gt; errests(Nrep);
<a name="l00144"></a>00144   cout &lt;&lt; <span class="stringliteral">&quot;begin REPS ... \n&quot;</span> &lt;&lt; endl;
<a name="l00145"></a>00145   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> irep = 0; irep &lt; Nrep; irep++)
<a name="l00146"></a>00146   {
<a name="l00147"></a>00147     
<a name="l00148"></a>00148     <span class="keywordflow">if</span> (IMPSAM)
<a name="l00149"></a>00149     {
<a name="l00150"></a>00150       <a class="code" href="classISSample.shtml" title="A class for the status of an Importance Sampler.">ISSample</a> is_sample;
<a name="l00151"></a>00151       <span class="keywordflow">if</span> (PSEUDO)
<a name="l00152"></a>00152       {
<a name="l00153"></a>00153         cout &lt;&lt; <span class="stringliteral">&quot;before ImportanceSampleMany&quot;</span> &lt;&lt; endl;
<a name="l00154"></a>00154         theSampler.<a class="code" href="classMRSampler.shtml#a4fc816422109d41053f1171346463b7d" title="Importance sampling with Pseudo/Quasi random numbers.">ImportanceSampleMany</a> (n_samples, UseResidualSampling, 1, is_sample);
<a name="l00155"></a>00155       }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157       <span class="keywordflow">else</span>
<a name="l00158"></a>00158       {
<a name="l00159"></a>00159         cout &lt;&lt; <span class="stringliteral">&quot;before ImpSampleManyQuasi&quot;</span> &lt;&lt; endl;
<a name="l00160"></a>00160         theSampler.<a class="code" href="classMRSampler.shtml#a1e1e42a57421caa0b13b194372d0b067" title="Importance sampling with Quasi random numbers -- [Ignore: experimental].">ImportanceSampleManyQuasi</a> (n_samples,
<a name="l00161"></a>00161                                               UseResidualSampling,
<a name="l00162"></a>00162                                               is_sample);
<a name="l00163"></a>00163       }
<a name="l00164"></a>00164       vector&lt;real&gt; integral_ests(theSampler.<a class="code" href="classMRSampler.shtml#a0302488b026965e8e6c401037a0c9240">get_n_topologies</a>());
<a name="l00165"></a>00165       <span class="keywordtype">double</span> IntegralEstimate = _double (is_sample.<a class="code" href="classISSample.shtml#ab2913a50ee258c5b55d91202ac35ff00">IntegralEstimate</a> (integral_ests));
<a name="l00166"></a>00166       results[irep] = IntegralEstimate;
<a name="l00167"></a>00167     <span class="comment">//cout &lt;&lt; &quot;is_sample IU, N, N: &quot; &lt;&lt; is_sample.EnvelopeIntegral &lt;&lt; &quot; &quot; &lt;&lt; is_sample.Samples.size() &lt;&lt; &quot; &quot; &lt;&lt; is_sample.Samples.size() &lt;&lt; endl;</span>
<a name="l00168"></a>00168       cout &lt;&lt; <span class="stringliteral">&quot;ISSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
<a name="l00169"></a>00169       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;size_t(theSampler.<a class="code" href="classMRSampler.shtml#a0302488b026965e8e6c401037a0c9240">get_n_topologies</a>()); i++){ cout &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; integral_ests[i] &lt;&lt; endl; }
<a name="l00170"></a>00170     <span class="comment">//    cout &lt;&lt; &quot;ISSampleMany mean: \n&quot; &lt;&lt; is_sample.Mean () &lt;&lt; endl;</span>
<a name="l00171"></a>00171       vector&lt;rvector&gt; means = is_sample.<a class="code" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972" title="Sample mean of lableled points.">Mean</a>();
<a name="l00172"></a>00172       is_sample.<a class="code" href="classISSample.shtml#a38b62082187bfa35faa6564b0ce874f7" title="Print labeled means.">PrintMeans</a>(cout);
<a name="l00173"></a>00173       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;means.size(); i++){cout &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; i &lt;&lt; endl &lt;&lt; <span class="stringliteral">&quot;mean: &quot;</span> &lt;&lt; endl &lt;&lt; means[i] &lt;&lt; endl; }
<a name="l00174"></a>00174     <span class="comment">//  cout &lt;&lt; &quot;ISSampleMany sample: \n&quot; ; is_sample.Print(cout); cout &lt;&lt; endl;</span>
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176   }       <span class="comment">//REPS loop</span>
<a name="l00177"></a>00177   
<a name="l00178"></a>00178   cout &lt;&lt; <span class="stringliteral">&quot;after Reps loop &quot;</span> &lt;&lt; endl;
<a name="l00179"></a>00179   
<a name="l00180"></a>00180   cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFRosenbrock.shtml#a6ca09c94fc6597d64474a87af8ffc59d" title="Get number of interval function calls.">get_interval_calls</a> () &lt;&lt; endl;
<a name="l00181"></a>00181   cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFRosenbrock.shtml#ab1f708734168295d5120388e9a25d767" title="Get number of real function calls.">get_real_calls</a> () /
<a name="l00182"></a>00182     (double) Nrep &lt;&lt; endl;
<a name="l00183"></a>00183   
<a name="l00184"></a>00184   <span class="keywordflow">if</span>(Nrep &gt; 1)
<a name="l00185"></a>00185   {
<a name="l00186"></a>00186     <span class="keywordtype">double</span> themean = <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (Nrep, (&amp;results[0]));
<a name="l00187"></a>00187     <span class="keywordtype">double</span> thevar = <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a> (Nrep, (&amp;results[0]));
<a name="l00188"></a>00188     <span class="keywordtype">double</span> mean_errest = <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (Nrep, (&amp;errests[0]));
<a name="l00189"></a>00189     cout &lt;&lt; <span class="stringliteral">&quot;mean, stddev, stddev/mean, whMSE, whRMSE: &quot;</span> &lt;&lt; themean &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt;
<a name="l00190"></a>00190       <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (thevar) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; (<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (thevar) / themean) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (1.0,
<a name="l00191"></a>00191                                                                        Nrep,
<a name="l00192"></a>00192                                                                        (&amp;results[0]))
<a name="l00193"></a>00193       &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a> (<a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (1.0, Nrep, (&amp;results[0]))) &lt;&lt; endl;
<a name="l00194"></a>00194     cout &lt;&lt; <span class="stringliteral">&quot;mean err est: &quot;</span> &lt;&lt; mean_errest &lt;&lt; endl;
<a name="l00195"></a>00195   }
<a name="l00196"></a>00196   
<a name="l00197"></a>00197   <span class="comment">//---------------------------------------------------------------------------------- -</span>
<a name="l00198"></a>00198   T3 = clock ();
<a name="l00199"></a>00199   <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
<a name="l00200"></a>00200   cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> &lt;&lt;
<a name="l00201"></a>00201     Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
<a name="l00202"></a>00202   cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per replication: &quot;</span> &lt;&lt; Ptime + Stime / (double) Nrep &lt;&lt; endl;
<a name="l00203"></a>00203   cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate per replication: &quot;</span> &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (Nrep*n_samples) &lt;&lt; endl;
<a name="l00204"></a>00204   cout &lt;&lt; <span class="stringliteral">&quot;# N interval function evals: &quot;</span> &lt;&lt; 2 *
<a name="l00205"></a>00205     n_boxes &lt;&lt; <span class="stringliteral">&quot;   N real function evals: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
<a name="l00206"></a>00206   cout &lt;&lt; <span class="stringliteral">&quot;Domain Partition: \n&quot;</span> ;
<a name="l00207"></a>00207   
<a name="l00208"></a>00208   <span class="keywordflow">return</span> 0;     <span class="comment">// end main statement</span>
<a name="l00209"></a>00209 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MooreImpSam_2Rosenbrock_2Rosenbrock_8cpp.shtml">Rosenbrock.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
