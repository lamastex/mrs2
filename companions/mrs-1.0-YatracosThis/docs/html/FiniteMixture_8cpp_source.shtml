<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FiniteMixture.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FiniteMixture_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FiniteMixture.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FiniteMixture_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment"> * your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> * </span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00030"></a>00030 <span class="comment">// include header files</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>std;
<a name="l00043"></a>00043 <span class="keyword">using namespace </span>cxsc;
<a name="l00044"></a>00044 
<a name="l00045"></a><a class="code" href="FiniteMixture_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00045</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00048"></a>00048   <span class="keywordflow">if</span> ( argc != 5 ) {
<a name="l00049"></a>00049     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix simNum&quot;</span> &lt;&lt; endl;
<a name="l00050"></a>00050     exit(0);
<a name="l00051"></a>00051   }
<a name="l00052"></a>00052 
<a name="l00053"></a>00053    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00054"></a>00054    <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
<a name="l00055"></a>00055    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00056"></a>00056    <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
<a name="l00057"></a>00057    <span class="keywordtype">int</span> simNum = atoi(argv[4]); <span class="comment">//which data set </span>
<a name="l00058"></a>00058    
<a name="l00059"></a>00059    <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l00060"></a>00060   cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
<a name="l00061"></a>00061   <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l00062"></a>00062   
<a name="l00063"></a>00063    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00064"></a>00064    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00065"></a>00065    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00066"></a>00066    oss.precision(5);
<a name="l00067"></a>00067    std::ostringstream stm;
<a name="l00068"></a>00068   stm &lt;&lt; simNum;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070   <span class="comment">//==============get distribution parameters==========================//</span>
<a name="l00071"></a>00071    <span class="comment">// read input from mix*.txt</span>
<a name="l00072"></a>00072    <span class="keywordtype">string</span> mixfileName;
<a name="l00073"></a>00073    mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00074"></a>00074   std::ostringstream stmMix;
<a name="l00075"></a>00075   stmMix &lt;&lt; mix;
<a name="l00076"></a>00076   mixfileName += stmMix.str();
<a name="l00077"></a>00077   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   ifstream infile(mixfileName.c_str());
<a name="l00080"></a>00080   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00081"></a>00081   <span class="keywordtype">double</span> W, M, V;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00084"></a>00084   vector&lt;double&gt; Weight;
<a name="l00085"></a>00085   vector&lt;double&gt; Mean;
<a name="l00086"></a>00086   vector&lt;double&gt; Sigma;
<a name="l00087"></a>00087 
<a name="l00088"></a>00088   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00089"></a>00089   ifstream file; <span class="comment">// create file for input</span>
<a name="l00090"></a>00090   file.open(mixfileName.c_str());
<a name="l00091"></a>00091   <span class="comment">// check if this file exists or not</span>
<a name="l00092"></a>00092   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00093"></a>00093     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00094"></a>00094          &lt;&lt; endl;
<a name="l00095"></a>00095     exit(1);
<a name="l00096"></a>00096   }
<a name="l00097"></a>00097   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00098"></a>00098     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00099"></a>00099     W=Weight1/Weight2;
<a name="l00100"></a>00100     Weight.push_back(W);
<a name="l00101"></a>00101     M=Mean1/Mean2;
<a name="l00102"></a>00102     Mean.push_back(M);
<a name="l00103"></a>00103     V=Var1/Var2;
<a name="l00104"></a>00104     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00105"></a>00105   }
<a name="l00106"></a>00106   Weight.pop_back();
<a name="l00107"></a>00107   Mean.pop_back();
<a name="l00108"></a>00108   Sigma.pop_back();
<a name="l00109"></a>00109   
<a name="l00110"></a>00110   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00111"></a>00111   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00112"></a>00112   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00113"></a>00113   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">// ========prepare to generate some data for the tests ================//</span>
<a name="l00116"></a>00116     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00117"></a>00117     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00118"></a>00118     gsl_rng * r;
<a name="l00119"></a>00119     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00120"></a>00120     gsl_rng_env_setup();
<a name="l00121"></a>00121     T = gsl_rng_default;
<a name="l00122"></a>00122     r = gsl_rng_alloc (T);
<a name="l00123"></a>00123     gsl_rng_set(r, dataSeed);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125    <span class="comment">//set up a random number generator for gaussian rvs</span>
<a name="l00126"></a>00126      <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00127"></a>00127      gsl_rng * r1;
<a name="l00128"></a>00128      gsl_rng_env_setup();
<a name="l00129"></a>00129      T1 = gsl_rng_default;
<a name="l00130"></a>00130      r1 = gsl_rng_alloc (T1);
<a name="l00131"></a>00131      gsl_rng_set(r1, dataSeed);
<a name="l00132"></a>00132      
<a name="l00133"></a>00133   <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
<a name="l00134"></a>00134   <span class="keywordtype">double</span> a=0, b=1;
<a name="l00135"></a>00135   vector&lt;double&gt; u;
<a name="l00136"></a>00136   <span class="keywordtype">int</span> j;
<a name="l00137"></a>00137   <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00138"></a>00138       u.push_back(gsl_ran_flat(r, a, b));
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141   <span class="comment">// number of components</span>
<a name="l00142"></a>00142   <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00143"></a>00143   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">// get cumulative sum of the weights</span>
<a name="l00146"></a>00146   <span class="keywordtype">double</span> WeightCum[comp];
<a name="l00147"></a>00147   <span class="comment">//initialize the array</span>
<a name="l00148"></a>00148   WeightCum[0] = Weight[0]; 
<a name="l00149"></a>00149   cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
<a name="l00150"></a>00150    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
<a name="l00151"></a>00151     WeightCum[j] = WeightCum[j-1] + Weight[j];
<a name="l00152"></a>00152   }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154   <span class="comment">//Create mixture data using component densities that are normal.</span>
<a name="l00155"></a>00155   cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
<a name="l00156"></a>00156   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
<a name="l00157"></a>00157   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00158"></a>00158   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00159"></a>00159     <span class="comment">//find the number of members generated from each component.</span>
<a name="l00160"></a>00160     <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
<a name="l00161"></a>00161       <span class="keywordtype">int</span> ind=0;
<a name="l00162"></a>00162       cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
<a name="l00163"></a>00163       <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
<a name="l00164"></a>00164       cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
<a name="l00165"></a>00165       <span class="comment">//now generate the data</span>
<a name="l00166"></a>00166       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
<a name="l00167"></a>00167         rvector thisrv(1);
<a name="l00168"></a>00168         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
<a name="l00169"></a>00169         thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
<a name="l00170"></a>00170         theData.push_back(thisrv);
<a name="l00171"></a>00171       }
<a name="l00172"></a>00172     }
<a name="l00173"></a>00173   <span class="comment">//===============finish generating data============================//</span>
<a name="l00174"></a>00174 
<a name="l00175"></a>00175   <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
<a name="l00176"></a>00176   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00177"></a>00177   cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
<a name="l00178"></a>00178   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
<a name="l00179"></a>00179   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
<a name="l00182"></a>00182   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
<a name="l00185"></a>00185   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
<a name="l00188"></a>00188   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190   <span class="comment">// containers for output needed</span>
<a name="l00191"></a>00191   vector&lt;real&gt; IAEOpt;
<a name="l00192"></a>00192   vector&lt;int&gt; NumLeafNodesOpt;
<a name="l00193"></a>00193   
<a name="l00194"></a>00194   real IAE1=100.0;
<a name="l00195"></a>00195   <span class="keywordtype">int</span> NumLeafNodes1;
<a name="l00196"></a>00196   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
<a name="l00197"></a>00197   vector&lt;double&gt; Times1;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   real IAE2=100.0;
<a name="l00200"></a>00200   <span class="keywordtype">int</span> NumLeafNodes2;
<a name="l00201"></a>00201   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
<a name="l00202"></a>00202   vector&lt;double&gt; Times2;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   real IAE3=100.0;
<a name="l00205"></a>00205   <span class="keywordtype">int</span> NumLeafNodes3;
<a name="l00206"></a>00206   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
<a name="l00207"></a>00207    vector&lt;double&gt; Times3;
<a name="l00208"></a>00208    
<a name="l00209"></a>00209   real IAE4=100.0;
<a name="l00210"></a>00210   <span class="keywordtype">int</span> NumLeafNodes4;
<a name="l00211"></a>00211   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
<a name="l00212"></a>00212   vector&lt;double&gt; Times4;
<a name="l00213"></a>00213 
<a name="l00214"></a>00214   <span class="comment">//do exhaustive PQ for steps of n*0.005</span>
<a name="l00215"></a>00215   <span class="comment">// set up function objects for a priority split</span>
<a name="l00216"></a>00216   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00217"></a>00217   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
<a name="l00218"></a>00218   <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220   <span class="keywordtype">double</span> rootBoxVol = 0.0;
<a name="l00221"></a>00221   ivector pavingBox;
<a name="l00222"></a>00222   
<a name="l00223"></a>00223   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
<a name="l00224"></a>00224   
<a name="l00225"></a>00225     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1; 
<a name="l00226"></a>00226     successfulInsertion1= myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00227"></a>00227     rootBoxVol = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00228"></a>00228     pavingBox = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
<a name="l00229"></a>00229     
<a name="l00230"></a>00230     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2; 
<a name="l00231"></a>00231     successfulInsertion2= myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00232"></a>00232     
<a name="l00233"></a>00233     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3; 
<a name="l00234"></a>00234     successfulInsertion3= myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00235"></a>00235     
<a name="l00236"></a>00236     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4; 
<a name="l00237"></a>00237     successfulInsertion4= myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00238"></a>00238 
<a name="l00239"></a>00239     <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
<a name="l00240"></a>00240         &amp;&amp; successfulInsertion4) {
<a name="l00241"></a>00241 
<a name="l00242"></a>00242       <span class="keywordtype">int</span> finalK = int(i*0.005*n);
<a name="l00243"></a>00243       cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00244"></a>00244       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00245"></a>00245       <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00246"></a>00246       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00247"></a>00247 
<a name="l00248"></a>00248       <span class="keywordtype">size_t</span> maxLeafNodes = n;
<a name="l00249"></a>00249       <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00250"></a>00250       
<a name="l00251"></a>00251       <span class="comment">// we want to check the timings for this</span>
<a name="l00252"></a>00252       clock_t start, end;
<a name="l00253"></a>00253       <span class="keywordtype">double</span> timing; 
<a name="l00254"></a>00254       
<a name="l00255"></a>00255       <span class="comment">// do the priority split for compCount</span>
<a name="l00256"></a>00256       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00257"></a>00257       successfulPQSplit1 = myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00258"></a>00258            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00259"></a>00259       end = clock();
<a name="l00260"></a>00260       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00261"></a>00261       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00262"></a>00262       Times1.push_back(timing);
<a name="l00263"></a>00263       
<a name="l00264"></a>00264       <span class="comment">// do the priority split for compVol</span>
<a name="l00265"></a>00265       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00266"></a>00266       successfulPQSplit2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compVol,
<a name="l00267"></a>00267            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00268"></a>00268       end = clock();
<a name="l00269"></a>00269       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00270"></a>00270       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00271"></a>00271       Times2.push_back(timing);
<a name="l00272"></a>00272       
<a name="l00273"></a>00273       <span class="comment">// do the priority split for compVol and remove empty boxes</span>
<a name="l00274"></a>00274       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00275"></a>00275       successfulPQSplit3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compVol,
<a name="l00276"></a>00276            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00277"></a>00277       end = clock();
<a name="l00278"></a>00278       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00279"></a>00279       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00280"></a>00280       Times3.push_back(timing);
<a name="l00281"></a>00281       
<a name="l00282"></a>00282       <span class="comment">// do the priority split for compMassVol</span>
<a name="l00283"></a>00283       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00284"></a>00284       successfulPQSplit4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compArea,
<a name="l00285"></a>00285            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
<a name="l00286"></a>00286       end = clock();
<a name="l00287"></a>00287       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00288"></a>00288       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00289"></a>00289       Times4.push_back(timing);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291       <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
<a name="l00292"></a>00292           &amp;&amp; successfulPQSplit4) {
<a name="l00293"></a>00293 
<a name="l00294"></a>00294         <span class="comment">//get the IAE</span>
<a name="l00295"></a>00295         cout &lt;&lt; <span class="stringliteral">&quot;Get IAE: &quot;</span> &lt;&lt; endl;
<a name="l00296"></a>00296         real midIAE1 = mid(myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00297"></a>00297         <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
<a name="l00298"></a>00298           cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
<a name="l00299"></a>00299           IAE1 = midIAE1;
<a name="l00300"></a>00300           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00301"></a>00301           optHist1 = myHist1;
<a name="l00302"></a>00302         }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304         <span class="comment">//get the IAE</span>
<a name="l00305"></a>00305         real midIAE2 = mid(myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00306"></a>00306         <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
<a name="l00307"></a>00307           cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
<a name="l00308"></a>00308           IAE2 = midIAE2;
<a name="l00309"></a>00309           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00310"></a>00310           optHist2 = myHist2;
<a name="l00311"></a>00311         }
<a name="l00312"></a>00312 
<a name="l00313"></a>00313         real midIAE3 = mid(myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00314"></a>00314         <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
<a name="l00315"></a>00315           cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
<a name="l00316"></a>00316           IAE3 = midIAE3;
<a name="l00317"></a>00317           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00318"></a>00318           optHist3 = myHist3;
<a name="l00319"></a>00319         }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321         
<a name="l00322"></a>00322         <span class="comment">//get the IAE</span>
<a name="l00323"></a>00323         real midIAE4 = mid(myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00324"></a>00324         <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
<a name="l00325"></a>00325           cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
<a name="l00326"></a>00326           IAE4 = midIAE4;
<a name="l00327"></a>00327           cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00328"></a>00328           optHist4 = myHist4;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00331"></a>00331     }<span class="comment">// end of if(successfulInsertion)</span>
<a name="l00332"></a>00332   } <span class="comment">// end of iterating through different kn&#39;s</span>
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
<a name="l00335"></a>00335     successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
<a name="l00336"></a>00336     &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
<a name="l00337"></a>00337 
<a name="l00338"></a>00338     <span class="comment">// keep the optimal IAEs</span>
<a name="l00339"></a>00339     IAEOpt.push_back(IAE1); 
<a name="l00340"></a>00340     IAEOpt.push_back(IAE2);
<a name="l00341"></a>00341     IAEOpt.push_back(IAE3);
<a name="l00342"></a>00342     IAEOpt.push_back(IAE4);
<a name="l00343"></a>00343     
<a name="l00344"></a>00344     <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
<a name="l00345"></a>00345     NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00346"></a>00346     NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00347"></a>00347     NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00348"></a>00348     NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00349"></a>00349       
<a name="l00350"></a>00350     <span class="comment">// output the optimal histograms</span>
<a name="l00351"></a>00351     std::ostringstream stm;
<a name="l00352"></a>00352     stm &lt;&lt; simNum;
<a name="l00353"></a>00353     <span class="comment">// create a name for the file to output</span>
<a name="l00354"></a>00354     <span class="keywordtype">string</span> fileName;
<a name="l00355"></a>00355     fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
<a name="l00356"></a>00356     fileName += stm.str();
<a name="l00357"></a>00357     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00358"></a>00358     optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00359"></a>00359 
<a name="l00360"></a>00360     <span class="comment">// create a name for the file to output</span>
<a name="l00361"></a>00361     fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
<a name="l00362"></a>00362     fileName += stm.str();
<a name="l00363"></a>00363     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00364"></a>00364     optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366     <span class="comment">// create a name for the file to output</span>
<a name="l00367"></a>00367     fileName = <span class="stringliteral">&quot;HistVolRemoveEmpty&quot;</span>;
<a name="l00368"></a>00368     fileName += stm.str();
<a name="l00369"></a>00369     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00370"></a>00370     optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00371"></a>00371 
<a name="l00372"></a>00372     <span class="comment">// create a name for the file to output</span>
<a name="l00373"></a>00373     fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
<a name="l00374"></a>00374     fileName += stm.str();
<a name="l00375"></a>00375     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00376"></a>00376     optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="comment">// output IAE, number of leaf nodes, times to file</span>
<a name="l00379"></a>00379     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutput&quot;</span>;
<a name="l00380"></a>00380     PQFileName += stm.str();
<a name="l00381"></a>00381     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00382"></a>00382     oss.open(PQFileName.c_str());
<a name="l00383"></a>00383     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
<a name="l00384"></a>00384       oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00385"></a>00385       oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
<a name="l00386"></a>00386     }
<a name="l00387"></a>00387     oss &lt;&lt; flush;
<a name="l00388"></a>00388     oss.close();
<a name="l00389"></a>00389     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
<a name="l00390"></a>00390         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00391"></a>00391         
<a name="l00392"></a>00392     PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutputTimes&quot;</span>;
<a name="l00393"></a>00393     PQFileName += stm.str();
<a name="l00394"></a>00394     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00395"></a>00395     oss.open(PQFileName.c_str());
<a name="l00396"></a>00396     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
<a name="l00397"></a>00397       oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00398"></a>00398       oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00399"></a>00399       oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00400"></a>00400       oss &lt;&lt; Times4[i] &lt;&lt; endl;
<a name="l00401"></a>00401     }
<a name="l00402"></a>00402     oss &lt;&lt; flush;
<a name="l00403"></a>00403     oss.close();
<a name="l00404"></a>00404     cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
<a name="l00405"></a>00405         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00406"></a>00406   } <span class="comment">// end of successes</span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408 <span class="comment">//=================end of exhaustive PQ=================================// </span>
<a name="l00409"></a>00409 
<a name="l00410"></a>00410 <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00411"></a>00411   cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
<a name="l00412"></a>00412   <span class="comment">//sort the data first</span>
<a name="l00413"></a>00413   <span class="comment">// put the data into a list to sort the data</span>
<a name="l00414"></a>00414   <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
<a name="l00415"></a>00415   list&lt;rvector&gt; rvecList;
<a name="l00416"></a>00416   list&lt;rvector&gt;::iterator rvecListIt;
<a name="l00417"></a>00417   <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
<a name="l00418"></a>00418     rvector thisrv(1);
<a name="l00419"></a>00419     thisrv = *rvecIt;
<a name="l00420"></a>00420     rvecList.push_back(thisrv);
<a name="l00421"></a>00421   }
<a name="l00422"></a>00422   rvecList.sort(); <span class="comment">//sort the data</span>
<a name="l00423"></a>00423   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
<a name="l00424"></a>00424   <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
<a name="l00425"></a>00425   { 
<a name="l00426"></a>00426     rvector thisrv(1);
<a name="l00427"></a>00427     thisrv = *rvecListIt;
<a name="l00428"></a>00428     sortedData.push_back(thisrv);
<a name="l00429"></a>00429   }
<a name="l00430"></a>00430   
<a name="l00431"></a>00431   <span class="comment">//mae regular histograms with the 3 rules</span>
<a name="l00432"></a>00432   cout &lt;&lt; <span class="stringliteral">&quot;=====Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
<a name="l00433"></a>00433   vector&lt;real&gt; regHistIAE;
<a name="l00434"></a>00434   vector&lt;int&gt; nBins;
<a name="l00435"></a>00435 
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00438"></a>00438     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00439"></a>00439     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00440"></a>00440     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00441"></a>00441     nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00442"></a>00442     real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(n, myRegHist, mixt, Tol, Deg));
<a name="l00443"></a>00443     regHistIAE.push_back(midIAE);
<a name="l00444"></a>00444     
<a name="l00445"></a>00445     <span class="comment">// output the histogram</span>
<a name="l00446"></a>00446     <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegBW&quot;</span>;
<a name="l00447"></a>00447     ostringstream stm2;
<a name="l00448"></a>00448     stm2 &lt;&lt; bw;
<a name="l00449"></a>00449     fileName += stm2.str();
<a name="l00450"></a>00450     fileName += stm.str();
<a name="l00451"></a>00451     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00452"></a>00452     <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(myRegHist, fileName);
<a name="l00453"></a>00453   }
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   <span class="comment">//make regular histograms with manual bandwidth</span>
<a name="l00456"></a>00456   cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms with manual bandwidths==&quot;</span> &lt;&lt; endl;
<a name="l00457"></a>00457    
<a name="l00458"></a>00458   real regHistIAEM = 100;
<a name="l00459"></a>00459   <a class="code" href="structRegHist.shtml">RegHist</a> regHistOpt;
<a name="l00460"></a>00460    
<a name="l00461"></a>00461    <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00462"></a>00462   cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;
<a name="l00463"></a>00463   maxLeafNodes = 1000;
<a name="l00464"></a>00464   <span class="keywordtype">size_t</span> flagCheck = 0;
<a name="l00465"></a>00465   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= maxLeafNodes; i++) {
<a name="l00466"></a>00466     <span class="keywordtype">double</span> bw = rootBoxVol/(i*1.0);
<a name="l00467"></a>00467     cout &lt;&lt; <span class="stringliteral">&quot;Nbins: &quot;</span> &lt;&lt; i &lt;&lt; endl;
<a name="l00468"></a>00468     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00469"></a>00469     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00470"></a>00470     real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(n, myRegHist, mixt, Tol, Deg));
<a name="l00471"></a>00471     
<a name="l00472"></a>00472     <span class="comment">// get the minimum IAE</span>
<a name="l00473"></a>00473     <span class="keywordflow">if</span> ( midIAE &lt; regHistIAEM ) {
<a name="l00474"></a>00474       cout &lt;&lt; midIAE &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; regHistIAEM &lt;&lt; endl;
<a name="l00475"></a>00475       regHistIAEM = midIAE;
<a name="l00476"></a>00476       regHistOpt = myRegHist;
<a name="l00477"></a>00477     flagCheck = 0;
<a name="l00478"></a>00478     }
<a name="l00479"></a>00479     <span class="keywordflow">else</span> { 
<a name="l00480"></a>00480       flagCheck++; 
<a name="l00481"></a>00481       <span class="keywordflow">if</span> ( flagCheck &gt;= 100) { <span class="keywordflow">break</span>; }
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483   }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485   <span class="comment">// get the final IAE</span>
<a name="l00486"></a>00486   nBins.push_back(regHistOpt.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00487"></a>00487   regHistIAE.push_back(regHistIAEM);
<a name="l00488"></a>00488 
<a name="l00489"></a>00489   <span class="comment">// output the histogram to .txt</span>
<a name="l00490"></a>00490   <span class="keywordtype">string</span> fileName = <span class="stringliteral">&quot;HistRegOpt&quot;</span>;
<a name="l00491"></a>00491   fileName += stm.str();
<a name="l00492"></a>00492   fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00493"></a>00493   <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(regHistOpt, fileName);
<a name="l00494"></a>00494 
<a name="l00495"></a>00495 
<a name="l00496"></a>00496   <span class="comment">// output the IAEs</span>
<a name="l00497"></a>00497   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00498"></a>00498   outputFileName = <span class="stringliteral">&quot;FinMixIAERegHist&quot;</span>;
<a name="l00499"></a>00499   outputFileName += stm.str();
<a name="l00500"></a>00500   outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00501"></a>00501   oss.open(outputFileName.c_str());
<a name="l00502"></a>00502   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; 4; i++) {
<a name="l00503"></a>00503     oss &lt;&lt; regHistIAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[i] &lt;&lt; endl;
<a name="l00504"></a>00504   }
<a name="l00505"></a>00505   oss &lt;&lt; flush;
<a name="l00506"></a>00506   oss.close();  
<a name="l00507"></a>00507   std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 <span class="comment">// free the random number generator</span>
<a name="l00511"></a>00511 gsl_rng_free(r);
<a name="l00512"></a>00512 gsl_rng_free(r1);
<a name="l00513"></a>00513 
<a name="l00514"></a>00514 <span class="keywordflow">return</span> 0;
<a name="l00515"></a>00515 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FiniteMixture_8cpp.shtml">FiniteMixture.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
