<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spalgorithms.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spalgorithms_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spalgorithms.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spalgorithms_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="comment">/*!/ \file:     spalgorithms.cpp</span>
<a name="l00023"></a>00023 <span class="comment">\brief SPnode (SubPaving) and algorithm function definitions</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="spalgorithms_8hpp.shtml" title="SPnode (SubPaving) algorithm function declarations.">spalgorithms.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">// include fstream so as to be able to output a file</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// to use toolz methods</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="comment">// spnode headers</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="sptemplates_8hpp.shtml" title="Templatised functions using node type concepts.">sptemplates.hpp</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">//src_trunk_0701</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;spminimalnode.hpp&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>std;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">namespace </span>subpavings {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="comment">// Mince</span>
<a name="l00048"></a>00048     <span class="comment">// Transforms a minimal subpaving into a non-minimal subpaving</span>
<a name="l00049"></a>00049     <span class="comment">// ie may have sibling leaves</span>
<a name="l00050"></a>00050     <span class="comment">// Any leaf subpaving with box with diameter &gt; eps will be expanded</span>
<a name="l00051"></a>00051     <span class="comment">// Mince will keep mincing until every leaf subpaving</span>
<a name="l00052"></a>00052     <span class="comment">// has a box with diameter &lt; eps</span>
<a name="l00053"></a><a class="code" href="namespacesubpavings.shtml#a9d7eaadb31b3f9c2a28ad4af1f977a15">00053</a>     <span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">double</span> eps)
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055         <span class="keywordflow">try</span> {
<a name="l00056"></a>00056             <span class="comment">// only try to expand if we have a non-empty leaf</span>
<a name="l00057"></a>00057             <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn) &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) {
<a name="l00058"></a>00058 
<a name="l00059"></a>00059                 <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// valued with MaxDiam function below</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061                 <span class="comment">// if the leaf&#39;s box is &gt;= to eps, keep expanding</span>
<a name="l00062"></a>00062                 <span class="keywordflow">if</span>(<a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp) &gt;= eps) {
<a name="l00063"></a>00063                     <span class="comment">// comp is the dimension to split on</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065                     <span class="comment">// if leaf and box not &lt; eps then expand</span>
<a name="l00066"></a>00066                     <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(spn, maxdiamcomp);
<a name="l00067"></a>00067                 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069             } <span class="comment">// end !isEmpty() &amp;&amp; isLeaf()</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071             <span class="comment">// not a leaf, so Mince the children</span>
<a name="l00072"></a>00072             <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(spn) &amp;&amp; !<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) {
<a name="l00073"></a>00073                 <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(), eps);
<a name="l00074"></a>00074                 <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(), eps);
<a name="l00075"></a>00075             }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077             <span class="comment">// if spn points to an empty subpaving, nothing happens</span>
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00080"></a>00080         {
<a name="l00081"></a>00081             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory &quot;</span>
<a name="l00082"></a>00082                 &lt;&lt; <span class="stringliteral">&quot;in Mince(...)&quot;</span> &lt;&lt; std::endl;
<a name="l00083"></a>00083             <span class="keywordflow">throw</span>;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="comment">// --------------------- implementing SIVIA---------------------</span>
<a name="l00091"></a>00091     <span class="comment">/* Set Inversion Via Interval Analysis method taken from</span>
<a name="l00092"></a>00092 <span class="comment">    Jaulin et al., pringer 2001.</span>
<a name="l00093"></a>00093 <span class="comment"></span>
<a name="l00094"></a>00094 <span class="comment">    SIVIA is not templatised because it only makes sense for basic</span>
<a name="l00095"></a>00095 <span class="comment">    SPnodes, but it uses the templatised function Reunite</span>
<a name="l00096"></a>00096 <span class="comment">    */</span>
<a name="l00097"></a><a class="code" href="namespacesubpavings.shtml#af397899ec8f3bb396271e6b4fea28dea">00097</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a> (<a class="code" href="namespacesubpavings.shtml#a4ca48fac31a3dcc26d5b51b1ee3cd0d9" title="Define type &quot;Pointer to an interval boolean test&quot;.">PIBT</a> BoolTest, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> toInvert,
<a name="l00098"></a>00098                 <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> search, <span class="keyword">const</span> <span class="keywordtype">double</span> eps)
<a name="l00099"></a>00099     {
<a name="l00100"></a>00100         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* newNode = NULL;  <span class="comment">// for return value</span>
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <span class="keywordflow">try</span> {
<a name="l00103"></a>00103             <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> test = <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105             <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(search)) { <span class="comment">// if search is not null or empty</span>
<a name="l00106"></a>00106 
<a name="l00107"></a>00107                 <span class="comment">// test the box of the given searchsubpaving</span>
<a name="l00108"></a>00108                 <span class="comment">// using given test (gives f) and given image to invert</span>
<a name="l00109"></a>00109                 test = BoolTest(search-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), toInvert);
<a name="l00110"></a>00110             }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112             <span class="keywordflow">if</span> (!<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(search) &amp;&amp; test!=<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>) {
<a name="l00113"></a>00113 
<a name="l00114"></a>00114                 <span class="keywordtype">int</span> maxdiamcomp; <span class="comment">// for MaxDiam() below</span>
<a name="l00115"></a>00115 
<a name="l00116"></a>00116                 <span class="keywordtype">double</span> boxMaxDiam = <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a>(search-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>(), maxdiamcomp);
<a name="l00117"></a>00117 
<a name="l00118"></a>00118                 <span class="comment">// we know that the test was not BI_FALSE,</span>
<a name="l00119"></a>00119                 <span class="comment">// so it could be BI_TRUE or BI_INDET</span>
<a name="l00120"></a>00120                 <span class="comment">// if it is BI_INDET and the box maximum diameter</span>
<a name="l00121"></a>00121                 <span class="comment">// is &gt;= eps then we keep trying to expand</span>
<a name="l00122"></a>00122                 <span class="keywordflow">if</span> (test==<a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a> || boxMaxDiam &lt; eps) {
<a name="l00123"></a>00123 
<a name="l00124"></a>00124                     newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>(*search);
<a name="l00125"></a>00125                 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127                 <span class="comment">// if test is BI_INDET and the box maximum diameter</span>
<a name="l00128"></a>00128                 <span class="comment">// is &gt;= eps then we keep trying to expand</span>
<a name="l00129"></a>00129                 <span class="keywordflow">else</span>  {
<a name="l00130"></a>00130 
<a name="l00131"></a>00131                     <span class="comment">// expand search if search is a leaf</span>
<a name="l00132"></a>00132                     <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(search)) <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(search,
<a name="l00133"></a>00133                                             maxdiamcomp);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135                     <span class="comment">// ReUnite is used to get a minimal subpaving</span>
<a name="l00136"></a>00136                     <span class="comment">// from merging two subpavings</span>
<a name="l00137"></a>00137                     newNode = Reunite&lt;SPnode&gt;(
<a name="l00138"></a>00138                                 <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a>(BoolTest, toInvert,
<a name="l00139"></a>00139                                 search-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(), eps),
<a name="l00140"></a>00140                             <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a>(BoolTest, toInvert,
<a name="l00141"></a>00141                             search-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(), eps),
<a name="l00142"></a>00142                                             search-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00143"></a>00143                 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00146"></a>00146             } <span class="comment">// end !isEmpty(search) &amp;&amp; test!=BI_FALSE</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148             <span class="comment">// if isEmpty(search) or test==BI_FALSE,</span>
<a name="l00149"></a>00149             <span class="comment">// newNode will be the initialisation value of NULL</span>
<a name="l00150"></a>00150         }
<a name="l00151"></a>00151         <span class="keywordflow">catch</span> (bad_alloc&amp; ba)
<a name="l00152"></a>00152         {
<a name="l00153"></a>00153             <span class="keywordtype">string</span> msg(ba.what());
<a name="l00154"></a>00154             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Sivia&quot;</span> &lt;&lt; std::endl;
<a name="l00155"></a>00155             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157         <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00158"></a>00158             <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00159"></a>00159             std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in Sivia: original error &quot;</span>
<a name="l00160"></a>00160                                                 &lt;&lt; msg &lt;&lt; endl;
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00163"></a>00163             <span class="keywordtype">string</span> msg(e.what());
<a name="l00164"></a>00164             std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in Sivia: original error &quot;</span> &lt;&lt; msg &lt;&lt; endl;
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         <span class="keywordflow">return</span> newNode;
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171     <span class="comment">// Function to evaluate all the boxes in subpaving</span>
<a name="l00172"></a>00172     <span class="comment">// builds an image list and</span>
<a name="l00173"></a>00173     <span class="comment">// convex hull of images of parts of the subpaving</span>
<a name="l00174"></a><a class="code" href="namespacesubpavings.shtml#aa47cfd8c78e0be2e255006d743ffd214">00174</a>     <span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(<a class="code" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22" title="Define type &quot;Pointer to an interval vector function&quot;.">PIVF</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn,
<a name="l00175"></a>00175                 <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; evalImages, ivector&amp; hull)
<a name="l00176"></a>00176     {
<a name="l00177"></a>00177         <span class="comment">// later on if we want to generalise this,</span>
<a name="l00178"></a>00178         <span class="comment">// we might have a base Box class and then</span>
<a name="l00179"></a>00179         <span class="comment">// use list&lt;Box&gt;&amp; evalImages and Box&amp; hull</span>
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         <span class="keywordflow">if</span> (spn!=NULL &amp;&amp; <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) {
<a name="l00182"></a>00182             <span class="comment">// get image using PIVF function f on box of this node</span>
<a name="l00183"></a>00183             ivector image = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00184"></a>00184 
<a name="l00185"></a>00185             <span class="comment">// if no images in image set yet, make hull the image</span>
<a name="l00186"></a>00186             <span class="comment">// if are images in image set, hull is convex hull of</span>
<a name="l00187"></a>00187             <span class="comment">// the current hull and ivector image from f(Box(A))</span>
<a name="l00188"></a>00188             <span class="keywordflow">if</span> (evalImages.size() == 0) hull = image;
<a name="l00189"></a>00189             <span class="keywordflow">else</span> hull = (hull | image);
<a name="l00190"></a>00190 
<a name="l00191"></a>00191             <span class="comment">// add the image to the list of images</span>
<a name="l00192"></a>00192             evalImages.push_back(image);
<a name="l00193"></a>00193         } <span class="comment">// end of is a leaf</span>
<a name="l00194"></a>00194 
<a name="l00195"></a>00195         <span class="comment">// recurse on children</span>
<a name="l00196"></a>00196         <span class="keywordflow">if</span> (spn!=NULL &amp;&amp; !<a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(spn)) {
<a name="l00197"></a>00197 
<a name="l00198"></a>00198             <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>(), evalImages, hull);
<a name="l00199"></a>00199             <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>(), evalImages, hull);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         } <span class="comment">// end of if is not a leaf</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203         <span class="comment">// case where A == NULL does nothing, just returns</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205         <span class="keywordflow">return</span>;
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <span class="comment">// Get a outer paving for the image of spn under f</span>
<a name="l00210"></a>00210     <span class="comment">// Image evaluation</span>
<a name="l00211"></a>00211     <span class="comment">// ImageSp is not templatised because it only makes sense for</span>
<a name="l00212"></a>00212     <span class="comment">// basic SPnodes, but it uses the templatised function Regularize</span>
<a name="l00213"></a>00213 
<a name="l00214"></a><a class="code" href="namespacesubpavings.shtml#af6d00551176ec8a60444c7115aa08ca0">00214</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="AIAsubpaving_8cpp.shtml#a6df9f8ffe0d5fbd9ec10bd6954b3b800">ImageSp</a>(<a class="code" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22" title="Define type &quot;Pointer to an interval vector function&quot;.">PIVF</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *spn, <span class="keywordtype">double</span> eps)
<a name="l00215"></a>00215     {
<a name="l00216"></a>00216         <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> images;
<a name="l00217"></a>00217         ivector hull;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         <span class="keywordflow">try</span> {
<a name="l00220"></a>00220 
<a name="l00221"></a>00221             <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(spn, eps);
<a name="l00222"></a>00222 
<a name="l00223"></a>00223             <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, spn, images, hull);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225             <span class="comment">/* the output of eval is not included in the AIA examples,</span>
<a name="l00226"></a>00226 <span class="comment">            but it makes an interesting comparison to final subpaving */</span>
<a name="l00227"></a>00227             ofstream os2(<span class="stringliteral">&quot;eval.txt&quot;</span>);            <span class="comment">// Filename</span>
<a name="l00228"></a>00228             list&lt;ivector&gt;::iterator it;
<a name="l00229"></a>00229             <span class="keywordflow">for</span> (it=images.begin(); it!=images.end(); it++) {
<a name="l00230"></a>00230                 ivector box = *it;
<a name="l00231"></a>00231                 os2 &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span> &lt;&lt; Inf(box[1]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span> &lt;&lt; Sup(box[1])
<a name="l00232"></a>00232                     &lt;&lt; <span class="stringliteral">&quot; ] , [ &quot;</span> &lt;&lt; Inf(box[2]) &lt;&lt; <span class="stringliteral">&quot; , &quot;</span>
<a name="l00233"></a>00233                     &lt;&lt; Sup(box[2]) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt;  endl;
<a name="l00234"></a>00234             }
<a name="l00235"></a>00235             <span class="comment">// end of difference from AIA examples</span>
<a name="l00236"></a>00236         }
<a name="l00237"></a>00237         <span class="keywordflow">catch</span> (bad_alloc&amp; ba)
<a name="l00238"></a>00238         {
<a name="l00239"></a>00239             <span class="keywordtype">string</span> msg(ba.what());
<a name="l00240"></a>00240             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in ImageSp&quot;</span> &lt;&lt; std::endl;
<a name="l00241"></a>00241             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00242"></a>00242         }
<a name="l00243"></a>00243         <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00244"></a>00244             <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00245"></a>00245             std:: cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in ImageSp: original error &quot;</span>
<a name="l00246"></a>00246                                                 &lt;&lt; msg &lt;&lt; endl;
<a name="l00247"></a>00247         }
<a name="l00248"></a>00248         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00249"></a>00249             <span class="keywordtype">string</span> msg(e.what());
<a name="l00250"></a>00250             std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in ImageSp: original error &quot;</span> &lt;&lt; msg &lt;&lt; endl;
<a name="l00251"></a>00251         }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253         <span class="comment">// make a minimal subpaving out of images, with root box hull</span>
<a name="l00254"></a>00254         <span class="keywordflow">return</span> (Regularize&lt;SPnode&gt;(hull, images, eps));
<a name="l00255"></a>00255 
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">// Get a non-minimal outer paving for the image of spn under f</span>
<a name="l00259"></a>00259     <span class="comment">// Image evaluation</span>
<a name="l00260"></a>00260     <span class="comment">// ImageSpNonMinimal is not templatised because it only makes sense</span>
<a name="l00261"></a>00261     <span class="comment">// for basic SPnodes, but it uses the templatised function</span>
<a name="l00262"></a>00262     <span class="comment">// RegularizeNonMinimal</span>
<a name="l00263"></a><a class="code" href="namespacesubpavings.shtml#af0cce4ab9cf30918f62b403ce840776b">00263</a>     <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="namespacesubpavings.shtml#af0cce4ab9cf30918f62b403ce840776b">ImageSpNonMinimal</a>(<a class="code" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22" title="Define type &quot;Pointer to an interval vector function&quot;.">PIVF</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *spn, <span class="keywordtype">double</span> eps)
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265         <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a> images;
<a name="l00266"></a>00266         ivector hull;
<a name="l00267"></a>00267 
<a name="l00268"></a>00268         <span class="keywordflow">try</span> {
<a name="l00269"></a>00269 
<a name="l00270"></a>00270             <a class="code" href="AIAsubpaving_8cpp.shtml#ab7921c5bd80f01985ee134c5d2ab595d">Mince</a>(spn, eps);
<a name="l00271"></a>00271 
<a name="l00272"></a>00272             <a class="code" href="AIAsubpaving_8cpp.shtml#ae77e1251191663a8f7eb8043cc1b3774">Evaluate</a>(f, spn, images, hull);
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274         <span class="keywordflow">catch</span> (bad_alloc&amp; ba)
<a name="l00275"></a>00275         {
<a name="l00276"></a>00276             <span class="keywordtype">string</span> msg(ba.what());
<a name="l00277"></a>00277             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in ImageSpNonMinimal&quot;</span>
<a name="l00278"></a>00278                                                 &lt;&lt; std::endl;
<a name="l00279"></a>00279             std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281         <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l00282"></a>00282             <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l00283"></a>00283             std::cout &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in ImageSpNonMinimal: original error &quot;</span>
<a name="l00284"></a>00284                                                 &lt;&lt; msg &lt;&lt; endl;
<a name="l00285"></a>00285         }
<a name="l00286"></a>00286         <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00287"></a>00287             <span class="keywordtype">string</span> msg(e.what());
<a name="l00288"></a>00288             std:: cout &lt;&lt; <span class="stringliteral">&quot;Error in ImageSpNonMinimal: original error &quot;</span>
<a name="l00289"></a>00289                                                 &lt;&lt; msg &lt;&lt; endl;
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292         <span class="comment">// make a non-minimal subpaving from images,</span>
<a name="l00293"></a>00293         <span class="comment">// with root box hull</span>
<a name="l00294"></a>00294         <span class="keywordflow">return</span> (RegularizeNonMinimal&lt;SPnode&gt;(hull, images, eps));
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="comment">// -----these functions use inheritance polymorphism</span>
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <span class="comment">// graft two sibling nodes onto a leaf SubPaving</span>
<a name="l00301"></a>00301     <span class="comment">// comp is the dimension to split on</span>
<a name="l00302"></a><a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a">00302</a>     <span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">int</span> comp)
<a name="l00303"></a>00303     {
<a name="l00304"></a>00304         <span class="keywordflow">try</span> {
<a name="l00305"></a>00305 
<a name="l00306"></a>00306             <span class="comment">// uses nodeExpand for type of object pointed to by spn</span>
<a name="l00307"></a>00307             <span class="keywordflow">if</span> (spn!=NULL) spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>(comp);
<a name="l00308"></a>00308         }
<a name="l00309"></a>00309         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00310"></a>00310         {
<a name="l00311"></a>00311             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Expand&quot;</span>
<a name="l00312"></a>00312                                     &lt;&lt; std::endl;
<a name="l00313"></a>00313             <span class="keywordflow">throw</span>;
<a name="l00314"></a>00314         }
<a name="l00315"></a>00315     }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317     <span class="comment">// graft two sibling nodes onto a leaf SubPaving</span>
<a name="l00318"></a>00318     <span class="comment">// finds its own dimension to split on</span>
<a name="l00319"></a><a class="code" href="namespacesubpavings.shtml#a2f85b5496c772efbfd75e50c16a5ab01">00319</a>     <span class="keywordtype">void</span> <a class="code" href="AIAsubpaving_8cpp.shtml#aa3ceca06b6916b5ac1382a5aa8bf56aa">Expand</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn)
<a name="l00320"></a>00320     {
<a name="l00321"></a>00321         <span class="keywordflow">try</span> {
<a name="l00322"></a>00322             <span class="comment">// uses nodeExpand() for type of object pointed to by spn</span>
<a name="l00323"></a>00323             <span class="keywordflow">if</span> (spn!=NULL) spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>();
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00326"></a>00326         {
<a name="l00327"></a>00327             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in Expand&quot;</span> &lt;&lt; std::endl;
<a name="l00328"></a>00328             <span class="keywordflow">throw</span>;
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332    <span class="comment">// graft two sibling nodes onto a leaf SubPaving</span>
<a name="l00333"></a>00333     <span class="comment">// finds its own dimension to split on</span>
<a name="l00334"></a>00334     <span class="comment">// brings validation data along</span>
<a name="l00335"></a><a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169">00335</a>     <span class="keywordtype">void</span> <a class="code" href="namespacesubpavings.shtml#a6a89808457c34dbca09c2c75ef57c169" title="Expand a leaf node to have two child nodes.">ExpandWithValid</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn, <span class="keywordtype">bool</span> boolVal)
<a name="l00336"></a>00336     {
<a name="l00337"></a>00337         <span class="keywordflow">try</span> {
<a name="l00338"></a>00338           
<a name="l00339"></a>00339             <span class="comment">// uses nodeExpand for type of object pointed to by spn</span>
<a name="l00340"></a>00340             <span class="keywordflow">if</span> (spn!=NULL) {
<a name="l00341"></a>00341               spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ac27ee8ea1399ed0121ed970c8fd51543" title="Expand a leaf node to make two leaves as children.">nodeExpand</a>(boolVal);
<a name="l00342"></a>00342             }
<a name="l00343"></a>00343          }
<a name="l00344"></a>00344         <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00345"></a>00345         {
<a name="l00346"></a>00346             std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in ExpandWithValid&quot;</span> &lt;&lt; std::endl;
<a name="l00347"></a>00347             <span class="keywordflow">throw</span>;
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349     }
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 } <span class="comment">// end namespace subpavings</span>
<a name="l00352"></a>00352 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spalgorithms_8cpp.shtml">spalgorithms.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
