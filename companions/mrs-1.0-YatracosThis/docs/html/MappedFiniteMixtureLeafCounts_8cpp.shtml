<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedFiniteMixtureLeafCounts.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedFiniteMixtureLeafCounts_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MappedFiniteMixtureLeafCounts.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="IAECalculations_2FinMixFobj_8hpp_source.shtml">FinMixFobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mappedspnode_8hpp_source.shtml">mappedspnode.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="realmappedspnode_8hpp_source.shtml">realmappedspnode.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>&quot;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
</div>
<p><a href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml">LexicoSorting&lt; T &gt;</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a> (string &amp;filename, const <a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> &amp;node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, vector&lt; double &gt; &amp;WeightsVector)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, vector&lt; ivector &gt; &amp;BoxVector, vector&lt; real &gt; &amp;HeightsVector)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, double totalArea, vector&lt; <a class="el" href="classsubpavings_1_1RangeCollectionClass.shtml">RangeCollectionClass</a>&lt; real &gt; &gt; &amp;heightNorm)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ad413fb4b470884bbd346547f10dd5b67"></a><!-- doxytag: member="MappedFiniteMixtureLeafCounts.cpp::getAllWeights" ref="ad413fb4b470884bbd346547f10dd5b67" args="(RealMappedSPnode *thisNodePtr, vector&lt; double &gt; &amp;WeightsVector)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">getAllWeights</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>WeightsVector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00077">77</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>

<p>References <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="rangecollection_8hpp_source.shtml#l00339">subpavings::RangeCollectionClass&lt; T &gt;::getWeights()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00479">subpavings::SPnode::isLeaf()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>.</p>

<p>Referenced by <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml#l00213">doMCMCGRAuto()</a>, <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00088">getAllWeights()</a>, and <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00150">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
     
     <span class="comment">//get the weights</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
  }
  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a071c6769f9c807ff0719ce7470b94a86"></a><!-- doxytag: member="MappedFiniteMixtureLeafCounts.cpp::getHeightAndBox" ref="a071c6769f9c807ff0719ce7470b94a86" args="(RealMappedSPnode *thisNodePtr, vector&lt; ivector &gt; &amp;BoxVector, vector&lt; real &gt; &amp;HeightsVector)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; ivector &gt; &amp;&#160;</td>
          <td class="paramname"><em>BoxVector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; real &gt; &amp;&#160;</td>
          <td class="paramname"><em>HeightsVector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00096">96</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="rangecollection_8hpp_source.shtml#l00366">subpavings::RangeCollectionClass&lt; T &gt;::getHeight()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l00479">subpavings::SPnode::isLeaf()</a>.</p>

<p>Referenced by <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml#l00213">doMCMCGRAuto()</a>, <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00107">getHeightAndBox()</a>, and <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00150">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
     <span class="comment">//push back this box into the BoxVector</span>
     BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
     
     <span class="comment">//get the heights</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
  }
  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="MappedFiniteMixtureLeafCounts.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00139">139</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00858">subpavings::SPnode::accept()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//===========user-defined parameters==============================//</span>
    <span class="keywordtype">int</span> mix = atoi(argv[1]); <span class="comment">//which mixture to use</span>
   
   <span class="comment">//string formatting</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(10);  
  
   <span class="comment">//make a root box</span>
   <span class="keywordtype">int</span> dims = 1;
   ivector pavingBox(dims);
   interval pavingInterval(-10,10);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
   
  <span class="comment">//=================Setting up parameters for the distribution============//</span>
   <span class="comment">// read input from mix*.txt</span>
   <span class="keywordtype">string</span> mixfileName;
   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stmMix;
  stmMix &lt;&lt; mix;
  mixfileName += stmMix.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;

  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture: &quot;</span> &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(mixfileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();
  
  <span class="comment">//put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
  <span class="comment">//=========================end of setting up parameter===================//</span>

   <span class="comment">//=========set up to estimate the function==============================// </span>
    <span class="comment">//function object</span>
   <a class="code" href="classFinMixFobj.shtml" title="Declarations for MappedSPnode 1D Gaussian Mixtures function object class.">FinMixFobj</a> realFM(Weight, Mean, Sigma);  
    
   vector&lt;real&gt; tol;
   tol.push_back(0.5);
   tol.push_back(0.1);
   tol.push_back(0.05);
  tol.push_back(0.01);
  tol.push_back(0.005);
  tol.push_back(0.001);
  tol.push_back(0.0005);
  tol.push_back(0.0001);
  tol.push_back(0.00005);
  tol.push_back(0.00001);
  tol.push_back(0.000005);
  tol.push_back(0.000001);
  
  vector&lt;real&gt;::iterator it;
  
  vector&lt;int&gt; numLeaves;
  
  <span class="keywordflow">for</span> (it = tol.begin(); it &lt; tol.end(); it++) {
     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
     cout &lt;&lt; <span class="stringliteral">&quot;Estimate function:&quot;</span> &lt;&lt; endl;
      <span class="comment">// estimate the function</span>
    
     <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realFM, (*it));
     nodeEst.accept(expander);
     
     cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; (*it) &lt;&lt; endl;
     cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves is: &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; endl;;
    numLeaves.push_back(nodeEst.getNumLeaves());
  }

  <span class="comment">//output to txt</span>
  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
  outputFileName = <span class="stringliteral">&quot;FinMix&quot;</span>;
  ostringstream stm;
  stm &lt;&lt; mix;
  outputFileName += stm.str();
  outputFileName += <span class="stringliteral">&quot;LeafNodes.txt&quot;</span>;
  os.open(outputFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; numLeaves.size(); i++) {
    os &lt;&lt; numLeaves[i] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();
  
  std::cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
  
  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aaccdd027128215abfb51d30ca3bfc190"></a><!-- doxytag: member="MappedFiniteMixtureLeafCounts.cpp::normHeights" ref="aaccdd027128215abfb51d30ca3bfc190" args="(RealMappedSPnode *thisNodePtr, double totalArea, vector&lt; RangeCollectionClass&lt; real &gt; &gt; &amp;heightNorm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>totalArea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classsubpavings_1_1RangeCollectionClass.shtml">RangeCollectionClass</a>&lt; real &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>heightNorm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00118">118</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>

<p>References <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, and <a class="el" href="rangecollection_8hpp_source.shtml#l00426">subpavings::RangeCollectionClass&lt; T &gt;::normNodeHeight()</a>.</p>

<p>Referenced by <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml#l00213">doMCMCGRAuto()</a>, <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00150">main()</a>, and <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00129">normHeights()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
     
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
    heightNorm.push_back(height);
  }
  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91337b8216794ab4371528e4d8f07aa2"></a><!-- doxytag: member="MappedFiniteMixtureLeafCounts.cpp::output" ref="a91337b8216794ab4371528e4d8f07aa2" args="(string &amp;filename, const SPnode &amp;node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a> </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00060">60</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00923">subpavings::SPnode::leavesOutputTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">// To generate a file output</span>
   ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
   <span class="keywordflow">if</span> (os.is_open()) {
      node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
      std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
               &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
         os.close();
      }
   <span class="keywordflow">else</span> {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
         &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
   }
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp.shtml">MappedFiniteMixtureLeafCounts.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
