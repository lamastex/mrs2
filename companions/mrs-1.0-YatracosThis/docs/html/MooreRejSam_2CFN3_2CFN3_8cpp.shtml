<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CFN3.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MooreRejSam_2CFN3_2CFN3_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MooreRejSam/CFN3/CFN3.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;iostream&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;math.h&gt;</code><br/>
<code>#include &lt;getopt.h&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &quot;interval.hpp&quot;</code><br/>
<code>#include &quot;imath.hpp&quot;</code><br/>
<code>#include &quot;rmath.hpp&quot;</code><br/>
<code>#include &quot;intvector.hpp&quot;</code><br/>
<code>#include &quot;ivector.hpp&quot;</code><br/>
<code>#include &quot;rvector.hpp&quot;</code><br/>
<code>#include &quot;imatrix.hpp&quot;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_rng.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;numeric&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;stdlib.h&gt;</code><br/>
<code>#include &lt;ctype.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="SmallClasses_8hpp_source.shtml">SmallClasses.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="FCFN3_8hpp_source.shtml">FCFN3.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="MRSampler_8hpp_source.shtml">MRSampler.hpp</a>&quot;</code><br/>
</div>
<p><a href="MooreRejSam_2CFN3_2CFN3_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a> (<a class="el" href="classFobj.shtml">Fobj</a> &amp;<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, int n_boxes, int n_samples, double Alb, unsigned seed, bool use_f_scale)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a> (int argc, char **argv)</td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a3c04138a5bfe5d72780bb7e82a18e627"></a><!-- doxytag: member="MooreRejSam/CFN3/CFN3.cpp::main" ref="a3c04138a5bfe5d72780bb7e82a18e627" args="(int argc, char **argv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>argv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp_source.shtml#l00099">99</a> of file <a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp_source.shtml">MooreRejSam/CFN3/CFN3.cpp</a>.</p>

<p>References <a class="el" href="MooreImpSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">ProduceMRSamples()</a>.</p>
<div class="fragment"><pre class="fragment">{
  ios::sync_with_stdio ();  <span class="comment">// call this function so iostream works with stdio</span>
  cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>


  <span class="keywordtype">int</span> n_boxes = 1000000;
  <span class="keywordtype">int</span> n_samples = 10000000;
  <span class="keywordtype">double</span> Alb = 0.001;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>

  <span class="keywordtype">unsigned</span> theSeed = 0;
  
  <span class="comment">// theModelSpace options</span>
  <span class="comment">// 0: clocked star tree, 1 param. </span>
  <span class="comment">// 1: clocked rooted, 2 param. </span>
  <span class="comment">// 2: unclocked 3 param. </span>
  <span class="comment">// 3: transdimensional.</span>
  <span class="keywordtype">unsigned</span> theModelSpace = 3;   


  <span class="comment">// Mitochodrial data of Human, Chimpanzee and Gorilla Brown et al, 1982</span>
  <span class="comment">//according to Yang, Proc. Roy. Soc. Lon. B (2000) Table 1</span>
  <span class="keywordtype">int</span> Cxxx=762;
  <span class="keywordtype">int</span> Cxxy=54;
  <span class="keywordtype">int</span> Cyxx=38;
  <span class="keywordtype">int</span> Cxyx=41;
  <span class="comment">//the following two patterns have been incorrectly parsed in the Analysis of</span>
  <span class="comment">// Yang 2000 as well as Sainudiin and York 2009</span>
  <span class="comment">//int Cyxx=41;</span>
  <span class="comment">//int Cxyx=38;</span>

  <span class="comment">// other data sets</span>
  <span class="comment">//Cxxx=0; Cxxy=0; Cyxx=0; Cxyx=0;//no data -- so target is just the prior</span>
  <span class="comment">//Cxxx=300; Cxxy=80; Cyxx=65; Cxyx=55;//Fig4 Yang&amp;Rannala 2005</span>
  <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">true</span>; <span class="keywordtype">int</span> tmpULP; 
  <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">true</span>;
  <span class="keywordtype">int</span> PriorType = 0; <span class="comment">// unif. prior is default</span>
  <span class="keywordtype">double</span> DomainUB = 1.0; <span class="comment">// Domain is [1e-10, DomainUB] for each dimension</span>

  <span class="keywordflow">if</span> (argc &gt;= 2)
    {
      sscanf (argv[1], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theModelSpace);
      <span class="keywordflow">if</span> (argc &gt;= 3)
  {
    sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
    <span class="keywordflow">if</span> (argc &gt;= 4){
      sscanf (argv[3], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);
    }
    <span class="keywordflow">if</span> (argc &gt;= 5){
      cout &lt;&lt; <span class="stringliteral">&quot;theSeed: &quot;</span> &lt;&lt; argv[4] &lt;&lt; endl;
      sscanf (argv[4], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theSeed);      
    }
    <span class="keywordflow">if</span> (argc &gt;= 6){
      cout &lt;&lt; <span class="stringliteral">&quot;Cxxx: &quot;</span> &lt;&lt; argv[5] &lt;&lt; endl;
      sscanf (argv[5], <span class="stringliteral">&quot;%i&quot;</span>, &amp;Cxxx); 
    }
    <span class="keywordflow">if</span> (argc &gt;= 7) {
      cout &lt;&lt; <span class="stringliteral">&quot;Cxxy: &quot;</span> &lt;&lt; argv[6] &lt;&lt; endl;
      sscanf (argv[6], <span class="stringliteral">&quot;%i&quot;</span>, &amp;Cxxy);
    }
    <span class="keywordflow">if</span> (argc &gt;= 8){
      cout &lt;&lt; <span class="stringliteral">&quot;Cyxx: &quot;</span> &lt;&lt; argv[7] &lt;&lt; endl;
      sscanf (argv[7], <span class="stringliteral">&quot;%i&quot;</span>, &amp;Cyxx);
    }
    <span class="keywordflow">if</span> (argc &gt;= 9){
      cout &lt;&lt; <span class="stringliteral">&quot;Cxyx: &quot;</span> &lt;&lt; argv[8] &lt;&lt; endl;
      sscanf (argv[8], <span class="stringliteral">&quot;%i&quot;</span>, &amp;Cxyx);
    }
    <span class="keywordflow">if</span>(argc &gt;= 10){
      cout &lt;&lt; <span class="stringliteral">&quot;UseLogPi: &quot;</span> &lt;&lt; argv[9] &lt;&lt; endl;
      sscanf (argv[9], <span class="stringliteral">&quot;%i&quot;</span>, &amp;tmpULP);
      UseLogPi = (bool)tmpULP;
      cout &lt;&lt; <span class="stringliteral">&quot;UseLogPi: &quot;</span> &lt;&lt; argv[9] &lt;&lt; endl;
    }  
    <span class="keywordflow">if</span>(argc &gt;= 11){
      cout &lt;&lt; <span class="stringliteral">&quot;PriorType: &quot;</span> &lt;&lt; argv[10] &lt;&lt; endl;
      sscanf (argv[10], <span class="stringliteral">&quot;%i&quot;</span>, &amp;PriorType);
      <span class="comment">//  UseLogPi = (bool)tmpULP;</span>
      cout &lt;&lt; <span class="stringliteral">&quot;PriorType: &quot;</span> &lt;&lt; argv[10] &lt;&lt; endl;
    }
    <span class="keywordflow">if</span>(argc &gt;= 12){
      cout &lt;&lt; <span class="stringliteral">&quot;DomainUB: &quot;</span> &lt;&lt; argv[11] &lt;&lt; endl;
      sscanf (argv[11], <span class="stringliteral">&quot;%lf&quot;</span>, &amp;DomainUB);
      <span class="comment">//  UseLogPi = (bool)tmpULP;</span>
      cout &lt;&lt; <span class="stringliteral">&quot;DomainUB: &quot;</span> &lt;&lt; argv[11] &lt;&lt; endl;
    }
 
    <span class="keywordflow">if</span> (argc &gt;= 13){
      cout &lt;&lt; <span class="stringliteral">&quot;# Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot;&lt;theModelSpace&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &quot;</span>
           &lt;&lt; <span class="stringliteral">&quot;&lt;seed&gt; &lt;Cxxx&gt; &lt;Cxxy&gt; &lt;Cyxx&gt; &lt;Cxyx&gt; &lt;UseLogPi&gt; &lt;PriorType&gt; &quot;</span> 
           &lt;&lt; <span class="stringliteral">&quot;&lt;DomainUB&gt;; extra arguments ignored.\n&quot;</span>;
    }

  }
    }

  <span class="keywordflow">else</span> { 
    cout &lt;&lt; <span class="stringliteral">&quot;# Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot;&lt;theModelSpace&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &quot;</span>
         &lt;&lt; <span class="stringliteral">&quot;&lt;seed&gt; &lt;Cxxx&gt; &lt;Cxxy&gt; &lt;Cyxx&gt; &lt;Cxyx&gt; &lt;UseLogPi&gt; &lt;PriorType&gt; &quot;</span>
         &lt;&lt; <span class="stringliteral">&quot;&lt;DomainUB&gt;; extra arguments ignored.\n&quot;</span>;
  

    cout &lt;&lt; <span class="stringliteral">&quot;# theModelSpace: &quot;</span> &lt;&lt; theModelSpace &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> 
         &lt;&lt; n_boxes &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> 
         &lt;&lt; theSeed  &lt;&lt; endl; <span class="comment">//getchar();</span>
    
  }
   
  <span class="keywordtype">int</span> Cin=Cxxx;
  <span class="keywordtype">int</span> Cnin=Cxxy+Cyxx+Cxyx;
  cout &lt;&lt; theSeed &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; UseLogPi &lt;&lt; <span class="stringliteral">&quot;   &quot;</span> &lt;&lt; endl;
  <span class="comment">//n_xxx, n_xxy, n_yxx, n_xyx</span>
  cout &lt;&lt; Cxxx &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; Cxxy &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; Cyxx &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; Cxyx &lt;&lt; endl;
  <span class="comment">// CFN phylogenetic Models</span>
  <span class="comment">// domain for CFN model under rooted,clocked 3-taxa star tree</span>
  interval DomainCFN3(1e-10, DomainUB); 
  <span class="keywordflow">switch</span> (theModelSpace) {
  <span class="keywordflow">case</span> 0: {<span class="comment">//------CFN model on 3 taxa Star Trees</span>
    <span class="comment">//UseLogPi = true; Cin=762; Cnin=133; // Example of Brown et al, 1982.</span>
    <a class="code" href="classFCFN3Star.shtml" title="1-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class.">FCFN3Star</a> FTG (Cin, Cnin, DomainCFN3, UseLogPi, PriorType);
    cout &lt;&lt; <span class="stringliteral">&quot;Cin, Cnin: &quot;</span> &lt;&lt; Cin &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; Cnin &lt;&lt; endl;
    
    <span class="comment">// Ziheng Yang, Complexity of the Simplest Phylogenetic Model&quot;, 2000.</span>
    cout &lt;&lt; <span class="stringliteral">&quot;MLE = &quot;</span> 
         &lt;&lt; -0.25*log((4.0*(<span class="keywordtype">double</span>(Cin)/(<span class="keywordtype">double</span>(Cin+Cnin)))-1.0)/3.0) &lt;&lt; endl;
    
    <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FTG, n_boxes, n_samples, Alb, theSeed, use_f_scale);
    <span class="keywordflow">break</span>;}
  <span class="keywordflow">case</span> 1: {<span class="comment">//------CFN model on 3 taxa Rooted Trees with three topologies</span>
    <span class="comment">// UseLogPi = true; </span>
    <a class="code" href="classFCFN3Rooted.shtml" title="2-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class">FCFN3Rooted</a> FTG (Cxxx, Cxxy, Cyxx, Cxyx, DomainCFN3, UseLogPi, PriorType);
    <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FTG, n_boxes, n_samples, Alb, theSeed, use_f_scale);
    <span class="keywordflow">break</span>;}
  <span class="keywordflow">case</span> 2: {<span class="comment">//------CFN model on 3 taxa Unrooted Trees with one topology</span>
    <span class="comment">//UseLogPi = true; </span>
    <a class="code" href="classFCFN3UnRooted.shtml" title="3-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class">FCFN3UnRooted</a> FTG (Cxxx, Cxxy, Cyxx, Cxyx, DomainCFN3, UseLogPi, PriorType);
    <span class="comment">//UseLogPi = false; FCFN3UnRooted FTG (76, 5, 4, 3, DomainCFN3, UseLogPi);</span>
    <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FTG, n_boxes, n_samples, Alb, theSeed, use_f_scale);
    cout &lt;&lt; <span class="stringliteral">&quot;Cin, Cnin: &quot;</span> &lt;&lt; Cin &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; Cnin &lt;&lt; endl;
    <span class="keywordflow">break</span>;}
  <span class="keywordflow">case</span> 3: {<span class="comment">//------Trans-dimensional CFN model on 5 labelled 3 taxa Trees, </span>
           <span class="comment">//------ie 5 topologies [star+3rooted trees+1unrooted]</span>
    <span class="comment">//UseLogPi = true; </span>
    cout &lt;&lt; <span class="stringliteral">&quot;UseLogPi: &quot;</span> &lt;&lt; UseLogPi &lt;&lt; endl;
    <a class="code" href="classFCFN3.shtml" title="1,2,3-trans-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class...">FCFN3</a> FTG (Cxxx, Cxxy, Cyxx, Cxyx, DomainCFN3, UseLogPi, PriorType);
    <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FTG, n_boxes, n_samples, Alb, theSeed, use_f_scale);
    <span class="keywordflow">break</span>;}
  <span class="keywordflow">default</span>:{
    {cerr&lt;&lt; <span class="stringliteral">&quot;contains unspecified theModelSpace = &quot;</span> &lt;&lt; theModelSpace 
         &lt;&lt; <span class="stringliteral">&quot; [allowed values are 0,1,2,3] ! using theModelSpace = 3&quot;</span>; 
      theModelSpace=1;}
    <span class="comment">//UseLogPi = true; </span>
    <a class="code" href="classFCFN3Rooted.shtml" title="2-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class">FCFN3Rooted</a> FTG (Cxxx, Cxxy, Cyxx, Cxyx, DomainCFN3, UseLogPi, PriorType);
    <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FTG, n_boxes, n_samples, Alb, theSeed, use_f_scale);
    <span class="keywordflow">break</span>;}
  }

  <span class="keywordflow">return</span> 0;     <span class="comment">// for the main statement</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a631ece91d072eb67cffd058e11c49468"></a><!-- doxytag: member="MooreRejSam/CFN3/CFN3.cpp::ProduceMRSamples" ref="a631ece91d072eb67cffd058e11c49468" args="(Fobj &amp;f, int n_boxes, int n_samples, double Alb, unsigned seed, bool use_f_scale)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="SEBPQFunctionSimRosen_8cpp.shtml#a0c0402be9ebd7abad750822814d38f99">ProduceMRSamples</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFobj.shtml">Fobj</a> &amp;&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n_samples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>Alb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>seed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_f_scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">58</a> of file <a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp_source.shtml">MooreRejSam/CFN3/CFN3.cpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00238">RSSample::EnvelopeIntegral</a>, <a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">Fobj::get_interval_calls()</a>, <a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">Fobj::get_real_calls()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00245">RSSample::IntegralEstimate()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00260">RSSample::Mean()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">MRSampler::RejectionSampleMany()</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>.</p>
<div class="fragment"><pre class="fragment">{
  ofstream out (<span class="stringliteral">&quot;MRS_CFN3.samples&quot;</span>);<span class="comment">//file to store the i.i.d samples</span>
  clock_t T1 = clock (), T2, T3;
  <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
  <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (f, n_boxes, Alb, seed, (use_f_scale == 1));
  <span class="comment">/* // To print out the partition of the domain</span>
<span class="comment">     cout &lt;&lt; &quot;Domain Partition: \n&quot; ;</span>
<span class="comment">     theSampler.Print_Domain_Partition();</span>
<span class="comment">     theSampler.PrintBoxes(0);</span>
<span class="comment">     getchar(); // press enter to continue...</span>
<span class="comment">  */</span>
  T2 = clock ();
  <span class="keywordtype">double</span> Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;

  <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
  cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
  cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
  theSampler.RejectionSampleMany (n_samples, rs_sample);
  cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
  <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
  cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
       &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
  <span class="comment">//rs_sample.Print(out);</span>

  cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af" title="Get number of interval function calls.">get_interval_calls</a> () &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7" title="Get number of real function calls.">get_real_calls</a> () &lt;&lt; endl;

  <span class="comment">//----------------------------------------------------------------------------</span>
  T3 = clock ();
  <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> 
       &lt;&lt; Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate: &quot;</span> 
       &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (n_samples) &lt;&lt; endl;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MooreRejSam_2CFN3_2CFN3_8cpp.shtml">CFN3.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
