<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FiniteMixture1.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FiniteMixture1_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">FiniteMixture1.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
</div>
<p><a href="FiniteMixture1_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="FiniteMixture1_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><ul>
<li>only for exhausitve PQ </li>
</ul>

<p>Definition in file <a class="el" href="FiniteMixture1_8cpp_source.shtml">FiniteMixture1.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="FiniteMixture1.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="FiniteMixture1_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="FiniteMixture1_8cpp_source.shtml">FiniteMixture1.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00223">findComp()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03970">subpavings::AdaptiveHistogram::getFinMixIntervalIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01247">subpavings::AdaptiveHistogram::getRootLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01913">subpavings::AdaptiveHistogram::prioritySplitWithSwitches()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//===========user-defined parameters==============================//</span>
  <span class="keywordflow">if</span> ( argc != 5 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix simNum&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[4]); <span class="comment">//which data set </span>
   
   <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
  <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(10);
   std::ostringstream stm;
  stm &lt;&lt; simNum;

  <span class="comment">//==============get distribution parameters==========================//</span>
   <span class="comment">// read input from mix*.txt</span>
   <span class="keywordtype">string</span> mixfileName;
   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stmMix;
  stmMix &lt;&lt; mix;
  mixfileName += stmMix.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;

  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(mixfileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();
  
  <span class="comment">//put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
  <span class="comment">//=========================end of setting up parameter===================//</span>

  <span class="comment">// ========prepare to generate some data for the tests ================//</span>
    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    gsl_rng_set(r, dataSeed);

   <span class="comment">//set up a random number generator for gaussian rvs</span>
     <span class="keyword">const</span> gsl_rng_type * T1;
     gsl_rng * r1;
     gsl_rng_env_setup();
     T1 = gsl_rng_default;
     r1 = gsl_rng_alloc (T1);
     gsl_rng_set(r1, dataSeed);
     
  <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
  <span class="keywordtype">double</span> a=0, b=1;
  vector&lt;double&gt; u;
  <span class="keywordtype">int</span> j;
  <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
      u.push_back(gsl_ran_flat(r, a, b));
  }

  <span class="comment">// number of components</span>
  <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
  cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;

  <span class="comment">// get cumulative sum of the weights</span>
  <span class="keywordtype">double</span> WeightCum[comp];
  <span class="comment">//initialize the array</span>
  WeightCum[0] = Weight[0]; 
  cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
    WeightCum[j] = WeightCum[j-1] + Weight[j];
  }

  <span class="comment">//Create mixture data using component densities that are normal.</span>
  cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
    <span class="comment">//find the number of members generated from each component.</span>
    <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
      <span class="keywordtype">int</span> ind=0;
      cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
      <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
      cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
      <span class="comment">//now generate the data</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
        rvector thisrv(1);
        <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
        thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
        theData.push_back(thisrv);
      }
    }

  ivector pavingBox;
  <span class="keywordtype">double</span> rootBoxVol;
  <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
  <span class="comment">//===============finish generating data============================//</span>

  <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;

  <span class="comment">// comparison objects</span>
  <a class="code" href="classsubpavings_1_1CompMeanMass.shtml" title="Class comparing the Chebyshev distance between the mean and uniform mean multiplied with the emprical...">CompMeanMass</a> compMeanMass;
  <a class="code" href="classsubpavings_1_1CompCovarMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompCovarMass</a> compCovarMass;
  <a class="code" href="classsubpavings_1_1CompHellingerDist1DMass.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMass</a> compHDMass;
  <a class="code" href="classsubpavings_1_1CompHellingerDist1DMassDiam.shtml" title="Class comparing the Chebyshev distance between the var-covar and uniform var-covar multiplied with th...">CompHellingerDist1DMassDiam</a> compHDMassDiam;

  <span class="comment">//mean mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
  
  <span class="comment">//covar mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
  
  <span class="comment">//hellinger distance * mass remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
  
  <span class="comment">//hellinger distance * mass * maxdiam remove empty box</span>
  <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;

  <span class="comment">// containers for output needed</span>
  vector&lt;real&gt; IAEOpt;
  vector&lt;int&gt; NumLeafNodesOpt;
  
  real IAE1=100.0;
  <span class="keywordtype">int</span> NumLeafNodes1;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist1;
  vector&lt;double&gt; Times1;

  real IAE2=100.0;
  <span class="keywordtype">int</span> NumLeafNodes2;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist2;
  vector&lt;double&gt; Times2;

  real IAE3=100.0;
  <span class="keywordtype">int</span> NumLeafNodes3;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist3;
   vector&lt;double&gt; Times3;
   
  real IAE4=100.0;
  <span class="keywordtype">int</span> NumLeafNodes4;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> optHist4;
  vector&lt;double&gt; Times4;

  <span class="comment">//size_t maxLeafNodes = int(n/log(n*(2*d+1))); // temporarily</span>
  <span class="keywordtype">size_t</span> maxLeafNodes = n;
  <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>

  <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
  
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1(holdAllStats); 
    successfulInsertion1= myHist1.insertFromRVec(theData);
    rootBoxVol = (myHist1.getSubPaving()-&gt;nodeVolume());
    pavingBox = (myHist1.getSubPaving()-&gt;getBox());
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2(holdAllStats); 
    successfulInsertion2= myHist2.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3(holdAllStats); 
    successfulInsertion3= myHist3.insertFromRVec(theData);
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4(holdAllStats); 
    successfulInsertion4= myHist4.insertFromRVec(theData);
    
    <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
      &amp;&amp; successfulInsertion4) {

      <span class="keywordtype">int</span> finalK = int(i*0.005*n);
      cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

      
      <span class="comment">// we want to check the timings for this</span>
      clock_t start, end;
      <span class="keywordtype">double</span> timing; 
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing mean mass remove empty: &quot;</span> &lt;&lt; endl;
      successfulPQSplit1 = myHist1.prioritySplitWithSwitches(compMeanMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times1.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing covar mass remove empty box &quot;</span> &lt;&lt; endl;
      successfulPQSplit2 = myHist2.prioritySplitWithSwitches(compCovarMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times2.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass remove empty box&quot;</span> &lt;&lt; endl;
      successfulPQSplit3 = myHist3.prioritySplitWithSwitches(compHDMass,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times3.push_back(timing);
      
      start  = clock(); <span class="comment">// and keep the time</span>
      cout &lt;&lt; <span class="stringliteral">&quot;Comparing hellinger distance with mass and maxdiam and remove empty box&quot;</span> &lt;&lt; endl;
      successfulPQSplit4 = myHist4.prioritySplitWithSwitches(compHDMassDiam,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, 0); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times4.push_back(timing);


      <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
        &amp;&amp; successfulPQSplit4) {
        
          <span class="comment">//get the IAE</span>
        cout &lt;&lt; <span class="stringliteral">&quot;Get IAE: &quot;</span> &lt;&lt; endl;
        real midIAE1 = mid(myHist1.getFinMixIntervalIAE(mixt, Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE1 &lt; IAE1 ) {
          cout &lt;&lt; midIAE1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE1 &lt;&lt; endl;
          IAE1 = midIAE1;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist1.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist1 = myHist1;
        }

        <span class="comment">//get the IAE</span>
        real midIAE2 = mid(myHist2.getFinMixIntervalIAE(mixt, Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE2 &lt; IAE2 ) {
          cout &lt;&lt; midIAE2 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE2 &lt;&lt; endl;
          IAE2 = midIAE2;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist2 = myHist2;
        }

        real midIAE3 = mid(myHist3.getFinMixIntervalIAE(mixt, Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE3 &lt; IAE3 ) {
          cout &lt;&lt; midIAE3 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE3 &lt;&lt; endl;
          IAE3 = midIAE3;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist3 = myHist3;
        }

        
        <span class="comment">//get the IAE</span>
        real midIAE4 = mid(myHist4.getFinMixIntervalIAE(mixt, Tol, Deg));
        <span class="keywordflow">if</span> ( midIAE4 &lt; IAE4 ) {
          cout &lt;&lt; midIAE4 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; IAE4 &lt;&lt; endl;
          IAE4 = midIAE4;
          cout &lt;&lt; <span class="stringliteral">&quot;this histogram has &quot;</span> &lt;&lt; myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
          optHist4 = myHist4;
        }

      } <span class="comment">// end of if(successfulPQSplit)</span>
    }<span class="comment">// end of if(successfulInsertion)</span>
  } <span class="comment">// end of iterating through different kn&#39;s</span>

  <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
      successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
      &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
        
        <span class="comment">// keep the optimal IAEs</span>
    IAEOpt.push_back(IAE1); 
    IAEOpt.push_back(IAE2);
    IAEOpt.push_back(IAE3);
    IAEOpt.push_back(IAE4);
    
    <span class="comment">// keep the number of leaf nodes from the optimal histograms</span>
    NumLeafNodesOpt.push_back(optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
    NumLeafNodesOpt.push_back(optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
      
    <span class="comment">// output the optimal histograms</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="comment">// create a name for the file to output</span>
    <span class="keywordtype">string</span> fileName;
    fileName = <span class="stringliteral">&quot;HistMeanMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistCovarMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistHellingerMass&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// create a name for the file to output</span>
    fileName = <span class="stringliteral">&quot;HistHellingerMassDiam&quot;</span>;
    fileName += stm.str();
    fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    optHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);

    <span class="comment">// output IAE, number of leaf nodes, times to file</span>
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutputStats&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAEOpt.size(); i++) {
      oss &lt;&lt; IAEOpt[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesOpt[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
        
    PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutputStatsTimes&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Times1.size(); i++) {
      oss &lt;&lt; Times1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times4[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;Times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  } <span class="comment">// end of successes</span>

<span class="comment">//=================end of exhaustive PQ=================================// </span>



<span class="comment">// free the random number generator</span>
gsl_rng_free(r);
gsl_rng_free(r1);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FiniteMixture1_8cpp.shtml">FiniteMixture1.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
