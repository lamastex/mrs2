<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: UnifRegHist.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('UnifRegHist_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">UnifRegHist.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="UnifRegHist_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment"> * your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> * </span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// include header files</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>std;
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>cxsc;
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="UnifRegHist_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00041</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043    <span class="comment">//===================== user-inputs======================================//</span>
<a name="l00044"></a>00044   <span class="keywordflow">if</span> ( argc != 6 ) {
<a name="l00045"></a>00045     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UniformMixture n d dataSeed mixShape nBins&quot;</span> &lt;&lt; endl;
<a name="l00046"></a>00046     exit(0);
<a name="l00047"></a>00047   }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00050"></a>00050    <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00051"></a>00051    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[3]); <span class="comment">//seed for generating data</span>
<a name="l00052"></a>00052    <span class="keywordtype">int</span> shape = atoi(argv[4]); <span class="comment">//which mixture to use</span>
<a name="l00053"></a>00053    <span class="keywordtype">int</span> nBins = atoi(argv[5]);
<a name="l00054"></a>00054  
<a name="l00055"></a>00055   <span class="comment">//=================set up for data generation===============================</span>
<a name="l00056"></a>00056    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00057"></a>00057    <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00058"></a>00058    gsl_rng * r;             
<a name="l00059"></a>00059    gsl_rng_env_setup();
<a name="l00060"></a>00060    T = gsl_rng_default;
<a name="l00061"></a>00061    r = gsl_rng_alloc (T);
<a name="l00062"></a>00062    gsl_rng_set(r, dataSeed);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064    <span class="comment">//data generating partition</span>
<a name="l00065"></a>00065    ivector pavingBox(d);
<a name="l00066"></a>00066    interval pavingInterval(0,1);
<a name="l00067"></a>00067    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069    <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00070"></a>00070    <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00071"></a>00071    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00072"></a>00072    <span class="comment">// a container for the boxes</span>
<a name="l00073"></a>00073    vector&lt;ivector&gt; Pboxes;
<a name="l00074"></a>00074    <span class="keywordtype">size_t</span> PartSize;
<a name="l00075"></a>00075    vector&lt;int&gt; holesLoc;
<a name="l00076"></a>00076 
<a name="l00077"></a>00077    <span class="comment">// mixture shape</span>
<a name="l00078"></a>00078    <span class="keywordtype">string</span> mixShape;
<a name="l00079"></a>00079   <span class="keywordflow">if</span> (shape == 1) { mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }
<a name="l00080"></a>00080   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==2) { 
<a name="l00081"></a>00081     mixShape = <span class="stringliteral">&quot;3,4,4,2,2,3,4,5,5&quot;</span>; 
<a name="l00082"></a>00082     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 9; i++) { holesLoc.push_back(1);}
<a name="l00083"></a>00083     holesLoc[1]=0;
<a name="l00084"></a>00084     holesLoc[3]=0;
<a name="l00085"></a>00085     holesLoc[7]=0;
<a name="l00086"></a>00086   } 
<a name="l00087"></a>00087   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==3) {
<a name="l00088"></a>00088     mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; 
<a name="l00089"></a>00089     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 63 ; i++) { holesLoc.push_back(1);}
<a name="l00090"></a>00090     holesLoc[6]=0;
<a name="l00091"></a>00091     holesLoc[8]=0;
<a name="l00092"></a>00092     holesLoc[10]=0;
<a name="l00093"></a>00093     holesLoc[17]=0;
<a name="l00094"></a>00094     holesLoc[20]=0;
<a name="l00095"></a>00095     holesLoc[24]=0;
<a name="l00096"></a>00096     holesLoc[34]=0;
<a name="l00097"></a>00097     holesLoc[40]=0;
<a name="l00098"></a>00098     holesLoc[44]=0;
<a name="l00099"></a>00099     holesLoc[47]=0;
<a name="l00100"></a>00100     holesLoc[51]=0;
<a name="l00101"></a>00101     holesLoc[55]=0;
<a name="l00102"></a>00102     holesLoc[59]=0;
<a name="l00103"></a>00103     holesLoc[62]=0;
<a name="l00104"></a>00104   }       
<a name="l00105"></a>00105 
<a name="l00106"></a>00106   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture   </span>
<a name="l00107"></a>00107    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00108"></a>00108    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(trueLeaves); <span class="comment">// fill the container</span>
<a name="l00109"></a>00109    
<a name="l00110"></a>00110    <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00111"></a>00111    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; holesLoc.size(); i++) {
<a name="l00112"></a>00112     <span class="keywordflow">if</span> (holesLoc[i] == 1) {
<a name="l00113"></a>00113       Pboxes.push_back(trueLeaves[i]-&gt;getBox());
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116   PartSize = Pboxes.size();
<a name="l00117"></a>00117   <span class="comment">// get weight of mixture components</span>
<a name="l00118"></a>00118   <span class="keywordtype">double</span> weight = 1.0/(1.0*PartSize); 
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00121"></a>00121   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00122"></a>00122    <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00123"></a>00123    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00124"></a>00124    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00125"></a>00125         rvector thisrv(d);
<a name="l00126"></a>00126         <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00127"></a>00127         <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
<a name="l00128"></a>00128         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
<a name="l00129"></a>00129      <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00130"></a>00130         theData.push_back(thisrv);
<a name="l00131"></a>00131    }  <span class="comment">// data  should be in theData</span>
<a name="l00132"></a>00132    
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00135"></a>00135   cout &lt;&lt; <span class="stringliteral">&quot;sort data for reg hist&quot;</span> &lt;&lt; endl; 
<a name="l00136"></a>00136   <span class="comment">//sort the data first</span>
<a name="l00137"></a>00137   <span class="comment">// put the data into a list to sort the data</span>
<a name="l00138"></a>00138   <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> rvecIt;
<a name="l00139"></a>00139   list&lt;rvector&gt; rvecList;
<a name="l00140"></a>00140   list&lt;rvector&gt;::iterator rvecListIt;
<a name="l00141"></a>00141   <span class="keywordflow">for</span> (rvecIt = theData.begin(); rvecIt &lt; theData.end(); rvecIt++){
<a name="l00142"></a>00142     rvector thisrv(1);
<a name="l00143"></a>00143     thisrv = *rvecIt;
<a name="l00144"></a>00144     rvecList.push_back(thisrv);
<a name="l00145"></a>00145   }
<a name="l00146"></a>00146   rvecList.sort(); <span class="comment">//sort the data</span>
<a name="l00147"></a>00147   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sortedData; <span class="comment">// put back into vector</span>
<a name="l00148"></a>00148   <span class="keywordflow">for</span> (rvecListIt = rvecList.begin(); rvecListIt != rvecList.end(); rvecListIt++)
<a name="l00149"></a>00149   { 
<a name="l00150"></a>00150     rvector thisrv(1);
<a name="l00151"></a>00151     thisrv = *rvecListIt;
<a name="l00152"></a>00152     sortedData.push_back(thisrv);
<a name="l00153"></a>00153   };
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">//get the root box</span>
<a name="l00156"></a>00156   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist;
<a name="l00157"></a>00157   myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00158"></a>00158   pavingBox = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getBox();
<a name="l00159"></a>00159   <span class="keywordtype">double</span> rootBoxVol = (myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   <span class="comment">//get the standard deviation</span>
<a name="l00162"></a>00162   <span class="keywordtype">double</span> xsd = <a class="code" href="errorfunc_8cpp.shtml#a674756d3d6aae91356b22688a849bd0f" title="get the standard deviation of the data (this is used when building the regular histogram)">myStd</a>(sortedData);
<a name="l00163"></a>00163   
<a name="l00164"></a>00164   <span class="comment">//make the regular histogram</span>
<a name="l00165"></a>00165   <span class="keywordtype">double</span> bw = rootBoxVol/(nBins*1.0);
<a name="l00166"></a>00166   cout &lt;&lt; <span class="stringliteral">&quot;Making a regular histogram with &quot;</span> &lt;&lt; nBins &lt;&lt; <span class="stringliteral">&quot; bins.&quot;</span> &lt;&lt; endl;
<a name="l00167"></a>00167   <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00168"></a>00168   <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00169"></a>00169   cout &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size() &lt;&lt; endl;
<a name="l00170"></a>00170   
<a name="l00171"></a>00171   <span class="comment">//output histogram data to .txt file</span>
<a name="l00172"></a>00172   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00173"></a>00173   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00174"></a>00174   os.precision(5);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00177"></a>00177   outputFileName = <span class="stringliteral">&quot;Unif&quot;</span>;
<a name="l00178"></a>00178   outputFileName += <span class="stringliteral">&quot;RegHistOpt.txt&quot;</span>;
<a name="l00179"></a>00179   os.open(outputFileName.c_str());
<a name="l00180"></a>00180   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
<a name="l00181"></a>00181     os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
<a name="l00182"></a>00182   }
<a name="l00183"></a>00183   os &lt;&lt; flush;
<a name="l00184"></a>00184   os.close();
<a name="l00185"></a>00185   
<a name="l00186"></a>00186   std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="comment">// now make the regular histograms with the standarad bandwidths</span>
<a name="l00189"></a>00189   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00190"></a>00190     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00191"></a>00191     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00192"></a>00192     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, sortedData, pavingBox, bw);
<a name="l00193"></a>00193     
<a name="l00194"></a>00194     outputFileName = <span class="stringliteral">&quot;Unif&quot;</span>;
<a name="l00195"></a>00195     outputFileName += <span class="stringliteral">&quot;RegHistBW&quot;</span>;
<a name="l00196"></a>00196     ostringstream stm1;
<a name="l00197"></a>00197     stm1 &lt;&lt; bw;
<a name="l00198"></a>00198     outputFileName += stm1.str();
<a name="l00199"></a>00199     outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00200"></a>00200     os.open(outputFileName.c_str());
<a name="l00201"></a>00201     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size(); i++) {
<a name="l00202"></a>00202       os &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>[i] &lt;&lt; endl;
<a name="l00203"></a>00203     }
<a name="l00204"></a>00204     os &lt;&lt; flush;
<a name="l00205"></a>00205     os.close();
<a name="l00206"></a>00206     std::cout &lt;&lt; <span class="stringliteral">&quot;Regular histogram output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00207"></a>00207     
<a name="l00208"></a>00208   }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="comment">// free the random number generator</span>
<a name="l00211"></a>00211 gsl_rng_free(r);
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keywordflow">return</span> 0;
<a name="l00214"></a>00214 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="UnifRegHist_8cpp.shtml">UnifRegHist.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:18 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
