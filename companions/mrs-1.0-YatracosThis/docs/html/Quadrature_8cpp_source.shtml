<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Quadrature.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Quadrature_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Quadrature.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Quadrature_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;gsl/gsl_monte.h&gt;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;gsl/gsl_monte_plain.h&gt;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;gsl/gsl_monte_miser.h&gt;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;gsl/gsl_monte_vegas.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>std;
<a name="l00012"></a>00012      
<a name="l00013"></a>00013 <span class="comment">// Rosenbrock </span>
<a name="l00014"></a>00014 <span class="keywordtype">double</span>
<a name="l00015"></a><a class="code" href="Quadrature_8cpp.shtml#a5d8d739082df35fdba55d410ef394b44">00015</a> <a class="code" href="Quadrature_8cpp.shtml#a5d8d739082df35fdba55d410ef394b44">Rosenbrock</a> (<span class="keywordtype">double</span> *k, <span class="keywordtype">size_t</span> dim, <span class="keywordtype">void</span> *params)
<a name="l00016"></a>00016 {
<a name="l00017"></a>00017 <span class="comment">// Parameters specific to the Rosenbrock target</span>
<a name="l00018"></a>00018 <span class="keywordtype">double</span> <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00019"></a>00019 <span class="keywordtype">double</span> <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00020"></a>00020 <span class="comment">// Domain</span>
<a name="l00021"></a>00021 <span class="comment">//double x = k[0];</span>
<a name="l00022"></a>00022 <span class="comment">//double y = k[1];</span>
<a name="l00023"></a>00023 <span class="keywordtype">double</span> result=0.0;
<a name="l00024"></a>00024 <span class="comment">//double size_k; //size of array k</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1; i++) <span class="comment">//2nd term should be size_k</span>
<a name="l00027"></a>00027     {
<a name="l00028"></a>00028       result = result + (Height * <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((k[i+1] - <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(k[i],2)) ,2) +
<a name="l00029"></a>00029         <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((k[i] - 1.0), 2));
<a name="l00030"></a>00030     }
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(Tinverse * result));
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keywordflow">return</span> result; 
<a name="l00035"></a>00035 }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">//Levy</span>
<a name="l00039"></a>00039 <span class="keywordtype">double</span>
<a name="l00040"></a><a class="code" href="Quadrature_8cpp.shtml#ab4532dd177083e8a5a8622a982a5ebfc">00040</a> <a class="code" href="Quadrature_8cpp.shtml#ab4532dd177083e8a5a8622a982a5ebfc">Levy</a> (<span class="keywordtype">double</span> *k, <span class="keywordtype">size_t</span> dim, <span class="keywordtype">void</span> *params){   
<a name="l00041"></a>00041        <span class="comment">//Parameters specific to the Levy target</span>
<a name="l00042"></a>00042         <span class="keywordtype">double</span> <a class="code" href="LevyFobj2D_8cpp.shtml#ae3d1dc6c8ff5f4490d10dd105dfce9a7">Temperature</a> = 40.0;
<a name="l00043"></a>00043         <span class="keywordtype">double</span> <a class="code" href="LevyFobj2D_8cpp.shtml#abe2298578938894ea3823f8baea9361e">Center1</a> = 1.42513;
<a name="l00044"></a>00044         <span class="keywordtype">double</span> <a class="code" href="LevyFobj2D_8cpp.shtml#a896d9a31b2c3aeb2deecb90e98e18a14">Center2</a> = 0.80032;
<a name="l00045"></a>00045         <span class="keywordtype">double</span> <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a> = 176.14;
<a name="l00046"></a>00046 
<a name="l00047"></a>00047   <span class="keywordtype">double</span> x = k[0];
<a name="l00048"></a>00048   <span class="keywordtype">double</span> y = k[1];
<a name="l00049"></a>00049 <span class="keywordtype">double</span> isum, jsum, hh;
<a name="l00050"></a>00050   isum = 0.0;
<a name="l00051"></a>00051   jsum = 0.0;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 5; i++)
<a name="l00054"></a>00054   {
<a name="l00055"></a>00055     isum = isum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i - 1) *x + <span class="keywordtype">double</span> (i));
<a name="l00056"></a>00056     jsum = jsum + double (i) * <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a> (<span class="keywordtype">double</span> (i + 1) *y + <span class="keywordtype">double</span> (i));
<a name="l00057"></a>00057   }
<a name="l00058"></a>00058   <span class="comment">// Avoid real conversion error</span>
<a name="l00059"></a>00059   hh = isum * jsum + <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((x + Center1),2) +
<a name="l00060"></a>00060        <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>((y + Center2),2);
<a name="l00061"></a>00061   hh += <a class="code" href="LevyFobj2D_8cpp.shtml#a37e4011a5b0b8b87b1893520477568a2">GlobalMax</a>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="comment">// TEMPERATURE = 1, 4, 40, 400, 4000</span>
<a name="l00064"></a>00064   <span class="keywordtype">double</span> result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-hh / Temperature);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="keywordflow">return</span> result;
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069      <span class="keywordtype">void</span>
<a name="l00070"></a><a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">00070</a>      <a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">display_results</a> (<span class="keywordtype">double</span> result, <span class="keywordtype">double</span> error)
<a name="l00071"></a>00071      {
<a name="l00072"></a>00072        printf (<span class="stringliteral">&quot;result = % .6f\n&quot;</span>, result);
<a name="l00073"></a>00073        printf (<span class="stringliteral">&quot;sigma  = % .6f\n&quot;</span>, error);
<a name="l00074"></a>00074      }
<a name="l00075"></a>00075      
<a name="l00076"></a>00076      <span class="keywordtype">int</span>
<a name="l00077"></a><a class="code" href="Quadrature_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00077</a>      <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> (<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00078"></a>00078      {
<a name="l00079"></a>00079        
<a name="l00080"></a>00080       <span class="keywordtype">double</span> x1 = atof(argv[1]);
<a name="l00081"></a>00081       <span class="keywordtype">double</span> x2 = atof(argv[2]);
<a name="l00082"></a>00082       <span class="keywordtype">double</span> y1 = atof(argv[3]);
<a name="l00083"></a>00083       <span class="keywordtype">double</span> y2 = atof(argv[4]);
<a name="l00084"></a>00084       <span class="keywordtype">double</span> dim = 2;
<a name="l00085"></a>00085        <span class="keywordtype">double</span> resRosen, errRosen, resLevy, errLevy;
<a name="l00086"></a>00086      
<a name="l00087"></a>00087        <span class="keywordtype">double</span> xl[2] = {x1, y1}; 
<a name="l00088"></a>00088        <span class="keywordtype">double</span> xu[2] = {x2, y2};
<a name="l00089"></a>00089      
<a name="l00090"></a>00090        <span class="keyword">const</span> gsl_rng_type *T;
<a name="l00091"></a>00091        gsl_rng *r;
<a name="l00092"></a>00092      
<a name="l00093"></a>00093        gsl_monte_function G1 =  { &amp;<a class="code" href="Quadrature_8cpp.shtml#a5d8d739082df35fdba55d410ef394b44">Rosenbrock</a>, 2, 0 };
<a name="l00094"></a>00094        gsl_monte_function G2 = { &amp;<a class="code" href="Quadrature_8cpp.shtml#ab4532dd177083e8a5a8622a982a5ebfc">Levy</a>, 2, 0 };
<a name="l00095"></a>00095 
<a name="l00096"></a>00096        <span class="keywordtype">size_t</span> calls = 10000000;
<a name="l00097"></a>00097      
<a name="l00098"></a>00098        gsl_rng_env_setup ();
<a name="l00099"></a>00099      
<a name="l00100"></a>00100        T = gsl_rng_default;
<a name="l00101"></a>00101        r = gsl_rng_alloc (T);
<a name="l00102"></a>00102      
<a name="l00103"></a>00103 
<a name="l00104"></a>00104        {
<a name="l00105"></a>00105          gsl_monte_plain_state *s = gsl_monte_plain_alloc (2);
<a name="l00106"></a>00106          gsl_monte_plain_integrate (&amp;G1, xl, xu, 2, calls, r, s, 
<a name="l00107"></a>00107                                     &amp;resRosen, &amp;errRosen);
<a name="l00108"></a>00108          gsl_monte_plain_integrate (&amp;G2, xl, xu, 2, calls, r, s, &amp;resLevy, &amp;errLevy);
<a name="l00109"></a>00109          gsl_monte_plain_free (s);
<a name="l00110"></a>00110          cout &lt;&lt; <span class="stringliteral">&quot;plain Rosen&quot;</span> &lt;&lt; endl;   
<a name="l00111"></a>00111          <a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">display_results</a> (resRosen, errRosen);
<a name="l00112"></a>00112          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00113"></a>00113          cout &lt;&lt; <span class="stringliteral">&quot;plain Levy&quot;</span> &lt;&lt; endl;
<a name="l00114"></a>00114          <a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">display_results</a> (resLevy, errLevy);
<a name="l00115"></a>00115          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00116"></a>00116        }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118      
<a name="l00119"></a>00119        {
<a name="l00120"></a>00120          gsl_monte_miser_state *s = gsl_monte_miser_alloc (2);
<a name="l00121"></a>00121          gsl_monte_miser_integrate (&amp;G1, xl, xu, 2, calls, r, s,
<a name="l00122"></a>00122                                    &amp;resRosen, &amp;errRosen);
<a name="l00123"></a>00123          gsl_monte_miser_integrate (&amp;G2, xl, xu, 2, calls, r, s, &amp;resLevy, &amp;errLevy);
<a name="l00124"></a>00124          gsl_monte_miser_free (s);
<a name="l00125"></a>00125          cout &lt;&lt; <span class="stringliteral">&quot;miser Rosen&quot;</span> &lt;&lt; endl;
<a name="l00126"></a>00126          <a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">display_results</a> (resRosen, errRosen);
<a name="l00127"></a>00127          cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00128"></a>00128          cout &lt;&lt; <span class="stringliteral">&quot;miser Levy&quot;</span> &lt;&lt; endl;
<a name="l00129"></a>00129          <a class="code" href="Quadrature_8cpp.shtml#a1dda2cc239ef14ab1793a43f9f1201a7">display_results</a> (resLevy, errLevy);
<a name="l00130"></a>00130        }
<a name="l00131"></a>00131      
<a name="l00132"></a>00132      
<a name="l00133"></a>00133        gsl_rng_free (r);
<a name="l00134"></a>00134      
<a name="l00135"></a>00135        <span class="keywordflow">return</span> 0;
<a name="l00136"></a>00136      }
<a name="l00137"></a>00137 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Quadrature_8cpp.shtml">Quadrature.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
