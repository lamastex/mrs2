<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Todo List</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('todo.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt><a class="anchor" id="_todo000002"></a>Page <a class="el" href="AdaptiveHistograms.shtml">Adaptive histograms</a>  </dt>
<dd><p class="startdd">More flexible user friendly input and output </p>
<p class="enddd">Generate graphical output for histograms </p>
</dd>
<dt><a class="anchor" id="_todo000018"></a>Member <a class="el" href="classFCFN3.shtml#aec0a3534e5961954300b910f7a7401da">FCFN3::operator()</a>  (const <a class="el" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp;X) const </dt>
<dd>divide by volume of labelled domain -- volume of rooted trees need transformation (specalise <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> member function get_volume_LabBox)  </dd>
<dt><a class="anchor" id="_todo000019"></a>Class <a class="el" href="classFLevy2D__Lkl__Tfrom1data.shtml">FLevy2D_Lkl_Tfrom1data</a>  </dt>
<dd>get rid of <a class="el" href="classFobj1D.shtml" title="abstract class for one-dimensional function objects">Fobj1D</a> and make these inherit from <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> as <a class="el" href="classFCFN3Star.shtml" title="1-dimensional Cavender-Farris-Neyman (CFN) model likelihood as a function object class.">FCFN3Star</a>  </dd>
<dt><a class="anchor" id="_todo000021"></a>Member <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aa14358629387c248e96ccc8183fa9353">FShiryaev1D_Lkl_aa_fromData::operator()</a>  (const <a class="el" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> &amp;A) const </dt>
<dd>use dotprec accumulator here instead  </dd>
<dt><a class="anchor" id="_todo000020"></a>Member <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ac3ef0d8ca7ece7015c1c79af2a85e261">FShiryaev1D_Lkl_aa_fromData::operator()</a>  (const <a class="el" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> &amp;A) const </dt>
<dd>use dotprec accumulator here instead  </dd>
<dt><a class="anchor" id="_todo000011"></a>Member <a class="el" href="classISSample.shtml#ab2913a50ee258c5b55d91202ac35ff00">ISSample::IntegralEstimate</a>  (vector&lt; real &gt; &amp;IntegralEsts)</dt>
<dd><p class="startdd">Needs LabelSet specifics like Mean() </p>
<p class="enddd">replace with gsl_mean like computations due to their diff eqns form or Kahan Summations  </p>
</dd>
<dt><a class="anchor" id="_todo000013"></a>Member <a class="el" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972">ISSample::Mean</a>  ()</dt>
<dd>Either replace with gsl_mean like computations due to their diff eqns form or Kahan Summations Function Obj using std::transform or DotAccum in c-xsc  </dd>
<dt><a class="anchor" id="_todo000017"></a>Member <a class="el" href="CesaroBellNo_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>  (int argc, char **argv)</dt>
<dd><p class="startdd">replace with C-XSC constant PI </p>
<p class="enddd">Need to do simultaneous glabal opoptimisation over all labeles see Raaz's 2004 code with hacked older C-XSC libs  </p>
</dd>
<dt><a class="anchor" id="_todo000015"></a>Member <a class="el" href="toolz_8hpp.shtml#a9efdc4ede6e6e3539c2ddca8b71e79a8">mean_var</a>  (const vector&lt; real &gt; &amp;x, real &amp;mean, real &amp;var)</dt>
<dd>using the recurrence relation in <a class="el" href="structkahan__sum.shtml" title="Stable Summation Routine of Kahan&#39;s.">kahan_sum</a> and the sample variance using a similar recurrence OR cxsc DotPrecision Accumulators.  </dd>
<dt><a class="anchor" id="_todo000005"></a>Class <a class="el" href="classMRSampler.shtml">MRSampler</a>  </dt>
<dd>In <a class="el" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> everything is inline for now -- we need to make this truly object oriented, add a default constructor, add mrs namespace, get rid of #defines, etc. Needs about 20 hours for complete documentation...  </dd>
<dt><a class="anchor" id="_todo000004"></a>Member <a class="el" href="classMRSampler.shtml#a7142c1478e259ec85354407fccfbfa78">MRSampler::MRSoutput</a>  (std::ostream &amp;os, const double eps=0) const </dt>
<dd>may want the output to be padded with TABS for easy dlmread in MATLAB for the trans-diminsional case: same for Output_Domain_Partition  </dd>
<dt><a class="anchor" id="_todo000006"></a>Member <a class="el" href="classMRSampler.shtml#a25d99bdee1a715fb2a8e2a8068b890db">MRSampler::PrintBoxes</a>  (int Nprint)</dt>
<dd>Needs standardization of rendering format(s) for ease of making low-dimensional pictures -- MATLAB/POVRAY/MATPLOTLIB.  </dd>
<dt><a class="anchor" id="_todo000009"></a>Member <a class="el" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8">RSSample::IntegralEstimate</a>  ()</dt>
<dd>Needs LabelSet specifics like Mean()  </dd>
<dt><a class="anchor" id="_todo000010"></a>Member <a class="el" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761">RSSample::Mean</a>  ()</dt>
<dd>Either replace with gsl_mean like computations due to their diff eqns form or Kahan Summations Function Obj using std::transform or DotAccum in c-xsc  </dd>
<dt><a class="anchor" id="_todo000008"></a>Class <a class="el" href="classSortBox.shtml">SortBox</a>  </dt>
<dd>Read Josuttis1999 Sec 8.1.2 to extend and intervene the automatic sorting criterion via Function Objects with more than one internal state at the same time [perhaps also try defining different sorting criterion of the same data type as in p. 178 'As a constructor parameter' with e.g. in P. 191]. Perhaps incorporate alternative sorting criterion into <a class="el" href="classSortBox.shtml" title="A Function Object class for a sorting criterion between one RangedLabBox and another.">SortBox</a>. Older ideas for total order between RangedLabBoxes include: class SortByBoxREDiam { // sort by diameter of range enclosure public: bool operator() ( const <a class="el" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P1, const <a class="el" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P2 ) const { return ( diam(P1.BoxRE) &lt;= diam(P2.BoxRE) ); } }; and class SortByBoxVol { // sort by volume of subdomain box public: bool operator() ( const <a class="el" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P1, const <a class="el" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P2 ) const { return ( (P1.BoxVol) &lt;= (P2.BoxVol) ); } };  </dd>
<dt><a class="anchor" id="_todo000001"></a>Class <a class="el" href="classsubpavings_1_1HistDescription.shtml">subpavings::HistDescription</a>  </dt>
<dd>complete this class and use instead of strings in describing histograms. </dd>
<dt><a class="anchor" id="_todo000003"></a>Member <a class="el" href="classsubpavings_1_1MappedSPnode.shtml#a83d5b7a4609c73e1818fe2d3231c0979">subpavings::MappedSPnode&lt; T &gt;::slice</a>  (const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts)</dt>
<dd>better description.  </dd>
<dt><a class="anchor" id="_todo000007"></a>Class <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">subpavings::RealMappedSPnode</a>  </dt>
<dd>Really it seems like we should not have both the RealMappedSPnode and the RealMappedSPnode classes. Should look at the collator stuff and see if that can be the RealMappedSPnode and just replace all this code by that and rename it. That would mean that we lose the connection with the templatised MappedSPnode class which would be a good thing really - the RealMappedSPnode is adding functionality to the extent that it is not appropriate to see it as a derived class from the mapped nodes any more. Combining collators and real mapped spnodes would deal with all the duplication of code that there is at present.  </dd>
<dt><a class="anchor" id="_todo000014"></a>Member <a class="el" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371">subpavings::SPnode::getSplitDim</a>  () const </dt>
<dd>We could just keep the splitDim for all spnode types. But then we'd have to adjust this when nodes were marginalised etc. but this is expensive ... See RealMappedSPnodeSingleRange etc as well </dd>
</dl>
</div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:24 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
