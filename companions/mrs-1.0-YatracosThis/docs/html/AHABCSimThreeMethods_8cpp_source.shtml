<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AHABCSimThreeMethods.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AHABCSimThreeMethods_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AHABCSimThreeMethods.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AHABCSimThreeMethods_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iomanip&gt;</span> <span class="comment">//to setprecision</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;map&gt;</span> <span class="comment">//to use maps</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;iterator&gt;</span> <span class="comment">//to use iterators</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span> <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">using namespace </span>cxsc;
<a name="l00042"></a>00042 <span class="keyword">using namespace </span>std;
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="AHABCSimThreeMethods_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00044</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046      <span class="comment">//---------Some preliminaries-------------------------------------------//</span>
<a name="l00047"></a>00047    <span class="comment">//set formatting fors input to oss</span>
<a name="l00048"></a>00048     ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00049"></a>00049     os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00050"></a>00050     os.precision(16);
<a name="l00051"></a>00051    
<a name="l00052"></a>00052    <span class="comment">// set up a random number generator for uniform rvs in priority queue</span>
<a name="l00053"></a>00053     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00054"></a>00054     gsl_rng * r;
<a name="l00055"></a>00055     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00056"></a>00056     gsl_rng_env_setup();
<a name="l00057"></a>00057     T = gsl_rng_default;
<a name="l00058"></a>00058     r = gsl_rng_alloc (T);
<a name="l00059"></a>00059     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00060"></a>00060     gsl_rng_set(r, s);
<a name="l00061"></a>00061    
<a name="l00062"></a>00062   <span class="comment">//--------------input parameters------------------------------------------//</span>
<a name="l00063"></a>00063    <span class="comment">//directory to store files in</span>
<a name="l00064"></a>00064   <span class="keywordtype">string</span> dirName = argv[8];
<a name="l00065"></a>00065   
<a name="l00066"></a>00066   <span class="comment">// names of files</span>
<a name="l00067"></a>00067   <span class="keywordtype">string</span> simDataFiles = argv[1]; <span class="comment">// this is a row vector of filenames</span>
<a name="l00068"></a>00068  
<a name="l00069"></a>00069   <span class="comment">// method to construct histogram</span>
<a name="l00070"></a>00070    <span class="comment">// 1: PQ with k as a function of n</span>
<a name="l00071"></a>00071    <span class="comment">// 2: MCMC</span>
<a name="l00072"></a>00072    <span class="comment">// 3: PQ with MDE - not implemented yet</span>
<a name="l00073"></a>00073    <span class="comment">// 4: Regular Histograms - not implemented yet</span>
<a name="l00074"></a>00074    <span class="keywordtype">int</span> method = atoi(argv[2]);
<a name="l00075"></a>00075   
<a name="l00076"></a>00076   <span class="comment">//sample for numRep times for sampled data of samplingSize</span>
<a name="l00077"></a>00077   <span class="keywordtype">size_t</span> samplingSize = atoi(argv[3]);
<a name="l00078"></a>00078   <span class="keywordtype">size_t</span> numRep = atoi(argv[4]);
<a name="l00079"></a>00079   
<a name="l00080"></a>00080   <span class="comment">//parameters for log-likelihood estimation</span>
<a name="l00081"></a>00081   <span class="keywordtype">double</span> wt = atof(argv[5]); <span class="comment">//mass to ensure positive density </span>
<a name="l00082"></a>00082                      <span class="comment">//everywhere in domain</span>
<a name="l00083"></a>00083   <span class="keywordtype">double</span> dx = atof(argv[6]); <span class="comment">//1 for non-atomic densities</span>
<a name="l00084"></a>00084   
<a name="l00085"></a>00085    <span class="comment">//user-defined coverage value to get wanted density region</span>
<a name="l00086"></a>00086   <span class="keywordtype">double</span> cov = atof(argv[7]);
<a name="l00087"></a>00087    <span class="comment">//--------------end of input parameters----------------------------------//</span>
<a name="l00088"></a>00088     
<a name="l00089"></a>00089    <span class="comment">//-------Setup to read in data files------------------------------------//</span>
<a name="l00090"></a>00090    <span class="comment">//create a vector object to store the filenames of simulated data</span>
<a name="l00091"></a>00091   vector&lt;string&gt; simDataFilesVec;
<a name="l00092"></a>00092   <span class="keywordtype">string</span> fileName;
<a name="l00093"></a>00093   cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
<a name="l00094"></a>00094   ifstream file; <span class="comment">// create file for input</span>
<a name="l00095"></a>00095   file.open(simDataFiles.c_str());
<a name="l00096"></a>00096   <span class="comment">// check if this file exists or not</span>
<a name="l00097"></a>00097   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
<a name="l00098"></a>00098     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00099"></a>00099          &lt;&lt; endl;
<a name="l00100"></a>00100     exit(1);
<a name="l00101"></a>00101   }
<a name="l00102"></a>00102     <span class="comment">// else read in the filenames</span>
<a name="l00103"></a>00103   <span class="comment">// store the filenames in the vector simDataFilesVec</span>
<a name="l00104"></a>00104   <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
<a name="l00105"></a>00105     file &gt;&gt; fileName;
<a name="l00106"></a>00106     cout &lt;&lt; fileName &lt;&lt; endl; 
<a name="l00107"></a>00107     simDataFilesVec.push_back(fileName);
<a name="l00108"></a>00108   }
<a name="l00109"></a>00109   <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
<a name="l00110"></a>00110   simDataFilesVec.pop_back();
<a name="l00111"></a>00111    
<a name="l00112"></a>00112   <span class="comment">//container to keep individual data containers for re-sampling</span>
<a name="l00113"></a>00113   vector&lt;RVecData&gt; unlabDataVec; <span class="comment">//unlabelled data</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115    <span class="comment">//container to keep both simulated and observed data to make root box</span>
<a name="l00116"></a>00116    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
<a name="l00117"></a>00117   dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>; 
<a name="l00118"></a>00118 
<a name="l00119"></a>00119   <span class="comment">// put all simulated data into container allData</span>
<a name="l00120"></a>00120   cout &lt;&lt; <span class="stringliteral">&quot;\nPut all data in a container to get rootbox: &quot;</span> &lt;&lt; endl;
<a name="l00121"></a>00121   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; simDataFilesVec.size(); i++) {
<a name="l00122"></a>00122     cout &lt;&lt; simDataFilesVec[i] &lt;&lt; endl;
<a name="l00123"></a>00123     <span class="comment">//read into allData</span>
<a name="l00124"></a>00124     <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), simDataFilesVec[i], 0);
<a name="l00125"></a>00125     <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
<a name="l00126"></a>00126       cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00127"></a>00127         &lt;&lt; endl;
<a name="l00128"></a>00128       exit(1);
<a name="l00129"></a>00129     } 
<a name="l00130"></a>00130     <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr at iteration &quot; &lt;&lt; i &lt;&lt; endl;</span>
<a name="l00131"></a>00131     <span class="comment">//Then read each data set and push into unlabDataVec </span>
<a name="l00132"></a>00132     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> unlabIndData;
<a name="l00133"></a>00133     <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(unlabIndData, simDataFilesVec[i], 0);
<a name="l00134"></a>00134     unlabDataVec.push_back(unlabIndData);
<a name="l00135"></a>00135   } <span class="comment">// end of putting simulated data into container</span>
<a name="l00136"></a>00136   
<a name="l00137"></a>00137   <span class="comment">//Make root box from all the data</span>
<a name="l00138"></a>00138   cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00139"></a>00139   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
<a name="l00140"></a>00140   histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00141"></a>00141         <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr AFTER iteration &quot;  &lt;&lt; endl;</span>
<a name="l00142"></a>00142   histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
<a name="l00143"></a>00143   ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00144"></a>00144   <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00145"></a>00145   <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
<a name="l00146"></a>00146   cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
<a name="l00147"></a>00147   
<a name="l00148"></a>00148   <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
<a name="l00149"></a>00149   <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
<a name="l00150"></a>00150   <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
<a name="l00151"></a>00151   
<a name="l00152"></a>00152   <span class="comment">//----go through each RVecData in unlabData for:-------------------------//</span>
<a name="l00153"></a>00153   <span class="comment">//1. point mass filtering</span>
<a name="l00154"></a>00154   <span class="comment">//2. build a histogram</span>
<a name="l00155"></a>00155   
<a name="l00156"></a>00156   <span class="comment">//Set up containers to contain weights for each mixture model</span>
<a name="l00157"></a>00157   vector&lt; map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt; WeightPMVec;<span class="comment">//for point mass</span>
<a name="l00158"></a>00158   vector&lt;double&gt; WeightHistVec; <span class="comment">//for histogram</span>
<a name="l00159"></a>00159   vector&lt;double&gt; WeightPM;
<a name="l00160"></a>00160   
<a name="l00161"></a>00161     <span class="comment">//Set up containers to contain histogram objects</span>
<a name="l00162"></a>00162   vector&lt;AdaptiveHistogram*&gt; vecPQHist; <span class="comment">//if method 1</span>
<a name="l00163"></a>00163   vector&lt;AdaptiveHistogramCollator*&gt; vecMCMCHist; <span class="comment">//if method 2</span>
<a name="l00164"></a>00164   vector&lt;AdaptiveHistogramValidation*&gt; vecMDEHist; <span class="comment">//if method 3</span>
<a name="l00165"></a>00165   
<a name="l00166"></a>00166   <span class="comment">//Now loop through each RVecData</span>
<a name="l00167"></a>00167   vector&lt;RVecData&gt;::iterator unlabDataIt;
<a name="l00168"></a>00168   RVecData::iterator dataIt;
<a name="l00169"></a>00169   <span class="keywordtype">size_t</span> D = 0;
<a name="l00170"></a>00170   <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
<a name="l00171"></a>00171       unlabDataIt++) 
<a name="l00172"></a>00172   {
<a name="l00173"></a>00173       cout &lt;&lt; <span class="stringliteral">&quot;==============Simulated Data &quot;</span> &lt;&lt; D &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
<a name="l00174"></a>00174       <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labData; <span class="comment">//for point mass filtering </span>
<a name="l00175"></a>00175       <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">//for now, do this only in 1D</span>
<a name="l00176"></a>00176       <span class="comment">//make a map for value of x (the key) and each of its respective </span>
<a name="l00177"></a>00177       <span class="comment">//counts (the value)</span>
<a name="l00178"></a>00178       map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
<a name="l00179"></a>00179       <span class="comment">//run a point mass filtering to get &quot;atomic&quot; points</span>
<a name="l00180"></a>00180       <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>((*unlabDataIt), CountsMap);
<a name="l00181"></a>00181     
<a name="l00182"></a>00182       <span class="comment">//Is there a more efficient way for the following:</span>
<a name="l00183"></a>00183       <span class="comment">//Iterate through the data set again. Label point-mass with 0 and </span>
<a name="l00184"></a>00184       <span class="comment">//the rest with 1.</span>
<a name="l00185"></a>00185       <span class="comment">//Also get a map for the EMF of  point mass data</span>
<a name="l00186"></a>00186       map&lt;rvector,double, less&lt;rvector&gt; &gt; EMFMap;
<a name="l00187"></a>00187       map&lt;rvector, double, less&lt;rvector&gt; &gt;::iterator EMFMapIt;
<a name="l00188"></a>00188       <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>((*unlabDataIt), labData, CountsMap, EMFMap);
<a name="l00189"></a>00189             
<a name="l00190"></a>00190       <span class="comment">/*optional: output RSSample this to .txt</span>
<a name="l00191"></a>00191 <span class="comment">      vector&lt;LabPnt&gt;::iterator LabPntIt; //to iterate over labData.Samples</span>
<a name="l00192"></a>00192 <span class="comment">      string fileName = &quot;Labelled&quot;;</span>
<a name="l00193"></a>00193 <span class="comment">      fileName += simDataFilesVec[D];</span>
<a name="l00194"></a>00194 <span class="comment">      oftream os;</span>
<a name="l00195"></a>00195 <span class="comment">      os.open(fileName.c_str());</span>
<a name="l00196"></a>00196 <span class="comment">      for (LabPntIt = labData.Samples.begin(); LabPntIt &lt; labData.Samples.end();</span>
<a name="l00197"></a>00197 <span class="comment">          LabPntIt++) {</span>
<a name="l00198"></a>00198 <span class="comment">        (*LabPntIt).Print(os);</span>
<a name="l00199"></a>00199 <span class="comment">      }</span>
<a name="l00200"></a>00200 <span class="comment">      os &lt;&lt; flush;</span>
<a name="l00201"></a>00201 <span class="comment">      */</span> <span class="comment">//end of optional output</span>
<a name="l00202"></a>00202       
<a name="l00203"></a>00203       <span class="comment">//Store the weights</span>
<a name="l00204"></a>00204       cout &lt;&lt; <span class="stringliteral">&quot;Atomic points and their EMFs&quot;</span> &lt;&lt; endl;
<a name="l00205"></a>00205       <span class="keywordtype">double</span> pmWeight = 0.0;
<a name="l00206"></a>00206       <span class="keywordtype">double</span> MaxpmWeight = 0.0;
<a name="l00207"></a>00207                         rvector AtomWithMaxpm = EMFMap.begin()-&gt;first;
<a name="l00208"></a>00208       <span class="keywordflow">for</span> (EMFMapIt = EMFMap.begin(); EMFMapIt != EMFMap.end(); EMFMapIt++) {
<a name="l00209"></a>00209         <span class="keywordflow">if</span>(EMFMapIt-&gt;second &gt; MaxpmWeight) 
<a name="l00210"></a>00210           {<span class="comment">//a messy way to keep the max atom and weight...</span>
<a name="l00211"></a>00211             MaxpmWeight=EMFMapIt-&gt;second;
<a name="l00212"></a>00212             AtomWithMaxpm = EMFMapIt-&gt;first;
<a name="l00213"></a>00213           }
<a name="l00214"></a>00214         pmWeight += EMFMapIt-&gt;second;
<a name="l00215"></a>00215         <span class="keywordflow">if</span>( EMFMapIt-&gt;second &lt; 0.0)<span class="comment">// use &lt; to skip the ? below</span>
<a name="l00216"></a>00216           {
<a name="l00217"></a>00217             cout &lt;&lt; setprecision(16) &lt;&lt; EMFMapIt-&gt;first 
<a name="l00218"></a>00218            &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; EMFMapIt-&gt;second &lt;&lt; endl;
<a name="l00219"></a>00219             cout &lt;&lt; <span class="stringliteral">&quot;is this atomic in your experimental precision?&quot;</span> &lt;&lt; endl; getchar();
<a name="l00220"></a>00220           }
<a name="l00221"></a>00221       }
<a name="l00222"></a>00222                         cout &lt;&lt; <span class="stringliteral">&quot;Maximum Weight of a set of Atoms of size &quot;</span>&lt;&lt; EMFMap.size() 
<a name="l00223"></a>00223         &lt;&lt; <span class="stringliteral">&quot; is &quot;</span> &lt;&lt; MaxpmWeight &lt;&lt; <span class="stringliteral">&quot; at &quot;</span> &lt;&lt; AtomWithMaxpm &lt;&lt; endl;
<a name="l00224"></a>00224       WeightHistVec.push_back(1.0 - pmWeight);
<a name="l00225"></a>00225       WeightPMVec.push_back(EMFMap);
<a name="l00226"></a>00226       WeightPM.push_back(pmWeight);
<a name="l00227"></a>00227       
<a name="l00228"></a>00228       <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
<a name="l00229"></a>00229         <span class="comment">//and the normalised histogram</span>
<a name="l00230"></a>00230         <span class="keywordtype">string</span> weightFileName = dirName;
<a name="l00231"></a>00231         weightFileName += <span class="stringliteral">&quot;Weights&quot;</span>;
<a name="l00232"></a>00232       ostringstream stm1;
<a name="l00233"></a>00233       stm1 &lt;&lt; D;
<a name="l00234"></a>00234       weightFileName += stm1.str();
<a name="l00235"></a>00235       weightFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00236"></a>00236       os.open(weightFileName.c_str());
<a name="l00237"></a>00237       map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
<a name="l00238"></a>00238       <span class="keywordflow">for</span> (mapIt = (EMFMap).begin(); mapIt != (EMFMap).end(); mapIt++) {
<a name="l00239"></a>00239         os &lt;&lt; mapIt-&gt;second &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;first;
<a name="l00240"></a>00240       }
<a name="l00241"></a>00241        os &lt;&lt; endl;
<a name="l00242"></a>00242       os &lt;&lt; flush;
<a name="l00243"></a>00243        os.close();
<a name="l00244"></a>00244        cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
<a name="l00245"></a>00245        cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;
<a name="l00246"></a>00246       
<a name="l00247"></a>00247     
<a name="l00248"></a>00248     } <span class="comment">// end of point mass filtering for 1D</span>
<a name="l00249"></a>00249   
<a name="l00250"></a>00250     <span class="comment">//----Now build the histograms using MCMC with automated convergence</span>
<a name="l00251"></a>00251     <span class="comment">// diagnostics---------------------------------------------------------</span>
<a name="l00252"></a>00252     cout &lt;&lt; <span class="stringliteral">&quot;\nMaking histogram for simulated data in &quot;</span> &lt;&lt; simDataFilesVec[D] 
<a name="l00253"></a>00253         &lt;&lt; endl;
<a name="l00254"></a>00254     <span class="comment">//booleans to check is insertion is successful and if PQ is successful</span>
<a name="l00255"></a>00255     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00256"></a>00256     <span class="keywordtype">bool</span> successfulMadeHist = <span class="keyword">false</span>;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="keywordflow">switch</span>(method)  { 
<a name="l00259"></a>00259       <span class="keywordflow">case</span> 1: <span class="comment">//PQ with kmax as a function of n </span>
<a name="l00260"></a>00260       { 
<a name="l00261"></a>00261         cout &lt;&lt; <span class="stringliteral">&quot;Make histogram using PQ:&quot;</span> &lt;&lt; endl;
<a name="l00262"></a>00262         <span class="comment">// make an Adaptive Histogram object with box specified by the data.</span>
<a name="l00263"></a>00263         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistPtr;
<a name="l00264"></a>00264         myHistPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00265"></a>00265         
<a name="l00266"></a>00266         <span class="comment">// feed the data into myHist. No splits are done yet.</span>
<a name="l00267"></a>00267         <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00268"></a>00268                cout &lt;&lt; <span class="stringliteral">&quot;about to insert into histogram only data with label 1&quot;</span>&lt;&lt;endl;
<a name="l00269"></a>00269           successfulInsertion = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00270"></a>00270         }
<a name="l00271"></a>00271         <span class="keywordflow">else</span> { 
<a name="l00272"></a>00272           successfulInsertion = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00273"></a>00273         }
<a name="l00274"></a>00274           
<a name="l00275"></a>00275         <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00276"></a>00276           
<a name="l00277"></a>00277           <span class="keywordtype">size_t</span> n =(myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;getCounter();
<a name="l00278"></a>00278           <span class="keywordtype">double</span> alpha = 0.5;   
<a name="l00279"></a>00279           <span class="keywordtype">size_t</span> finalK = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, alpha));
<a name="l00280"></a>00280           <span class="keywordflow">if</span> (dataDim==1) cout &lt;&lt; <span class="stringliteral">&quot;sample size for non-atomic data = &quot;</span> &lt;&lt; n &lt;&lt; endl;
<a name="l00281"></a>00281           cout &lt;&lt; <span class="stringliteral">&quot;Max K: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00282"></a>00282           <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount; <span class="comment">// split node wth most points in first </span>
<a name="l00283"></a>00283           <span class="comment">// until number of points in all nodes &lt;= finalK</span>
<a name="l00284"></a>00284           <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK); 
<a name="l00285"></a>00285           <span class="keywordtype">double</span> beta = 0.95;
<a name="l00286"></a>00286           <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, beta));<span class="comment">//maximum #leaves</span>
<a name="l00287"></a>00287           <span class="comment">//TODO: this is a unjustified stopping rule for finite n!!!!!!!!! </span>
<a name="l00288"></a>00288           <span class="comment">// to get min volume, need volume of root box</span>
<a name="l00289"></a>00289           <span class="comment">//double volRoot = (myHistPtr-&gt;getSubPaving())-&gt;nodeVolume();</span>
<a name="l00290"></a>00290           <span class="comment">// double minVol = volRoot/pow(2, int(pow(n, 1.0-alpha)-1.0));</span>
<a name="l00291"></a>00291           <span class="comment">// double minVol = volRoot/(pow(n, 1.0-alpha)*1.0);</span>
<a name="l00292"></a>00292           <span class="comment">//cout &lt;&lt; &quot;minimum volume: &quot; &lt;&lt; minVol &lt;&lt; endl;</span>
<a name="l00293"></a>00293           
<a name="l00294"></a>00294           <span class="comment">// now split with priority queue</span>
<a name="l00295"></a>00295           successfulMadeHist = myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount,
<a name="l00296"></a>00296                   critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r, maxLeafNodes); <span class="comment">// without minVol </span>
<a name="l00297"></a>00297           <span class="comment">//successfulMadeHist = myHist.prioritySplit(nodeCompCount,</span>
<a name="l00298"></a>00298           <span class="comment">//          critCount, NOLOG, 0, minVol, r); // with minVol       </span>
<a name="l00299"></a>00299           
<a name="l00300"></a>00300           <span class="keywordflow">if</span> (successfulMadeHist) { 
<a name="l00301"></a>00301             vecPQHist.push_back(myHistPtr); 
<a name="l00302"></a>00302             <span class="comment">// optional output for histogram</span>
<a name="l00303"></a>00303             <span class="keywordtype">string</span> histFileName;
<a name="l00304"></a>00304             histFileName = dirName;
<a name="l00305"></a>00305             histFileName += <span class="stringliteral">&quot;Hist&quot;</span>;
<a name="l00306"></a>00306             ostringstream stm1;
<a name="l00307"></a>00307             stm1 &lt;&lt; D;
<a name="l00308"></a>00308             histFileName += stm1.str();
<a name="l00309"></a>00309             histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00310"></a>00310             myHistPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(histFileName);
<a name="l00311"></a>00311             <span class="comment">// end of optional output for histogram</span>
<a name="l00312"></a>00312           }
<a name="l00313"></a>00313           <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;Histogram not made.&quot;</span> &lt;&lt; endl; exit(1); }
<a name="l00314"></a>00314         } <span class="comment">// end of successfulInsertion  </span>
<a name="l00315"></a>00315         <span class="keywordflow">break</span>;
<a name="l00316"></a>00316       }
<a name="l00317"></a>00317       
<a name="l00318"></a>00318       <span class="keywordflow">case</span> 2: <span class="comment">// MCMC</span>
<a name="l00319"></a>00319       {
<a name="l00320"></a>00320         cout &lt;&lt; <span class="stringliteral">&quot;Make histogram using MCMC:&quot;</span> &lt;&lt; endl;
<a name="l00321"></a>00321         <span class="comment">// make an Adaptive Histogram object with box specified by the simulated data.</span>
<a name="l00322"></a>00322         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00323"></a>00323         <span class="comment">// feed the data into myHist. No splits are done yet.</span>
<a name="l00324"></a>00324         <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00325"></a>00325           successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00326"></a>00326         }<span class="comment">//Gloria has not fielded this option??? TODO: for univariate trandimensional density estimation</span>
<a name="l00327"></a>00327         <span class="keywordflow">else</span> { 
<a name="l00328"></a>00328           successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330         <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00331"></a>00331           <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal; <span class="comment">// set up proposal distribution object</span>
<a name="l00332"></a>00332           <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior; <span class="comment">// set up prior distribution object </span>
<a name="l00333"></a>00333           <span class="comment">// specify minPoints</span>
<a name="l00334"></a>00334           <span class="keywordtype">int</span> minPoints = 0;          
<a name="l00335"></a>00335           <span class="comment">//TODO: need to add a minVol criteria in MCMC!!!</span>
<a name="l00336"></a>00336           <span class="comment">//Parameters</span>
<a name="l00337"></a>00337           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = 10000;
<a name="l00338"></a>00338           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = 500;
<a name="l00339"></a>00339           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = 50;
<a name="l00340"></a>00340           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* myCollPtr;
<a name="l00341"></a>00341           myCollPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; 
<a name="l00342"></a>00342           *myCollPtr = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a733cc04938b2236087cbbe0384985c3d" title="Outputting MCMC samples from histogram state space.">MCMC</a>(loops, burnin, 
<a name="l00343"></a>00343               thinout, D, proposal, logPrior, minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>); 
<a name="l00344"></a>00344               <span class="comment">//thinout, D, proposal, logPrior, minPoints);//GT??: how to stop log samples - this did not work  </span>
<a name="l00345"></a>00345           
<a name="l00346"></a>00346           <span class="keywordflow">if</span> (NULL != myCollPtr) {  
<a name="l00347"></a>00347             successfulMadeHist = <span class="keyword">true</span>;
<a name="l00348"></a>00348             vecMCMCHist.push_back(myCollPtr); 
<a name="l00349"></a>00349             <span class="comment">// optional output for histogram</span>
<a name="l00350"></a>00350             <span class="keywordtype">string</span> histFileName;
<a name="l00351"></a>00351             histFileName = dirName;
<a name="l00352"></a>00352             histFileName += <span class="stringliteral">&quot;AverageMCMC&quot;</span>;
<a name="l00353"></a>00353             ostringstream stm1;
<a name="l00354"></a>00354             stm1 &lt;&lt; D;
<a name="l00355"></a>00355             histFileName += stm1.str();
<a name="l00356"></a>00356             histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00357"></a>00357             myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(histFileName);
<a name="l00358"></a>00358             <span class="comment">// end of optional output for histogram</span>
<a name="l00359"></a>00359             }
<a name="l00360"></a>00360           <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;MCMC failed.&quot;</span> &lt;&lt; endl; exit(1); }   
<a name="l00361"></a>00361         } <span class="comment">// end of successfulInsertion</span>
<a name="l00362"></a>00362         <span class="keywordflow">break</span>;            
<a name="l00363"></a>00363       }
<a name="l00364"></a>00364     } <span class="comment">// end of switch(method)  </span>
<a name="l00365"></a>00365     D++; <span class="comment">// counter to go through unlabDataVec</span>
<a name="l00366"></a>00366   } <span class="comment">// end of going through unlabDataVec</span>
<a name="l00367"></a>00367 
<a name="l00368"></a>00368   <span class="comment">//-----end of going through each RVecData in unlabData------------------//</span>
<a name="l00369"></a>00369   
<a name="l00370"></a>00370   <span class="comment">//-----get marginal histograms for dimensions more than 1 --------------//</span>
<a name="l00371"></a>00371   <span class="comment">//---- and density region----------------//</span>
<a name="l00372"></a>00372   <span class="comment">//Marginalise</span>
<a name="l00373"></a>00373    D = 0; <span class="comment">//reset D to 0</span>
<a name="l00374"></a>00374   <span class="comment">//iterate through each data set</span>
<a name="l00375"></a>00375   <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); 
<a name="l00376"></a>00376       unlabDataIt &lt; unlabDataVec.end(); unlabDataIt++) {  
<a name="l00377"></a>00377     <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// get density region only for 1D data</span>
<a name="l00378"></a>00378       cout &lt;&lt; <span class="stringliteral">&quot;\nGet &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region for dataset &quot;</span> &lt;&lt; D;
<a name="l00379"></a>00379       
<a name="l00380"></a>00380       ostringstream stm1; stm1 &lt;&lt; cov;
<a name="l00381"></a>00381       <span class="keywordtype">string</span> covFileName = dirName;
<a name="l00382"></a>00382       covFileName += stm1.str(); 
<a name="l00383"></a>00383       covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l00384"></a>00384       ostringstream stm2; stm2 &lt;&lt; D;
<a name="l00385"></a>00385       covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00386"></a>00386       covFileName += stm2.str();
<a name="l00387"></a>00387       covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00388"></a>00388       <span class="keywordflow">if</span> (method ==1 ) {
<a name="l00389"></a>00389         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> covNodes;
<a name="l00390"></a>00390         vecPQHist[D]-&gt;findDensityRegion(cov, WeightPM[D], covNodes, covFileName); 
<a name="l00391"></a>00391       }
<a name="l00392"></a>00392       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method ==2) {
<a name="l00393"></a>00393         vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l00394"></a>00394         vecMCMCHist[D]-&gt;findDensityRegion(cov, WeightPM[D], covNodes, covFileName); 
<a name="l00395"></a>00395       }
<a name="l00396"></a>00396       cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;
<a name="l00397"></a>00397     } <span class="comment">// done with dataDim == 1</span>
<a name="l00398"></a>00398   
<a name="l00399"></a>00399     <span class="comment">// only do the marginalisation if dimension &gt; 1</span>
<a name="l00400"></a>00400     <span class="keywordflow">else</span> { <span class="comment">//(dataDim &gt; 1) </span>
<a name="l00401"></a>00401       <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00402"></a>00402       <span class="keywordflow">while</span> (!done) {
<a name="l00403"></a>00403         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= dataDim; i++){
<a name="l00404"></a>00404           <span class="comment">//marginalise for univariate histograms</span>
<a name="l00405"></a>00405           cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for coordinate &quot;</span> &lt;&lt; i 
<a name="l00406"></a>00406               &lt;&lt; endl;
<a name="l00407"></a>00407           <span class="keywordtype">int</span> myints[] = {i}; 
<a name="l00408"></a>00408           std::vector &lt; int &gt; margDims (myints, 
<a name="l00409"></a>00409                       myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
<a name="l00410"></a>00410           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
<a name="l00411"></a>00411           
<a name="l00412"></a>00412           <span class="keywordflow">if</span> (method == 1) { 
<a name="l00413"></a>00413             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> myColl;
<a name="l00414"></a>00414             myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(*vecPQHist[D]);
<a name="l00415"></a>00415             marginal = myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">marginalise</a>(margDims); 
<a name="l00416"></a>00416           }
<a name="l00417"></a>00417           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method == 2) {
<a name="l00418"></a>00418             marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
<a name="l00419"></a>00419           }
<a name="l00420"></a>00420           
<a name="l00421"></a>00421           <span class="comment">//output to .txt          </span>
<a name="l00422"></a>00422           <span class="keywordtype">string</span> margFileName = dirName; 
<a name="l00423"></a>00423           margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;   <span class="comment">// provide a filename</span>
<a name="l00424"></a>00424           ostringstream stm1; stm1 &lt;&lt; i;
<a name="l00425"></a>00425           margFileName += stm1.str();
<a name="l00426"></a>00426           ostringstream stm4; stm4 &lt;&lt; D;
<a name="l00427"></a>00427           margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00428"></a>00428           margFileName += stm4.str();
<a name="l00429"></a>00429           margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00430"></a>00430           <span class="comment">// output the marginal to file</span>
<a name="l00431"></a>00431           marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName); 
<a name="l00432"></a>00432       
<a name="l00433"></a>00433           <span class="comment">// get density region</span>
<a name="l00434"></a>00434           cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
<a name="l00435"></a>00435           ostringstream stm3;
<a name="l00436"></a>00436           stm3 &lt;&lt; cov;
<a name="l00437"></a>00437           <span class="keywordtype">string</span> covFileName = dirName;
<a name="l00438"></a>00438           covFileName += stm3.str(); 
<a name="l00439"></a>00439           covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l00440"></a>00440           covFileName += stm1.str();
<a name="l00441"></a>00441           covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00442"></a>00442           covFileName += stm4.str();
<a name="l00443"></a>00443           covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00444"></a>00444           vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l00445"></a>00445           marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);  
<a name="l00446"></a>00446           cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;   
<a name="l00447"></a>00447             
<a name="l00448"></a>00448           <span class="keywordflow">if</span>(i == dataDim) { done = <span class="keyword">true</span>; } <span class="comment">// can&#39;t make marginal for</span>
<a name="l00449"></a>00449                                   <span class="comment">// pair dataDim-dataDim</span>
<a name="l00450"></a>00450           <span class="comment">//marginalise for (dataDim choose 2) pairs</span>
<a name="l00451"></a>00451           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=(i+1); j &lt;= dataDim; j++) {
<a name="l00452"></a>00452             cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for pair &quot;</span> &lt;&lt; i 
<a name="l00453"></a>00453               &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;
<a name="l00454"></a>00454             <span class="keywordtype">int</span> myints[] = {i,j}; 
<a name="l00455"></a>00455             std::vector &lt; int &gt; margDims (myints, 
<a name="l00456"></a>00456                     myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
<a name="l00457"></a>00457             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
<a name="l00458"></a>00458             
<a name="l00459"></a>00459             <span class="keywordflow">if</span> (method == 1) { 
<a name="l00460"></a>00460               <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> myColl;
<a name="l00461"></a>00461               myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(*vecPQHist[D]);
<a name="l00462"></a>00462               marginal = myColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab" title="Make a marginalised version of this histogram collator.">marginalise</a>(margDims); 
<a name="l00463"></a>00463             }
<a name="l00464"></a>00464             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (method == 2) {
<a name="l00465"></a>00465             marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
<a name="l00466"></a>00466             }           
<a name="l00467"></a>00467             margFileName = dirName;
<a name="l00468"></a>00468             margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l00469"></a>00469             ostringstream stm2; stm2 &lt;&lt; j;
<a name="l00470"></a>00470             margFileName += stm1.str();
<a name="l00471"></a>00471             margFileName += <span class="stringliteral">&quot;_&quot;</span>;
<a name="l00472"></a>00472             margFileName += stm2.str();
<a name="l00473"></a>00473             margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00474"></a>00474             margFileName += stm4.str();
<a name="l00475"></a>00475             margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00476"></a>00476             <span class="comment">// output the marginal to file</span>
<a name="l00477"></a>00477             marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName);  
<a name="l00478"></a>00478             cout &lt;&lt; <span class="stringliteral">&quot;Marginal output is in &quot;</span> &lt;&lt; margFileName &lt;&lt; endl;
<a name="l00479"></a>00479         
<a name="l00480"></a>00480             <span class="comment">// get density region</span>
<a name="l00481"></a>00481             cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
<a name="l00482"></a>00482             <span class="keywordtype">string</span> covFileName = dirName;
<a name="l00483"></a>00483             covFileName += stm3.str(); 
<a name="l00484"></a>00484             covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l00485"></a>00485             covFileName += stm1.str();
<a name="l00486"></a>00486             covFileName += <span class="stringliteral">&quot;_&quot;</span>;
<a name="l00487"></a>00487             covFileName += stm2.str();
<a name="l00488"></a>00488             covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l00489"></a>00489             covFileName += stm4.str();
<a name="l00490"></a>00490             covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00491"></a>00491             vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l00492"></a>00492             marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);            
<a name="l00493"></a>00493             cout &lt;&lt; <span class="stringliteral">&quot;and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;          
<a name="l00494"></a>00494           } <span class="comment">// end of j</span>
<a name="l00495"></a>00495         } <span class="comment">// end of i</span>
<a name="l00496"></a>00496       } <span class="comment">// end of while</span>
<a name="l00497"></a>00497     } <span class="comment">// end of dim &gt; 1</span>
<a name="l00498"></a>00498     D++; <span class="comment">//increment the data container count</span>
<a name="l00499"></a>00499   } <span class="comment">// end of going through unlabDataVed</span>
<a name="l00500"></a>00500   <span class="comment">//----end of marginalising histograms to get scatter histogram plots---//</span>
<a name="l00501"></a>00501   
<a name="l00502"></a>00502   <span class="comment">//TODO: The following procedure takes up a lot of memory. Need to make it </span>
<a name="l00503"></a>00503   <span class="comment">//more memory efficient!!!! </span>
<a name="l00504"></a>00504   <span class="comment">//--Sample from RVecData in unlabData and get estimated log-likelihood-//</span>
<a name="l00505"></a>00505   cout &lt;&lt; <span class="stringliteral">&quot;\nSample from simulated datasets and get estimated log-likelihood&quot;</span> 
<a name="l00506"></a>00506       &lt;&lt; endl;
<a name="l00507"></a>00507   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numRep; i++) {
<a name="l00508"></a>00508     <span class="comment">//cout &lt;&lt; &quot;===========Round &quot; &lt;&lt; i &lt;&lt; &quot;==============&quot; &lt;&lt; endl;</span>
<a name="l00509"></a>00509     <span class="comment">// container to store the likelihood ratios for this i</span>
<a name="l00510"></a>00510     vector&lt; vector&lt;real&gt; &gt; loglikMat; 
<a name="l00511"></a>00511     
<a name="l00512"></a>00512     <span class="comment">//iterate through unlabDataVec</span>
<a name="l00513"></a>00513     D = 0; <span class="comment">// reset counter for unlabDataVec</span>
<a name="l00514"></a>00514     <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
<a name="l00515"></a>00515       unlabDataIt++) 
<a name="l00516"></a>00516     {
<a name="l00517"></a>00517       cout &lt;&lt; <span class="stringliteral">&quot;\nSampling from simulated dataset &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l00518"></a>00518   
<a name="l00519"></a>00519       <span class="comment">//container to store the likelihood ratios for this dataset</span>
<a name="l00520"></a>00520       vector&lt;real&gt; loglikVec; 
<a name="l00521"></a>00521     
<a name="l00522"></a>00522       <span class="comment">//label the data and make into RSSample</span>
<a name="l00523"></a>00523       <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labSampledData;
<a name="l00524"></a>00524   
<a name="l00525"></a>00525       <span class="comment">//we need to sample without repetition</span>
<a name="l00526"></a>00526       set&lt;int, less&lt;int&gt; &gt; indexSet;
<a name="l00527"></a>00527       <span class="keywordflow">if</span> ( samplingSize &gt;= (*unlabDataIt).size() ) { 
<a name="l00528"></a>00528         cerr &lt;&lt; <span class="stringliteral">&quot;\nTerminated. Sampling size more than or equal to n.&quot;</span> &lt;&lt; endl;
<a name="l00529"></a>00529         exit(1);
<a name="l00530"></a>00530       }
<a name="l00531"></a>00531       <span class="keywordflow">while</span> ( indexSet.size() &lt; samplingSize ) {
<a name="l00532"></a>00532         <span class="comment">//draw a random number in [0,1)</span>
<a name="l00533"></a>00533         <span class="keywordtype">double</span> rand = gsl_rng_uniform(r);
<a name="l00534"></a>00534         <span class="comment">//turn this into an index in [0, (*unlabDataIt).size()-1]</span>
<a name="l00535"></a>00535         <span class="keywordtype">int</span> index = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(rand*((*unlabDataIt).size()
<a name="l00536"></a>00536                                           -1)));
<a name="l00537"></a>00537         indexSet.insert(index);
<a name="l00538"></a>00538       }           
<a name="l00539"></a>00539       
<a name="l00540"></a>00540       <span class="comment">// sample from (*unlabDataIt)</span>
<a name="l00541"></a>00541       <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sampledData;
<a name="l00542"></a>00542       set&lt;int, less&lt;int&gt; &gt;::iterator setIt;
<a name="l00543"></a>00543       <span class="keywordflow">for</span> (setIt = indexSet.begin(); setIt != indexSet.end(); setIt++) {
<a name="l00544"></a>00544         <span class="comment">//put element in allData indexed into data</span>
<a name="l00545"></a>00545         sampledData.push_back((*unlabDataIt)[*setIt]);
<a name="l00546"></a>00546       }
<a name="l00547"></a>00547       
<a name="l00548"></a>00548       <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// only filter for 1D</span>
<a name="l00549"></a>00549         <span class="comment">//make a map for value of x (the key) and each of its respective </span>
<a name="l00550"></a>00550         <span class="comment">//counts (the value)</span>
<a name="l00551"></a>00551         map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
<a name="l00552"></a>00552         <span class="comment">//run a point mass filter to get &quot;atomic&quot; points</span>
<a name="l00553"></a>00553         cout &lt;&lt; <span class="stringliteral">&quot;run point mass filter over sampled data:&quot;</span> &lt;&lt; endl;
<a name="l00554"></a>00554         <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>(sampledData, CountsMap);
<a name="l00555"></a>00555     
<a name="l00556"></a>00556         <span class="comment">//EMFMap is not needed anymore actually - will see how i can turn it off or do something else</span>
<a name="l00557"></a>00557                                 <span class="comment">//TODO: see TODO comment in &quot;../../../src/sptools.cpp&quot; 1220ish Line</span>
<a name="l00558"></a>00558         map&lt;rvector, double, less&lt;rvector&gt; &gt; EMFMap; 
<a name="l00559"></a>00559         cout &lt;&lt; <span class="stringliteral">&quot;label data&quot;</span> &lt;&lt; endl;
<a name="l00560"></a>00560         <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>(sampledData, labSampledData, CountsMap, EMFMap);
<a name="l00561"></a>00561       }
<a name="l00562"></a>00562       <span class="keywordflow">else</span> { <span class="comment">// for now make RVecData into RSSample object for higher dim</span>
<a name="l00563"></a>00563      <span class="comment">//TODO: This can be done (not for GT&#39;s PhD necessarily) &quot;trans-dimensional density estimation!&quot;</span>
<a name="l00564"></a>00564      <span class="comment">//this is a beautiful extension of estimating axis-parallel low-dimensional atomic densities </span>
<a name="l00565"></a>00565      <span class="comment">//inside root box in R^d or other subsets specified by prior constraints</span>
<a name="l00566"></a>00566         RVecData::iterator it;
<a name="l00567"></a>00567         <span class="keywordflow">for</span> (it = sampledData.begin(); it &lt; sampledData.end(); it++) {
<a name="l00568"></a>00568           <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> labThisData;
<a name="l00569"></a>00569           labThisData.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = (*it);
<a name="l00570"></a>00570           labThisData.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = 1;
<a name="l00571"></a>00571           <span class="comment">//labThisData.Print(cout);</span>
<a name="l00572"></a>00572           labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back(labThisData);
<a name="l00573"></a>00573         }
<a name="l00574"></a>00574       }
<a name="l00575"></a>00575       
<a name="l00576"></a>00576       cout &lt;&lt; <span class="stringliteral">&quot;Get estimated likelihood&quot;</span> &lt;&lt; endl;
<a name="l00577"></a>00577       <span class="comment">//get estimated log-likelihood over each histogram      </span>
<a name="l00578"></a>00578       <span class="keywordflow">switch</span>(method) {
<a name="l00579"></a>00579         <span class="keywordflow">case</span> 1: <span class="comment">//PQ</span>
<a name="l00580"></a>00580         {   
<a name="l00581"></a>00581           <span class="comment">//go through each histogram</span>
<a name="l00582"></a>00582           <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; vecPQHist.size(); k++) {
<a name="l00583"></a>00583             cout &lt;&lt; <span class="stringliteral">&quot;----Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;----------&quot;</span> &lt;&lt; endl; 
<a name="l00584"></a>00584             real estLogLik;
<a name="l00585"></a>00585             <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00586"></a>00586               estLogLik=vecPQHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l00587"></a>00587               labSampledData, dx, wt, WeightHistVec[k], WeightPMVec[k]);
<a name="l00588"></a>00588             }
<a name="l00589"></a>00589             <span class="keywordflow">else</span> {
<a name="l00590"></a>00590               estLogLik=vecPQHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l00591"></a>00591               labSampledData, dx, wt);
<a name="l00592"></a>00592             }
<a name="l00593"></a>00593             cout &lt;&lt; setprecision(6) &lt;&lt; <span class="stringliteral">&quot;Estimated lik for Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
<a name="l00594"></a>00594             loglikVec.push_back(estLogLik);
<a name="l00595"></a>00595           }           
<a name="l00596"></a>00596           <span class="comment">//now get the ratios</span>
<a name="l00597"></a>00597           real Dividend = loglikVec[D];
<a name="l00598"></a>00598           <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; loglikVec.size(); k++) {
<a name="l00599"></a>00599             <span class="comment">//Gloria&#39;s ratio of loglikelihoods: log(lik1)/log(lik2)</span>
<a name="l00600"></a>00600             <span class="comment">//loglikVec[k] = Dividend/loglikVec[k];</span>
<a name="l00601"></a>00601             <span class="comment">//Not quite log Likelihood Ratio -2log(lik1/lik2)=-2.0*log(lik1)+2*log(lik2)</span>
<a name="l00602"></a>00602             <span class="comment">//loglikVec[k] = -2.0*Dividend + 2.0*loglikVec[k];</span>
<a name="l00603"></a>00603             <span class="comment">//log relative likelihood: lik1/lik2=exp(log(lik1/lik2))=exp(log(lik1)-log(lik2))</span>
<a name="l00604"></a>00604             <span class="comment">//loglikVec[k] = exp(Dividend - loglikVec[k]);</span>
<a name="l00605"></a>00605             <span class="comment">//do nothing and leave the loglikelihood as it is</span>
<a name="l00606"></a>00606           }
<a name="l00607"></a>00607           <span class="comment">//push back the log-likehood at the end of the vector if transformed in previous loop</span>
<a name="l00608"></a>00608           loglikVec.push_back(Dividend);
<a name="l00609"></a>00609           loglikMat.push_back(loglikVec);
<a name="l00610"></a>00610           <span class="keywordflow">break</span>;
<a name="l00611"></a>00611         }         
<a name="l00612"></a>00612         <span class="keywordflow">case</span> 2: <span class="comment">//MCMC</span>
<a name="l00613"></a>00613         {
<a name="l00614"></a>00614           <span class="comment">//go through each histogram</span>
<a name="l00615"></a>00615           <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; vecMCMCHist.size(); k++) {
<a name="l00616"></a>00616             real estLogLik;
<a name="l00617"></a>00617             <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00618"></a>00618               estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l00619"></a>00619               labSampledData, dx, wt, WeightHistVec[k], WeightPMVec[k]);
<a name="l00620"></a>00620             }
<a name="l00621"></a>00621             <span class="keywordflow">else</span> {
<a name="l00622"></a>00622               estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l00623"></a>00623               labSampledData, dx, wt);
<a name="l00624"></a>00624             }
<a name="l00625"></a>00625             cout &lt;&lt; setprecision(16) &lt;&lt;<span class="stringliteral">&quot;Estimated lik for Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
<a name="l00626"></a>00626             loglikVec.push_back(estLogLik);
<a name="l00627"></a>00627           }       
<a name="l00628"></a>00628           <span class="comment">//now get the ratios</span>
<a name="l00629"></a>00629           real Dividend = loglikVec[D];
<a name="l00630"></a>00630           <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; loglikVec.size(); k++) {
<a name="l00631"></a>00631             <span class="comment">//Gloria&#39;s ratio of loglikelihoods: log(lik1)/log(lik2)</span>
<a name="l00632"></a>00632             <span class="comment">//loglikVec[k] = Dividend/loglikVec[k];</span>
<a name="l00633"></a>00633             <span class="comment">//Not quite log Likelihood Ratio -2log(lik1/lik2)=-2.0*log(lik1)+2*log(lik2)</span>
<a name="l00634"></a>00634             <span class="comment">//loglikVec[k] = -2.0*Dividend + 2.0*loglikVec[k];</span>
<a name="l00635"></a>00635             <span class="comment">//log relative likelihood: lik1/lik2=exp(log(lik1/lik2))=exp(log(lik1)-log(lik2))</span>
<a name="l00636"></a>00636             <span class="comment">//loglikVec[k] = exp(Dividend - loglikVec[k]);</span>
<a name="l00637"></a>00637             <span class="comment">//do nothing and leave the loglikelihoods as it is</span>
<a name="l00638"></a>00638           }
<a name="l00639"></a>00639           <span class="comment">//push back the log-likehood at the end of the vector</span>
<a name="l00640"></a>00640           loglikVec.push_back(Dividend);
<a name="l00641"></a>00641           loglikMat.push_back(loglikVec);
<a name="l00642"></a>00642           <span class="keywordflow">break</span>;
<a name="l00643"></a>00643         }
<a name="l00644"></a>00644       } <span class="comment">// end of switch(method)</span>
<a name="l00645"></a>00645               
<a name="l00646"></a>00646       D++; <span class="comment">// counter to go through unlabDataVec</span>
<a name="l00647"></a>00647     } <span class="comment">// end of going through unlabDataVec</span>
<a name="l00648"></a>00648     
<a name="l00649"></a>00649     <span class="comment">//output liklogMat for round i to .txt</span>
<a name="l00650"></a>00650     <span class="keywordtype">string</span> EstLikOut = dirName;
<a name="l00651"></a>00651     EstLikOut += <span class="stringliteral">&quot;EstLkl&quot;</span>;
<a name="l00652"></a>00652     ostringstream stm1;
<a name="l00653"></a>00653     stm1 &lt;&lt; i;
<a name="l00654"></a>00654     EstLikOut += stm1.str(); 
<a name="l00655"></a>00655     EstLikOut += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00656"></a>00656     os.open(EstLikOut.c_str());
<a name="l00657"></a>00657     vector&lt; vector&lt;real&gt; &gt;::iterator it1;
<a name="l00658"></a>00658     vector&lt;real&gt;::iterator it2; 
<a name="l00659"></a>00659     <span class="keywordflow">for</span> (it1 = loglikMat.begin(); it1 &lt; loglikMat.end(); it1++) {
<a name="l00660"></a>00660       <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {
<a name="l00661"></a>00661         os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00662"></a>00662         <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;(*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l00663"></a>00663       }
<a name="l00664"></a>00664       os &lt;&lt; endl;
<a name="l00665"></a>00665       <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;endl;</span>
<a name="l00666"></a>00666     } 
<a name="l00667"></a>00667     os &lt;&lt; flush;
<a name="l00668"></a>00668     os.close();
<a name="l00669"></a>00669     cout &lt;&lt; <span class="stringliteral">&quot;Likelihood ratios output to &quot;</span> &lt;&lt; EstLikOut &lt;&lt; endl; 
<a name="l00670"></a>00670     cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;          
<a name="l00671"></a>00671   } <span class="comment">// end of numRep</span>
<a name="l00672"></a>00672    <span class="comment">//-----------output the estimated likelihood to .txt file------------//</span>
<a name="l00673"></a>00673  <span class="comment">//---------------end of sampling and estimating likelihood----------------// </span>
<a name="l00674"></a>00674    
<a name="l00675"></a>00675    <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
<a name="l00676"></a>00676    <span class="comment">//and the normalised histogram</span>
<a name="l00677"></a>00677    <span class="comment">//output liklogMat for round i to .txt</span>
<a name="l00678"></a>00678    <span class="keywordtype">string</span> weightFileName = dirName;
<a name="l00679"></a>00679    weightFileName += <span class="stringliteral">&quot;Weights.txt&quot;</span>;
<a name="l00680"></a>00680     os.open(weightFileName.c_str());
<a name="l00681"></a>00681    vector&lt;map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt;::iterator vecIt;
<a name="l00682"></a>00682    map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
<a name="l00683"></a>00683   <span class="keywordflow">for</span> (vecIt = WeightPMVec.begin(); vecIt &lt; WeightPMVec.end(); vecIt++) {
<a name="l00684"></a>00684     <span class="keywordflow">for</span> (mapIt = (*vecIt).begin(); mapIt != (*vecIt).end(); mapIt++) {
<a name="l00685"></a>00685         os &lt;&lt; mapIt-&gt;first &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;second;
<a name="l00686"></a>00686     }
<a name="l00687"></a>00687     os &lt;&lt; endl;
<a name="l00688"></a>00688   } 
<a name="l00689"></a>00689   
<a name="l00690"></a>00690     os &lt;&lt; flush;
<a name="l00691"></a>00691     os.close();
<a name="l00692"></a>00692     cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
<a name="l00693"></a>00693     cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;  
<a name="l00694"></a>00694    
<a name="l00695"></a>00695    <span class="comment">// free the random generator</span>
<a name="l00696"></a>00696    gsl_rng_free(r);
<a name="l00697"></a>00697 
<a name="l00698"></a>00698    <span class="keywordflow">return</span> 0;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700 } <span class="comment">// end of AHABC</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AHABCSimThreeMethods_8cpp.shtml">AHABCSimThreeMethods.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
