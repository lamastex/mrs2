<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: UniformMixture.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('UniformMixture_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">UniformMixture.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Get the L1-error of uniform mixture for: 1. Exhaustive PQ 2. MDE 3. Regular Histogram.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;gsl/gsl_qrng.h&gt;</code><br/>
</div>
<p><a href="UniformMixture_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="UniformMixture_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Get the L1-error of uniform mixture for: 1. Exhaustive PQ 2. MDE 3. Regular Histogram. </p>

<p>Definition in file <a class="el" href="UniformMixture_8cpp_source.shtml">UniformMixture.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="UniformMixture.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="UniformMixture_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="UniformMixture_8cpp_source.shtml">UniformMixture.cpp</a>.</p>

<p>References <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01286">getRegHistUnifIAE()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03774">subpavings::AdaptiveHistogram::getUnifIAE()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00282">RegHist::heights</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00709">subpavings::AdaptiveHistogramValidation::insertFromRVecForHoldOut()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00272">makeRegularHist()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">subpavings::AdaptiveHistogramValidation::prioritySplitAndEstimate()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01846">subpavings::AdaptiveHistogram::prioritySplitWithTotalVar()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//===================== user-inputs======================================//</span>
  <span class="keywordflow">if</span> ( argc != 8 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UniformMixture n d dataSeed mixShape simNum maxCheck StopVal&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[3]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">int</span> shape = atoi(argv[4]); <span class="comment">//which mixture to use</span>
   <span class="keywordtype">int</span> simNum = atoi(argv[5]); <span class="comment">//which data set </span>
   <span class="keywordtype">double</span> alpha = 0.95; <span class="comment">//to compute the coverage</span>
   <span class="keywordtype">size_t</span> maxCheck = atoi(argv[6]); <span class="comment">//stopping criteria for MDE</span>
   <span class="keywordtype">int</span> StopVal = atoi(argv[7]); <span class="comment">//stopping criteria for total variation</span>
  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(5);
   std::ostringstream stm;
  stm &lt;&lt; simNum;
   <span class="comment">//=================set up for data generation===============================</span>
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <span class="keywordtype">double</span> rootBoxVol = (myPart.getSubPaving())-&gt;nodeVolume();
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;
   <span class="keywordtype">size_t</span> PartSize;

   <span class="comment">// mixture shape</span>
   <span class="keywordtype">string</span> mixShape;
  <span class="keywordflow">if</span> (shape == 1) { mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape ==2) { mixShape = <span class="stringliteral">&quot;3,4,4,2,2,3,3&quot;</span>; } 
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==3) {
    mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }    
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (shape==4) { mixShape = <span class="stringliteral">&quot;3, 3, 2, 3, 3, 2&quot;</span>; }   
  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture   </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt; <span class="comment">// and an iterator over the container</span>
   myPart.getSubPaving()-&gt;getLeaves(trueLeaves); <span class="comment">// fill the container</span>
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
      Pboxes.push_back((*trueIt)-&gt;getBox());
   }
  PartSize = Pboxes.size();
  <span class="comment">// get weight of mixture components</span>
  <span class="keywordtype">double</span> weight = 1.0/(1.0*PartSize); 


  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
     <span class="comment">// cout &lt;&lt; thisrv &lt;&lt; endl;</span>
        theData.push_back(thisrv);
   }  <span class="comment">// data  should be in theData</span>
   

  <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
  <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
  <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;

  <span class="comment">//containers for output needed</span>
   vector&lt;real&gt; IAE;
   vector&lt;int&gt; NumLeafNodes;
   vector&lt;double&gt; TotalVarDist;
   vector&lt;double&gt; Coverage;
   vector&lt;double&gt; Times;
   
  <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
  <span class="comment">// set up function objects for a priority split</span>
  <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 20; i++) {
    <span class="comment">//make a pointer to an AdaptiveHistogram object</span>
    <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox, holdAllStats); 
    successfulInsertion= myHist.insertFromRVec(theData);
    
    <span class="keywordflow">if</span> (successfulInsertion) {
      <span class="keywordtype">int</span> finalK = int(i*0.005*n);
      cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
      <span class="comment">// split until number of leaves is at most minVal</span>
      <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
      <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>

      <span class="keywordtype">size_t</span> maxLeafNodes = n;
      <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
      
      <span class="comment">// we want to check the timings for this</span>
      clock_t start, end;
      <span class="keywordtype">double</span> timing; 
      
      <span class="comment">// do the priority split</span>
      start  = clock(); <span class="comment">// and keep the time</span>
      successfulPQSplit = myHist.prioritySplit(compCount,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
      end = clock();
      timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
      cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
      Times.push_back(timing);

      <span class="keywordflow">if</span> (successfulPQSplit) {
        
        <span class="comment">//optional - output the histogram</span>
        <span class="comment">// create a name for the file to output</span>
            <span class="keywordtype">string</span> fileName;
            fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
            std::ostringstream stm2;
            stm2 &lt;&lt; finalK;
            fileName += stm2.str();
            fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
            myHist.outputToTxtTabs(fileName);
            
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
        (myHist.getSubPaving())-&gt;getLeaves(leaves);

        <span class="comment">//get the IAE</span>
        IAE.push_back(myHist.getUnifIAE(myPart, weight));

        <span class="comment">//get the number of leaves</span>
        NumLeafNodes.push_back(leaves.size());
        <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
        <span class="comment">//cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>

        <span class="comment">//initialize totalvariationdistance</span>
        <span class="keywordtype">double</span> totalVarDist = 0.0;

        <span class="comment">//initialize the coverage</span>
        <span class="keywordtype">size_t</span> yesCovOne = 0;

        <span class="comment">//iterate through the leaf nodes</span>
        <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
    
          cout &lt;&lt; <span class="stringliteral">&quot;Hellinger Distance: &quot;</span> &lt;&lt; endl;
          (*leavesIt)-&gt;getHellingerDist();
          
          <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
          <span class="comment">//get the total variation distance</span>
          <span class="comment">//calculate \mu_n - \mu</span>
               <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
               <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
               <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
          totalVarDist += diffMu;
          <span class="comment">//out &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
          <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
          <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>

          <span class="comment">//get the 95% coverage</span>
          <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
          <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);

          <span class="comment">// get lower and upper bounds</span>
          <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
          <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>

          <span class="comment">//get the true density of the uniform mixture</span>
          <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 0;
          <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
            <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if this box is in trueBox</span>
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if trueBox is in this box</span>
          } <span class="comment">// end of going through all trueBoxes</span>
          
          <span class="comment">// see SAGE worksheet for this</span>
          <span class="comment">// f*leafVol/leafVol = f</span>
          <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}

        } <span class="comment">// end of iterating through the leaves</span>

        <span class="comment">//keep the total variation distance</span>
        <span class="comment">//cout &lt;&lt; &quot;final: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
        TotalVarDist.push_back(totalVarDist);

        <span class="comment">//keep the coverage</span>
        <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
        <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
        Coverage.push_back(yesCovOne*1.0/(leaves.size()*1.0));
      } <span class="comment">// end of if(successfulPQSplit)</span>
    }<span class="comment">// end of if(successfulInsertion)</span>
  } <span class="comment">// end of iterating through different kn&#39;s</span>

  <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
    <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifExhaustivePQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; Coverage.size(); i++) {
      oss &lt;&lt; IAE[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodes[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; TotalVarDist[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Coverage[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; Times[i] &lt;&lt; endl;
    }
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  }
<span class="comment">//=================end of exhaustive PQ=================================// </span>

<span class="comment">//===using total variation to determine best histogram and a stopping rule=//</span>

  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run PQ with total variation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//containers to store needed output</span>
  vector&lt;real&gt; IAETotal;
  vector&lt;int&gt; CoverageTotal;
  vector&lt;int&gt; NumLeafNodesTotal;
  vector&lt;double&gt; TotalVarDistTotal;
  <span class="keywordtype">double</span> timing; 
  
  successfulInsertion = <span class="keyword">false</span>;
  successfulPQSplit = <span class="keyword">false</span>;

  vector&lt;AdaptiveHistogram&gt; HistAtValley;
  
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistTot(pavingBox); 
  successfulInsertion= myHistTot.insertFromRVec(theData);

  <span class="keywordflow">if</span> (successfulInsertion) {
    <span class="keywordtype">int</span> finalK = 1;
    cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
    
    <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;

    <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
    <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
 
    <span class="comment">// we want to check the timings for this</span>
    clock_t start, end;

    <span class="comment">// do the priority split</span>
    start  = clock(); <span class="comment">// and keep the time</span>
    successfulPQSplit = myHistTot.prioritySplitWithTotalVar(compCount,
           critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, StopVal, 
           HistAtValley, simNum); <span class="comment">// no logging</span>
    end = clock();
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;

    <span class="keywordflow">if</span> (successfulPQSplit) {
      <span class="comment">//iterate through the &quot;best&quot; histograms to get the MIAE</span>
      vector&lt;AdaptiveHistogram&gt;::iterator it;
      <span class="keywordflow">for</span> (it = HistAtValley.begin(); it &lt; HistAtValley.end(); it++) {
        <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
        <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
        ((*it).getSubPaving())-&gt;getLeaves(leaves);

        <span class="comment">//get the IAE</span>
        IAETotal.push_back((*it).getUnifIAE(myPart, weight));

        <span class="comment">//get the number of leaves</span>
        NumLeafNodesTotal.push_back(leaves.size());
        <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
        cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;

        <span class="comment">//initialize the coverage</span>
        <span class="keywordtype">size_t</span> yesCovOne = 0;
        
        <span class="comment">//initialize the total variation distance</span>
        <span class="keywordtype">double</span> totalVarDist = 0.0;

        <span class="comment">//iterate through the leaf nodes</span>
        <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
          <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
               <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
               <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
               <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
          totalVarDist += diffMu;
          <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
          <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
          <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
          
          <span class="comment">//get the 95% coverage</span>
          <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
          <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);

          <span class="comment">// get lower and upper bounds</span>
          <span class="keywordtype">double</span> Lb = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
          <span class="keywordtype">double</span> Ub = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>

          <span class="comment">//get the true density of the uniform mixture</span>
          <span class="keywordtype">double</span> f = 0;
          <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
            <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if this box is in trueBox</span>
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if trueBox is in this box</span>
          } <span class="comment">// end of going through all trueBoxes</span>
          
          <span class="comment">// see SAGE worksheet for this</span>
          <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}
        } <span class="comment">// end of iterating through the leaves</span>

        <span class="comment">//keep the total variation distance</span>
        TotalVarDistTotal.push_back(totalVarDist);

        <span class="comment">//keep the coverage</span>
        <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
        <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
        CoverageTotal.push_back(yesCovOne*1.0/(leaves.size()*1.0));
      } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
    } <span class="comment">// end of successfulPQSplit</span>
  } <span class="comment">// end of successfulInsertion</span>

  <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
    <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifTotalVariationPQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageTotal.size(); i++) {
      oss &lt;&lt; IAETotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; TotalVarDistTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; CoverageTotal[i] &lt;&lt; endl;
    }
    oss &lt;&lt; timing &lt;&lt; endl;
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  }
<span class="comment">//=================end of total variation with stopping rule=================================// </span>

<span class="comment">//==================Hold-out MDE===========================================//</span>
  cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
  <span class="comment">// indicators</span>
   successfulInsertion = <span class="keyword">false</span>;
   
  <span class="comment">// Put the data from the container into the histogram  </span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal(pavingBox);
  <span class="keywordtype">int</span> holdOutCount = int(n*0.3);
  <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   
  successfulInsertion = myHistVal.insertFromRVecForHoldOut(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
      &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 

  <span class="comment">//containers for output needed</span>
  vector&lt;real&gt; IAEV;
  vector&lt;int&gt; NumLeafNodesV;
  vector&lt;double&gt; TotalVarDistV;
  vector&lt;double&gt; CoverageV;
  vector&lt;AdaptiveHistogramValidation&gt; HistsKept;
  
  <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
    <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
    <span class="keywordtype">int</span> finalK = 1;
    <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);

    <span class="comment">//start the hold out estimation</span>
    <span class="comment">//with stopping criteria</span>
    <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>;
    cout &lt;&lt; <span class="stringliteral">&quot;------Running MDEAll with stopping criteria-----------&quot;</span> &lt;&lt; endl;
    <span class="keywordtype">int</span> method = 2; <span class="comment">// MDE</span>

    <span class="comment">//maximum number of leaf nodes allowed </span>
    <span class="keywordtype">int</span> trainCount = n-holdOutCount;
    <span class="keywordtype">size_t</span> maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); <span class="comment">// temporarily</span>

    clock_t start, end;
    start = clock();
    successfulPQSplit = myHistVal.prioritySplitAndEstimate(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
                           0, 0.0, stopCrit, myPart, method, simNum, 
                           maxLeafNodes, maxCheck, HistsKept);
      end = clock();  
    timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    
    <span class="keywordflow">if</span> (successfulPQSplit) {
      <span class="comment">// get the final histograms</span>
      vector&lt;AdaptiveHistogramValidation&gt;::iterator it;
      <span class="keywordflow">for</span> (it = HistsKept.begin(); it &lt; HistsKept.end(); it++) {
        <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
        <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> leavesIt;
        ((*it).getSubPaving())-&gt;getLeaves(leaves);

        <span class="comment">//get the IAE</span>
        IAEV.push_back((*it).getUnifIAE(myPart));

        <span class="comment">//get the number of leaves</span>
        NumLeafNodesV.push_back(leaves.size());
        <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
        <span class="comment">//cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>

        <span class="comment">//initialize the coverage</span>
        <span class="keywordtype">size_t</span> yesCovOne = 0;
        
        <span class="comment">//initialize the total variation distance</span>
        <span class="keywordtype">double</span> totalVarDist = 0.0;

        <span class="comment">//iterate through the leaf nodes</span>
        <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
          <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
               <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/(n-holdOutCount);
               <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
               <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
          totalVarDist += diffMu;
          <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
          <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
          <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
          
          <span class="comment">//get the 95% coverage</span>
          <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
          <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);

          <span class="comment">// get lower and upper bounds</span>
          <span class="keywordtype">double</span> Lb = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
          <span class="keywordtype">double</span> Ub = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>

          <span class="comment">//get the true density of the uniform mixture</span>
          <span class="keywordtype">double</span> f = 0;
          <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
            <span class="keywordflow">if</span> ( (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if this box is in trueBox</span>
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*leavesIt)-&gt;getBox() || (*leavesIt)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox()) {
              f = weight/((*trueIt)-&gt;nodeVolume());
            } <span class="comment">//end of if trueBox is in this box</span>
          } <span class="comment">// end of going through all trueBoxes</span>
          
          <span class="comment">// see SAGE worksheet for this</span>
          <span class="keywordflow">if</span> ( f &gt;= Lb &amp;&amp; f &lt;= Ub) { yesCovOne += 1;}
        } <span class="comment">// end of iterating through the leaves</span>

        <span class="comment">//keep the total variation distance</span>
        TotalVarDistV.push_back(totalVarDist);

        <span class="comment">//keep the coverage</span>
        <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
        <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
        CoverageV.push_back(yesCovOne*1.0/(leaves.size()*1.0));
      } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
    } <span class="comment">// end of successfulPQSplit</span>
  } <span class="comment">// end of successfulInsertion</span>

  <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
    <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
    std::ostringstream stm;
    stm &lt;&lt; simNum;
    <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;UnifMDEPQOutput&quot;</span>;
    PQFileName += stm.str();
    PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
    oss.open(PQFileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageV.size(); i++) {
      oss &lt;&lt; IAEV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; NumLeafNodesV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; TotalVarDistV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      oss &lt;&lt; CoverageV[i] &lt;&lt; endl;
    }
    oss &lt;&lt; timing &lt;&lt; endl;
    oss &lt;&lt; flush;
    oss.close();
    cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
        &lt;&lt; PQFileName &lt;&lt; endl;
  }
<span class="comment">//====================end of MDE===================================//</span>

<span class="comment">//==============Regular histogram==================================//</span>
   
   <span class="keywordflow">if</span> ( d== 1 ) {
   cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
   
   vector&lt;real&gt; regHistIAE;
   vector&lt;int&gt; nBins;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
    cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
    <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
    <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, theData, pavingBox, bw);
    nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
    regHistIAE.push_back(<a class="code" href="errorfunc_8cpp.shtml#a63593212e4bbb8cbe660d8bf3209f4b4">getRegHistUnifIAE</a>(myRegHist, myPart, n, weight));
  }

  <span class="comment">//output IAE to .txt file------------------</span>
  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
  outputFileName = <span class="stringliteral">&quot;UnifIAERegHist&quot;</span>;
  outputFileName += stm.str();
  outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  os.open(outputFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> bw = 0; bw &lt; 3; bw++) {
    os &lt;&lt; regHistIAE[bw] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[bw] &lt;&lt; endl;
  }
  os &lt;&lt; flush;
  os.close();
  
  std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
  }
  
  <span class="keywordflow">return</span> 0;
} <span class="comment">// end of uniform mixture test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="UniformMixture_8cpp.shtml">UniformMixture.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
