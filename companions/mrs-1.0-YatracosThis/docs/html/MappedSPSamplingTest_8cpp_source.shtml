<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSamplingTest.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPSamplingTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPSamplingTest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPSamplingTest_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj2D.hpp</a>&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj10D.hpp</a>&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj1D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj1D.hpp</a>&quot;</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj2D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj2D.hpp</a>&quot;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj9D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj9D.hpp</a>&quot;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj10D.hpp</a>&quot;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &quot;<a class="code" href="GaussianFobj100D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">GaussianFobj100D.hpp</a>&quot;</span>
<a name="l00012"></a>00012 <span class="comment">//#include &quot;GaussianFobj1000D.hpp&quot;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnode_8hpp.shtml" title="MappedSPnode definitions.">mappedspnode.hpp</a>&quot;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &quot;<a class="code" href="mappedspnodevisitor__expand_8hpp.shtml" title="declarations for MappedSPnodeVisitorExpander">mappedspnodevisitor_expand.hpp</a>&quot;</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// tools to help </span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span> <span class="comment">// to use gsl_ran_discrete_preproc</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;valarray&gt;</span> 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span> <span class="comment">//draw unif box</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="auto__tools_8hpp.shtml" title="Tools for automcmc.">auto_tools.hpp</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00040"></a>00040 <span class="comment">//#define MYDEBUG_CALCS // extra console output for calculations</span>
<a name="l00041"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">00041</a> <span class="preprocessor">#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span>
<a name="l00043"></a>00043 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#endif</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="keyword">using namespace </span>cxsc;
<a name="l00050"></a>00050 <span class="keyword">using namespace </span>subpavings;
<a name="l00051"></a>00051 <span class="keyword">using namespace </span>std;
<a name="l00052"></a>00052 
<a name="l00055"></a>00055 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00056"></a>00056 <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058   <span class="keyword">public</span>:
<a name="l00059"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00059</a>     <span class="keywordtype">bool</span> operator() (<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00060"></a>00060       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00061"></a>00061       <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063 };
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">//==========Functions for MappedSPnode===================================//</span>
<a name="l00066"></a>00066 <span class="comment">//to output MappedSPnode to .txt file</span>
<a name="l00067"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">00067</a> <span class="keywordtype">void</span> <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(<span class="keywordtype">string</span>&amp; filename,  <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; node)
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069    <span class="comment">// To generate a file output</span>
<a name="l00070"></a>00070    ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l00071"></a>00071    <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00072"></a>00072       node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l00073"></a>00073       std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
<a name="l00074"></a>00074                &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00075"></a>00075          os.close();
<a name="l00076"></a>00076       }
<a name="l00077"></a>00077    <span class="keywordflow">else</span> {
<a name="l00078"></a>00078       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00079"></a>00079          &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00080"></a>00080    }
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="comment">//function to iterate through the leaves and get weights and boxes</span>
<a name="l00084"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">00084</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;double&gt;&amp; WeightsVector,
<a name="l00085"></a>00085               vector&lt;interval&gt;&amp; WeightsInt)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00088"></a>00088      <span class="comment">//get the weights</span>
<a name="l00089"></a>00089      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00090"></a>00090      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00091"></a>00091      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, WeightsInt, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00092"></a>00092   }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094   <span class="comment">//recurse on the children</span>
<a name="l00095"></a>00095   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00096"></a>00096     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector, WeightsInt);
<a name="l00097"></a>00097   }
<a name="l00098"></a>00098    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00099"></a>00099     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector, WeightsInt);
<a name="l00100"></a>00100    }
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="comment">//function to iterate through the leaves and get heights and boxes</span>
<a name="l00104"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">00104</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, vector&lt;ivector&gt;&amp; BoxVector,
<a name="l00105"></a>00105            vector&lt;real&gt;&amp; HeightsVector)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
<a name="l00108"></a>00108      <span class="comment">//push back this box into the BoxVector</span>
<a name="l00109"></a>00109      BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00110"></a>00110      
<a name="l00111"></a>00111      <span class="comment">//get the heights</span>
<a name="l00112"></a>00112      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00113"></a>00113      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00114"></a>00114      myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116   <span class="comment">//recurse on the children</span>
<a name="l00117"></a>00117   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00118"></a>00118     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
<a name="l00119"></a>00119   }
<a name="l00120"></a>00120    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00121"></a>00121     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
<a name="l00122"></a>00122    }
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment">// normalize the heights</span>
<a name="l00126"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">00126</a> <span class="keywordtype">void</span> <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* thisNodePtr, <span class="keywordtype">double</span> totalArea, 
<a name="l00127"></a>00127           vector&lt; <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> &gt;&amp; heightNorm)
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129   <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
<a name="l00130"></a>00130      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
<a name="l00131"></a>00131      myContainer = thisNodePtr-&gt;getRangeCollection();
<a name="l00132"></a>00132      real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
<a name="l00133"></a>00133      
<a name="l00134"></a>00134      <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
<a name="l00135"></a>00135     heightNorm.push_back(height);
<a name="l00136"></a>00136   }
<a name="l00137"></a>00137   <span class="comment">//recurse on the children</span>
<a name="l00138"></a>00138   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
<a name="l00139"></a>00139     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
<a name="l00140"></a>00140   }
<a name="l00141"></a>00141    <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
<a name="l00142"></a>00142     <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
<a name="l00143"></a>00143    }
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 <span class="comment">//=======================end of functions====================================//</span>
<a name="l00146"></a>00146 
<a name="l00147"></a><a class="code" href="MappedSPSamplingTest_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00147</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149   <span class="comment">//========user-defined parameters====================//</span>
<a name="l00150"></a>00150   <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number of datapoints to generate for each histogram</span>
<a name="l00151"></a>00151   <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
<a name="l00152"></a>00152   <span class="keywordtype">size_t</span> numHist = atoi(argv[3]); <span class="comment">// number of repetitions for simulation purposes</span>
<a name="l00153"></a>00153   
<a name="l00154"></a>00154   <span class="comment">//  for generating samples from MappedSPnode </span>
<a name="l00155"></a>00155   <span class="comment">// ensure max leaves is &lt; 1E6 or something reasonable</span>
<a name="l00156"></a>00156   <span class="keywordtype">size_t</span> maxLeaves = atoi(argv[4]);
<a name="l00157"></a>00157   
<a name="l00158"></a>00158   <span class="comment">// for the MCMC run</span>
<a name="l00159"></a>00159   <span class="keywordtype">int</span> maxLoops = atoi(argv[5]); <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00160"></a>00160   <span class="keywordtype">int</span> samplesNeeded = atoi(argv[6]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00161"></a>00161   <span class="keywordtype">int</span> thinout = atoi(argv[7]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00162"></a>00162   
<a name="l00163"></a>00163   real tolerance = atof(argv[8]);
<a name="l00164"></a>00164   cxsc::real tol(tolerance); <span class="comment">//tolerance for automated burn in criteria</span>
<a name="l00165"></a>00165   
<a name="l00166"></a>00166   <span class="keywordtype">size_t</span> minPoints = atoi(argv[9]); 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="keywordtype">int</span> dataSeed = atoi(argv[10]);
<a name="l00169"></a>00169   
<a name="l00170"></a>00170   <span class="keywordtype">double</span> maxLeaf = atof(argv[11]);
<a name="l00171"></a>00171   
<a name="l00172"></a>00172   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00173"></a>00173   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00174"></a>00174     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00175"></a>00175   }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00178"></a>00178   <span class="keywordtype">int</span> prec = 15;
<a name="l00179"></a>00179   cout &lt;&lt; cxsc::SaveOpt;
<a name="l00180"></a>00180   cout &lt;&lt; cxsc::Variable;
<a name="l00181"></a>00181   cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">//string formatting</span>
<a name="l00184"></a>00184   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00185"></a>00185    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00186"></a>00186    oss.precision(10);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   <span class="comment">//=========set up to estimate the function==============================// </span>
<a name="l00189"></a>00189   <span class="comment">// Function object</span>
<a name="l00190"></a>00190 <span class="comment">//  GaussianFobj1D realF;</span>
<a name="l00191"></a>00191 <span class="comment">//  GaussianFobj2D realF;</span>
<a name="l00192"></a>00192    <a class="code" href="classGaussianFobj9D.shtml">GaussianFobj9D</a> realF;
<a name="l00193"></a>00193 <span class="comment">//   GaussianFobj10D realF;</span>
<a name="l00194"></a>00194   <span class="comment">//RosenFobj2D realF;</span>
<a name="l00195"></a>00195   <span class="comment">//RosenFobj10D realF;</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <span class="comment">//make a root box</span>
<a name="l00198"></a>00198   ivector pavingBox(d);
<a name="l00199"></a>00199 <span class="comment">//  interval pavingInterval(-3,3);</span>
<a name="l00200"></a>00200 <span class="comment">//  interval pavingInterval(-10,10);</span>
<a name="l00201"></a>00201   interval pavingInterval(-6.5,7.5);
<a name="l00202"></a>00202   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;
<a name="l00203"></a>00203   
<a name="l00204"></a>00204    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00205"></a>00205     <span class="comment">// estimate the function</span>
<a name="l00206"></a>00206    <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, 0);
<a name="l00207"></a>00207    
<a name="l00208"></a>00208    vector&lt;real&gt; epsVec;
<a name="l00209"></a>00209    
<a name="l00210"></a>00210    <span class="comment">//RealMappedSPnode nodeEst1(pavingBox);</span>
<a name="l00211"></a>00211    <span class="comment">//nodeEst1.accept(expander);</span>
<a name="l00212"></a>00212    
<a name="l00213"></a>00213    nodeEst.priorityAccept(expander, maxLeaves, epsVec);
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   <span class="keywordtype">string</span> avgL1FileName = <span class="stringliteral">&quot;Eps&quot;</span>;
<a name="l00216"></a>00216   avgL1FileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00217"></a>00217   oss.open(avgL1FileName.c_str());
<a name="l00218"></a>00218     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; epsVec.size(); i++) { 
<a name="l00219"></a>00219       <span class="comment">//cout &lt;&lt; epsVec[i] &lt;&lt; endl;</span>
<a name="l00220"></a>00220       oss &lt;&lt; epsVec[i] &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00221"></a>00221     }
<a name="l00222"></a>00222     oss &lt;&lt; flush;
<a name="l00223"></a>00223     oss.close();
<a name="l00224"></a>00224 
<a name="l00225"></a>00225    cout &lt;&lt; <span class="stringliteral">&quot;Estimate function has &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00226"></a>00226    
<a name="l00227"></a>00227    <span class="comment">//RealMappedSPnode nodeEst1;</span>
<a name="l00228"></a>00228    <span class="comment">//nodeEst1 = nodeEst;</span>
<a name="l00229"></a>00229    
<a name="l00230"></a>00230    <span class="comment">//RealMappedSPnode diff = nodeEst1 - nodeEst;</span>
<a name="l00231"></a>00231    
<a name="l00232"></a>00232    <span class="comment">//output to .txt  </span>
<a name="l00233"></a>00233   <span class="comment">//tring thefilename = &quot;Est.txt&quot;;</span>
<a name="l00234"></a>00234   <span class="comment">//utput(thefilename, nodeEst);</span>
<a name="l00235"></a>00235 
<a name="l00236"></a>00236   <span class="comment">//=======================================================================//</span>
<a name="l00237"></a>00237   
<a name="l00238"></a>00238   <span class="comment">//==================Get the weights of the boxes=========================//</span>
<a name="l00239"></a>00239    cout &lt;&lt; <span class="stringliteral">&quot;Getting boxes and weights:&quot;</span> &lt;&lt; endl;
<a name="l00240"></a>00240     vector&lt;ivector&gt; BoxVector;
<a name="l00241"></a>00241    vector&lt;real&gt; HeightsVector;
<a name="l00242"></a>00242    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodePtr;
<a name="l00243"></a>00243    nodePtr = &amp;nodeEst;
<a name="l00244"></a>00244    vector&lt;double&gt;* WeightsVectorPtr;
<a name="l00245"></a>00245    WeightsVectorPtr = <span class="keyword">new</span> vector&lt;double&gt;;
<a name="l00246"></a>00246    vector&lt;interval&gt;* WeightsIntPtr;
<a name="l00247"></a>00247    WeightsIntPtr = <span class="keyword">new</span> vector&lt;interval&gt;;
<a name="l00248"></a>00248    
<a name="l00249"></a>00249    <span class="comment">// iterate through the leaf nodes to get boxes and heights and weights</span>
<a name="l00250"></a>00250    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(nodePtr, BoxVector, HeightsVector);
<a name="l00251"></a>00251    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(nodePtr, *WeightsVectorPtr, *WeightsIntPtr);
<a name="l00252"></a>00252    
<a name="l00253"></a>00253    <span class="comment">//now put elements of WeightsVector into an array of doubles</span>
<a name="l00254"></a>00254    <span class="keywordtype">size_t</span> sizeWeight =(*WeightsVectorPtr).size();
<a name="l00255"></a>00255    <span class="comment">//check that number of boxes &lt; 10^6</span>
<a name="l00256"></a>00256    <span class="keywordflow">if</span> (sizeWeight &gt; <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10,7)) { 
<a name="l00257"></a>00257       cerr &lt;&lt; <span class="stringliteral">&quot;Too many boxes (&quot;</span> &lt;&lt; sizeWeight &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; endl;
<a name="l00258"></a>00258       exit(1);
<a name="l00259"></a>00259    }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261   <span class="comment">// normalize using heights</span>
<a name="l00262"></a>00262   interval areaInt = interval(0);
<a name="l00263"></a>00263    <span class="comment">//normalize the heights so that the function integrates to 1</span>
<a name="l00264"></a>00264    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00265"></a>00265     areaInt = areaInt + (*WeightsIntPtr)[i];
<a name="l00266"></a>00266     
<a name="l00267"></a>00267     <span class="comment">//cout &lt;&lt; (*WeightsVectorPtr)[i] &lt;&lt; &quot;\t&quot; &lt;&lt; (*WeightsIntPtr)[i] &lt;&lt; endl;</span>
<a name="l00268"></a>00268    }
<a name="l00269"></a>00269   cout &lt;&lt; <span class="stringliteral">&quot;Total area: &quot;</span> &lt;&lt; mid(areaInt) &lt;&lt; endl; 
<a name="l00270"></a>00270    
<a name="l00271"></a>00271    <span class="keywordtype">double</span> totalArea = _double(mid(areaInt));
<a name="l00272"></a>00272    
<a name="l00273"></a>00273    <span class="comment">// very important - normalize the heights in nodeEst</span>
<a name="l00274"></a>00274    vector&lt; RangeCollectionClass&lt;real&gt; &gt;* heightNorm = <span class="keyword">new</span> vector&lt; RangeCollectionClass&lt;real&gt; &gt;;
<a name="l00275"></a>00275    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(nodePtr, totalArea, *heightNorm);
<a name="l00276"></a>00276    nodeEst.<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(*heightNorm, 0);
<a name="l00277"></a>00277    <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunctionAfterNormalized.txt&quot;</span>;
<a name="l00278"></a>00278    <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeEst);
<a name="l00279"></a>00279    
<a name="l00280"></a>00280    <span class="comment">//need to check that the weights equal to 1</span>
<a name="l00281"></a>00281    <span class="keywordtype">double</span> densityCheck = 0.0;
<a name="l00282"></a>00282     <span class="comment">//convert vector to array</span>
<a name="l00283"></a>00283    <span class="keywordtype">double</span> WeightsArray[sizeWeight];
<a name="l00284"></a>00284    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
<a name="l00285"></a>00285       WeightsArray[i] = (*WeightsVectorPtr)[i];
<a name="l00286"></a>00286       densityCheck += (*WeightsVectorPtr)[i]/totalArea;
<a name="l00287"></a>00287    }
<a name="l00288"></a>00288    
<a name="l00289"></a>00289   cout &lt;&lt; <span class="stringliteral">&quot;Total area after normalizing: &quot;</span> &lt;&lt; densityCheck &lt;&lt; endl;
<a name="l00290"></a>00290   <span class="comment">/*</span>
<a name="l00291"></a>00291 <span class="comment">  if ( (densityCheck != 1.0) ) {</span>
<a name="l00292"></a>00292 <span class="comment">    cout &lt;&lt; densityCheck &lt;&lt; endl; </span>
<a name="l00293"></a>00293 <span class="comment">    cerr &lt;&lt; &quot;Function does not integrate to 1. Need to normalize.&quot; &lt;&lt; endl; </span>
<a name="l00294"></a>00294 <span class="comment">    exit(0); </span>
<a name="l00295"></a>00295 <span class="comment">  }</span>
<a name="l00296"></a>00296 <span class="comment">  */</span>
<a name="l00297"></a>00297   
<a name="l00298"></a>00298    <span class="comment">//return to the system the memory that was pointed to by WeightsVectorPtr</span>
<a name="l00299"></a>00299    <span class="comment">// and heightNorm</span>
<a name="l00300"></a>00300    <span class="keyword">delete</span> WeightsVectorPtr;
<a name="l00301"></a>00301    <span class="keyword">delete</span> heightNorm;
<a name="l00302"></a>00302    
<a name="l00303"></a>00303     <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
<a name="l00304"></a>00304    <span class="comment">//i.e. the box indices with their weights</span>
<a name="l00305"></a>00305    gsl_ran_discrete_t* gslpdfstruct;
<a name="l00306"></a>00306    gslpdfstruct = gsl_ran_discrete_preproc(sizeWeight, WeightsArray);
<a name="l00307"></a>00307    <span class="comment">//===================end of getting box weights=======================//</span>
<a name="l00308"></a>00308 
<a name="l00309"></a>00309   <span class="comment">//===========preliminaries before simulations========================//</span>
<a name="l00310"></a>00310   <span class="comment">// set up a random number generator to draw from weighted boxes</span>
<a name="l00311"></a>00311   <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00312"></a>00312   gsl_rng * r;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00315"></a>00315   gsl_rng_env_setup();
<a name="l00316"></a>00316   T = gsl_rng_default;
<a name="l00317"></a>00317   r = gsl_rng_alloc (T);
<a name="l00318"></a>00318   <span class="comment">// set a seed for the data</span>
<a name="l00319"></a>00319   
<a name="l00320"></a>00320   <span class="comment">//===========end of setting up preliminaries=======================//</span>
<a name="l00321"></a>00321 
<a name="l00322"></a>00322   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 1; k &lt;= numHist; k++) {
<a name="l00323"></a>00323     cout &lt;&lt; <span class="stringliteral">&quot;Data set &quot;</span> &lt;&lt; k &lt;&lt; endl; 
<a name="l00324"></a>00324     dataSeed = k; 
<a name="l00325"></a>00325   
<a name="l00326"></a>00326     gsl_rng_set(r, dataSeed);
<a name="l00327"></a>00327 
<a name="l00328"></a>00328   <span class="comment">//-------------generate data--------------------------------------//</span>
<a name="l00329"></a>00329   <span class="comment">//now sample n data points from boxes given by the proposed indices</span>
<a name="l00330"></a>00330   cout &lt;&lt; <span class="stringliteral">&quot;Sample data points using weighted boxes:&quot;</span> &lt;&lt; endl;
<a name="l00331"></a>00331   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
<a name="l00332"></a>00332   <span class="comment">// make a simulated data set</span>
<a name="l00333"></a>00333   <span class="comment">// data sampled as weighted-uniform-mixtures</span>
<a name="l00334"></a>00334   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00335"></a>00335     rvector thisrv(d);
<a name="l00336"></a>00336     <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
<a name="l00337"></a>00337     <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
<a name="l00338"></a>00338     thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r, BoxVector[proposedIndex]);
<a name="l00339"></a>00339     <span class="comment">// put points generated into container</span>
<a name="l00340"></a>00340     theData.push_back(thisrv);
<a name="l00341"></a>00341   }  <span class="comment">// data  should be in theData</span>
<a name="l00342"></a>00342   
<a name="l00343"></a>00343   cout &lt;&lt; (theData).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00344"></a>00344   
<a name="l00345"></a>00345   <span class="keywordtype">string</span> dataFileName = <span class="stringliteral">&quot;MappedData&quot;</span>;
<a name="l00346"></a>00346   ostringstream stm;
<a name="l00347"></a>00347   stm &lt;&lt; dataSeed;
<a name="l00348"></a>00348   dataFileName += stm.str(); 
<a name="l00349"></a>00349   dataFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00350"></a>00350   
<a name="l00351"></a>00351   oss.open(dataFileName.c_str());
<a name="l00352"></a>00352   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) { 
<a name="l00353"></a>00353     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00354"></a>00354       <span class="comment">//cout &lt;&lt; (theData)[i][j] &lt;&lt; &quot;\t&quot;; </span>
<a name="l00355"></a>00355       oss &lt;&lt; (theData)[i][j] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00356"></a>00356     }
<a name="l00357"></a>00357     oss &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00358"></a>00358     <span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l00359"></a>00359   }
<a name="l00360"></a>00360   oss &lt;&lt; flush;
<a name="l00361"></a>00361   oss.close();
<a name="l00362"></a>00362   
<a name="l00363"></a>00363   cout &lt;&lt; <span class="stringliteral">&quot;Mapped data written to  &quot;</span> &lt;&lt; dataFileName &lt;&lt; endl;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365   <span class="comment">//=================generate Gaussian data========================</span>
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   cout &lt;&lt; <span class="stringliteral">&quot;Generating Gaussian data: &quot;</span> &lt;&lt; endl;
<a name="l00368"></a>00368   
<a name="l00369"></a>00369   <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00370"></a>00370   gsl_rng * r1;
<a name="l00371"></a>00371   gsl_rng_env_setup();
<a name="l00372"></a>00372   T1 = gsl_rng_default;
<a name="l00373"></a>00373   r1 = gsl_rng_alloc (T1);
<a name="l00374"></a>00374   gsl_rng_set(r1, dataSeed);
<a name="l00375"></a>00375 
<a name="l00376"></a>00376   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> actualData;
<a name="l00377"></a>00377   
<a name="l00378"></a>00378   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00379"></a>00379     rvector thisrv(d);
<a name="l00380"></a>00380     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00381"></a>00381       <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, 1.0); <span class="comment">// generate a normal r.v.</span>
<a name="l00382"></a>00382       thisrv[j] = _real(z);
<a name="l00383"></a>00383     }
<a name="l00384"></a>00384     <span class="comment">//cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00385"></a>00385     actualData.push_back(thisrv);
<a name="l00386"></a>00386   }
<a name="l00387"></a>00387 
<a name="l00388"></a>00388   cout &lt;&lt; (actualData).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00389"></a>00389   
<a name="l00390"></a>00390   dataFileName = <span class="stringliteral">&quot;ActualData&quot;</span>;
<a name="l00391"></a>00391   dataFileName += stm.str(); 
<a name="l00392"></a>00392   dataFileName += <span class="stringliteral">&quot;.txt&quot;</span>; 
<a name="l00393"></a>00393   oss.open(dataFileName.c_str());
<a name="l00394"></a>00394   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) { 
<a name="l00395"></a>00395     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
<a name="l00396"></a>00396         <span class="comment">//cout &lt;&lt; (actualData)[i][j] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00397"></a>00397         oss &lt;&lt; (actualData)[i][j] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00398"></a>00398     }
<a name="l00399"></a>00399     oss &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00400"></a>00400     <span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span>
<a name="l00401"></a>00401   }
<a name="l00402"></a>00402   oss &lt;&lt; flush;
<a name="l00403"></a>00403   oss.close();
<a name="l00404"></a>00404 
<a name="l00405"></a>00405   cout &lt;&lt; <span class="stringliteral">&quot;Actual data written to  &quot;</span> &lt;&lt; dataFileName &lt;&lt; endl;
<a name="l00406"></a>00406   
<a name="l00407"></a>00407   }
<a name="l00408"></a>00408   
<a name="l00409"></a>00409   gsl_rng_free(r);
<a name="l00410"></a>00410   <span class="comment">//gsl_rng_free(r1);</span>
<a name="l00411"></a>00411   gsl_ran_discrete_free (gslpdfstruct);
<a name="l00412"></a>00412   
<a name="l00413"></a>00413   <span class="keywordflow">return</span>(0);
<a name="l00414"></a>00414   
<a name="l00415"></a>00415 } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPSamplingTest_8cpp.shtml">MappedSPSamplingTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:14 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
