<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: RosenFobj10D.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('RosenFobj10D_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">RosenFobj10D.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="RosenFobj10D_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00008"></a>00008 <span class="preprocessor">#include &quot;<a class="code" href="RosenFobj10D_8hpp.shtml" title="Declarations for MappedSPnode 1-d example function object class.">RosenFobj10D.hpp</a>&quot;</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;cmath&gt;</span> <span class="comment">//to use M_PI</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00011"></a>00011 <span class="comment">//#include &quot;cxsc.hpp&quot;</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="keyword">using namespace </span>cxsc;
<a name="l00014"></a>00014 <span class="keyword">using namespace </span>std;
<a name="l00015"></a>00015 <span class="keyword">using namespace </span>subpavings;
<a name="l00016"></a>00016 
<a name="l00017"></a><a class="code" href="classRosenFobj10D.shtml#a011fef984ec3e8fb5341aac61f820a58">00017</a> interval <a class="code" href="classRosenFobj10D.shtml#a011fef984ec3e8fb5341aac61f820a58" title="declare function for interval image of a box">RosenFobj10D::operator()</a>(
<a name="l00018"></a>00018 <span class="keyword">const</span> cxsc::interval&amp; ival1,
<a name="l00019"></a>00019 <span class="keyword">const</span> cxsc::interval&amp; ival2,
<a name="l00020"></a>00020 <span class="keyword">const</span> cxsc::interval&amp; ival3,
<a name="l00021"></a>00021 <span class="keyword">const</span> cxsc::interval&amp; ival4,
<a name="l00022"></a>00022 <span class="keyword">const</span> cxsc::interval&amp; ival5,
<a name="l00023"></a>00023 <span class="keyword">const</span> cxsc::interval&amp; ival6,
<a name="l00024"></a>00024 <span class="keyword">const</span> cxsc::interval&amp; ival7,
<a name="l00025"></a>00025 <span class="keyword">const</span> cxsc::interval&amp; ival8,
<a name="l00026"></a>00026 <span class="keyword">const</span> cxsc::interval&amp; ival9,
<a name="l00027"></a>00027 <span class="keyword">const</span> cxsc::interval&amp; ival10
<a name="l00028"></a>00028 )<span class="keyword"> const</span>
<a name="l00029"></a>00029 <span class="keyword"></span>{
<a name="l00030"></a>00030 
<a name="l00031"></a>00031   real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00032"></a>00032   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00033"></a>00033   
<a name="l00034"></a>00034   ivector RR(10);
<a name="l00035"></a>00035   RR[1] = ival1;
<a name="l00036"></a>00036   RR[2] = ival2;
<a name="l00037"></a>00037   RR[3] = ival3;
<a name="l00038"></a>00038   RR[4] = ival4;
<a name="l00039"></a>00039   RR[5] = ival5;
<a name="l00040"></a>00040   RR[6] = ival6;
<a name="l00041"></a>00041   RR[7] = ival7;
<a name="l00042"></a>00042   RR[8] = ival8;
<a name="l00043"></a>00043   RR[9] = ival9;
<a name="l00044"></a>00044   RR[10] = ival10;
<a name="l00045"></a>00045   
<a name="l00046"></a>00046   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(RR), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(RR);
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   <span class="comment">//cout &lt;&lt; &quot;============\n&quot; &lt;&lt; RR &lt;&lt; endl;</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051   interval result(0.0);
<a name="l00052"></a>00052   
<a name="l00053"></a>00053     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = a + 1; i &lt;= z; i++)
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055       result = result + (Height * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i - 1])) +
<a name="l00056"></a>00056         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i - 1] - 1.0));
<a name="l00057"></a>00057     }
<a name="l00058"></a>00058  
<a name="l00059"></a>00059   <span class="comment">//cout &lt;&lt; result &lt;&lt; endl;</span>
<a name="l00060"></a>00060   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(Tinverse * result));
<a name="l00061"></a>00061   <span class="comment">//cout &lt;&lt; &quot;Result: &quot; &lt;&lt; result &lt;&lt; endl  &lt;&lt; endl;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="keywordflow">return</span> result;
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="classRosenFobj10D.shtml#a29e49e4b03d8ce5a1f4729457e4df6c7">00066</a> real <a class="code" href="classRosenFobj10D.shtml#a011fef984ec3e8fb5341aac61f820a58" title="declare function for interval image of a box">RosenFobj10D::operator()</a>(
<a name="l00067"></a>00067 <span class="keyword">const</span> cxsc::real&amp; r1,
<a name="l00068"></a>00068 <span class="keyword">const</span> cxsc::real&amp; r2,
<a name="l00069"></a>00069 <span class="keyword">const</span> cxsc::real&amp; r3,
<a name="l00070"></a>00070 <span class="keyword">const</span> cxsc::real&amp; r4,
<a name="l00071"></a>00071 <span class="keyword">const</span> cxsc::real&amp; r5,
<a name="l00072"></a>00072 <span class="keyword">const</span> cxsc::real&amp; r6,
<a name="l00073"></a>00073 <span class="keyword">const</span> cxsc::real&amp; r7,
<a name="l00074"></a>00074 <span class="keyword">const</span> cxsc::real&amp; r8,
<a name="l00075"></a>00075 <span class="keyword">const</span> cxsc::real&amp; r9,
<a name="l00076"></a>00076 <span class="keyword">const</span> cxsc::real&amp; r10)<span class="keyword"> const</span>
<a name="l00077"></a>00077 <span class="keyword"></span>{   
<a name="l00078"></a>00078    real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00079"></a>00079   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081   real result = 0.0;
<a name="l00082"></a>00082   
<a name="l00083"></a>00083   <span class="comment">//mrs</span>
<a name="l00084"></a>00084   rvector RR(10);
<a name="l00085"></a>00085   RR[1] = r1;
<a name="l00086"></a>00086   RR[2] = r2;
<a name="l00087"></a>00087   RR[3] = r3;
<a name="l00088"></a>00088   RR[4] = r4;
<a name="l00089"></a>00089   RR[5] = r5;
<a name="l00090"></a>00090   RR[6] = r6;
<a name="l00091"></a>00091   RR[7] = r7;
<a name="l00092"></a>00092   RR[8] = r8;
<a name="l00093"></a>00093   RR[9] = r9;
<a name="l00094"></a>00094   RR[10] = r10;
<a name="l00095"></a>00095   
<a name="l00096"></a>00096   cout &lt;&lt; RR &lt;&lt; endl;
<a name="l00097"></a>00097   
<a name="l00098"></a>00098   <span class="keywordtype">int</span> a = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(RR), z = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(RR);
<a name="l00099"></a>00099   
<a name="l00100"></a>00100     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = a + 1; i &lt;= z; i++)
<a name="l00101"></a>00101     {
<a name="l00102"></a>00102       result = result + (Height * <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i] - <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i - 1])) +
<a name="l00103"></a>00103         <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a> (RR[i - 1] - 1.0));
<a name="l00104"></a>00104     }
<a name="l00105"></a>00105  
<a name="l00106"></a>00106   cout &lt;&lt; result &lt;&lt; endl;
<a name="l00107"></a>00107   result = <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a> (-(Tinverse * result));
<a name="l00108"></a>00108   cout &lt;&lt; <span class="stringliteral">&quot;Result: &quot;</span> &lt;&lt; result &lt;&lt; endl &lt;&lt; endl;
<a name="l00109"></a>00109   cout &lt;&lt; <span class="stringliteral">&quot;=============&quot;</span> &lt;&lt; endl;
<a name="l00110"></a>00110   
<a name="l00111"></a>00111   <span class="keywordflow">return</span> result;
<a name="l00112"></a>00112 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="RosenFobj10D_8cpp.shtml">RosenFobj10D.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
