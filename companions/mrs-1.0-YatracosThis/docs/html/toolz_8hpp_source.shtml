<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: toolz.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('toolz_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">toolz.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="toolz_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __TOOLZ_HPP__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __TOOLZ_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;interval.hpp&quot;</span> <span class="comment">// Include interval arithmetic package</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>    <span class="comment">// Include interval standard functions</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>    <span class="comment">// Include real standard functions</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;ivector.hpp&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;gsl/gsl_statistics.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;functional&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">using namespace </span>std;
<a name="l00045"></a>00045 <span class="keyword">using namespace </span>cxsc;
<a name="l00046"></a>00046 
<a name="l00048"></a>00048 <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a> (<span class="keyword">const</span> <span class="keywordtype">size_t</span> ssize, <span class="keyword">const</span> <span class="keywordtype">double</span> *x);
<a name="l00049"></a>00049 
<a name="l00051"></a>00051 <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a> (<span class="keyword">const</span> <span class="keywordtype">size_t</span> ssize, <span class="keywordtype">double</span> *x);
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">// !Compute the sample mean and variance.</span>
<a name="l00054"></a>00054 <span class="keywordtype">long</span> <a class="code" href="toolz_8cpp.shtml#a9efdc4ede6e6e3539c2ddca8b71e79a8">mean_var</a> (<span class="keyword">const</span> vector &lt; real &gt; &amp;x, real &amp; <a class="code" href="toolz_8cpp.shtml#a24b3d8486c8dca4d0f62658bb4da8528" title="Compute the sample mean of a double array using a recurrence.">mean</a>, real &amp; <a class="code" href="toolz_8cpp.shtml#a03a292f5dfc6f19a070570e44eeb8552" title="Compute the Variance.">var</a>);
<a name="l00055"></a>00055 
<a name="l00057"></a>00057 <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#afbd188266fc6cb199c4d23bd27d2a8c3" title="Compute MSE using gsl_stats_variance_with_fixed_mean.">MSE</a> (<span class="keywordtype">double</span> exact, <span class="keywordtype">int</span> ssize, <span class="keywordtype">double</span> *x);
<a name="l00058"></a>00058 
<a name="l00060"></a>00060 real <a class="code" href="toolz_8cpp.shtml#aed5587466d9191177de49b5f1e0301ad" title="Find Minimum of two real types.">Min</a>(real x, real y);
<a name="l00061"></a>00061 
<a name="l00063"></a>00063 real <a class="code" href="toolz_8cpp.shtml#a4fb345087779da0877e22420a2ff922d" title="Draw a real uniformly at random from the interval X in R.">DrawUnifInterval</a>(gsl_rng* rgsl, <span class="keyword">const</span> interval&amp; X);
<a name="l00064"></a>00064 
<a name="l00066"></a>00066 rvector <a class="code" href="toolz_8cpp.shtml#a7f15a72d3cac8f3a6b8b333864b2c79e" title="Draw a vector uniformly at pseudo-random from unit box [0,1)^n_dimensions.">DrawUnifUnitBox</a> (gsl_rng* rgsl, <span class="keyword">const</span> <span class="keywordtype">int</span> n_dimensions);
<a name="l00067"></a>00067 
<a name="l00069"></a>00069 rvector <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(gsl_rng* rgsl, <span class="keyword">const</span> ivector&amp; X);
<a name="l00070"></a>00070 
<a name="l00072"></a>00072 rvector <a class="code" href="toolz_8cpp.shtml#adfd4a448ba53eebbc7284fc6414798c6" title="Draw a vector uniformly at quasi-random from a Box.">DrawQZUnifBox</a>(gsl_qrng* qrgsl, <span class="keyword">const</span> ivector&amp; X);
<a name="l00073"></a>00073 
<a name="l00075"></a>00075 rvector <a class="code" href="toolz_8cpp.shtml#a6aa3917d7eb0f56bea69ce1924ad4445" title="Draw a vector uniformly at quasi-random from a Box: trans-dimensional case.">DrawQZUnifBoxV</a>(<span class="keywordtype">double</span>* v, <span class="keyword">const</span> ivector&amp; X);
<a name="l00076"></a>00076 
<a name="l00078"></a>00078 <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#af7098b26cfe9466d751176b29c67342c" title="Return the first dimension with maximal diameter.">MaxDiamComp</a>(ivector&amp; iv);
<a name="l00079"></a>00079 
<a name="l00081"></a>00081 ivector <a class="code" href="toolz_8cpp.shtml#a418bc35de36effbb3522fc58fa035b60" title="Blow up a box by eps pivoted at FromZero and return it.">BlowUpFromZero</a>(ivector iv, real FromZero, real eps);
<a name="l00082"></a>00082 
<a name="l00084"></a>00084 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00085"></a><a class="code" href="structkahan__sum.shtml">00085</a> <span class="keyword">struct </span><a class="code" href="structkahan__sum.shtml" title="Stable Summation Routine of Kahan&#39;s.">kahan_sum</a>
<a name="l00086"></a>00086 {
<a name="l00087"></a><a class="code" href="structkahan__sum.shtml#a68f0ab79ede9b3e1e6d08279ef5b0086">00087</a>   T s,c,<a class="code" href="structkahan__sum.shtml#a68f0ab79ede9b3e1e6d08279ef5b0086">y</a>,t;
<a name="l00088"></a><a class="code" href="structkahan__sum.shtml#a52d524cbd59987d8ed5ca2911119dcfe">00088</a>   <a class="code" href="structkahan__sum.shtml#a52d524cbd59987d8ed5ca2911119dcfe">kahan_sum</a>() : s(0.),c(0.),y(0.),t(0.){}
<a name="l00089"></a><a class="code" href="structkahan__sum.shtml#a65ae305aabfbc3764c2732c8242b788d">00089</a>   T &amp; operator()(  T &amp; v,<span class="keyword">const</span> T &amp; i )
<a name="l00090"></a>00090   {
<a name="l00091"></a>00091     <span class="comment">/* c is zero or close to it*/</span>
<a name="l00092"></a>00092     y=i-c;
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="comment">/* If s is big and y small, then low-order digits of y are lost during</span>
<a name="l00095"></a>00095 <span class="comment">    the summation into t*/</span>
<a name="l00096"></a>00096     t=s+y;
<a name="l00097"></a>00097 
<a name="l00098"></a>00098     <span class="comment">/* (t - s) recovers the high-order part of y; subtracting y</span>
<a name="l00099"></a>00099 <span class="comment">      recovers -(low part of y)*/</span>
<a name="l00100"></a>00100     c=(t-s)-y;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="comment">/* Algebriacally, c should always be zero. Beware eagerly optimising</span>
<a name="l00103"></a>00103 <span class="comment">      compilers! */</span>
<a name="l00104"></a>00104     s=t;
<a name="l00105"></a>00105 
<a name="l00106"></a>00106     <span class="comment">/* Next time around, the lost low part will be added to y in a fresh</span>
<a name="l00107"></a>00107 <span class="comment">      attempt. */</span>
<a name="l00108"></a>00108     <span class="keywordflow">return</span> s;
<a name="l00109"></a>00109   }
<a name="l00110"></a>00110 };
<a name="l00111"></a>00111 
<a name="l00113"></a>00113 <span class="comment">//double MaxDiam (ivector&amp; x, int&amp; c);</span>
<a name="l00114"></a>00114 <span class="keywordtype">double</span> <a class="code" href="toolz_8cpp.shtml#ac7e3723f9b82103197575fd3be3db667" title="Return the maximal diameter of box x.">MaxDiam</a> (ivector x, <span class="keywordtype">int</span>&amp; c);
<a name="l00115"></a>00115 
<a name="l00120"></a>00120 <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a> (interval &amp; r, <span class="keyword">const</span> interval &amp; a, <span class="keyword">const</span> interval &amp; b);
<a name="l00121"></a>00121 
<a name="l00126"></a>00126 <span class="keywordtype">int</span> <a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a> (ivector &amp; r, <span class="keyword">const</span> ivector &amp; a, <span class="keyword">const</span> ivector &amp; b);
<a name="l00127"></a>00127 
<a name="l00129"></a>00129 ivector <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a> (<span class="keyword">const</span> ivector &amp; x, <span class="keywordtype">int</span> split);
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 ivector <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a> (<span class="keyword">const</span> ivector &amp; x, <span class="keywordtype">int</span> split);
<a name="l00133"></a>00133 
<a name="l00135"></a>00135 <span class="keywordtype">void</span> <a class="code" href="toolz_8cpp.shtml#ae667f0f5dcaff56bf979f20da13e9c9f" title="Bisect box x normal to direction &quot;split&quot; and return the lower half.">Lower</a> (<span class="keyword">const</span> ivector &amp; x, ivector &amp; y, <span class="keywordtype">int</span> split);
<a name="l00136"></a>00136 
<a name="l00138"></a>00138 <span class="keywordtype">void</span> <a class="code" href="toolz_8cpp.shtml#acb5cc90c84a0b29fbbf2bed1f4ece8d3" title="Bisect box x normal to direction &quot;split&quot; and return the upper half.">Upper</a> (<span class="keyword">const</span> ivector &amp; x, ivector &amp; y, <span class="keywordtype">int</span> split);
<a name="l00139"></a>00139 
<a name="l00144"></a>00144 <span class="keywordtype">double</span> <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(<span class="keyword">const</span> ivector &amp;x);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 <span class="comment">//src_trunk_0701</span>
<a name="l00151"></a>00151 <span class="comment"></span>real <a class="code" href="toolz_8cpp.shtml#acdd3d20a2f2c8114e1195f5e6baa078f" title="Return the volume of box x as a real.">realVolume</a>(<span class="keyword">const</span> ivector &amp;x);
<a name="l00152"></a>00152 
<a name="l00163"></a>00163 <span class="keywordtype">double</span> <a class="code" href="histpenalty_8hpp.shtml#a1dc9bf6a99daaa6cf7349f16c1e558f5">lCk</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> k);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="comment">//--src_trunk_0701</span>
<a name="l00170"></a>00170 <span class="comment"></span>std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::rvector&amp; rv);
<a name="l00171"></a>00171 
<a name="l00176"></a>00176 std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::ivector&amp; iv);
<a name="l00177"></a>00177 
<a name="l00182"></a>00182 std::string <a class="code" href="namespacesubpavings.shtml#a1c85cfc0ad8721fc6b480d66d51a653d" title="String representation of an IntVec.">toString</a>(<span class="keyword">const</span> cxsc::interval&amp; ival);
<a name="l00183"></a>00183 
<a name="l00189"></a>00189 std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::rvector&amp; rv);
<a name="l00190"></a>00190 
<a name="l00196"></a>00196 std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::ivector&amp; iv);
<a name="l00197"></a>00197 
<a name="l00203"></a>00203 std::ostream&amp; <a class="code" href="toolz_8cpp.shtml#aa58a6fd70016ae5a2ca4a4424c1dc8a6" title="Output formatted with brackets etc, suitable for human reading of rvectors.">prettyPrint</a>(std::ostream&amp; out, <span class="keyword">const</span> cxsc::interval&amp; ival);
<a name="l00204"></a>00204 <span class="comment">//--src_trunk_0701</span>
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="toolz_8hpp.shtml">toolz.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
