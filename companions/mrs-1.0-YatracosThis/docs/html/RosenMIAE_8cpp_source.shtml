<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: RosenMIAE.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('RosenMIAE_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">RosenMIAE.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="RosenMIAE_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00025"></a>00025 <span class="comment">// to use std::vector</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="comment">// to use iterators</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00029"></a>00029 <span class="comment">// to use valarray</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include&lt;map&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>     <span class="comment">// to be able to use the Rosen function objects</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="FLevy2D_8hpp.shtml" title="Declarations for example function class FLevy2D (Levy function, 2 dimensions).">FLevy2D.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="FRosenbrock_8hpp.shtml" title="Declarations for example function class FRosenbrock (Rosenbrock function).">FRosenbrock.hpp</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>    <span class="comment">// to be able to do MRS rejection sampling</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;gsl/gsl_monte.h&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;gsl/gsl_monte_miser.h&gt;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>cxsc;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>std;
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="RosenMIAE_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00056</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058    <span class="comment">//=======================================================================//</span>
<a name="l00059"></a>00059   <span class="comment">//------set up parameters for data---------------------------------</span>
<a name="l00060"></a>00060    <span class="comment">// cannot use manual input as will affect Rosenbrock function</span>
<a name="l00061"></a>00061   cout &lt;&lt; <span class="stringliteral">&quot;Setting up parameters: &quot;</span> &lt;&lt; endl;
<a name="l00062"></a>00062   <span class="keywordtype">int</span> H = 100; <span class="comment">// number of simulations</span>
<a name="l00063"></a>00063    <span class="keywordtype">int</span> step = 200; <span class="comment">// step size</span>
<a name="l00064"></a>00064   <span class="keywordtype">size_t</span> n_samples = 100000; <span class="comment">// number of data to generate</span>
<a name="l00065"></a>00065   <span class="keywordtype">size_t</span> maxN = (n_samples/2); <span class="comment">// do not need to split till n</span>
<a name="l00066"></a>00066   cout &lt;&lt; maxN &lt;&lt; endl;
<a name="l00067"></a>00067    <span class="comment">//---------string formatting-----------------------------------------</span>
<a name="l00068"></a>00068    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00069"></a>00069     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00070"></a>00070     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00071"></a>00071     oss.precision(10);
<a name="l00072"></a>00072   <span class="comment">//=======================================================================//</span>
<a name="l00073"></a>00073      
<a name="l00074"></a>00074    <span class="comment">//================Setting up parameters for the Rosenbrock density========//</span>
<a name="l00075"></a>00075    <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00076"></a>00076    <span class="comment">// set default values</span>
<a name="l00077"></a>00077    <span class="keywordtype">int</span> n_dimensions = 2;
<a name="l00078"></a>00078    <span class="keywordtype">int</span> n_boxes = 10000;
<a name="l00079"></a>00079    <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
<a name="l00080"></a>00080    <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00081"></a>00081    real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00082"></a>00082    real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00083"></a>00083    real RosenDomainLimit = 10.0;
<a name="l00084"></a>00084    <span class="comment">//========================================================================//</span>
<a name="l00085"></a>00085   
<a name="l00086"></a>00086   <span class="comment">//=================Start simulations=====================================//</span>
<a name="l00087"></a>00087   
<a name="l00088"></a>00088   
<a name="l00089"></a>00089   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> h=1; h&lt;=H; h++){
<a name="l00090"></a>00090     cout &lt;&lt; <span class="stringliteral">&quot;Doing hist number &quot;</span> &lt;&lt; h &lt;&lt; endl;
<a name="l00091"></a>00091     <span class="comment">//record time taken</span>
<a name="l00092"></a>00092     vector&lt;double&gt; timeVec;
<a name="l00093"></a>00093     vector&lt;double&gt;::iterator itTimeVec;
<a name="l00094"></a>00094       <span class="comment">//keep the IAEs in a vector </span>
<a name="l00095"></a>00095     vector&lt;real&gt; IAEVec;
<a name="l00096"></a>00096     vector&lt;real&gt;::iterator IAEVecIt;
<a name="l00097"></a>00097     <span class="comment">//record number of leaf boxes for each histogram</span>
<a name="l00098"></a>00098     vector&lt;int&gt; numBinVec;
<a name="l00099"></a>00099     vector&lt;int&gt;::iterator numBinVecIt;
<a name="l00100"></a>00100    
<a name="l00101"></a>00101      <span class="comment">//generate data</span>
<a name="l00102"></a>00102     <span class="keywordtype">unsigned</span> theSeed =  time (NULL) * getpid() + h; 
<a name="l00103"></a>00103      <span class="keywordflow">if</span> (argc &gt;= 2) {
<a name="l00104"></a>00104          sscanf (argv[1], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_dimensions);
<a name="l00105"></a>00105          <span class="keywordflow">if</span> (argc &gt;= 3) {
<a name="l00106"></a>00106             sscanf (argv[2], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_boxes);
<a name="l00107"></a>00107             <span class="keywordflow">if</span> (argc &gt;= 4) sscanf (argv[3], <span class="stringliteral">&quot;%i&quot;</span>, &amp;n_samples);
<a name="l00108"></a>00108             <span class="keywordflow">if</span> (argc &gt;= 5) sscanf (argv[4], <span class="stringliteral">&quot;%ui&quot;</span>, &amp;theSeed);
<a name="l00109"></a>00109             <span class="keywordflow">if</span> (argc &gt;= 6)
<a name="l00110"></a>00110             cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00111"></a>00111              &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
<a name="l00112"></a>00112          }
<a name="l00113"></a>00113          <span class="keywordflow">else</span> 
<a name="l00114"></a>00114          cout &lt;&lt; <span class="stringliteral">&quot;# Usage: MRS &lt;n_dimensions&gt; &lt;n_boxes&gt; &lt;n_samples&gt; &lt;seed&gt;; &quot;</span>
<a name="l00115"></a>00115                  &lt;&lt; <span class="stringliteral">&quot;extra arguments ignored.\n&quot;</span>;
<a name="l00116"></a>00116       }
<a name="l00117"></a>00117      cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes
<a name="l00118"></a>00118         &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed
<a name="l00119"></a>00119         &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00120"></a>00120       <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00121"></a>00121       <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
<a name="l00122"></a>00122       <span class="comment">// make the function object</span>
<a name="l00123"></a>00123       <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> FRosen (n_dimensions, Tinverse, Height, RosenDomainLimit, UseLogPi);
<a name="l00124"></a>00124       <span class="comment">// produce the samples</span>
<a name="l00125"></a>00125       <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (FRosen, n_boxes, Alb, theSeed, (use_f_scale == 1));
<a name="l00126"></a>00126     <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> rs_sample;
<a name="l00127"></a>00127     cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
<a name="l00128"></a>00128     cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
<a name="l00129"></a>00129     theSampler.<a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">RejectionSampleMany</a> (n_samples, rs_sample);
<a name="l00130"></a>00130     cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
<a name="l00131"></a>00131     <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
<a name="l00132"></a>00132     cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
<a name="l00133"></a>00133         &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
<a name="l00134"></a>00134     cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
<a name="l00135"></a>00135     cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
<a name="l00136"></a>00136 
<a name="l00137"></a>00137        
<a name="l00138"></a>00138     <span class="comment">//start the priority queue </span>
<a name="l00139"></a>00139     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> mC = 1; mC &lt;= maxN/step; mC++){
<a name="l00140"></a>00140       <span class="keywordtype">int</span> maxC = mC*step;
<a name="l00141"></a>00141       cout &lt;&lt; <span class="stringliteral">&quot;Maximum count is : &quot;</span> &lt;&lt; maxC &lt;&lt; endl;
<a name="l00142"></a>00142         
<a name="l00143"></a>00143        <span class="comment">//set up flags</span>
<a name="l00144"></a>00144       <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00145"></a>00145       <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00146"></a>00146         
<a name="l00147"></a>00147        <span class="comment">//create an AdaptiveHistogram object</span>
<a name="l00148"></a>00148       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist;
<a name="l00149"></a>00149         successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(rs_sample, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0);
<a name="l00150"></a>00150       <span class="keywordflow">if</span> (successfulInsertion) {        
<a name="l00151"></a>00151         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;  <span class="comment">// compare counts</span>
<a name="l00152"></a>00152         <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(maxC); <span class="comment">// maxC is stopping criteria</span>
<a name="l00153"></a>00153         clock_t start, end;
<a name="l00154"></a>00154         start = clock();
<a name="l00155"></a>00155         successfulPQSplit = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompCount, 
<a name="l00156"></a>00156                                     critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00157"></a>00157         end = clock();
<a name="l00158"></a>00158         <span class="keywordtype">double</span> timing;
<a name="l00159"></a>00159         timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00160"></a>00160         cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00161"></a>00161         timeVec.push_back(timing);
<a name="l00162"></a>00162       } <span class="comment">// end of successfulInsertion</span>
<a name="l00163"></a>00163 
<a name="l00164"></a>00164       <span class="keywordflow">if</span> (successfulPQSplit) {         
<a name="l00165"></a>00165             <span class="comment">/* // optional - if you want to get a txt output of each histogram</span>
<a name="l00166"></a>00166 <span class="comment">            // create a name for the file to output</span>
<a name="l00167"></a>00167 <span class="comment">            string fileName = &quot;HistBiG&quot;;</span>
<a name="l00168"></a>00168 <span class="comment">            //convert j to a string</span>
<a name="l00169"></a>00169 <span class="comment">            // std::ostringstream stm2;</span>
<a name="l00170"></a>00170 <span class="comment">            // stm2 &lt;&lt; j;</span>
<a name="l00171"></a>00171 <span class="comment">            // add the stringed j to the filename</span>
<a name="l00172"></a>00172 <span class="comment">            // fileName += stm2.str();</span>
<a name="l00173"></a>00173 <span class="comment">             fileName += &quot;.txt&quot;; // and finish the filename</span>
<a name="l00174"></a>00174 <span class="comment">            // To realize a file output</span>
<a name="l00175"></a>00175 <span class="comment">             myHist.outputToTxtTabs(fileName);</span>
<a name="l00176"></a>00176 <span class="comment">            */</span> <span class="comment">// optional</span>
<a name="l00177"></a>00177              <span class="comment">//get number of bins for this histogram</span>
<a name="l00178"></a>00178         numBinVec.push_back(myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00179"></a>00179     
<a name="l00180"></a>00180         <span class="comment">//get IAE </span>
<a name="l00181"></a>00181         real IAE = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">getIAE</a>(3);
<a name="l00182"></a>00182         IAEVec.push_back(IAE);
<a name="l00183"></a>00183       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00184"></a>00184       cout &lt;&lt; <span class="stringliteral">&quot;-----------------End of maxC = &quot;</span> &lt;&lt; maxC &lt;&lt; <span class="stringliteral">&quot;for hist &quot;</span> &lt;&lt; h
<a name="l00185"></a>00185            &lt;&lt; endl;
<a name="l00186"></a>00186     } <span class="comment">// end of loop for maxCount</span>
<a name="l00187"></a>00187   
<a name="l00188"></a>00188   
<a name="l00189"></a>00189     <span class="comment">//output vecIAE to .txt file</span>
<a name="l00190"></a>00190       <span class="comment">//name of file</span>
<a name="l00191"></a>00191     outputFileName = <span class="stringliteral">&quot;RosenIAEHist&quot;</span>;
<a name="l00192"></a>00192     std::ostringstream stm1;
<a name="l00193"></a>00193     stm1 &lt;&lt; h;
<a name="l00194"></a>00194     outputFileName += stm1.str();
<a name="l00195"></a>00195     outputFileName+= <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00196"></a>00196  
<a name="l00197"></a>00197       <span class="comment">//read into file</span>
<a name="l00198"></a>00198     oss.open(outputFileName.c_str());
<a name="l00199"></a>00199     <span class="keywordflow">for</span> (IAEVecIt = IAEVec.begin(); IAEVecIt &lt; IAEVec.end(); IAEVecIt++){
<a name="l00200"></a>00200       oss &lt;&lt; (*IAEVecIt) &lt;&lt; endl;
<a name="l00201"></a>00201     }
<a name="l00202"></a>00202     oss &lt;&lt; flush;
<a name="l00203"></a>00203     oss.close();
<a name="l00204"></a>00204     cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206       <span class="comment">//read time taken into file</span>
<a name="l00207"></a>00207     <span class="keywordtype">string</span> timeFileName;
<a name="l00208"></a>00208     timeFileName = <span class="stringliteral">&quot;RosenTime&quot;</span>;
<a name="l00209"></a>00209     timeFileName += stm1.str(); <span class="comment">//hist number</span>
<a name="l00210"></a>00210     timeFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00211"></a>00211     oss.open(timeFileName.c_str());
<a name="l00212"></a>00212     <span class="keywordflow">for</span>(itTimeVec = timeVec.begin(); itTimeVec &lt; timeVec.end(); itTimeVec++){
<a name="l00213"></a>00213       oss &lt;&lt; (*itTimeVec) &lt;&lt; endl ;
<a name="l00214"></a>00214     }
<a name="l00215"></a>00215     oss &lt;&lt; flush;
<a name="l00216"></a>00216     oss.close();
<a name="l00217"></a>00217     cout &lt;&lt; <span class="stringliteral">&quot;Timings output to &quot;</span> &lt;&lt; timeFileName &lt;&lt; endl;
<a name="l00218"></a>00218     
<a name="l00219"></a>00219      <span class="comment">//read number of bins into file</span>
<a name="l00220"></a>00220     <span class="keywordtype">string</span> binFileName;
<a name="l00221"></a>00221     binFileName = <span class="stringliteral">&quot;RosenBins&quot;</span>;
<a name="l00222"></a>00222     binFileName += stm1.str(); <span class="comment">//hist number</span>
<a name="l00223"></a>00223     binFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00224"></a>00224     oss.open(binFileName.c_str());
<a name="l00225"></a>00225     <span class="keywordflow">for</span>(numBinVecIt = numBinVec.begin(); numBinVecIt &lt; numBinVec.end(); 
<a name="l00226"></a>00226          numBinVecIt++){
<a name="l00227"></a>00227       oss &lt;&lt; *numBinVecIt &lt;&lt; endl ;
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229     oss &lt;&lt; flush;
<a name="l00230"></a>00230     oss.close();
<a name="l00231"></a>00231     cout &lt;&lt; <span class="stringliteral">&quot;Number of bins output to &quot;</span> &lt;&lt; binFileName &lt;&lt; endl;
<a name="l00232"></a>00232     cout &lt;&lt; <span class="stringliteral">&quot;----------------------------------------------&quot;</span> &lt;&lt; endl;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 
<a name="l00236"></a>00236    cout &lt;&lt; <span class="stringliteral">&quot;===================done with hist &quot;</span> &lt;&lt; h &lt;&lt; <span class="stringliteral">&quot;============&quot;</span> &lt;&lt; endl;
<a name="l00237"></a>00237   } <span class="comment">// end of loop for histograms</span>
<a name="l00238"></a>00238   
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="keywordflow">return</span> 0;
<a name="l00241"></a>00241 } <span class="comment">// end of Rosen MIAE</span>
<a name="l00242"></a>00242 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="RosenMIAE_8cpp.shtml">RosenMIAE.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
