<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPTesting.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPTesting_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MappedSPTesting.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MappedSPTesting_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;<a class="code" href="MappedSPTesting__Framework_8hpp.shtml" title="Templatised procedures for testing MappedSPnode class.">MappedSPTesting_Framework.hpp</a>&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="keyword">using namespace </span>cxsc;
<a name="l00010"></a>00010 <span class="keyword">using namespace </span>std;
<a name="l00011"></a>00011 <span class="keyword">using namespace </span>subpavings;
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 
<a name="l00014"></a><a class="code" href="MappedSPTesting_8hpp.shtml#aef79ccce3ac1806a24d3b4b84156ffdd">00014</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting_8cpp.shtml#af217d9f0e1cfa7845c6515c418acc7a2">mappedAbsDiffTest</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <span class="keyword">const</span> lhs, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <span class="keyword">const</span> rhs)
<a name="l00015"></a>00015 {
<a name="l00016"></a>00016     cout &lt;&lt; <span class="stringliteral">&quot;Trying to find absolute value of difference&quot;</span> &lt;&lt; endl;
<a name="l00017"></a>00017     cout &lt;&lt; endl;
<a name="l00018"></a>00018 
<a name="l00019"></a>00019     cxsc::real diff = lhs-&gt;absDiff(*rhs);
<a name="l00020"></a>00020 
<a name="l00021"></a>00021     cout &lt;&lt; <span class="stringliteral">&quot;difference is &quot;</span> &lt;&lt; diff &lt;&lt; endl;
<a name="l00022"></a>00022     cout &lt;&lt; endl;
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 } <span class="comment">// end of absdiff test</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a><a class="code" href="MappedSPTesting_8hpp.shtml#a686d2f9fde8869851f8c1806db2a94de">00028</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting_8cpp.shtml#a686d2f9fde8869851f8c1806db2a94de">testingInts</a>()
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
<a name="l00031"></a>00031     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033     <span class="keywordflow">try</span> {
<a name="l00034"></a>00034         <span class="comment">// testing for ints</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036         cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as ints\n&quot;</span> &lt;&lt; endl;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038         <span class="keywordtype">int</span> dims = 1;
<a name="l00039"></a>00039         ivector pavingBox(dims);
<a name="l00040"></a>00040         interval pavingInterval(-4,4);
<a name="l00041"></a>00041         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044         nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00045"></a>00045         nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;int&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047         <span class="comment">// split the nodes to particular shapes</span>
<a name="l00048"></a>00048         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00049"></a>00049         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051         <span class="comment">// allocate ranges for nodeOne</span>
<a name="l00052"></a>00052         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne1(4);
<a name="l00053"></a>00053         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne2(1);
<a name="l00054"></a>00054         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a> rangeOne3(3);
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         vector&lt; RangeCollectionClass&lt;int&gt; &gt; rangesOne;
<a name="l00057"></a>00057         rangesOne.push_back(rangeOne1);
<a name="l00058"></a>00058         rangesOne.push_back(rangeOne2);
<a name="l00059"></a>00059         rangesOne.push_back(rangeOne3);
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064         <span class="comment">// allocate ranges for nodeTwo</span>
<a name="l00065"></a>00065         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo1(5);
<a name="l00066"></a>00066         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo2(3);
<a name="l00067"></a>00067         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo3(1);
<a name="l00068"></a>00068         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo4(2);
<a name="l00069"></a>00069         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;int&gt;</a>  rangeTwo5(4);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071         vector&lt; RangeCollectionClass&lt;int&gt; &gt; rangesTwo;
<a name="l00072"></a>00072         rangesTwo.push_back(rangeTwo1);
<a name="l00073"></a>00073         rangesTwo.push_back(rangeTwo2);
<a name="l00074"></a>00074         rangesTwo.push_back(rangeTwo3);
<a name="l00075"></a>00075         rangesTwo.push_back(rangeTwo4);
<a name="l00076"></a>00076         rangesTwo.push_back(rangeTwo5);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
<a name="l00083"></a>00083         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="keywordtype">int</span> multiplier = 4; <span class="comment">// supply a multiplier of the right type</span>
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089         <span class="keyword">delete</span> nodeOne;
<a name="l00090"></a>00090         <span class="keyword">delete</span> nodeTwo;
<a name="l00091"></a>00091         nodeOne = NULL; nodeTwo = NULL;
<a name="l00092"></a>00092     }
<a name="l00093"></a>00093     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00094"></a>00094         <span class="keywordflow">if</span> (NULL == nodeOne) {
<a name="l00095"></a>00095             <span class="keyword">delete</span> nodeOne;
<a name="l00096"></a>00096             nodeOne = NULL;}
<a name="l00097"></a>00097         <span class="keywordflow">if</span> (NULL == nodeTwo) {
<a name="l00098"></a>00098             <span class="keyword">delete</span> nodeTwo;
<a name="l00099"></a>00099             nodeTwo = NULL;}
<a name="l00100"></a>00100         <span class="keywordflow">throw</span>;
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 } <span class="comment">// end of test for ints</span>
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="MappedSPTesting_8hpp.shtml#af4f8f9d67560d931c3a6cf99a8ca2cb2">00108</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting_8cpp.shtml#af4f8f9d67560d931c3a6cf99a8ca2cb2">testingReals</a>()
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodeOne; <span class="comment">// make a RealMappedSPnode object</span>
<a name="l00111"></a>00111     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="keywordflow">try</span> {
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="comment">// testing for reals</span>
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as csxc::reals\n&quot;</span> &lt;&lt; endl;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="keywordtype">int</span> dims = 1;
<a name="l00120"></a>00120         ivector pavingBox(dims);
<a name="l00121"></a>00121         interval pavingInterval(-4,4);
<a name="l00122"></a>00122         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00126"></a>00126         nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="comment">// split the nodes to particular shapes</span>
<a name="l00129"></a>00129         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00130"></a>00130         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00131"></a>00131 
<a name="l00132"></a>00132         <span class="comment">// allocate ranges for nodeOne</span>
<a name="l00133"></a>00133         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne1(real(4.0));
<a name="l00134"></a>00134         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne2(real(1.0));
<a name="l00135"></a>00135         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> rangeOne3(real(3.0));
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         vector&lt; RangeCollectionClass&lt;real&gt; &gt; rangesOne;
<a name="l00138"></a>00138         rangesOne.push_back(rangeOne1);
<a name="l00139"></a>00139         rangesOne.push_back(rangeOne2);
<a name="l00140"></a>00140         rangesOne.push_back(rangeOne3);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <span class="comment">// allocate ranges for nodeTwo</span>
<a name="l00146"></a>00146         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo1(real(5.0));
<a name="l00147"></a>00147         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo2(real(3.0));
<a name="l00148"></a>00148         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo3(real(1.0));
<a name="l00149"></a>00149         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo4(real(2.0));
<a name="l00150"></a>00150         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a>  rangeTwo5(real(4.0));
<a name="l00151"></a>00151 
<a name="l00152"></a>00152         vector&lt; RangeCollectionClass&lt;real&gt; &gt; rangesTwo;
<a name="l00153"></a>00153         rangesTwo.push_back(rangeTwo1);
<a name="l00154"></a>00154         rangesTwo.push_back(rangeTwo2);
<a name="l00155"></a>00155         rangesTwo.push_back(rangeTwo3);
<a name="l00156"></a>00156         rangesTwo.push_back(rangeTwo4);
<a name="l00157"></a>00157         rangesTwo.push_back(rangeTwo5);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);
<a name="l00160"></a>00160 
<a name="l00161"></a>00161         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
<a name="l00164"></a>00164         <a class="code" href="MappedSPTesting_8cpp.shtml#af217d9f0e1cfa7845c6515c418acc7a2">mappedAbsDiffTest</a>(nodeOne, nodeTwo);
<a name="l00165"></a>00165         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         real multiplier(4.0); <span class="comment">// supply a multiplier of the right type</span>
<a name="l00168"></a>00168 
<a name="l00169"></a>00169         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="keyword">delete</span> nodeOne;
<a name="l00172"></a>00172         <span class="keyword">delete</span> nodeTwo;
<a name="l00173"></a>00173         nodeOne = NULL; nodeTwo = NULL;
<a name="l00174"></a>00174     }
<a name="l00175"></a>00175     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00176"></a>00176         <span class="keywordflow">if</span> (NULL == nodeOne) {
<a name="l00177"></a>00177             <span class="keyword">delete</span> nodeOne;
<a name="l00178"></a>00178             nodeOne = NULL;}
<a name="l00179"></a>00179         <span class="keywordflow">if</span> (NULL == nodeTwo) {
<a name="l00180"></a>00180             <span class="keyword">delete</span> nodeTwo;
<a name="l00181"></a>00181             nodeTwo = NULL;}
<a name="l00182"></a>00182         <span class="keywordflow">throw</span>;
<a name="l00183"></a>00183     }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 } <span class="comment">// end of test for ints</span>
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a><a class="code" href="MappedSPTesting_8hpp.shtml#a2078ccf7a3182fc91c84636c22eafc5e">00189</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting_8cpp.shtml#a2078ccf7a3182fc91c84636c22eafc5e">testingIntervals</a>()
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191 
<a name="l00192"></a>00192     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
<a name="l00193"></a>00193     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>
<a name="l00194"></a>00194 
<a name="l00195"></a>00195     <span class="keywordflow">try</span> {
<a name="l00196"></a>00196         <span class="comment">// testing for intervals</span>
<a name="l00197"></a>00197 
<a name="l00198"></a>00198         cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as intervals\n&quot;</span> &lt;&lt; endl;
<a name="l00199"></a>00199 
<a name="l00200"></a>00200         <span class="keywordtype">int</span> dims = 1;
<a name="l00201"></a>00201         ivector pavingBox(dims);
<a name="l00202"></a>00202         interval pavingInterval(-4,4);
<a name="l00203"></a>00203         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00207"></a>00207         nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;interval&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         <span class="comment">// split the nodes to particular shapes</span>
<a name="l00210"></a>00210         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00211"></a>00211         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213         <span class="comment">// allocate ranges for nodeOne</span>
<a name="l00214"></a>00214         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a>  rangeOne1(interval(1.0,5.0));
<a name="l00215"></a>00215         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeOne2(interval(1.5,3.0));
<a name="l00216"></a>00216         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeOne3(interval(2.5,4.0));
<a name="l00217"></a>00217 
<a name="l00218"></a>00218         vector&lt; RangeCollectionClass&lt;interval&gt; &gt; rangesOne;
<a name="l00219"></a>00219         rangesOne.push_back(rangeOne1);
<a name="l00220"></a>00220         rangesOne.push_back(rangeOne2);
<a name="l00221"></a>00221         rangesOne.push_back(rangeOne3);
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 
<a name="l00226"></a>00226         <span class="comment">// allocate ranges for nodeTwo</span>
<a name="l00227"></a>00227         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo1(interval(1.0,6.0));
<a name="l00228"></a>00228         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo2(interval(2.0,5.0));
<a name="l00229"></a>00229         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo3(interval(2.5,3.5));
<a name="l00230"></a>00230         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo4(interval(3.0,4.5));
<a name="l00231"></a>00231         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;interval&gt;</a> rangeTwo5(interval(1.5,5.5));
<a name="l00232"></a>00232 
<a name="l00233"></a>00233         vector&lt; RangeCollectionClass&lt;interval&gt; &gt; rangesTwo;
<a name="l00234"></a>00234         rangesTwo.push_back(rangeTwo1);
<a name="l00235"></a>00235         rangesTwo.push_back(rangeTwo2);
<a name="l00236"></a>00236         rangesTwo.push_back(rangeTwo3);
<a name="l00237"></a>00237         rangesTwo.push_back(rangeTwo4);
<a name="l00238"></a>00238         rangesTwo.push_back(rangeTwo5);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);
<a name="l00241"></a>00241 
<a name="l00242"></a>00242         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
<a name="l00245"></a>00245         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247         interval multiplier(1.0,4.0); <span class="comment">// supply a multiplier of the right type</span>
<a name="l00248"></a>00248 
<a name="l00249"></a>00249         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);
<a name="l00250"></a>00250 
<a name="l00251"></a>00251         <span class="keyword">delete</span> nodeOne;
<a name="l00252"></a>00252         <span class="keyword">delete</span> nodeTwo;
<a name="l00253"></a>00253         nodeOne = NULL; nodeTwo = NULL;
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255     <span class="keywordflow">catch</span> (exception&amp; e){
<a name="l00256"></a>00256         <span class="keywordflow">if</span> (NULL == nodeOne) {
<a name="l00257"></a>00257             <span class="keyword">delete</span> nodeOne;
<a name="l00258"></a>00258             nodeOne = NULL;}
<a name="l00259"></a>00259         <span class="keywordflow">if</span> (NULL == nodeTwo) {
<a name="l00260"></a>00260             <span class="keyword">delete</span> nodeTwo;
<a name="l00261"></a>00261             nodeTwo = NULL;}
<a name="l00262"></a>00262         <span class="keywordflow">throw</span>;
<a name="l00263"></a>00263     }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 } <span class="comment">// end of test for intervals</span>
<a name="l00267"></a>00267 
<a name="l00268"></a><a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">00268</a> rvector <a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(real r1, real r2)
<a name="l00269"></a>00269 {
<a name="l00270"></a>00270     rvector rv(2);
<a name="l00271"></a>00271     rv[1] = r1;
<a name="l00272"></a>00272     rv[2] = r2;
<a name="l00273"></a>00273     <span class="keywordflow">return</span> rv;
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a><a class="code" href="MappedSPTesting_8hpp.shtml#a98c77f0cb3cafad5b5b5054aceaee80c">00277</a> <span class="keywordtype">void</span> <a class="code" href="MappedSPTesting_8cpp.shtml#a98c77f0cb3cafad5b5b5054aceaee80c">testingRvectors</a>()
<a name="l00278"></a>00278 {
<a name="l00279"></a>00279 
<a name="l00280"></a>00280     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>* nodeOne; <span class="comment">// make a MappedSPnode object</span>
<a name="l00281"></a>00281     <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>* nodeTwo; <span class="comment">// make another MappedSPnode object</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordflow">try</span> {
<a name="l00284"></a>00284 
<a name="l00285"></a>00285         <span class="comment">// testing for rvectors</span>
<a name="l00286"></a>00286 
<a name="l00287"></a>00287         cout &lt;&lt; <span class="stringliteral">&quot;\nTesting for ranges as rvectors\n&quot;</span> &lt;&lt; endl;
<a name="l00288"></a>00288 
<a name="l00289"></a>00289         <span class="keywordtype">int</span> dims = 2;
<a name="l00290"></a>00290         ivector pavingBox(dims);
<a name="l00291"></a>00291         interval pavingInterval(-4,4);
<a name="l00292"></a>00292         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= dims; k++) pavingBox[k] = pavingInterval;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 
<a name="l00295"></a>00295         nodeOne = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>(pavingBox); <span class="comment">// make a MappedSPnode object</span>
<a name="l00296"></a>00296         nodeTwo = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;rvector&gt;</a>(pavingBox); <span class="comment">// make another MappedSPnode object</span>
<a name="l00297"></a>00297 
<a name="l00298"></a>00298         <span class="comment">// split the nodes to particular shapes</span>
<a name="l00299"></a>00299         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;1,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00300"></a>00300         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a65c8bb39917da7dc82fb07c9572c7286" title="Splits paving according to string instruction.">splitToShape</a>(<span class="stringliteral">&quot;2,2,1&quot;</span>); <span class="comment">// split it</span>
<a name="l00301"></a>00301 
<a name="l00302"></a>00302         <span class="comment">// allocate ranges for nodeOne</span>
<a name="l00303"></a>00303         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a>  rangeOne1(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,5.0));
<a name="l00304"></a>00304         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeOne2(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.5,3.0));
<a name="l00305"></a>00305         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeOne3(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.5,4.0));
<a name="l00306"></a>00306 
<a name="l00307"></a>00307         vector&lt; RangeCollectionClass&lt;rvector&gt; &gt; rangesOne;
<a name="l00308"></a>00308         rangesOne.push_back(rangeOne1);
<a name="l00309"></a>00309         rangesOne.push_back(rangeOne2);
<a name="l00310"></a>00310         rangesOne.push_back(rangeOne3);
<a name="l00311"></a>00311 
<a name="l00312"></a>00312         nodeOne-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesOne, 0);
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 
<a name="l00315"></a>00315         <span class="comment">// allocate ranges for nodeTwo</span>
<a name="l00316"></a>00316         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo1(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,6.0));
<a name="l00317"></a>00317         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo2(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.0,5.0));
<a name="l00318"></a>00318         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo3(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(2.5,3.5));
<a name="l00319"></a>00319         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo4(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(3.0,4.5));
<a name="l00320"></a>00320         <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;rvector&gt;</a> rangeTwo5(<a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.5,5.5));
<a name="l00321"></a>00321 
<a name="l00322"></a>00322         vector&lt; RangeCollectionClass&lt;rvector&gt; &gt; rangesTwo;
<a name="l00323"></a>00323         rangesTwo.push_back(rangeTwo1);
<a name="l00324"></a>00324         rangesTwo.push_back(rangeTwo2);
<a name="l00325"></a>00325         rangesTwo.push_back(rangeTwo3);
<a name="l00326"></a>00326         rangesTwo.push_back(rangeTwo4);
<a name="l00327"></a>00327         rangesTwo.push_back(rangeTwo5);
<a name="l00328"></a>00328 
<a name="l00329"></a>00329         nodeTwo-&gt;<a class="code" href="classsubpavings_1_1MappedSPnode.shtml#a3f0d891bb2650f6558cc4081ce5102c6" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(rangesTwo, 0);
<a name="l00330"></a>00330 
<a name="l00331"></a>00331         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a>(nodeOne, nodeTwo);
<a name="l00332"></a>00332 
<a name="l00333"></a>00333         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a>(nodeOne, nodeTwo);
<a name="l00334"></a>00334         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a>(nodeOne, nodeTwo);
<a name="l00335"></a>00335 
<a name="l00336"></a>00336         rvector multiplier = <a class="code" href="MappedSPTesting_8cpp.shtml#a3f78cbdaf120952dafe842558d057122">make2Drvector</a>(1.0,4.0); <span class="comment">// supply a multiplier of the right type</span>
<a name="l00337"></a>00337 
<a name="l00338"></a>00338         <a class="code" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a>(nodeOne, nodeTwo, multiplier);
<a name="l00339"></a>00339 
<a name="l00340"></a>00340         <span class="keyword">delete</span> nodeOne;
<a name="l00341"></a>00341         <span class="keyword">delete</span> nodeTwo;
<a name="l00342"></a>00342         nodeOne = NULL; nodeTwo = NULL;
<a name="l00343"></a>00343     }
<a name="l00344"></a>00344     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l00345"></a>00345         <span class="keywordflow">if</span> (NULL == nodeOne) {
<a name="l00346"></a>00346             <span class="keyword">delete</span> nodeOne;
<a name="l00347"></a>00347             nodeOne = NULL;}
<a name="l00348"></a>00348         <span class="keywordflow">if</span> (NULL == nodeTwo) {
<a name="l00349"></a>00349             <span class="keyword">delete</span> nodeTwo;
<a name="l00350"></a>00350             nodeTwo = NULL;}
<a name="l00351"></a>00351         <span class="keywordflow">throw</span>;
<a name="l00352"></a>00352     }
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 } <span class="comment">// end of test for intervals</span>
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPTesting_8cpp.shtml">MappedSPTesting.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:15 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
