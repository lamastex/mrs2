<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: GOpt.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('GOpt_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">GOpt.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="GOpt_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00029"></a>00029 <span class="comment">// global optimisation using C++ Toolbox for Verified Computing</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="GOpt_8hpp.shtml" title="Global Optimisation declarations. Global optimisation using the C++ Toolbox for Verified Computing Se...">GOpt.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;getopt.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;gop.hpp&gt;</span>  <span class="comment">// cxsc global optimisation</span>
<a name="l00039"></a>00039 <span class="comment">// increase stack size for some special C++ compilers</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;stacksz.hpp&gt;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00048"></a><a class="code" href="GOpt_8cpp.shtml#ae1bcefa049228309fc096c4030a54728">00048</a> <a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>* <a class="code" href="GOpt_8cpp.shtml#ae1bcefa049228309fc096c4030a54728" title="declare a global pointer to an Fobj">fToOtp</a> = NULL;
<a name="l00049"></a>00049 
<a name="l00055"></a><a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7">00055</a> <span class="keywordtype">int</span> <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a> = 0;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">// implementation of GOptMin</span>
<a name="l00058"></a>00058 <span class="comment">/* f is a pointer to the Fobj we will do global optimisation on</span>
<a name="l00059"></a>00059 <span class="comment"> to look for global minimums.  The label defaults to 0.</span>
<a name="l00060"></a>00060 <span class="comment">*/</span>
<a name="l00061"></a><a class="code" href="GOpt_8hpp.shtml#abcc17b8ab0c15811dd2d1c6e6b760007">00061</a> <span class="keywordtype">void</span> <a class="code" href="GOpt_8cpp.shtml#aa1ef10e5facfa08af99a235f02dce943" title="This runs the global optimisation procedure AllGOp for global minimums and prints results...">GOptMin</a>(<a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>* <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, ivector search, real t, <span class="keyword">const</span> <span class="keywordtype">int</span> label)
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063   fToOtp = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;       <span class="comment">// point the global pointer to f</span>
<a name="l00064"></a>00064   <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a> = label;   <span class="comment">// and set flabel = label</span>
<a name="l00065"></a>00065   ivector SearchInterval = search;
<a name="l00066"></a>00066   real Tolerance = t;
<a name="l00067"></a>00067   <span class="comment">// check the dimensions match</span>
<a name="l00068"></a>00068   <span class="keywordtype">int</span> search_dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(search) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(search) +1;
<a name="l00069"></a>00069   <span class="comment">// get the dimensions of the domain for boxes labelled 0;</span>
<a name="l00070"></a>00070   <span class="keywordtype">size_t</span> func_dim = f-&gt;<a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669" title="Get the dimensions of the list of labeled domains.">getLabeledDomainDim</a>(0);
<a name="l00071"></a>00071   <span class="keywordflow">if</span>(static_cast&lt;int&gt;(func_dim) != search_dim)
<a name="l00072"></a>00072   {
<a name="l00073"></a>00073     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in GOpt: dimensions of search box &quot;</span>
<a name="l00074"></a>00074       &lt;&lt; search_dim &lt;&lt; <span class="stringliteral">&quot; do not match dimensions of function domain &quot;</span>
<a name="l00075"></a>00075       &lt;&lt; func_dim &lt;&lt; endl&lt;&lt; std::endl;
<a name="l00076"></a>00076     exit(1);
<a name="l00077"></a>00077   }
<a name="l00078"></a>00078   <span class="comment">// these are filled in by running AllGOp</span>
<a name="l00079"></a>00079   interval    Minimum;
<a name="l00080"></a>00080   imatrix     Opti;
<a name="l00081"></a>00081   intvector   Unique;
<a name="l00082"></a>00082   <span class="keywordtype">int</span>         NumberOfOptis;
<a name="l00083"></a>00083   <span class="keywordtype">int</span>   Error;
<a name="l00084"></a>00084   <span class="comment">// running AllGop fills in Opti, Unique, NumberOfOptis, Mimimum and Error,</span>
<a name="l00085"></a>00085   <span class="comment">// all of which are passed by reference</span>
<a name="l00086"></a>00086   AllGOp(<a class="code" href="GOpt_8cpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe" title="Function conforming to typedef HTscalar_FctPtr for global minimums.">funcHessMin</a>, SearchInterval, Tolerance,
<a name="l00087"></a>00087     Opti, Unique, NumberOfOptis, Minimum, Error);
<a name="l00088"></a>00088   <span class="comment">// AllGOp also takes a final optional parameter for maximum number of</span>
<a name="l00089"></a>00089   <span class="comment">// optimisation attemtps to perform</span>
<a name="l00090"></a>00090   <span class="comment">// this has default value of MaxCount = 10000 - see gop.hpp</span>
<a name="l00091"></a>00091   <span class="comment">// print the outcomes</span>
<a name="l00092"></a>00092   <a class="code" href="GOpt_8cpp.shtml#a82f1bc87790710a1599bc1dc2906339a" title="Print the results for mimimums.">printOutcomeMin</a>(SearchInterval, Tolerance, Opti, Unique, NumberOfOptis,
<a name="l00093"></a>00093                   Minimum, Error);
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="comment">// implementation of GOptMax</span>
<a name="l00097"></a>00097 <span class="comment">/* f is a pointer to the Fobj we will do global optimisation on</span>
<a name="l00098"></a>00098 <span class="comment"> to look for global maximums.  The label defaults to 0.</span>
<a name="l00099"></a>00099 <span class="comment">*/</span>
<a name="l00100"></a><a class="code" href="GOpt_8hpp.shtml#a89c491798147580e08ebb3349e9b146f">00100</a> <span class="keywordtype">void</span> <a class="code" href="GOpt_8cpp.shtml#ad4d421e8fe8cd7dc081fbc719c43c8b4" title="This runs the global optimisation procedure AllGOp for global maximums and prints results...">GOptMax</a>(<a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>* <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, ivector search, real t, <span class="keyword">const</span> <span class="keywordtype">int</span> label)
<a name="l00101"></a>00101 {
<a name="l00102"></a>00102   fToOtp = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;       <span class="comment">// point the global pointer to f</span>
<a name="l00103"></a>00103   <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a> = label;   <span class="comment">// and set flabel = label</span>
<a name="l00104"></a>00104   ivector SearchInterval = search;
<a name="l00105"></a>00105   real Tolerance = t;
<a name="l00106"></a>00106   <span class="comment">// check the dimensions match</span>
<a name="l00107"></a>00107   <span class="keywordtype">int</span> search_dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(search) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(search) +1;
<a name="l00108"></a>00108                     <span class="comment">// get the dimensions of the domain for boxes labelled 0;</span>
<a name="l00109"></a>00109   <span class="keywordtype">size_t</span> func_dim = f-&gt;<a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669" title="Get the dimensions of the list of labeled domains.">getLabeledDomainDim</a>(0);
<a name="l00110"></a>00110   <span class="keywordflow">if</span>(static_cast&lt;int&gt;(func_dim) != search_dim)
<a name="l00111"></a>00111   {
<a name="l00112"></a>00112     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in GOpt: dimensions of search box &quot;</span> &lt;&lt; search_dim
<a name="l00113"></a>00113       &lt;&lt; <span class="stringliteral">&quot; do not match dimensions of function domain &quot;</span> &lt;&lt; func_dim &lt;&lt; std::endl
<a name="l00114"></a>00114       &lt;&lt; std::endl;
<a name="l00115"></a>00115     exit(1);
<a name="l00116"></a>00116   }
<a name="l00117"></a>00117   <span class="comment">// these are filled in by running AllGOp</span>
<a name="l00118"></a>00118   interval    Maximum;
<a name="l00119"></a>00119   imatrix     Opti;
<a name="l00120"></a>00120   intvector   Unique;
<a name="l00121"></a>00121   <span class="keywordtype">int</span>         NumberOfOptis;
<a name="l00122"></a>00122   <span class="keywordtype">int</span>   Error;
<a name="l00123"></a>00123   <span class="comment">// running AllGop fills in Opti, Unique, NumberOfOptis, Mimimum and Error,</span>
<a name="l00124"></a>00124   <span class="comment">// all of which are passed by reference</span>
<a name="l00125"></a>00125   AllGOp(<a class="code" href="GOpt_8cpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b" title="Function conforming to typedef HTscalar_FctPtr for global maximums.">funcHessMax</a>, SearchInterval, Tolerance,
<a name="l00126"></a>00126          Opti, Unique, NumberOfOptis, Maximum, Error);
<a name="l00127"></a>00127   <span class="comment">// AllGOp also takes a final optional parameter for maximum number of</span>
<a name="l00128"></a>00128   <span class="comment">// optimisation attemtps to perform</span>
<a name="l00129"></a>00129   <span class="comment">// this has default value of MaxCount = 10000 - see gop.hpp</span>
<a name="l00130"></a>00130   <span class="comment">// print the outcomes</span>
<a name="l00131"></a>00131   <a class="code" href="GOpt_8cpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d" title="Print the results for maximums.">printOutcomeMax</a>(SearchInterval, Tolerance, Opti, Unique, NumberOfOptis,
<a name="l00132"></a>00132                   Maximum, Error);
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">/* Function conforming to typedef HTscalar_FctPtr.</span>
<a name="l00136"></a>00136 <span class="comment"> Acts as &#39;wrapper&#39; and uses the HessType operator()(const HTvector&amp;) for the</span>
<a name="l00137"></a>00137 <span class="comment"> type of Fobj in FtoOpt global</span>
<a name="l00138"></a>00138 <span class="comment">*/</span>
<a name="l00139"></a><a class="code" href="GOpt_8hpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe">00139</a> HessType <a class="code" href="GOpt_8cpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe" title="Function conforming to typedef HTscalar_FctPtr for global minimums.">funcHessMin</a>(<span class="keyword">const</span> HTvector&amp; x)
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141   HessType hh;
<a name="l00142"></a>00142   <span class="comment">// use the operator () of the function pointed to by global fToOpt to</span>
<a name="l00143"></a>00143   <span class="comment">// calculate hh</span>
<a name="l00144"></a>00144   hh = (*fToOtp)(x, <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a>);
<a name="l00145"></a>00145   <span class="keywordflow">return</span> hh;
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="comment">/* Function conforming to typedef HTscalar_FctPtr.</span>
<a name="l00149"></a>00149 <span class="comment"> Acts as &#39;wrapper&#39; and uses the HessType operator()(const HTvector&amp;) for the</span>
<a name="l00150"></a>00150 <span class="comment"> type of Fobj in FtoOpt global but uses the negative of the () operator.</span>
<a name="l00151"></a>00151 <span class="comment">*/</span>
<a name="l00152"></a><a class="code" href="GOpt_8hpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b">00152</a> HessType <a class="code" href="GOpt_8cpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b" title="Function conforming to typedef HTscalar_FctPtr for global maximums.">funcHessMax</a>(<span class="keyword">const</span> HTvector&amp; x)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154   HessType hh;
<a name="l00155"></a>00155   <span class="comment">// use negative of the operator () of the function pointed to by global</span>
<a name="l00156"></a>00156   <span class="comment">// fToOpt to calculate hh</span>
<a name="l00157"></a>00157   hh = -((*fToOtp)(x, <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a>));
<a name="l00158"></a>00158   <span class="keywordflow">return</span> hh;
<a name="l00159"></a>00159 }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">// Tell me all about the results from global minimums</span>
<a name="l00162"></a><a class="code" href="GOpt_8hpp.shtml#a82f1bc87790710a1599bc1dc2906339a">00162</a> <span class="keywordtype">void</span> <a class="code" href="GOpt_8cpp.shtml#a82f1bc87790710a1599bc1dc2906339a" title="Print the results for mimimums.">printOutcomeMin</a>(ivector&amp; SearchInterval, real&amp; Tolerance, imatrix&amp; Opti,
<a name="l00163"></a>00163                      intvector&amp; Unique, <span class="keywordtype">int</span> NumberOfOptis, interval&amp; Minimum,
<a name="l00164"></a>00164                      <span class="keywordtype">int</span> Error)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166   <span class="comment">// Output format</span>
<a name="l00167"></a>00167   std::cout &lt;&lt; SetPrecision(23,15) &lt;&lt; Scientific;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169   std::cout &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt; std:: endl;
<a name="l00170"></a>00170   std::cout &lt;&lt; <span class="stringliteral">&quot;Global optimisation: minimums &quot;</span> &lt;&lt; std::endl;
<a name="l00171"></a>00171   std::cout &lt;&lt; <span class="stringliteral">&quot;Results of running AllGOp with Tolerance &quot;</span> &lt;&lt; Tolerance
<a name="l00172"></a>00172     &lt;&lt; std::endl;
<a name="l00173"></a>00173   std::cout &lt;&lt; <span class="stringliteral">&quot;with an initial search box of: &quot;</span> &lt;&lt; std::endl;
<a name="l00174"></a>00174   std::cout &lt;&lt; SearchInterval &lt;&lt; endl&lt;&lt;endl;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   std::cout &lt;&lt; <span class="stringliteral">&quot;The results for global optimisation (minimums) are &quot;</span>
<a name="l00177"></a>00177     &lt;&lt; std::endl;
<a name="l00178"></a>00178 
<a name="l00179"></a>00179   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= NumberOfOptis; i++)
<a name="l00180"></a>00180   {
<a name="l00181"></a>00181     std::cout &lt;&lt; Opti[i];
<a name="l00182"></a>00182     <span class="keywordflow">if</span> (Unique[i])
<a name="l00183"></a>00183       std::cout
<a name="l00184"></a>00184         &lt;&lt; <span class="stringliteral">&quot; encloses a locally unique candidate for a global minimiser!&quot;</span>;
<a name="l00185"></a>00185     <span class="keywordflow">else</span>
<a name="l00186"></a>00186       std::cout &lt;&lt; <span class="stringliteral">&quot; may contain a local or global minimiser!&quot;</span>;
<a name="l00187"></a>00187     std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00188"></a>00188   }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190   <span class="keywordflow">if</span> (NumberOfOptis != 0)
<a name="l00191"></a>00191   {
<a name="l00192"></a>00192     std::cout &lt;&lt; Minimum &lt;&lt; std::endl
<a name="l00193"></a>00193       &lt;&lt; <span class="stringliteral">&quot;encloses the global minimum value!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00194"></a>00194   }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196   std::cout &lt;&lt; NumberOfOptis &lt;&lt; <span class="stringliteral">&quot; interval enclosure(s)&quot;</span> &lt;&lt; std::endl;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198   <span class="keywordflow">if</span> (Error)
<a name="l00199"></a>00199     std::cout &lt;&lt; endl &lt;&lt; AllGOpErrMsg(Error) &lt;&lt; std::endl;
<a name="l00200"></a>00200   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (NumberOfOptis == 1 &amp;&amp; Unique[1])
<a name="l00201"></a>00201     std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;We have validated that there is &quot;</span>
<a name="l00202"></a>00202         <span class="stringliteral">&quot;a unique global optimiser!&quot;</span> &lt;&lt; std::endl;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;End of global optimisation for minimums&quot;</span>
<a name="l00205"></a>00205     &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00206"></a>00206 }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="comment">// Tell me all about the results form global maximums</span>
<a name="l00209"></a><a class="code" href="GOpt_8hpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d">00209</a> <span class="keywordtype">void</span> <a class="code" href="GOpt_8cpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d" title="Print the results for maximums.">printOutcomeMax</a>(ivector&amp; SearchInterval, real&amp; Tolerance, imatrix&amp; Opti,
<a name="l00210"></a>00210                      intvector&amp; Unique, <span class="keywordtype">int</span> NumberOfOptis, interval&amp; Maximum,
<a name="l00211"></a>00211                      <span class="keywordtype">int</span> Error)
<a name="l00212"></a>00212 {
<a name="l00213"></a>00213                     <span class="comment">// Output format</span>
<a name="l00214"></a>00214   std::cout &lt;&lt; SetPrecision(23,15) &lt;&lt; Scientific;
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   std::cout &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt; std:: endl;
<a name="l00217"></a>00217   std::cout &lt;&lt; <span class="stringliteral">&quot;Global optimisation: Maximums&quot;</span> &lt;&lt; std::endl;
<a name="l00218"></a>00218   std::cout &lt;&lt; <span class="stringliteral">&quot;Results of running AllGOp with Tolerance &quot;</span> &lt;&lt; Tolerance
<a name="l00219"></a>00219     &lt;&lt; std::endl;
<a name="l00220"></a>00220   std::cout &lt;&lt; <span class="stringliteral">&quot;with an initial search box of: &quot;</span> &lt;&lt; std::endl;
<a name="l00221"></a>00221   std::cout &lt;&lt; SearchInterval &lt;&lt; endl&lt;&lt;endl;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   std::cout &lt;&lt; <span class="stringliteral">&quot;The results for global optimisation (maximums) are &quot;</span>
<a name="l00224"></a>00224     &lt;&lt; std::endl;
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= NumberOfOptis; i++)
<a name="l00227"></a>00227   {
<a name="l00228"></a>00228     std::cout &lt;&lt; Opti[i];
<a name="l00229"></a>00229     <span class="keywordflow">if</span> (Unique[i])
<a name="l00230"></a>00230       std::cout
<a name="l00231"></a>00231         &lt;&lt; <span class="stringliteral">&quot; encloses a locally unique candidate for a global maximiser!&quot;</span>;
<a name="l00232"></a>00232     <span class="keywordflow">else</span>
<a name="l00233"></a>00233       std::cout &lt;&lt; <span class="stringliteral">&quot; may contain a local or global maximiser!&quot;</span>;
<a name="l00234"></a>00234     std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00235"></a>00235   }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="keywordflow">if</span> (NumberOfOptis != 0)
<a name="l00238"></a>00238   {
<a name="l00239"></a>00239     std::cout &lt;&lt; Maximum &lt;&lt; std::endl
<a name="l00240"></a>00240       &lt;&lt; <span class="stringliteral">&quot;encloses the global maximum value!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00241"></a>00241   }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243   std::cout &lt;&lt; NumberOfOptis &lt;&lt; <span class="stringliteral">&quot; interval enclosure(s)&quot;</span> &lt;&lt; std::endl;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="keywordflow">if</span> (Error)
<a name="l00246"></a>00246     std::cout &lt;&lt; endl &lt;&lt; AllGOpErrMsg(Error) &lt;&lt; std::endl;
<a name="l00247"></a>00247   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (NumberOfOptis == 1 &amp;&amp; Unique[1])
<a name="l00248"></a>00248     std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;We have validated that there is &quot;</span>
<a name="l00249"></a>00249         <span class="stringliteral">&quot;a unique global optimiser!&quot;</span> &lt;&lt; std::endl;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251   std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;End of global optimisation for maximums&quot;</span>
<a name="l00252"></a>00252     &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="GOpt_8cpp.shtml">GOpt.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
