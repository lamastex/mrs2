<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef ___SPNODE_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define ___SPNODE_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="sptypes_8hpp.shtml" title="Includes and general typedefs for subpavings.">sptypes.hpp</a>&quot;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="sp__check__visitor_8hpp.shtml" title="declarations for SPCheckVisitor type and concrete subtypes.">sp_check_visitor.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">class </span><a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>;
<a name="l00037"></a>00037 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>subpavings {
<a name="l00044"></a>00044   
<a name="l00045"></a><a class="code" href="namespacesubpavings.shtml#a7e50e3fe54ef41646fbb6155160805cc">00045</a>   <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>;
<a name="l00046"></a>00046 
<a name="l00049"></a>00049     <span class="keyword">typedef</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="namespacesubpavings.shtml#a7e50e3fe54ef41646fbb6155160805cc" title="SubPaving is an alias for a pointer to an SPnode.">SubPaving</a>;
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00076"></a><a class="code" href="classsubpavings_1_1SPnode.shtml">00076</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> {
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">//src_trunk_0701</span>
<a name="l00079"></a>00079     <span class="keyword">private</span>:
<a name="l00080"></a>00080   
<a name="l00081"></a>00081     <span class="comment">//src_trunk_0701</span>
<a name="l00084"></a>00084 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a75618e8e46f82b309f744fc12927b2a9" title="Handle exceptions in the construction of a node.">constructor_error_handler</a>(); <span class="comment">// throw()</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="keyword">protected</span>:
<a name="l00090"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832">00090</a>         ivector* <a class="code" href="classsubpavings_1_1SPnode.shtml#a2c09d2f687401550468bad6a6dae9832" title="Pointer to the interval vector the node represents.">theBox</a>;
<a name="l00091"></a>00091 
<a name="l00098"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e">00098</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ac28ce64cdc1aed5e545659699a38c16e" title="The dimensions in which we are working.">dimension</a>;
<a name="l00099"></a>00099 
<a name="l00109"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb">00109</a>         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4add69f42780515a4f817f02770e38cb" title="The label for the box.">label</a>;
<a name="l00110"></a>00110 
<a name="l00116"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8">00116</a>         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#ad39c8dad1a8fa89110da4bad250521d8" title="The node&#39;s parent.">parent</a>;
<a name="l00117"></a>00117 
<a name="l00120"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646">00120</a>         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a5c047856140d3143bec18abc584c2646" title="The node&#39;s left child.">leftChild</a>;
<a name="l00121"></a>00121 
<a name="l00124"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd">00124</a>         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a4d5e29412292750e36196b55e186b6dd" title="The node&#39;s right child.">rightChild</a>;
<a name="l00125"></a>00125 
<a name="l00128"></a><a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610">00128</a>         std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a90803dc066d955d4aec89c00879ff610" title="The name given to the node.">nodeName</a>;
<a name="l00129"></a>00129         
<a name="l00138"></a>00138         std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a44aaa22ba1f62c17775a96071c05ad8b" title="splitting according to instruction string.">splitLeft</a>(std::string instruction);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="comment">//src_trunk_0701</span>
<a name="l00145"></a>00145 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7ac37cce7f65b0f4c71d37b06d581d17" title="Reshape the tree rooted at this so that it has the shape that is the non-minimal union of the tree or...">_reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> other);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     <span class="keyword">public</span>:
<a name="l00151"></a>00151         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>();
<a name="l00152"></a>00152         
<a name="l00153"></a>00153         <span class="comment">//src_trunk_0701</span>
<a name="l00162"></a>00162 <span class="comment"></span>        <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(<span class="keyword">const</span> ivector&amp; v);
<a name="l00163"></a>00163         
<a name="l00164"></a>00164         <span class="comment">//src_trunk_0701</span>
<a name="l00176"></a>00176 <span class="comment"></span>        <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb);
<a name="l00177"></a>00177 
<a name="l00184"></a>00184         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab = 0);
<a name="l00185"></a>00185 
<a name="l00189"></a>00189         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb);
<a name="l00190"></a>00190 
<a name="l00193"></a>00193         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7a1699938bb9acff0c04b07be9d64e54" title="Default constructor.">SPnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other);
<a name="l00194"></a>00194 
<a name="l00198"></a>00198         <span class="keyword">virtual</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a87d58ed9b7f89215203195f933533aef" title="Destructor. Declare as virtual because we will use SPNode as a base class.">~SPnode</a>();
<a name="l00199"></a>00199 
<a name="l00202"></a>00202         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a6658537d790191fc8baae2b351cf9666" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; rhs);
<a name="l00203"></a>00203 
<a name="l00206"></a>00206         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a84eef536420ee82e9b6ec4eb17a0b14e" title="Recursively rename children based on this node&#39;s nodeName.">recursiveRename</a>();
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="comment">// from src_trunk_0701</span>
<a name="l00218"></a>00218 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ac3e8e3499bcb0acb42181b781d7796b3">isSplittableNode</a>() <span class="keyword">const</span>;
<a name="l00219"></a>00219 
<a name="l00222"></a>00222         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a4caf34bf9db0dc8f116797149be0cf8b" title="Accessor for the dimension of theBox of a node.">getDimension</a>() <span class="keyword">const</span>;
<a name="l00223"></a>00223 
<a name="l00228"></a>00228         ivector <a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>() <span class="keyword">const</span>;
<a name="l00229"></a>00229 
<a name="l00232"></a>00232         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#accdcd56d02a9ff69c07aea07e16e8c8e" title="Accessor for label of a node.">getLabel</a>() <span class="keyword">const</span>;
<a name="l00233"></a>00233 
<a name="l00239"></a>00239         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a9ef7989599f223a312a371d8fb8527db" title="Set the label of a childless root node.">setLabel</a>(<span class="keywordtype">int</span> lab);
<a name="l00240"></a>00240 
<a name="l00253"></a>00253         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#ad25db2635b9fa09515a3cb75f4a7ccef" title="Accessor for the parent of a node.">getParent</a>() <span class="keyword">const</span>;
<a name="l00254"></a>00254 
<a name="l00259"></a>00259         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a2ae7370c24e6c51a99c8bd29b2ffcec3" title="Accessor for the left child of a node.">getLeftChild</a>() <span class="keyword">const</span>;
<a name="l00260"></a>00260 
<a name="l00265"></a>00265         <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a9477b1cfe157f5730a5514c944953689" title="Accessor for the right child of a node.">getRightChild</a>() <span class="keyword">const</span>;
<a name="l00267"></a>00267 
<a name="l00270"></a>00270         std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() <span class="keyword">const</span>;
<a name="l00271"></a>00271 
<a name="l00274"></a>00274         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a628f03ae2795efd1135e6f4d06db987f" title="Set the node name.">setNodeName</a>(std::string newname);
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00279"></a>00279         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() <span class="keyword">const</span>;
<a name="l00280"></a>00280         
<a name="l00281"></a>00281         
<a name="l00282"></a>00282         <span class="comment">//src_trunk_0701</span>
<a name="l00287"></a>00287 <span class="comment"></span>        real <a class="code" href="classsubpavings_1_1SPnode.shtml#ad219abf12ef0e39222748004e1ff1347" title="Throws a NoBox_Error if theBox is NULL.">nodeRealVolume</a>() <span class="keyword">const</span>;
<a name="l00288"></a>00288 
<a name="l00294"></a>00294         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>() <span class="keyword">const</span>;
<a name="l00295"></a>00295 
<a name="l00298"></a>00298         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>() <span class="keyword">const</span>;
<a name="l00299"></a>00299 
<a name="l00302"></a>00302         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>() <span class="keyword">const</span>;
<a name="l00303"></a>00303 
<a name="l00306"></a>00306         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>() <span class="keyword">const</span>;
<a name="l00307"></a>00307 
<a name="l00310"></a>00310         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a079c914f2e19278844d934baad47fbfc" title="find if this node is a subleaf node.">isSubLeaf</a>() <span class="keyword">const</span>;
<a name="l00311"></a>00311         
<a name="l00312"></a>00312         <span class="comment">//src_trunk_0701</span>
<a name="l00318"></a>00318 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ad04e240d9152c1a927c2ec280aa29371" title="Get the split dimension for this.">getSplitDim</a>() <span class="keyword">const</span>;
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     <span class="comment">//src_trunk_0701</span>
<a name="l00323"></a>00323 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ad9f203ab98f3e2766ee0acafddb5ea23" title="Get number of leaf descendents of this.">getNumberLeaves</a>() <span class="keyword">const</span>;
<a name="l00324"></a>00324 
<a name="l00325"></a>00325     <span class="comment">//src_trunk_0701</span>
<a name="l00327"></a>00327 <span class="comment"></span>    <a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6" title="Define type SPnodeConstPtrs as container of pointers to const SPnodes.">SPnodeConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa19d97146cec96a5a52eba91a9633897" title="Return pointers to const nodes.">getConstSPnodeLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6" title="Define type SPnodeConstPtrs as container of pointers to const SPnodes.">SPnodeConstPtrs</a>&amp; leaves) <span class="keyword">const</span>;
<a name="l00328"></a>00328   
<a name="l00329"></a>00329 
<a name="l00339"></a>00339         <a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ad3548bf27557e71e7254e211e95f1878" title="Return a reference to all descendent leaf nodes as SPnodes.">getSPnodeLeaves</a>(<a class="code" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49" title="Define type SPnodePtrs as container of pointers to SPnodes.">SPnodePtrs</a>&amp; leaves) <span class="keyword">const</span>;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 
<a name="l00348"></a>00348         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a5fe9e24f8f5cfe76e6b4a2f5ccc1f6f5" title="Fill in a vector of leaf node volumes.">getLeafNodeVolumes</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; vols) <span class="keyword">const</span>;
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 
<a name="l00358"></a>00358         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(<a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels) <span class="keyword">const</span>;
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 
<a name="l00369"></a>00369         <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> level, <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels) <span class="keyword">const</span>;
<a name="l00370"></a>00370         
<a name="l00371"></a>00371         <span class="comment">//src_trunk_0701</span>
<a name="l00380"></a>00380 <span class="comment"></span>        <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a2e0b22fea0d547f34660cd9870b34ae7" title="Fill in a vector of leaf node levels.">getLeafNodeLevelsJ</a>(<a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a>&amp; levels, <span class="keywordtype">int</span> level = 0) <span class="keyword">const</span>;
<a name="l00381"></a>00381         
<a name="l00382"></a>00382 
<a name="l00389"></a>00389         std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">getLeafNodeLevelsString</a>() <span class="keyword">const</span>;
<a name="l00390"></a>00390 
<a name="l00395"></a>00395         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a07ebbebeb298c88963207afea4be3a81" title="Get the node depth.">getNodeDepth</a>() <span class="keyword">const</span>;
<a name="l00396"></a>00396 
<a name="l00397"></a>00397 
<a name="l00403"></a>00403         <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a55f98392efb2d28542610a65a6b00864" title="Get depth of the tree descended from this node.">getDepth</a>() <span class="keyword">const</span>;
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 
<a name="l00410"></a>00410         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a91d46ee80958c0bed9fe972cf3cdea2d" title="Get the volume of the leaf with the smallest volume.">getSmallestLeafVol</a>() <span class="keyword">const</span>;
<a name="l00411"></a>00411 
<a name="l00416"></a>00416         <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a1c60de6474783d65d1603eae6ab9a9ae" title="Get the volume of the leaf with the largest volume.">getLargestLeafVol</a>() <span class="keyword">const</span>;
<a name="l00417"></a>00417 
<a name="l00418"></a>00418 <span class="comment">//src_trunk_0701</span>
<a name="l00428"></a>00428 <span class="comment"></span>        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#afde5e15be5259cf61821f175452d165f" title="Check tree rooted at this is legal with respect to isSplittableNode().">checkTreeStateLegal</a>() <span class="keyword">const</span>;
<a name="l00429"></a>00429 
<a name="l00432"></a>00432         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>() <span class="keyword">const</span>;
<a name="l00433"></a>00433 
<a name="l00438"></a>00438         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa075a030c63ffaf0accddc5161852da3" title="Accept a visitor of the type SPnodeVisitor.">accept</a>(<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>&amp; visitor);
<a name="l00439"></a>00439         
<a name="l00440"></a>00440         <span class="comment">//gat41</span>
<a name="l00444"></a>00444 <span class="comment"></span>      <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a2cedd2483f8546bb24e8990f7312f591" title="Get the range collection of the vistitor of the type SPnodeVisitor.">collectRange</a>(<a class="code" href="classsubpavings_1_1SPnodeVisitor.shtml">SPnodeVisitor</a>&amp; visitor);
<a name="l00445"></a>00445 
<a name="l00446"></a>00446       <span class="comment">//src_trunk_0701</span>
<a name="l00451"></a>00451 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a53cc083de0b60fc7e8b163cffd7428fe" title="Accept an SPCheckVisitor.">acceptSPCheckVisitor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPCheckVisitor.shtml">SPCheckVisitor</a>&amp; visitor) <span class="keyword">const</span>;
<a name="l00452"></a>00452 
<a name="l00453"></a>00453 
<a name="l00459"></a>00459         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#aaf14185437d50e955c5ea938dc6e7559" title="Output details of a specific node in a tree.">nodePrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00460"></a>00460 
<a name="l00475"></a>00475         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a0f2381175b37224a185eedbe9601d814" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00476"></a>00476 
<a name="l00484"></a>00484     <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00485"></a>00485     <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(std::ostream &amp;os, 
<a name="l00486"></a>00486                         <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00488"></a>00488         
<a name="l00496"></a>00496         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(std::ostream &amp;os,
<a name="l00497"></a>00497                         <span class="keywordtype">int</span> level) <span class="keyword">const</span>;
<a name="l00498"></a>00498     <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#ab75be88517039e1b426333dbc3764f10">nodesAllOutput</a>(std::ostream &amp;os,
<a name="l00499"></a>00499                                     <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00501"></a>00501 
<a name="l00511"></a>00511         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96" title="Make a .dot graph file from an SPnode tree structure.">outputGraphDot</a>() <span class="keyword">const</span>;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 <span class="comment">//src_trunk_0701</span>
<a name="l00544"></a>00544 <span class="comment"></span>        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aaefe6100d8c62dc84849cd2adb733ffb" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l00545"></a>00545                         <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd = <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>) <span class="keyword">const</span>;
<a name="l00546"></a>00546 
<a name="l00547"></a>00547 
<a name="l00555"></a>00555         <span class="keyword">virtual</span> <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3" title="Check if ivector z is contained in this or children.">spContains</a>(<span class="keyword">const</span> ivector&amp; z) <span class="keyword">const</span>;
<a name="l00556"></a>00556 
<a name="l00565"></a>00565         <span class="keyword">virtual</span> <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> <a class="code" href="classsubpavings_1_1SPnode.shtml#aa90c047beb6a8b6a4beb74342ad593a3" title="Check if ivector z is contained in this or children.">spContains</a>(<span class="keyword">const</span> rvector&amp; p) <span class="keyword">const</span>;
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 
<a name="l00575"></a>00575         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">nodeExpand</a>(<span class="keywordtype">int</span> comp);
<a name="l00576"></a>00576 
<a name="l00583"></a>00583         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">nodeExpand</a>();
<a name="l00584"></a>00584         
<a name="l00589"></a>00589         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a0540c55967e7f35843fac029b450ab55" title="Expand a leaf node to have two children and pass data down to the children with no further splitting...">nodeExpand</a>(<span class="keywordtype">bool</span> boolVal);
<a name="l00590"></a>00590                 
<a name="l00595"></a>00595         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l00596"></a>00596 
<a name="l00615"></a>00615         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a56e03a33b576732f09a12d8b25c48acc" title="Tries to reunite nodes.">nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* rChild);
<a name="l00616"></a>00616 
<a name="l00622"></a>00622         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a7124dae3fa53ae2d0061deebe9787d7f" title="Builds a tree downwards.">nodeAddLeft</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild);
<a name="l00623"></a>00623 
<a name="l00628"></a>00628         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#ab826f2bf3a9c492c61ca260c16d99c26" title="Builds a tree downwards.">nodeAddRight</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *rChild);
<a name="l00629"></a>00629 
<a name="l00635"></a>00635         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a42b4b4686ea981149fd7b25a9d720c16" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *lChild);
<a name="l00636"></a>00636 
<a name="l00642"></a>00642         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a43d542d7c5227d52dfb7b5de97d2b676" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> *rChild);
<a name="l00643"></a>00643 
<a name="l00650"></a>00650         std::string <a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>() <span class="keyword">const</span>;
<a name="l00651"></a>00651         
<a name="l00652"></a>00652         <span class="comment">//src_trunk_0701</span>
<a name="l00669"></a>00669 <span class="comment"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a1113235b4bedd4a2849cc8e6dae719dc" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; other);
<a name="l00670"></a>00670         
<a name="l00697"></a>00697         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea" title="Split a root paving to a specified shape.">splitRootToShape</a>(std::string instruction);
<a name="l00698"></a>00698 
<a name="l00699"></a>00699 
<a name="l00711"></a>00711         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a2f68ecee896eb24708a4a3045ddc38b4">vecLeafBoxOuterJacket</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l00712"></a>00712                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00713"></a>00713 
<a name="l00725"></a>00725         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#ad7fd31c8579c501476dcc7004e52c1d6">spLeafBoxOuterJacket</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00726"></a>00726                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00727"></a>00727 
<a name="l00728"></a>00728 
<a name="l00737"></a>00737         <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a57f1a92689c116edcf2bf6a62497970f">volOuterJacket</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00738"></a>00738                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00739"></a>00739 
<a name="l00752"></a>00752         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#afb2b268ccd3ddfa61cdcadb866933351">vecLeafBoxIntersection</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l00753"></a>00753                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00754"></a>00754 
<a name="l00765"></a>00765         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#abe8c17244a31a4003e59f48a56e61ac4">spLeafBoxIntersection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00766"></a>00766                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00767"></a>00767 
<a name="l00768"></a>00768 
<a name="l00778"></a>00778         <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#aff141c8fe2b44b5da47319563f335fd3">volIntersection</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00779"></a>00779                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00780"></a>00780 
<a name="l00781"></a>00781 
<a name="l00794"></a>00794         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a8df2c2330b8da545a013d87cf1619e2b">vecLeafBoxDifference</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l00795"></a>00795                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00796"></a>00796 
<a name="l00808"></a>00808         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; <a class="code" href="classsubpavings_1_1SPnode.shtml#a10a7bea8a44da192fe174d1d04284d3b">vecBoxNodeDifference</a>(<a class="code" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623" title="Define type BoxVec as a container of boxes.">BoxVec</a>&amp; boxes,
<a name="l00809"></a>00809                         ivector box1, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00810"></a>00810 
<a name="l00822"></a>00822         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a5de03ca047d5250c8b2f42f8b29f2a3e">spLeafBoxDifference</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00823"></a>00823                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00824"></a>00824 
<a name="l00825"></a>00825 
<a name="l00835"></a>00835         <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a474c6fe9f99ba63eb6eff5c0577cc63a">volDifference</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn1,
<a name="l00836"></a>00836                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * <span class="keyword">const</span> spn2);
<a name="l00837"></a>00837 
<a name="l00838"></a>00838 
<a name="l00857"></a>00857         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a28c48af012e0a5b96236dcf12ffbae93" title="Forms a minimal SPnode subpaving from leaf boxes.">makeTreeFromLeaves</a>(ivector&amp; root, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; leafList);
<a name="l00858"></a>00858 
<a name="l00885"></a>00885         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#a4e11f6bd7a176b33a25f3700751c4a08" title="Forms a minimal SPnode subpaving from voxel boxes.">makeTreeFromVoxels</a>(ivector&amp; root, <a class="code" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d" title="Define type ImageList as a container for images of boxes.">ImageList</a>&amp; leafList,
<a name="l00886"></a>00886                         <span class="keywordtype">double</span> spacing, <span class="keywordtype">size_t</span> dim);
<a name="l00887"></a>00887 
<a name="l00897"></a>00897         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>* <a class="code" href="classsubpavings_1_1SPnode.shtml#aa42de2dd7951c3fa60ab9e95ebf0c4aa" title="Make a subpaving from vtk file data.">vtkPaving</a>(<span class="keyword">const</span> std::string filename);
<a name="l00898"></a>00898         
<a name="l00899"></a>00899         <span class="comment">//src_trunk_0701</span>
<a name="l00908"></a>00908 <span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPnode.shtml#a08eac7d3d3f57b9d6e56a84f14e9f4fb" title="Swap this and another node.">swap</a> (<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a>&amp; spn); <span class="comment">//throw()</span>
<a name="l00909"></a>00909 
<a name="l00910"></a>00910 
<a name="l00911"></a>00911 
<a name="l00912"></a>00912     };
<a name="l00913"></a>00913     <span class="comment">// end of SPnode class</span>
<a name="l00914"></a>00914 
<a name="l00917"></a><a class="code" href="classsubpavings_1_1SPnodeException.shtml">00917</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a> : <span class="keyword">public</span> std::exception
<a name="l00918"></a>00918     {
<a name="l00919"></a><a class="code" href="classsubpavings_1_1SPnodeException.shtml#ad6356fcb207cb052e9c897f317a64547">00919</a>        std::string <a class="code" href="classsubpavings_1_1SPnodeException.shtml#ad6356fcb207cb052e9c897f317a64547">s</a>;
<a name="l00920"></a>00920        <span class="keyword">public</span>:
<a name="l00921"></a>00921        <a class="code" href="classsubpavings_1_1SPnodeException.shtml#ac288fa89893d06644668fbe38507c6f3">SPnodeException</a>(std::string ss);
<a name="l00922"></a>00922        <a class="code" href="classsubpavings_1_1SPnodeException.shtml#a5a8534c71a39a06ad55f90398d029959">~SPnodeException</a> () throw ();
<a name="l00923"></a>00923        virtual const <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>() const throw();
<a name="l00924"></a>00924     };
<a name="l00925"></a>00925 
<a name="l00926"></a>00926 
<a name="l00927"></a>00927 
<a name="l00932"></a>00932     std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00933"></a>00933 
<a name="l00937"></a>00937     <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00938"></a>00938 
<a name="l00944"></a>00944     <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a6ce5e0d7ef8daa51a49872efc2ef56d8" title="Check if a node is a leaf.">isLeaf</a>(const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00945"></a>00945 
<a name="l00946"></a>00946 
<a name="l00951"></a>00951     <span class="keywordtype">double</span> <a class="code" href="namespacesubpavings.shtml#a8bfd50d3105ff4944ae6e42e0138ffb6" title="Get the volume of the subpaving represented by spn.">spVolume</a>(const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00952"></a>00952 
<a name="l00957"></a>00957     <span class="keywordtype">size_t</span> <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00958"></a>00958    
<a name="l00959"></a>00959 
<a name="l00968"></a>00968     <a class="code" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6" title="Define type &quot;Interval Booleans&quot;.">BOOL_INTERVAL</a> operator&lt;=(const ivector&amp; z, const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00969"></a>00969    
<a name="l00970"></a>00970    <span class="comment">//gloria&#39;s additions//</span>
<a name="l00975"></a>00975 <span class="comment"></span>    <span class="keywordtype">size_t</span> <a class="code" href="namespacesubpavings.shtml#aa737c3b183c306abbef9b3d515f632fb" title="Get the number of leaves of a tree (boxes in the subpaving)">spTotalNodes</a>(const <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">SPnode</a> * const spn);
<a name="l00976"></a>00976    <span class="comment">//end of gloria&#39;s additions</span>
<a name="l00977"></a>00977 
<a name="l00978"></a>00978 
<a name="l00979"></a>00979 } <span class="comment">// end namespace subpavings</span>
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 <span class="comment">//src_trunk_0701</span>
<a name="l00983"></a>00983 <span class="comment"></span>namespace std
<a name="l00984"></a>00984 {
<a name="l00985"></a>00985   <span class="keyword">template</span> &lt;&gt;
<a name="l00986"></a>00986   <span class="keywordtype">void</span> swap(<a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">subpavings::SPnode</a> &amp; s1, 
<a name="l00987"></a>00987       <a class="code" href="classsubpavings_1_1SPnode.shtml" title="SPnodes are nodes in the representation of a subpaving as a binary tree.">subpavings::SPnode</a> &amp; s2); <span class="comment">// throw ()</span>
<a name="l00988"></a>00988   
<a name="l00989"></a>00989 }
<a name="l00990"></a>00990 
<a name="l00991"></a>00991 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spnode_8hpp.shtml">spnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
