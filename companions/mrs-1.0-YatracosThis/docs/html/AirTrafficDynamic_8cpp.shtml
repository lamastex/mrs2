<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AirTrafficDynamic.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AirTrafficDynamic_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">AirTrafficDynamic.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
</div>
<p><a href="AirTrafficDynamic_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="AirTrafficDynamic_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition in file <a class="el" href="AirTrafficDynamic_8cpp_source.shtml">AirTrafficDynamic.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="AirTrafficDynamic.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="AirTrafficDynamic_8cpp_source.shtml#l00043">43</a> of file <a class="el" href="AirTrafficDynamic_8cpp_source.shtml">AirTrafficDynamic.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l00466">subpavings::AdaptiveHistogramVCollator::addToCollationWithVal()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="adaptivehistogramvalidation_8cpp_source.shtml#l00543">subpavings::AdaptiveHistogramValidation::getSubPaving()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l01377">subpavings::AdaptiveHistogramVCollator::getTotalNodes()</a>, <a class="el" href="adaptivehistogramvalidation_8hpp_source.shtml#l00409">subpavings::AdaptiveHistogramValidation::insertRvectorsFromTxt()</a>, <a class="el" href="adaptivehistogramvcollator_8cpp_source.shtml#l01338">subpavings::AdaptiveHistogramVCollator::makeMinimal()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//get individual trajectories and add into collator </span>
  <span class="keywordtype">size_t</span> starttime = atoi(argv[2]);
  <span class="keywordtype">size_t</span> totalTimeBlock = atoi(argv[3]);
  <span class="keywordtype">size_t</span> totalFlight = atoi(argv[4]);
  
  <span class="comment">//------------------------string formatting-------------------------------- </span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);
    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    
   <span class="comment">//-------------- make an Adaptive Histogram object with a specified box----  </span>
   
   <span class="keywordtype">int</span> d = atoi(argv[5]); <span class="comment">// dimension of the sample data</span>
    ivector pavingBox(d);
    
    <span class="comment">/*</span>
<span class="comment">   interval pavingInterval1(70, 750); //lat</span>
<span class="comment">    interval pavingInterval2(50, 640); //long</span>
<span class="comment">    pavingBox[1] = pavingInterval1;</span>
<span class="comment">    pavingBox[2] = pavingInterval2;</span>
<span class="comment">    </span>
<span class="comment">   if (d==3) {</span>
<span class="comment">    interval pavingInterval3(300,47000); //alt</span>
<span class="comment">    pavingBox[3] = pavingInterval3;</span>
<span class="comment">    }</span>
<span class="comment">   */</span>
   
   
   interval pavingInterval1(550, 1350);
   interval pavingInterval2(810, 1230);
    pavingBox[1] = pavingInterval1;
    pavingBox[2] = pavingInterval2;
   
    
    <span class="comment">// /*</span>
   interval pavingInterval(0,1);
   pavingBox[1] = pavingInterval;
   <span class="comment">//*/</span>
  
   cout &lt;&lt; <span class="stringliteral">&quot;Box is: &quot;</span> &lt;&lt; pavingBox &lt;&lt; endl;
   
   <span class="comment">//------------------get minimum volume--------------------------------------</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> hist(pavingBox);
   <span class="comment">//0.1</span>
   <span class="keywordtype">double</span> craftVol = atof(argv[1]); <span class="comment">//note this can be put into the for loop if we know each individual craft size</span>
   cout &lt;&lt; <span class="stringliteral">&quot;getRootBoxVol&quot;</span> &lt;&lt; endl;
   <span class="keywordtype">double</span> rootBoxVol = hist.getSubPaving()-&gt;nodeVolume();
   <span class="keywordtype">double</span> approxDepth = floor(log(rootBoxVol/craftVol)/log(2));
   <span class="keywordtype">double</span> approxMinVol = rootBoxVol/<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(2,approxDepth);
   cout &lt;&lt; <span class="stringliteral">&quot;craftVol: &quot;</span> &lt;&lt; craftVol &lt;&lt; <span class="stringliteral">&quot;\tapproxMinVol: &quot;</span> &lt;&lt; approxMinVol &lt;&lt; endl; 
 
   <span class="comment">//split on k and volume to get tightest possible enclosure</span>
   <a class="code" href="classsubpavings_1_1SplitOnKandVol.shtml" title="Class for splitting based on node volume and number of points in a node (specific to the air traffic ...">SplitOnKandVol</a> splitVolCount(approxMinVol);
  
  <span class="comment">//vector to store total number of nodes at each spaceColl</span>
  vector&lt;size_t&gt; numAgg;
  vector&lt;double&gt; timings;
  <span class="comment">//create totalTimeBlock collator objects</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> currColl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> updColl;
    
  <span class="comment">//create AdaptiveHistogramValidation objects</span>
   vector&lt;AdaptiveHistogramValidation&gt; histVec; 
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; totalFlight; i++) {
    cout &lt;&lt; i &lt;&lt; endl;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
    histVec.push_back(myHist);
  }
  
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> t=starttime; t &lt; totalTimeBlock; t++) {
    clock_t start, end;
    
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> spaceColl;
    std::ostringstream stm2;
    stm2 &lt;&lt; t;

    start = clock();
    <span class="keywordtype">int</span> checkHist = 0;
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= totalFlight; j++) {
      <span class="comment">//name of file to be read in</span>
      std::ostringstream stm1;
      stm1 &lt;&lt; j;
      <span class="keywordtype">string</span> inputFileName = <span class="stringliteral">&quot;Time&quot;</span>; 
      inputFileName += stm2.str();
      inputFileName += <span class="stringliteral">&quot;Flight&quot;</span>;
      inputFileName += stm1.str();
      inputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
      
    <span class="comment">/*  if (d==2) { inputFileName += &quot;xy.txt&quot;; }</span>
<span class="comment">       else if (d==3) { inputFileName += &quot;xyAlt.txt&quot;; }</span>
<span class="comment">        */</span>

      <span class="comment">// tell user which data is being used.</span>
      cout &lt;&lt; <span class="stringliteral">&quot;--------------------------------------------&quot;</span> &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;j = &quot;</span> &lt;&lt; j &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;Processing file &quot;</span> &lt;&lt; inputFileName &lt;&lt; endl;
      <span class="comment">// get a count of lines in the txt file</span>
      <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(inputFileName);
      <span class="comment">// tell user how many lines there are in the file</span>
      cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; inputFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
          &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
      myHist = histVec[j-1];
      
      cout &lt;&lt; <span class="stringliteral">&quot;inserting and constructing histogram:&quot;</span> &lt;&lt; endl;
      vector&lt;size_t&gt; numNodes;
      successfulInsertion = myHist.insertRvectorsFromTxt(inputFileName, 
                    numNodes, splitVolCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);

      <span class="comment">/* optional</span>
<span class="comment">      string histFileName;</span>
<span class="comment">      histFileName = &quot;HistTime&quot;;</span>
<span class="comment">      histFileName += stm2.str();</span>
<span class="comment">      //histFileName += &quot;Flight&quot;;</span>
<span class="comment">      //histFileName += stm1.str();</span>
<span class="comment">      histFileName += &quot;.txt&quot;;</span>
<span class="comment">      myHist.outputToTxtTabs(histFileName);</span>
<span class="comment">       */</span>

      <span class="keywordflow">if</span> (successfulInsertion) {
        histVec[j-1] = myHist;

        <span class="keywordtype">size_t</span> aggBox = 0;
        cout &lt;&lt; <span class="stringliteral">&quot;adding myHist into collator&quot;</span> &lt;&lt; endl;
        updColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a5db65fac4ff8b3de933909f6d83f8e02" title="Add an AdaptiveHistogramVal object to the collation.">addToCollationWithVal</a>(myHist, 2, aggBox);
      } <span class="comment">// end of successful insertion</span>
      <span class="keywordflow">else</span> { 
        checkHist++; 
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> newHist(pavingBox);
        histVec[j-1] = newHist;
      }
    } <span class="comment">// end of flights</span>

    <span class="comment">/* optional</span>
<span class="comment">    string collFileName = &quot;updColl&quot;;</span>
<span class="comment">    collFileName += stm2.str();</span>
<span class="comment">    collFileName += &quot;.txt&quot;;</span>
<span class="comment">    updColl.outputAccumulationToTxtTabs(collFileName);</span>
<span class="comment">    */</span>

    <span class="keywordflow">if</span> (t==starttime) { 
      <span class="keywordflow">if</span> ( (checkHist &lt; totalFlight) ){
        cout &lt;&lt; <span class="stringliteral">&quot;get space coll at time &quot;</span> &lt;&lt; t &lt;&lt; endl;
        currColl = updColl; 
        currColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">makeMinimal</a>();
        <span class="comment">//string currCollFileName;</span>
        <span class="comment">//currCollFileName = &quot;spaceColl&quot;;</span>
        <span class="comment">//currCollFileName += stm2.str();</span>
        <span class="comment">//currCollFileName += &quot;.txt&quot;;</span>
        <span class="comment">//currColl.outputAccumulationToTxtTabs(currCollFileName);</span>
        <span class="comment">//string spaceCollFileName;</span>
        <span class="comment">//spaceCollFileName = &quot;spaceColl&quot;;</span>
        <span class="comment">//spaceCollFileName += stm2.str();</span>
        <span class="comment">//spaceCollFileName += &quot;.txt&quot;;</span>
        <span class="comment">//currColl.outputAccumulationToTxtTabs(spaceCollFileName);</span>
        numAgg.push_back(currColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">getTotalNodes</a>());
      }
      <span class="keywordflow">else</span> { starttime++; }
    }
    
    <span class="keywordflow">else</span> { <span class="comment">// ( t &gt; starttime) </span>
      cout &lt;&lt; <span class="stringliteral">&quot;get space coll at time &quot;</span> &lt;&lt; t &lt;&lt; endl;
      cout &lt;&lt; <span class="stringliteral">&quot;getDifference&quot;</span> &lt;&lt; endl;
      spaceColl = updColl - currColl;
      <span class="comment">//string diffCollFileName;</span>
      <span class="comment">//diffCollFileName = &quot;diffColl&quot;;</span>
      <span class="comment">//diffCollFileName += stm2.str();</span>
      <span class="comment">//diffCollFileName += &quot;.txt&quot;;</span>
      <span class="comment">//spaceColl.outputToTxtTabs(&quot;diffCollInd.txt&quot;);</span>
      <span class="comment">//spaceColl.outputAccumulationToTxtTabs(diffCollFileName);</span>
            
      cout &lt;&lt; <span class="stringliteral">&quot;Make Minimal:&quot;</span> &lt;&lt; endl;
      spaceColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ab9c2ad2ebbf0f50de0e06f92f222f0a7">makeMinimal</a>(); <span class="comment">// this collator is the structure we want</span>
      numAgg.push_back(spaceColl.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a49437661609894461106a99c37ddeed5">getTotalNodes</a>());
      <span class="comment">//output this collator</span>
      <span class="comment">//string spaceCollFileName;</span>
      <span class="comment">//spaceCollFileName = &quot;spaceColl&quot;;</span>
      <span class="comment">//spaceCollFileName += stm2.str();</span>
      <span class="comment">//spaceCollFileName += &quot;.txt&quot;;</span>
      <span class="comment">//spaceColl.outputAccumulationToTxtTabs(spaceCollFileName);</span>
            
      <span class="comment">//only want the summary of the last column</span>
      <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> minimalColl(spaceColl, 2);
      currColl = minimalColl;
      <span class="comment">//string currCollFileName;</span>
      <span class="comment">//currCollFileName = &quot;currColl&quot;;</span>
      <span class="comment">//currCollFileName += stm2.str();</span>
      <span class="comment">//currCollFileName += &quot;.txt&quot;;</span>
      <span class="comment">//currColl.outputAccumulationToTxtTabs(currCollFileName);</span>
      updColl = minimalColl;
    }
    end = clock();
    <span class="keywordtype">double</span> timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
    timings.push_back(timing);  
    cout &lt;&lt; <span class="stringliteral">&quot;**************time &quot;</span> &lt;&lt; t &lt;&lt; <span class="stringliteral">&quot; done****************&quot;</span> &lt;&lt; endl;
  } <span class="comment">// end of time</span>


    vector&lt;size_t&gt;::iterator vecIt;
      <span class="keywordtype">string</span> fileNameCount = <span class="stringliteral">&quot;NumAgg.txt&quot;</span>;
    ofstream os1;
      os1.open(fileNameCount.c_str());
      <span class="keywordflow">for</span> (vecIt = numAgg.begin(); vecIt &lt; numAgg.end(); vecIt++) {
         os1 &lt;&lt; *vecIt &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
      }
      os1 &lt;&lt; flush;
      os1.close();
    
    vector&lt;double&gt;::iterator It;
      fileNameCount = <span class="stringliteral">&quot;TimesDynamic.txt&quot;</span>;
      os1.open(fileNameCount.c_str());
  os1 &lt;&lt; starttime &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
      <span class="keywordflow">for</span> (It = timings.begin(); It &lt; timings.end(); It++) {
         os1 &lt;&lt; *It &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
      }
      os1 &lt;&lt; flush;
      os1.close();

  <span class="keywordflow">return</span> 0;
} <span class="comment">// end of air traffic example program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AirTrafficDynamic_8cpp.shtml">AirTrafficDynamic.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
