<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FPhyloPOT.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FPhyloPOT_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FPhyloPOT.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FPhyloPOT_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment"> *</span>
<a name="l00005"></a>00005 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment"> *</span>
<a name="l00007"></a>00007 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment"> * your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment"> *</span>
<a name="l00012"></a>00012 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment"> * General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment"> *</span>
<a name="l00017"></a>00017 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> */</span>
<a name="l00021"></a>00021 
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="FPhyloPOT_8hpp.shtml" title="Declarations for example function class FPhyloPOT (Phylogenetic tree by post order traversal)...">FPhyloPOT.hpp</a>&quot;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">// Constructor</span>
<a name="l00030"></a><a class="code" href="classFPhyloPOT.shtml#a4e454a840e146021548eb181cb4a0c46">00030</a> <a class="code" href="classFPhyloPOT.shtml#a4e454a840e146021548eb181cb4a0c46" title="Constructor.">FPhyloPOT::FPhyloPOT</a>(<span class="keywordtype">int</span> ts, interval Domain, <span class="keywordtype">bool</span> LogPi, <span class="keywordtype">int</span> Prior):
<a name="l00031"></a>00031 tree_space(ts), n_interval_calls (0), n_real_calls(0)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033   <span class="comment">// an Fobj function, sets the Fobj member UsingLogDensity</span>
<a name="l00034"></a>00034   <a class="code" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5" title="set the target scale to natural logarithm">setUsingLogDensity</a> (LogPi);
<a name="l00035"></a>00035   <a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> = Prior;<span class="comment">// PriorType is an inherited member from Fobj</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="comment">// file names for the tree and the sequences files</span>
<a name="l00038"></a>00038   <span class="keywordtype">string</span> treeFileName;
<a name="l00039"></a>00039   <span class="keywordtype">string</span> seqFileName;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041   <span class="keywordflow">switch</span> (<a class="code" href="classFPhyloPOT.shtml#a84a8fb3afb2b975331062752d414723a" title="The model space or number of taxa.">tree_space</a>)
<a name="l00042"></a>00042   {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044     <span class="comment">// use just one treefile with multiple lines, one line for each topology</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046     <span class="comment">/* need to refer to tree sequence file with full path</span>
<a name="l00047"></a>00047 <span class="comment">     * from mrs/trunk/examples so that it works with Gopt examples</span>
<a name="l00048"></a>00048 <span class="comment">     */</span>
<a name="l00049"></a>00049 
<a name="l00050"></a>00050     <span class="keywordflow">case</span> 2:         <span class="comment">// 2 taxa tree</span>
<a name="l00051"></a>00051                     <span class="comment">// Human-Neandertal data in Sainudiin and York, AMB, 2009</span>
<a name="l00052"></a>00052                     <span class="comment">// Illustrates identifibality of the sum of two branches</span>
<a name="l00053"></a>00053                     <span class="comment">// Similar to the 2 taxa example in Sainudiin, Ph.D., 2005,</span>
<a name="l00054"></a>00054                     <span class="comment">// and that in Sainudiin and Yoshida, 2005</span>
<a name="l00055"></a>00055       <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24acff34dde110707699080ef23caaabf95">TwoTaxaTop</a>;
<a name="l00056"></a>00056       <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a3834f2c28027281be1d9fa2644e1bc31">TwoTaxaDim</a>;
<a name="l00057"></a>00057       treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree2&quot;</span>;
<a name="l00058"></a>00058       seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq2&quot;</span>;
<a name="l00059"></a>00059       <span class="keywordflow">break</span>;
<a name="l00060"></a>00060       <span class="comment">/*</span>
<a name="l00061"></a>00061 <span class="comment">      // another GOpt example with minimal sufficient sequence patterns</span>
<a name="l00062"></a>00062 <span class="comment">      // Human-Neandertal-Chimp Example Sainudiin and York, AMB, 2009</span>
<a name="l00063"></a>00063 <span class="comment">    case 3:         // 3 taxa tree (This is truly unrooted Tree as </span>
<a name="l00064"></a>00064 <span class="comment">                    // opposed to the constrained unrooted tree in</span>
<a name="l00065"></a>00065 <span class="comment">                    // Sainudiin and York, AMB, 2009.)</span>
<a name="l00066"></a>00066 <span class="comment">      topologies = ThreeTaxaTop;</span>
<a name="l00067"></a>00067 <span class="comment">      n_dimensions = ThreeTaxaDim;</span>
<a name="l00068"></a>00068 <span class="comment">      treeFileName = &quot;../../targets/TreesSeqns/testtree3&quot;;</span>
<a name="l00069"></a>00069 <span class="comment">      seqFileName = &quot;../../targets/TreesSeqns/testseq3&quot;;</span>
<a name="l00070"></a>00070 <span class="comment">      break;</span>
<a name="l00071"></a>00071 <span class="comment">      */</span>
<a name="l00072"></a>00072     <span class="keywordflow">case</span> 3: <span class="comment">// 3 taxa tree Brown et al, 1982 example</span>
<a name="l00073"></a>00073             <span class="comment">// Used in Yang 2000, Sainudiin, Ph.D., 2005, </span>
<a name="l00074"></a>00074             <span class="comment">// Sainudiin and Yoshida, 2005,</span>
<a name="l00075"></a>00075             <span class="comment">// Sainudiin and York, AMB, 2009</span>
<a name="l00076"></a>00076       <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24aecb40e300dc7b334d1e553e9f5ef029f">ThreeTaxaTop</a>;
<a name="l00077"></a>00077       <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a37c5e4e34fbb63dde0bf8139fd5ebb1e">ThreeTaxaDim</a>;
<a name="l00078"></a>00078       treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree3&quot;</span>;
<a name="l00079"></a>00079       seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq3Brown&quot;</span>; 
<a name="l00080"></a>00080       <span class="keywordflow">break</span>;
<a name="l00081"></a>00081       
<a name="l00082"></a>00082     <span class="keywordflow">case</span> 4:         <span class="comment">// 4 taxa tree</span>
<a name="l00083"></a>00083       <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24a414a29fd7f08137ceac0820da0431afe">FourTaxaTop</a>;
<a name="l00084"></a>00084       <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8a2eac51ac06777dcfec7cdb6185cfee60">FourTaxaDim</a>;
<a name="l00085"></a>00085       treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree4&quot;</span>;
<a name="l00086"></a>00086       seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq4&quot;</span>;
<a name="l00087"></a>00087       <span class="keywordflow">break</span>;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="keywordflow">case</span> 5:         <span class="comment">// 5 taxa tree -- way too long in this implementation</span>
<a name="l00090"></a>00090       <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> = <a class="code" href="classFPhyloPOT.shtml#a41644607ab4dda406006b7899c60eb24ae0b78a85ed15c5205a7afe0e3737a768">FiveTaxaTop</a>;
<a name="l00091"></a>00091       <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> = <a class="code" href="classFPhyloPOT.shtml#a83a3e9f1c4025fc20c102ed2b819f9b8aa0ac7e30da8e23825246d366dec5c401">FiveTaxaDim</a>;
<a name="l00092"></a>00092       treeFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testtree5&quot;</span>;
<a name="l00093"></a>00093       seqFileName = <span class="stringliteral">&quot;../../targets/TreesSeqns/testseq5&quot;</span>;
<a name="l00094"></a>00094       <span class="keywordflow">break</span>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="keywordflow">default</span>:
<a name="l00097"></a>00097 
<a name="l00098"></a>00098       std::cerr&lt;&lt; <span class="stringliteral">&quot;Does NOT contain 2, 3, 4 or 5 taxa&quot;</span>;
<a name="l00099"></a>00099       exit(1);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   }                 <span class="comment">// end switch</span>
<a name="l00102"></a>00102 
<a name="l00103"></a>00103   <span class="comment">// for each topology</span>
<a name="l00104"></a>00104   <span class="comment">// set up a labelled box of n_dimensions and put into the LabDomainList</span>
<a name="l00105"></a>00105   <span class="comment">// LabDomainList is an inherited member from Fobj</span>
<a name="l00106"></a>00106   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j &lt; <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>; j++)
<a name="l00107"></a>00107   {
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> Ldomain;
<a name="l00110"></a>00110     ivector domain (1, <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a>);
<a name="l00111"></a>00111     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a>; i++)
<a name="l00112"></a>00112     {
<a name="l00113"></a>00113       domain[i] = Domain;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     Ldomain.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a> = j;
<a name="l00117"></a>00117     Ldomain.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a> = domain;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.push_back(Ldomain);
<a name="l00120"></a>00120   }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="comment">// number of nodes is number of dimensions + 1;</span>
<a name="l00123"></a>00123   <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a> = <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> + 1;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="comment">//reads in the sequence file and initializes SeqData</span>
<a name="l00126"></a>00126   <a class="code" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c" title="Reads sequences from a txt file.">ReadSequence</a>(seqFileName);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128   <span class="comment">//finds patterns and initializes them in SeqData.Baseseq</span>
<a name="l00129"></a>00129   <a class="code" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216" title="Finds patterns in sequences read in and fills in datamembers in SeqData struct.">FindPattern</a>();
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <a class="code" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78" title="Print the summmary of results of ReadSequence() and FindPattern()">PrintSequence</a>();
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="comment">// read the tree file, which should have one line for each topology</span>
<a name="l00134"></a>00134   <span class="comment">// and tries to make a tree from each line</span>
<a name="l00135"></a>00135   <span class="comment">// trees made are pushed back into treeRoots</span>
<a name="l00136"></a>00136   <a class="code" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43" title="Makes trees from a tree file.">ReadTrees</a>(treeFileName);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="comment">// print out the trees, one for each topology</span>
<a name="l00139"></a>00139   <a class="code" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c" title="Prints all the trees to console output.">PrintTopologyTrees</a>();
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 }                   <span class="comment">// end constructor</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 <span class="comment">// Destructor</span>
<a name="l00144"></a><a class="code" href="classFPhyloPOT.shtml#afe2d7cca8b4c06e2c3e7c7dcc94e9826">00144</a> <a class="code" href="classFPhyloPOT.shtml#afe2d7cca8b4c06e2c3e7c7dcc94e9826" title="Destructor.">FPhyloPOT::~FPhyloPOT</a>()
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146   <a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858" title="Destroys the trees (dynamic memory), used by destructor.">destroyRoots</a>();   <span class="comment">// makes sure the newed tree roots are destroyed</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 }                   <span class="comment">// end destructor</span>
<a name="l00149"></a>00149 
<a name="l00150"></a><a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858">00150</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858" title="Destroys the trees (dynamic memory), used by destructor.">FPhyloPOT::destroyRoots</a>()<span class="keyword"> const</span>
<a name="l00151"></a>00151 <span class="keyword"></span>{
<a name="l00152"></a>00152   <span class="comment">// call DeleteObject to delete all the newed tree roots</span>
<a name="l00153"></a>00153   for_each(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.begin(), <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.end(), <a class="code" href="structDeleteObject.shtml" title="A struct to make a templatised function to delete objects pointed to by pointers.">DeleteObject</a>());
<a name="l00154"></a>00154   <span class="comment">// and clear the container of pointers as well</span>
<a name="l00155"></a>00155   <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.clear();
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">// -------------------------------------- functions ---------------------</span>
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="comment">// the function&#39;s () operator</span>
<a name="l00161"></a>00161 <span class="comment">// version taking labeled box as parameter</span>
<a name="l00162"></a><a class="code" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909">00162</a> interval <a class="code" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909" title="interval function object">FPhyloPOT::operator() </a>(<span class="keyword">const</span> <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb)<span class="keyword"> const</span>
<a name="l00163"></a>00163 <span class="keyword"></span>{
<a name="l00164"></a>00164                     <span class="comment">// no patterns or no treeRoots</span>
<a name="l00165"></a>00165   <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
<a name="l00166"></a>00166   {
<a name="l00167"></a>00167     cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
<a name="l00168"></a>00168          &lt;&lt; std::endl;
<a name="l00169"></a>00169     exit(1);
<a name="l00170"></a>00170   }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172   ivector x(lb.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);<span class="comment">// the box we should be dealing with</span>
<a name="l00173"></a>00173 
<a name="l00174"></a>00174   <span class="comment">// identify which tree in the topology space from the label of the box</span>
<a name="l00175"></a>00175                     <span class="comment">// labels run 0, 1, 2, etc</span>
<a name="l00176"></a>00176   <span class="keywordtype">int</span> boxLabel = lb.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00177"></a>00177   <span class="keywordflow">if</span>(boxLabel &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
<a name="l00178"></a>00178   {
<a name="l00179"></a>00179     std::cerr &lt;&lt; <span class="stringliteral">&quot;Label on point &quot;</span> &lt;&lt; boxLabel &lt;&lt;
<a name="l00180"></a>00180       <span class="stringliteral">&quot; greater outside bounds of available trees (&quot;</span>
<a name="l00181"></a>00181       &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;
<a name="l00182"></a>00182     exit(1);
<a name="l00183"></a>00183   }
<a name="l00184"></a>00184   <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[boxLabel];
<a name="l00185"></a>00185 
<a name="l00186"></a>00186                     <span class="comment">// for return value, to accumulate the likelihood we seek</span>
<a name="l00187"></a>00187   interval lkl(0.0, 0.0);
<a name="l00188"></a>00188 
<a name="l00189"></a>00189   <span class="comment">// for each pattern in the pattern counts</span>
<a name="l00190"></a>00190   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
<a name="l00191"></a>00191   {
<a name="l00192"></a>00192 
<a name="l00193"></a>00193                     <span class="comment">// set up a container for nucleotype probabilities</span>
<a name="l00194"></a>00194     <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a> iNucProb;
<a name="l00195"></a>00195     <span class="comment">// use fillProbIntervalJC69 to fill this in for the pattern_ith member of </span>
<a name="l00196"></a>00196     <span class="comment">// the baseSequences so that it will have one member for each character in </span>
<a name="l00197"></a>00197     <span class="comment">// the CharacterSpace, each being</span>
<a name="l00198"></a>00198     <span class="comment">// the probability of that character at the root node</span>
<a name="l00199"></a>00199     iNucProb = 
<a name="l00200"></a>00200       thisTree-&gt;<a class="code" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a" title="Return the probability of a given pattern for this tree.">fillProbIntervalJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
<a name="l00201"></a>00201                                      iNucProb);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     <span class="comment">// check we have got the right number of probabilities back</span>
<a name="l00204"></a>00204     <span class="keywordflow">if</span>(iNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
<a name="l00205"></a>00205     {
<a name="l00206"></a>00206       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities &quot;</span>
<a name="l00207"></a>00207                 &lt;&lt; <span class="stringliteral">&quot;less than character space&quot;</span> &lt;&lt; std::endl;
<a name="l00208"></a>00208       exit(1);
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211     interval prob(0.0, 0.0);
<a name="l00212"></a>00212     interval initialvalue(0.0, 0.0);
<a name="l00213"></a>00213     <span class="comment">// combine the nucleotide probabilities</span>
<a name="l00214"></a>00214     <span class="comment">// sum with the intervalSum function</span>
<a name="l00215"></a>00215     prob = std::accumulate(iNucProb.begin(), iNucProb.end(), 
<a name="l00216"></a>00216                            initialvalue, <a class="code" href="PhyloTree_8cpp.shtml#a84ced4c363a59a5168225a9396ce2b84" title="operator const LabBox&amp; X Utility function to sum intervals">intervalSum</a>);
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
<a name="l00219"></a>00219     prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="comment">// add to the likelihood</span>
<a name="l00222"></a>00222     lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
<a name="l00223"></a>00223   }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">// increment the number of interval() calls in the function object</span>
<a name="l00226"></a>00226   <a class="code" href="classFPhyloPOT.shtml#a6121e3100ec3c00f522f15e1feae0070" title="Track number of interval function calls.">n_interval_calls</a>++;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <span class="keywordflow">return</span> lkl;
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="comment">// the function&#39;s () operator</span>
<a name="l00232"></a>00232 <span class="comment">// version taking labeled point as parameter</span>
<a name="l00233"></a><a class="code" href="classFPhyloPOT.shtml#afdf1491ae76809442d33e224b4607102">00233</a> real <a class="code" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909" title="interval function object">FPhyloPOT::operator() </a>(<span class="keyword">const</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>&amp; lp)<span class="keyword"> const</span>
<a name="l00234"></a>00234 <span class="keyword"></span>{
<a name="l00235"></a>00235                     <span class="comment">// no patterns or no treeRoots</span>
<a name="l00236"></a>00236   <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
<a name="l00237"></a>00237   {
<a name="l00238"></a>00238     cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
<a name="l00239"></a>00239          &lt;&lt; std::endl;
<a name="l00240"></a>00240     exit(1);
<a name="l00241"></a>00241   }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243   rvector x(lp.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>);<span class="comment">// the point we should be dealing with</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="comment">// identify which tree in the topology space from the label of the point</span>
<a name="l00246"></a>00246                     <span class="comment">// labels run 0, 1, 2, etc</span>
<a name="l00247"></a>00247   <span class="keywordtype">int</span> ptLabel = lp.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>;
<a name="l00248"></a>00248   <span class="keywordflow">if</span>(ptLabel &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
<a name="l00249"></a>00249   {
<a name="l00250"></a>00250     std::cerr &lt;&lt; <span class="stringliteral">&quot;Label on point &quot;</span> &lt;&lt; ptLabel &lt;&lt;
<a name="l00251"></a>00251       <span class="stringliteral">&quot; greater outside bounds of available trees (&quot;</span>
<a name="l00252"></a>00252       &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;
<a name="l00253"></a>00253     exit(1);
<a name="l00254"></a>00254   }
<a name="l00255"></a>00255   <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[ptLabel];
<a name="l00256"></a>00256 
<a name="l00257"></a>00257   real lkl(0.0);    <span class="comment">// for return value, to accumulate the likelihood we seek</span>
<a name="l00258"></a>00258 
<a name="l00259"></a>00259   <span class="comment">// for each pattern in the pattern counts</span>
<a name="l00260"></a>00260   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
<a name="l00261"></a>00261   {
<a name="l00262"></a>00262 
<a name="l00263"></a>00263                     <span class="comment">// set up a container for nucleotype probabilities</span>
<a name="l00264"></a>00264     <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a> rNucProb;
<a name="l00265"></a>00265     <span class="comment">// use fillProbRealJC69 to fill this in for the pattern_ith member of the </span>
<a name="l00266"></a>00266     <span class="comment">// baseSequences so that it will have one member for each character in the </span>
<a name="l00267"></a>00267     <span class="comment">// CharacterSpace, each being the probability of that character at the root </span>
<a name="l00268"></a>00268     <span class="comment">// node</span>
<a name="l00269"></a>00269     rNucProb = 
<a name="l00270"></a>00270       thisTree-&gt;<a class="code" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24" title="Return the probability of a given pattern for this tree.">fillProbRealJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
<a name="l00271"></a>00271                                  rNucProb);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     <span class="comment">// check we have got the right number of probabilities back</span>
<a name="l00274"></a>00274     <span class="keywordflow">if</span>(rNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
<a name="l00275"></a>00275     {
<a name="l00276"></a>00276       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities &quot;</span>
<a name="l00277"></a>00277                 &lt;&lt; <span class="stringliteral">&quot;less than character space&quot;</span> &lt;&lt; std::endl;
<a name="l00278"></a>00278       exit(1);
<a name="l00279"></a>00279     }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     real prob(0.0);
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="comment">// combine the nucleotide probabilities</span>
<a name="l00284"></a>00284                     <span class="comment">// sum with the realSum function</span>
<a name="l00285"></a>00285     prob = std::accumulate(rNucProb.begin(), rNucProb.end(), 
<a name="l00286"></a>00286                            <span class="keyword">static_cast&lt;</span>real<span class="keyword">&gt;</span>(0.0), <a class="code" href="PhyloTree_8cpp.shtml#ae36eeec3df01dff75dc04065eb5095f4" title="operator const LabPnt&amp; X Utility function to sum reals">realSum</a>);
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
<a name="l00289"></a>00289     prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="comment">// add to the likelihood</span>
<a name="l00292"></a>00292     lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
<a name="l00293"></a>00293   }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295   <span class="comment">// increment the number of real() calls in the function object</span>
<a name="l00296"></a>00296   <a class="code" href="classFPhyloPOT.shtml#a4e705aece25b8ee32d67aa6ab50cd9ec" title="Track number of real function calls.">n_real_calls</a>++;   
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   <span class="keywordflow">return</span> lkl;
<a name="l00299"></a>00299 }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 <span class="comment">// the function&#39;s () operator</span>
<a name="l00302"></a>00302 <span class="comment">// version taking a HTvector as parameter</span>
<a name="l00303"></a>00303 <span class="comment">// only uses the first tree if the is more than one tree to choose from</span>
<a name="l00304"></a>00304 <span class="comment">// label defaults to 0 and identified which tree to do global optimisation on</span>
<a name="l00305"></a><a class="code" href="classFPhyloPOT.shtml#a8a259ba9d2704e586dc2dcea268dc8e8">00305</a> HessType <a class="code" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909" title="interval function object">FPhyloPOT::operator() </a>(<span class="keyword">const</span> HTvector&amp; x, <span class="keyword">const</span> <span class="keywordtype">int</span> label)<span class="keyword"> const</span>
<a name="l00306"></a>00306 <span class="keyword"></span>{
<a name="l00307"></a>00307 
<a name="l00308"></a>00308                     <span class="comment">// no patterns or no treeRoots</span>
<a name="l00309"></a>00309   <span class="keywordflow">if</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> == 0 || <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.empty())
<a name="l00310"></a>00310   {
<a name="l00311"></a>00311     cerr &lt;&lt; <span class="stringliteral">&quot;Function object contains either no patterns OR no trees&quot;</span> 
<a name="l00312"></a>00312          &lt;&lt; std::endl;
<a name="l00313"></a>00313     exit(1);
<a name="l00314"></a>00314   }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316   <span class="comment">// check the label is in our label set</span>
<a name="l00317"></a>00317   <span class="keywordflow">if</span> (label &gt;= static_cast&lt;int&gt;(<a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.size()))
<a name="l00318"></a>00318   {
<a name="l00319"></a>00319     std::cerr &lt;&lt; <span class="stringliteral">&quot;Tree label &quot;</span> &lt;&lt; label
<a name="l00320"></a>00320       &lt;&lt; <span class="stringliteral">&quot; does not identify a tree for this function object&quot;</span> &lt;&lt; std::endl;
<a name="l00321"></a>00321     exit(1);
<a name="l00322"></a>00322   }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324   <span class="comment">// We do global optimisation for the tree labelled with label</span>
<a name="l00325"></a>00325   <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* thisTree = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>[label];
<a name="l00326"></a>00326 
<a name="l00327"></a>00327   <span class="keywordtype">int</span> d = x.Dim();
<a name="l00328"></a>00328   HessType lkl(d);
<a name="l00329"></a>00329   lkl = 0.0;        <span class="comment">// for return value, to accumulate the likelihood we seek</span>
<a name="l00330"></a>00330 
<a name="l00331"></a>00331   <span class="comment">// for each pattern in the pattern counts</span>
<a name="l00332"></a>00332   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> pattern_i = 0; pattern_i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; pattern_i++)
<a name="l00333"></a>00333   {
<a name="l00334"></a>00334 
<a name="l00335"></a>00335     <span class="comment">// set up a container for nucleotype probabilities</span>
<a name="l00336"></a>00336     <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a> hNucProb;
<a name="l00337"></a>00337     <span class="comment">// use fillProbHessJC69 to fill this in for the pattern_ith member of the </span>
<a name="l00338"></a>00338     <span class="comment">// baseSequences so that it will have one member for each character in the </span>
<a name="l00339"></a>00339     <span class="comment">// CharacterSpace, each being</span>
<a name="l00340"></a>00340     <span class="comment">// the probability of that character at the root node</span>
<a name="l00341"></a>00341     hNucProb = 
<a name="l00342"></a>00342       thisTree-&gt;<a class="code" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183" title="Return the probability of a given pattern for this tree.">fillProbHessJC69</a>(x, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[pattern_i]), 
<a name="l00343"></a>00343                                  hNucProb);
<a name="l00344"></a>00344 
<a name="l00345"></a>00345     <span class="comment">// check we have got the right number of probabilities back</span>
<a name="l00346"></a>00346     <span class="keywordflow">if</span>(hNucProb.size() != <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>))
<a name="l00347"></a>00347     {
<a name="l00348"></a>00348       std::cerr &lt;&lt; <span class="stringliteral">&quot;Error, number of nucleotide probabilities less than &quot;</span> 
<a name="l00349"></a>00349                 &lt;&lt; <span class="stringliteral">&quot;character space&quot;</span> &lt;&lt; std::endl;
<a name="l00350"></a>00350       exit(1);
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353     HessType prob(d);
<a name="l00354"></a>00354     prob = 0.0;
<a name="l00355"></a>00355     HessType initialvalue(d);
<a name="l00356"></a>00356     initialvalue = 0.0;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <span class="comment">// combine the nucleotide probabilities</span>
<a name="l00359"></a>00359                     <span class="comment">// sum with the hessSum function</span>
<a name="l00360"></a>00360     prob = std::accumulate(hNucProb.begin(), hNucProb.end(), 
<a name="l00361"></a>00361                            initialvalue, <a class="code" href="PhyloTree_8cpp.shtml#a62f64b7d245c1108fa85ec6509952932" title="operator const HTvector&amp; X Utility function to sum HessTypes">hessSum</a>);
<a name="l00362"></a>00362 
<a name="l00363"></a>00363     <span class="comment">// eg ln of (prob mult by 0.25 for JC69 4-character set)</span>
<a name="l00364"></a>00364     prob = <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(prob/<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>);
<a name="l00365"></a>00365 
<a name="l00366"></a>00366     <span class="comment">// add to the likelihood</span>
<a name="l00367"></a>00367     lkl = lkl + prob * (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[pattern_i];
<a name="l00368"></a>00368   }
<a name="l00369"></a>00369 
<a name="l00370"></a>00370   <span class="keywordflow">return</span> lkl;
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 <span class="comment">// Converts the bases into numerical codes</span>
<a name="l00374"></a>00374 <span class="comment">// Gives out error message if it&#39;s not one of the T,C,A,G</span>
<a name="l00375"></a><a class="code" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e">00375</a> <span class="keywordtype">int</span> <a class="code" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e" title="Convert nucleotide characters to integers, for coding.">FPhyloPOT::Char2Code</a>(<span class="keywordtype">char</span> ch)
<a name="l00376"></a>00376 {
<a name="l00377"></a>00377                     <span class="comment">//change to lower case</span>
<a name="l00378"></a>00378   <span class="keywordtype">char</span> c = tolower(ch);
<a name="l00379"></a>00379   <span class="keywordtype">int</span> retValue = 0;
<a name="l00380"></a>00380   <span class="keywordflow">switch</span> (c)
<a name="l00381"></a>00381   {
<a name="l00382"></a>00382     <span class="keywordflow">case</span> <span class="charliteral">&#39;t&#39;</span>:
<a name="l00383"></a>00383       retValue = 0;
<a name="l00384"></a>00384       <span class="keywordflow">break</span>;
<a name="l00385"></a>00385     <span class="keywordflow">case</span> <span class="charliteral">&#39;c&#39;</span>:
<a name="l00386"></a>00386       retValue = 1;
<a name="l00387"></a>00387       <span class="keywordflow">break</span>;
<a name="l00388"></a>00388     <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>:
<a name="l00389"></a>00389       retValue = 2;
<a name="l00390"></a>00390       <span class="keywordflow">break</span>;
<a name="l00391"></a>00391     <span class="keywordflow">case</span> <span class="charliteral">&#39;g&#39;</span>:
<a name="l00392"></a>00392       retValue = 3;
<a name="l00393"></a>00393       <span class="keywordflow">break</span>;
<a name="l00394"></a>00394     <span class="keywordflow">default</span>:
<a name="l00395"></a>00395       std::cerr&lt;&lt; <span class="stringliteral">&quot;Contains non-nucleotide symbol &quot;</span> &lt;&lt; c &lt;&lt; <span class="stringliteral">&quot;!&quot;</span> &lt;&lt; std::endl;
<a name="l00396"></a>00396       exit(1);
<a name="l00397"></a>00397 
<a name="l00398"></a>00398   }                 <span class="comment">// end swtich</span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400   <span class="keywordflow">return</span> retValue;
<a name="l00401"></a>00401 }
<a name="l00402"></a>00402 
<a name="l00403"></a><a class="code" href="classFPhyloPOT.shtml#a0926a4e893aeb2f2bd50b67ad97b7c3c">00403</a> <span class="keywordtype">char</span> <a class="code" href="classFPhyloPOT.shtml#a0926a4e893aeb2f2bd50b67ad97b7c3c" title="Convert coded nucleotide integers back to characters.">FPhyloPOT::Code2Char</a>(<span class="keywordtype">int</span> c)
<a name="l00404"></a>00404 {
<a name="l00405"></a>00405   <span class="keywordtype">char</span> retValue = <span class="charliteral">&#39;x&#39;</span>;
<a name="l00406"></a>00406 
<a name="l00407"></a>00407   <span class="keywordflow">switch</span> (c)
<a name="l00408"></a>00408   {
<a name="l00409"></a>00409     <span class="keywordflow">case</span> 0:
<a name="l00410"></a>00410       retValue = <span class="charliteral">&#39;t&#39;</span>;
<a name="l00411"></a>00411       <span class="keywordflow">break</span>;
<a name="l00412"></a>00412     <span class="keywordflow">case</span> 1:
<a name="l00413"></a>00413       retValue = <span class="charliteral">&#39;c&#39;</span>;
<a name="l00414"></a>00414       <span class="keywordflow">break</span>;
<a name="l00415"></a>00415     <span class="keywordflow">case</span> 2:
<a name="l00416"></a>00416       retValue = <span class="charliteral">&#39;a&#39;</span>;
<a name="l00417"></a>00417       <span class="keywordflow">break</span>;
<a name="l00418"></a>00418     <span class="keywordflow">case</span> 3:
<a name="l00419"></a>00419       retValue = <span class="charliteral">&#39;g&#39;</span>;
<a name="l00420"></a>00420       <span class="keywordflow">break</span>;
<a name="l00421"></a>00421     <span class="keywordflow">default</span>:
<a name="l00422"></a>00422       std::cerr&lt;&lt; <span class="stringliteral">&quot;Contains non-nucleotide symbol &quot;</span> &lt;&lt; c &lt;&lt; <span class="stringliteral">&quot;!&quot;</span> &lt;&lt; std::endl;
<a name="l00423"></a>00423       exit(1);
<a name="l00424"></a>00424   }                 <span class="comment">// end switch</span>
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="keywordflow">return</span> retValue;
<a name="l00427"></a>00427 }
<a name="l00428"></a>00428 
<a name="l00429"></a><a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5">00429</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">FPhyloPOT::CheckReadLine</a>(ifstream&amp; ifs, <span class="keywordtype">string</span>&amp; line)
<a name="l00430"></a>00430 {
<a name="l00431"></a>00431   <span class="keywordflow">if</span>(!ifs.fail() &amp;&amp; !ifs.bad())
<a name="l00432"></a>00432   {
<a name="l00433"></a>00433     getline(ifs, line);
<a name="l00434"></a>00434   }
<a name="l00435"></a>00435   <span class="keywordflow">else</span>
<a name="l00436"></a>00436   {
<a name="l00437"></a>00437     <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(ifs, <span class="stringliteral">&quot; Error reading from file &quot;</span>);
<a name="l00438"></a>00438   }
<a name="l00439"></a>00439 }
<a name="l00440"></a>00440 
<a name="l00441"></a><a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178">00441</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FPhyloPOT::FileInputError</a>(ifstream&amp; ifs, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; msg)
<a name="l00442"></a>00442 {
<a name="l00443"></a>00443   std::cerr &lt;&lt; msg &lt;&lt; endl;
<a name="l00444"></a>00444   ifs.close();
<a name="l00445"></a>00445   exit(-1);
<a name="l00446"></a>00446 }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 <span class="comment">// reformat a line</span>
<a name="l00449"></a>00449 <span class="comment">// take out white space and \0, replace u with t, and make it all lower case</span>
<a name="l00450"></a><a class="code" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c">00450</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c" title="Reformats sequences read in to make them easy to analyse for patterns.">FPhyloPOT::ReformatSequence</a>(<span class="keywordtype">string</span>&amp; line)
<a name="l00451"></a>00451 {
<a name="l00452"></a>00452 
<a name="l00453"></a>00453   <span class="keywordtype">size_t</span> pos;
<a name="l00454"></a>00454 
<a name="l00455"></a>00455   <span class="keywordtype">string</span> toErase(<span class="stringliteral">&quot; \r\t\0&quot;</span>);
<a name="l00456"></a>00456   <span class="keywordtype">string</span> toReplace(<span class="stringliteral">&quot;u&quot;</span>);
<a name="l00457"></a>00457 
<a name="l00458"></a>00458   <span class="comment">// erase unwanted characters</span>
<a name="l00459"></a>00459   pos = line.find_first_of(toErase);
<a name="l00460"></a>00460   <span class="keywordflow">while</span> (pos!=string::npos)
<a name="l00461"></a>00461   {
<a name="l00462"></a>00462     line.erase(pos);
<a name="l00463"></a>00463     pos = line.find_first_of(toErase, pos);
<a name="l00464"></a>00464   }
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <span class="comment">//turn it all to lower case</span>
<a name="l00467"></a>00467   std::transform(line.begin(), line.end(), line.begin(), ::tolower);
<a name="l00468"></a>00468 
<a name="l00469"></a>00469   <span class="comment">// if a character is &#39;u&#39;, replace by &#39;t&#39;</span>
<a name="l00470"></a>00470   pos = line.find_first_of(toReplace);
<a name="l00471"></a>00471   <span class="keywordflow">while</span> (pos!= string::npos)
<a name="l00472"></a>00472   {
<a name="l00473"></a>00473     line.replace(pos, 1, <span class="stringliteral">&quot;t&quot;</span>);
<a name="l00474"></a>00474     pos = line.find_first_of(toReplace, pos+1);
<a name="l00475"></a>00475   }
<a name="l00476"></a>00476 }
<a name="l00477"></a>00477 
<a name="l00478"></a>00478 <span class="comment">// read in sequences from a given file</span>
<a name="l00479"></a>00479 <span class="comment">// fills in part of the data member SeqData which is a struct of type data</span>
<a name="l00480"></a>00480 <span class="comment">// returns an int 0 when completed</span>
<a name="l00481"></a><a class="code" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c">00481</a> <span class="keywordtype">int</span> <a class="code" href="classFPhyloPOT.shtml#a02e78c307455acbbaa53b0482d4a8b0c" title="Reads sequences from a txt file.">FPhyloPOT::ReadSequence</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s)
<a name="l00482"></a>00482 {
<a name="l00483"></a>00483   <span class="comment">// reset</span>
<a name="l00484"></a>00484   <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> = 0;
<a name="l00485"></a>00485   <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> = 0;
<a name="l00486"></a>00486   <span class="comment">// make sure the sequence name and sequence containers are empty</span>
<a name="l00487"></a>00487   (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>).clear();
<a name="l00488"></a>00488   (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>).clear();
<a name="l00489"></a>00489 
<a name="l00490"></a>00490                     <span class="comment">// make and open an ifstream object</span>
<a name="l00491"></a>00491   ifstream seqFile(s.c_str());
<a name="l00492"></a>00492 
<a name="l00493"></a>00493   <span class="keywordtype">int</span> i;            <span class="comment">// for counters</span>
<a name="l00494"></a>00494 
<a name="l00495"></a>00495   <span class="keywordtype">string</span> line;      <span class="comment">// for a line read in</span>
<a name="l00496"></a>00496 
<a name="l00497"></a>00497   <span class="comment">// read the first line</span>
<a name="l00498"></a>00498   <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);
<a name="l00499"></a>00499 
<a name="l00500"></a>00500                     <span class="comment">// convert to a stream</span>
<a name="l00501"></a>00501   istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line);
<a name="l00502"></a>00502   <span class="comment">// the first line which should be the number of sequences </span>
<a name="l00503"></a>00503   <span class="comment">// and the sequence length</span>
<a name="l00504"></a>00504 
<a name="l00505"></a>00505                     <span class="comment">// extraction operator on a stream</span>
<a name="l00506"></a>00506   sin &gt;&gt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &gt;&gt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>;
<a name="l00507"></a>00507 
<a name="l00508"></a>00508   <span class="comment">//  check we read two positive two integers from the first line</span>
<a name="l00509"></a>00509   <span class="keywordflow">if</span> ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &lt;= 0) || <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> &lt;= 0)
<a name="l00510"></a>00510   {
<a name="l00511"></a>00511     <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, <span class="stringliteral">&quot;Check your sequence data file first line&quot;</span>);
<a name="l00512"></a>00512   }
<a name="l00513"></a>00513 
<a name="l00514"></a>00514   <span class="comment">// for each of the expected number of sequences</span>
<a name="l00515"></a>00515   <span class="comment">// if there are more sequences they will not be read</span>
<a name="l00516"></a>00516   <span class="comment">// and if there are less the program will give error message and exit</span>
<a name="l00517"></a>00517   <span class="comment">// it would be easy to have a more flexible format without having to </span>
<a name="l00518"></a>00518   <span class="comment">// pre-specify number of sequences and length</span>
<a name="l00519"></a>00519   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a>; i++)
<a name="l00520"></a>00520   {
<a name="l00521"></a>00521     <span class="keywordflow">if</span> (!seqFile.eof())
<a name="l00522"></a>00522     {
<a name="l00523"></a>00523       <span class="comment">//get the next line in the file, which should be a sequence name</span>
<a name="l00524"></a>00524       <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);
<a name="l00525"></a>00525 
<a name="l00526"></a>00526       <span class="comment">// check line has some characters and less than </span>
<a name="l00527"></a>00527       <span class="comment">// maxCharInSeqName characters</span>
<a name="l00528"></a>00528       <span class="keywordflow">if</span> (line.empty() || line.size() &gt; <a class="code" href="classFPhyloPOT.shtml#a9b09c98520545b9c87c6993bf3c5f274aa74faf83373edcdf48ff35922dc009e2">maxCharInSeqName</a>)
<a name="l00529"></a>00529       {
<a name="l00530"></a>00530         <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
<a name="l00531"></a>00531                        <span class="stringliteral">&quot;Check sequence file: expected a sequence name&quot;</span>);
<a name="l00532"></a>00532       }
<a name="l00533"></a>00533       <span class="keywordflow">else</span>          <span class="comment">// line is okay</span>
<a name="l00534"></a>00534       {
<a name="l00535"></a>00535         (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>).push_back(line);
<a name="l00536"></a>00536       }
<a name="l00537"></a>00537     }
<a name="l00538"></a>00538     <span class="keywordflow">else</span>
<a name="l00539"></a>00539     {
<a name="l00540"></a>00540       <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
<a name="l00541"></a>00541       <span class="stringliteral">&quot;Check sequence file: found less than expected number of sequence names&quot;</span>);
<a name="l00542"></a>00542     }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544     <span class="keywordflow">if</span> (!seqFile.eof())
<a name="l00545"></a>00545     {
<a name="l00546"></a>00546       <span class="comment">//get the next line in the file, which should be a sequence</span>
<a name="l00547"></a>00547       <a class="code" href="classFPhyloPOT.shtml#a899c716603960c6abf8983f8392ef3d5" title="A function to check and read a line from a file.">CheckReadLine</a>(seqFile, line);
<a name="l00548"></a>00548 
<a name="l00549"></a>00549       <span class="comment">// check line has some characters</span>
<a name="l00550"></a>00550       <span class="keywordflow">if</span> (line.empty())
<a name="l00551"></a>00551       {
<a name="l00552"></a>00552         <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, <span class="stringliteral">&quot;Check sequence file: expected a sequence&quot;</span>);
<a name="l00553"></a>00553       }
<a name="l00554"></a>00554       <span class="keywordflow">else</span>          <span class="comment">// line is okay</span>
<a name="l00555"></a>00555       {
<a name="l00556"></a>00556 
<a name="l00557"></a>00557         <span class="comment">//check the line</span>
<a name="l00558"></a>00558 
<a name="l00559"></a>00559                     <span class="comment">// reformats the sequence line</span>
<a name="l00560"></a>00560         <a class="code" href="classFPhyloPOT.shtml#aa8490107b21f3b7efe2fa3bbfc8c6b1c" title="Reformats sequences read in to make them easy to analyse for patterns.">ReformatSequence</a>(line);
<a name="l00561"></a>00561         <span class="comment">// and put it into the container of sequences</span>
<a name="l00562"></a>00562 
<a name="l00563"></a>00563         <span class="keywordflow">if</span>(line.size() == <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>))
<a name="l00564"></a>00564         {
<a name="l00565"></a>00565           <span class="comment">// copy the string into vector of chars and copy this </span>
<a name="l00566"></a>00566           <span class="comment">// into the rawSequences</span>
<a name="l00567"></a>00567           vector&lt;char&gt; tempCharVec(line.begin(), line.end());
<a name="l00568"></a>00568           (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>).push_back(tempCharVec);
<a name="l00569"></a>00569         }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571         <span class="keywordflow">else</span>
<a name="l00572"></a>00572         {
<a name="l00573"></a>00573           <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
<a name="l00574"></a>00574                     <span class="stringliteral">&quot;Check sequence file: a sequence is shorter than expected&quot;</span>);
<a name="l00575"></a>00575         }
<a name="l00576"></a>00576       }
<a name="l00577"></a>00577     }
<a name="l00578"></a>00578     <span class="keywordflow">else</span>
<a name="l00579"></a>00579     {
<a name="l00580"></a>00580       <a class="code" href="classFPhyloPOT.shtml#a95285cf2a875065f9c80190fc5db9178" title="A function to deal with an error found in a sequence input file.">FileInputError</a>(seqFile, 
<a name="l00581"></a>00581            <span class="stringliteral">&quot;Check sequence file: found less than expected number of sequences&quot;</span>);
<a name="l00582"></a>00582     }
<a name="l00583"></a>00583 
<a name="l00584"></a>00584   }                 <span class="comment">// end of loop reading sequences and sequence names</span>
<a name="l00585"></a>00585 
<a name="l00586"></a>00586   seqFile.close();
<a name="l00587"></a>00587 
<a name="l00588"></a>00588   <span class="keywordflow">return</span> (0);
<a name="l00589"></a>00589 }
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 <span class="comment">/* Finds the pattern in the sequences to save computational time */</span>
<a name="l00592"></a><a class="code" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216">00592</a> <span class="keywordtype">int</span> <a class="code" href="classFPhyloPOT.shtml#a7fbfb801cd7d80b8148500c9f0b07216" title="Finds patterns in sequences read in and fills in datamembers in SeqData struct.">FPhyloPOT::FindPattern</a>(<span class="keywordtype">void</span>)
<a name="l00593"></a>00593 {
<a name="l00594"></a>00594   <span class="keywordtype">int</span> i, j;
<a name="l00595"></a>00595 
<a name="l00596"></a>00596   <span class="comment">// make sure the vectors for sequences anlysis are clear</span>
<a name="l00597"></a>00597   (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>).clear();
<a name="l00598"></a>00598   <span class="comment">//  this destructs all the component vectors if any</span>
<a name="l00599"></a>00599   (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>).clear();
<a name="l00600"></a>00600 
<a name="l00601"></a>00601   (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>).clear();
<a name="l00602"></a>00602 
<a name="l00603"></a>00603   <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> = 0;
<a name="l00604"></a>00604 
<a name="l00605"></a>00605   <span class="comment">// multiple sequence alignment sets</span>
<a name="l00606"></a>00606   vector&lt;string&gt; msaSets;
<a name="l00607"></a>00607 
<a name="l00608"></a>00608   <span class="comment">// form the msaSets</span>
<a name="l00609"></a>00609   <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>; i++)
<a name="l00610"></a>00610   {
<a name="l00611"></a>00611     <span class="comment">// make a string from the ith element of the first sequences&#39;s data</span>
<a name="l00612"></a>00612     <span class="keywordtype">string</span> s(1, ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>)[0])[i]);
<a name="l00613"></a>00613     <span class="keywordflow">for</span> (j = 1; j&lt;<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a>; j++)
<a name="l00614"></a>00614     {
<a name="l00615"></a>00615       <span class="keywordtype">char</span> add = ((<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#aa02f132fe5b0ecd2f64374da002efbec">rawSequences</a>)[j])[i];
<a name="l00616"></a>00616       s+=add;       <span class="comment">// add on the equivalent character from the other sequences</span>
<a name="l00617"></a>00617     }
<a name="l00618"></a>00618     msaSets.push_back(s);
<a name="l00619"></a>00619   }
<a name="l00620"></a>00620 
<a name="l00621"></a>00621   <span class="comment">// should now have SeqData.Seq_length strings in msaSets</span>
<a name="l00622"></a>00622 
<a name="l00623"></a>00623                     <span class="comment">// sort the msaSets</span>
<a name="l00624"></a>00624   sort (msaSets.begin(), msaSets.end());
<a name="l00625"></a>00625 
<a name="l00626"></a>00626   vector&lt;string&gt;::iterator sit;
<a name="l00627"></a>00627 
<a name="l00628"></a>00628   <span class="keywordtype">int</span> patternsFound = 0;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630   sit = msaSets.begin();
<a name="l00631"></a>00631   <span class="comment">// vector&lt;int&gt; BPatternCounts;</span>
<a name="l00632"></a>00632 
<a name="l00633"></a>00633   <span class="keywordtype">int</span> seqPos = 0;   <span class="comment">// to keep track of where we are in the sequence</span>
<a name="l00634"></a>00634 
<a name="l00635"></a>00635   <span class="comment">// while we have not found all the patterns</span>
<a name="l00636"></a>00636   <span class="keywordflow">while</span> (seqPos &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>)
<a name="l00637"></a>00637   {
<a name="l00638"></a>00638     <span class="keywordtype">string</span> found = *sit;
<a name="l00639"></a>00639 
<a name="l00640"></a>00640     <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>++;
<a name="l00641"></a>00641     (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>).push_back(found);
<a name="l00642"></a>00642 
<a name="l00643"></a>00643     <span class="keywordtype">int</span> thisCount = 0;
<a name="l00644"></a>00644 
<a name="l00645"></a>00645     <span class="comment">// move to the next non matching set  this works </span>
<a name="l00646"></a>00646     <span class="comment">// because msaSets is is sorted</span>
<a name="l00647"></a>00647     <span class="keywordflow">while</span> (*sit==found &amp;&amp; (seqPos &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a>-1))
<a name="l00648"></a>00648     {
<a name="l00649"></a>00649       thisCount++;
<a name="l00650"></a>00650       seqPos++;
<a name="l00651"></a>00651       sit++;
<a name="l00652"></a>00652     }
<a name="l00653"></a>00653 
<a name="l00654"></a>00654     <span class="comment">// move to the next non matching set  this works </span>
<a name="l00655"></a>00655     <span class="comment">//bbecause msaSets is is sorted</span>
<a name="l00656"></a>00656     <span class="keywordflow">if</span> (*sit==found &amp;&amp; (seqPos = <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ad43ceda299bda19eae5a7b5f1f17ce06">Seq_length</a> -1))
<a name="l00657"></a>00657     {
<a name="l00658"></a>00658       thisCount++;
<a name="l00659"></a>00659       seqPos++;
<a name="l00660"></a>00660     }
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>).push_back(thisCount);
<a name="l00663"></a>00663     patternsFound += thisCount;
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     string::iterator it;
<a name="l00666"></a>00666     vector&lt;int&gt; tempvec;
<a name="l00667"></a>00667 
<a name="l00668"></a>00668     <span class="comment">// put the found sequence in coded form into baseSequences</span>
<a name="l00669"></a>00669     <span class="keywordflow">for</span> (it = found.begin(); it&lt; found.end(); it++)
<a name="l00670"></a>00670     {
<a name="l00671"></a>00671       <span class="comment">//char c = *it;</span>
<a name="l00672"></a>00672       <span class="comment">//int code = Char2Code(c);</span>
<a name="l00673"></a>00673       tempvec.push_back(<a class="code" href="classFPhyloPOT.shtml#a829e5b3cc0e80764cd3dac23c06cf06e" title="Convert nucleotide characters to integers, for coding.">Char2Code</a>(*it));
<a name="l00674"></a>00674     }
<a name="l00675"></a>00675 
<a name="l00676"></a>00676     (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>).push_back(tempvec);
<a name="l00677"></a>00677 
<a name="l00678"></a>00678   }                 <span class="comment">// return to the top of the loop</span>
<a name="l00679"></a>00679 
<a name="l00680"></a>00680   <span class="keywordflow">return</span> (0);
<a name="l00681"></a>00681 }
<a name="l00682"></a>00682 
<a name="l00683"></a><a class="code" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78">00683</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#a7c075a1b4511f691106e7c5c823a5e78" title="Print the summmary of results of ReadSequence() and FindPattern()">FPhyloPOT::PrintSequence</a>()<span class="keyword"> const</span>
<a name="l00684"></a>00684 <span class="keyword"></span>{
<a name="l00685"></a>00685   vector&lt;int&gt;::iterator it;
<a name="l00686"></a>00686 
<a name="l00687"></a>00687   <span class="comment">//printing sequence patterns</span>
<a name="l00688"></a>00688   std::cout &lt;&lt; std::endl;
<a name="l00689"></a>00689   std::cout &lt;&lt; <span class="stringliteral">&quot;For the &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a988fb40b7296abe1c35d07aba414922d">No_seq</a> &lt;&lt; <span class="stringliteral">&quot; sequences, there are &quot;</span> &lt;&lt;
<a name="l00690"></a>00690     <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a> &lt;&lt; <span class="stringliteral">&quot; patterns &quot;</span> &lt;&lt; std::endl;
<a name="l00691"></a>00691 
<a name="l00692"></a>00692   std::cout &lt;&lt; std::endl;
<a name="l00693"></a>00693   std::cout &lt;&lt; <span class="stringliteral">&quot;The pattern counts are:&quot;</span> &lt;&lt; std::endl;
<a name="l00694"></a>00694   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
<a name="l00695"></a>00695   {
<a name="l00696"></a>00696     std::cout &lt;&lt; (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a781e3ff29ee1a5d9bc8816a076b26819">BPatternCounts</a>)[i] &lt;&lt; std::endl;
<a name="l00697"></a>00697   }
<a name="l00698"></a>00698 
<a name="l00699"></a>00699   std::cout &lt;&lt; std::endl;
<a name="l00700"></a>00700   <span class="comment">//printing the nucleotide code patterns</span>
<a name="l00701"></a>00701   std::cout &lt;&lt; <span class="stringliteral">&quot;The patterns in code are:&quot;</span> &lt;&lt; std::endl;
<a name="l00702"></a>00702   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
<a name="l00703"></a>00703   {
<a name="l00704"></a>00704     vector&lt;int&gt; tempvec = (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#ab267d3dd20bbe5abf0cf0d33c4a8ffdf">baseSequences</a>)[i];
<a name="l00705"></a>00705     <span class="keywordflow">for</span> (it = tempvec.begin(); it &lt; tempvec.end(); it++)
<a name="l00706"></a>00706     {
<a name="l00707"></a>00707       std::cout &lt;&lt; *it;
<a name="l00708"></a>00708     }
<a name="l00709"></a>00709     std::cout &lt;&lt; std::endl;
<a name="l00710"></a>00710   }
<a name="l00711"></a>00711 
<a name="l00712"></a>00712   std::cout &lt;&lt; std::endl;
<a name="l00713"></a>00713   <span class="comment">//printing the nucleotide patterns</span>
<a name="l00714"></a>00714   std::cout &lt;&lt; <span class="stringliteral">&quot;The patterns in nucleotides are:&quot;</span> &lt;&lt; std::endl;
<a name="l00715"></a>00715   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a78e93d9dabc45d060155d164db458b3a">BNo_pattern</a>; i++)
<a name="l00716"></a>00716   {
<a name="l00717"></a>00717     std::cout &lt;&lt; (<a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#a1095aaedbb062c91c75a9dca7accc248">BPatterns</a>)[i] &lt;&lt; std::endl;
<a name="l00718"></a>00718   }
<a name="l00719"></a>00719 }
<a name="l00720"></a>00720 
<a name="l00721"></a>00721 <span class="comment">// read trees from file</span>
<a name="l00722"></a>00722 <span class="comment">// and tries to make a tree out of each line</span>
<a name="l00723"></a>00723 <span class="comment">// trees are pushed back into tree roots</span>
<a name="l00724"></a><a class="code" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43">00724</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#a7c1b63e0429cce2c72eaabf284eb5e43" title="Makes trees from a tree file.">FPhyloPOT::ReadTrees</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; s)
<a name="l00725"></a>00725 {
<a name="l00726"></a>00726                     <span class="comment">// a container for treeLines read in</span>
<a name="l00727"></a>00727   vector&lt;string&gt; treeLines;
<a name="l00728"></a>00728 
<a name="l00729"></a>00729   <span class="comment">// we have treefile with multiple lines, one line for each topology</span>
<a name="l00730"></a>00730   <span class="comment">// read the file and store each line</span>
<a name="l00731"></a>00731                     <span class="comment">// make and open an ifstream object</span>
<a name="l00732"></a>00732   ifstream treeFile(s.c_str());
<a name="l00733"></a>00733 
<a name="l00734"></a>00734   <span class="comment">// get each line and push back into treeLines container</span>
<a name="l00735"></a>00735   <span class="keywordflow">while</span>(treeFile.good())
<a name="l00736"></a>00736   {
<a name="l00737"></a>00737     <span class="keywordtype">string</span> line;
<a name="l00738"></a>00738     getline(treeFile, line);
<a name="l00739"></a>00739 
<a name="l00740"></a>00740     <span class="comment">// erase trailing white space</span>
<a name="l00741"></a>00741     <span class="keywordtype">string</span> whitespaces (<span class="stringliteral">&quot; \t\f\v\n\r&quot;</span>);
<a name="l00742"></a>00742     <span class="keywordtype">size_t</span> found;
<a name="l00743"></a>00743 
<a name="l00744"></a>00744     found=line.find_last_not_of(whitespaces);
<a name="l00745"></a>00745     <span class="keywordflow">if</span> (found!=string::npos)
<a name="l00746"></a>00746     {
<a name="l00747"></a>00747                     <span class="comment">// erase everything from found onwards</span>
<a name="l00748"></a>00748       line.erase(found+1);
<a name="l00749"></a>00749       treeLines.push_back(line);
<a name="l00750"></a>00750     }
<a name="l00751"></a>00751     <span class="keywordflow">else</span>
<a name="l00752"></a>00752     {
<a name="l00753"></a>00753       line.clear(); <span class="comment">// str is all whitespace</span>
<a name="l00754"></a>00754       std::cerr &lt;&lt; <span class="stringliteral">&quot;Line in treefile is all whitespace&quot;</span> &lt;&lt; std::endl;
<a name="l00755"></a>00755     }
<a name="l00756"></a>00756   }
<a name="l00757"></a>00757 
<a name="l00758"></a>00758   treeFile.close(); <span class="comment">// finished with the treeFile</span>
<a name="l00759"></a>00759 
<a name="l00760"></a>00760                     <span class="comment">// count the lines read in</span>
<a name="l00761"></a>00761   <span class="keywordtype">size_t</span> countLines = treeLines.size();
<a name="l00762"></a>00762 
<a name="l00763"></a>00763   <span class="comment">// checks on the treefile lines read in</span>
<a name="l00764"></a>00764   <span class="keywordflow">if</span> (countLines == 0)
<a name="l00765"></a>00765   {
<a name="l00766"></a>00766     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in tree file: no trees read in&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00767"></a>00767     exit(1);
<a name="l00768"></a>00768   }
<a name="l00769"></a>00769   <span class="keywordflow">if</span> (countLines!=static_cast&lt;size_t&gt;(<a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>))
<a name="l00770"></a>00770   {
<a name="l00771"></a>00771     std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in tree file: number of lines for trees is not the &quot;</span>
<a name="l00772"></a>00772               &lt;&lt; <span class="stringliteral">&quot;expected number of topologies &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a> 
<a name="l00773"></a>00773               &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00774"></a>00774     exit(1);
<a name="l00775"></a>00775   }
<a name="l00776"></a>00776 
<a name="l00777"></a>00777   <span class="comment">// should now have topologies lines read in </span>
<a name="l00778"></a>00778   <span class="comment">// (eg topologies = 1 for 3 taxa case, 3 for 4 taxa, etc)</span>
<a name="l00779"></a>00779 
<a name="l00780"></a>00780   <span class="comment">// for each line, ie each topology, set up a new tree for this topology</span>
<a name="l00781"></a>00781   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; static_cast&lt;size_t&gt;(<a class="code" href="classFPhyloPOT.shtml#af68e59b4d63e18f0b82864b101fd29d2" title="The number of unrooted topology trees given the model space.">topologies</a>); i++)
<a name="l00782"></a>00782   {
<a name="l00783"></a>00783 
<a name="l00784"></a>00784     <a class="code" href="classPhyloTree.shtml">PhyloTree</a>* newtree;
<a name="l00785"></a>00785 
<a name="l00786"></a>00786     <span class="keywordflow">try</span>
<a name="l00787"></a>00787     {
<a name="l00788"></a>00788       <span class="comment">// use PhyloTree constructor with the </span>
<a name="l00789"></a>00789       <span class="comment">// line, sequence names, and character space</span>
<a name="l00790"></a>00790       newtree = <span class="keyword">new</span> <a class="code" href="classPhyloTree.shtml">PhyloTree</a>(<a class="code" href="classFPhyloPOT.shtml#af26457fdad1313b54245b464a08d2978ac4fc80c8577bb33e7bea00fad159e2ea">CharacterSpace</a>, treeLines[i], <a class="code" href="classFPhyloPOT.shtml#aa80ced607ed41f02bcd56b6f08fbd1ff" title="A struct for the sequence data read in.">SeqData</a>.<a class="code" href="structDATA.shtml#af4cdaf38ce8f08aecdff70e4301bca38">seqNames</a>);
<a name="l00791"></a>00791     }
<a name="l00792"></a>00792 
<a name="l00793"></a>00793     <span class="keywordflow">catch</span> (bad_alloc&amp;)
<a name="l00794"></a>00794     {
<a name="l00795"></a>00795       std::cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in ReadTrees&quot;</span> &lt;&lt; std::endl;
<a name="l00796"></a>00796     }
<a name="l00797"></a>00797 
<a name="l00798"></a>00798     <span class="comment">// we expect to find the tree_nodes number of nodes</span>
<a name="l00799"></a>00799     <span class="keywordflow">if</span> (static_cast&lt;int&gt;((newtree-&gt;<a class="code" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7" title="Get the number of nodes in the tree, including the root.">getNumberNodes</a>())) != <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a>)
<a name="l00800"></a>00800     {
<a name="l00801"></a>00801       <span class="comment">// error in tree file</span>
<a name="l00802"></a>00802 
<a name="l00803"></a>00803       <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file, please check the number of nodes&quot;</span>;
<a name="l00804"></a>00804       <span class="keyword">delete</span> newtree;
<a name="l00805"></a>00805       <a class="code" href="classFPhyloPOT.shtml#ac126a3c0fbba14c07054ef35c9b6e858" title="Destroys the trees (dynamic memory), used by destructor.">destroyRoots</a>();
<a name="l00806"></a>00806       exit(1);
<a name="l00807"></a>00807     }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809                     <span class="comment">// pushes a copy of the newtree pointer into treeRoots;</span>
<a name="l00810"></a>00810     <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.push_back(newtree);
<a name="l00811"></a>00811   }
<a name="l00812"></a>00812   <span class="comment">// we now have treeRoots full of pointers to PhyloTrees</span>
<a name="l00813"></a>00813 }
<a name="l00814"></a>00814 
<a name="l00815"></a><a class="code" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c">00815</a> <span class="keywordtype">void</span> <a class="code" href="classFPhyloPOT.shtml#aaa8c6c8230611cf1f7029be0d00e352c" title="Prints all the trees to console output.">FPhyloPOT::PrintTopologyTrees</a>()
<a name="l00816"></a>00816 {
<a name="l00817"></a>00817 
<a name="l00818"></a>00818   <span class="comment">//describe the generic tree</span>
<a name="l00819"></a>00819   std::cout &lt;&lt; endl;
<a name="l00820"></a>00820   std::cout &lt;&lt; <span class="stringliteral">&quot;The trees will have &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#ab30590c070d95d5d5d7966cb386db7d6" title="The number of nodes in an unrooted tree given the number of taxa.">tree_nodes</a>
<a name="l00821"></a>00821     &lt;&lt; <span class="stringliteral">&quot; nodes and &quot;</span> &lt;&lt; <a class="code" href="classFPhyloPOT.shtml#aef4d908d355efec47e284d3845d74b73" title="The number of edges in an unrooted tree.">n_dimensions</a> &lt;&lt; <span class="stringliteral">&quot; edges&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00822"></a>00822 
<a name="l00823"></a>00823   <a class="code" href="PhyloTree_8hpp.shtml#a2b4b80181cb6658430fed06941d6d356" title="an iterator over a container of PhyloTrees">PhyloTreePtrsItr</a> it;
<a name="l00824"></a>00824   <span class="keywordtype">int</span> i = 0;
<a name="l00825"></a>00825 
<a name="l00826"></a>00826   <span class="comment">//for each tree in treeRoots</span>
<a name="l00827"></a>00827   <span class="keywordflow">for</span> (it = <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.begin(); it &lt; <a class="code" href="classFPhyloPOT.shtml#a99124f9f8855b0aebcccd20804ef9cde" title="A container of pointers to PhyloTrees.">treeRoots</a>.end(); it++)
<a name="l00828"></a>00828   {
<a name="l00829"></a>00829 
<a name="l00830"></a>00830     std::cout &lt;&lt; <span class="stringliteral">&quot;Tree number &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; is:&quot;</span> &lt;&lt;std::endl;
<a name="l00831"></a>00831     (*it)-&gt;PrintTree();
<a name="l00832"></a>00832     std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00833"></a>00833     i++;
<a name="l00834"></a>00834   }
<a name="l00835"></a>00835 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FPhyloPOT_8cpp.shtml">FPhyloPOT.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
