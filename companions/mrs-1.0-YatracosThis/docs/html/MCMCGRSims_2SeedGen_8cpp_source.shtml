<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: SeedGen.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MCMCGRSims_2SeedGen_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MCMCGRSims/SeedGen.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MCMCGRSims_2SeedGen_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="comment">// include header files</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>           <span class="comment">// types needed for integration</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">using namespace </span>std;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="comment">//===================start of main programme================================//</span>
<a name="l00046"></a><a class="code" href="MCMCGRSims_2SeedGen_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00046</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048    <span class="comment">//=======================================================================//</span>
<a name="l00049"></a>00049   <span class="comment">//---set up parameters for data---------------------------------</span>
<a name="l00050"></a>00050    <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number to generate</span>
<a name="l00051"></a>00051    <span class="keywordtype">int</span> H = atoi(argv[2]); <span class="comment">// number of simulations</span>
<a name="l00052"></a>00052    <span class="keywordtype">int</span> d = atoi(argv[3]); <span class="comment">// dimensions</span>
<a name="l00053"></a>00053   <span class="keywordtype">int</span> mix = atoi(argv[4]); <span class="comment">//mix</span>
<a name="l00054"></a>00054    
<a name="l00055"></a>00055   <span class="comment">//read in seed </span>
<a name="l00056"></a>00056   <span class="comment">//string seedFile = &quot;Seed.txt&quot;;</span>
<a name="l00057"></a>00057   <span class="comment">//long s;</span>
<a name="l00058"></a>00058   
<a name="l00059"></a>00059 <span class="comment">//  ifstream infile(seedFile.c_str());</span>
<a name="l00060"></a>00060 <span class="comment">//  while ( !infile.eof() ) {infile &gt;&gt;s;}</span>
<a name="l00061"></a>00061   <span class="comment">//------- prepare to generate some data for the tests -----------</span>
<a name="l00062"></a>00062    <span class="comment">//set up a random number generator for bivariate gaussian rvs</span>
<a name="l00063"></a>00063     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00064"></a>00064     gsl_rng * r;
<a name="l00065"></a>00065    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00066"></a>00066     gsl_rng_env_setup();
<a name="l00067"></a>00067     T = gsl_rng_default;
<a name="l00068"></a>00068     r = gsl_rng_alloc (T);
<a name="l00069"></a>00069     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00070"></a>00070       vector&lt;long&gt; seed_vector;
<a name="l00071"></a>00071    <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00072"></a>00072       gsl_rng_set(r, s);
<a name="l00073"></a>00073      seed_vector.push_back(s);
<a name="l00074"></a>00074     <span class="comment">//---------string formatting-----------------------------------------</span>
<a name="l00075"></a>00075    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00076"></a>00076     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00077"></a>00077     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00078"></a>00078     oss.precision(10);
<a name="l00079"></a>00079    <span class="comment">//=======================================================================//</span>
<a name="l00080"></a>00080   
<a name="l00081"></a>00081     <span class="comment">//=================Setting up parameters for the distribution============//</span>
<a name="l00082"></a>00082     <span class="comment">//data generating partition</span>
<a name="l00083"></a>00083     ivector pavingBox(d);
<a name="l00084"></a>00084     interval pavingInterval(0,1);
<a name="l00085"></a>00085     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00088"></a>00088     <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00089"></a>00089     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00090"></a>00090     <span class="comment">// a container for the boxes</span>
<a name="l00091"></a>00091     vector&lt;ivector&gt; Pboxes;
<a name="l00092"></a>00092     <span class="comment">//mixture shape</span>
<a name="l00093"></a>00093    <span class="keywordtype">string</span> mixShape;
<a name="l00094"></a>00094    <span class="keywordflow">if</span> (mix == 1) {mixShape = <span class="stringliteral">&quot;1,1&quot;</span>; }<span class="comment">// this is the basic uniform</span>
<a name="l00095"></a>00095    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix == 2) { mixShape = <span class="stringliteral">&quot;1,2,2&quot;</span>; }
<a name="l00096"></a>00096    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==3) { mixShape = <span class="stringliteral">&quot;2,3,4,4,3,4,4,2&quot;</span>; }   
<a name="l00097"></a>00097    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mix==4) {mixShape = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; }   
<a name="l00098"></a>00098   
<a name="l00099"></a>00099    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture     </span>
<a name="l00100"></a>00100     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> Pleaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00101"></a>00101     <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l00102"></a>00102     myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(Pleaves); <span class="comment">// fill the container</span>
<a name="l00103"></a>00103     <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00104"></a>00104     <span class="keywordflow">for</span>(it = Pleaves.begin(); it &lt; Pleaves.end(); it++) {
<a name="l00105"></a>00105         Pboxes.push_back((*it)-&gt;getBox());
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107    <span class="keywordtype">size_t</span> PartSize = Pboxes.size();
<a name="l00108"></a>00108   <span class="comment">//=======================================================================//</span>
<a name="l00109"></a>00109    
<a name="l00110"></a>00110    <span class="comment">//=========================Generate data=================================//   </span>
<a name="l00111"></a>00111 
<a name="l00112"></a>00112   
<a name="l00113"></a>00113   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> h=1; h&lt;=H; h++){
<a name="l00114"></a>00114     
<a name="l00115"></a>00115     cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
<a name="l00116"></a>00116       <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00117"></a>00117       <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00118"></a>00118     
<a name="l00119"></a>00119     
<a name="l00120"></a>00120     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00121"></a>00121       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00122"></a>00122       rvector thisrv(d);
<a name="l00123"></a>00123          <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00124"></a>00124          <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) {
<a name="l00125"></a>00125         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);              
<a name="l00126"></a>00126       }
<a name="l00127"></a>00127          <span class="comment">// put points generated into container</span>
<a name="l00128"></a>00128          theData.push_back(thisrv);
<a name="l00129"></a>00129     <span class="comment">//  cout &lt;&lt; thisrv &lt;&lt; endl;</span>
<a name="l00130"></a>00130       }
<a name="l00131"></a>00131   } <span class="comment">// end of loop for histograms</span>
<a name="l00132"></a>00132   
<a name="l00133"></a>00133   
<a name="l00134"></a>00134   <span class="comment">// free the random number generator</span>
<a name="l00135"></a>00135      gsl_rng_free (r);
<a name="l00136"></a>00136     
<a name="l00137"></a>00137      outputFileName = <span class="stringliteral">&quot;Seed.txt&quot;</span>;
<a name="l00138"></a>00138       <span class="comment">//read into file</span>
<a name="l00139"></a>00139     oss.open(outputFileName.c_str());
<a name="l00140"></a>00140     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; seed_vector.size(); i++){
<a name="l00141"></a>00141       oss &lt;&lt; seed_vector[i] &lt;&lt; endl;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143     oss &lt;&lt; flush;
<a name="l00144"></a>00144     oss.close();
<a name="l00145"></a>00145   
<a name="l00146"></a>00146       <span class="keywordflow">return</span> 0;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 } <span class="comment">// end of Uniform MIAE program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MCMCGRSims_2SeedGen_8cpp.shtml">SeedGen.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
