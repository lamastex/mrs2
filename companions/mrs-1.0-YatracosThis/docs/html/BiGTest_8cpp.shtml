<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: BiGTest.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('BiGTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BiGTest.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Testing StatsSubPavings (aka SPSnodes) with Bivariate Gaussian data.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="BivGaussian_2dataprep_8hpp_source.shtml">dataprep.hpp</a>&quot;</code><br/>
</div>
<p><a href="BiGTest_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="BiGTest_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Testing StatsSubPavings (aka SPSnodes) with Bivariate Gaussian data. </p>

<p>Definition in file <a class="el" href="BiGTest_8cpp_source.shtml">BiGTest.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="BiGTest.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="BiGTest_8cpp_source.shtml#l00038">38</a> of file <a class="el" href="BiGTest_8cpp_source.shtml">BiGTest.cpp</a>.</p>

<p>References <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00895">subpavings::AdaptiveHistogram::insertRvectorsFromTxt()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, and <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// ------- prepare to generate some data for the tests -----------</span>

    <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;

    <span class="keywordtype">int</span> i;
    <span class="keyword">const</span> <span class="keywordtype">int</span> n=10000;  <span class="comment">// number to generate</span>
    <span class="keywordtype">double</span> sigma_x=1;   <span class="comment">// distribution parameter</span>
    <span class="keywordtype">double</span> sigma_y=1;   <span class="comment">// distribution parameter</span>
    <span class="keywordtype">double</span> rho=0;       <span class="comment">// x and y uncorrelated</span>

    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>

    gsl_rng_env_setup();

    T = gsl_rng_default;
    r = gsl_rng_alloc (T);

    <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);

    <span class="keywordtype">double</span> *x;
    <span class="keywordtype">double</span> *y;

    x= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// make x and y in dynamic memory</span>
    y= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// (so they must be freed later)</span>

    <span class="keywordtype">double</span>* itx;
    <span class="keywordtype">double</span>* ity;


    <span class="comment">// get n random variates chosen from the bivariate Gaussian</span>
    <span class="comment">// distribution with mean zero and given sigma_x, sigma_y.</span>
    <span class="keywordflow">for</span> (i = 0; i &lt; n; i++)
    {
        gsl_ran_bivariate_gaussian(r, sigma_x, sigma_y,
                                   rho, &amp;x[i], &amp;y[i]);

    }

    <span class="comment">// free the random number generator</span>
    gsl_rng_free (r);

    itx = &amp;x[0];
    ity = &amp;y[0];

    <span class="comment">// create a name for the file to use</span>
    samplesFileName = <span class="stringliteral">&quot;bgSamples.txt&quot;</span>;
    <span class="comment">// output the sample data</span>
    oss.open(samplesFileName.c_str());         <span class="comment">// opens the file</span>

    <span class="keywordflow">for</span>(i=0; i&lt;n; i++) {
        oss &lt;&lt; (*itx) &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (*ity);
        <span class="keywordflow">if</span> (i&lt;n-1) oss &lt;&lt; endl; <span class="comment">// new line if not final line</span>
        itx++;
        ity++;
    }
    oss &lt;&lt; flush;
    oss.close();

    cout &lt;&lt; <span class="stringliteral">&quot;Samples output to &quot;</span> &lt;&lt; samplesFileName &lt;&lt; endl &lt;&lt; endl;

    clock_t start, end;     <span class="comment">// for timing</span>
    <span class="keywordtype">double</span> timeTaken;

    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;

    <span class="comment">// ------ example to create one histogram with splitting value ----</span>
    <span class="comment">// --------------------entered by user ----------------------------</span>

    <span class="comment">// get a count of the lines in the txt file</span>
    <span class="keywordtype">int</span> dataCount = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(samplesFileName);
    <span class="keywordtype">int</span> myK = 0;

    <span class="comment">// tell user how many lines there are in the file</span>
    cout &lt;&lt; <span class="stringliteral">&quot;The file &quot;</span> &lt;&lt; samplesFileName &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; dataCount
            &lt;&lt; <span class="stringliteral">&quot; lines in it&quot;</span> &lt;&lt; endl &lt;&lt; endl;
    <span class="comment">// get a parameter for k</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Enter a parameter for your splitting criteria here please:  &quot;</span>;
    cin &gt;&gt; myK;
    cout &lt;&lt; endl &lt;&lt; endl; <span class="comment">// myK has been input</span>


    <span class="comment">// make an Adaptive Histogram object with no specified box and, by default,</span>
    <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
    <span class="comment">// histogram will not maintain all available stats, only counts</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst;

    start=clock();
    <span class="comment">// clock running</span>

    <span class="comment">// make the function object to decide whether to split.</span>
    <span class="comment">// aim to get max myK data members in each box, default minimum</span>
    <span class="comment">// number of points allowed in each box is 0.</span>
    <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(myK);

    <span class="keywordtype">int</span> dim = 2;
  <span class="keywordtype">size_t</span> headerlines = 0;

    <span class="comment">// insert the data on by one, checking whether to split on each insertion</span>
    successfulInsertion = myHistFirst.insertRvectorsFromTxtOrd(samplesFileName,
            splitK, dim, headerlines, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>); <span class="comment">// no logging</span>

    end=clock();

    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;

    <span class="comment">// only do more if some data was fed in</span>
    <span class="keywordflow">if</span>(successfulInsertion) {

        <span class="comment">// create a name for the file to output</span>
        outputFileName = <span class="stringliteral">&quot;BivGaussianFirst.txt&quot;</span>;
        <span class="comment">// To realize a file output</span>
        myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(outputFileName);
    }

    <span class="comment">// end of example for histogram with splitting value input by user</span>

    successfulInsertion = <span class="keyword">false</span>;
    successfulPQSplit = <span class="keyword">false</span>;

    <span class="comment">// example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to give a minimum number of bins -----------</span>

    <span class="comment">// make an Adaptive Histogram object with no specified box</span>
    <span class="comment">// or splitting value (and holdAllStats again defaults to false),</span>
    <span class="comment">// with the same data</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistSecond;

    start=clock();
    <span class="comment">// clock running</span>

    <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
    successfulInsertion = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);

    <span class="keywordflow">if</span> (successfulInsertion) {

        <span class="comment">// set up function objects for a priority split</span>

        <span class="comment">// function object to compare nodes on count</span>
        <span class="comment">// ie split node with largest count first</span>
        <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;

        <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
        <span class="keywordtype">size_t</span> minLeaves = 50;
        <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);

        <span class="comment">/* minimum points to use when splitting.</span>
<span class="comment">        A node will not be splittable if either child would then have</span>
<span class="comment">        &lt; minPoints of data associated with it. */</span>
        <span class="keywordtype">size_t</span> minPoints = 1;

        <span class="comment">// do the priority split</span>
        successfulPQSplit = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
                critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPoints); <span class="comment">// no logging</span>
    }

    end=clock();

    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;


    <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>

        <span class="comment">// create a name for the file to output</span>
        outputFileName = <span class="stringliteral">&quot;BivGaussianSecond.txt&quot;</span>;
        <span class="comment">// To realize a file output</span>
        myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(outputFileName);

    }

    <span class="keyword">delete</span> x;   <span class="comment">// free dynamic memory used for x and y</span>
    <span class="keyword">delete</span> y;

    <span class="keywordflow">return</span> 0;

} <span class="comment">// end of bivariate gaussian test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="BiGTest_8cpp.shtml">BiGTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:19 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
